
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  08012d28  08012d28  00022d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013800  08013800  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  08013800  08013800  00023800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013808  08013808  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013808  08013808  00023808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801380c  0801380c  0002380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08013810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  20000410  08013c20  00030410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fd4  08013c20  00031fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019209  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003725  00000000  00000000  00049649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0004cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0004e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac35  00000000  00000000  0004f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b40b  00000000  00000000  0006a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0cd0  00000000  00000000  000854f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001261c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee0  00000000  00000000  00126218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000410 	.word	0x20000410
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012d0c 	.word	0x08012d0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000414 	.word	0x20000414
 80001dc:	08012d0c 	.word	0x08012d0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_EMERGENCY>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_EMERGENCY(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[1] = { 0xF0 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f005 f87a 	bl	8006108 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_EMERGENCY+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 1, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_EMERGENCY+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f006 fb3f 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f005 f869 	bl	8006108 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_EMERGENCY+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}

}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000042c 	.word	0x2000042c
 8001050:	20000000 	.word	0x20000000
 8001054:	20000430 	.word	0x20000430

08001058 <ENDEFF_EMERGENCY_QUIT>:
void ENDEFF_EMERGENCY_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0xE5, 0x7A, 0xFF, 0x81 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f005 f852 	bl	8006108 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_EMERGENCY_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2304      	movs	r3, #4
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_EMERGENCY_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f006 fb17 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f005 f841 	bl	8006108 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_EMERGENCY_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000042c 	.word	0x2000042c
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000430 	.word	0x20000430

080010a8 <ENDEFF_TEST_MODE>:
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f005 f82a 	bl	8006108 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_TEST_MODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f006 faef 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f005 f819 	bl	8006108 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_TEST_MODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000042c 	.word	0x2000042c
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000430 	.word	0x20000430

080010f8 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f005 f802 	bl	8006108 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f006 fac7 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f004 fff1 	bl	8006108 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000042c 	.word	0x2000042c
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000430 	.word	0x20000430

08001148 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001150:	f004 ffda 	bl	8006108 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b09      	cmp	r3, #9
 800115e:	d911      	bls.n	8001184 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 800116a:	212a      	movs	r1, #42	; 0x2a
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 fa9f 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001172:	f004 ffc9 	bl	8006108 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 800117a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
		return;
 8001182:	bf00      	nop
	}
}
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000042c 	.word	0x2000042c
 8001190:	20000010 	.word	0x20000010
 8001194:	20000430 	.word	0x20000430

08001198 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 80011a0:	f004 ffb2 	bl	8006108 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d911      	bls.n	80011d4 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_IDLE+0x48>)
 80011ba:	212a      	movs	r1, #42	; 0x2a
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 fa77 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c2:	f004 ffa1 	bl	8006108 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011ca:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_IDLE+0x4c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
		return;
 80011d2:	bf00      	nop
	}
}
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000042c 	.word	0x2000042c
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000430 	.word	0x20000430

080011e8 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011f0:	f004 ff8a 	bl	8006108 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001200:	d311      	bcc.n	8001226 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <ENDEFF_GRIPPER_PICK+0x48>)
 800120c:	212a      	movs	r1, #42	; 0x2a
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f006 fa4e 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001214:	f004 ff78 	bl	8006108 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 800121c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
		return;
 8001224:	bf00      	nop
	}
}
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000042c 	.word	0x2000042c
 8001230:	20000018 	.word	0x20000018
 8001234:	20000430 	.word	0x20000430

08001238 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001240:	f004 ff62 	bl	8006108 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001250:	d311      	bcc.n	8001276 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2302      	movs	r3, #2
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <ENDEFF_GRIPPER_PLACE+0x48>)
 800125c:	212a      	movs	r1, #42	; 0x2a
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f006 fa26 	bl	80076b0 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001264:	f004 ff50 	bl	8006108 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 800126c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <ENDEFF_GRIPPER_PLACE+0x4c>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
		return;
 8001274:	bf00      	nop
	}
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000042c 	.word	0x2000042c
 8001280:	2000001c 	.word	0x2000001c
 8001284:	20000430 	.word	0x20000430

08001288 <ENE_I2C_UPDATE>:

void ENE_I2C_UPDATE(int16_t *DataFrame, I2C_HandleTypeDef *hi2c, uint8_t reinit) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]
	static uint8_t feedback_flag;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;

	if (reinit) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <ENE_I2C_UPDATE+0x20>
		END_EFFECTOR_STATE = INIT;
 800129c:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		feedback_flag = 0;
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	}

	if (feedback_flag && (HAL_GetTick() - feedback_delay > 2200)) {
 80012a8:	4ba4      	ldr	r3, [pc, #656]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <ENE_I2C_UPDATE+0x48>
 80012b0:	f004 ff2a 	bl	8006108 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f640 0298 	movw	r2, #2200	; 0x898
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d905      	bls.n	80012d0 <ENE_I2C_UPDATE+0x48>
		feedback_flag = 0;
 80012c4:	4b9d      	ldr	r3, [pc, #628]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		*DataFrame = 0b0010;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2202      	movs	r2, #2
 80012ce:	801a      	strh	r2, [r3, #0]
	}

	switch (END_EFFECTOR_STATE) {
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f200 813c 	bhi.w	8001552 <ENE_I2C_UPDATE+0x2ca>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <ENE_I2C_UPDATE+0x58>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	0800134f 	.word	0x0800134f
 80012e8:	080013b3 	.word	0x080013b3
 80012ec:	08001497 	.word	0x08001497
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00e      	beq.n	800131e <ENE_I2C_UPDATE+0x96>
			ENDEFF_TEST_MODE(hi2c);
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff fed1 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	f040 8110 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = TEST;
 8001310:	4b89      	ldr	r3, [pc, #548]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800131c:	e108      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8100 	beq.w	8001530 <ENE_I2C_UPDATE+0x2a8>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f7ff ff09 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	f040 80f8 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = RUNMODE;
 8001340:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001342:	2202      	movs	r2, #2
 8001344:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
		break;
 800134c:	e0f0      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <ENE_I2C_UPDATE+0xf4>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff feca 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80e3 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = INIT;
 800136e:	4b72      	ldr	r3, [pc, #456]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800137a:	e0db      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80d3 	beq.w	8001534 <ENE_I2C_UPDATE+0x2ac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff feb2 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fed7 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f040 80c8 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = RUNMODE;
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		break;
 80013b0:	e0c0      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10e      	bne.n	80013e0 <ENE_I2C_UPDATE+0x158>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fee8 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 80bd 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = INIT;
 80013d2:	4b59      	ldr	r3, [pc, #356]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 80013de:	e0b5      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <ENE_I2C_UPDATE+0x186>
			ENDEFF_TEST_MODE(hi2c);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff fe59 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 80a6 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = TEST;
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001406:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
		break;
 800140c:	e09e      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <ENE_I2C_UPDATE+0x1ca>
			ENDEFF_GRIPPER_PICK(hi2c);
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fee2 	bl	80011e8 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 808f 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				feedback_flag = 1;
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001434:	f004 fe68 	bl	8006108 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800143c:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = PICKED;
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
				picked = 1;
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
		break;
 8001450:	e07c      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	b29b      	uxth	r3, r3
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d074      	beq.n	800154c <ENE_I2C_UPDATE+0x2c4>
			if (picked == 1) {
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d170      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
				ENDEFF_GRIPPER_PLACE(hi2c);
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fee4 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d169      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
					feedback_flag = 1;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
					feedback_delay = HAL_GetTick();
 800147e:	f004 fe43 	bl	8006108 <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 8001486:	6013      	str	r3, [r2, #0]
					complete = 0;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
					picked = 0;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		break;
 8001494:	e05a      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <ENE_I2C_UPDATE+0x23a>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fe76 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d14d      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = INIT;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80014c0:	e046      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b0001) == 1) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <ENE_I2C_UPDATE+0x266>
			ENDEFF_TEST_MODE(hi2c);
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fde8 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d137      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = TEST;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		break;
 80014ec:	e030      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d028      	beq.n	8001550 <ENE_I2C_UPDATE+0x2c8>
			ENDEFF_GRIPPER_PLACE(hi2c);
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7ff fe9a 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d121      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				feedback_flag = 1;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001512:	f004 fdf9 	bl	8006108 <HAL_GetTick>
 8001516:	4603      	mov	r3, r0
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800151a:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = RUNMODE;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
				picked = 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		break;
 800152e:	e00f      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		break;
 8001530:	bf00      	nop
 8001532:	e00e      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001534:	bf00      	nop
 8001536:	e00c      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
 8001538:	20000434 	.word	0x20000434
 800153c:	20000435 	.word	0x20000435
 8001540:	20000438 	.word	0x20000438
 8001544:	20000430 	.word	0x20000430
 8001548:	2000043c 	.word	0x2000043c
		break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop

0800155c <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4903      	ldr	r1, [pc, #12]	; (8001570 <UARTInterruptConfig+0x14>)
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <UARTInterruptConfig+0x18>)
 8001566:	f009 fa43 	bl	800a9f0 <HAL_UART_Receive_IT>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000440 	.word	0x20000440
 8001574:	20001da4 	.word	0x20001da4

08001578 <Joystick_Transmit>:

void Joystick_Transmit(int16_t Position_x, int16_t Position_y, uint8_t PicknPlace) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	70fb      	strb	r3, [r7, #3]
	static int LastPos_x;
	static int LastPos_y;
	static int LastState;
	static uint8_t data[5];

	data[0] = Position_x >> 8;
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	121b      	asrs	r3, r3, #8
 8001590:	b21b      	sxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <Joystick_Transmit+0xac>)
 8001596:	701a      	strb	r2, [r3, #0]
	data[1] = Position_x & 0xFF;
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <Joystick_Transmit+0xac>)
 800159e:	705a      	strb	r2, [r3, #1]
	data[2] = Position_y >> 8;
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	121b      	asrs	r3, r3, #8
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <Joystick_Transmit+0xac>)
 80015ac:	709a      	strb	r2, [r3, #2]
	data[3] = Position_y & 0xFF;
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <Joystick_Transmit+0xac>)
 80015b4:	70da      	strb	r2, [r3, #3]
	data[4] = PicknPlace;
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <Joystick_Transmit+0xac>)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	7113      	strb	r3, [r2, #4]

	if (Position_x != LastPos_x || Position_y != LastPos_y || PicknPlace != LastState) {
 80015bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <Joystick_Transmit+0xb0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10a      	bne.n	80015de <Joystick_Transmit+0x66>
 80015c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <Joystick_Transmit+0xb4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d104      	bne.n	80015de <Joystick_Transmit+0x66>
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <Joystick_Transmit+0xb8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d012      	beq.n	8001604 <Joystick_Transmit+0x8c>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() - timestamp > 50) {
 80015de:	f004 fd93 	bl	8006108 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <Joystick_Transmit+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b32      	cmp	r3, #50	; 0x32
 80015ec:	d916      	bls.n	800161c <Joystick_Transmit+0xa4>
			timestamp = HAL_GetTick() + 50;
 80015ee:	f004 fd8b 	bl	8006108 <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <Joystick_Transmit+0xbc>)
 80015f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, data, sizeof(data));
 80015fa:	2205      	movs	r2, #5
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <Joystick_Transmit+0xac>)
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <Joystick_Transmit+0xc0>)
 8001600:	f009 fa26 	bl	800aa50 <HAL_UART_Transmit_DMA>
		} else {
			return;
		}
	}

	LastPos_x = Position_x;
 8001604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <Joystick_Transmit+0xb0>)
 800160a:	6013      	str	r3, [r2, #0]
	LastPos_y = Position_y;
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <Joystick_Transmit+0xb4>)
 8001612:	6013      	str	r3, [r2, #0]
	LastState = PicknPlace;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <Joystick_Transmit+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e000      	b.n	800161e <Joystick_Transmit+0xa6>
			return;
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000444 	.word	0x20000444
 8001628:	2000044c 	.word	0x2000044c
 800162c:	20000450 	.word	0x20000450
 8001630:	20000454 	.word	0x20000454
 8001634:	20000458 	.word	0x20000458
 8001638:	20001da4 	.word	0x20001da4

0800163c <Joystick_Received>:

void Joystick_Received(int *receivedByte) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	static int count;
	static uint8_t tempData[6];
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <Joystick_Received+0x144>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Joystick_Received+0x16>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d009      	beq.n	8001664 <Joystick_Received+0x28>
 8001650:	e08d      	b.n	800176e <Joystick_Received+0x132>
	case (START):
		if (RxBuffer[0] == 69) {
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <Joystick_Received+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b45      	cmp	r3, #69	; 0x45
 8001658:	f040 8088 	bne.w	800176c <Joystick_Received+0x130>
			Joy_State = COUNT;
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <Joystick_Received+0x144>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001662:	e083      	b.n	800176c <Joystick_Received+0x130>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <Joystick_Received+0x148>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b45      	cmp	r3, #69	; 0x45
 800166a:	d111      	bne.n	8001690 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(tempData); i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e007      	b.n	8001682 <Joystick_Received+0x46>
				tempData[i] = 0;
 8001672:	4a45      	ldr	r2, [pc, #276]	; (8001788 <Joystick_Received+0x14c>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d9f4      	bls.n	8001672 <Joystick_Received+0x36>
			}
			count = 0;
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <Joystick_Received+0x150>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			joystick_callback();
		} else {
			tempData[count] = RxBuffer[0];
			count++;
		}
		break;
 800168e:	e06e      	b.n	800176e <Joystick_Received+0x132>
		} else if (RxBuffer[0] == 71 && count < sizeof(tempData)) {
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <Joystick_Received+0x148>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	d115      	bne.n	80016c4 <Joystick_Received+0x88>
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <Joystick_Received+0x150>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d811      	bhi.n	80016c4 <Joystick_Received+0x88>
			for (int i = 0; i < sizeof(tempData); i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	e007      	b.n	80016b6 <Joystick_Received+0x7a>
				tempData[i] = 0;
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <Joystick_Received+0x14c>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d9f4      	bls.n	80016a6 <Joystick_Received+0x6a>
			count = 0;
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <Joystick_Received+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e052      	b.n	800176a <Joystick_Received+0x12e>
		} else if (RxBuffer[0] == 71 && count == 6) {
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <Joystick_Received+0x148>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b47      	cmp	r3, #71	; 0x47
 80016ca:	d142      	bne.n	8001752 <Joystick_Received+0x116>
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <Joystick_Received+0x150>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d13e      	bne.n	8001752 <Joystick_Received+0x116>
			count = 0;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <Joystick_Received+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			receivedByte[0] = (tempData[1] << 8) | tempData[0];
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <Joystick_Received+0x14c>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <Joystick_Received+0x14c>)
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
			receivedByte[1] = (tempData[3] << 8) | tempData[2];
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <Joystick_Received+0x14c>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	021a      	lsls	r2, r3, #8
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <Joystick_Received+0x14c>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	4619      	mov	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
			receivedByte[2] = tempData[4];
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <Joystick_Received+0x14c>)
 8001700:	791a      	ldrb	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3308      	adds	r3, #8
 8001706:	601a      	str	r2, [r3, #0]
			receivedByte[3] = tempData[5];
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <Joystick_Received+0x14c>)
 800170a:	795a      	ldrb	r2, [r3, #5]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330c      	adds	r3, #12
 8001710:	601a      	str	r2, [r3, #0]
			if (receivedByte[0] > UINT16_MAX / 2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800171a:	db06      	blt.n	800172a <Joystick_Received+0xee>
				receivedByte[0] -= UINT16_MAX + 1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00d      	b.n	8001746 <Joystick_Received+0x10a>
			else if (receivedByte[1] > UINT16_MAX / 2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001734:	db07      	blt.n	8001746 <Joystick_Received+0x10a>
				receivedByte[1] -= UINT16_MAX + 1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001744:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <Joystick_Received+0x144>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			joystick_callback();
 800174c:	f002 f9f4 	bl	8003b38 <joystick_callback>
		} else if (RxBuffer[0] == 71 && count == 6) {
 8001750:	e00b      	b.n	800176a <Joystick_Received+0x12e>
			tempData[count] = RxBuffer[0];
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <Joystick_Received+0x150>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <Joystick_Received+0x148>)
 8001758:	7811      	ldrb	r1, [r2, #0]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <Joystick_Received+0x14c>)
 800175c:	54d1      	strb	r1, [r2, r3]
			count++;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <Joystick_Received+0x150>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <Joystick_Received+0x150>)
 8001766:	6013      	str	r3, [r2, #0]
		break;
 8001768:	e001      	b.n	800176e <Joystick_Received+0x132>
 800176a:	e000      	b.n	800176e <Joystick_Received+0x132>
		break;
 800176c:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <Joystick_Received+0x148>)
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <Joystick_Received+0x154>)
 8001774:	f009 f93c 	bl	800a9f0 <HAL_UART_Receive_IT>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000045c 	.word	0x2000045c
 8001784:	20000440 	.word	0x20000440
 8001788:	20000460 	.word	0x20000460
 800178c:	20000468 	.word	0x20000468
 8001790:	20001da4 	.word	0x20001da4

08001794 <lowpass_filter>:
}

//float C1 = ComputeLowpassConstant(20, 10000);
//float C2 = ComputeLowpassConstant(10, 10000);

void lowpass_filter(int QEIReadRaw_now, float *velocity_measure_filter_now, float *acceleration_measure_filter_now){
 8001794:	b480      	push	{r7}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    static int QEIReadRaw_past = 0;
    static float velocity_measure_filter_past = 0;
    float dt = 0.0001;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <lowpass_filter+0xc4>)
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

    float C1 = 20.0 / (20.0 + 10000.0);
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <lowpass_filter+0xc8>)
 80017a6:	623b      	str	r3, [r7, #32]
    float C2 = 10.0 / (10.0 + 10000.0);
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <lowpass_filter+0xcc>)
 80017aa:	61fb      	str	r3, [r7, #28]

    float velocity_measure = (QEIReadRaw_now - QEIReadRaw_past) / dt;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <lowpass_filter+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	edc7 7a06 	vstr	s15, [r7, #24]
    *velocity_measure_filter_now = (C1 * velocity_measure) + ((1 - C1) * (*velocity_measure_filter_now));
 80017c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80017cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80017dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	edc3 7a00 	vstr	s15, [r3]

    float acceleration_measure = (*velocity_measure_filter_now - velocity_measure_filter_past) / dt;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <lowpass_filter+0xd4>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001804:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a05 	vstr	s15, [r7, #20]
    *acceleration_measure_filter_now = (C2 * acceleration_measure) + ((1 - C2) * (*acceleration_measure_filter_now));
 8001810:	ed97 7a07 	vldr	s14, [r7, #28]
 8001814:	edd7 7a05 	vldr	s15, [r7, #20]
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001820:	edd7 7a07 	vldr	s15, [r7, #28]
 8001824:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edc3 7a00 	vstr	s15, [r3]

    velocity_measure_filter_past = *velocity_measure_filter_now;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a09      	ldr	r2, [pc, #36]	; (8001868 <lowpass_filter+0xd4>)
 8001842:	6013      	str	r3, [r2, #0]

    QEIReadRaw_past = QEIReadRaw_now;
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <lowpass_filter+0xd0>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	38d1b717 	.word	0x38d1b717
 800185c:	3b02cf75 	.word	0x3b02cf75
 8001860:	3a82f0e9 	.word	0x3a82f0e9
 8001864:	2000046c 	.word	0x2000046c
 8001868:	20000470 	.word	0x20000470

0800186c <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <modbus_1t5_Timeout+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	751a      	strb	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000474 	.word	0x20000474

0800188c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <modbus_3t5_Timeout+0x1c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	755a      	strb	r2, [r3, #21]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000474 	.word	0x20000474

080018ac <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <modbus_UART_Recived+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <modbus_UART_Recived+0x60>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	b289      	uxth	r1, r1
 80018ca:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80018ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018d2:	d210      	bcs.n	80018f6 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <modbus_UART_Recived+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d8      	ldr	r0, [r3, #12]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <modbus_UART_Recived+0x60>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <modbus_UART_Recived+0x60>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018e6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80018ea:	4413      	add	r3, r2
 80018ec:	3302      	adds	r3, #2
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f009 f87d 	bl	800a9f0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <modbus_UART_Recived+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000474 	.word	0x20000474

08001910 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <Modbus_init+0x9c>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <Modbus_init+0x9c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <Modbus_init+0x9c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <Modbus_init+0xa0>)
 8001930:	2114      	movs	r1, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f008 f8d4 	bl	8009ae0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <Modbus_init+0x9c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Modbus_init+0xa4>)
 8001940:	210e      	movs	r1, #14
 8001942:	4618      	mov	r0, r3
 8001944:	f008 f8cc 	bl	8009ae0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <Modbus_init+0x9c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <Modbus_init+0xa8>)
 8001950:	2103      	movs	r1, #3
 8001952:	4618      	mov	r0, r3
 8001954:	f008 ffa4 	bl	800a8a0 <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Modbus_init+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d8      	ldr	r0, [r3, #12]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <Modbus_init+0x9c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <Modbus_init+0x9c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800196a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800196e:	4413      	add	r3, r2
 8001970:	3302      	adds	r3, #2
 8001972:	2201      	movs	r2, #1
 8001974:	4619      	mov	r1, r3
 8001976:	f009 f83b 	bl	800a9f0 <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Modbus_init+0x9c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d10c      	bne.n	80019a4 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <Modbus_init+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4618      	mov	r0, r3
 8001992:	f006 fee3 	bl	800875c <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <Modbus_init+0x9c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fb98 	bl	80090d4 <HAL_TIM_OnePulse_Start_IT>
	}

}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000474 	.word	0x20000474
 80019b0:	0800186d 	.word	0x0800186d
 80019b4:	0800188d 	.word	0x0800188d
 80019b8:	080018ad 	.word	0x080018ad

080019bc <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80019c8:	23ff      	movs	r3, #255	; 0xff
 80019ca:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80019d0:	e013      	b.n	80019fa <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	4053      	eors	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <CRC16+0x64>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4053      	eors	r3, r2
 80019ee:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <CRC16+0x68>)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80019fa:	883b      	ldrh	r3, [r7, #0]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	803a      	strh	r2, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e6      	bne.n	80019d2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	b29b      	uxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000120 	.word	0x20000120
 8001a24:	20000020 	.word	0x20000020

08001a28 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7e1b      	ldrb	r3, [r3, #24]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d80a      	bhi.n	8001a50 <Modbus_Protocal_Worker+0x28>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <Modbus_Protocal_Worker+0x18>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a5b 	.word	0x08001a5b
 8001a44:	08001bfb 	.word	0x08001bfb
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001b0d 	.word	0x08001b0d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001a50:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]
		break;
 8001a58:	e0e8      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001a66:	f000 f9dd 	bl	8001e24 <Modbus_Emission>
 8001a6a:	e01c      	b.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 8001a6c:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	7d9b      	ldrb	r3, [r3, #22]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001a86:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	f040 80b3 	bne.w	8001c1e <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68d8      	ldr	r0, [r3, #12]
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ad4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f008 ff86 	bl	800a9f0 <HAL_UART_Receive_IT>
		}
		break;
 8001ae4:	e09b      	b.n	8001c1e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	7d1b      	ldrb	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8098 	beq.w	8001c22 <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	22fe      	movs	r2, #254	; 0xfe
 8001b00:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001b0a:	e08a      	b.n	8001c22 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	7d9b      	ldrb	r3, [r3, #22]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b32:	f113 0f02 	cmn.w	r3, #2
 8001b36:	d150      	bne.n	8001bda <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b50:	3b02      	subs	r3, #2
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff ff31 	bl	80019bc <CRC16>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b5e:	793a      	ldrb	r2, [r7, #4]
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10c      	bne.n	8001b92 <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001b78:	797a      	ldrb	r2, [r7, #5]
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b86:	3b01      	subs	r3, #1
 8001b88:	440b      	add	r3, r1
 8001b8a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d004      	beq.n	8001b9c <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	75da      	strb	r2, [r3, #23]
				break;
 8001b9a:	e047      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d113      	bne.n	8001bd6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f103 0019 	add.w	r0, r3, #25
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f203 2372 	addw	r3, r3, #626	; 0x272
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f00a f8c8 	bl	800bd60 <memcpy>

			//execute command
			Modbus_frame_response();
 8001bd0:	f000 f910 	bl	8001df4 <Modbus_frame_response>
 8001bd4:	e001      	b.n	8001bda <Modbus_Protocal_Worker+0x1b2>
				break;
 8001bd6:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001bd8:	e028      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	7d5b      	ldrb	r3, [r3, #21]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 ffaa 	bl	800ab4c <HAL_UART_AbortReceive>
		break;
 8001bf8:	e015      	b.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d10f      	bne.n	8001c2a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	761a      	strb	r2, [r3, #24]
		break;
 8001c1c:	e005      	b.n	8001c2a <Modbus_Protocal_Worker+0x202>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e004      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c2a:	bf00      	nop
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000474 	.word	0x20000474

08001c38 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	7e9b      	ldrb	r3, [r3, #26]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	7edb      	ldrb	r3, [r3, #27]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d903      	bls.n	8001c6a <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f8a4 	bl	8001db0 <ModbusErrorReply>
		return;
 8001c68:	e023      	b.n	8001cb2 <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	7f12      	ldrb	r2, [r2, #28]
 8001c7c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	7f52      	ldrb	r2, [r2, #29]
 8001c90:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f203 1045 	addw	r0, r3, #325	; 0x145
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3319      	adds	r3, #25
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f00a f85c 	bl	800bd60 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2205      	movs	r2, #5
 8001cae:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000474 	.word	0x20000474

08001cbc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <modbusRead1Register+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <modbusRead1Register+0xf0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	7f5b      	ldrb	r3, [r3, #29]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <modbusRead1Register+0xf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <modbusRead1Register+0xf0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7edb      	ldrb	r3, [r3, #27]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <modbusRead1Register+0x42>
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	2b7d      	cmp	r3, #125	; 0x7d
 8001cfc:	d903      	bls.n	8001d06 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f856 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d04:	e04e      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001d06:	88ba      	ldrh	r2, [r7, #4]
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <modbusRead1Register+0xf0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d808      	bhi.n	8001d24 <modbusRead1Register+0x68>
 8001d12:	88ba      	ldrh	r2, [r7, #4]
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <modbusRead1Register+0xf0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d903      	bls.n	8001d2c <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001d24:	2002      	movs	r0, #2
 8001d26:	f000 f843 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d2a:	e03b      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <modbusRead1Register+0xf0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <modbusRead1Register+0xf0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0052      	lsls	r2, r2, #1
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d46:	2400      	movs	r4, #0
 8001d48:	e020      	b.n	8001d8c <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <modbusRead1Register+0xf0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	4423      	add	r3, r4
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	18d1      	adds	r1, r2, r3
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <modbusRead1Register+0xf0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	1c63      	adds	r3, r4, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	7849      	ldrb	r1, [r1, #1]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <modbusRead1Register+0xf0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	4423      	add	r3, r4
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <modbusRead1Register+0xf0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	0063      	lsls	r3, r4, #1
 8001d7e:	3303      	adds	r3, #3
 8001d80:	7809      	ldrb	r1, [r1, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d8a:	3401      	adds	r4, #1
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	dbdb      	blt.n	8001d4a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <modbusRead1Register+0xf0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000474 	.word	0x20000474

08001db0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	7e5a      	ldrb	r2, [r3, #25]
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000474 	.word	0x20000474

08001df4 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <Modbus_frame_response+0x2c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d004      	beq.n	8001e0c <Modbus_frame_response+0x18>
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d105      	bne.n	8001e12 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001e06:	f7ff ff17 	bl	8001c38 <modbusWrite1Register>
		break;
 8001e0a:	e006      	b.n	8001e1a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001e0c:	f7ff ff56 	bl	8001cbc <modbusRead1Register>
		break;
 8001e10:	e003      	b.n	8001e1a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff ffcc 	bl	8001db0 <ModbusErrorReply>
		break;
 8001e18:	bf00      	nop

	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000474 	.word	0x20000474

08001e24 <Modbus_Emission>:

void Modbus_Emission() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d15e      	bne.n	8001ef8 <Modbus_Emission+0xd4>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e62:	461a      	mov	r2, r3
 8001e64:	f009 ff7c 	bl	800bd60 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3203      	adds	r2, #3
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e8e:	3b02      	subs	r3, #2
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd92 	bl	80019bc <CRC16>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	7939      	ldrb	r1, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	7979      	ldrb	r1, [r7, #5]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d10d      	bne.n	8001ef8 <Modbus_Emission+0xd4>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68d8      	ldr	r0, [r3, #12]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f008 fdac 	bl	800aa50 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <Modbus_Emission+0xfc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000474 	.word	0x20000474

08001f24 <PositionControlPID>:

// PRIVATE TYPEDEF ================================================================================

// USER CODE ======================================================================================

void PositionControlPID(float trajectory_setpoint, float final_setpoint, float position_now, float Kp, float Ki, float Kd, float *PID_out) {
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f2e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001f32:	ed87 1a05 	vstr	s2, [r7, #20]
 8001f36:	edc7 1a04 	vstr	s3, [r7, #16]
 8001f3a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001f3e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001f42:	6078      	str	r0, [r7, #4]
	static float first = 0;
	static float second = 0;
	static float third = 0;

	// error position
	error_first = trajectory_setpoint - position_now;
 8001f44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <PositionControlPID+0x100>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
	//Position.error[0] = PID_position - QEIReadRaw_now;

	// first error
	first = (Kp + Ki + Kd) * error_first;
 8001f56:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <PositionControlPID+0x100>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <PositionControlPID+0x104>)
 8001f76:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second = (Kp + (2 * Kd)) * error_second;
 8001f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <PositionControlPID+0x108>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <PositionControlPID+0x10c>)
 8001f96:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third = Kd * error_third;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <PositionControlPID+0x110>)
 8001f9c:	ed93 7a00 	vldr	s14, [r3]
 8001fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <PositionControlPID+0x114>)
 8001faa:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	*PID_out += first - second + third;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	ed93 7a00 	vldr	s14, [r3]
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <PositionControlPID+0x104>)
 8001fb6:	edd3 6a00 	vldr	s13, [r3]
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <PositionControlPID+0x10c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <PositionControlPID+0x114>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edc3 7a00 	vstr	s15, [r3]

	if (error_first == 0 && (final_setpoint - trajectory_setpoint) == 0) {
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <PositionControlPID+0x100>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d10e      	bne.n	8002006 <PositionControlPID+0xe2>
 8001fe8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d103      	bne.n	8002006 <PositionControlPID+0xe2>
		*PID_out = 0; // Reset voltage to 0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
	}

	// set present to past
	error_third = error_second;
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <PositionControlPID+0x108>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <PositionControlPID+0x110>)
 800200c:	6013      	str	r3, [r2, #0]
	error_second = error_first;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <PositionControlPID+0x100>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <PositionControlPID+0x108>)
 8002014:	6013      	str	r3, [r2, #0]

}
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000478 	.word	0x20000478
 8002028:	2000047c 	.word	0x2000047c
 800202c:	20000480 	.word	0x20000480
 8002030:	20000484 	.word	0x20000484
 8002034:	20000488 	.word	0x20000488
 8002038:	2000048c 	.word	0x2000048c

0800203c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002042:	463b      	mov	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <MX_ADC1_Init+0x9c>)
 8002052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_ADC1_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <MX_ADC1_Init+0x98>)
 800206a:	2200      	movs	r2, #0
 800206c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002078:	2200      	movs	r2, #0
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_ADC1_Init+0x98>)
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <MX_ADC1_Init+0xa0>)
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_ADC1_Init+0x98>)
 800208a:	2201      	movs	r2, #1
 800208c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002098:	2201      	movs	r2, #1
 800209a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <MX_ADC1_Init+0x98>)
 800209e:	f004 f863 	bl	8006168 <HAL_ADC_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020a8:	f002 fdb0 	bl	8004c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020ac:	230a      	movs	r3, #10
 80020ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_ADC1_Init+0x98>)
 80020be:	f004 f897 	bl	80061f0 <HAL_ADC_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020c8:	f002 fda0 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000490 	.word	0x20000490
 80020d8:	40012000 	.word	0x40012000
 80020dc:	0f000001 	.word	0x0f000001

080020e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_ADC_MspInit+0x7c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d127      	bne.n	8002152 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_ADC_MspInit+0x80>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800213a:	2303      	movs	r3, #3
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213e:	2303      	movs	r3, #3
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_ADC_MspInit+0x84>)
 800214e:	f004 ff9d 	bl	800708c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40012000 	.word	0x40012000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020800 	.word	0x40020800

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <MX_DMA_Init+0x78>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <MX_DMA_Init+0x78>)
 8002178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_DMA_Init+0x78>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_DMA_Init+0x78>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <MX_DMA_Init+0x78>)
 8002194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_DMA_Init+0x78>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	200f      	movs	r0, #15
 80021ac:	f004 fb29 	bl	8006802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021b0:	200f      	movs	r0, #15
 80021b2:	f004 fb42 	bl	800683a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2011      	movs	r0, #17
 80021bc:	f004 fb21 	bl	8006802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021c0:	2011      	movs	r0, #17
 80021c2:	f004 fb3a 	bl	800683a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2046      	movs	r0, #70	; 0x46
 80021cc:	f004 fb19 	bl	8006802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021d0:	2046      	movs	r0, #70	; 0x46
 80021d2:	f004 fb32 	bl	800683a <HAL_NVIC_EnableIRQ>

}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <MX_GPIO_Init+0x130>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a44      	ldr	r2, [pc, #272]	; (8002314 <MX_GPIO_Init+0x130>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <MX_GPIO_Init+0x130>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <MX_GPIO_Init+0x130>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <MX_GPIO_Init+0x130>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <MX_GPIO_Init+0x130>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <MX_GPIO_Init+0x130>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a36      	ldr	r2, [pc, #216]	; (8002314 <MX_GPIO_Init+0x130>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <MX_GPIO_Init+0x130>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <MX_GPIO_Init+0x130>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <MX_GPIO_Init+0x130>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <MX_GPIO_Init+0x130>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002270:	4829      	ldr	r0, [pc, #164]	; (8002318 <MX_GPIO_Init+0x134>)
 8002272:	f005 f8a7 	bl	80073c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800227c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4823      	ldr	r0, [pc, #140]	; (800231c <MX_GPIO_Init+0x138>)
 800228e:	f004 fefd 	bl	800708c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002292:	2304      	movs	r3, #4
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <MX_GPIO_Init+0x138>)
 80022a6:	f004 fef1 	bl	800708c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022aa:	2308      	movs	r3, #8
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4817      	ldr	r0, [pc, #92]	; (800231c <MX_GPIO_Init+0x138>)
 80022c0:	f004 fee4 	bl	800708c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80022c4:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <MX_GPIO_Init+0x134>)
 80022de:	f004 fed5 	bl	800708c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	480a      	ldr	r0, [pc, #40]	; (8002320 <MX_GPIO_Init+0x13c>)
 80022f8:	f004 fec8 	bl	800708c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2009      	movs	r0, #9
 8002302:	f004 fa7e 	bl	8006802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002306:	2009      	movs	r0, #9
 8002308:	f004 fa97 	bl	800683a <HAL_NVIC_EnableIRQ>

}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020800 	.word	0x40020800
 8002320:	40020400 	.word	0x40020400

08002324 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_I2C1_Init+0x50>)
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <MX_I2C1_Init+0x54>)
 800232c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_I2C1_Init+0x50>)
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <MX_I2C1_Init+0x58>)
 8002332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_I2C1_Init+0x50>)
 8002342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_I2C1_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_I2C1_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_I2C1_Init+0x50>)
 8002362:	f005 f861 	bl	8007428 <HAL_I2C_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800236c:	f002 fc4e 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200004d8 	.word	0x200004d8
 8002378:	40005400 	.word	0x40005400
 800237c:	000186a0 	.word	0x000186a0

08002380 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_I2C_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12b      	bne.n	80023fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c2:	2312      	movs	r3, #18
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ce:	2304      	movs	r3, #4
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <HAL_I2C_MspInit+0x8c>)
 80023da:	f004 fe57 	bl	800708c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40005400 	.word	0x40005400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400

08002410 <motor>:
int32_t getLocalPosition();
int32_t getRawPosition();

// USER CODE ======================================================================================

void motor(float voltage) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 800241a:	edd7 7a01 	vldr	s15, [r7, #4]
 800241e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	dd11      	ble.n	800244c <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8002428:	edd7 7a01 	vldr	s15, [r7, #4]
 800242c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80024c0 <motor+0xb0>
 8002430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	dd01      	ble.n	800243e <motor+0x2e>
			voltage = 25000;
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <motor+0xb4>)
 800243c:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002444:	4820      	ldr	r0, [pc, #128]	; (80024c8 <motor+0xb8>)
 8002446:	f004 ffbd 	bl	80073c4 <HAL_GPIO_WritePin>
 800244a:	e02b      	b.n	80024a4 <motor+0x94>
	} else if (voltage < 0) {
 800244c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d521      	bpl.n	800249e <motor+0x8e>
		// backward
		voltage *= -1.0;
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f87c 	bl	8000558 <__aeabi_f2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fbc6 	bl	8000bf8 <__aeabi_d2f>
 800246c:	4603      	mov	r3, r0
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef1 7a67 	vneg.f32	s15, s15
 8002476:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 800247a:	edd7 7a01 	vldr	s15, [r7, #4]
 800247e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024c0 <motor+0xb0>
 8002482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dd01      	ble.n	8002490 <motor+0x80>
			voltage = 25000;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <motor+0xb4>)
 800248e:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <motor+0xb8>)
 8002498:	f004 ff94 	bl	80073c4 <HAL_GPIO_WritePin>
 800249c:	e002      	b.n	80024a4 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <motor+0xbc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	ee17 2a90 	vmov	r2, s15
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	46c35000 	.word	0x46c35000
 80024c4:	46c35000 	.word	0x46c35000
 80024c8:	40020000 	.word	0x40020000
 80024cc:	2000197c 	.word	0x2000197c

080024d0 <getLocalPosition>:

int32_t getLocalPosition() {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2) - homeoffset;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <getLocalPosition+0x1c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <getLocalPosition+0x20>)
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	1a9b      	subs	r3, r3, r2
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20001a30 	.word	0x20001a30
 80024f0:	2000190c 	.word	0x2000190c

080024f4 <getRawPosition>:

int32_t getRawPosition() {
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <getRawPosition+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	20001a30 	.word	0x20001a30
 800250c:	00000000 	.word	0x00000000

08002510 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8002510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002514:	b0a2      	sub	sp, #136	; 0x88
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800252a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002534:	3208      	adds	r2, #8
 8002536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002544:	3210      	adds	r2, #16
 8002546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 800254e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8002552:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002556:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800255a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800255e:	eeb0 1a46 	vmov.f32	s2, s12
 8002562:	eef0 1a66 	vmov.f32	s3, s13
 8002566:	eeb0 0a47 	vmov.f32	s0, s14
 800256a:	eef0 0a67 	vmov.f32	s1, s15
 800256e:	f000 fba7 	bl	8002cc0 <subtractCoordinates>
 8002572:	eeb0 7a40 	vmov.f32	s14, s0
 8002576:	eef0 7a60 	vmov.f32	s15, s1
 800257a:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800257e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 8002582:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8002586:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800258a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800258e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002592:	eeb0 1a46 	vmov.f32	s2, s12
 8002596:	eef0 1a66 	vmov.f32	s3, s13
 800259a:	eeb0 0a47 	vmov.f32	s0, s14
 800259e:	eef0 0a67 	vmov.f32	s1, s15
 80025a2:	f000 fb8d 	bl	8002cc0 <subtractCoordinates>
 80025a6:	eeb0 7a40 	vmov.f32	s14, s0
 80025aa:	eef0 7a60 	vmov.f32	s15, s1
 80025ae:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80025b2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 80025b6:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80025ba:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80025be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025c6:	eeb0 1a46 	vmov.f32	s2, s12
 80025ca:	eef0 1a66 	vmov.f32	s3, s13
 80025ce:	eeb0 0a47 	vmov.f32	s0, s14
 80025d2:	eef0 0a67 	vmov.f32	s1, s15
 80025d6:	f000 fb73 	bl	8002cc0 <subtractCoordinates>
 80025da:	eeb0 7a40 	vmov.f32	s14, s0
 80025de:	eef0 7a60 	vmov.f32	s15, s1
 80025e2:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80025e6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 80025ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025f2:	eeb0 0a47 	vmov.f32	s0, s14
 80025f6:	eef0 0a67 	vmov.f32	s1, s15
 80025fa:	f000 fb9b 	bl	8002d34 <calculateNorm>
 80025fe:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8002602:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002606:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800260a:	eeb0 0a47 	vmov.f32	s0, s14
 800260e:	eef0 0a67 	vmov.f32	s1, s15
 8002612:	f000 fb8f 	bl	8002d34 <calculateNorm>
 8002616:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 800261a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800261e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	f000 fb83 	bl	8002d34 <calculateNorm>
 800262e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8002632:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002636:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800263a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	d534      	bpl.n	80026ae <localize+0x19e>
 8002644:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002648:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800264c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d52b      	bpl.n	80026ae <localize+0x19e>
 8002656:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800265a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800265e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	d522      	bpl.n	80026ae <localize+0x19e>
		// CASE 1
		*origin = point2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	461a      	mov	r2, r3
 800266c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002674:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 8002678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800267c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 8002688:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800268c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002690:	eeb0 0a47 	vmov.f32	s0, s14
 8002694:	eef0 0a67 	vmov.f32	s1, s15
 8002698:	f000 fb7f 	bl	8002d9a <negateCoordinate>
 800269c:	eeb0 7a40 	vmov.f32	s14, s0
 80026a0:	eef0 7a60 	vmov.f32	s15, s1
 80026a4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80026a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80026ac:	e134      	b.n	8002918 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80026ae:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026b2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	d53e      	bpl.n	800273e <localize+0x22e>
 80026c0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80026c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d535      	bpl.n	800273e <localize+0x22e>
 80026d2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026d6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d52c      	bpl.n	800273e <localize+0x22e>
		// CASE 2
		*origin = point3;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026f0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 80026f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80026f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002700:	eef0 0a67 	vmov.f32	s1, s15
 8002704:	f000 fb49 	bl	8002d9a <negateCoordinate>
 8002708:	eeb0 7a40 	vmov.f32	s14, s0
 800270c:	eef0 7a60 	vmov.f32	s15, s1
 8002710:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002714:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8002718:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800271c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002720:	eeb0 0a47 	vmov.f32	s0, s14
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	f000 fb37 	bl	8002d9a <negateCoordinate>
 800272c:	eeb0 7a40 	vmov.f32	s14, s0
 8002730:	eef0 7a60 	vmov.f32	s15, s1
 8002734:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002738:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800273c:	e0ec      	b.n	8002918 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 800273e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002742:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d52a      	bpl.n	80027a6 <localize+0x296>
 8002750:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002754:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	d521      	bpl.n	80027a6 <localize+0x296>
 8002762:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002766:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800276a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d518      	bpl.n	80027a6 <localize+0x296>
		// CASE 3
		*origin = point1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800277c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002780:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 8002784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002788:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800278c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002790:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 8002794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800279c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80027a4:	e0b8      	b.n	8002918 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80027a6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027aa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	d52a      	bpl.n	800280e <localize+0x2fe>
 80027b8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80027bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d521      	bpl.n	800280e <localize+0x2fe>
 80027ca:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027ce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d518      	bpl.n	800280e <localize+0x2fe>
		// CASE 4
		*origin = point1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027e8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 80027ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f8:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 80027fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002800:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002808:	e883 0003 	stmia.w	r3, {r0, r1}
 800280c:	e084      	b.n	8002918 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 800280e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002812:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	d53e      	bpl.n	800289e <localize+0x38e>
 8002820:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002824:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	d535      	bpl.n	800289e <localize+0x38e>
 8002832:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002836:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d52c      	bpl.n	800289e <localize+0x38e>
		// CASE 5
		*origin = point3;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800284c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002850:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 8002854:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002858:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800285c:	eeb0 0a47 	vmov.f32	s0, s14
 8002860:	eef0 0a67 	vmov.f32	s1, s15
 8002864:	f000 fa99 	bl	8002d9a <negateCoordinate>
 8002868:	eeb0 7a40 	vmov.f32	s14, s0
 800286c:	eef0 7a60 	vmov.f32	s15, s1
 8002870:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002874:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 8002878:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800287c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002880:	eeb0 0a47 	vmov.f32	s0, s14
 8002884:	eef0 0a67 	vmov.f32	s1, s15
 8002888:	f000 fa87 	bl	8002d9a <negateCoordinate>
 800288c:	eeb0 7a40 	vmov.f32	s14, s0
 8002890:	eef0 7a60 	vmov.f32	s15, s1
 8002894:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002898:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800289c:	e03c      	b.n	8002918 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 800289e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028a2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d533      	bpl.n	8002918 <localize+0x408>
 80028b0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80028b4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c0:	d52a      	bpl.n	8002918 <localize+0x408>
 80028c2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028c6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d2:	d521      	bpl.n	8002918 <localize+0x408>
		// CASE 6
		*origin = point2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028e0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 80028e4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80028e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028ec:	eeb0 0a47 	vmov.f32	s0, s14
 80028f0:	eef0 0a67 	vmov.f32	s1, s15
 80028f4:	f000 fa51 	bl	8002d9a <negateCoordinate>
 80028f8:	eeb0 7a40 	vmov.f32	s14, s0
 80028fc:	eef0 7a60 	vmov.f32	s15, s1
 8002900:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002904:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8002908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002914:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8002918:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800291c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d10e      	bne.n	8002944 <localize+0x434>
		if (vector1.y > 0) {
 8002926:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800292a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	dd03      	ble.n	800293c <localize+0x42c>
			*angle = M_PI / 2.0;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4a72      	ldr	r2, [pc, #456]	; (8002b00 <localize+0x5f0>)
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e092      	b.n	8002a62 <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <localize+0x5f4>)
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e08e      	b.n	8002a62 <localize+0x552>
		}
	} else if (vector1.y == 0) {
 8002944:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002948:	eef5 7a40 	vcmp.f32	s15, #0.0
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	d10f      	bne.n	8002972 <localize+0x462>
		if (vector1.x >= 0) {
 8002952:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	db04      	blt.n	800296a <localize+0x45a>
			*angle = 0;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e07b      	b.n	8002a62 <localize+0x552>
		} else {
			*angle = M_PI;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <localize+0x5f8>)
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e077      	b.n	8002a62 <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 8002972:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002976:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800297a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800297e:	ee16 0a90 	vmov	r0, s13
 8002982:	f7fd fde9 	bl	8000558 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	ec43 2b10 	vmov	d0, r2, r3
 800298e:	f00d fe5f 	bl	8010650 <atan>
 8002992:	ec53 2b10 	vmov	r2, r3, d0
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f92d 	bl	8000bf8 <__aeabi_d2f>
 800299e:	ee07 0a90 	vmov	s15, r0
 80029a2:	eef0 7ae7 	vabs.f32	s15, s15
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 80029ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b8:	d51a      	bpl.n	80029f0 <localize+0x4e0>
 80029ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d513      	bpl.n	80029f0 <localize+0x4e0>
			*angle = M_PI + *angle;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdc3 	bl	8000558 <__aeabi_f2d>
 80029d2:	a347      	add	r3, pc, #284	; (adr r3, 8002af0 <localize+0x5e0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fc60 	bl	800029c <__adddf3>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f908 	bl	8000bf8 <__aeabi_d2f>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e038      	b.n	8002a62 <localize+0x552>
		} else if (vector1.x < 0) {
 80029f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d515      	bpl.n	8002a2a <localize+0x51a>
			*angle = M_PI - *angle;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fda8 	bl	8000558 <__aeabi_f2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	a138      	add	r1, pc, #224	; (adr r1, 8002af0 <localize+0x5e0>)
 8002a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a12:	f7fd fc41 	bl	8000298 <__aeabi_dsub>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f8eb 	bl	8000bf8 <__aeabi_d2f>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e01b      	b.n	8002a62 <localize+0x552>
		} else if (vector1.y < 0) {
 8002a2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	d514      	bpl.n	8002a62 <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd8b 	bl	8000558 <__aeabi_f2d>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	a12c      	add	r1, pc, #176	; (adr r1, 8002af8 <localize+0x5e8>)
 8002a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4c:	f7fd fc24 	bl	8000298 <__aeabi_dsub>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ce 	bl	8000bf8 <__aeabi_d2f>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8002a62:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002a72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8002a82:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	d516      	bpl.n	8002abe <localize+0x5ae>
		*angle = *angle + M_PI;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd5f 	bl	8000558 <__aeabi_f2d>
 8002a9a:	a315      	add	r3, pc, #84	; (adr r3, 8002af0 <localize+0x5e0>)
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fbfc 	bl	800029c <__adddf3>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f8a4 	bl	8000bf8 <__aeabi_d2f>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <localize+0x5fc>)
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002abc:	e003      	b.n	8002ac6 <localize+0x5b6>
	} else {
		dir = 1.0;
 8002abe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <localize+0x600>)
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <localize+0x604>)
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ae4:	e0e1      	b.n	8002caa <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aea:	e0d5      	b.n	8002c98 <localize+0x788>
 8002aec:	f3af 8000 	nop.w
 8002af0:	54442d18 	.word	0x54442d18
 8002af4:	400921fb 	.word	0x400921fb
 8002af8:	54442d18 	.word	0x54442d18
 8002afc:	401921fb 	.word	0x401921fb
 8002b00:	3fc90fdb 	.word	0x3fc90fdb
 8002b04:	4096cbe4 	.word	0x4096cbe4
 8002b08:	40490fdb 	.word	0x40490fdb
 8002b0c:	bf800000 	.word	0xbf800000
 8002b10:	08012d28 	.word	0x08012d28
 8002b14:	08012d34 	.word	0x08012d34
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd1b 	bl	8000558 <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd12 	bl	8000558 <__aeabi_f2d>
 8002b34:	4604      	mov	r4, r0
 8002b36:	460d      	mov	r5, r1
 8002b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3388      	adds	r3, #136	; 0x88
 8002b40:	443b      	add	r3, r7
 8002b42:	3b6c      	subs	r3, #108	; 0x6c
 8002b44:	ed93 7a00 	vldr	s14, [r3]
 8002b48:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	ee17 0a90 	vmov	r0, s15
 8002b54:	f7fd fd00 	bl	8000558 <__aeabi_f2d>
 8002b58:	4680      	mov	r8, r0
 8002b5a:	4689      	mov	r9, r1
 8002b5c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002b60:	f00d ff16 	bl	8010990 <cos>
 8002b64:	ec53 2b10 	vmov	r2, r3, d0
 8002b68:	4640      	mov	r0, r8
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	f7fd fd4c 	bl	8000608 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb90 	bl	800029c <__adddf3>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4690      	mov	r8, r2
 8002b82:	4699      	mov	r9, r3
 8002b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	3388      	adds	r3, #136	; 0x88
 8002b8a:	443b      	add	r3, r7
 8002b8c:	3b78      	subs	r3, #120	; 0x78
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fce1 	bl	8000558 <__aeabi_f2d>
 8002b96:	4604      	mov	r4, r0
 8002b98:	460d      	mov	r5, r1
 8002b9a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002b9e:	f00d ff57 	bl	8010a50 <sin>
 8002ba2:	ec53 2b10 	vmov	r2, r3, d0
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fd2d 	bl	8000608 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	f7fd fb6f 	bl	8000298 <__aeabi_dsub>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	441a      	add	r2, r3
 8002bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	18d4      	adds	r4, r2, r3
 8002bd6:	f7fe f80f 	bl	8000bf8 <__aeabi_d2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fcb8 	bl	8000558 <__aeabi_f2d>
 8002be8:	4604      	mov	r4, r0
 8002bea:	460d      	mov	r5, r1
 8002bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3388      	adds	r3, #136	; 0x88
 8002bf4:	443b      	add	r3, r7
 8002bf6:	3b6c      	subs	r3, #108	; 0x6c
 8002bf8:	ed93 7a00 	vldr	s14, [r3]
 8002bfc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	ee17 0a90 	vmov	r0, s15
 8002c08:	f7fd fca6 	bl	8000558 <__aeabi_f2d>
 8002c0c:	4680      	mov	r8, r0
 8002c0e:	4689      	mov	r9, r1
 8002c10:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c14:	f00d ff1c 	bl	8010a50 <sin>
 8002c18:	ec53 2b10 	vmov	r2, r3, d0
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	4649      	mov	r1, r9
 8002c20:	f7fd fcf2 	bl	8000608 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4620      	mov	r0, r4
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	f7fd fb36 	bl	800029c <__adddf3>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4690      	mov	r8, r2
 8002c36:	4699      	mov	r9, r3
 8002c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	3388      	adds	r3, #136	; 0x88
 8002c3e:	443b      	add	r3, r7
 8002c40:	3b78      	subs	r3, #120	; 0x78
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fc87 	bl	8000558 <__aeabi_f2d>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	460d      	mov	r5, r1
 8002c4e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c52:	f00d fe9d 	bl	8010990 <cos>
 8002c56:	ec53 2b10 	vmov	r2, r3, d0
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fcd3 	bl	8000608 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4640      	mov	r0, r8
 8002c68:	4649      	mov	r1, r9
 8002c6a:	f7fd fb17 	bl	800029c <__adddf3>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	441a      	add	r2, r3
 8002c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	18d4      	adds	r4, r2, r3
 8002c8a:	f7fd ffb5 	bl	8000bf8 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 8002c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c94:	3301      	adds	r3, #1
 8002c96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	f77f af3c 	ble.w	8002b18 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 8002ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f77f af19 	ble.w	8002ae6 <localize+0x5d6>

	// dirty fix for angle error
//	if (dir < 0){
//		*angle = *angle - M_PI;
//	}
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3788      	adds	r7, #136	; 0x88
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002cc0 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	eeb0 6a40 	vmov.f32	s12, s0
 8002cca:	eef0 6a60 	vmov.f32	s13, s1
 8002cce:	eeb0 7a41 	vmov.f32	s14, s2
 8002cd2:	eef0 7a61 	vmov.f32	s15, s3
 8002cd6:	ed87 6a04 	vstr	s12, [r7, #16]
 8002cda:	edc7 6a05 	vstr	s13, [r7, #20]
 8002cde:	ed87 7a02 	vstr	s14, [r7, #8]
 8002ce2:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002cf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002d06:	f107 0320 	add.w	r3, r7, #32
 8002d0a:	f107 0218 	add.w	r2, r7, #24
 8002d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d12:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d16:	6a3a      	ldr	r2, [r7, #32]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	ee07 2a10 	vmov	s14, r2
 8002d1e:	ee07 3a90 	vmov	s15, r3
}
 8002d22:	eeb0 0a47 	vmov.f32	s0, s14
 8002d26:	eef0 0a67 	vmov.f32	s1, s15
 8002d2a:	372c      	adds	r7, #44	; 0x2c
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d3e:	eef0 7a60 	vmov.f32	s15, s1
 8002d42:	ed87 7a00 	vstr	s14, [r7]
 8002d46:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8002d4a:	ed97 7a00 	vldr	s14, [r7]
 8002d4e:	edd7 7a00 	vldr	s15, [r7]
 8002d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d56:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	ee17 0a90 	vmov	r0, s15
 8002d6a:	f7fd fbf5 	bl	8000558 <__aeabi_f2d>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	ec43 2b10 	vmov	d0, r2, r3
 8002d76:	f00d ff3d 	bl	8010bf4 <sqrt>
 8002d7a:	ec53 2b10 	vmov	r2, r3, d0
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ff39 	bl	8000bf8 <__aeabi_d2f>
 8002d86:	4603      	mov	r3, r0
 8002d88:	60fb      	str	r3, [r7, #12]
	return norm;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	ee07 3a90 	vmov	s15, r3
}
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002d9a:	b480      	push	{r7}
 8002d9c:	b089      	sub	sp, #36	; 0x24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	eeb0 7a40 	vmov.f32	s14, s0
 8002da4:	eef0 7a60 	vmov.f32	s15, s1
 8002da8:	ed87 7a02 	vstr	s14, [r7, #8]
 8002dac:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db4:	eef1 7a67 	vneg.f32	s15, s15
 8002db8:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc0:	eef1 7a67 	vneg.f32	s15, s15
 8002dc4:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	f107 0210 	add.w	r2, r7, #16
 8002dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	ee07 2a10 	vmov	s14, r2
 8002de0:	ee07 3a90 	vmov	s15, r3
}
 8002de4:	eeb0 0a47 	vmov.f32	s0, s14
 8002de8:	eef0 0a67 	vmov.f32	s1, s15
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init() {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <modbus_init+0x28>)
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <modbus_init+0x2c>)
 8002e00:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <modbus_init+0x28>)
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <modbus_init+0x30>)
 8002e06:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <modbus_init+0x28>)
 8002e0a:	2215      	movs	r2, #21
 8002e0c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <modbus_init+0x28>)
 8002e10:	2246      	movs	r2, #70	; 0x46
 8002e12:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002e14:	4905      	ldr	r1, [pc, #20]	; (8002e2c <modbus_init+0x34>)
 8002e16:	4802      	ldr	r0, [pc, #8]	; (8002e20 <modbus_init+0x28>)
 8002e18:	f7fe fd7a 	bl	8001910 <Modbus_init>
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	2000052c 	.word	0x2000052c
 8002e24:	20001e18 	.word	0x20001e18
 8002e28:	20001c4c 	.word	0x20001c4c
 8002e2c:	20000a04 	.word	0x20000a04

08002e30 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002e38:	f003 f966 	bl	8006108 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <modbus_heartbeat_handler+0x78>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d32c      	bcc.n	8002ea0 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 8002e46:	f003 f95f 	bl	8006108 <HAL_GetTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	33c8      	adds	r3, #200	; 0xc8
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <modbus_heartbeat_handler+0x78>)
 8002e50:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <modbus_heartbeat_handler+0x7c>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	f644 0269 	movw	r2, #18537	; 0x4869
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d106      	bne.n	8002e6c <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e015      	b.n	8002e98 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8002e72:	2b7d      	cmp	r3, #125	; 0x7d
 8002e74:	dc08      	bgt.n	8002e88 <modbus_heartbeat_handler+0x58>
				fail++;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e78:	f993 3000 	ldrsb.w	r3, [r3]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e86:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e8e:	2b09      	cmp	r3, #9
 8002e90:	dd02      	ble.n	8002e98 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <modbus_heartbeat_handler+0x7c>)
 8002e9a:	f645 1261 	movw	r2, #22881	; 0x5961
 8002e9e:	801a      	strh	r2, [r3, #0]
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20001950 	.word	0x20001950
 8002eac:	20000a04 	.word	0x20000a04
 8002eb0:	20001954 	.word	0x20001954

08002eb4 <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <modbus_data_sync+0x218>)
 8002ec6:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b7e      	ldr	r3, [pc, #504]	; (80030cc <modbus_data_sync+0x218>)
 8002ed2:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <modbus_data_sync+0x218>)
 8002ede:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <modbus_data_sync+0x218>)
 8002eea:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b75      	ldr	r3, [pc, #468]	; (80030cc <modbus_data_sync+0x218>)
 8002ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b72      	ldr	r3, [pc, #456]	; (80030cc <modbus_data_sync+0x218>)
 8002f04:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b6e      	ldr	r3, [pc, #440]	; (80030cc <modbus_data_sync+0x218>)
 8002f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <modbus_data_sync+0x218>)
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b67      	ldr	r3, [pc, #412]	; (80030cc <modbus_data_sync+0x218>)
 8002f2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b64      	ldr	r3, [pc, #400]	; (80030cc <modbus_data_sync+0x218>)
 8002f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b60      	ldr	r3, [pc, #384]	; (80030cc <modbus_data_sync+0x218>)
 8002f4a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <modbus_data_sync+0x218>)
 8002f58:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <modbus_data_sync+0x218>)
 8002f66:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 8002f6a:	4b58      	ldr	r3, [pc, #352]	; (80030cc <modbus_data_sync+0x218>)
 8002f6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002f76:	4b55      	ldr	r3, [pc, #340]	; (80030cc <modbus_data_sync+0x218>)
 8002f78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002f82:	4b52      	ldr	r3, [pc, #328]	; (80030cc <modbus_data_sync+0x218>)
 8002f84:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002f8e:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <modbus_data_sync+0x218>)
 8002f90:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_slave_temp;
	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <modbus_data_sync+0x21c>)
 8002f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <modbus_data_sync+0x218>)
 8002fa4:	885b      	ldrh	r3, [r3, #2]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d00f      	beq.n	8002fca <modbus_data_sync+0x116>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002faa:	4b48      	ldr	r3, [pc, #288]	; (80030cc <modbus_data_sync+0x218>)
 8002fac:	885b      	ldrh	r3, [r3, #2]
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fba:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <modbus_data_sync+0x21c>)
 8002fbc:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <modbus_data_sync+0x220>)
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	e017      	b.n	8002ffa <modbus_data_sync+0x146>
	} else if (base_system_status_slave_temp != variables->base_system_status) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fd0:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <modbus_data_sync+0x220>)
 8002fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d00f      	beq.n	8002ffa <modbus_data_sync+0x146>
		MBregisterFrame[0x01].U16 = variables->base_system_status;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <modbus_data_sync+0x218>)
 8002fe4:	805a      	strh	r2, [r3, #2]
		base_system_status_master_temp = variables->base_system_status;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fec:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <modbus_data_sync+0x21c>)
 8002fee:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <modbus_data_sync+0x220>)
 8002ff8:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <modbus_data_sync+0x224>)
 8002ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003000:	461a      	mov	r2, r3
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <modbus_data_sync+0x218>)
 8003004:	889b      	ldrh	r3, [r3, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d00f      	beq.n	800302a <modbus_data_sync+0x176>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <modbus_data_sync+0x218>)
 800300c:	889b      	ldrh	r3, [r3, #4]
 800300e:	b21a      	sxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <modbus_data_sync+0x224>)
 800301c:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <modbus_data_sync+0x228>)
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	e017      	b.n	800305a <modbus_data_sync+0x1a6>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <modbus_data_sync+0x228>)
 8003032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003036:	429a      	cmp	r2, r3
 8003038:	d00f      	beq.n	800305a <modbus_data_sync+0x1a6>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <modbus_data_sync+0x218>)
 8003044:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <modbus_data_sync+0x228>)
 800304e:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <modbus_data_sync+0x224>)
 8003058:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <modbus_data_sync+0x22c>)
 800305c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003060:	461a      	mov	r2, r3
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <modbus_data_sync+0x218>)
 8003064:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003068:	429a      	cmp	r2, r3
 800306a:	d010      	beq.n	800308e <modbus_data_sync+0x1da>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <modbus_data_sync+0x218>)
 800306e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003072:	b21a      	sxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <modbus_data_sync+0x22c>)
 8003080:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <modbus_data_sync+0x230>)
 800308a:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 800308c:	e018      	b.n	80030c0 <modbus_data_sync+0x20c>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <modbus_data_sync+0x230>)
 8003096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309a:	429a      	cmp	r2, r3
 800309c:	d010      	beq.n	80030c0 <modbus_data_sync+0x20c>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <modbus_data_sync+0x218>)
 80030a8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <modbus_data_sync+0x230>)
 80030b4:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <modbus_data_sync+0x22c>)
 80030be:	801a      	strh	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20000a04 	.word	0x20000a04
 80030d0:	20001956 	.word	0x20001956
 80030d4:	20001958 	.word	0x20001958
 80030d8:	2000195a 	.word	0x2000195a
 80030dc:	2000195c 	.word	0x2000195c
 80030e0:	2000195e 	.word	0x2000195e
 80030e4:	20001960 	.word	0x20001960

080030e8 <Set_LED>:
void Set_LED(int LEDnum, int Red, int Green, int Blue);
void Set_Brightness(int brightness);
void WS2812_Send(void);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	b2d9      	uxtb	r1, r3
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <Set_LED+0x58>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <Set_LED+0x58>)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	460a      	mov	r2, r1
 8003110:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	b2d9      	uxtb	r1, r3
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <Set_LED+0x58>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	460a      	mov	r2, r1
 8003120:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2d9      	uxtb	r1, r3
 8003126:	4a06      	ldr	r2, [pc, #24]	; (8003140 <Set_LED+0x58>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	460a      	mov	r2, r1
 8003130:	70da      	strb	r2, [r3, #3]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000a90 	.word	0x20000a90
 8003144:	00000000 	.word	0x00000000

08003148 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b2d      	cmp	r3, #45	; 0x2d
 8003154:	dd01      	ble.n	800315a <Set_Brightness+0x12>
		brightness = 45;
 8003156:	232d      	movs	r3, #45	; 0x2d
 8003158:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e060      	b.n	8003222 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8003160:	4a37      	ldr	r2, [pc, #220]	; (8003240 <Set_Brightness+0xf8>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003168:	4a36      	ldr	r2, [pc, #216]	; (8003244 <Set_Brightness+0xfc>)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8003170:	2301      	movs	r3, #1
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e04f      	b.n	8003216 <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003184:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * 3.14159265 / 180;  // in rad
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7fd f9e5 	bl	8000558 <__aeabi_f2d>
 800318e:	a32a      	add	r3, pc, #168	; (adr r3, 8003238 <Set_Brightness+0xf0>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fd fa38 	bl	8000608 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <Set_Brightness+0x100>)
 80031a6:	f7fd fb59 	bl	800085c <__aeabi_ddiv>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fd21 	bl	8000bf8 <__aeabi_d2f>
 80031b6:	4603      	mov	r3, r0
 80031b8:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / tan(angle);
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <Set_Brightness+0xf8>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9b3 	bl	8000534 <__aeabi_i2d>
 80031ce:	4604      	mov	r4, r0
 80031d0:	460d      	mov	r5, r1
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7fd f9c0 	bl	8000558 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	ec43 2b10 	vmov	d0, r2, r3
 80031e0:	f00d fc8e 	bl	8010b00 <tan>
 80031e4:	ec53 2b10 	vmov	r2, r3, d0
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fd fb36 	bl	800085c <__aeabi_ddiv>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcde 	bl	8000bb8 <__aeabi_d2uiz>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b2d9      	uxtb	r1, r3
 8003200:	4a10      	ldr	r2, [pc, #64]	; (8003244 <Set_Brightness+0xfc>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	460a      	mov	r2, r1
 800320e:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	3301      	adds	r3, #1
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b03      	cmp	r3, #3
 800321a:	ddac      	ble.n	8003176 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b3b      	cmp	r3, #59	; 0x3b
 8003226:	dd9b      	ble.n	8003160 <Set_Brightness+0x18>
		}
	}
#endif
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bdb0      	pop	{r4, r5, r7, pc}
 8003232:	bf00      	nop
 8003234:	f3af 8000 	nop.w
 8003238:	53c8d4f1 	.word	0x53c8d4f1
 800323c:	400921fb 	.word	0x400921fb
 8003240:	20000a90 	.word	0x20000a90
 8003244:	20000b80 	.word	0x20000b80
 8003248:	40668000 	.word	0x40668000

0800324c <WS2812_Send>:

void WS2812_Send(void) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
	if (!datasentflag) {
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <WS2812_Send+0xd0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05a      	beq.n	8003312 <WS2812_Send+0xc6>
		return;
	}
	uint32_t indx = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e036      	b.n	80032d4 <WS2812_Send+0x88>
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8003266:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <WS2812_Send+0xd4>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	492b      	ldr	r1, [pc, #172]	; (8003320 <WS2812_Send+0xd4>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	789b      	ldrb	r3, [r3, #2]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	431a      	orrs	r2, r3
 8003280:	4927      	ldr	r1, [pc, #156]	; (8003320 <WS2812_Send+0xd4>)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	78db      	ldrb	r3, [r3, #3]
 800328a:	4313      	orrs	r3, r2
 800328c:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 800328e:	2317      	movs	r3, #23
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e019      	b.n	80032c8 <WS2812_Send+0x7c>
			if (color & (1 << i)) {
 8003294:	2201      	movs	r2, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <WS2812_Send+0x66>
				pwmData[indx] = 83;  // 2/3 of 125
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <WS2812_Send+0xd8>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2153      	movs	r1, #83	; 0x53
 80032ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80032b0:	e004      	b.n	80032bc <WS2812_Send+0x70>
			} else {
				pwmData[indx] = 42;  // 1/3 of 125
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <WS2812_Send+0xd8>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	212a      	movs	r1, #42	; 0x2a
 80032b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	dae2      	bge.n	8003294 <WS2812_Send+0x48>
	for (int i = 0; i < MAX_LED; i++) {
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	3301      	adds	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b3b      	cmp	r3, #59	; 0x3b
 80032d8:	ddc5      	ble.n	8003266 <WS2812_Send+0x1a>
		}
	}

	for (int i = 0; i < 50; i++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	e00a      	b.n	80032f6 <WS2812_Send+0xaa>
		pwmData[indx] = 0;
 80032e0:	4a10      	ldr	r2, [pc, #64]	; (8003324 <WS2812_Send+0xd8>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2100      	movs	r1, #0
 80032e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b31      	cmp	r3, #49	; 0x31
 80032fa:	ddf1      	ble.n	80032e0 <WS2812_Send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <WS2812_Send+0xd8>)
 8003302:	2100      	movs	r1, #0
 8003304:	4808      	ldr	r0, [pc, #32]	; (8003328 <WS2812_Send+0xdc>)
 8003306:	f005 fc07 	bl	8008b18 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <WS2812_Send+0xd0>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e000      	b.n	8003314 <WS2812_Send+0xc8>
		return;
 8003312:	bf00      	nop
}
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000220 	.word	0x20000220
 8003320:	20000b80 	.word	0x20000b80
 8003324:	20000c70 	.word	0x20000c70
 8003328:	20001ae4 	.word	0x20001ae4

0800332c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d106      	bne.n	800334a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800333c:	2100      	movs	r1, #0
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003340:	f005 fd9a 	bl	8008e78 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
	}
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20001ae4 	.word	0x20001ae4
 8003358:	20000220 	.word	0x20000220
 800335c:	00000000 	.word	0x00000000

08003360 <main_logic>:
void preset_data_xy();
void emergency_handler();

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	ENE_I2C_UPDATE(&variables->end_effector_status, &hi2c1, 0);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3326      	adds	r3, #38	; 0x26
 800336c:	2200      	movs	r2, #0
 800336e:	49aa      	ldr	r1, [pc, #680]	; (8003618 <main_logic+0x2b8>)
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd ff89 	bl	8001288 <ENE_I2C_UPDATE>
	RGB_logic(state, tray_point_n, emergency);
 8003376:	4ba9      	ldr	r3, [pc, #676]	; (800361c <main_logic+0x2bc>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	4ba8      	ldr	r3, [pc, #672]	; (8003620 <main_logic+0x2c0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4619      	mov	r1, r3
 8003382:	4ba8      	ldr	r3, [pc, #672]	; (8003624 <main_logic+0x2c4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 fef8 	bl	800417c <RGB_logic>
	data_report(variables);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb57 	bl	8003a40 <data_report>
	Joystick_Transmit(variables->x_target_position, setpoint_y * 0.3, jog_enable + jog_point_n);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 401e 	ldrsh.w	r4, [r3, #30]
 8003398:	4ba3      	ldr	r3, [pc, #652]	; (8003628 <main_logic+0x2c8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd f8c9 	bl	8000534 <__aeabi_i2d>
 80033a2:	a399      	add	r3, pc, #612	; (adr r3, 8003608 <main_logic+0x2a8>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f92e 	bl	8000608 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f7fd fbd8 	bl	8000b68 <__aeabi_d2iz>
 80033b8:	4603      	mov	r3, r0
 80033ba:	b219      	sxth	r1, r3
 80033bc:	4b9b      	ldr	r3, [pc, #620]	; (800362c <main_logic+0x2cc>)
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	4b9b      	ldr	r3, [pc, #620]	; (8003630 <main_logic+0x2d0>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7fe f8d4 	bl	8001578 <Joystick_Transmit>

	emergency_handler();
 80033d0:	f000 fe88 	bl	80040e4 <emergency_handler>
	if (emergency) {
 80033d4:	4b93      	ldr	r3, [pc, #588]	; (8003624 <main_logic+0x2c4>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f040 8206 	bne.w	80037ea <main_logic+0x48a>
		return;
	}

	x_spam_position(variables);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb8e 	bl	8003b00 <x_spam_position>

	static uint32_t wait_timer;
	switch (state) {
 80033e4:	4b8d      	ldr	r3, [pc, #564]	; (800361c <main_logic+0x2bc>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 8209 	bhi.w	8003800 <main_logic+0x4a0>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <main_logic+0x94>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003437 	.word	0x08003437
 80033fc:	08003523 	.word	0x08003523
 8003400:	08003523 	.word	0x08003523
 8003404:	08003535 	.word	0x08003535
 8003408:	0800356d 	.word	0x0800356d
 800340c:	0800377d 	.word	0x0800377d
 8003410:	080037d3 	.word	0x080037d3
 8003414:	080037df 	.word	0x080037df
	case MSwait:
		if (HAL_GetTick() - wait_timer > 1500) {
 8003418:	f002 fe76 	bl	8006108 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <main_logic+0x2d4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003428:	4293      	cmp	r3, r2
 800342a:	f240 81e0 	bls.w	80037ee <main_logic+0x48e>
			state = MSidle;
 800342e:	4b7b      	ldr	r3, [pc, #492]	; (800361c <main_logic+0x2bc>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003434:	e1db      	b.n	80037ee <main_logic+0x48e>
	case MSidle:
		wait_timer = HAL_GetTick();
 8003436:	f002 fe67 	bl	8006108 <HAL_GetTick>
 800343a:	4603      	mov	r3, r0
 800343c:	4a7d      	ldr	r2, [pc, #500]	; (8003634 <main_logic+0x2d4>)
 800343e:	6013      	str	r3, [r2, #0]
		variables->y_moving_status = 0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	815a      	strh	r2, [r3, #10]
		jog_enable = 0;
 8003446:	4b79      	ldr	r3, [pc, #484]	; (800362c <main_logic+0x2cc>)
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]

		if (variables->base_system_status & 0b1) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <main_logic+0x114>
			// pick mode
			variables->base_system_status = 0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	801a      	strh	r2, [r3, #0]
			state = MSpick;
 8003462:	4b6e      	ldr	r3, [pc, #440]	; (800361c <main_logic+0x2bc>)
 8003464:	2202      	movs	r2, #2
 8003466:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 800346e:	4b6f      	ldr	r3, [pc, #444]	; (800362c <main_logic+0x2cc>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b10) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <main_logic+0x13c>
			// place mode
			variables->base_system_status = 0;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	801a      	strh	r2, [r3, #0]
			state = MSplace;
 800348a:	4b64      	ldr	r3, [pc, #400]	; (800361c <main_logic+0x2bc>)
 800348c:	2203      	movs	r2, #3
 800348e:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <main_logic+0x2cc>)
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b100) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <main_logic+0x16a>
			// home mode
			variables->base_system_status = 0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	801a      	strh	r2, [r3, #0]
			state = MShome;
 80034b2:	4b5a      	ldr	r3, [pc, #360]	; (800361c <main_logic+0x2bc>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 4;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2204      	movs	r2, #4
 80034bc:	815a      	strh	r2, [r3, #10]
			variables->x_target_position = 0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
			//variables->x_moving_status = 1;
		}

		if (variables->base_system_status & 0b1000) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <main_logic+0x19c>
			// start tray mode
			variables->base_system_status = 0;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	801a      	strh	r2, [r3, #0]
			state = MStray;
 80034e0:	4b4e      	ldr	r3, [pc, #312]	; (800361c <main_logic+0x2bc>)
 80034e2:	2205      	movs	r2, #5
 80034e4:	701a      	strb	r2, [r3, #0]
			tray_wait_mode = 0;
 80034e6:	4b54      	ldr	r3, [pc, #336]	; (8003638 <main_logic+0x2d8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
			tray_point_n = 0;
 80034ec:	4b4c      	ldr	r3, [pc, #304]	; (8003620 <main_logic+0x2c0>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
			tray_delay = HAL_GetTick();
 80034f2:	f002 fe09 	bl	8006108 <HAL_GetTick>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a50      	ldr	r2, [pc, #320]	; (800363c <main_logic+0x2dc>)
 80034fa:	6013      	str	r3, [r2, #0]
		}

		if (variables->base_system_status & 0b10000) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8172 	beq.w	80037f2 <main_logic+0x492>
			// point mode
			variables->base_system_status = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	801a      	strh	r2, [r3, #0]
			state = MSpoint;
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <main_logic+0x2bc>)
 8003516:	2206      	movs	r2, #6
 8003518:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 32;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	815a      	strh	r2, [r3, #10]
		}
		break;
 8003520:	e167      	b.n	80037f2 <main_logic+0x492>
	case MSpick: // MSpick or MSplace
	case MSplace:
		variables->x_target_position = setpoint_x;
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <main_logic+0x2e0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b21a      	sxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fae7 	bl	8003b00 <x_spam_position>
		break;
 8003532:	e165      	b.n	8003800 <main_logic+0x4a0>
	case MShome:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8003534:	2108      	movs	r1, #8
 8003536:	4843      	ldr	r0, [pc, #268]	; (8003644 <main_logic+0x2e4>)
 8003538:	f003 ff2c 	bl	8007394 <HAL_GPIO_ReadPin>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <main_logic+0x1ee>
			home_status = 1;
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <main_logic+0x2e8>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
			home_handler();
 8003548:	f000 fa1e 	bl	8003988 <home_handler>
		} else if (!home_status) {
			home_status = 1;
			PID_enable = 0;
			voltage = -8000;
		}
		break;
 800354c:	e153      	b.n	80037f6 <main_logic+0x496>
		} else if (!home_status) {
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <main_logic+0x2e8>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 814f 	bne.w	80037f6 <main_logic+0x496>
			home_status = 1;
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <main_logic+0x2e8>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
			PID_enable = 0;
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <main_logic+0x2ec>)
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
			voltage = -8000;
 8003564:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <main_logic+0x2f0>)
 8003566:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <main_logic+0x2f4>)
 8003568:	601a      	str	r2, [r3, #0]
		break;
 800356a:	e144      	b.n	80037f6 <main_logic+0x496>
	case MStray:
		variables->x_target_position = setpoint_x;
 800356c:	4b34      	ldr	r3, [pc, #208]	; (8003640 <main_logic+0x2e0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b21a      	sxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fac2 	bl	8003b00 <x_spam_position>
		switch (tray_wait_mode) {
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <main_logic+0x2d8>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b04      	cmp	r3, #4
 8003582:	f200 80e7 	bhi.w	8003754 <main_logic+0x3f4>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <main_logic+0x22c>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035a1 	.word	0x080035a1
 8003590:	0800365d 	.word	0x0800365d
 8003594:	08003687 	.word	0x08003687
 8003598:	080036fb 	.word	0x080036fb
 800359c:	08003725 	.word	0x08003725
		case 0:
			// move to pick
			variables->y_moving_status = 8;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2208      	movs	r2, #8
 80035a4:	815a      	strh	r2, [r3, #10]
			setpoint_x = pick[tray_point_n].x * 10;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <main_logic+0x2c0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <main_logic+0x2f8>)
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c0:	ee17 2a90 	vmov	r2, s15
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <main_logic+0x2e0>)
 80035c6:	601a      	str	r2, [r3, #0]
			setpoint_y = pick[tray_point_n].y / 0.03;
 80035c8:	4b15      	ldr	r3, [pc, #84]	; (8003620 <main_logic+0x2c0>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4a22      	ldr	r2, [pc, #136]	; (8003658 <main_logic+0x2f8>)
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ffbe 	bl	8000558 <__aeabi_f2d>
 80035dc:	a30c      	add	r3, pc, #48	; (adr r3, 8003610 <main_logic+0x2b0>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fd f93b 	bl	800085c <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fabb 	bl	8000b68 <__aeabi_d2iz>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a0c      	ldr	r2, [pc, #48]	; (8003628 <main_logic+0x2c8>)
 80035f6:	6013      	str	r3, [r2, #0]
			variables->x_moving_status = 2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
			tray_wait_mode = 1;
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <main_logic+0x2d8>)
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
			break;
 8003604:	e0a6      	b.n	8003754 <main_logic+0x3f4>
 8003606:	bf00      	nop
 8003608:	33333333 	.word	0x33333333
 800360c:	3fd33333 	.word	0x3fd33333
 8003610:	eb851eb8 	.word	0xeb851eb8
 8003614:	3f9eb851 	.word	0x3f9eb851
 8003618:	200004d8 	.word	0x200004d8
 800361c:	20000221 	.word	0x20000221
 8003620:	20001818 	.word	0x20001818
 8003624:	20001814 	.word	0x20001814
 8003628:	20001904 	.word	0x20001904
 800362c:	20001816 	.word	0x20001816
 8003630:	20001817 	.word	0x20001817
 8003634:	20001964 	.word	0x20001964
 8003638:	20001819 	.word	0x20001819
 800363c:	2000181c 	.word	0x2000181c
 8003640:	20001908 	.word	0x20001908
 8003644:	40020800 	.word	0x40020800
 8003648:	20001815 	.word	0x20001815
 800364c:	20000222 	.word	0x20000222
 8003650:	20001820 	.word	0x20001820
 8003654:	c5fa0000 	.word	0xc5fa0000
 8003658:	20001850 	.word	0x20001850
		case 1:
			// wait for move to finish then pick
			if (move_finished(10)) {
 800365c:	200a      	movs	r0, #10
 800365e:	f000 fbc3 	bl	8003de8 <move_finished>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d06e      	beq.n	8003746 <main_logic+0x3e6>
				end_effector_gripper(variables, 0);
 8003668:	2100      	movs	r1, #0
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f962 	bl	8003934 <end_effector_gripper>
				tray_wait_mode = 2;
 8003670:	4b69      	ldr	r3, [pc, #420]	; (8003818 <main_logic+0x4b8>)
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 8003676:	f002 fd47 	bl	8006108 <HAL_GetTick>
 800367a:	4603      	mov	r3, r0
 800367c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8003680:	4a66      	ldr	r2, [pc, #408]	; (800381c <main_logic+0x4bc>)
 8003682:	6013      	str	r3, [r2, #0]
			}
			break;
 8003684:	e05f      	b.n	8003746 <main_logic+0x3e6>
		case 2:
			// wait for pick to finish then move to place
			if (HAL_GetTick() >= tray_delay) {
 8003686:	f002 fd3f 	bl	8006108 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	4b63      	ldr	r3, [pc, #396]	; (800381c <main_logic+0x4bc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d35a      	bcc.n	800374a <main_logic+0x3ea>
				variables->y_moving_status = 16;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2210      	movs	r2, #16
 8003698:	815a      	strh	r2, [r3, #10]
				setpoint_x = place[tray_point_n].x * 10;
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <main_logic+0x4c0>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4a61      	ldr	r2, [pc, #388]	; (8003824 <main_logic+0x4c4>)
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b4:	ee17 2a90 	vmov	r2, s15
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <main_logic+0x4c8>)
 80036ba:	601a      	str	r2, [r3, #0]
				setpoint_y = place[tray_point_n].y / 0.03;
 80036bc:	4b58      	ldr	r3, [pc, #352]	; (8003820 <main_logic+0x4c0>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <main_logic+0x4c4>)
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc ff44 	bl	8000558 <__aeabi_f2d>
 80036d0:	a34d      	add	r3, pc, #308	; (adr r3, 8003808 <main_logic+0x4a8>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fd f8c1 	bl	800085c <__aeabi_ddiv>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7fd fa41 	bl	8000b68 <__aeabi_d2iz>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a50      	ldr	r2, [pc, #320]	; (800382c <main_logic+0x4cc>)
 80036ea:	6013      	str	r3, [r2, #0]
				variables->x_moving_status = 2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
				tray_wait_mode = 3;
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <main_logic+0x4b8>)
 80036f4:	2203      	movs	r2, #3
 80036f6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036f8:	e027      	b.n	800374a <main_logic+0x3ea>
		case 3:
			// wait for move to place then place
			if (move_finished(10)) {
 80036fa:	200a      	movs	r0, #10
 80036fc:	f000 fb74 	bl	8003de8 <move_finished>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d023      	beq.n	800374e <main_logic+0x3ee>
				end_effector_gripper(variables, 1);
 8003706:	2101      	movs	r1, #1
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f913 	bl	8003934 <end_effector_gripper>
				tray_wait_mode = 4;
 800370e:	4b42      	ldr	r3, [pc, #264]	; (8003818 <main_logic+0x4b8>)
 8003710:	2204      	movs	r2, #4
 8003712:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 8003714:	f002 fcf8 	bl	8006108 <HAL_GetTick>
 8003718:	4603      	mov	r3, r0
 800371a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800371e:	4a3f      	ldr	r2, [pc, #252]	; (800381c <main_logic+0x4bc>)
 8003720:	6013      	str	r3, [r2, #0]
			}
			break;
 8003722:	e014      	b.n	800374e <main_logic+0x3ee>
		case 4:
			// wait for place to finish then reset to state 0
			if (HAL_GetTick() >= tray_delay) {
 8003724:	f002 fcf0 	bl	8006108 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	4b3c      	ldr	r3, [pc, #240]	; (800381c <main_logic+0x4bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d30f      	bcc.n	8003752 <main_logic+0x3f2>
				tray_wait_mode = 0;
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <main_logic+0x4b8>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
				tray_point_n++;
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <main_logic+0x4c0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <main_logic+0x4c0>)
 8003742:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003744:	e005      	b.n	8003752 <main_logic+0x3f2>
			break;
 8003746:	bf00      	nop
 8003748:	e004      	b.n	8003754 <main_logic+0x3f4>
			break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <main_logic+0x3f4>
			break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <main_logic+0x3f4>
			break;
 8003752:	bf00      	nop
		}
		if (tray_point_n >= 9) {
 8003754:	4b32      	ldr	r3, [pc, #200]	; (8003820 <main_logic+0x4c0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d94e      	bls.n	80037fa <main_logic+0x49a>
			setpoint_y = 0;
 800375c:	4b33      	ldr	r3, [pc, #204]	; (800382c <main_logic+0x4cc>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
			tray_point_n = 0;
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <main_logic+0x4c0>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
			variables->x_target_position = 0;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
			state = MSidle;
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <main_logic+0x4d0>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
		}
		break;
 800377a:	e03e      	b.n	80037fa <main_logic+0x49a>
	case MSpoint:
		setpoint_y = variables->goal_point_y / 0.3;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fed6 	bl	8000534 <__aeabi_i2d>
 8003788:	a321      	add	r3, pc, #132	; (adr r3, 8003810 <main_logic+0x4b0>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fd f865 	bl	800085c <__aeabi_ddiv>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9e5 	bl	8000b68 <__aeabi_d2iz>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <main_logic+0x4cc>)
 80037a2:	6013      	str	r3, [r2, #0]
		variables->x_target_position = variables->goal_point_x;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	83da      	strh	r2, [r3, #30]
		variables->x_moving_status = 2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28

		if (abs(setpoint_y - getLocalPosition()) < 10) {
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <main_logic+0x4cc>)
 80037b6:	681c      	ldr	r4, [r3, #0]
 80037b8:	f7fe fe8a 	bl	80024d0 <getLocalPosition>
 80037bc:	4603      	mov	r3, r0
 80037be:	1ae3      	subs	r3, r4, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bfb8      	it	lt
 80037c4:	425b      	neglt	r3, r3
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	dc19      	bgt.n	80037fe <main_logic+0x49e>
			state = MSwait;
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <main_logic+0x4d0>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80037d0:	e015      	b.n	80037fe <main_logic+0x49e>
	case MStestY:
		preset_data_y_only();
 80037d2:	f000 fb35 	bl	8003e40 <preset_data_y_only>
		state = MSidle;
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <main_logic+0x4d0>)
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
		break;
 80037dc:	e010      	b.n	8003800 <main_logic+0x4a0>
	case MStestXY:
		preset_data_xy();
 80037de:	f000 fb87 	bl	8003ef0 <preset_data_xy>
		state = MSidle;
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <main_logic+0x4d0>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
		break;
 80037e8:	e00a      	b.n	8003800 <main_logic+0x4a0>
		return;
 80037ea:	bf00      	nop
 80037ec:	e008      	b.n	8003800 <main_logic+0x4a0>
		break;
 80037ee:	bf00      	nop
 80037f0:	e006      	b.n	8003800 <main_logic+0x4a0>
		break;
 80037f2:	bf00      	nop
 80037f4:	e004      	b.n	8003800 <main_logic+0x4a0>
		break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <main_logic+0x4a0>
		break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <main_logic+0x4a0>
		break;
 80037fe:	bf00      	nop
	}
}
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	bf00      	nop
 8003808:	eb851eb8 	.word	0xeb851eb8
 800380c:	3f9eb851 	.word	0x3f9eb851
 8003810:	33333333 	.word	0x33333333
 8003814:	3fd33333 	.word	0x3fd33333
 8003818:	20001819 	.word	0x20001819
 800381c:	2000181c 	.word	0x2000181c
 8003820:	20001818 	.word	0x20001818
 8003824:	20001898 	.word	0x20001898
 8003828:	20001908 	.word	0x20001908
 800382c:	20001904 	.word	0x20001904
 8003830:	20000221 	.word	0x20000221

08003834 <interrupt_logic>:

void interrupt_logic() {
 8003834:	b580      	push	{r7, lr}
 8003836:	ed2d 8b02 	vpush	{d8}
 800383a:	af00      	add	r7, sp, #0
	// Call trajectory function
	Trajectory(setpoint_y, 34000, 60000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 0);
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <interrupt_logic+0xc8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003848:	2300      	movs	r3, #0
 800384a:	4a2d      	ldr	r2, [pc, #180]	; (8003900 <interrupt_logic+0xcc>)
 800384c:	492d      	ldr	r1, [pc, #180]	; (8003904 <interrupt_logic+0xd0>)
 800384e:	482e      	ldr	r0, [pc, #184]	; (8003908 <interrupt_logic+0xd4>)
 8003850:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800390c <interrupt_logic+0xd8>
 8003854:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8003910 <interrupt_logic+0xdc>
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	f001 fec0 	bl	80055e0 <Trajectory>

	lowpass_filter(getRawPosition(), &actual_velocity, &actual_acceleration);
 8003860:	f7fe fe48 	bl	80024f4 <getRawPosition>
 8003864:	4603      	mov	r3, r0
 8003866:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <interrupt_logic+0xe0>)
 8003868:	492b      	ldr	r1, [pc, #172]	; (8003918 <interrupt_logic+0xe4>)
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd ff92 	bl	8001794 <lowpass_filter>

	// Call PID function
	if (PID_enable) {
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <interrupt_logic+0xe8>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d035      	beq.n	80038e4 <interrupt_logic+0xb0>
		static int count = 0;
		count++;
 8003878:	4b29      	ldr	r3, [pc, #164]	; (8003920 <interrupt_logic+0xec>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	4a28      	ldr	r2, [pc, #160]	; (8003920 <interrupt_logic+0xec>)
 8003880:	6013      	str	r3, [r2, #0]
		if (count >= 5) {
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <interrupt_logic+0xec>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b04      	cmp	r3, #4
 8003888:	dd2c      	ble.n	80038e4 <interrupt_logic+0xb0>
			PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage);
 800388a:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <interrupt_logic+0xd4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003896:	4b19      	ldr	r3, [pc, #100]	; (80038fc <interrupt_logic+0xc8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80038a2:	f7fe fe15 	bl	80024d0 <getLocalPosition>
 80038a6:	ee07 0a90 	vmov	s15, r0
 80038aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <interrupt_logic+0xf0>)
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <interrupt_logic+0xf4>)
 80038b6:	edd3 6a00 	vldr	s13, [r3]
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <interrupt_logic+0xf8>)
 80038bc:	ed93 6a00 	vldr	s12, [r3]
 80038c0:	481b      	ldr	r0, [pc, #108]	; (8003930 <interrupt_logic+0xfc>)
 80038c2:	eef0 2a46 	vmov.f32	s5, s12
 80038c6:	eeb0 2a66 	vmov.f32	s4, s13
 80038ca:	eef0 1a47 	vmov.f32	s3, s14
 80038ce:	eeb0 1a67 	vmov.f32	s2, s15
 80038d2:	eef0 0a68 	vmov.f32	s1, s17
 80038d6:	eeb0 0a48 	vmov.f32	s0, s16
 80038da:	f7fe fb23 	bl	8001f24 <PositionControlPID>
			count = 0;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <interrupt_logic+0xec>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
		}
	}

	// Call motor function
	motor(voltage);
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <interrupt_logic+0xfc>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	eeb0 0a67 	vmov.f32	s0, s15
 80038ee:	f7fe fd8f 	bl	8002410 <motor>
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	ecbd 8b02 	vpop	{d8}
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20001904 	.word	0x20001904
 8003900:	2000182c 	.word	0x2000182c
 8003904:	20001828 	.word	0x20001828
 8003908:	20001824 	.word	0x20001824
 800390c:	476a6000 	.word	0x476a6000
 8003910:	4704d000 	.word	0x4704d000
 8003914:	20001834 	.word	0x20001834
 8003918:	20001830 	.word	0x20001830
 800391c:	20000222 	.word	0x20000222
 8003920:	20001968 	.word	0x20001968
 8003924:	20000224 	.word	0x20000224
 8003928:	20000228 	.word	0x20000228
 800392c:	2000022c 	.word	0x2000022c
 8003930:	20001820 	.word	0x20001820

08003934 <end_effector_gripper>:

void end_effector_gripper(MB *variables, uint8_t mode) {
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
	if ((variables->end_effector_status & 0b0010) == 0) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003946:	b29b      	uxth	r3, r3
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d014      	beq.n	800397a <end_effector_gripper+0x46>
		return;
	}

	if (!mode) {
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <end_effector_gripper+0x34>
		// pick
		variables->end_effector_status |= 0b0100;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	b21a      	sxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	84da      	strh	r2, [r3, #38]	; 0x26
 8003966:	e009      	b.n	800397c <end_effector_gripper+0x48>
	} else {
		// place
		variables->end_effector_status |= 0b1000;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800396e:	f043 0308 	orr.w	r3, r3, #8
 8003972:	b21a      	sxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26
 8003978:	e000      	b.n	800397c <end_effector_gripper+0x48>
		return;
 800397a:	bf00      	nop
	}
}
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <home_handler>:
		// on
		variables->end_effector_status |= 0b0001;
	}
}

void home_handler() {
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	if (!home_status) {
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <home_handler+0x84>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d037      	beq.n	8003a04 <home_handler+0x7c>
		return;
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 8003994:	2108      	movs	r1, #8
 8003996:	481e      	ldr	r0, [pc, #120]	; (8003a10 <home_handler+0x88>)
 8003998:	f003 fcfc 	bl	8007394 <HAL_GPIO_ReadPin>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d032      	beq.n	8003a08 <home_handler+0x80>
		return;
	}
	motor(0);
 80039a2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003a14 <home_handler+0x8c>
 80039a6:	f7fe fd33 	bl	8002410 <motor>
	homeoffset = getRawPosition() + 11500;
 80039aa:	f7fe fda3 	bl	80024f4 <getRawPosition>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 80039b4:	332c      	adds	r3, #44	; 0x2c
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <home_handler+0x90>)
 80039b8:	6013      	str	r3, [r2, #0]
	setpointtraj_y = -11500;
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <home_handler+0x94>)
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <home_handler+0x98>)
 80039be:	601a      	str	r2, [r3, #0]
	setpoint_y = -11500;
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <home_handler+0x9c>)
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <home_handler+0x98>)
 80039c4:	601a      	str	r2, [r3, #0]
	Trajectory(setpoint_y, 34000, 80000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 1);
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <home_handler+0x9c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d2:	2301      	movs	r3, #1
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <home_handler+0xa0>)
 80039d6:	4915      	ldr	r1, [pc, #84]	; (8003a2c <home_handler+0xa4>)
 80039d8:	4810      	ldr	r0, [pc, #64]	; (8003a1c <home_handler+0x94>)
 80039da:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8003a30 <home_handler+0xa8>
 80039de:	eddf 0a15 	vldr	s1, [pc, #84]	; 8003a34 <home_handler+0xac>
 80039e2:	eeb0 0a67 	vmov.f32	s0, s15
 80039e6:	f001 fdfb 	bl	80055e0 <Trajectory>
	home_status = 0;
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <home_handler+0x84>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
	PID_enable = 1;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <home_handler+0xb0>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
	state = MSwait;
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <home_handler+0xb4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
	setpoint_y = 0;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <home_handler+0x9c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e002      	b.n	8003a0a <home_handler+0x82>
		return;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <home_handler+0x82>
		return;
 8003a08:	bf00      	nop
}
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20001815 	.word	0x20001815
 8003a10:	40020800 	.word	0x40020800
 8003a14:	00000000 	.word	0x00000000
 8003a18:	2000190c 	.word	0x2000190c
 8003a1c:	20001824 	.word	0x20001824
 8003a20:	ffffd314 	.word	0xffffd314
 8003a24:	20001904 	.word	0x20001904
 8003a28:	2000182c 	.word	0x2000182c
 8003a2c:	20001828 	.word	0x20001828
 8003a30:	479c4000 	.word	0x479c4000
 8003a34:	4704d000 	.word	0x4704d000
 8003a38:	20000222 	.word	0x20000222
 8003a3c:	20000221 	.word	0x20000221

08003a40 <data_report>:

void data_report(MB *variables) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	variables->y_actual_position = getLocalPosition() * 0.3;
 8003a48:	f7fe fd42 	bl	80024d0 <getLocalPosition>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fd70 	bl	8000534 <__aeabi_i2d>
 8003a54:	a326      	add	r3, pc, #152	; (adr r3, 8003af0 <data_report+0xb0>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fdd5 	bl	8000608 <__aeabi_dmul>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f7fd f87f 	bl	8000b68 <__aeabi_d2iz>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	b21a      	sxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	819a      	strh	r2, [r3, #12]
	variables->y_actual_speed = abs(actual_velocity) * 0.3;
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <data_report+0xb8>)
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a7c:	ee17 3a90 	vmov	r3, s15
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bfb8      	it	lt
 8003a84:	425b      	neglt	r3, r3
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fc fd54 	bl	8000534 <__aeabi_i2d>
 8003a8c:	a318      	add	r3, pc, #96	; (adr r3, 8003af0 <data_report+0xb0>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fc fdb9 	bl	8000608 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f7fd f863 	bl	8000b68 <__aeabi_d2iz>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	81da      	strh	r2, [r3, #14]
	variables->y_actual_acceleration = abs(actual_acceleration) * 0.3;
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <data_report+0xbc>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab4:	ee17 3a90 	vmov	r3, s15
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bfb8      	it	lt
 8003abc:	425b      	neglt	r3, r3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fd38 	bl	8000534 <__aeabi_i2d>
 8003ac4:	a30a      	add	r3, pc, #40	; (adr r3, 8003af0 <data_report+0xb0>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fd9d 	bl	8000608 <__aeabi_dmul>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f847 	bl	8000b68 <__aeabi_d2iz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b21a      	sxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	821a      	strh	r2, [r3, #16]
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
 8003af0:	33333333 	.word	0x33333333
 8003af4:	3fd33333 	.word	0x3fd33333
 8003af8:	20001830 	.word	0x20001830
 8003afc:	20001834 	.word	0x20001834

08003b00 <x_spam_position>:

void x_spam_position(MB *variables) {
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	if ((variables->x_actual_position - variables->x_target_position) != 0 && variables->x_moving_status == 0) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d007      	beq.n	8003b28 <x_spam_position+0x28>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <x_spam_position+0x28>
		variables->x_moving_status = 2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28
	}
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	0000      	movs	r0, r0
	...

08003b38 <joystick_callback>:

void joystick_callback() {
 8003b38:	b598      	push	{r3, r4, r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	if (!jog_enable) {
 8003b3c:	4b96      	ldr	r3, [pc, #600]	; (8003d98 <joystick_callback+0x260>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 811d 	beq.w	8003d80 <joystick_callback+0x248>
		return;
	}

	setpoint_x += receivedByte[0];
 8003b46:	4b95      	ldr	r3, [pc, #596]	; (8003d9c <joystick_callback+0x264>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b95      	ldr	r3, [pc, #596]	; (8003da0 <joystick_callback+0x268>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a93      	ldr	r2, [pc, #588]	; (8003da0 <joystick_callback+0x268>)
 8003b52:	6013      	str	r3, [r2, #0]
	setpoint_y += receivedByte[1];
 8003b54:	4b91      	ldr	r3, [pc, #580]	; (8003d9c <joystick_callback+0x264>)
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	4b92      	ldr	r3, [pc, #584]	; (8003da4 <joystick_callback+0x26c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	4a91      	ldr	r2, [pc, #580]	; (8003da4 <joystick_callback+0x26c>)
 8003b60:	6013      	str	r3, [r2, #0]

	if (setpoint_x > 1400) {
 8003b62:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <joystick_callback+0x268>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003b6a:	dd04      	ble.n	8003b76 <joystick_callback+0x3e>
		setpoint_x = 1400;
 8003b6c:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <joystick_callback+0x268>)
 8003b6e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e007      	b.n	8003b86 <joystick_callback+0x4e>
	} else if (setpoint_x < -1400) {
 8003b76:	4b8a      	ldr	r3, [pc, #552]	; (8003da0 <joystick_callback+0x268>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f513 6faf 	cmn.w	r3, #1400	; 0x578
 8003b7e:	da02      	bge.n	8003b86 <joystick_callback+0x4e>
		setpoint_x = -1400;
 8003b80:	4b87      	ldr	r3, [pc, #540]	; (8003da0 <joystick_callback+0x268>)
 8003b82:	4a89      	ldr	r2, [pc, #548]	; (8003da8 <joystick_callback+0x270>)
 8003b84:	601a      	str	r2, [r3, #0]
	}

	if (setpoint_y > 11667) {
 8003b86:	4b87      	ldr	r3, [pc, #540]	; (8003da4 <joystick_callback+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	dd04      	ble.n	8003b9c <joystick_callback+0x64>
		setpoint_y = 11667;
 8003b92:	4b84      	ldr	r3, [pc, #528]	; (8003da4 <joystick_callback+0x26c>)
 8003b94:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e007      	b.n	8003bac <joystick_callback+0x74>
	} else if (setpoint_y < -11667) {
 8003b9c:	4b81      	ldr	r3, [pc, #516]	; (8003da4 <joystick_callback+0x26c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a82      	ldr	r2, [pc, #520]	; (8003dac <joystick_callback+0x274>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	da02      	bge.n	8003bac <joystick_callback+0x74>
		setpoint_y = -11667;
 8003ba6:	4b7f      	ldr	r3, [pc, #508]	; (8003da4 <joystick_callback+0x26c>)
 8003ba8:	4a80      	ldr	r2, [pc, #512]	; (8003dac <joystick_callback+0x274>)
 8003baa:	601a      	str	r2, [r3, #0]
	}

	if (receivedByte[2]) {
 8003bac:	4b7b      	ldr	r3, [pc, #492]	; (8003d9c <joystick_callback+0x264>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d036      	beq.n	8003c22 <joystick_callback+0xea>
		corners[jog_point_n].x = setpoint_x / 10.0;
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <joystick_callback+0x268>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fcbb 	bl	8000534 <__aeabi_i2d>
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	4b7b      	ldr	r3, [pc, #492]	; (8003db0 <joystick_callback+0x278>)
 8003bc4:	f7fc fe4a 	bl	800085c <__aeabi_ddiv>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4979      	ldr	r1, [pc, #484]	; (8003db4 <joystick_callback+0x27c>)
 8003bce:	7809      	ldrb	r1, [r1, #0]
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f7fd f80f 	bl	8000bf8 <__aeabi_d2f>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	4976      	ldr	r1, [pc, #472]	; (8003db8 <joystick_callback+0x280>)
 8003bde:	00e3      	lsls	r3, r4, #3
 8003be0:	440b      	add	r3, r1
 8003be2:	601a      	str	r2, [r3, #0]
		corners[jog_point_n].y = setpoint_y * 0.03;
 8003be4:	4b6f      	ldr	r3, [pc, #444]	; (8003da4 <joystick_callback+0x26c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fca3 	bl	8000534 <__aeabi_i2d>
 8003bee:	a366      	add	r3, pc, #408	; (adr r3, 8003d88 <joystick_callback+0x250>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fd08 	bl	8000608 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	496d      	ldr	r1, [pc, #436]	; (8003db4 <joystick_callback+0x27c>)
 8003bfe:	7809      	ldrb	r1, [r1, #0]
 8003c00:	460c      	mov	r4, r1
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	f7fc fff7 	bl	8000bf8 <__aeabi_d2f>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	496a      	ldr	r1, [pc, #424]	; (8003db8 <joystick_callback+0x280>)
 8003c0e:	00e3      	lsls	r3, r4, #3
 8003c10:	440b      	add	r3, r1
 8003c12:	3304      	adds	r3, #4
 8003c14:	601a      	str	r2, [r3, #0]
		jog_point_n++;
 8003c16:	4b67      	ldr	r3, [pc, #412]	; (8003db4 <joystick_callback+0x27c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <joystick_callback+0x27c>)
 8003c20:	701a      	strb	r2, [r3, #0]
	}
	if (jog_point_n >= 3) {
 8003c22:	4b64      	ldr	r3, [pc, #400]	; (8003db4 <joystick_callback+0x27c>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	f240 80ab 	bls.w	8003d82 <joystick_callback+0x24a>
		if (state == MSpick) {
 8003c2c:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <joystick_callback+0x284>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d14f      	bne.n	8003cd4 <joystick_callback+0x19c>
			localize(corners, pick, &origin_pick, &angle_pick);
 8003c34:	4b62      	ldr	r3, [pc, #392]	; (8003dc0 <joystick_callback+0x288>)
 8003c36:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <joystick_callback+0x28c>)
 8003c38:	4963      	ldr	r1, [pc, #396]	; (8003dc8 <joystick_callback+0x290>)
 8003c3a:	485f      	ldr	r0, [pc, #380]	; (8003db8 <joystick_callback+0x280>)
 8003c3c:	f7fe fc68 	bl	8002510 <localize>
			MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003c40:	4b5f      	ldr	r3, [pc, #380]	; (8003dc0 <joystick_callback+0x288>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fc fc87 	bl	8000558 <__aeabi_f2d>
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <joystick_callback+0x294>)
 8003c50:	f7fc fcda 	bl	8000608 <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	a34c      	add	r3, pc, #304	; (adr r3, 8003d90 <joystick_callback+0x258>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f7fc fdfb 	bl	800085c <__aeabi_ddiv>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	4958      	ldr	r1, [pc, #352]	; (8003dd0 <joystick_callback+0x298>)
 8003c70:	f7fc fb12 	bl	8000298 <__aeabi_dsub>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <joystick_callback+0x29c>)
 8003c82:	f7fc fcc1 	bl	8000608 <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f7fc ff6b 	bl	8000b68 <__aeabi_d2iz>
 8003c92:	4603      	mov	r3, r0
 8003c94:	b21a      	sxth	r2, r3
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <joystick_callback+0x2a0>)
 8003c98:	82da      	strh	r2, [r3, #22]
			MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <joystick_callback+0x28c>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cac:	ee17 3a90 	vmov	r3, s15
 8003cb0:	b21a      	sxth	r2, r3
 8003cb2:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <joystick_callback+0x2a0>)
 8003cb4:	825a      	strh	r2, [r3, #18]
			MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 8003cb6:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <joystick_callback+0x28c>)
 8003cb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cbc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc8:	ee17 3a90 	vmov	r3, s15
 8003ccc:	b21a      	sxth	r2, r3
 8003cce:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <joystick_callback+0x2a0>)
 8003cd0:	829a      	strh	r2, [r3, #20]
 8003cd2:	e04e      	b.n	8003d72 <joystick_callback+0x23a>
		} else {
			localize(corners, place, &origin_place, &angle_place);
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <joystick_callback+0x2a4>)
 8003cd6:	4a42      	ldr	r2, [pc, #264]	; (8003de0 <joystick_callback+0x2a8>)
 8003cd8:	4942      	ldr	r1, [pc, #264]	; (8003de4 <joystick_callback+0x2ac>)
 8003cda:	4837      	ldr	r0, [pc, #220]	; (8003db8 <joystick_callback+0x280>)
 8003cdc:	f7fe fc18 	bl	8002510 <localize>
			MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <joystick_callback+0x2a4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fc37 	bl	8000558 <__aeabi_f2d>
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <joystick_callback+0x294>)
 8003cf0:	f7fc fc8a 	bl	8000608 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	a324      	add	r3, pc, #144	; (adr r3, 8003d90 <joystick_callback+0x258>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f7fc fdab 	bl	800085c <__aeabi_ddiv>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	4930      	ldr	r1, [pc, #192]	; (8003dd0 <joystick_callback+0x298>)
 8003d10:	f7fc fac2 	bl	8000298 <__aeabi_dsub>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <joystick_callback+0x29c>)
 8003d22:	f7fc fc71 	bl	8000608 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fc ff1b 	bl	8000b68 <__aeabi_d2iz>
 8003d32:	4603      	mov	r3, r0
 8003d34:	b21a      	sxth	r2, r3
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <joystick_callback+0x2a0>)
 8003d38:	839a      	strh	r2, [r3, #28]
			MBvariables.place_tray_origin_x = origin_place.x * 10;
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <joystick_callback+0x2a8>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d4c:	ee17 3a90 	vmov	r3, s15
 8003d50:	b21a      	sxth	r2, r3
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <joystick_callback+0x2a0>)
 8003d54:	831a      	strh	r2, [r3, #24]
			MBvariables.place_tray_origin_y = origin_place.y * 10;
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <joystick_callback+0x2a8>)
 8003d58:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d68:	ee17 3a90 	vmov	r3, s15
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <joystick_callback+0x2a0>)
 8003d70:	835a      	strh	r2, [r3, #26]
		}
		state = MSwait;
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <joystick_callback+0x284>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
		jog_point_n = 0;
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <joystick_callback+0x27c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e000      	b.n	8003d82 <joystick_callback+0x24a>
		return;
 8003d80:	bf00      	nop
	}
}
 8003d82:	bd98      	pop	{r3, r4, r7, pc}
 8003d84:	f3af 8000 	nop.w
 8003d88:	eb851eb8 	.word	0xeb851eb8
 8003d8c:	3f9eb851 	.word	0x3f9eb851
 8003d90:	54442d18 	.word	0x54442d18
 8003d94:	400921fb 	.word	0x400921fb
 8003d98:	20001816 	.word	0x20001816
 8003d9c:	2000193c 	.word	0x2000193c
 8003da0:	20001908 	.word	0x20001908
 8003da4:	20001904 	.word	0x20001904
 8003da8:	fffffa88 	.word	0xfffffa88
 8003dac:	ffffd26d 	.word	0xffffd26d
 8003db0:	40240000 	.word	0x40240000
 8003db4:	20001817 	.word	0x20001817
 8003db8:	20001838 	.word	0x20001838
 8003dbc:	20000221 	.word	0x20000221
 8003dc0:	200018e8 	.word	0x200018e8
 8003dc4:	200018e0 	.word	0x200018e0
 8003dc8:	20001850 	.word	0x20001850
 8003dcc:	40668000 	.word	0x40668000
 8003dd0:	40768000 	.word	0x40768000
 8003dd4:	40590000 	.word	0x40590000
 8003dd8:	20001910 	.word	0x20001910
 8003ddc:	200018f4 	.word	0x200018f4
 8003de0:	200018ec 	.word	0x200018ec
 8003de4:	20001898 	.word	0x20001898

08003de8 <move_finished>:

uint8_t move_finished(uint32_t tolerance) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	if (abs(getLocalPosition() - setpoint_y) < tolerance && abs(MBvariables.x_actual_position - setpoint_x) < tolerance) {
 8003df0:	f7fe fb6e 	bl	80024d0 <getLocalPosition>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <move_finished+0x4c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bfb8      	it	lt
 8003e00:	425b      	neglt	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90f      	bls.n	8003e2a <move_finished+0x42>
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <move_finished+0x50>)
 8003e0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <move_finished+0x54>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bfb8      	it	lt
 8003e1c:	425b      	neglt	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <move_finished+0x42>
		return 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <move_finished+0x44>
	}
	return 0;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20001904 	.word	0x20001904
 8003e38:	20001910 	.word	0x20001910
 8003e3c:	20001908 	.word	0x20001908

08003e40 <preset_data_y_only>:

void preset_data_y_only() {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
	for (int i = 0; i < 9; i++) {
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	e043      	b.n	8003ed4 <preset_data_y_only+0x94>
		pick[i].y = 38.0 + 38.0 * i;
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fc fb71 	bl	8000534 <__aeabi_i2d>
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <preset_data_y_only+0xa4>)
 8003e58:	f7fc fbd6 	bl	8000608 <__aeabi_dmul>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <preset_data_y_only+0xa4>)
 8003e6a:	f7fc fa17 	bl	800029c <__adddf3>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	f7fc febf 	bl	8000bf8 <__aeabi_d2f>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	491a      	ldr	r1, [pc, #104]	; (8003ee8 <preset_data_y_only+0xa8>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3304      	adds	r3, #4
 8003e86:	601a      	str	r2, [r3, #0]
		place[i].y = -(38.0 + 38.0 * i);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fc fb53 	bl	8000534 <__aeabi_i2d>
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <preset_data_y_only+0xa4>)
 8003e94:	f7fc fbb8 	bl	8000608 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <preset_data_y_only+0xa4>)
 8003ea6:	f7fc f9f9 	bl	800029c <__adddf3>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fea1 	bl	8000bf8 <__aeabi_d2f>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eef1 7a67 	vneg.f32	s15, s15
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <preset_data_y_only+0xac>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	ddb8      	ble.n	8003e4c <preset_data_y_only+0xc>
	}
}
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40430000 	.word	0x40430000
 8003ee8:	20001850 	.word	0x20001850
 8003eec:	20001898 	.word	0x20001898

08003ef0 <preset_data_xy>:

void preset_data_xy() {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	corners[0].x = 7.1;
 8003ef4:	4b64      	ldr	r3, [pc, #400]	; (8004088 <preset_data_xy+0x198>)
 8003ef6:	4a65      	ldr	r2, [pc, #404]	; (800408c <preset_data_xy+0x19c>)
 8003ef8:	601a      	str	r2, [r3, #0]
	corners[0].y = -68.0;
 8003efa:	4b63      	ldr	r3, [pc, #396]	; (8004088 <preset_data_xy+0x198>)
 8003efc:	4a64      	ldr	r2, [pc, #400]	; (8004090 <preset_data_xy+0x1a0>)
 8003efe:	605a      	str	r2, [r3, #4]
	corners[1].x = 52.7;
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <preset_data_xy+0x198>)
 8003f02:	4a64      	ldr	r2, [pc, #400]	; (8004094 <preset_data_xy+0x1a4>)
 8003f04:	609a      	str	r2, [r3, #8]
	corners[1].y = -29.4;
 8003f06:	4b60      	ldr	r3, [pc, #384]	; (8004088 <preset_data_xy+0x198>)
 8003f08:	4a63      	ldr	r2, [pc, #396]	; (8004098 <preset_data_xy+0x1a8>)
 8003f0a:	60da      	str	r2, [r3, #12]
	corners[2].x = 21.2;
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <preset_data_xy+0x198>)
 8003f0e:	4a63      	ldr	r2, [pc, #396]	; (800409c <preset_data_xy+0x1ac>)
 8003f10:	611a      	str	r2, [r3, #16]
	corners[2].y = 8.2;
 8003f12:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <preset_data_xy+0x198>)
 8003f14:	4a62      	ldr	r2, [pc, #392]	; (80040a0 <preset_data_xy+0x1b0>)
 8003f16:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin_pick, &angle_pick);
 8003f18:	4b62      	ldr	r3, [pc, #392]	; (80040a4 <preset_data_xy+0x1b4>)
 8003f1a:	4a63      	ldr	r2, [pc, #396]	; (80040a8 <preset_data_xy+0x1b8>)
 8003f1c:	4963      	ldr	r1, [pc, #396]	; (80040ac <preset_data_xy+0x1bc>)
 8003f1e:	485a      	ldr	r0, [pc, #360]	; (8004088 <preset_data_xy+0x198>)
 8003f20:	f7fe faf6 	bl	8002510 <localize>
	MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003f24:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <preset_data_xy+0x1b4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc fb15 	bl	8000558 <__aeabi_f2d>
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <preset_data_xy+0x1c0>)
 8003f34:	f7fc fb68 	bl	8000608 <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	a34f      	add	r3, pc, #316	; (adr r3, 8004080 <preset_data_xy+0x190>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc fc89 	bl	800085c <__aeabi_ddiv>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	f04f 0000 	mov.w	r0, #0
 8003f52:	4958      	ldr	r1, [pc, #352]	; (80040b4 <preset_data_xy+0x1c4>)
 8003f54:	f7fc f9a0 	bl	8000298 <__aeabi_dsub>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	4b54      	ldr	r3, [pc, #336]	; (80040b8 <preset_data_xy+0x1c8>)
 8003f66:	f7fc fb4f 	bl	8000608 <__aeabi_dmul>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7fc fdf9 	bl	8000b68 <__aeabi_d2iz>
 8003f76:	4603      	mov	r3, r0
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	4b50      	ldr	r3, [pc, #320]	; (80040bc <preset_data_xy+0x1cc>)
 8003f7c:	82da      	strh	r2, [r3, #22]
	MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 8003f7e:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <preset_data_xy+0x1b8>)
 8003f80:	edd3 7a00 	vldr	s15, [r3]
 8003f84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f90:	ee17 3a90 	vmov	r3, s15
 8003f94:	b21a      	sxth	r2, r3
 8003f96:	4b49      	ldr	r3, [pc, #292]	; (80040bc <preset_data_xy+0x1cc>)
 8003f98:	825a      	strh	r2, [r3, #18]
	MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <preset_data_xy+0x1b8>)
 8003f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fa0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fac:	ee17 3a90 	vmov	r3, s15
 8003fb0:	b21a      	sxth	r2, r3
 8003fb2:	4b42      	ldr	r3, [pc, #264]	; (80040bc <preset_data_xy+0x1cc>)
 8003fb4:	829a      	strh	r2, [r3, #20]

	corners[0].x = -90.3;
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <preset_data_xy+0x198>)
 8003fb8:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <preset_data_xy+0x1d0>)
 8003fba:	601a      	str	r2, [r3, #0]
	corners[0].y = -170.0;
 8003fbc:	4b32      	ldr	r3, [pc, #200]	; (8004088 <preset_data_xy+0x198>)
 8003fbe:	4a41      	ldr	r2, [pc, #260]	; (80040c4 <preset_data_xy+0x1d4>)
 8003fc0:	605a      	str	r2, [r3, #4]
	corners[1].x = -46.1;
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <preset_data_xy+0x198>)
 8003fc4:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <preset_data_xy+0x1d8>)
 8003fc6:	609a      	str	r2, [r3, #8]
	corners[1].y = -149.4;
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <preset_data_xy+0x198>)
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <preset_data_xy+0x1dc>)
 8003fcc:	60da      	str	r2, [r3, #12]
	corners[2].x = -69.6;
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <preset_data_xy+0x198>)
 8003fd0:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <preset_data_xy+0x1e0>)
 8003fd2:	611a      	str	r2, [r3, #16]
	corners[2].y = -95.3;
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <preset_data_xy+0x198>)
 8003fd6:	4a3f      	ldr	r2, [pc, #252]	; (80040d4 <preset_data_xy+0x1e4>)
 8003fd8:	615a      	str	r2, [r3, #20]
	localize(corners, place, &origin_place, &angle_place);
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <preset_data_xy+0x1e8>)
 8003fdc:	4a3f      	ldr	r2, [pc, #252]	; (80040dc <preset_data_xy+0x1ec>)
 8003fde:	4940      	ldr	r1, [pc, #256]	; (80040e0 <preset_data_xy+0x1f0>)
 8003fe0:	4829      	ldr	r0, [pc, #164]	; (8004088 <preset_data_xy+0x198>)
 8003fe2:	f7fe fa95 	bl	8002510 <localize>
	MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <preset_data_xy+0x1e8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fab4 	bl	8000558 <__aeabi_f2d>
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <preset_data_xy+0x1c0>)
 8003ff6:	f7fc fb07 	bl	8000608 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	a31f      	add	r3, pc, #124	; (adr r3, 8004080 <preset_data_xy+0x190>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fc28 	bl	800085c <__aeabi_ddiv>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	f04f 0000 	mov.w	r0, #0
 8004014:	4927      	ldr	r1, [pc, #156]	; (80040b4 <preset_data_xy+0x1c4>)
 8004016:	f7fc f93f 	bl	8000298 <__aeabi_dsub>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <preset_data_xy+0x1c8>)
 8004028:	f7fc faee 	bl	8000608 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f7fc fd98 	bl	8000b68 <__aeabi_d2iz>
 8004038:	4603      	mov	r3, r0
 800403a:	b21a      	sxth	r2, r3
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <preset_data_xy+0x1cc>)
 800403e:	839a      	strh	r2, [r3, #28]
	MBvariables.place_tray_origin_x = origin_place.x * 10;
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <preset_data_xy+0x1ec>)
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800404a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800404e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004052:	ee17 3a90 	vmov	r3, s15
 8004056:	b21a      	sxth	r2, r3
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <preset_data_xy+0x1cc>)
 800405a:	831a      	strh	r2, [r3, #24]
	MBvariables.place_tray_origin_y = origin_place.y * 10;
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <preset_data_xy+0x1ec>)
 800405e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004062:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800406a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406e:	ee17 3a90 	vmov	r3, s15
 8004072:	b21a      	sxth	r2, r3
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <preset_data_xy+0x1cc>)
 8004076:	835a      	strh	r2, [r3, #26]
}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	f3af 8000 	nop.w
 8004080:	54442d18 	.word	0x54442d18
 8004084:	400921fb 	.word	0x400921fb
 8004088:	20001838 	.word	0x20001838
 800408c:	40e33333 	.word	0x40e33333
 8004090:	c2880000 	.word	0xc2880000
 8004094:	4252cccd 	.word	0x4252cccd
 8004098:	c1eb3333 	.word	0xc1eb3333
 800409c:	41a9999a 	.word	0x41a9999a
 80040a0:	41033333 	.word	0x41033333
 80040a4:	200018e8 	.word	0x200018e8
 80040a8:	200018e0 	.word	0x200018e0
 80040ac:	20001850 	.word	0x20001850
 80040b0:	40668000 	.word	0x40668000
 80040b4:	40768000 	.word	0x40768000
 80040b8:	40590000 	.word	0x40590000
 80040bc:	20001910 	.word	0x20001910
 80040c0:	c2b4999a 	.word	0xc2b4999a
 80040c4:	c32a0000 	.word	0xc32a0000
 80040c8:	c2386666 	.word	0xc2386666
 80040cc:	c3156666 	.word	0xc3156666
 80040d0:	c28b3333 	.word	0xc28b3333
 80040d4:	c2be999a 	.word	0xc2be999a
 80040d8:	200018f4 	.word	0x200018f4
 80040dc:	200018ec 	.word	0x200018ec
 80040e0:	20001898 	.word	0x20001898

080040e4 <emergency_handler>:

void emergency_handler() {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	static uint8_t prev_state;
	emergency = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80040e8:	2104      	movs	r1, #4
 80040ea:	481d      	ldr	r0, [pc, #116]	; (8004160 <emergency_handler+0x7c>)
 80040ec:	f003 f952 	bl	8007394 <HAL_GPIO_ReadPin>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <emergency_handler+0x80>)
 8004100:	701a      	strb	r2, [r3, #0]

	// going into emergency
	if (!prev_state && emergency) {
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <emergency_handler+0x84>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <emergency_handler+0x34>
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <emergency_handler+0x80>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <emergency_handler+0x34>
		ENDEFF_EMERGENCY(&hi2c1);
 8004112:	4816      	ldr	r0, [pc, #88]	; (800416c <emergency_handler+0x88>)
 8004114:	f7fc ff78 	bl	8001008 <ENDEFF_EMERGENCY>
	}

	// leaving emergency
	if (prev_state && !emergency) {
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <emergency_handler+0x84>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <emergency_handler+0x5a>
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <emergency_handler+0x80>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <emergency_handler+0x5a>
		ENDEFF_EMERGENCY_QUIT(&hi2c1);
 8004128:	4810      	ldr	r0, [pc, #64]	; (800416c <emergency_handler+0x88>)
 800412a:	f7fc ff95 	bl	8001058 <ENDEFF_EMERGENCY_QUIT>
		HAL_Delay(11);
 800412e:	200b      	movs	r0, #11
 8004130:	f001 fff6 	bl	8006120 <HAL_Delay>
		ENE_I2C_UPDATE(&MBvariables.end_effector_status, &hi2c1, 1);
 8004134:	2201      	movs	r2, #1
 8004136:	490d      	ldr	r1, [pc, #52]	; (800416c <emergency_handler+0x88>)
 8004138:	480d      	ldr	r0, [pc, #52]	; (8004170 <emergency_handler+0x8c>)
 800413a:	f7fd f8a5 	bl	8001288 <ENE_I2C_UPDATE>
	}

	if (emergency) {
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <emergency_handler+0x80>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <emergency_handler+0x6e>
		PID_enable = 0;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <emergency_handler+0x90>)
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
		state = MSidle;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <emergency_handler+0x94>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
	}

	prev_state = emergency;
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <emergency_handler+0x80>)
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <emergency_handler+0x84>)
 8004158:	701a      	strb	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40020800 	.word	0x40020800
 8004164:	20001814 	.word	0x20001814
 8004168:	2000196c 	.word	0x2000196c
 800416c:	200004d8 	.word	0x200004d8
 8004170:	20001936 	.word	0x20001936
 8004174:	20000222 	.word	0x20000222
 8004178:	20000221 	.word	0x20000221

0800417c <RGB_logic>:
uint32_t LEDtime = 0;
MachineState laststate = MSidle;

// USER CODE ======================================================================================

void RGB_logic(MachineState state, uint8_t point, uint8_t emergency) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
 8004186:	460b      	mov	r3, r1
 8004188:	71bb      	strb	r3, [r7, #6]
 800418a:	4613      	mov	r3, r2
 800418c:	717b      	strb	r3, [r7, #5]
	// Run on 200 Hz
	static uint32_t timestamp;
	if (HAL_GetTick() - timestamp < 5) {
 800418e:	f001 ffbb 	bl	8006108 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <RGB_logic+0x144>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b04      	cmp	r3, #4
 800419c:	f240 808c 	bls.w	80042b8 <RGB_logic+0x13c>
		return;
	}
	timestamp = HAL_GetTick() + 5;
 80041a0:	f001 ffb2 	bl	8006108 <HAL_GetTick>
 80041a4:	4603      	mov	r3, r0
 80041a6:	3305      	adds	r3, #5
 80041a8:	4a45      	ldr	r2, [pc, #276]	; (80042c0 <RGB_logic+0x144>)
 80041aa:	6013      	str	r3, [r2, #0]

	// Main logic here
	if (emergency) {
 80041ac:	797b      	ldrb	r3, [r7, #5]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00f      	beq.n	80041d2 <RGB_logic+0x56>
		laststate = MSwait;
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <RGB_logic+0x148>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
		RGB_BreathingPattern(500, 255, 0, 0);
 80041b8:	2300      	movs	r3, #0
 80041ba:	2200      	movs	r2, #0
 80041bc:	21ff      	movs	r1, #255	; 0xff
 80041be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041c2:	f000 faf5 	bl	80047b0 <RGB_BreathingPattern>
		Set_Brightness(45);
 80041c6:	202d      	movs	r0, #45	; 0x2d
 80041c8:	f7fe ffbe 	bl	8003148 <Set_Brightness>
		WS2812_Send();
 80041cc:	f7ff f83e 	bl	800324c <WS2812_Send>
		return;
 80041d0:	e073      	b.n	80042ba <RGB_logic+0x13e>
	} else {
		switch (state) {
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	d868      	bhi.n	80042aa <RGB_logic+0x12e>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <RGB_logic+0x64>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	080041fd 	.word	0x080041fd
 80041e4:	08004221 	.word	0x08004221
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	0800424d 	.word	0x0800424d
 80041f0:	08004263 	.word	0x08004263
 80041f4:	08004279 	.word	0x08004279
 80041f8:	08004295 	.word	0x08004295
		case MSwait:
			if (laststate != MSwait) {
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <RGB_logic+0x148>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <RGB_logic+0x8e>
				LEDtime = 0;
 8004204:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <RGB_logic+0x14c>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
			}
			RGB_BreathingPattern(500, 0, 255, 0);
 800420a:	2300      	movs	r3, #0
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	2100      	movs	r1, #0
 8004210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004214:	f000 facc 	bl	80047b0 <RGB_BreathingPattern>
			laststate = MSwait;
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <RGB_logic+0x148>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
			break;
 800421e:	e045      	b.n	80042ac <RGB_logic+0x130>
		case MSidle:
			if (laststate != MSidle) {
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <RGB_logic+0x148>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d002      	beq.n	800422e <RGB_logic+0xb2>
				LEDtime = 0;
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <RGB_logic+0x14c>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
			}
			RGB_Rainbow(!MBvariables.heartbeat);
 800422e:	4b27      	ldr	r3, [pc, #156]	; (80042cc <RGB_logic+0x150>)
 8004230:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f85e 	bl	8004300 <RGB_Rainbow>
			laststate = MSidle;
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <RGB_logic+0x148>)
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
			break;
 800424a:	e02f      	b.n	80042ac <RGB_logic+0x130>
		case MSpick:
		case MSplace:
			RGB_BreathingPattern(500, 255, 255, 255);
 800424c:	23ff      	movs	r3, #255	; 0xff
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	21ff      	movs	r1, #255	; 0xff
 8004252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004256:	f000 faab 	bl	80047b0 <RGB_BreathingPattern>
			laststate = MSpick;
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <RGB_logic+0x148>)
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]
			break;
 8004260:	e024      	b.n	80042ac <RGB_logic+0x130>
		case MShome:
			RGB_BreathingPattern(500, 0, 0, 255);
 8004262:	23ff      	movs	r3, #255	; 0xff
 8004264:	2200      	movs	r2, #0
 8004266:	2100      	movs	r1, #0
 8004268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800426c:	f000 faa0 	bl	80047b0 <RGB_BreathingPattern>
			laststate = MShome;
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <RGB_logic+0x148>)
 8004272:	2204      	movs	r2, #4
 8004274:	701a      	strb	r2, [r3, #0]
			break;
 8004276:	e019      	b.n	80042ac <RGB_logic+0x130>
		case MStray:
			if (laststate != MStray) {
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <RGB_logic+0x148>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b05      	cmp	r3, #5
 800427e:	d001      	beq.n	8004284 <RGB_logic+0x108>
				RGB_off();
 8004280:	f000 f826 	bl	80042d0 <RGB_off>
			}
			RGB_TrayProgress(point);
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fb7a 	bl	8004980 <RGB_TrayProgress>
			laststate = MStray;
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <RGB_logic+0x148>)
 800428e:	2205      	movs	r2, #5
 8004290:	701a      	strb	r2, [r3, #0]
			break;
 8004292:	e00b      	b.n	80042ac <RGB_logic+0x130>
		case MSpoint:
			laststate = MSpoint;
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <RGB_logic+0x148>)
 8004296:	2206      	movs	r2, #6
 8004298:	701a      	strb	r2, [r3, #0]
			RGB_BreathingPattern(500, 255, 165, 0);
 800429a:	2300      	movs	r3, #0
 800429c:	22a5      	movs	r2, #165	; 0xa5
 800429e:	21ff      	movs	r1, #255	; 0xff
 80042a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042a4:	f000 fa84 	bl	80047b0 <RGB_BreathingPattern>
			break;
 80042a8:	e000      	b.n	80042ac <RGB_logic+0x130>
		default:
			break;
 80042aa:	bf00      	nop

//	for (int i = 16; i < 24; i++) {
//		Set_LED(i, 0, 0, 0);
//	}

	Set_Brightness(45);
 80042ac:	202d      	movs	r0, #45	; 0x2d
 80042ae:	f7fe ff4b 	bl	8003148 <Set_Brightness>
	WS2812_Send();
 80042b2:	f7fe ffcb 	bl	800324c <WS2812_Send>
 80042b6:	e000      	b.n	80042ba <RGB_logic+0x13e>
		return;
 80042b8:	bf00      	nop
}
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20001970 	.word	0x20001970
 80042c4:	20000223 	.word	0x20000223
 80042c8:	200018f8 	.word	0x200018f8
 80042cc:	20001910 	.word	0x20001910

080042d0 <RGB_off>:

void RGB_off() {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; i++) {
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	e008      	b.n	80042ee <RGB_off+0x1e>
		Set_LED(i, 0, 0, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	2200      	movs	r2, #0
 80042e0:	2100      	movs	r1, #0
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fe ff00 	bl	80030e8 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b3b      	cmp	r3, #59	; 0x3b
 80042f2:	ddf3      	ble.n	80042dc <RGB_off+0xc>
	}
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <RGB_Rainbow>:

void RGB_Rainbow(uint8_t dobreathing) {
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b090      	sub	sp, #64	; 0x40
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
	static uint32_t startTime = 0;
	static const uint32_t transitionDuration = 5000; // Transition duration in milliseconds

	if (HAL_GetTick() - startTime >= transitionDuration) {
 800430a:	f001 fefd 	bl	8006108 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	4bc1      	ldr	r3, [pc, #772]	; (8004618 <RGB_Rainbow+0x318>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1ad2      	subs	r2, r2, r3
 8004316:	4bc1      	ldr	r3, [pc, #772]	; (800461c <RGB_Rainbow+0x31c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d304      	bcc.n	8004328 <RGB_Rainbow+0x28>
		startTime = HAL_GetTick();
 800431e:	f001 fef3 	bl	8006108 <HAL_GetTick>
 8004322:	4603      	mov	r3, r0
 8004324:	4abc      	ldr	r2, [pc, #752]	; (8004618 <RGB_Rainbow+0x318>)
 8004326:	6013      	str	r3, [r2, #0]
	}

	// Calculate time elapsed in the current transition
	uint32_t elapsed = HAL_GetTick() - startTime;
 8004328:	f001 feee 	bl	8006108 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	4bba      	ldr	r3, [pc, #744]	; (8004618 <RGB_Rainbow+0x318>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate the normalized progress (0.0 to 1.0) within the transition
	float progress = (float) elapsed / transitionDuration;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004340:	4bb6      	ldr	r3, [pc, #728]	; (800461c <RGB_Rainbow+0x31c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800434c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004350:	edc7 7a08 	vstr	s15, [r7, #32]

	// Calculate the hue angle based on the progress
	float hueAngle = 360.0f * progress;
 8004354:	edd7 7a08 	vldr	s15, [r7, #32]
 8004358:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004620 <RGB_Rainbow+0x320>
 800435c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004360:	edc7 7a07 	vstr	s15, [r7, #28]

	// Set LED colors based on the hue angle
	for (int i = 0; i < MAX_LED; i++) {
 8004364:	2300      	movs	r3, #0
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	e1f2      	b.n	8004750 <RGB_Rainbow+0x450>
		// Calculate the hue value for the current LED
		float ledHue = hueAngle + (i * (360.0f / MAX_LED));
 800436a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004374:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004384:	edc7 7a06 	vstr	s15, [r7, #24]

		// Convert hue to RGB using HSV color model
		float huePrime = fmodf(ledHue / 60.0f, 6.0f);
 8004388:	edd7 7a06 	vldr	s15, [r7, #24]
 800438c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004624 <RGB_Rainbow+0x324>
 8004390:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004394:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004398:	eeb0 0a47 	vmov.f32	s0, s14
 800439c:	f00c fc56 	bl	8010c4c <fmodf>
 80043a0:	ed87 0a05 	vstr	s0, [r7, #20]
		float chroma = 1.0f;
 80043a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80043a8:	613b      	str	r3, [r7, #16]
		float x = chroma * (1.0f - fabsf(fmodf(huePrime, 2.0f) - 1.0f));
 80043aa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80043ae:	ed97 0a05 	vldr	s0, [r7, #20]
 80043b2:	f00c fc4b 	bl	8010c4c <fmodf>
 80043b6:	eef0 7a40 	vmov.f32	s15, s0
 80043ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043c2:	eef0 7ae7 	vabs.f32	s15, s15
 80043c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a03 	vstr	s15, [r7, #12]

		float red, green, blue;

		if (huePrime >= 0.0f && huePrime < 1.0f) {
 80043da:	edd7 7a05 	vldr	s15, [r7, #20]
 80043de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	db10      	blt.n	800440a <RGB_Rainbow+0x10a>
 80043e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f8:	d507      	bpl.n	800440a <RGB_Rainbow+0x10a>
			red = chroma;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	633b      	str	r3, [r7, #48]	; 0x30
 8004408:	e06e      	b.n	80044e8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 1.0f && huePrime < 2.0f) {
 800440a:	edd7 7a05 	vldr	s15, [r7, #20]
 800440e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441a:	db10      	blt.n	800443e <RGB_Rainbow+0x13e>
 800441c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004420:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	d507      	bpl.n	800443e <RGB_Rainbow+0x13e>
			red = x;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
 800443c:	e054      	b.n	80044e8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 2.0f && huePrime < 3.0f) {
 800443e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004442:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	db10      	blt.n	8004472 <RGB_Rainbow+0x172>
 8004450:	edd7 7a05 	vldr	s15, [r7, #20]
 8004454:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004460:	d507      	bpl.n	8004472 <RGB_Rainbow+0x172>
			red = 0.0f;
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
 8004470:	e03a      	b.n	80044e8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 3.0f && huePrime < 4.0f) {
 8004472:	edd7 7a05 	vldr	s15, [r7, #20]
 8004476:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800447a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	db10      	blt.n	80044a6 <RGB_Rainbow+0x1a6>
 8004484:	edd7 7a05 	vldr	s15, [r7, #20]
 8004488:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800448c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	d507      	bpl.n	80044a6 <RGB_Rainbow+0x1a6>
			red = 0.0f;
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
 80044a4:	e020      	b.n	80044e8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 4.0f && huePrime < 5.0f) {
 80044a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044aa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80044ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	db10      	blt.n	80044da <RGB_Rainbow+0x1da>
 80044b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044bc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80044c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c8:	d507      	bpl.n	80044da <RGB_Rainbow+0x1da>
			red = x;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
 80044d8:	e006      	b.n	80044e8 <RGB_Rainbow+0x1e8>
		} else {
			red = chroma;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// slow fade in
		if (LEDtime == 0) {
 80044e8:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <RGB_Rainbow+0x328>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <RGB_Rainbow+0x1fa>
			LEDtime = HAL_GetTick();
 80044f0:	f001 fe0a 	bl	8006108 <HAL_GetTick>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4a4c      	ldr	r2, [pc, #304]	; (8004628 <RGB_Rainbow+0x328>)
 80044f8:	6013      	str	r3, [r2, #0]
		}

		float intensity;
		if (HAL_GetTick() - LEDtime < 4000) {
 80044fa:	f001 fe05 	bl	8006108 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b49      	ldr	r3, [pc, #292]	; (8004628 <RGB_Rainbow+0x328>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800450a:	d216      	bcs.n	800453a <RGB_Rainbow+0x23a>
			intensity = (HAL_GetTick() - LEDtime) / 4000.0;
 800450c:	f001 fdfc 	bl	8006108 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	4b45      	ldr	r3, [pc, #276]	; (8004628 <RGB_Rainbow+0x328>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	4618      	mov	r0, r3
 800451a:	f7fb fffb 	bl	8000514 <__aeabi_ui2d>
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	4b42      	ldr	r3, [pc, #264]	; (800462c <RGB_Rainbow+0x32c>)
 8004524:	f7fc f99a 	bl	800085c <__aeabi_ddiv>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	f7fc fb62 	bl	8000bf8 <__aeabi_d2f>
 8004534:	4603      	mov	r3, r0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	e002      	b.n	8004540 <RGB_Rainbow+0x240>
		} else {
			intensity = 1;
 800453a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		intensity = sqrt(intensity);
 8004540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004542:	f7fc f809 	bl	8000558 <__aeabi_f2d>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	ec43 2b10 	vmov	d0, r2, r3
 800454e:	f00c fb51 	bl	8010bf4 <sqrt>
 8004552:	ec53 2b10 	vmov	r2, r3, d0
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	f7fc fb4d 	bl	8000bf8 <__aeabi_d2f>
 800455e:	4603      	mov	r3, r0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c

		// breathing pattern
		float intensity2;
		if (dobreathing) {
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d069      	beq.n	800463c <RGB_Rainbow+0x33c>
			intensity2 = 0.1 + 0.9 * (0.5 * (1.0 + sinf((2.0 * PI * elapsed) / 2000)));
 8004568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800456a:	f7fb ffd3 	bl	8000514 <__aeabi_ui2d>
 800456e:	a324      	add	r3, pc, #144	; (adr r3, 8004600 <RGB_Rainbow+0x300>)
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f7fc f848 	bl	8000608 <__aeabi_dmul>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <RGB_Rainbow+0x330>)
 8004586:	f7fc f969 	bl	800085c <__aeabi_ddiv>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f7fc fb31 	bl	8000bf8 <__aeabi_d2f>
 8004596:	4603      	mov	r3, r0
 8004598:	ee00 3a10 	vmov	s0, r3
 800459c:	f00c fae4 	bl	8010b68 <sinf>
 80045a0:	ee10 3a10 	vmov	r3, s0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fb ffd7 	bl	8000558 <__aeabi_f2d>
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <RGB_Rainbow+0x334>)
 80045b0:	f7fb fe74 	bl	800029c <__adddf3>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <RGB_Rainbow+0x338>)
 80045c2:	f7fc f821 	bl	8000608 <__aeabi_dmul>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	a30e      	add	r3, pc, #56	; (adr r3, 8004608 <RGB_Rainbow+0x308>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fc f818 	bl	8000608 <__aeabi_dmul>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	a30b      	add	r3, pc, #44	; (adr r3, 8004610 <RGB_Rainbow+0x310>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb fe59 	bl	800029c <__adddf3>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	f7fc fb01 	bl	8000bf8 <__aeabi_d2f>
 80045f6:	4603      	mov	r3, r0
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fa:	e022      	b.n	8004642 <RGB_Rainbow+0x342>
 80045fc:	f3af 8000 	nop.w
 8004600:	60000000 	.word	0x60000000
 8004604:	401921fb 	.word	0x401921fb
 8004608:	cccccccd 	.word	0xcccccccd
 800460c:	3feccccc 	.word	0x3feccccc
 8004610:	9999999a 	.word	0x9999999a
 8004614:	3fb99999 	.word	0x3fb99999
 8004618:	20001974 	.word	0x20001974
 800461c:	08012d40 	.word	0x08012d40
 8004620:	43b40000 	.word	0x43b40000
 8004624:	42700000 	.word	0x42700000
 8004628:	200018f8 	.word	0x200018f8
 800462c:	40af4000 	.word	0x40af4000
 8004630:	409f4000 	.word	0x409f4000
 8004634:	3ff00000 	.word	0x3ff00000
 8004638:	3fe00000 	.word	0x3fe00000
		} else {
			intensity2 = 1.0;
 800463c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Scale RGB values to 0-255 range
		uint8_t r = (uint8_t) (red * 255.0 * intensity * intensity2);
 8004642:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004644:	f7fb ff88 	bl	8000558 <__aeabi_f2d>
 8004648:	a347      	add	r3, pc, #284	; (adr r3, 8004768 <RGB_Rainbow+0x468>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb ffdb 	bl	8000608 <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4614      	mov	r4, r2
 8004658:	461d      	mov	r5, r3
 800465a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800465c:	f7fb ff7c 	bl	8000558 <__aeabi_f2d>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	f7fb ffce 	bl	8000608 <__aeabi_dmul>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4614      	mov	r4, r2
 8004672:	461d      	mov	r5, r3
 8004674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004676:	f7fb ff6f 	bl	8000558 <__aeabi_f2d>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fb ffc1 	bl	8000608 <__aeabi_dmul>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	f7fc fa93 	bl	8000bb8 <__aeabi_d2uiz>
 8004692:	4603      	mov	r3, r0
 8004694:	72fb      	strb	r3, [r7, #11]
		uint8_t g = (uint8_t) (green * 255.0 * intensity * intensity2);
 8004696:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004698:	f7fb ff5e 	bl	8000558 <__aeabi_f2d>
 800469c:	a332      	add	r3, pc, #200	; (adr r3, 8004768 <RGB_Rainbow+0x468>)
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f7fb ffb1 	bl	8000608 <__aeabi_dmul>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4614      	mov	r4, r2
 80046ac:	461d      	mov	r5, r3
 80046ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046b0:	f7fb ff52 	bl	8000558 <__aeabi_f2d>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4620      	mov	r0, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	f7fb ffa4 	bl	8000608 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4614      	mov	r4, r2
 80046c6:	461d      	mov	r5, r3
 80046c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ca:	f7fb ff45 	bl	8000558 <__aeabi_f2d>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4620      	mov	r0, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	f7fb ff97 	bl	8000608 <__aeabi_dmul>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	f7fc fa69 	bl	8000bb8 <__aeabi_d2uiz>
 80046e6:	4603      	mov	r3, r0
 80046e8:	72bb      	strb	r3, [r7, #10]
		uint8_t b = (uint8_t) (blue * 255.0 * intensity * intensity2);
 80046ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ec:	f7fb ff34 	bl	8000558 <__aeabi_f2d>
 80046f0:	a31d      	add	r3, pc, #116	; (adr r3, 8004768 <RGB_Rainbow+0x468>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb ff87 	bl	8000608 <__aeabi_dmul>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4614      	mov	r4, r2
 8004700:	461d      	mov	r5, r3
 8004702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004704:	f7fb ff28 	bl	8000558 <__aeabi_f2d>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4620      	mov	r0, r4
 800470e:	4629      	mov	r1, r5
 8004710:	f7fb ff7a 	bl	8000608 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800471e:	f7fb ff1b 	bl	8000558 <__aeabi_f2d>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4620      	mov	r0, r4
 8004728:	4629      	mov	r1, r5
 800472a:	f7fb ff6d 	bl	8000608 <__aeabi_dmul>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	f7fc fa3f 	bl	8000bb8 <__aeabi_d2uiz>
 800473a:	4603      	mov	r3, r0
 800473c:	727b      	strb	r3, [r7, #9]

		// Set LED color
		Set_LED(i, r, g, b);
 800473e:	7af9      	ldrb	r1, [r7, #11]
 8004740:	7aba      	ldrb	r2, [r7, #10]
 8004742:	7a7b      	ldrb	r3, [r7, #9]
 8004744:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004746:	f7fe fccf 	bl	80030e8 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	3301      	adds	r3, #1
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004752:	2b3b      	cmp	r3, #59	; 0x3b
 8004754:	f77f ae09 	ble.w	800436a <RGB_Rainbow+0x6a>
	}
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3740      	adds	r7, #64	; 0x40
 800475e:	46bd      	mov	sp, r7
 8004760:	bdb0      	pop	{r4, r5, r7, pc}
 8004762:	bf00      	nop
 8004764:	f3af 8000 	nop.w
 8004768:	00000000 	.word	0x00000000
 800476c:	406fe000 	.word	0x406fe000

08004770 <RGB_Bootup>:

void RGB_Bootup(void) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++) {
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	e010      	b.n	800479e <RGB_Bootup+0x2e>
		Set_LED(i, 255, 0, 0);
 800477c:	2300      	movs	r3, #0
 800477e:	2200      	movs	r2, #0
 8004780:	21ff      	movs	r1, #255	; 0xff
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe fcb0 	bl	80030e8 <Set_LED>
		HAL_Delay(10);
 8004788:	200a      	movs	r0, #10
 800478a:	f001 fcc9 	bl	8006120 <HAL_Delay>
		Set_Brightness(45);
 800478e:	202d      	movs	r0, #45	; 0x2d
 8004790:	f7fe fcda 	bl	8003148 <Set_Brightness>
		WS2812_Send();
 8004794:	f7fe fd5a 	bl	800324c <WS2812_Send>
	for (int i = 0; i < 60; i++) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3301      	adds	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b3b      	cmp	r3, #59	; 0x3b
 80047a2:	ddeb      	ble.n	800477c <RGB_Bootup+0xc>
	}
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <RGB_BreathingPattern>:

void RGB_BreathingPattern(uint32_t period, uint8_t R, uint8_t G, uint8_t B) {
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	70fb      	strb	r3, [r7, #3]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70bb      	strb	r3, [r7, #2]
 80047c6:	4613      	mov	r3, r2
 80047c8:	707b      	strb	r3, [r7, #1]
	if (LEDtime == 0) {
 80047ca:	4b69      	ldr	r3, [pc, #420]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <RGB_BreathingPattern+0x2c>
		LEDtime = HAL_GetTick();
 80047d2:	f001 fc99 	bl	8006108 <HAL_GetTick>
 80047d6:	4603      	mov	r3, r0
 80047d8:	4a65      	ldr	r2, [pc, #404]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 80047da:	6013      	str	r3, [r2, #0]
	}

	uint32_t elapsedTime = HAL_GetTick() - LEDtime;
 80047dc:	f001 fc94 	bl	8006108 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b63      	ldr	r3, [pc, #396]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	60fb      	str	r3, [r7, #12]
	float intensity;

	intensity = 0.5 * (1.0 + sinf((2.0 * PI * elapsedTime) / period));
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7fb fe92 	bl	8000514 <__aeabi_ui2d>
 80047f0:	a35d      	add	r3, pc, #372	; (adr r3, 8004968 <RGB_BreathingPattern+0x1b8>)
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f7fb ff07 	bl	8000608 <__aeabi_dmul>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4614      	mov	r4, r2
 8004800:	461d      	mov	r5, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fb fe86 	bl	8000514 <__aeabi_ui2d>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4620      	mov	r0, r4
 800480e:	4629      	mov	r1, r5
 8004810:	f7fc f824 	bl	800085c <__aeabi_ddiv>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4610      	mov	r0, r2
 800481a:	4619      	mov	r1, r3
 800481c:	f7fc f9ec 	bl	8000bf8 <__aeabi_d2f>
 8004820:	4603      	mov	r3, r0
 8004822:	ee00 3a10 	vmov	s0, r3
 8004826:	f00c f99f 	bl	8010b68 <sinf>
 800482a:	ee10 3a10 	vmov	r3, s0
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb fe92 	bl	8000558 <__aeabi_f2d>
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	4b4e      	ldr	r3, [pc, #312]	; (8004974 <RGB_BreathingPattern+0x1c4>)
 800483a:	f7fb fd2f 	bl	800029c <__adddf3>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	4b4b      	ldr	r3, [pc, #300]	; (8004978 <RGB_BreathingPattern+0x1c8>)
 800484c:	f7fb fedc 	bl	8000608 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	f7fc f9ce 	bl	8000bf8 <__aeabi_d2f>
 800485c:	4603      	mov	r3, r0
 800485e:	60bb      	str	r3, [r7, #8]

	// slow fade in
	if (LEDtime == 0) {
 8004860:	4b43      	ldr	r3, [pc, #268]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <RGB_BreathingPattern+0xc2>
		LEDtime = HAL_GetTick();
 8004868:	f001 fc4e 	bl	8006108 <HAL_GetTick>
 800486c:	4603      	mov	r3, r0
 800486e:	4a40      	ldr	r2, [pc, #256]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 8004870:	6013      	str	r3, [r2, #0]
	}

	float intensity2;
	if (HAL_GetTick() - LEDtime < 4000) {
 8004872:	f001 fc49 	bl	8006108 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	4b3d      	ldr	r3, [pc, #244]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004882:	d216      	bcs.n	80048b2 <RGB_BreathingPattern+0x102>
		intensity2 = (HAL_GetTick() - LEDtime) / 4000.0;
 8004884:	f001 fc40 	bl	8006108 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <RGB_BreathingPattern+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb fe3f 	bl	8000514 <__aeabi_ui2d>
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <RGB_BreathingPattern+0x1cc>)
 800489c:	f7fb ffde 	bl	800085c <__aeabi_ddiv>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	f7fc f9a6 	bl	8000bf8 <__aeabi_d2f>
 80048ac:	4603      	mov	r3, r0
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e002      	b.n	80048b8 <RGB_BreathingPattern+0x108>
	} else {
		intensity2 = 1;
 80048b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80048b6:	617b      	str	r3, [r7, #20]
	}

	intensity2 = sqrt(intensity2);
 80048b8:	6978      	ldr	r0, [r7, #20]
 80048ba:	f7fb fe4d 	bl	8000558 <__aeabi_f2d>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	ec43 2b10 	vmov	d0, r2, r3
 80048c6:	f00c f995 	bl	8010bf4 <sqrt>
 80048ca:	ec53 2b10 	vmov	r2, r3, d0
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	f7fc f991 	bl	8000bf8 <__aeabi_d2f>
 80048d6:	4603      	mov	r3, r0
 80048d8:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < MAX_LED; i++) {
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e038      	b.n	8004952 <RGB_BreathingPattern+0x1a2>
		Set_LED(i, R * intensity * intensity2, G * intensity * intensity2, B * intensity * intensity2);
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80048fe:	78bb      	ldrb	r3, [r7, #2]
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004908:	edd7 7a02 	vldr	s15, [r7, #8]
 800490c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004910:	edd7 7a05 	vldr	s15, [r7, #20]
 8004914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004918:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004926:	edd7 7a02 	vldr	s15, [r7, #8]
 800492a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800492e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493a:	ee17 3a90 	vmov	r3, s15
 800493e:	ee16 2a10 	vmov	r2, s12
 8004942:	ee16 1a90 	vmov	r1, s13
 8004946:	6938      	ldr	r0, [r7, #16]
 8004948:	f7fe fbce 	bl	80030e8 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3301      	adds	r3, #1
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b3b      	cmp	r3, #59	; 0x3b
 8004956:	ddc3      	ble.n	80048e0 <RGB_BreathingPattern+0x130>
	}
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bdb0      	pop	{r4, r5, r7, pc}
 8004962:	bf00      	nop
 8004964:	f3af 8000 	nop.w
 8004968:	60000000 	.word	0x60000000
 800496c:	401921fb 	.word	0x401921fb
 8004970:	200018f8 	.word	0x200018f8
 8004974:	3ff00000 	.word	0x3ff00000
 8004978:	3fe00000 	.word	0x3fe00000
 800497c:	40af4000 	.word	0x40af4000

08004980 <RGB_TrayProgress>:

void RGB_TrayProgress(uint8_t point) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
	float percentage = (point + 1.0) / 9.0;
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7fb fdd1 	bl	8000534 <__aeabi_i2d>
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <RGB_TrayProgress+0x84>)
 8004998:	f7fb fc80 	bl	800029c <__adddf3>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <RGB_TrayProgress+0x88>)
 80049aa:	f7fb ff57 	bl	800085c <__aeabi_ddiv>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	f7fc f91f 	bl	8000bf8 <__aeabi_d2f>
 80049ba:	4603      	mov	r3, r0
 80049bc:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e008      	b.n	80049d6 <RGB_TrayProgress+0x56>
		Set_LED(i, 0, 255, 0);
 80049c4:	2300      	movs	r3, #0
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	2100      	movs	r1, #0
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7fe fb8c 	bl	80030e8 <Set_LED>
	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f7fb fdbe 	bl	8000558 <__aeabi_f2d>
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <RGB_TrayProgress+0x8c>)
 80049e2:	f7fb fe11 	bl	8000608 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f7fc f8bb 	bl	8000b68 <__aeabi_d2iz>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	dbe4      	blt.n	80049c4 <RGB_TrayProgress+0x44>
	}
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	3ff00000 	.word	0x3ff00000
 8004a08:	40220000 	.word	0x40220000
 8004a0c:	404e0000 	.word	0x404e0000

08004a10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8004a14:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <main+0xa0>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 1000;
 8004a1a:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <main+0xa0>)
 8004a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a20:	841a      	strh	r2, [r3, #32]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004a22:	f001 fb0b 	bl	800603c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004a26:	f000 f84f 	bl	8004ac8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004a2a:	f7fd fbdb 	bl	80021e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8004a2e:	f7fd fb9b 	bl	8002168 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8004a32:	f001 f955 	bl	8005ce0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004a36:	f7fd fc75 	bl	8002324 <MX_I2C1_Init>
	MX_TIM1_Init();
 8004a3a:	f000 fa77 	bl	8004f2c <MX_TIM1_Init>
	MX_TIM2_Init();
 8004a3e:	f000 fb15 	bl	800506c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8004a42:	f001 f923 	bl	8005c8c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8004a46:	f7fd faf9 	bl	800203c <MX_ADC1_Init>
	MX_TIM9_Init();
 8004a4a:	f000 fbd9 	bl	8005200 <MX_TIM9_Init>
	MX_TIM11_Init();
 8004a4e:	f000 fc11 	bl	8005274 <MX_TIM11_Init>
	MX_TIM3_Init();
 8004a52:	f000 fb5f 	bl	8005114 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8004a56:	f001 f96f 	bl	8005d38 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8004a5a:	4816      	ldr	r0, [pc, #88]	; (8004ab4 <main+0xa4>)
 8004a5c:	f003 fe24 	bl	80086a8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004a60:	2100      	movs	r1, #0
 8004a62:	4814      	ldr	r0, [pc, #80]	; (8004ab4 <main+0xa4>)
 8004a64:	f003 ffa8 	bl	80089b8 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8004a68:	2104      	movs	r1, #4
 8004a6a:	4813      	ldr	r0, [pc, #76]	; (8004ab8 <main+0xa8>)
 8004a6c:	f004 fc4c 	bl	8009308 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8004a70:	4812      	ldr	r0, [pc, #72]	; (8004abc <main+0xac>)
 8004a72:	f003 fe73 	bl	800875c <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 8004a76:	f7fe f9bf 	bl	8002df8 <modbus_init>

	// Initialize UART1
	UARTInterruptConfig();
 8004a7a:	f7fc fd6f 	bl	800155c <UARTInterruptConfig>

	RGB_Bootup();
 8004a7e:	f7ff fe77 	bl	8004770 <RGB_Bootup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 8004a82:	f7fc ffd1 	bl	8001a28 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(&MBvariables);
 8004a86:	480a      	ldr	r0, [pc, #40]	; (8004ab0 <main+0xa0>)
 8004a88:	f7fe f9d2 	bl	8002e30 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 8004a8c:	4808      	ldr	r0, [pc, #32]	; (8004ab0 <main+0xa0>)
 8004a8e:	f7fe fa11 	bl	8002eb4 <modbus_data_sync>
		QEIReadHome = getLocalPosition();
 8004a92:	f7fd fd1d 	bl	80024d0 <getLocalPosition>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <main+0xb0>)
 8004a9a:	6013      	str	r3, [r2, #0]
		QEIReadRaw = getRawPosition();
 8004a9c:	f7fd fd2a 	bl	80024f4 <getRawPosition>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <main+0xb4>)
 8004aa4:	6013      	str	r3, [r2, #0]
		main_logic(&MBvariables);
 8004aa6:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <main+0xa0>)
 8004aa8:	f7fe fc5a 	bl	8003360 <main_logic>
		Modbus_Protocal_Worker();
 8004aac:	e7e9      	b.n	8004a82 <main+0x72>
 8004aae:	bf00      	nop
 8004ab0:	20001910 	.word	0x20001910
 8004ab4:	2000197c 	.word	0x2000197c
 8004ab8:	20001a30 	.word	0x20001a30
 8004abc:	20001b98 	.word	0x20001b98
 8004ac0:	20001900 	.word	0x20001900
 8004ac4:	200018fc 	.word	0x200018fc

08004ac8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b094      	sub	sp, #80	; 0x50
 8004acc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004ace:	f107 0320 	add.w	r3, r7, #32
 8004ad2:	2230      	movs	r2, #48	; 0x30
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f007 f950 	bl	800bd7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <SystemClock_Config+0xc8>)
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <SystemClock_Config+0xc8>)
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	6413      	str	r3, [r2, #64]	; 0x40
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <SystemClock_Config+0xc8>)
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <SystemClock_Config+0xcc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <SystemClock_Config+0xcc>)
 8004b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <SystemClock_Config+0xcc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b24:	2302      	movs	r3, #2
 8004b26:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b30:	2302      	movs	r3, #2
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b34:	2300      	movs	r3, #0
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004b38:	2308      	movs	r3, #8
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004b3c:	2364      	movs	r3, #100	; 0x64
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b40:	2302      	movs	r3, #2
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b44:	2304      	movs	r3, #4
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b48:	f107 0320 	add.w	r3, r7, #32
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f003 f8b7 	bl	8007cc0 <HAL_RCC_OscConfig>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <SystemClock_Config+0x94>
		Error_Handler();
 8004b58:	f000 f858 	bl	8004c0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b5c:	230f      	movs	r3, #15
 8004b5e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b60:	2302      	movs	r3, #2
 8004b62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b6c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	2103      	movs	r1, #3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 fb19 	bl	80081b0 <HAL_RCC_ClockConfig>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <SystemClock_Config+0xc0>
		Error_Handler();
 8004b84:	f000 f842 	bl	8004c0c <Error_Handler>
	}
}
 8004b88:	bf00      	nop
 8004b8a:	3750      	adds	r7, #80	; 0x50
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40007000 	.word	0x40007000

08004b98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_PeriodElapsedCallback+0x14>
		interrupt_logic();
 8004ba8:	f7fe fe44 	bl	8003834 <interrupt_logic>
	}
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20001b98 	.word	0x20001b98

08004bb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <HAL_UART_RxCpltCallback+0x20>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d102      	bne.n	8004bce <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received((int*) &receivedByte);
 8004bc8:	4804      	ldr	r0, [pc, #16]	; (8004bdc <HAL_UART_RxCpltCallback+0x24>)
 8004bca:	f7fc fd37 	bl	800163c <Joystick_Received>
	}
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20001da4 	.word	0x20001da4
 8004bdc:	2000193c 	.word	0x2000193c

08004be0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8004bea:	88fb      	ldrh	r3, [r7, #6]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d106      	bne.n	8004bfe <HAL_GPIO_EXTI_Callback+0x1e>
		home_handler();
 8004bf0:	f7fe feca 	bl	8003988 <home_handler>
		interrupt_count++;
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <HAL_GPIO_EXTI_Callback+0x28>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	4a03      	ldr	r2, [pc, #12]	; (8004c08 <HAL_GPIO_EXTI_Callback+0x28>)
 8004bfc:	6013      	str	r3, [r2, #0]
	}
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2000194c 	.word	0x2000194c

08004c0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c10:	b672      	cpsid	i
}
 8004c12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004c14:	e7fe      	b.n	8004c14 <Error_Handler+0x8>
	...

08004c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4a0f      	ldr	r2, [pc, #60]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_MspInit+0x4c>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c56:	2007      	movs	r0, #7
 8004c58:	f001 fdc8 	bl	80067ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800

08004c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c6c:	e7fe      	b.n	8004c6c <NMI_Handler+0x4>

08004c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c72:	e7fe      	b.n	8004c72 <HardFault_Handler+0x4>

08004c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c78:	e7fe      	b.n	8004c78 <MemManage_Handler+0x4>

08004c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c7e:	e7fe      	b.n	8004c7e <BusFault_Handler+0x4>

08004c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c84:	e7fe      	b.n	8004c84 <UsageFault_Handler+0x4>

08004c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb4:	f001 fa14 	bl	80060e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004cc0:	2008      	movs	r0, #8
 8004cc2:	f002 fb99 	bl	80073f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <DMA1_Stream4_IRQHandler+0x10>)
 8004cd2:	f001 ff65 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20001d00 	.word	0x20001d00

08004ce0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ce4:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <DMA1_Stream6_IRQHandler+0x10>)
 8004ce6:	f001 ff5b 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20001f60 	.word	0x20001f60

08004cf4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004cf8:	4803      	ldr	r0, [pc, #12]	; (8004d08 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004cfa:	f004 fb93 	bl	8009424 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004cfe:	4803      	ldr	r0, [pc, #12]	; (8004d0c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004d00:	f004 fb90 	bl	8009424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	2000197c 	.word	0x2000197c
 8004d0c:	20001b98 	.word	0x20001b98

08004d10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d14:	4803      	ldr	r0, [pc, #12]	; (8004d24 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004d16:	f004 fb85 	bl	8009424 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004d1a:	4803      	ldr	r0, [pc, #12]	; (8004d28 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004d1c:	f004 fb82 	bl	8009424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004d20:	bf00      	nop
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	2000197c 	.word	0x2000197c
 8004d28:	20001c4c 	.word	0x20001c4c

08004d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d30:	4802      	ldr	r0, [pc, #8]	; (8004d3c <USART1_IRQHandler+0x10>)
 8004d32:	f005 ffaf 	bl	800ac94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20001da4 	.word	0x20001da4

08004d40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d44:	4802      	ldr	r0, [pc, #8]	; (8004d50 <USART2_IRQHandler+0x10>)
 8004d46:	f005 ffa5 	bl	800ac94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20001e18 	.word	0x20001e18

08004d54 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <DMA2_Stream7_IRQHandler+0x10>)
 8004d5a:	f001 ff21 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20001f00 	.word	0x20001f00

08004d68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004d6c:	4802      	ldr	r0, [pc, #8]	; (8004d78 <USART6_IRQHandler+0x10>)
 8004d6e:	f005 ff91 	bl	800ac94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20001e8c 	.word	0x20001e8c

08004d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return 1;
 8004d80:	2301      	movs	r3, #1
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <_kill>:

int _kill(int pid, int sig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d96:	f006 ffb9 	bl	800bd0c <__errno>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2216      	movs	r2, #22
 8004d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_exit>:

void _exit (int status)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004db4:	f04f 31ff 	mov.w	r1, #4294967295
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ffe7 	bl	8004d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dbe:	e7fe      	b.n	8004dbe <_exit+0x12>

08004dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e00a      	b.n	8004de8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dd2:	f3af 8000 	nop.w
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	60ba      	str	r2, [r7, #8]
 8004dde:	b2ca      	uxtb	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	3301      	adds	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	dbf0      	blt.n	8004dd2 <_read+0x12>
  }

  return len;
 8004df0:	687b      	ldr	r3, [r7, #4]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e009      	b.n	8004e20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	60ba      	str	r2, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	dbf1      	blt.n	8004e0c <_write+0x12>
  }
  return len;
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_close>:

int _close(int file)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e5a:	605a      	str	r2, [r3, #4]
  return 0;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <_isatty>:

int _isatty(int file)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e72:	2301      	movs	r3, #1
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <_sbrk+0x5c>)
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <_sbrk+0x60>)
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <_sbrk+0x64>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <_sbrk+0x64>)
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <_sbrk+0x68>)
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d207      	bcs.n	8004edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ecc:	f006 ff1e 	bl	800bd0c <__errno>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	220c      	movs	r2, #12
 8004ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	e009      	b.n	8004ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <_sbrk+0x64>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <_sbrk+0x64>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <_sbrk+0x64>)
 8004eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eee:	68fb      	ldr	r3, [r7, #12]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20020000 	.word	0x20020000
 8004efc:	00000400 	.word	0x00000400
 8004f00:	20001978 	.word	0x20001978
 8004f04:	20001fd8 	.word	0x20001fd8

08004f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <SystemInit+0x20>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <SystemInit+0x20>)
 8004f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b096      	sub	sp, #88	; 0x58
 8004f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	609a      	str	r2, [r3, #8]
 8004f56:	60da      	str	r2, [r3, #12]
 8004f58:	611a      	str	r2, [r3, #16]
 8004f5a:	615a      	str	r2, [r3, #20]
 8004f5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	2220      	movs	r2, #32
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f006 ff09 	bl	800bd7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f6a:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	; (8005068 <MX_TIM1_Init+0x13c>)
 8004f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8004f70:	4b3c      	ldr	r3, [pc, #240]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f72:	2204      	movs	r2, #4
 8004f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8004f7c:	4b39      	ldr	r3, [pc, #228]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f7e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8004f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f84:	4b37      	ldr	r3, [pc, #220]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f8a:	4b36      	ldr	r3, [pc, #216]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f96:	4833      	ldr	r0, [pc, #204]	; (8005064 <MX_TIM1_Init+0x138>)
 8004f98:	f003 fb2a 	bl	80085f0 <HAL_TIM_Base_Init>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004fa2:	f7ff fe33 	bl	8004c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004fac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	482c      	ldr	r0, [pc, #176]	; (8005064 <MX_TIM1_Init+0x138>)
 8004fb4:	f004 fc7c 	bl	80098b0 <HAL_TIM_ConfigClockSource>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004fbe:	f7ff fe25 	bl	8004c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004fc2:	4828      	ldr	r0, [pc, #160]	; (8005064 <MX_TIM1_Init+0x138>)
 8004fc4:	f003 fc92 	bl	80088ec <HAL_TIM_PWM_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004fce:	f7ff fe1d 	bl	8004c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4820      	ldr	r0, [pc, #128]	; (8005064 <MX_TIM1_Init+0x138>)
 8004fe2:	f005 fac3 	bl	800a56c <HAL_TIMEx_MasterConfigSynchronization>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004fec:	f7ff fe0e 	bl	8004c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ff0:	2360      	movs	r3, #96	; 0x60
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005000:	2300      	movs	r3, #0
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005004:	2300      	movs	r3, #0
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800500c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005010:	2200      	movs	r2, #0
 8005012:	4619      	mov	r1, r3
 8005014:	4813      	ldr	r0, [pc, #76]	; (8005064 <MX_TIM1_Init+0x138>)
 8005016:	f004 fb89 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005020:	f7ff fdf4 	bl	8004c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800503c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800503e:	2300      	movs	r3, #0
 8005040:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4807      	ldr	r0, [pc, #28]	; (8005064 <MX_TIM1_Init+0x138>)
 8005048:	f005 fafe 	bl	800a648 <HAL_TIMEx_ConfigBreakDeadTime>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005052:	f7ff fddb 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005056:	4803      	ldr	r0, [pc, #12]	; (8005064 <MX_TIM1_Init+0x138>)
 8005058:	f000 fa62 	bl	8005520 <HAL_TIM_MspPostInit>

}
 800505c:	bf00      	nop
 800505e:	3758      	adds	r7, #88	; 0x58
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	2000197c 	.word	0x2000197c
 8005068:	40010000 	.word	0x40010000

0800506c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	2224      	movs	r2, #36	; 0x24
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f006 fe7e 	bl	800bd7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005088:	4b21      	ldr	r3, [pc, #132]	; (8005110 <MX_TIM2_Init+0xa4>)
 800508a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800508e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005090:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <MX_TIM2_Init+0xa4>)
 8005092:	2200      	movs	r2, #0
 8005094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005096:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <MX_TIM2_Init+0xa4>)
 8005098:	2200      	movs	r2, #0
 800509a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800509c:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <MX_TIM2_Init+0xa4>)
 800509e:	f04f 32ff 	mov.w	r2, #4294967295
 80050a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <MX_TIM2_Init+0xa4>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <MX_TIM2_Init+0xa4>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80050b0:	2303      	movs	r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80050c4:	2300      	movs	r3, #0
 80050c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	4619      	mov	r1, r3
 80050da:	480d      	ldr	r0, [pc, #52]	; (8005110 <MX_TIM2_Init+0xa4>)
 80050dc:	f004 f860 	bl	80091a0 <HAL_TIM_Encoder_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80050e6:	f7ff fd91 	bl	8004c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4806      	ldr	r0, [pc, #24]	; (8005110 <MX_TIM2_Init+0xa4>)
 80050f8:	f005 fa38 	bl	800a56c <HAL_TIMEx_MasterConfigSynchronization>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005102:	f7ff fd83 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005106:	bf00      	nop
 8005108:	3730      	adds	r7, #48	; 0x30
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20001a30 	.word	0x20001a30

08005114 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08e      	sub	sp, #56	; 0x38
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800511a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	609a      	str	r2, [r3, #8]
 8005126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005128:	f107 0320 	add.w	r3, r7, #32
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
 8005140:	615a      	str	r2, [r3, #20]
 8005142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <MX_TIM3_Init+0xe4>)
 8005146:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <MX_TIM3_Init+0xe8>)
 8005148:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800514a:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <MX_TIM3_Init+0xe4>)
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005150:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <MX_TIM3_Init+0xe4>)
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 8005156:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <MX_TIM3_Init+0xe4>)
 8005158:	227c      	movs	r2, #124	; 0x7c
 800515a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800515c:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <MX_TIM3_Init+0xe4>)
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <MX_TIM3_Init+0xe4>)
 8005164:	2200      	movs	r2, #0
 8005166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005168:	4823      	ldr	r0, [pc, #140]	; (80051f8 <MX_TIM3_Init+0xe4>)
 800516a:	f003 fa41 	bl	80085f0 <HAL_TIM_Base_Init>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005174:	f7ff fd4a 	bl	8004c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800517e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005182:	4619      	mov	r1, r3
 8005184:	481c      	ldr	r0, [pc, #112]	; (80051f8 <MX_TIM3_Init+0xe4>)
 8005186:	f004 fb93 	bl	80098b0 <HAL_TIM_ConfigClockSource>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005190:	f7ff fd3c 	bl	8004c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005194:	4818      	ldr	r0, [pc, #96]	; (80051f8 <MX_TIM3_Init+0xe4>)
 8005196:	f003 fba9 	bl	80088ec <HAL_TIM_PWM_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80051a0:	f7ff fd34 	bl	8004c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051a4:	2300      	movs	r3, #0
 80051a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051ac:	f107 0320 	add.w	r3, r7, #32
 80051b0:	4619      	mov	r1, r3
 80051b2:	4811      	ldr	r0, [pc, #68]	; (80051f8 <MX_TIM3_Init+0xe4>)
 80051b4:	f005 f9da 	bl	800a56c <HAL_TIMEx_MasterConfigSynchronization>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80051be:	f7ff fd25 	bl	8004c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051c2:	2360      	movs	r3, #96	; 0x60
 80051c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	2200      	movs	r2, #0
 80051d6:	4619      	mov	r1, r3
 80051d8:	4807      	ldr	r0, [pc, #28]	; (80051f8 <MX_TIM3_Init+0xe4>)
 80051da:	f004 faa7 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80051e4:	f7ff fd12 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <MX_TIM3_Init+0xe4>)
 80051ea:	f000 f999 	bl	8005520 <HAL_TIM_MspPostInit>

}
 80051ee:	bf00      	nop
 80051f0:	3738      	adds	r7, #56	; 0x38
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20001ae4 	.word	0x20001ae4
 80051fc:	40000400 	.word	0x40000400

08005200 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005206:	463b      	mov	r3, r7
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <MX_TIM9_Init+0x6c>)
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <MX_TIM9_Init+0x70>)
 8005216:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 8005218:	4b14      	ldr	r3, [pc, #80]	; (800526c <MX_TIM9_Init+0x6c>)
 800521a:	2209      	movs	r2, #9
 800521c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <MX_TIM9_Init+0x6c>)
 8005220:	2200      	movs	r2, #0
 8005222:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <MX_TIM9_Init+0x6c>)
 8005226:	f240 32e7 	movw	r2, #999	; 0x3e7
 800522a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <MX_TIM9_Init+0x6c>)
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <MX_TIM9_Init+0x6c>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005238:	480c      	ldr	r0, [pc, #48]	; (800526c <MX_TIM9_Init+0x6c>)
 800523a:	f003 f9d9 	bl	80085f0 <HAL_TIM_Base_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005244:	f7ff fce2 	bl	8004c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800524c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800524e:	463b      	mov	r3, r7
 8005250:	4619      	mov	r1, r3
 8005252:	4806      	ldr	r0, [pc, #24]	; (800526c <MX_TIM9_Init+0x6c>)
 8005254:	f004 fb2c 	bl	80098b0 <HAL_TIM_ConfigClockSource>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800525e:	f7ff fcd5 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20001b98 	.word	0x20001b98
 8005270:	40014000 	.word	0x40014000

08005274 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	615a      	str	r2, [r3, #20]
 800528a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <MX_TIM11_Init+0xa0>)
 800528e:	4a22      	ldr	r2, [pc, #136]	; (8005318 <MX_TIM11_Init+0xa4>)
 8005290:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <MX_TIM11_Init+0xa0>)
 8005294:	2263      	movs	r2, #99	; 0x63
 8005296:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005298:	4b1e      	ldr	r3, [pc, #120]	; (8005314 <MX_TIM11_Init+0xa0>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052a0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80052a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a6:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ac:	4b19      	ldr	r3, [pc, #100]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80052b2:	4818      	ldr	r0, [pc, #96]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052b4:	f003 f99c 	bl	80085f0 <HAL_TIM_Base_Init>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80052be:	f7ff fca5 	bl	8004c0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80052c2:	4814      	ldr	r0, [pc, #80]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052c4:	f003 faac 	bl	8008820 <HAL_TIM_OC_Init>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80052ce:	f7ff fc9d 	bl	8004c0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80052d2:	2108      	movs	r1, #8
 80052d4:	480f      	ldr	r0, [pc, #60]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052d6:	f003 fe95 	bl	8009004 <HAL_TIM_OnePulse_Init>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80052e0:	f7ff fc94 	bl	8004c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80052e4:	2310      	movs	r3, #16
 80052e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80052e8:	f240 5399 	movw	r3, #1433	; 0x599
 80052ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052f6:	1d3b      	adds	r3, r7, #4
 80052f8:	2200      	movs	r2, #0
 80052fa:	4619      	mov	r1, r3
 80052fc:	4805      	ldr	r0, [pc, #20]	; (8005314 <MX_TIM11_Init+0xa0>)
 80052fe:	f004 f9b9 	bl	8009674 <HAL_TIM_OC_ConfigChannel>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8005308:	f7ff fc80 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800530c:	bf00      	nop
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20001c4c 	.word	0x20001c4c
 8005318:	40014800 	.word	0x40014800

0800531c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a53      	ldr	r2, [pc, #332]	; (8005478 <HAL_TIM_Base_MspInit+0x15c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d11e      	bne.n	800536c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	4b52      	ldr	r3, [pc, #328]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	4a51      	ldr	r2, [pc, #324]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6453      	str	r3, [r2, #68]	; 0x44
 800533e:	4b4f      	ldr	r3, [pc, #316]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	2018      	movs	r0, #24
 8005350:	f001 fa57 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005354:	2018      	movs	r0, #24
 8005356:	f001 fa70 	bl	800683a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800535a:	2200      	movs	r2, #0
 800535c:	2100      	movs	r1, #0
 800535e:	201a      	movs	r0, #26
 8005360:	f001 fa4f 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005364:	201a      	movs	r0, #26
 8005366:	f001 fa68 	bl	800683a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800536a:	e080      	b.n	800546e <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM3)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a43      	ldr	r2, [pc, #268]	; (8005480 <HAL_TIM_Base_MspInit+0x164>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d144      	bne.n	8005400 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4a3f      	ldr	r2, [pc, #252]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b3d      	ldr	r3, [pc, #244]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8005392:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 8005394:	4a3c      	ldr	r2, [pc, #240]	; (8005488 <HAL_TIM_Base_MspInit+0x16c>)
 8005396:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8005398:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 800539a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800539e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053a0:	4b38      	ldr	r3, [pc, #224]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053a2:	2240      	movs	r2, #64	; 0x40
 80053a4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053b4:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ba:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80053bc:	4b31      	ldr	r3, [pc, #196]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053c2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80053c4:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80053ca:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80053d6:	482b      	ldr	r0, [pc, #172]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053d8:	f001 fa4a 	bl	8006870 <HAL_DMA_Init>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_TIM_Base_MspInit+0xca>
      Error_Handler();
 80053e2:	f7ff fc13 	bl	8004c0c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a26      	ldr	r2, [pc, #152]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24
 80053ec:	4a25      	ldr	r2, [pc, #148]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a23      	ldr	r2, [pc, #140]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_TIM_Base_MspInit+0x168>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80053fe:	e036      	b.n	800546e <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM9)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a21      	ldr	r2, [pc, #132]	; (800548c <HAL_TIM_Base_MspInit+0x170>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d116      	bne.n	8005438 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	4a1a      	ldr	r2, [pc, #104]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6453      	str	r3, [r2, #68]	; 0x44
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	2018      	movs	r0, #24
 800542c:	f001 f9e9 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005430:	2018      	movs	r0, #24
 8005432:	f001 fa02 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 8005436:	e01a      	b.n	800546e <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM11)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <HAL_TIM_Base_MspInit+0x174>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d115      	bne.n	800546e <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a0c      	ldr	r2, [pc, #48]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <HAL_TIM_Base_MspInit+0x160>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	2100      	movs	r1, #0
 8005462:	201a      	movs	r0, #26
 8005464:	f001 f9cd 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005468:	201a      	movs	r0, #26
 800546a:	f001 f9e6 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40023800 	.word	0x40023800
 8005480:	40000400 	.word	0x40000400
 8005484:	20001d00 	.word	0x20001d00
 8005488:	40026070 	.word	0x40026070
 800548c:	40014000 	.word	0x40014000
 8005490:	40014800 	.word	0x40014800

08005494 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d12b      	bne.n	800550e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <HAL_TIM_Encoder_MspInit+0x84>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a16      	ldr	r2, [pc, #88]	; (8005518 <HAL_TIM_Encoder_MspInit+0x84>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_TIM_Encoder_MspInit+0x84>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <HAL_TIM_Encoder_MspInit+0x84>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <HAL_TIM_Encoder_MspInit+0x84>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <HAL_TIM_Encoder_MspInit+0x84>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054ee:	2303      	movs	r3, #3
 80054f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054fe:	2301      	movs	r3, #1
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	4619      	mov	r1, r3
 8005508:	4804      	ldr	r0, [pc, #16]	; (800551c <HAL_TIM_Encoder_MspInit+0x88>)
 800550a:	f001 fdbf 	bl	800708c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800550e:	bf00      	nop
 8005510:	3728      	adds	r7, #40	; 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	40020000 	.word	0x40020000

08005520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005528:	f107 0314 	add.w	r3, r7, #20
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a24      	ldr	r2, [pc, #144]	; (80055d0 <HAL_TIM_MspPostInit+0xb0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d11f      	bne.n	8005582 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <HAL_TIM_MspPostInit+0xb4>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <HAL_TIM_MspPostInit+0xb4>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6313      	str	r3, [r2, #48]	; 0x30
 8005552:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <HAL_TIM_MspPostInit+0xb4>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800555e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005564:	2302      	movs	r3, #2
 8005566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556c:	2300      	movs	r3, #0
 800556e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005570:	2301      	movs	r3, #1
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	4619      	mov	r1, r3
 800557a:	4817      	ldr	r0, [pc, #92]	; (80055d8 <HAL_TIM_MspPostInit+0xb8>)
 800557c:	f001 fd86 	bl	800708c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005580:	e022      	b.n	80055c8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_TIM_MspPostInit+0xbc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d11d      	bne.n	80055c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <HAL_TIM_MspPostInit+0xb4>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	4a0f      	ldr	r2, [pc, #60]	; (80055d4 <HAL_TIM_MspPostInit+0xb4>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6313      	str	r3, [r2, #48]	; 0x30
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_TIM_MspPostInit+0xb4>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ac:	2302      	movs	r3, #2
 80055ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b4:	2300      	movs	r3, #0
 80055b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055b8:	2302      	movs	r3, #2
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	4619      	mov	r1, r3
 80055c2:	4805      	ldr	r0, [pc, #20]	; (80055d8 <HAL_TIM_MspPostInit+0xb8>)
 80055c4:	f001 fd62 	bl	800708c <HAL_GPIO_Init>
}
 80055c8:	bf00      	nop
 80055ca:	3728      	adds	r7, #40	; 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40020000 	.word	0x40020000
 80055dc:	40000400 	.word	0x40000400

080055e0 <Trajectory>:
float setpoint_now = 0;
float target = 0;

// USER CODE ======================================================================================

void Trajectory(float setpoint_now_input, float velocity_max, float acceleration_max, int *position_out, float *velocity_out, float *acceleration_out, int homemode) {
 80055e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055e4:	b088      	sub	sp, #32
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	ed87 0a07 	vstr	s0, [r7, #28]
 80055ec:	edc7 0a06 	vstr	s1, [r7, #24]
 80055f0:	ed87 1a05 	vstr	s2, [r7, #20]
 80055f4:	6138      	str	r0, [r7, #16]
 80055f6:	60f9      	str	r1, [r7, #12]
 80055f8:	60ba      	str	r2, [r7, #8]
 80055fa:	607b      	str	r3, [r7, #4]
	static float time_err = 0;

	static float setpoint_past = 0;
	static float distance = 0;

	if(homemode == 1){
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d115      	bne.n	800562e <Trajectory+0x4e>
		setpoint_past = setpoint_now_input;
 8005602:	4a6c      	ldr	r2, [pc, #432]	; (80057b4 <Trajectory+0x1d4>)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	6013      	str	r3, [r2, #0]
		time_trajectory = 0;
 8005608:	4b6b      	ldr	r3, [pc, #428]	; (80057b8 <Trajectory+0x1d8>)
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
		abs_distance = 0;
 8005610:	4b6a      	ldr	r3, [pc, #424]	; (80057bc <Trajectory+0x1dc>)
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
		distance = 0;
 8005618:	4b69      	ldr	r3, [pc, #420]	; (80057c0 <Trajectory+0x1e0>)
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
		position = setpoint_now_input;
 8005620:	4a68      	ldr	r2, [pc, #416]	; (80057c4 <Trajectory+0x1e4>)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	6013      	str	r3, [r2, #0]
		initial_position = setpoint_now_input;
 8005626:	4a68      	ldr	r2, [pc, #416]	; (80057c8 <Trajectory+0x1e8>)
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	6013      	str	r3, [r2, #0]
		return;
 800562c:	e306      	b.n	8005c3c <Trajectory+0x65c>
	}

	else if(homemode == 0)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 82f2 	bne.w	8005c1a <Trajectory+0x63a>
	{
		// distance and +-(sign)
		if (setpoint_past != setpoint_now_input && time_trajectory == 0) {
 8005636:	4b5f      	ldr	r3, [pc, #380]	; (80057b4 <Trajectory+0x1d4>)
 8005638:	edd3 7a00 	vldr	s15, [r3]
 800563c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005640:	eeb4 7a67 	vcmp.f32	s14, s15
 8005644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005648:	d03f      	beq.n	80056ca <Trajectory+0xea>
 800564a:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <Trajectory+0x1d8>)
 800564c:	edd3 7a00 	vldr	s15, [r3]
 8005650:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005658:	d137      	bne.n	80056ca <Trajectory+0xea>
			setpoint_now = setpoint_now_input;
 800565a:	4a5c      	ldr	r2, [pc, #368]	; (80057cc <Trajectory+0x1ec>)
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	6013      	str	r3, [r2, #0]
			distance = setpoint_now - initial_position;
 8005660:	4b5a      	ldr	r3, [pc, #360]	; (80057cc <Trajectory+0x1ec>)
 8005662:	ed93 7a00 	vldr	s14, [r3]
 8005666:	4b58      	ldr	r3, [pc, #352]	; (80057c8 <Trajectory+0x1e8>)
 8005668:	edd3 7a00 	vldr	s15, [r3]
 800566c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005670:	4b53      	ldr	r3, [pc, #332]	; (80057c0 <Trajectory+0x1e0>)
 8005672:	edc3 7a00 	vstr	s15, [r3]
			setpoint_past = setpoint_now;
 8005676:	4b55      	ldr	r3, [pc, #340]	; (80057cc <Trajectory+0x1ec>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a4e      	ldr	r2, [pc, #312]	; (80057b4 <Trajectory+0x1d4>)
 800567c:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 800567e:	4b50      	ldr	r3, [pc, #320]	; (80057c0 <Trajectory+0x1e0>)
 8005680:	edd3 7a00 	vldr	s15, [r3]
 8005684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	db07      	blt.n	800569e <Trajectory+0xbe>
				sign = 1;
 800568e:	4b50      	ldr	r3, [pc, #320]	; (80057d0 <Trajectory+0x1f0>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
				abs_distance = distance;
 8005694:	4b4a      	ldr	r3, [pc, #296]	; (80057c0 <Trajectory+0x1e0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a48      	ldr	r2, [pc, #288]	; (80057bc <Trajectory+0x1dc>)
 800569a:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 800569c:	e019      	b.n	80056d2 <Trajectory+0xf2>
			} else if (distance < 0) {
 800569e:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <Trajectory+0x1e0>)
 80056a0:	edd3 7a00 	vldr	s15, [r3]
 80056a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	d400      	bmi.n	80056b0 <Trajectory+0xd0>
			if (distance >= 0) {
 80056ae:	e010      	b.n	80056d2 <Trajectory+0xf2>
				sign = -1;
 80056b0:	4b47      	ldr	r3, [pc, #284]	; (80057d0 <Trajectory+0x1f0>)
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295
 80056b6:	601a      	str	r2, [r3, #0]
				abs_distance = distance * (-1);
 80056b8:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <Trajectory+0x1e0>)
 80056ba:	edd3 7a00 	vldr	s15, [r3]
 80056be:	eef1 7a67 	vneg.f32	s15, s15
 80056c2:	4b3e      	ldr	r3, [pc, #248]	; (80057bc <Trajectory+0x1dc>)
 80056c4:	edc3 7a00 	vstr	s15, [r3]
			if (distance >= 0) {
 80056c8:	e003      	b.n	80056d2 <Trajectory+0xf2>
			}
		} else {
			setpoint_past = setpoint_now;
 80056ca:	4b40      	ldr	r3, [pc, #256]	; (80057cc <Trajectory+0x1ec>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a39      	ldr	r2, [pc, #228]	; (80057b4 <Trajectory+0x1d4>)
 80056d0:	6013      	str	r3, [r2, #0]
		}

	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max) / acceleration_max)) {
 80056d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80056d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80056da:	edd7 7a05 	vldr	s15, [r7, #20]
 80056de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <Trajectory+0x1dc>)
 80056e4:	edd3 7a00 	vldr	s15, [r3]
 80056e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	d57a      	bpl.n	80057e8 <Trajectory+0x208>
		time_acc = ((velocity_max - 0) / acceleration_max);
 80056f2:	edd7 6a06 	vldr	s13, [r7, #24]
 80056f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80056fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fe:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <Trajectory+0x1f4>)
 8005700:	edc3 7a00 	vstr	s15, [r3]
		time_const = ((1.0 / velocity_max) * ((abs_distance) - ((velocity_max * velocity_max) / acceleration_max)));
 8005704:	69b8      	ldr	r0, [r7, #24]
 8005706:	f7fa ff27 	bl	8000558 <__aeabi_f2d>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	f04f 0000 	mov.w	r0, #0
 8005712:	4931      	ldr	r1, [pc, #196]	; (80057d8 <Trajectory+0x1f8>)
 8005714:	f7fb f8a2 	bl	800085c <__aeabi_ddiv>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <Trajectory+0x1dc>)
 8005722:	ed93 7a00 	vldr	s14, [r3]
 8005726:	edd7 7a06 	vldr	s15, [r7, #24]
 800572a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800572e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005732:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800573a:	ee17 0a90 	vmov	r0, s15
 800573e:	f7fa ff0b 	bl	8000558 <__aeabi_f2d>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fa ff5d 	bl	8000608 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f7fb fa4f 	bl	8000bf8 <__aeabi_d2f>
 800575a:	4603      	mov	r3, r0
 800575c:	4a1f      	ldr	r2, [pc, #124]	; (80057dc <Trajectory+0x1fc>)
 800575e:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance - (velocity_max * velocity_max) / acceleration_max) / velocity_max;
 8005760:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <Trajectory+0x1f4>)
 8005762:	edd3 7a00 	vldr	s15, [r3]
 8005766:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <Trajectory+0x1dc>)
 800576c:	edd3 6a00 	vldr	s13, [r3]
 8005770:	edd7 7a06 	vldr	s15, [r7, #24]
 8005774:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8005778:	ed97 6a05 	vldr	s12, [r7, #20]
 800577c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005780:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005784:	edd7 6a06 	vldr	s13, [r7, #24]
 8005788:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800578c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005790:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <Trajectory+0x200>)
 8005792:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <Trajectory+0x1f0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <Trajectory+0x204>)
 80057ac:	edc3 7a00 	vstr	s15, [r3]
 80057b0:	e056      	b.n	8005860 <Trajectory+0x280>
 80057b2:	bf00      	nop
 80057b4:	20001d7c 	.word	0x20001d7c
 80057b8:	20001d80 	.word	0x20001d80
 80057bc:	20001d60 	.word	0x20001d60
 80057c0:	20001d84 	.word	0x20001d84
 80057c4:	20001d68 	.word	0x20001d68
 80057c8:	20001d64 	.word	0x20001d64
 80057cc:	20001d78 	.word	0x20001d78
 80057d0:	20001d74 	.word	0x20001d74
 80057d4:	20001d88 	.word	0x20001d88
 80057d8:	3ff00000 	.word	0x3ff00000
 80057dc:	20001d8c 	.word	0x20001d8c
 80057e0:	20001d90 	.word	0x20001d90
 80057e4:	20001d94 	.word	0x20001d94
	}

	else {
		time_acc = sqrt(abs_distance / acceleration_max);
 80057e8:	4b8d      	ldr	r3, [pc, #564]	; (8005a20 <Trajectory+0x440>)
 80057ea:	ed93 7a00 	vldr	s14, [r3]
 80057ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80057f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057f6:	ee16 0a90 	vmov	r0, s13
 80057fa:	f7fa fead 	bl	8000558 <__aeabi_f2d>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	ec43 2b10 	vmov	d0, r2, r3
 8005806:	f00b f9f5 	bl	8010bf4 <sqrt>
 800580a:	ec53 2b10 	vmov	r2, r3, d0
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	f7fb f9f1 	bl	8000bf8 <__aeabi_d2f>
 8005816:	4603      	mov	r3, r0
 8005818:	4a82      	ldr	r2, [pc, #520]	; (8005a24 <Trajectory+0x444>)
 800581a:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 800581c:	4b81      	ldr	r3, [pc, #516]	; (8005a24 <Trajectory+0x444>)
 800581e:	edd3 7a00 	vldr	s15, [r3]
 8005822:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005826:	4b80      	ldr	r3, [pc, #512]	; (8005a28 <Trajectory+0x448>)
 8005828:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 800582c:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <Trajectory+0x44c>)
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8005834:	4b7e      	ldr	r3, [pc, #504]	; (8005a30 <Trajectory+0x450>)
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc * sign;
 800583c:	4b79      	ldr	r3, [pc, #484]	; (8005a24 <Trajectory+0x444>)
 800583e:	ed93 7a00 	vldr	s14, [r3]
 8005842:	edd7 7a05 	vldr	s15, [r7, #20]
 8005846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800584a:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <Trajectory+0x454>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	4b77      	ldr	r3, [pc, #476]	; (8005a38 <Trajectory+0x458>)
 800585c:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 8005860:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <Trajectory+0x45c>)
 8005862:	edd3 7a00 	vldr	s15, [r3]
 8005866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	f2c0 8085 	blt.w	800597c <Trajectory+0x39c>
 8005872:	4b72      	ldr	r3, [pc, #456]	; (8005a3c <Trajectory+0x45c>)
 8005874:	ed93 7a00 	vldr	s14, [r3]
 8005878:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <Trajectory+0x444>)
 800587a:	edd3 7a00 	vldr	s15, [r3]
 800587e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	d579      	bpl.n	800597c <Trajectory+0x39c>
		time_trajectory += 0.0001;
 8005888:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <Trajectory+0x45c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7fa fe63 	bl	8000558 <__aeabi_f2d>
 8005892:	a361      	add	r3, pc, #388	; (adr r3, 8005a18 <Trajectory+0x438>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fd00 	bl	800029c <__adddf3>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	f7fb f9a8 	bl	8000bf8 <__aeabi_d2f>
 80058a8:	4603      	mov	r3, r0
 80058aa:	4a64      	ldr	r2, [pc, #400]	; (8005a3c <Trajectory+0x45c>)
 80058ac:	6013      	str	r3, [r2, #0]
		position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory) * sign);
 80058ae:	4b64      	ldr	r3, [pc, #400]	; (8005a40 <Trajectory+0x460>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fa fe50 	bl	8000558 <__aeabi_f2d>
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f7fa fe4b 	bl	8000558 <__aeabi_f2d>
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <Trajectory+0x464>)
 80058c8:	f7fa fe9e 	bl	8000608 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4690      	mov	r8, r2
 80058d2:	4699      	mov	r9, r3
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <Trajectory+0x45c>)
 80058d6:	ed93 7a00 	vldr	s14, [r3]
 80058da:	4b58      	ldr	r3, [pc, #352]	; (8005a3c <Trajectory+0x45c>)
 80058dc:	edd3 7a00 	vldr	s15, [r3]
 80058e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e4:	ee17 0a90 	vmov	r0, s15
 80058e8:	f7fa fe36 	bl	8000558 <__aeabi_f2d>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4640      	mov	r0, r8
 80058f2:	4649      	mov	r1, r9
 80058f4:	f7fa fe88 	bl	8000608 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4690      	mov	r8, r2
 80058fe:	4699      	mov	r9, r3
 8005900:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <Trajectory+0x454>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fa fe15 	bl	8000534 <__aeabi_i2d>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fa fe79 	bl	8000608 <__aeabi_dmul>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fa fcbd 	bl	800029c <__adddf3>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f7fb f965 	bl	8000bf8 <__aeabi_d2f>
 800592e:	4603      	mov	r3, r0
 8005930:	4a45      	ldr	r2, [pc, #276]	; (8005a48 <Trajectory+0x468>)
 8005932:	6013      	str	r3, [r2, #0]
		velocity = (acceleration_max * time_trajectory * sign);
 8005934:	4b41      	ldr	r3, [pc, #260]	; (8005a3c <Trajectory+0x45c>)
 8005936:	ed93 7a00 	vldr	s14, [r3]
 800593a:	edd7 7a05 	vldr	s15, [r7, #20]
 800593e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005942:	4b3c      	ldr	r3, [pc, #240]	; (8005a34 <Trajectory+0x454>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	4b3e      	ldr	r3, [pc, #248]	; (8005a4c <Trajectory+0x46c>)
 8005954:	edc3 7a00 	vstr	s15, [r3]
		position_acc = position;
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <Trajectory+0x468>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <Trajectory+0x470>)
 800595e:	6013      	str	r3, [r2, #0]
		acceleration = acceleration_max * sign;
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <Trajectory+0x454>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800596c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005974:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <Trajectory+0x474>)
 8005976:	edc3 7a00 	vstr	s15, [r3]
 800597a:	e12d      	b.n	8005bd8 <Trajectory+0x5f8>
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc)) {
 800597c:	4b2a      	ldr	r3, [pc, #168]	; (8005a28 <Trajectory+0x448>)
 800597e:	ed93 7a00 	vldr	s14, [r3]
 8005982:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <Trajectory+0x444>)
 8005984:	edd3 7a00 	vldr	s15, [r3]
 8005988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800598c:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <Trajectory+0x45c>)
 800598e:	edd3 7a00 	vldr	s15, [r3]
 8005992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599a:	dd5d      	ble.n	8005a58 <Trajectory+0x478>
		time_trajectory += 0.0001;
 800599c:	4b27      	ldr	r3, [pc, #156]	; (8005a3c <Trajectory+0x45c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fa fdd9 	bl	8000558 <__aeabi_f2d>
 80059a6:	a31c      	add	r3, pc, #112	; (adr r3, 8005a18 <Trajectory+0x438>)
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f7fa fc76 	bl	800029c <__adddf3>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7fb f91e 	bl	8000bf8 <__aeabi_d2f>
 80059bc:	4603      	mov	r3, r0
 80059be:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <Trajectory+0x45c>)
 80059c0:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 80059c2:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <Trajectory+0x45c>)
 80059c4:	ed93 7a00 	vldr	s14, [r3]
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <Trajectory+0x444>)
 80059ca:	edd3 7a00 	vldr	s15, [r3]
 80059ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059d2:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <Trajectory+0x458>)
 80059d4:	edd3 7a00 	vldr	s15, [r3]
 80059d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059dc:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <Trajectory+0x470>)
 80059de:	edd3 7a00 	vldr	s15, [r3]
 80059e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e6:	4b18      	ldr	r3, [pc, #96]	; (8005a48 <Trajectory+0x468>)
 80059e8:	edc3 7a00 	vstr	s15, [r3]
		position_const = position - position_acc;
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <Trajectory+0x468>)
 80059ee:	ed93 7a00 	vldr	s14, [r3]
 80059f2:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <Trajectory+0x470>)
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059fc:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <Trajectory+0x450>)
 80059fe:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <Trajectory+0x458>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <Trajectory+0x46c>)
 8005a08:	6013      	str	r3, [r2, #0]
		acceleration = 0;
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <Trajectory+0x474>)
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e0e1      	b.n	8005bd8 <Trajectory+0x5f8>
 8005a14:	f3af 8000 	nop.w
 8005a18:	eb1c432d 	.word	0xeb1c432d
 8005a1c:	3f1a36e2 	.word	0x3f1a36e2
 8005a20:	20001d60 	.word	0x20001d60
 8005a24:	20001d88 	.word	0x20001d88
 8005a28:	20001d90 	.word	0x20001d90
 8005a2c:	20001d8c 	.word	0x20001d8c
 8005a30:	20001d98 	.word	0x20001d98
 8005a34:	20001d74 	.word	0x20001d74
 8005a38:	20001d94 	.word	0x20001d94
 8005a3c:	20001d80 	.word	0x20001d80
 8005a40:	20001d64 	.word	0x20001d64
 8005a44:	3fe00000 	.word	0x3fe00000
 8005a48:	20001d68 	.word	0x20001d68
 8005a4c:	20001d6c 	.word	0x20001d6c
 8005a50:	20001d9c 	.word	0x20001d9c
 8005a54:	20001d70 	.word	0x20001d70
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total)) {
 8005a58:	4b7d      	ldr	r3, [pc, #500]	; (8005c50 <Trajectory+0x670>)
 8005a5a:	ed93 7a00 	vldr	s14, [r3]
 8005a5e:	4b7d      	ldr	r3, [pc, #500]	; (8005c54 <Trajectory+0x674>)
 8005a60:	edd3 7a00 	vldr	s15, [r3]
 8005a64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a68:	4b7b      	ldr	r3, [pc, #492]	; (8005c58 <Trajectory+0x678>)
 8005a6a:	edd3 7a00 	vldr	s15, [r3]
 8005a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a76:	f200 80af 	bhi.w	8005bd8 <Trajectory+0x5f8>
 8005a7a:	4b77      	ldr	r3, [pc, #476]	; (8005c58 <Trajectory+0x678>)
 8005a7c:	ed93 7a00 	vldr	s14, [r3]
 8005a80:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <Trajectory+0x670>)
 8005a82:	edd3 7a00 	vldr	s15, [r3]
 8005a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	f140 80a3 	bpl.w	8005bd8 <Trajectory+0x5f8>
		time_trajectory += 0.0001;
 8005a92:	4b71      	ldr	r3, [pc, #452]	; (8005c58 <Trajectory+0x678>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fa fd5e 	bl	8000558 <__aeabi_f2d>
 8005a9c:	a36a      	add	r3, pc, #424	; (adr r3, 8005c48 <Trajectory+0x668>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f7fa fbfb 	bl	800029c <__adddf3>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	f7fb f8a3 	bl	8000bf8 <__aeabi_d2f>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a68      	ldr	r2, [pc, #416]	; (8005c58 <Trajectory+0x678>)
 8005ab6:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 8005ab8:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <Trajectory+0x678>)
 8005aba:	ed93 7a00 	vldr	s14, [r3]
 8005abe:	4b65      	ldr	r3, [pc, #404]	; (8005c54 <Trajectory+0x674>)
 8005ac0:	edd3 6a00 	vldr	s13, [r3]
 8005ac4:	4b65      	ldr	r3, [pc, #404]	; (8005c5c <Trajectory+0x67c>)
 8005ac6:	edd3 7a00 	vldr	s15, [r3]
 8005aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad2:	4b63      	ldr	r3, [pc, #396]	; (8005c60 <Trajectory+0x680>)
 8005ad4:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 * (-1) * acceleration_max * (time_err * time_err) * sign);
 8005ad8:	4b62      	ldr	r3, [pc, #392]	; (8005c64 <Trajectory+0x684>)
 8005ada:	ed93 7a00 	vldr	s14, [r3]
 8005ade:	4b62      	ldr	r3, [pc, #392]	; (8005c68 <Trajectory+0x688>)
 8005ae0:	edd3 7a00 	vldr	s15, [r3]
 8005ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ae8:	4b60      	ldr	r3, [pc, #384]	; (8005c6c <Trajectory+0x68c>)
 8005aea:	edd3 6a00 	vldr	s13, [r3]
 8005aee:	4b5c      	ldr	r3, [pc, #368]	; (8005c60 <Trajectory+0x680>)
 8005af0:	edd3 7a00 	vldr	s15, [r3]
 8005af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afc:	ee17 0a90 	vmov	r0, s15
 8005b00:	f7fa fd2a 	bl	8000558 <__aeabi_f2d>
 8005b04:	4604      	mov	r4, r0
 8005b06:	460d      	mov	r5, r1
 8005b08:	6978      	ldr	r0, [r7, #20]
 8005b0a:	f7fa fd25 	bl	8000558 <__aeabi_f2d>
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	4b57      	ldr	r3, [pc, #348]	; (8005c70 <Trajectory+0x690>)
 8005b14:	f7fa fd78 	bl	8000608 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4690      	mov	r8, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	4b4f      	ldr	r3, [pc, #316]	; (8005c60 <Trajectory+0x680>)
 8005b22:	ed93 7a00 	vldr	s14, [r3]
 8005b26:	4b4e      	ldr	r3, [pc, #312]	; (8005c60 <Trajectory+0x680>)
 8005b28:	edd3 7a00 	vldr	s15, [r3]
 8005b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b30:	ee17 0a90 	vmov	r0, s15
 8005b34:	f7fa fd10 	bl	8000558 <__aeabi_f2d>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f7fa fd62 	bl	8000608 <__aeabi_dmul>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4690      	mov	r8, r2
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	4b49      	ldr	r3, [pc, #292]	; (8005c74 <Trajectory+0x694>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fa fcef 	bl	8000534 <__aeabi_i2d>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f7fa fd53 	bl	8000608 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4620      	mov	r0, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa fb97 	bl	800029c <__adddf3>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f7fb f83f 	bl	8000bf8 <__aeabi_d2f>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4a3e      	ldr	r2, [pc, #248]	; (8005c78 <Trajectory+0x698>)
 8005b7e:	6013      	str	r3, [r2, #0]
		velocity = (-acceleration_max * sign * time_err) + (max_velocity);
 8005b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b84:	eeb1 7a67 	vneg.f32	s14, s15
 8005b88:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <Trajectory+0x694>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	ee07 3a90 	vmov	s15, r3
 8005b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <Trajectory+0x680>)
 8005b9a:	edd3 7a00 	vldr	s15, [r3]
 8005b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ba2:	4b32      	ldr	r3, [pc, #200]	; (8005c6c <Trajectory+0x68c>)
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bac:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <Trajectory+0x69c>)
 8005bae:	edc3 7a00 	vstr	s15, [r3]
		acceleration = -acceleration_max * sign;
 8005bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bb6:	eeb1 7a67 	vneg.f32	s14, s15
 8005bba:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <Trajectory+0x694>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <Trajectory+0x6a0>)
 8005bcc:	edc3 7a00 	vstr	s15, [r3]
		initial_position = position;
 8005bd0:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <Trajectory+0x698>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2b      	ldr	r2, [pc, #172]	; (8005c84 <Trajectory+0x6a4>)
 8005bd6:	6013      	str	r3, [r2, #0]
	}

	position = (int) position;
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <Trajectory+0x698>)
 8005bda:	edd3 7a00 	vldr	s15, [r3]
 8005bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be6:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <Trajectory+0x698>)
 8005be8:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_now == position) {
 8005bec:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <Trajectory+0x6a8>)
 8005bee:	ed93 7a00 	vldr	s14, [r3]
 8005bf2:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <Trajectory+0x698>)
 8005bf4:	edd3 7a00 	vldr	s15, [r3]
 8005bf8:	eeb4 7a67 	vcmp.f32	s14, s15
 8005bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c00:	d10b      	bne.n	8005c1a <Trajectory+0x63a>
		time_trajectory = 0;
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <Trajectory+0x678>)
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
		acceleration = 0;
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <Trajectory+0x6a0>)
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
		velocity = 0;
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <Trajectory+0x69c>)
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
	}
	}

	*position_out = position;
 8005c1a:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <Trajectory+0x698>)
 8005c1c:	edd3 7a00 	vldr	s15, [r3]
 8005c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c24:	ee17 2a90 	vmov	r2, s15
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	601a      	str	r2, [r3, #0]
	*velocity_out = velocity;
 8005c2c:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <Trajectory+0x69c>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]
	*acceleration_out = acceleration;
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <Trajectory+0x6a0>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	601a      	str	r2, [r3, #0]
}
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c44:	f3af 8000 	nop.w
 8005c48:	eb1c432d 	.word	0xeb1c432d
 8005c4c:	3f1a36e2 	.word	0x3f1a36e2
 8005c50:	20001d90 	.word	0x20001d90
 8005c54:	20001d88 	.word	0x20001d88
 8005c58:	20001d80 	.word	0x20001d80
 8005c5c:	20001d8c 	.word	0x20001d8c
 8005c60:	20001da0 	.word	0x20001da0
 8005c64:	20001d9c 	.word	0x20001d9c
 8005c68:	20001d98 	.word	0x20001d98
 8005c6c:	20001d94 	.word	0x20001d94
 8005c70:	bfe00000 	.word	0xbfe00000
 8005c74:	20001d74 	.word	0x20001d74
 8005c78:	20001d68 	.word	0x20001d68
 8005c7c:	20001d6c 	.word	0x20001d6c
 8005c80:	20001d70 	.word	0x20001d70
 8005c84:	20001d64 	.word	0x20001d64
 8005c88:	20001d78 	.word	0x20001d78

08005c8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c90:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005c92:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <MX_USART1_UART_Init+0x50>)
 8005c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005cc2:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <MX_USART1_UART_Init+0x4c>)
 8005cc4:	f004 fd30 	bl	800a728 <HAL_UART_Init>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005cce:	f7fe ff9d 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20001da4 	.word	0x20001da4
 8005cdc:	40011000 	.word	0x40011000

08005ce0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005ce4:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005ce6:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <MX_USART2_UART_Init+0x54>)
 8005ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005cea:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005cec:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cf8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d08:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005d0a:	220c      	movs	r2, #12
 8005d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d1a:	4805      	ldr	r0, [pc, #20]	; (8005d30 <MX_USART2_UART_Init+0x50>)
 8005d1c:	f004 fd04 	bl	800a728 <HAL_UART_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8005d26:	f7fe ff71 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d2a:	bf00      	nop
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20001e18 	.word	0x20001e18
 8005d34:	40004400 	.word	0x40004400

08005d38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <MX_USART6_UART_Init+0x50>)
 8005d40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005d48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005d50:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d5e:	2208      	movs	r2, #8
 8005d60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8005d6e:	4805      	ldr	r0, [pc, #20]	; (8005d84 <MX_USART6_UART_Init+0x4c>)
 8005d70:	f004 fd34 	bl	800a7dc <HAL_HalfDuplex_Init>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005d7a:	f7fe ff47 	bl	8004c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20001e8c 	.word	0x20001e8c
 8005d88:	40011400 	.word	0x40011400

08005d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08e      	sub	sp, #56	; 0x38
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a85      	ldr	r2, [pc, #532]	; (8005fc0 <HAL_UART_MspInit+0x234>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d163      	bne.n	8005e76 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	4b84      	ldr	r3, [pc, #528]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	4a83      	ldr	r2, [pc, #524]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005db8:	f043 0310 	orr.w	r3, r3, #16
 8005dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dbe:	4b81      	ldr	r3, [pc, #516]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	4b7d      	ldr	r3, [pc, #500]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	4a7c      	ldr	r2, [pc, #496]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dda:	4b7a      	ldr	r3, [pc, #488]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005de6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dec:	2302      	movs	r3, #2
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df4:	2303      	movs	r3, #3
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005df8:	2307      	movs	r3, #7
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e00:	4619      	mov	r1, r3
 8005e02:	4871      	ldr	r0, [pc, #452]	; (8005fc8 <HAL_UART_MspInit+0x23c>)
 8005e04:	f001 f942 	bl	800708c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005e08:	4b70      	ldr	r3, [pc, #448]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e0a:	4a71      	ldr	r2, [pc, #452]	; (8005fd0 <HAL_UART_MspInit+0x244>)
 8005e0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005e0e:	4b6f      	ldr	r3, [pc, #444]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e16:	4b6d      	ldr	r3, [pc, #436]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e18:	2240      	movs	r2, #64	; 0x40
 8005e1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e1c:	4b6b      	ldr	r3, [pc, #428]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e22:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e2a:	4b68      	ldr	r3, [pc, #416]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e30:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005e36:	4b65      	ldr	r3, [pc, #404]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e3c:	4b63      	ldr	r3, [pc, #396]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e42:	4b62      	ldr	r3, [pc, #392]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e48:	4860      	ldr	r0, [pc, #384]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e4a:	f000 fd11 	bl	8006870 <HAL_DMA_Init>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005e54:	f7fe feda 	bl	8004c0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a5c      	ldr	r2, [pc, #368]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8005e5e:	4a5b      	ldr	r2, [pc, #364]	; (8005fcc <HAL_UART_MspInit+0x240>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	2025      	movs	r0, #37	; 0x25
 8005e6a:	f000 fcca 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e6e:	2025      	movs	r0, #37	; 0x25
 8005e70:	f000 fce3 	bl	800683a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005e74:	e0a0      	b.n	8005fb8 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART2)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a56      	ldr	r2, [pc, #344]	; (8005fd4 <HAL_UART_MspInit+0x248>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d162      	bne.n	8005f46 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	4b4f      	ldr	r3, [pc, #316]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	4a4e      	ldr	r2, [pc, #312]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e90:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	4b48      	ldr	r3, [pc, #288]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4a47      	ldr	r2, [pc, #284]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8005eac:	4b45      	ldr	r3, [pc, #276]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005eb8:	230c      	movs	r3, #12
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ec8:	2307      	movs	r3, #7
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	483d      	ldr	r0, [pc, #244]	; (8005fc8 <HAL_UART_MspInit+0x23c>)
 8005ed4:	f001 f8da 	bl	800708c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005ed8:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005eda:	4a40      	ldr	r2, [pc, #256]	; (8005fdc <HAL_UART_MspInit+0x250>)
 8005edc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005ede:	4b3e      	ldr	r3, [pc, #248]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ee4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ee6:	4b3c      	ldr	r3, [pc, #240]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005ee8:	2240      	movs	r2, #64	; 0x40
 8005eea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eec:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ef2:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005efa:	4b37      	ldr	r3, [pc, #220]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f00:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005f06:	4b34      	ldr	r3, [pc, #208]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f0c:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f12:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005f18:	482f      	ldr	r0, [pc, #188]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f1a:	f000 fca9 	bl	8006870 <HAL_DMA_Init>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005f24:	f7fe fe72 	bl	8004c0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	; (8005fd8 <HAL_UART_MspInit+0x24c>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f34:	2200      	movs	r2, #0
 8005f36:	2100      	movs	r1, #0
 8005f38:	2026      	movs	r0, #38	; 0x26
 8005f3a:	f000 fc62 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f3e:	2026      	movs	r0, #38	; 0x26
 8005f40:	f000 fc7b 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 8005f44:	e038      	b.n	8005fb8 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART6)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <HAL_UART_MspInit+0x254>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d133      	bne.n	8005fb8 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	4a1a      	ldr	r2, [pc, #104]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005f5a:	f043 0320 	orr.w	r3, r3, #32
 8005f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8005f60:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005f76:	f043 0304 	orr.w	r3, r3, #4
 8005f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_UART_MspInit+0x238>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f8c:	2312      	movs	r3, #18
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f94:	2303      	movs	r3, #3
 8005f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4810      	ldr	r0, [pc, #64]	; (8005fe4 <HAL_UART_MspInit+0x258>)
 8005fa4:	f001 f872 	bl	800708c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2100      	movs	r1, #0
 8005fac:	2047      	movs	r0, #71	; 0x47
 8005fae:	f000 fc28 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005fb2:	2047      	movs	r0, #71	; 0x47
 8005fb4:	f000 fc41 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 8005fb8:	bf00      	nop
 8005fba:	3738      	adds	r7, #56	; 0x38
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40020000 	.word	0x40020000
 8005fcc:	20001f00 	.word	0x20001f00
 8005fd0:	400264b8 	.word	0x400264b8
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	20001f60 	.word	0x20001f60
 8005fdc:	400260a0 	.word	0x400260a0
 8005fe0:	40011400 	.word	0x40011400
 8005fe4:	40020800 	.word	0x40020800

08005fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005fec:	480d      	ldr	r0, [pc, #52]	; (8006024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005fee:	490e      	ldr	r1, [pc, #56]	; (8006028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ff0:	4a0e      	ldr	r2, [pc, #56]	; (800602c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ff4:	e002      	b.n	8005ffc <LoopCopyDataInit>

08005ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ffa:	3304      	adds	r3, #4

08005ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006000:	d3f9      	bcc.n	8005ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006002:	4a0b      	ldr	r2, [pc, #44]	; (8006030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006004:	4c0b      	ldr	r4, [pc, #44]	; (8006034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006008:	e001      	b.n	800600e <LoopFillZerobss>

0800600a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800600a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800600c:	3204      	adds	r2, #4

0800600e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800600e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006010:	d3fb      	bcc.n	800600a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006012:	f7fe ff79 	bl	8004f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006016:	f005 fe7f 	bl	800bd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800601a:	f7fe fcf9 	bl	8004a10 <main>
  bx  lr    
 800601e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006028:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 800602c:	08013810 	.word	0x08013810
  ldr r2, =_sbss
 8006030:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8006034:	20001fd4 	.word	0x20001fd4

08006038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006038:	e7fe      	b.n	8006038 <ADC_IRQHandler>
	...

0800603c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006040:	4b0e      	ldr	r3, [pc, #56]	; (800607c <HAL_Init+0x40>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <HAL_Init+0x40>)
 8006046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800604a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_Init+0x40>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0a      	ldr	r2, [pc, #40]	; (800607c <HAL_Init+0x40>)
 8006052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <HAL_Init+0x40>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a07      	ldr	r2, [pc, #28]	; (800607c <HAL_Init+0x40>)
 800605e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006064:	2003      	movs	r0, #3
 8006066:	f000 fbc1 	bl	80067ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800606a:	2000      	movs	r0, #0
 800606c:	f000 f808 	bl	8006080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006070:	f7fe fdd2 	bl	8004c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40023c00 	.word	0x40023c00

08006080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <HAL_InitTick+0x54>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_InitTick+0x58>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006096:	fbb3 f3f1 	udiv	r3, r3, r1
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fbd9 	bl	8006856 <HAL_SYSTICK_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e00e      	b.n	80060cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b0f      	cmp	r3, #15
 80060b2:	d80a      	bhi.n	80060ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060b4:	2200      	movs	r2, #0
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	f000 fba1 	bl	8006802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060c0:	4a06      	ldr	r2, [pc, #24]	; (80060dc <HAL_InitTick+0x5c>)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000230 	.word	0x20000230
 80060d8:	20000238 	.word	0x20000238
 80060dc:	20000234 	.word	0x20000234

080060e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_IncTick+0x20>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_IncTick+0x24>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4413      	add	r3, r2
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_IncTick+0x24>)
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000238 	.word	0x20000238
 8006104:	20001fc0 	.word	0x20001fc0

08006108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return uwTick;
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <HAL_GetTick+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20001fc0 	.word	0x20001fc0

08006120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006128:	f7ff ffee 	bl	8006108 <HAL_GetTick>
 800612c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d005      	beq.n	8006146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_Delay+0x44>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006146:	bf00      	nop
 8006148:	f7ff ffde 	bl	8006108 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d8f7      	bhi.n	8006148 <HAL_Delay+0x28>
  {
  }
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000238 	.word	0x20000238

08006168 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e033      	b.n	80061e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb ffaa 	bl	80020e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d118      	bne.n	80061d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061ae:	f023 0302 	bic.w	r3, r3, #2
 80061b2:	f043 0202 	orr.w	r2, r3, #2
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f94a 	bl	8006454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
 80061d6:	e001      	b.n	80061dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_ADC_ConfigChannel+0x1c>
 8006208:	2302      	movs	r3, #2
 800620a:	e113      	b.n	8006434 <HAL_ADC_ConfigChannel+0x244>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b09      	cmp	r3, #9
 800621a:	d925      	bls.n	8006268 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68d9      	ldr	r1, [r3, #12]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	4613      	mov	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4413      	add	r3, r2
 8006230:	3b1e      	subs	r3, #30
 8006232:	2207      	movs	r2, #7
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43da      	mvns	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	400a      	ands	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68d9      	ldr	r1, [r3, #12]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	4618      	mov	r0, r3
 8006254:	4603      	mov	r3, r0
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	4403      	add	r3, r0
 800625a:	3b1e      	subs	r3, #30
 800625c:	409a      	lsls	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	e022      	b.n	80062ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6919      	ldr	r1, [r3, #16]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	4613      	mov	r3, r2
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	4413      	add	r3, r2
 800627c:	2207      	movs	r2, #7
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43da      	mvns	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	400a      	ands	r2, r1
 800628a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6919      	ldr	r1, [r3, #16]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	4618      	mov	r0, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4403      	add	r3, r0
 80062a4:	409a      	lsls	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	d824      	bhi.n	8006300 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	3b05      	subs	r3, #5
 80062c8:	221f      	movs	r2, #31
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43da      	mvns	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	400a      	ands	r2, r1
 80062d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4618      	mov	r0, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	3b05      	subs	r3, #5
 80062f2:	fa00 f203 	lsl.w	r2, r0, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	635a      	str	r2, [r3, #52]	; 0x34
 80062fe:	e04c      	b.n	800639a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	d824      	bhi.n	8006352 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	3b23      	subs	r3, #35	; 0x23
 800631a:	221f      	movs	r2, #31
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43da      	mvns	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	400a      	ands	r2, r1
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	4618      	mov	r0, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	3b23      	subs	r3, #35	; 0x23
 8006344:	fa00 f203 	lsl.w	r2, r0, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
 8006350:	e023      	b.n	800639a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	3b41      	subs	r3, #65	; 0x41
 8006364:	221f      	movs	r2, #31
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43da      	mvns	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	400a      	ands	r2, r1
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	4618      	mov	r0, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	3b41      	subs	r3, #65	; 0x41
 800638e:	fa00 f203 	lsl.w	r2, r0, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <HAL_ADC_ConfigChannel+0x250>)
 800639c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a28      	ldr	r2, [pc, #160]	; (8006444 <HAL_ADC_ConfigChannel+0x254>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10f      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x1d8>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b12      	cmp	r3, #18
 80063ae:	d10b      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <HAL_ADC_ConfigChannel+0x254>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d12b      	bne.n	800642a <HAL_ADC_ConfigChannel+0x23a>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_ADC_ConfigChannel+0x258>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <HAL_ADC_ConfigChannel+0x1f4>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b11      	cmp	r3, #17
 80063e2:	d122      	bne.n	800642a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a11      	ldr	r2, [pc, #68]	; (8006448 <HAL_ADC_ConfigChannel+0x258>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d111      	bne.n	800642a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <HAL_ADC_ConfigChannel+0x25c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a11      	ldr	r2, [pc, #68]	; (8006450 <HAL_ADC_ConfigChannel+0x260>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	0c9a      	lsrs	r2, r3, #18
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800641c:	e002      	b.n	8006424 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3b01      	subs	r3, #1
 8006422:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f9      	bne.n	800641e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40012300 	.word	0x40012300
 8006444:	40012000 	.word	0x40012000
 8006448:	10000012 	.word	0x10000012
 800644c:	20000230 	.word	0x20000230
 8006450:	431bde83 	.word	0x431bde83

08006454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800645c:	4b79      	ldr	r3, [pc, #484]	; (8006644 <ADC_Init+0x1f0>)
 800645e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6859      	ldr	r1, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80064ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6859      	ldr	r1, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	4a58      	ldr	r2, [pc, #352]	; (8006648 <ADC_Init+0x1f4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d022      	beq.n	8006532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800651c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	e00f      	b.n	8006552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0202 	bic.w	r2, r2, #2
 8006560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7e1b      	ldrb	r3, [r3, #24]
 800656c:	005a      	lsls	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01b      	beq.n	80065b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800658e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800659e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6859      	ldr	r1, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	3b01      	subs	r3, #1
 80065ac:	035a      	lsls	r2, r3, #13
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	e007      	b.n	80065c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	051a      	lsls	r2, r3, #20
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6899      	ldr	r1, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800660a:	025a      	lsls	r2, r3, #9
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6899      	ldr	r1, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	029a      	lsls	r2, r3, #10
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40012300 	.word	0x40012300
 8006648:	0f000001 	.word	0x0f000001

0800664c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <__NVIC_SetPriorityGrouping+0x44>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006668:	4013      	ands	r3, r2
 800666a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800667e:	4a04      	ldr	r2, [pc, #16]	; (8006690 <__NVIC_SetPriorityGrouping+0x44>)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	60d3      	str	r3, [r2, #12]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	e000ed00 	.word	0xe000ed00

08006694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <__NVIC_GetPriorityGrouping+0x18>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	f003 0307 	and.w	r3, r3, #7
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	e000ed00 	.word	0xe000ed00

080066b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	db0b      	blt.n	80066da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	f003 021f 	and.w	r2, r3, #31
 80066c8:	4907      	ldr	r1, [pc, #28]	; (80066e8 <__NVIC_EnableIRQ+0x38>)
 80066ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	2001      	movs	r0, #1
 80066d2:	fa00 f202 	lsl.w	r2, r0, r2
 80066d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	e000e100 	.word	0xe000e100

080066ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	db0a      	blt.n	8006716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	490c      	ldr	r1, [pc, #48]	; (8006738 <__NVIC_SetPriority+0x4c>)
 8006706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670a:	0112      	lsls	r2, r2, #4
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	440b      	add	r3, r1
 8006710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006714:	e00a      	b.n	800672c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4908      	ldr	r1, [pc, #32]	; (800673c <__NVIC_SetPriority+0x50>)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	3b04      	subs	r3, #4
 8006724:	0112      	lsls	r2, r2, #4
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	440b      	add	r3, r1
 800672a:	761a      	strb	r2, [r3, #24]
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	e000e100 	.word	0xe000e100
 800673c:	e000ed00 	.word	0xe000ed00

08006740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	; 0x24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f1c3 0307 	rsb	r3, r3, #7
 800675a:	2b04      	cmp	r3, #4
 800675c:	bf28      	it	cs
 800675e:	2304      	movcs	r3, #4
 8006760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3304      	adds	r3, #4
 8006766:	2b06      	cmp	r3, #6
 8006768:	d902      	bls.n	8006770 <NVIC_EncodePriority+0x30>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3b03      	subs	r3, #3
 800676e:	e000      	b.n	8006772 <NVIC_EncodePriority+0x32>
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006774:	f04f 32ff 	mov.w	r2, #4294967295
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43da      	mvns	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	401a      	ands	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006788:	f04f 31ff 	mov.w	r1, #4294967295
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	43d9      	mvns	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006798:	4313      	orrs	r3, r2
         );
}
 800679a:	4618      	mov	r0, r3
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b8:	d301      	bcc.n	80067be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ba:	2301      	movs	r3, #1
 80067bc:	e00f      	b.n	80067de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <SysTick_Config+0x40>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067c6:	210f      	movs	r1, #15
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	f7ff ff8e 	bl	80066ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <SysTick_Config+0x40>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <SysTick_Config+0x40>)
 80067d8:	2207      	movs	r2, #7
 80067da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	e000e010 	.word	0xe000e010

080067ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff29 	bl	800664c <__NVIC_SetPriorityGrouping>
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	4603      	mov	r3, r0
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006814:	f7ff ff3e 	bl	8006694 <__NVIC_GetPriorityGrouping>
 8006818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f7ff ff8e 	bl	8006740 <NVIC_EncodePriority>
 8006824:	4602      	mov	r2, r0
 8006826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff ff5d 	bl	80066ec <__NVIC_SetPriority>
}
 8006832:	bf00      	nop
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	4603      	mov	r3, r0
 8006842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff ff31 	bl	80066b0 <__NVIC_EnableIRQ>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ffa2 	bl	80067a8 <SysTick_Config>
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800687c:	f7ff fc44 	bl	8006108 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e099      	b.n	80069c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068ac:	e00f      	b.n	80068ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068ae:	f7ff fc2b 	bl	8006108 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d908      	bls.n	80068ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2203      	movs	r2, #3
 80068c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e078      	b.n	80069c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e8      	bne.n	80068ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4b38      	ldr	r3, [pc, #224]	; (80069c8 <HAL_DMA_Init+0x158>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b04      	cmp	r3, #4
 8006926:	d107      	bne.n	8006938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	4313      	orrs	r3, r2
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b04      	cmp	r3, #4
 8006960:	d117      	bne.n	8006992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00e      	beq.n	8006992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb0d 	bl	8006f94 <DMA_CheckFifoParam>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2240      	movs	r2, #64	; 0x40
 8006984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800698e:	2301      	movs	r3, #1
 8006990:	e016      	b.n	80069c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fac4 	bl	8006f28 <DMA_CalcBaseAndBitshift>
 80069a0:	4603      	mov	r3, r0
 80069a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a8:	223f      	movs	r2, #63	; 0x3f
 80069aa:	409a      	lsls	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	f010803f 	.word	0xf010803f

080069cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_DMA_Start_IT+0x26>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e040      	b.n	8006a74 <HAL_DMA_Start_IT+0xa8>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d12f      	bne.n	8006a66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa56 	bl	8006ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	223f      	movs	r2, #63	; 0x3f
 8006a26:	409a      	lsls	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0216 	orr.w	r2, r2, #22
 8006a3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0208 	orr.w	r2, r2, #8
 8006a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e005      	b.n	8006a72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a8a:	f7ff fb3d 	bl	8006108 <HAL_GetTick>
 8006a8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d008      	beq.n	8006aae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e052      	b.n	8006b54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0216 	bic.w	r2, r2, #22
 8006abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695a      	ldr	r2, [r3, #20]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006acc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <HAL_DMA_Abort+0x62>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0208 	bic.w	r2, r2, #8
 8006aec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006afe:	e013      	b.n	8006b28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b00:	f7ff fb02 	bl	8006108 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	d90c      	bls.n	8006b28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2203      	movs	r2, #3
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e015      	b.n	8006b54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e4      	bne.n	8006b00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3a:	223f      	movs	r2, #63	; 0x3f
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00c      	b.n	8006b94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bac:	4b8e      	ldr	r3, [pc, #568]	; (8006de8 <HAL_DMA_IRQHandler+0x248>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a8e      	ldr	r2, [pc, #568]	; (8006dec <HAL_DMA_IRQHandler+0x24c>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	0a9b      	lsrs	r3, r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bca:	2208      	movs	r2, #8
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01a      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d013      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0204 	bic.w	r2, r2, #4
 8006bf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	f043 0201 	orr.w	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c10:	2201      	movs	r2, #1
 8006c12:	409a      	lsls	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d012      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2e:	2201      	movs	r2, #1
 8006c30:	409a      	lsls	r2, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f043 0202 	orr.w	r2, r3, #2
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c46:	2204      	movs	r2, #4
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d012      	beq.n	8006c78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	2204      	movs	r2, #4
 8006c66:	409a      	lsls	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d043      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03c      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d018      	beq.n	8006ce2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d024      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	e01f      	b.n	8006d10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01b      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
 8006ce0:	e016      	b.n	8006d10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0208 	bic.w	r2, r2, #8
 8006cfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d14:	2220      	movs	r2, #32
 8006d16:	409a      	lsls	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 808f 	beq.w	8006e40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8087 	beq.w	8006e40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	2220      	movs	r2, #32
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d136      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0216 	bic.w	r2, r2, #22
 8006d58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d103      	bne.n	8006d7a <HAL_DMA_IRQHandler+0x1da>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0208 	bic.w	r2, r2, #8
 8006d88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	223f      	movs	r2, #63	; 0x3f
 8006d90:	409a      	lsls	r2, r3
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d07e      	beq.n	8006eac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
        }
        return;
 8006db6:	e079      	b.n	8006eac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01d      	beq.n	8006e02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10d      	bne.n	8006df0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d031      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
 8006de4:	e02c      	b.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
 8006de6:	bf00      	nop
 8006de8:	20000230 	.word	0x20000230
 8006dec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d023      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	e01e      	b.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0210 	bic.w	r2, r2, #16
 8006e1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d032      	beq.n	8006eae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2205      	movs	r2, #5
 8006e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d307      	bcc.n	8006e88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f2      	bne.n	8006e6c <HAL_DMA_IRQHandler+0x2cc>
 8006e86:	e000      	b.n	8006e8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
 8006eaa:	e000      	b.n	8006eae <HAL_DMA_IRQHandler+0x30e>
        return;
 8006eac:	bf00      	nop
    }
  }
}
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d108      	bne.n	8006f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f0a:	e007      	b.n	8006f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]
}
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	3b10      	subs	r3, #16
 8006f38:	4a14      	ldr	r2, [pc, #80]	; (8006f8c <DMA_CalcBaseAndBitshift+0x64>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f42:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <DMA_CalcBaseAndBitshift+0x68>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d909      	bls.n	8006f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	659a      	str	r2, [r3, #88]	; 0x58
 8006f68:	e007      	b.n	8006f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f72:	f023 0303 	bic.w	r3, r3, #3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	aaaaaaab 	.word	0xaaaaaaab
 8006f90:	08012d5c 	.word	0x08012d5c

08006f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d11f      	bne.n	8006fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d856      	bhi.n	8007062 <DMA_CheckFifoParam+0xce>
 8006fb4:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <DMA_CheckFifoParam+0x28>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fdf 	.word	0x08006fdf
 8006fc4:	08006fcd 	.word	0x08006fcd
 8006fc8:	08007063 	.word	0x08007063
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d046      	beq.n	8007066 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fdc:	e043      	b.n	8007066 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fe6:	d140      	bne.n	800706a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fec:	e03d      	b.n	800706a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff6:	d121      	bne.n	800703c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d837      	bhi.n	800706e <DMA_CheckFifoParam+0xda>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <DMA_CheckFifoParam+0x70>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007015 	.word	0x08007015
 8007008:	0800701b 	.word	0x0800701b
 800700c:	08007015 	.word	0x08007015
 8007010:	0800702d 	.word	0x0800702d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e030      	b.n	800707c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d025      	beq.n	8007072 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800702a:	e022      	b.n	8007072 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007034:	d11f      	bne.n	8007076 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800703a:	e01c      	b.n	8007076 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d903      	bls.n	800704a <DMA_CheckFifoParam+0xb6>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d003      	beq.n	8007050 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007048:	e018      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	73fb      	strb	r3, [r7, #15]
      break;
 800704e:	e015      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00e      	beq.n	800707a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
      break;
 8007060:	e00b      	b.n	800707a <DMA_CheckFifoParam+0xe6>
      break;
 8007062:	bf00      	nop
 8007064:	e00a      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      break;
 8007066:	bf00      	nop
 8007068:	e008      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      break;
 800706a:	bf00      	nop
 800706c:	e006      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      break;
 800706e:	bf00      	nop
 8007070:	e004      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      break;
 8007072:	bf00      	nop
 8007074:	e002      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      break;   
 8007076:	bf00      	nop
 8007078:	e000      	b.n	800707c <DMA_CheckFifoParam+0xe8>
      break;
 800707a:	bf00      	nop
    }
  } 
  
  return status; 
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop

0800708c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800708c:	b480      	push	{r7}
 800708e:	b089      	sub	sp, #36	; 0x24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	e159      	b.n	800735c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070a8:	2201      	movs	r2, #1
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4013      	ands	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	f040 8148 	bne.w	8007356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d005      	beq.n	80070de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d130      	bne.n	8007140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	2203      	movs	r2, #3
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4313      	orrs	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007114:	2201      	movs	r2, #1
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	43db      	mvns	r3, r3
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4013      	ands	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 0201 	and.w	r2, r3, #1
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4313      	orrs	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	2b03      	cmp	r3, #3
 800714a:	d017      	beq.n	800717c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	2203      	movs	r2, #3
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4013      	ands	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	4313      	orrs	r3, r2
 8007174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d123      	bne.n	80071d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	08da      	lsrs	r2, r3, #3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3208      	adds	r2, #8
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	220f      	movs	r2, #15
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	43db      	mvns	r3, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	4013      	ands	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	4313      	orrs	r3, r2
 80071c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	08da      	lsrs	r2, r3, #3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3208      	adds	r2, #8
 80071ca:	69b9      	ldr	r1, [r7, #24]
 80071cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	2203      	movs	r2, #3
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4013      	ands	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f003 0203 	and.w	r2, r3, #3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80a2 	beq.w	8007356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	4b57      	ldr	r3, [pc, #348]	; (8007374 <HAL_GPIO_Init+0x2e8>)
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	4a56      	ldr	r2, [pc, #344]	; (8007374 <HAL_GPIO_Init+0x2e8>)
 800721c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007220:	6453      	str	r3, [r2, #68]	; 0x44
 8007222:	4b54      	ldr	r3, [pc, #336]	; (8007374 <HAL_GPIO_Init+0x2e8>)
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800722e:	4a52      	ldr	r2, [pc, #328]	; (8007378 <HAL_GPIO_Init+0x2ec>)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	3302      	adds	r3, #2
 8007236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	220f      	movs	r2, #15
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43db      	mvns	r3, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4013      	ands	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a49      	ldr	r2, [pc, #292]	; (800737c <HAL_GPIO_Init+0x2f0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d019      	beq.n	800728e <HAL_GPIO_Init+0x202>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a48      	ldr	r2, [pc, #288]	; (8007380 <HAL_GPIO_Init+0x2f4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <HAL_GPIO_Init+0x1fe>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a47      	ldr	r2, [pc, #284]	; (8007384 <HAL_GPIO_Init+0x2f8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00d      	beq.n	8007286 <HAL_GPIO_Init+0x1fa>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a46      	ldr	r2, [pc, #280]	; (8007388 <HAL_GPIO_Init+0x2fc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <HAL_GPIO_Init+0x1f6>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a45      	ldr	r2, [pc, #276]	; (800738c <HAL_GPIO_Init+0x300>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <HAL_GPIO_Init+0x1f2>
 800727a:	2304      	movs	r3, #4
 800727c:	e008      	b.n	8007290 <HAL_GPIO_Init+0x204>
 800727e:	2307      	movs	r3, #7
 8007280:	e006      	b.n	8007290 <HAL_GPIO_Init+0x204>
 8007282:	2303      	movs	r3, #3
 8007284:	e004      	b.n	8007290 <HAL_GPIO_Init+0x204>
 8007286:	2302      	movs	r3, #2
 8007288:	e002      	b.n	8007290 <HAL_GPIO_Init+0x204>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <HAL_GPIO_Init+0x204>
 800728e:	2300      	movs	r3, #0
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	f002 0203 	and.w	r2, r2, #3
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	4093      	lsls	r3, r2
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	4313      	orrs	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072a0:	4935      	ldr	r1, [pc, #212]	; (8007378 <HAL_GPIO_Init+0x2ec>)
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	089b      	lsrs	r3, r3, #2
 80072a6:	3302      	adds	r3, #2
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072ae:	4b38      	ldr	r3, [pc, #224]	; (8007390 <HAL_GPIO_Init+0x304>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	43db      	mvns	r3, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4013      	ands	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072d2:	4a2f      	ldr	r2, [pc, #188]	; (8007390 <HAL_GPIO_Init+0x304>)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072d8:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <HAL_GPIO_Init+0x304>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	4013      	ands	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072fc:	4a24      	ldr	r2, [pc, #144]	; (8007390 <HAL_GPIO_Init+0x304>)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007302:	4b23      	ldr	r3, [pc, #140]	; (8007390 <HAL_GPIO_Init+0x304>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	43db      	mvns	r3, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4013      	ands	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007326:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <HAL_GPIO_Init+0x304>)
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800732c:	4b18      	ldr	r3, [pc, #96]	; (8007390 <HAL_GPIO_Init+0x304>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	43db      	mvns	r3, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4013      	ands	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007350:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <HAL_GPIO_Init+0x304>)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	3301      	adds	r3, #1
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b0f      	cmp	r3, #15
 8007360:	f67f aea2 	bls.w	80070a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	3724      	adds	r7, #36	; 0x24
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40023800 	.word	0x40023800
 8007378:	40013800 	.word	0x40013800
 800737c:	40020000 	.word	0x40020000
 8007380:	40020400 	.word	0x40020400
 8007384:	40020800 	.word	0x40020800
 8007388:	40020c00 	.word	0x40020c00
 800738c:	40021000 	.word	0x40021000
 8007390:	40013c00 	.word	0x40013c00

08007394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	887b      	ldrh	r3, [r7, #2]
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e001      	b.n	80073b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	807b      	strh	r3, [r7, #2]
 80073d0:	4613      	mov	r3, r2
 80073d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073d4:	787b      	ldrb	r3, [r7, #1]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073da:	887a      	ldrh	r2, [r7, #2]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073e0:	e003      	b.n	80073ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073e2:	887b      	ldrh	r3, [r7, #2]
 80073e4:	041a      	lsls	r2, r3, #16
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	619a      	str	r2, [r3, #24]
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007402:	4b08      	ldr	r3, [pc, #32]	; (8007424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d006      	beq.n	800741c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800740e:	4a05      	ldr	r2, [pc, #20]	; (8007424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	4618      	mov	r0, r3
 8007418:	f7fd fbe2 	bl	8004be0 <HAL_GPIO_EXTI_Callback>
  }
}
 800741c:	bf00      	nop
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40013c00 	.word	0x40013c00

08007428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e12b      	b.n	8007692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fa ff96 	bl	8002380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0201 	bic.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800747a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800748a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800748c:	f001 f888 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 8007490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	4a81      	ldr	r2, [pc, #516]	; (800769c <HAL_I2C_Init+0x274>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d807      	bhi.n	80074ac <HAL_I2C_Init+0x84>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a80      	ldr	r2, [pc, #512]	; (80076a0 <HAL_I2C_Init+0x278>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bf94      	ite	ls
 80074a4:	2301      	movls	r3, #1
 80074a6:	2300      	movhi	r3, #0
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	e006      	b.n	80074ba <HAL_I2C_Init+0x92>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a7d      	ldr	r2, [pc, #500]	; (80076a4 <HAL_I2C_Init+0x27c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	bf94      	ite	ls
 80074b4:	2301      	movls	r3, #1
 80074b6:	2300      	movhi	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e0e7      	b.n	8007692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a78      	ldr	r2, [pc, #480]	; (80076a8 <HAL_I2C_Init+0x280>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0c9b      	lsrs	r3, r3, #18
 80074cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a6a      	ldr	r2, [pc, #424]	; (800769c <HAL_I2C_Init+0x274>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d802      	bhi.n	80074fc <HAL_I2C_Init+0xd4>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	3301      	adds	r3, #1
 80074fa:	e009      	b.n	8007510 <HAL_I2C_Init+0xe8>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	4a69      	ldr	r2, [pc, #420]	; (80076ac <HAL_I2C_Init+0x284>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	099b      	lsrs	r3, r3, #6
 800750e:	3301      	adds	r3, #1
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	430b      	orrs	r3, r1
 8007516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	495c      	ldr	r1, [pc, #368]	; (800769c <HAL_I2C_Init+0x274>)
 800752c:	428b      	cmp	r3, r1
 800752e:	d819      	bhi.n	8007564 <HAL_I2C_Init+0x13c>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	1e59      	subs	r1, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	fbb1 f3f3 	udiv	r3, r1, r3
 800753e:	1c59      	adds	r1, r3, #1
 8007540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007544:	400b      	ands	r3, r1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_I2C_Init+0x138>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1e59      	subs	r1, r3, #1
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	fbb1 f3f3 	udiv	r3, r1, r3
 8007558:	3301      	adds	r3, #1
 800755a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800755e:	e051      	b.n	8007604 <HAL_I2C_Init+0x1dc>
 8007560:	2304      	movs	r3, #4
 8007562:	e04f      	b.n	8007604 <HAL_I2C_Init+0x1dc>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d111      	bne.n	8007590 <HAL_I2C_Init+0x168>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	1e58      	subs	r0, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6859      	ldr	r1, [r3, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	440b      	add	r3, r1
 800757a:	fbb0 f3f3 	udiv	r3, r0, r3
 800757e:	3301      	adds	r3, #1
 8007580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007584:	2b00      	cmp	r3, #0
 8007586:	bf0c      	ite	eq
 8007588:	2301      	moveq	r3, #1
 800758a:	2300      	movne	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	e012      	b.n	80075b6 <HAL_I2C_Init+0x18e>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	1e58      	subs	r0, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	0099      	lsls	r1, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075a6:	3301      	adds	r3, #1
 80075a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_I2C_Init+0x196>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e022      	b.n	8007604 <HAL_I2C_Init+0x1dc>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10e      	bne.n	80075e4 <HAL_I2C_Init+0x1bc>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1e58      	subs	r0, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6859      	ldr	r1, [r3, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	440b      	add	r3, r1
 80075d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80075d8:	3301      	adds	r3, #1
 80075da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e2:	e00f      	b.n	8007604 <HAL_I2C_Init+0x1dc>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	1e58      	subs	r0, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	0099      	lsls	r1, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80075fa:	3301      	adds	r3, #1
 80075fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	6809      	ldr	r1, [r1, #0]
 8007608:	4313      	orrs	r3, r2
 800760a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6911      	ldr	r1, [r2, #16]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68d2      	ldr	r2, [r2, #12]
 800763e:	4311      	orrs	r1, r2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	430b      	orrs	r3, r1
 8007646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	000186a0 	.word	0x000186a0
 80076a0:	001e847f 	.word	0x001e847f
 80076a4:	003d08ff 	.word	0x003d08ff
 80076a8:	431bde83 	.word	0x431bde83
 80076ac:	10624dd3 	.word	0x10624dd3

080076b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	461a      	mov	r2, r3
 80076bc:	460b      	mov	r3, r1
 80076be:	817b      	strh	r3, [r7, #10]
 80076c0:	4613      	mov	r3, r2
 80076c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076c4:	f7fe fd20 	bl	8006108 <HAL_GetTick>
 80076c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	f040 80e0 	bne.w	8007898 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2319      	movs	r3, #25
 80076de:	2201      	movs	r2, #1
 80076e0:	4970      	ldr	r1, [pc, #448]	; (80078a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f964 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076ee:	2302      	movs	r3, #2
 80076f0:	e0d3      	b.n	800789a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_I2C_Master_Transmit+0x50>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e0cc      	b.n	800789a <HAL_I2C_Master_Transmit+0x1ea>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b01      	cmp	r3, #1
 8007714:	d007      	beq.n	8007726 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0201 	orr.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007734:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2221      	movs	r2, #33	; 0x21
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2210      	movs	r2, #16
 8007742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	893a      	ldrh	r2, [r7, #8]
 8007756:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4a50      	ldr	r2, [pc, #320]	; (80078a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007768:	8979      	ldrh	r1, [r7, #10]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	6a3a      	ldr	r2, [r7, #32]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f89c 	bl	80078ac <I2C_MasterRequestWrite>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e08d      	b.n	800789a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007794:	e066      	b.n	8007864 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	6a39      	ldr	r1, [r7, #32]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f9de 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d107      	bne.n	80077be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e06b      	b.n	800789a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d11b      	bne.n	8007838 <HAL_I2C_Master_Transmit+0x188>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	d017      	beq.n	8007838 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	6a39      	ldr	r1, [r7, #32]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f9ce 	bl	8007bde <I2C_WaitOnBTFFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00d      	beq.n	8007864 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	2b04      	cmp	r3, #4
 800784e:	d107      	bne.n	8007860 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e01a      	b.n	800789a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	d194      	bne.n	8007796 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	e000      	b.n	800789a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007898:	2302      	movs	r3, #2
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	00100002 	.word	0x00100002
 80078a8:	ffff0000 	.word	0xffff0000

080078ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	460b      	mov	r3, r1
 80078ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d006      	beq.n	80078d6 <I2C_MasterRequestWrite+0x2a>
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d003      	beq.n	80078d6 <I2C_MasterRequestWrite+0x2a>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078d4:	d108      	bne.n	80078e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e00b      	b.n	8007900 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	2b12      	cmp	r3, #18
 80078ee:	d107      	bne.n	8007900 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f84f 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007926:	d103      	bne.n	8007930 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800792e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e035      	b.n	80079a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800793c:	d108      	bne.n	8007950 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800793e:	897b      	ldrh	r3, [r7, #10]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800794c:	611a      	str	r2, [r3, #16]
 800794e:	e01b      	b.n	8007988 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007950:	897b      	ldrh	r3, [r7, #10]
 8007952:	11db      	asrs	r3, r3, #7
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 0306 	and.w	r3, r3, #6
 800795a:	b2db      	uxtb	r3, r3
 800795c:	f063 030f 	orn	r3, r3, #15
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	490e      	ldr	r1, [pc, #56]	; (80079a8 <I2C_MasterRequestWrite+0xfc>)
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f875 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e010      	b.n	80079a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800797e:	897b      	ldrh	r3, [r7, #10]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4907      	ldr	r1, [pc, #28]	; (80079ac <I2C_MasterRequestWrite+0x100>)
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f865 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	00010008 	.word	0x00010008
 80079ac:	00010002 	.word	0x00010002

080079b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c0:	e025      	b.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d021      	beq.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ca:	f7fe fb9d 	bl	8006108 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d302      	bcc.n	80079e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d116      	bne.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e023      	b.n	8007a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10d      	bne.n	8007a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4013      	ands	r3, r2
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bf0c      	ite	eq
 8007a2a:	2301      	moveq	r3, #1
 8007a2c:	2300      	movne	r3, #0
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	e00c      	b.n	8007a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	43da      	mvns	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d0b6      	beq.n	80079c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a6c:	e051      	b.n	8007b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7c:	d123      	bne.n	8007ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f043 0204 	orr.w	r2, r3, #4
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e046      	b.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d021      	beq.n	8007b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7fe fb1b 	bl	8006108 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d116      	bne.n	8007b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e020      	b.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10c      	bne.n	8007b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	43da      	mvns	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	2301      	movne	r3, #1
 8007b30:	2300      	moveq	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	e00b      	b.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	43da      	mvns	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4013      	ands	r3, r2
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf14      	ite	ne
 8007b48:	2301      	movne	r3, #1
 8007b4a:	2300      	moveq	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d18d      	bne.n	8007a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b68:	e02d      	b.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f878 	bl	8007c60 <I2C_IsAcknowledgeFailed>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e02d      	b.n	8007bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d021      	beq.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b82:	f7fe fac1 	bl	8006108 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d302      	bcc.n	8007b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d116      	bne.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	f043 0220 	orr.w	r2, r3, #32
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e007      	b.n	8007bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d1ca      	bne.n	8007b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bea:	e02d      	b.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f837 	bl	8007c60 <I2C_IsAcknowledgeFailed>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e02d      	b.n	8007c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d021      	beq.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c04:	f7fe fa80 	bl	8006108 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d302      	bcc.n	8007c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d116      	bne.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	f043 0220 	orr.w	r2, r3, #32
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e007      	b.n	8007c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d1ca      	bne.n	8007bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c76:	d11b      	bne.n	8007cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	f043 0204 	orr.w	r2, r3, #4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e267      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d075      	beq.n	8007dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cde:	4b88      	ldr	r3, [pc, #544]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 030c 	and.w	r3, r3, #12
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d00c      	beq.n	8007d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cea:	4b85      	ldr	r3, [pc, #532]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	d112      	bne.n	8007d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cf6:	4b82      	ldr	r3, [pc, #520]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d02:	d10b      	bne.n	8007d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d04:	4b7e      	ldr	r3, [pc, #504]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d05b      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x108>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d157      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e242      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d24:	d106      	bne.n	8007d34 <HAL_RCC_OscConfig+0x74>
 8007d26:	4b76      	ldr	r3, [pc, #472]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a75      	ldr	r2, [pc, #468]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e01d      	b.n	8007d70 <HAL_RCC_OscConfig+0xb0>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCC_OscConfig+0x98>
 8007d3e:	4b70      	ldr	r3, [pc, #448]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a6f      	ldr	r2, [pc, #444]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	4b6d      	ldr	r3, [pc, #436]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a6c      	ldr	r2, [pc, #432]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e00b      	b.n	8007d70 <HAL_RCC_OscConfig+0xb0>
 8007d58:	4b69      	ldr	r3, [pc, #420]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a68      	ldr	r2, [pc, #416]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4b66      	ldr	r3, [pc, #408]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a65      	ldr	r2, [pc, #404]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d78:	f7fe f9c6 	bl	8006108 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d80:	f7fe f9c2 	bl	8006108 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b64      	cmp	r3, #100	; 0x64
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e207      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d92:	4b5b      	ldr	r3, [pc, #364]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f0      	beq.n	8007d80 <HAL_RCC_OscConfig+0xc0>
 8007d9e:	e014      	b.n	8007dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da0:	f7fe f9b2 	bl	8006108 <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da8:	f7fe f9ae 	bl	8006108 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b64      	cmp	r3, #100	; 0x64
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e1f3      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dba:	4b51      	ldr	r3, [pc, #324]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f0      	bne.n	8007da8 <HAL_RCC_OscConfig+0xe8>
 8007dc6:	e000      	b.n	8007dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d063      	beq.n	8007e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dd6:	4b4a      	ldr	r3, [pc, #296]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007de2:	4b47      	ldr	r3, [pc, #284]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d11c      	bne.n	8007e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dee:	4b44      	ldr	r3, [pc, #272]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d116      	bne.n	8007e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	4b41      	ldr	r3, [pc, #260]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_RCC_OscConfig+0x152>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d001      	beq.n	8007e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e1c7      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e12:	4b3b      	ldr	r3, [pc, #236]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4937      	ldr	r1, [pc, #220]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e26:	e03a      	b.n	8007e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d020      	beq.n	8007e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e30:	4b34      	ldr	r3, [pc, #208]	; (8007f04 <HAL_RCC_OscConfig+0x244>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e36:	f7fe f967 	bl	8006108 <HAL_GetTick>
 8007e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3c:	e008      	b.n	8007e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e3e:	f7fe f963 	bl	8006108 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e1a8      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e50:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0f0      	beq.n	8007e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e5c:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4925      	ldr	r1, [pc, #148]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	600b      	str	r3, [r1, #0]
 8007e70:	e015      	b.n	8007e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e72:	4b24      	ldr	r3, [pc, #144]	; (8007f04 <HAL_RCC_OscConfig+0x244>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e78:	f7fe f946 	bl	8006108 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e80:	f7fe f942 	bl	8006108 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e187      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e92:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f0      	bne.n	8007e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d036      	beq.n	8007f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <HAL_RCC_OscConfig+0x248>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fe f926 	bl	8006108 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fe f922 	bl	8006108 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e167      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x200>
 8007ede:	e01b      	b.n	8007f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee0:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <HAL_RCC_OscConfig+0x248>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ee6:	f7fe f90f 	bl	8006108 <HAL_GetTick>
 8007eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eec:	e00e      	b.n	8007f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eee:	f7fe f90b 	bl	8006108 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d907      	bls.n	8007f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e150      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
 8007f00:	40023800 	.word	0x40023800
 8007f04:	42470000 	.word	0x42470000
 8007f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f0c:	4b88      	ldr	r3, [pc, #544]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1ea      	bne.n	8007eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8097 	beq.w	8008054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f2a:	4b81      	ldr	r3, [pc, #516]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
 8007f3a:	4b7d      	ldr	r3, [pc, #500]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	4a7c      	ldr	r2, [pc, #496]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f44:	6413      	str	r3, [r2, #64]	; 0x40
 8007f46:	4b7a      	ldr	r3, [pc, #488]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f52:	2301      	movs	r3, #1
 8007f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f56:	4b77      	ldr	r3, [pc, #476]	; (8008134 <HAL_RCC_OscConfig+0x474>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d118      	bne.n	8007f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f62:	4b74      	ldr	r3, [pc, #464]	; (8008134 <HAL_RCC_OscConfig+0x474>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a73      	ldr	r2, [pc, #460]	; (8008134 <HAL_RCC_OscConfig+0x474>)
 8007f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f6e:	f7fe f8cb 	bl	8006108 <HAL_GetTick>
 8007f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f74:	e008      	b.n	8007f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f76:	f7fe f8c7 	bl	8006108 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e10c      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f88:	4b6a      	ldr	r3, [pc, #424]	; (8008134 <HAL_RCC_OscConfig+0x474>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0f0      	beq.n	8007f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d106      	bne.n	8007faa <HAL_RCC_OscConfig+0x2ea>
 8007f9c:	4b64      	ldr	r3, [pc, #400]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa0:	4a63      	ldr	r2, [pc, #396]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa8:	e01c      	b.n	8007fe4 <HAL_RCC_OscConfig+0x324>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCC_OscConfig+0x30c>
 8007fb2:	4b5f      	ldr	r3, [pc, #380]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	4a5e      	ldr	r2, [pc, #376]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fb8:	f043 0304 	orr.w	r3, r3, #4
 8007fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8007fbe:	4b5c      	ldr	r3, [pc, #368]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a5b      	ldr	r2, [pc, #364]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fc4:	f043 0301 	orr.w	r3, r3, #1
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCC_OscConfig+0x324>
 8007fcc:	4b58      	ldr	r3, [pc, #352]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd0:	4a57      	ldr	r2, [pc, #348]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd8:	4b55      	ldr	r3, [pc, #340]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	4a54      	ldr	r2, [pc, #336]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8007fde:	f023 0304 	bic.w	r3, r3, #4
 8007fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d015      	beq.n	8008018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fec:	f7fe f88c 	bl	8006108 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fe f888 	bl	8006108 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e0cb      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800800a:	4b49      	ldr	r3, [pc, #292]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0ee      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x334>
 8008016:	e014      	b.n	8008042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008018:	f7fe f876 	bl	8006108 <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800801e:	e00a      	b.n	8008036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008020:	f7fe f872 	bl	8006108 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f241 3288 	movw	r2, #5000	; 0x1388
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e0b5      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008036:	4b3e      	ldr	r3, [pc, #248]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1ee      	bne.n	8008020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d105      	bne.n	8008054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008048:	4b39      	ldr	r3, [pc, #228]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	4a38      	ldr	r2, [pc, #224]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 800804e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80a1 	beq.w	80081a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800805e:	4b34      	ldr	r3, [pc, #208]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
 8008066:	2b08      	cmp	r3, #8
 8008068:	d05c      	beq.n	8008124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d141      	bne.n	80080f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008072:	4b31      	ldr	r3, [pc, #196]	; (8008138 <HAL_RCC_OscConfig+0x478>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008078:	f7fe f846 	bl	8006108 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008080:	f7fe f842 	bl	8006108 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e087      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008092:	4b27      	ldr	r3, [pc, #156]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69da      	ldr	r2, [r3, #28]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	019b      	lsls	r3, r3, #6
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	3b01      	subs	r3, #1
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	491b      	ldr	r1, [pc, #108]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c8:	4b1b      	ldr	r3, [pc, #108]	; (8008138 <HAL_RCC_OscConfig+0x478>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ce:	f7fe f81b 	bl	8006108 <HAL_GetTick>
 80080d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d4:	e008      	b.n	80080e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080d6:	f7fe f817 	bl	8006108 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d901      	bls.n	80080e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e05c      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0f0      	beq.n	80080d6 <HAL_RCC_OscConfig+0x416>
 80080f4:	e054      	b.n	80081a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <HAL_RCC_OscConfig+0x478>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fc:	f7fe f804 	bl	8006108 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008104:	f7fe f800 	bl	8006108 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e045      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008116:	4b06      	ldr	r3, [pc, #24]	; (8008130 <HAL_RCC_OscConfig+0x470>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <HAL_RCC_OscConfig+0x444>
 8008122:	e03d      	b.n	80081a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d107      	bne.n	800813c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e038      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
 8008130:	40023800 	.word	0x40023800
 8008134:	40007000 	.word	0x40007000
 8008138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <HAL_RCC_OscConfig+0x4ec>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d028      	beq.n	800819c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008154:	429a      	cmp	r2, r3
 8008156:	d121      	bne.n	800819c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008162:	429a      	cmp	r2, r3
 8008164:	d11a      	bne.n	800819c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800816c:	4013      	ands	r3, r2
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008174:	4293      	cmp	r3, r2
 8008176:	d111      	bne.n	800819c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	085b      	lsrs	r3, r3, #1
 8008184:	3b01      	subs	r3, #1
 8008186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008188:	429a      	cmp	r2, r3
 800818a:	d107      	bne.n	800819c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008198:	429a      	cmp	r2, r3
 800819a:	d001      	beq.n	80081a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40023800 	.word	0x40023800

080081b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0cc      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081c4:	4b68      	ldr	r3, [pc, #416]	; (8008368 <HAL_RCC_ClockConfig+0x1b8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d90c      	bls.n	80081ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d2:	4b65      	ldr	r3, [pc, #404]	; (8008368 <HAL_RCC_ClockConfig+0x1b8>)
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081da:	4b63      	ldr	r3, [pc, #396]	; (8008368 <HAL_RCC_ClockConfig+0x1b8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d001      	beq.n	80081ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0b8      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d020      	beq.n	800823a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008204:	4b59      	ldr	r3, [pc, #356]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	4a58      	ldr	r2, [pc, #352]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 800820a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800820e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800821c:	4b53      	ldr	r3, [pc, #332]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	4a52      	ldr	r2, [pc, #328]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008228:	4b50      	ldr	r3, [pc, #320]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	494d      	ldr	r1, [pc, #308]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008236:	4313      	orrs	r3, r2
 8008238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d044      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d107      	bne.n	800825e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800824e:	4b47      	ldr	r3, [pc, #284]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d119      	bne.n	800828e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e07f      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d003      	beq.n	800826e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800826a:	2b03      	cmp	r3, #3
 800826c:	d107      	bne.n	800827e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800826e:	4b3f      	ldr	r3, [pc, #252]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e06f      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800827e:	4b3b      	ldr	r3, [pc, #236]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e067      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800828e:	4b37      	ldr	r3, [pc, #220]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f023 0203 	bic.w	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4934      	ldr	r1, [pc, #208]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 800829c:	4313      	orrs	r3, r2
 800829e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082a0:	f7fd ff32 	bl	8006108 <HAL_GetTick>
 80082a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	e00a      	b.n	80082be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a8:	f7fd ff2e 	bl	8006108 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e04f      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082be:	4b2b      	ldr	r3, [pc, #172]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 020c 	and.w	r2, r3, #12
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1eb      	bne.n	80082a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <HAL_RCC_ClockConfig+0x1b8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d20c      	bcs.n	80082f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082de:	4b22      	ldr	r3, [pc, #136]	; (8008368 <HAL_RCC_ClockConfig+0x1b8>)
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e6:	4b20      	ldr	r3, [pc, #128]	; (8008368 <HAL_RCC_ClockConfig+0x1b8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d001      	beq.n	80082f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e032      	b.n	800835e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d008      	beq.n	8008316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008304:	4b19      	ldr	r3, [pc, #100]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4916      	ldr	r1, [pc, #88]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	4313      	orrs	r3, r2
 8008314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	490e      	ldr	r1, [pc, #56]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	4313      	orrs	r3, r2
 8008334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008336:	f000 f821 	bl	800837c <HAL_RCC_GetSysClockFreq>
 800833a:	4602      	mov	r2, r0
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	490a      	ldr	r1, [pc, #40]	; (8008370 <HAL_RCC_ClockConfig+0x1c0>)
 8008348:	5ccb      	ldrb	r3, [r1, r3]
 800834a:	fa22 f303 	lsr.w	r3, r2, r3
 800834e:	4a09      	ldr	r2, [pc, #36]	; (8008374 <HAL_RCC_ClockConfig+0x1c4>)
 8008350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <HAL_RCC_ClockConfig+0x1c8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd fe92 	bl	8006080 <HAL_InitTick>

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40023c00 	.word	0x40023c00
 800836c:	40023800 	.word	0x40023800
 8008370:	08012d44 	.word	0x08012d44
 8008374:	20000230 	.word	0x20000230
 8008378:	20000234 	.word	0x20000234

0800837c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800837c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008380:	b094      	sub	sp, #80	; 0x50
 8008382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	647b      	str	r3, [r7, #68]	; 0x44
 8008388:	2300      	movs	r3, #0
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838c:	2300      	movs	r3, #0
 800838e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008394:	4b79      	ldr	r3, [pc, #484]	; (800857c <HAL_RCC_GetSysClockFreq+0x200>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f003 030c 	and.w	r3, r3, #12
 800839c:	2b08      	cmp	r3, #8
 800839e:	d00d      	beq.n	80083bc <HAL_RCC_GetSysClockFreq+0x40>
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	f200 80e1 	bhi.w	8008568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <HAL_RCC_GetSysClockFreq+0x34>
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d003      	beq.n	80083b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80083ae:	e0db      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083b0:	4b73      	ldr	r3, [pc, #460]	; (8008580 <HAL_RCC_GetSysClockFreq+0x204>)
 80083b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80083b4:	e0db      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083b6:	4b73      	ldr	r3, [pc, #460]	; (8008584 <HAL_RCC_GetSysClockFreq+0x208>)
 80083b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083ba:	e0d8      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083bc:	4b6f      	ldr	r3, [pc, #444]	; (800857c <HAL_RCC_GetSysClockFreq+0x200>)
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083c6:	4b6d      	ldr	r3, [pc, #436]	; (800857c <HAL_RCC_GetSysClockFreq+0x200>)
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d063      	beq.n	800849a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083d2:	4b6a      	ldr	r3, [pc, #424]	; (800857c <HAL_RCC_GetSysClockFreq+0x200>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	099b      	lsrs	r3, r3, #6
 80083d8:	2200      	movs	r2, #0
 80083da:	63bb      	str	r3, [r7, #56]	; 0x38
 80083dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e4:	633b      	str	r3, [r7, #48]	; 0x30
 80083e6:	2300      	movs	r3, #0
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083ee:	4622      	mov	r2, r4
 80083f0:	462b      	mov	r3, r5
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f04f 0100 	mov.w	r1, #0
 80083fa:	0159      	lsls	r1, r3, #5
 80083fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008400:	0150      	lsls	r0, r2, #5
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4621      	mov	r1, r4
 8008408:	1a51      	subs	r1, r2, r1
 800840a:	6139      	str	r1, [r7, #16]
 800840c:	4629      	mov	r1, r5
 800840e:	eb63 0301 	sbc.w	r3, r3, r1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008420:	4659      	mov	r1, fp
 8008422:	018b      	lsls	r3, r1, #6
 8008424:	4651      	mov	r1, sl
 8008426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800842a:	4651      	mov	r1, sl
 800842c:	018a      	lsls	r2, r1, #6
 800842e:	4651      	mov	r1, sl
 8008430:	ebb2 0801 	subs.w	r8, r2, r1
 8008434:	4659      	mov	r1, fp
 8008436:	eb63 0901 	sbc.w	r9, r3, r1
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800844a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800844e:	4690      	mov	r8, r2
 8008450:	4699      	mov	r9, r3
 8008452:	4623      	mov	r3, r4
 8008454:	eb18 0303 	adds.w	r3, r8, r3
 8008458:	60bb      	str	r3, [r7, #8]
 800845a:	462b      	mov	r3, r5
 800845c:	eb49 0303 	adc.w	r3, r9, r3
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	f04f 0200 	mov.w	r2, #0
 8008466:	f04f 0300 	mov.w	r3, #0
 800846a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800846e:	4629      	mov	r1, r5
 8008470:	024b      	lsls	r3, r1, #9
 8008472:	4621      	mov	r1, r4
 8008474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008478:	4621      	mov	r1, r4
 800847a:	024a      	lsls	r2, r1, #9
 800847c:	4610      	mov	r0, r2
 800847e:	4619      	mov	r1, r3
 8008480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008482:	2200      	movs	r2, #0
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
 8008486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800848c:	f7f8 fc04 	bl	8000c98 <__aeabi_uldivmod>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4613      	mov	r3, r2
 8008496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008498:	e058      	b.n	800854c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800849a:	4b38      	ldr	r3, [pc, #224]	; (800857c <HAL_RCC_GetSysClockFreq+0x200>)
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	099b      	lsrs	r3, r3, #6
 80084a0:	2200      	movs	r2, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	4611      	mov	r1, r2
 80084a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084aa:	623b      	str	r3, [r7, #32]
 80084ac:	2300      	movs	r3, #0
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
 80084b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084b4:	4642      	mov	r2, r8
 80084b6:	464b      	mov	r3, r9
 80084b8:	f04f 0000 	mov.w	r0, #0
 80084bc:	f04f 0100 	mov.w	r1, #0
 80084c0:	0159      	lsls	r1, r3, #5
 80084c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084c6:	0150      	lsls	r0, r2, #5
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4641      	mov	r1, r8
 80084ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80084d2:	4649      	mov	r1, r9
 80084d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084ec:	ebb2 040a 	subs.w	r4, r2, sl
 80084f0:	eb63 050b 	sbc.w	r5, r3, fp
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	00eb      	lsls	r3, r5, #3
 80084fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008502:	00e2      	lsls	r2, r4, #3
 8008504:	4614      	mov	r4, r2
 8008506:	461d      	mov	r5, r3
 8008508:	4643      	mov	r3, r8
 800850a:	18e3      	adds	r3, r4, r3
 800850c:	603b      	str	r3, [r7, #0]
 800850e:	464b      	mov	r3, r9
 8008510:	eb45 0303 	adc.w	r3, r5, r3
 8008514:	607b      	str	r3, [r7, #4]
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	f04f 0300 	mov.w	r3, #0
 800851e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008522:	4629      	mov	r1, r5
 8008524:	028b      	lsls	r3, r1, #10
 8008526:	4621      	mov	r1, r4
 8008528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800852c:	4621      	mov	r1, r4
 800852e:	028a      	lsls	r2, r1, #10
 8008530:	4610      	mov	r0, r2
 8008532:	4619      	mov	r1, r3
 8008534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008536:	2200      	movs	r2, #0
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	61fa      	str	r2, [r7, #28]
 800853c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008540:	f7f8 fbaa 	bl	8000c98 <__aeabi_uldivmod>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4613      	mov	r3, r2
 800854a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800854c:	4b0b      	ldr	r3, [pc, #44]	; (800857c <HAL_RCC_GetSysClockFreq+0x200>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	3301      	adds	r3, #1
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800855c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800855e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008560:	fbb2 f3f3 	udiv	r3, r2, r3
 8008564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008566:	e002      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <HAL_RCC_GetSysClockFreq+0x204>)
 800856a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800856c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800856e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008570:	4618      	mov	r0, r3
 8008572:	3750      	adds	r7, #80	; 0x50
 8008574:	46bd      	mov	sp, r7
 8008576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	00f42400 	.word	0x00f42400
 8008584:	007a1200 	.word	0x007a1200

08008588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800858c:	4b03      	ldr	r3, [pc, #12]	; (800859c <HAL_RCC_GetHCLKFreq+0x14>)
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	4618      	mov	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20000230 	.word	0x20000230

080085a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085a4:	f7ff fff0 	bl	8008588 <HAL_RCC_GetHCLKFreq>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	0a9b      	lsrs	r3, r3, #10
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	4903      	ldr	r1, [pc, #12]	; (80085c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085b6:	5ccb      	ldrb	r3, [r1, r3]
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085bc:	4618      	mov	r0, r3
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40023800 	.word	0x40023800
 80085c4:	08012d54 	.word	0x08012d54

080085c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085cc:	f7ff ffdc 	bl	8008588 <HAL_RCC_GetHCLKFreq>
 80085d0:	4602      	mov	r2, r0
 80085d2:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	0b5b      	lsrs	r3, r3, #13
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	4903      	ldr	r1, [pc, #12]	; (80085ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80085de:	5ccb      	ldrb	r3, [r1, r3]
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40023800 	.word	0x40023800
 80085ec:	08012d54 	.word	0x08012d54

080085f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e04c      	b.n	800869c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d111      	bne.n	8008632 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 ff50 	bl	800a4bc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a1f      	ldr	r2, [pc, #124]	; (80086a4 <HAL_TIM_Base_Init+0xb4>)
 8008628:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3304      	adds	r3, #4
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f001 fc6d 	bl	8009f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	0800531d 	.word	0x0800531d

080086a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d001      	beq.n	80086c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e03c      	b.n	800873a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1e      	ldr	r2, [pc, #120]	; (8008748 <HAL_TIM_Base_Start+0xa0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <HAL_TIM_Base_Start+0x5c>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086da:	d013      	beq.n	8008704 <HAL_TIM_Base_Start+0x5c>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1a      	ldr	r2, [pc, #104]	; (800874c <HAL_TIM_Base_Start+0xa4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <HAL_TIM_Base_Start+0x5c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a19      	ldr	r2, [pc, #100]	; (8008750 <HAL_TIM_Base_Start+0xa8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_TIM_Base_Start+0x5c>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a17      	ldr	r2, [pc, #92]	; (8008754 <HAL_TIM_Base_Start+0xac>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_TIM_Base_Start+0x5c>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a16      	ldr	r2, [pc, #88]	; (8008758 <HAL_TIM_Base_Start+0xb0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d111      	bne.n	8008728 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b06      	cmp	r3, #6
 8008714:	d010      	beq.n	8008738 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0201 	orr.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008726:	e007      	b.n	8008738 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40014000 	.word	0x40014000

0800875c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b01      	cmp	r3, #1
 800876e:	d001      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e044      	b.n	80087fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1e      	ldr	r2, [pc, #120]	; (800880c <HAL_TIM_Base_Start_IT+0xb0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d018      	beq.n	80087c8 <HAL_TIM_Base_Start_IT+0x6c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879e:	d013      	beq.n	80087c8 <HAL_TIM_Base_Start_IT+0x6c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1a      	ldr	r2, [pc, #104]	; (8008810 <HAL_TIM_Base_Start_IT+0xb4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00e      	beq.n	80087c8 <HAL_TIM_Base_Start_IT+0x6c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a19      	ldr	r2, [pc, #100]	; (8008814 <HAL_TIM_Base_Start_IT+0xb8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d009      	beq.n	80087c8 <HAL_TIM_Base_Start_IT+0x6c>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a17      	ldr	r2, [pc, #92]	; (8008818 <HAL_TIM_Base_Start_IT+0xbc>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d004      	beq.n	80087c8 <HAL_TIM_Base_Start_IT+0x6c>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a16      	ldr	r2, [pc, #88]	; (800881c <HAL_TIM_Base_Start_IT+0xc0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d111      	bne.n	80087ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b06      	cmp	r3, #6
 80087d8:	d010      	beq.n	80087fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ea:	e007      	b.n	80087fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40010000 	.word	0x40010000
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40014000 	.word	0x40014000

08008820 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e04c      	b.n	80088cc <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d111      	bne.n	8008862 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 fe38 	bl	800a4bc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a1f      	ldr	r2, [pc, #124]	; (80088d4 <HAL_TIM_OC_Init+0xb4>)
 8008858:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3304      	adds	r3, #4
 8008872:	4619      	mov	r1, r3
 8008874:	4610      	mov	r0, r2
 8008876:	f001 fb55 	bl	8009f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	080088d9 	.word	0x080088d9

080088d8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e04c      	b.n	8008998 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d111      	bne.n	800892e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 fdd2 	bl	800a4bc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a1f      	ldr	r2, [pc, #124]	; (80089a0 <HAL_TIM_PWM_Init+0xb4>)
 8008924:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3304      	adds	r3, #4
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f001 faef 	bl	8009f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	080089a5 	.word	0x080089a5

080089a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <HAL_TIM_PWM_Start+0x24>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	bf14      	ite	ne
 80089d4:	2301      	movne	r3, #1
 80089d6:	2300      	moveq	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	e022      	b.n	8008a22 <HAL_TIM_PWM_Start+0x6a>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d109      	bne.n	80089f6 <HAL_TIM_PWM_Start+0x3e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	bf14      	ite	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	2300      	moveq	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	e015      	b.n	8008a22 <HAL_TIM_PWM_Start+0x6a>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d109      	bne.n	8008a10 <HAL_TIM_PWM_Start+0x58>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	e008      	b.n	8008a22 <HAL_TIM_PWM_Start+0x6a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	bf14      	ite	ne
 8008a1c:	2301      	movne	r3, #1
 8008a1e:	2300      	moveq	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e068      	b.n	8008afc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <HAL_TIM_PWM_Start+0x82>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a38:	e013      	b.n	8008a62 <HAL_TIM_PWM_Start+0xaa>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d104      	bne.n	8008a4a <HAL_TIM_PWM_Start+0x92>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a48:	e00b      	b.n	8008a62 <HAL_TIM_PWM_Start+0xaa>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d104      	bne.n	8008a5a <HAL_TIM_PWM_Start+0xa2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a58:	e003      	b.n	8008a62 <HAL_TIM_PWM_Start+0xaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2201      	movs	r2, #1
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f001 fd00 	bl	800a470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a23      	ldr	r2, [pc, #140]	; (8008b04 <HAL_TIM_PWM_Start+0x14c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d107      	bne.n	8008a8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <HAL_TIM_PWM_Start+0x14c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d018      	beq.n	8008ac6 <HAL_TIM_PWM_Start+0x10e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9c:	d013      	beq.n	8008ac6 <HAL_TIM_PWM_Start+0x10e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a19      	ldr	r2, [pc, #100]	; (8008b08 <HAL_TIM_PWM_Start+0x150>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00e      	beq.n	8008ac6 <HAL_TIM_PWM_Start+0x10e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <HAL_TIM_PWM_Start+0x154>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d009      	beq.n	8008ac6 <HAL_TIM_PWM_Start+0x10e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <HAL_TIM_PWM_Start+0x158>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d004      	beq.n	8008ac6 <HAL_TIM_PWM_Start+0x10e>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a14      	ldr	r2, [pc, #80]	; (8008b14 <HAL_TIM_PWM_Start+0x15c>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d111      	bne.n	8008aea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b06      	cmp	r3, #6
 8008ad6:	d010      	beq.n	8008afa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae8:	e007      	b.n	8008afa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0201 	orr.w	r2, r2, #1
 8008af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	40010000 	.word	0x40010000
 8008b08:	40000400 	.word	0x40000400
 8008b0c:	40000800 	.word	0x40000800
 8008b10:	40000c00 	.word	0x40000c00
 8008b14:	40014000 	.word	0x40014000

08008b18 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2301      	moveq	r3, #1
 8008b3e:	2300      	movne	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e022      	b.n	8008b8a <HAL_TIM_PWM_Start_DMA+0x72>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d109      	bne.n	8008b5e <HAL_TIM_PWM_Start_DMA+0x46>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	bf0c      	ite	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	2300      	movne	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	e015      	b.n	8008b8a <HAL_TIM_PWM_Start_DMA+0x72>
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d109      	bne.n	8008b78 <HAL_TIM_PWM_Start_DMA+0x60>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	e008      	b.n	8008b8a <HAL_TIM_PWM_Start_DMA+0x72>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e15d      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_TIM_PWM_Start_DMA+0x94>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	e022      	b.n	8008bf2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d109      	bne.n	8008bc6 <HAL_TIM_PWM_Start_DMA+0xae>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	bf0c      	ite	eq
 8008bbe:	2301      	moveq	r3, #1
 8008bc0:	2300      	movne	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	e015      	b.n	8008bf2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d109      	bne.n	8008be0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e008      	b.n	8008bf2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	bf0c      	ite	eq
 8008bec:	2301      	moveq	r3, #1
 8008bee:	2300      	movne	r3, #0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d024      	beq.n	8008c40 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <HAL_TIM_PWM_Start_DMA+0xee>
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e123      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c14:	e016      	b.n	8008c44 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d104      	bne.n	8008c26 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c24:	e00e      	b.n	8008c44 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d104      	bne.n	8008c36 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c34:	e006      	b.n	8008c44 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c3e:	e001      	b.n	8008c44 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e104      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b0c      	cmp	r3, #12
 8008c48:	f200 80ae 	bhi.w	8008da8 <HAL_TIM_PWM_Start_DMA+0x290>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c89 	.word	0x08008c89
 8008c58:	08008da9 	.word	0x08008da9
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008da9 	.word	0x08008da9
 8008c64:	08008cd1 	.word	0x08008cd1
 8008c68:	08008da9 	.word	0x08008da9
 8008c6c:	08008da9 	.word	0x08008da9
 8008c70:	08008da9 	.word	0x08008da9
 8008c74:	08008d19 	.word	0x08008d19
 8008c78:	08008da9 	.word	0x08008da9
 8008c7c:	08008da9 	.word	0x08008da9
 8008c80:	08008da9 	.word	0x08008da9
 8008c84:	08008d61 	.word	0x08008d61
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	4a72      	ldr	r2, [pc, #456]	; (8008e58 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	4a71      	ldr	r2, [pc, #452]	; (8008e5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	4a70      	ldr	r2, [pc, #448]	; (8008e60 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008c9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3334      	adds	r3, #52	; 0x34
 8008cac:	461a      	mov	r2, r3
 8008cae:	887b      	ldrh	r3, [r7, #2]
 8008cb0:	f7fd fe8c 	bl	80069cc <HAL_DMA_Start_IT>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e0c7      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ccc:	60da      	str	r2, [r3, #12]
      break;
 8008cce:	e06e      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd4:	4a60      	ldr	r2, [pc, #384]	; (8008e58 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008cd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	4a5f      	ldr	r2, [pc, #380]	; (8008e5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	4a5e      	ldr	r2, [pc, #376]	; (8008e60 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008ce6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3338      	adds	r3, #56	; 0x38
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	887b      	ldrh	r3, [r7, #2]
 8008cf8:	f7fd fe68 	bl	80069cc <HAL_DMA_Start_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e0a3      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d14:	60da      	str	r2, [r3, #12]
      break;
 8008d16:	e04a      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	4a4e      	ldr	r2, [pc, #312]	; (8008e58 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a4d      	ldr	r2, [pc, #308]	; (8008e5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a4c      	ldr	r2, [pc, #304]	; (8008e60 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	333c      	adds	r3, #60	; 0x3c
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	887b      	ldrh	r3, [r7, #2]
 8008d40:	f7fd fe44 	bl	80069cc <HAL_DMA_Start_IT>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e07f      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d5c:	60da      	str	r2, [r3, #12]
      break;
 8008d5e:	e026      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	4a3c      	ldr	r2, [pc, #240]	; (8008e58 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008d66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	4a3b      	ldr	r2, [pc, #236]	; (8008e5c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d74:	4a3a      	ldr	r2, [pc, #232]	; (8008e60 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3340      	adds	r3, #64	; 0x40
 8008d84:	461a      	mov	r2, r3
 8008d86:	887b      	ldrh	r3, [r7, #2]
 8008d88:	f7fd fe20 	bl	80069cc <HAL_DMA_Start_IT>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e05b      	b.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008da4:	60da      	str	r2, [r3, #12]
      break;
 8008da6:	e002      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	75fb      	strb	r3, [r7, #23]
      break;
 8008dac:	bf00      	nop
  }

  if (status == HAL_OK)
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d14b      	bne.n	8008e4c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2201      	movs	r2, #1
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 fb57 	bl	800a470 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a27      	ldr	r2, [pc, #156]	; (8008e64 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d107      	bne.n	8008ddc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a20      	ldr	r2, [pc, #128]	; (8008e64 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d018      	beq.n	8008e18 <HAL_TIM_PWM_Start_DMA+0x300>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d013      	beq.n	8008e18 <HAL_TIM_PWM_Start_DMA+0x300>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a1c      	ldr	r2, [pc, #112]	; (8008e68 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00e      	beq.n	8008e18 <HAL_TIM_PWM_Start_DMA+0x300>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a1b      	ldr	r2, [pc, #108]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x354>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d009      	beq.n	8008e18 <HAL_TIM_PWM_Start_DMA+0x300>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d004      	beq.n	8008e18 <HAL_TIM_PWM_Start_DMA+0x300>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d111      	bne.n	8008e3c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b06      	cmp	r3, #6
 8008e28:	d010      	beq.n	8008e4c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0201 	orr.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e3a:	e007      	b.n	8008e4c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	08009e0b 	.word	0x08009e0b
 8008e5c:	08009eb7 	.word	0x08009eb7
 8008e60:	08009d75 	.word	0x08009d75
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40000400 	.word	0x40000400
 8008e6c:	40000800 	.word	0x40000800
 8008e70:	40000c00 	.word	0x40000c00
 8008e74:	40014000 	.word	0x40014000

08008e78 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b0c      	cmp	r3, #12
 8008e8a:	d855      	bhi.n	8008f38 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008e8c:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008ec9 	.word	0x08008ec9
 8008e98:	08008f39 	.word	0x08008f39
 8008e9c:	08008f39 	.word	0x08008f39
 8008ea0:	08008f39 	.word	0x08008f39
 8008ea4:	08008ee5 	.word	0x08008ee5
 8008ea8:	08008f39 	.word	0x08008f39
 8008eac:	08008f39 	.word	0x08008f39
 8008eb0:	08008f39 	.word	0x08008f39
 8008eb4:	08008f01 	.word	0x08008f01
 8008eb8:	08008f39 	.word	0x08008f39
 8008ebc:	08008f39 	.word	0x08008f39
 8008ec0:	08008f39 	.word	0x08008f39
 8008ec4:	08008f1d 	.word	0x08008f1d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ed6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd fe3d 	bl	8006b5c <HAL_DMA_Abort_IT>
      break;
 8008ee2:	e02c      	b.n	8008f3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fd fe2f 	bl	8006b5c <HAL_DMA_Abort_IT>
      break;
 8008efe:	e01e      	b.n	8008f3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fd fe21 	bl	8006b5c <HAL_DMA_Abort_IT>
      break;
 8008f1a:	e010      	b.n	8008f3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fd fe13 	bl	8006b5c <HAL_DMA_Abort_IT>
      break;
 8008f36:	e002      	b.n	8008f3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d157      	bne.n	8008ff4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fa8f 	bl	800a470 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a2a      	ldr	r2, [pc, #168]	; (8009000 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d117      	bne.n	8008f8c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6a1a      	ldr	r2, [r3, #32]
 8008f62:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f66:	4013      	ands	r3, r2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10f      	bne.n	8008f8c <HAL_TIM_PWM_Stop_DMA+0x114>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6a1a      	ldr	r2, [r3, #32]
 8008f72:	f240 4344 	movw	r3, #1092	; 0x444
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d107      	bne.n	8008f8c <HAL_TIM_PWM_Stop_DMA+0x114>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6a1a      	ldr	r2, [r3, #32]
 8008f92:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10f      	bne.n	8008fbc <HAL_TIM_PWM_Stop_DMA+0x144>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a1a      	ldr	r2, [r3, #32]
 8008fa2:	f240 4344 	movw	r3, #1092	; 0x444
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d107      	bne.n	8008fbc <HAL_TIM_PWM_Stop_DMA+0x144>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0201 	bic.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <HAL_TIM_PWM_Stop_DMA+0x154>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fca:	e013      	b.n	8008ff4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d104      	bne.n	8008fdc <HAL_TIM_PWM_Stop_DMA+0x164>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fda:	e00b      	b.n	8008ff4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d104      	bne.n	8008fec <HAL_TIM_PWM_Stop_DMA+0x174>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fea:	e003      	b.n	8008ff4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40010000 	.word	0x40010000

08009004 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e04c      	b.n	80090b2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d111      	bne.n	8009048 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fa45 	bl	800a4bc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009036:	2b00      	cmp	r3, #0
 8009038:	d102      	bne.n	8009040 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1f      	ldr	r2, [pc, #124]	; (80090bc <HAL_TIM_OnePulse_Init+0xb8>)
 800903e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3304      	adds	r3, #4
 8009058:	4619      	mov	r1, r3
 800905a:	4610      	mov	r0, r2
 800905c:	f000 ff62 	bl	8009f24 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0208 	bic.w	r2, r2, #8
 800906e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	080090c1 	.word	0x080090c1

080090c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090fc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d108      	bne.n	8009116 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d105      	bne.n	8009116 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800910a:	7b7b      	ldrb	r3, [r7, #13]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d102      	bne.n	8009116 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009110:	7b3b      	ldrb	r3, [r7, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d001      	beq.n	800911a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e03b      	b.n	8009192 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2202      	movs	r2, #2
 800911e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2202      	movs	r2, #2
 8009136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0202 	orr.w	r2, r2, #2
 8009148:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0204 	orr.w	r2, r2, #4
 8009158:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2201      	movs	r2, #1
 8009160:	2100      	movs	r1, #0
 8009162:	4618      	mov	r0, r3
 8009164:	f001 f984 	bl	800a470 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2201      	movs	r2, #1
 800916e:	2104      	movs	r1, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f001 f97d 	bl	800a470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a08      	ldr	r2, [pc, #32]	; (800919c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d107      	bne.n	8009190 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800918e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	40010000 	.word	0x40010000

080091a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e0a2      	b.n	80092fa <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d111      	bne.n	80091e4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 f977 	bl	800a4bc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a4a      	ldr	r2, [pc, #296]	; (8009304 <HAL_TIM_Encoder_Init+0x164>)
 80091da:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f000 fe8a 	bl	8009f24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009238:	f023 0303 	bic.w	r3, r3, #3
 800923c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	4313      	orrs	r3, r2
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009256:	f023 030c 	bic.w	r3, r3, #12
 800925a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	4313      	orrs	r3, r2
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	011a      	lsls	r2, r3, #4
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	031b      	lsls	r3, r3, #12
 8009286:	4313      	orrs	r3, r2
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009294:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800929c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	4313      	orrs	r3, r2
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	08005495 	.word	0x08005495

08009308 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009318:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009320:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009328:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009330:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d110      	bne.n	800935a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d102      	bne.n	8009344 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800933e:	7b7b      	ldrb	r3, [r7, #13]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d001      	beq.n	8009348 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e069      	b.n	800941c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009358:	e031      	b.n	80093be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b04      	cmp	r3, #4
 800935e:	d110      	bne.n	8009382 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d102      	bne.n	800936c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009366:	7b3b      	ldrb	r3, [r7, #12]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d001      	beq.n	8009370 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e055      	b.n	800941c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009380:	e01d      	b.n	80093be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d108      	bne.n	800939a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d105      	bne.n	800939a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800938e:	7b7b      	ldrb	r3, [r7, #13]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d102      	bne.n	800939a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009394:	7b3b      	ldrb	r3, [r7, #12]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d001      	beq.n	800939e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e03e      	b.n	800941c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_TIM_Encoder_Start+0xc4>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d008      	beq.n	80093dc <HAL_TIM_Encoder_Start+0xd4>
 80093ca:	e00f      	b.n	80093ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2201      	movs	r2, #1
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 f84b 	bl	800a470 <TIM_CCxChannelCmd>
      break;
 80093da:	e016      	b.n	800940a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2201      	movs	r2, #1
 80093e2:	2104      	movs	r1, #4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f843 	bl	800a470 <TIM_CCxChannelCmd>
      break;
 80093ea:	e00e      	b.n	800940a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f83b 	bl	800a470 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2201      	movs	r2, #1
 8009400:	2104      	movs	r1, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f001 f834 	bl	800a470 <TIM_CCxChannelCmd>
      break;
 8009408:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0201 	orr.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b02      	cmp	r3, #2
 8009438:	d128      	bne.n	800948c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b02      	cmp	r3, #2
 8009446:	d121      	bne.n	800948c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0202 	mvn.w	r2, #2
 8009450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	4798      	blx	r3
 8009470:	e009      	b.n	8009486 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b04      	cmp	r3, #4
 8009498:	d128      	bne.n	80094ec <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d121      	bne.n	80094ec <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0204 	mvn.w	r2, #4
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2202      	movs	r2, #2
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	4798      	blx	r3
 80094d0:	e009      	b.n	80094e6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b08      	cmp	r3, #8
 80094f8:	d128      	bne.n	800954c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f003 0308 	and.w	r3, r3, #8
 8009504:	2b08      	cmp	r3, #8
 8009506:	d121      	bne.n	800954c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f06f 0208 	mvn.w	r2, #8
 8009510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2204      	movs	r2, #4
 8009516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4798      	blx	r3
 8009530:	e009      	b.n	8009546 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f003 0310 	and.w	r3, r3, #16
 8009556:	2b10      	cmp	r3, #16
 8009558:	d128      	bne.n	80095ac <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b10      	cmp	r3, #16
 8009566:	d121      	bne.n	80095ac <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f06f 0210 	mvn.w	r2, #16
 8009570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2208      	movs	r2, #8
 8009576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009582:	2b00      	cmp	r3, #0
 8009584:	d005      	beq.n	8009592 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3
 8009590:	e009      	b.n	80095a6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d110      	bne.n	80095dc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d109      	bne.n	80095dc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0201 	mvn.w	r2, #1
 80095d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e6:	2b80      	cmp	r3, #128	; 0x80
 80095e8:	d110      	bne.n	800960c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f4:	2b80      	cmp	r3, #128	; 0x80
 80095f6:	d109      	bne.n	800960c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b40      	cmp	r3, #64	; 0x40
 8009618:	d110      	bne.n	800963c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b40      	cmp	r3, #64	; 0x40
 8009626:	d109      	bne.n	800963c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b20      	cmp	r3, #32
 8009648:	d110      	bne.n	800966c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b20      	cmp	r3, #32
 8009656:	d109      	bne.n	800966c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f06f 0220 	mvn.w	r2, #32
 8009660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_TIM_OC_ConfigChannel+0x1e>
 800968e:	2302      	movs	r3, #2
 8009690:	e048      	b.n	8009724 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b0c      	cmp	r3, #12
 800969e:	d839      	bhi.n	8009714 <HAL_TIM_OC_ConfigChannel+0xa0>
 80096a0:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80096a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a6:	bf00      	nop
 80096a8:	080096dd 	.word	0x080096dd
 80096ac:	08009715 	.word	0x08009715
 80096b0:	08009715 	.word	0x08009715
 80096b4:	08009715 	.word	0x08009715
 80096b8:	080096eb 	.word	0x080096eb
 80096bc:	08009715 	.word	0x08009715
 80096c0:	08009715 	.word	0x08009715
 80096c4:	08009715 	.word	0x08009715
 80096c8:	080096f9 	.word	0x080096f9
 80096cc:	08009715 	.word	0x08009715
 80096d0:	08009715 	.word	0x08009715
 80096d4:	08009715 	.word	0x08009715
 80096d8:	08009707 	.word	0x08009707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68b9      	ldr	r1, [r7, #8]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fc9e 	bl	800a024 <TIM_OC1_SetConfig>
      break;
 80096e8:	e017      	b.n	800971a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fcfd 	bl	800a0f0 <TIM_OC2_SetConfig>
      break;
 80096f6:	e010      	b.n	800971a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fd62 	bl	800a1c8 <TIM_OC3_SetConfig>
      break;
 8009704:	e009      	b.n	800971a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fdc5 	bl	800a29c <TIM_OC4_SetConfig>
      break;
 8009712:	e002      	b.n	800971a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
      break;
 8009718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009746:	2302      	movs	r3, #2
 8009748:	e0ae      	b.n	80098a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b0c      	cmp	r3, #12
 8009756:	f200 809f 	bhi.w	8009898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	08009795 	.word	0x08009795
 8009764:	08009899 	.word	0x08009899
 8009768:	08009899 	.word	0x08009899
 800976c:	08009899 	.word	0x08009899
 8009770:	080097d5 	.word	0x080097d5
 8009774:	08009899 	.word	0x08009899
 8009778:	08009899 	.word	0x08009899
 800977c:	08009899 	.word	0x08009899
 8009780:	08009817 	.word	0x08009817
 8009784:	08009899 	.word	0x08009899
 8009788:	08009899 	.word	0x08009899
 800978c:	08009899 	.word	0x08009899
 8009790:	08009857 	.word	0x08009857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 fc42 	bl	800a024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699a      	ldr	r2, [r3, #24]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0208 	orr.w	r2, r2, #8
 80097ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0204 	bic.w	r2, r2, #4
 80097be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6999      	ldr	r1, [r3, #24]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	691a      	ldr	r2, [r3, #16]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	619a      	str	r2, [r3, #24]
      break;
 80097d2:	e064      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68b9      	ldr	r1, [r7, #8]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fc88 	bl	800a0f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6999      	ldr	r1, [r3, #24]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	021a      	lsls	r2, r3, #8
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	619a      	str	r2, [r3, #24]
      break;
 8009814:	e043      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fcd3 	bl	800a1c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69da      	ldr	r2, [r3, #28]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0204 	bic.w	r2, r2, #4
 8009840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69d9      	ldr	r1, [r3, #28]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	61da      	str	r2, [r3, #28]
      break;
 8009854:	e023      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fd1d 	bl	800a29c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69d9      	ldr	r1, [r3, #28]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	021a      	lsls	r2, r3, #8
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	61da      	str	r2, [r3, #28]
      break;
 8009896:	e002      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	75fb      	strb	r3, [r7, #23]
      break;
 800989c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_TIM_ConfigClockSource+0x1c>
 80098c8:	2302      	movs	r3, #2
 80098ca:	e0b4      	b.n	8009a36 <HAL_TIM_ConfigClockSource+0x186>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80098ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009904:	d03e      	beq.n	8009984 <HAL_TIM_ConfigClockSource+0xd4>
 8009906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800990a:	f200 8087 	bhi.w	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800990e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009912:	f000 8086 	beq.w	8009a22 <HAL_TIM_ConfigClockSource+0x172>
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991a:	d87f      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800991c:	2b70      	cmp	r3, #112	; 0x70
 800991e:	d01a      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0xa6>
 8009920:	2b70      	cmp	r3, #112	; 0x70
 8009922:	d87b      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b60      	cmp	r3, #96	; 0x60
 8009926:	d050      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0x11a>
 8009928:	2b60      	cmp	r3, #96	; 0x60
 800992a:	d877      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b50      	cmp	r3, #80	; 0x50
 800992e:	d03c      	beq.n	80099aa <HAL_TIM_ConfigClockSource+0xfa>
 8009930:	2b50      	cmp	r3, #80	; 0x50
 8009932:	d873      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	d058      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x13a>
 8009938:	2b40      	cmp	r3, #64	; 0x40
 800993a:	d86f      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800993c:	2b30      	cmp	r3, #48	; 0x30
 800993e:	d064      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009940:	2b30      	cmp	r3, #48	; 0x30
 8009942:	d86b      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 8009944:	2b20      	cmp	r3, #32
 8009946:	d060      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009948:	2b20      	cmp	r3, #32
 800994a:	d867      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05c      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009950:	2b10      	cmp	r3, #16
 8009952:	d05a      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009954:	e062      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6899      	ldr	r1, [r3, #8]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f000 fd63 	bl	800a430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	609a      	str	r2, [r3, #8]
      break;
 8009982:	e04f      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	6899      	ldr	r1, [r3, #8]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f000 fd4c 	bl	800a430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099a6:	609a      	str	r2, [r3, #8]
      break;
 80099a8:	e03c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f000 fcc0 	bl	800a33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2150      	movs	r1, #80	; 0x50
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fd19 	bl	800a3fa <TIM_ITRx_SetConfig>
      break;
 80099c8:	e02c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6859      	ldr	r1, [r3, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 fcdf 	bl	800a39a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2160      	movs	r1, #96	; 0x60
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fd09 	bl	800a3fa <TIM_ITRx_SetConfig>
      break;
 80099e8:	e01c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f000 fca0 	bl	800a33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2140      	movs	r1, #64	; 0x40
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fcf9 	bl	800a3fa <TIM_ITRx_SetConfig>
      break;
 8009a08:	e00c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f000 fcf0 	bl	800a3fa <TIM_ITRx_SetConfig>
      break;
 8009a1a:	e003      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a20:	e000      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009a82:	bf00      	nop
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009abe:	bf00      	nop
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
	...

08009ae0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e135      	b.n	8009d68 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d101      	bne.n	8009b0a <HAL_TIM_RegisterCallback+0x2a>
 8009b06:	2302      	movs	r3, #2
 8009b08:	e12e      	b.n	8009d68 <HAL_TIM_RegisterCallback+0x288>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	f040 80ba 	bne.w	8009c94 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	2b1a      	cmp	r3, #26
 8009b24:	f200 80b3 	bhi.w	8009c8e <HAL_TIM_RegisterCallback+0x1ae>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <HAL_TIM_RegisterCallback+0x50>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b9d 	.word	0x08009b9d
 8009b34:	08009ba5 	.word	0x08009ba5
 8009b38:	08009bad 	.word	0x08009bad
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009bbd 	.word	0x08009bbd
 8009b44:	08009bc5 	.word	0x08009bc5
 8009b48:	08009bcd 	.word	0x08009bcd
 8009b4c:	08009bd5 	.word	0x08009bd5
 8009b50:	08009bdd 	.word	0x08009bdd
 8009b54:	08009be5 	.word	0x08009be5
 8009b58:	08009bed 	.word	0x08009bed
 8009b5c:	08009bf5 	.word	0x08009bf5
 8009b60:	08009bfd 	.word	0x08009bfd
 8009b64:	08009c05 	.word	0x08009c05
 8009b68:	08009c0d 	.word	0x08009c0d
 8009b6c:	08009c17 	.word	0x08009c17
 8009b70:	08009c21 	.word	0x08009c21
 8009b74:	08009c2b 	.word	0x08009c2b
 8009b78:	08009c35 	.word	0x08009c35
 8009b7c:	08009c3f 	.word	0x08009c3f
 8009b80:	08009c49 	.word	0x08009c49
 8009b84:	08009c53 	.word	0x08009c53
 8009b88:	08009c5d 	.word	0x08009c5d
 8009b8c:	08009c67 	.word	0x08009c67
 8009b90:	08009c71 	.word	0x08009c71
 8009b94:	08009c7b 	.word	0x08009c7b
 8009b98:	08009c85 	.word	0x08009c85
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009ba2:	e0dc      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009baa:	e0d8      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009bb2:	e0d4      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009bba:	e0d0      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009bc2:	e0cc      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009bca:	e0c8      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009bd2:	e0c4      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009bda:	e0c0      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009be2:	e0bc      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009bea:	e0b8      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009bf2:	e0b4      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009bfa:	e0b0      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009c02:	e0ac      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009c0a:	e0a8      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009c14:	e0a3      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009c1e:	e09e      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009c28:	e099      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009c32:	e094      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009c3c:	e08f      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009c46:	e08a      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009c50:	e085      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009c5a:	e080      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009c64:	e07b      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009c6e:	e076      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009c78:	e071      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009c82:	e06c      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009c8c:	e067      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	75fb      	strb	r3, [r7, #23]
        break;
 8009c92:	e064      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d15c      	bne.n	8009d5a <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	2b0d      	cmp	r3, #13
 8009ca4:	d856      	bhi.n	8009d54 <HAL_TIM_RegisterCallback+0x274>
 8009ca6:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <HAL_TIM_RegisterCallback+0x1cc>)
 8009ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cac:	08009ce5 	.word	0x08009ce5
 8009cb0:	08009ced 	.word	0x08009ced
 8009cb4:	08009cf5 	.word	0x08009cf5
 8009cb8:	08009cfd 	.word	0x08009cfd
 8009cbc:	08009d05 	.word	0x08009d05
 8009cc0:	08009d0d 	.word	0x08009d0d
 8009cc4:	08009d15 	.word	0x08009d15
 8009cc8:	08009d1d 	.word	0x08009d1d
 8009ccc:	08009d25 	.word	0x08009d25
 8009cd0:	08009d2d 	.word	0x08009d2d
 8009cd4:	08009d35 	.word	0x08009d35
 8009cd8:	08009d3d 	.word	0x08009d3d
 8009cdc:	08009d45 	.word	0x08009d45
 8009ce0:	08009d4d 	.word	0x08009d4d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009cea:	e038      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009cf2:	e034      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009cfa:	e030      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009d02:	e02c      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009d0a:	e028      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009d12:	e024      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009d1a:	e020      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009d22:	e01c      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009d2a:	e018      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009d32:	e014      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009d3a:	e010      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009d42:	e00c      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009d4a:	e008      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009d52:	e004      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	75fb      	strb	r3, [r7, #23]
        break;
 8009d58:	e001      	b.n	8009d5e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	371c      	adds	r7, #28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d107      	bne.n	8009d9c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d9a:	e02a      	b.n	8009df2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d107      	bne.n	8009db6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2202      	movs	r2, #2
 8009daa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009db4:	e01d      	b.n	8009df2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d107      	bne.n	8009dd0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dce:	e010      	b.n	8009df2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d107      	bne.n	8009dea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009de8:	e003      	b.n	8009df2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	771a      	strb	r2, [r3, #28]
}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d10b      	bne.n	8009e3a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d136      	bne.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e38:	e031      	b.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d10b      	bne.n	8009e5c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2202      	movs	r2, #2
 8009e48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d125      	bne.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e5a:	e020      	b.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d10b      	bne.n	8009e7e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d114      	bne.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e7c:	e00f      	b.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d10a      	bne.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d103      	bne.n	8009e9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	771a      	strb	r2, [r3, #28]
}
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d103      	bne.n	8009ed6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	771a      	strb	r2, [r3, #28]
 8009ed4:	e019      	b.n	8009f0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d103      	bne.n	8009ee8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	771a      	strb	r2, [r3, #28]
 8009ee6:	e010      	b.n	8009f0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d103      	bne.n	8009efa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	771a      	strb	r2, [r3, #28]
 8009ef8:	e007      	b.n	8009f0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d102      	bne.n	8009f0a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2208      	movs	r2, #8
 8009f08:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	771a      	strb	r2, [r3, #28]
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a34      	ldr	r2, [pc, #208]	; (800a008 <TIM_Base_SetConfig+0xe4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d00f      	beq.n	8009f5c <TIM_Base_SetConfig+0x38>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f42:	d00b      	beq.n	8009f5c <TIM_Base_SetConfig+0x38>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a31      	ldr	r2, [pc, #196]	; (800a00c <TIM_Base_SetConfig+0xe8>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d007      	beq.n	8009f5c <TIM_Base_SetConfig+0x38>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a30      	ldr	r2, [pc, #192]	; (800a010 <TIM_Base_SetConfig+0xec>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d003      	beq.n	8009f5c <TIM_Base_SetConfig+0x38>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a2f      	ldr	r2, [pc, #188]	; (800a014 <TIM_Base_SetConfig+0xf0>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d108      	bne.n	8009f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a25      	ldr	r2, [pc, #148]	; (800a008 <TIM_Base_SetConfig+0xe4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d01b      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f7c:	d017      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a22      	ldr	r2, [pc, #136]	; (800a00c <TIM_Base_SetConfig+0xe8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d013      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a21      	ldr	r2, [pc, #132]	; (800a010 <TIM_Base_SetConfig+0xec>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00f      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a20      	ldr	r2, [pc, #128]	; (800a014 <TIM_Base_SetConfig+0xf0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00b      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a1f      	ldr	r2, [pc, #124]	; (800a018 <TIM_Base_SetConfig+0xf4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d007      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a1e      	ldr	r2, [pc, #120]	; (800a01c <TIM_Base_SetConfig+0xf8>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d003      	beq.n	8009fae <TIM_Base_SetConfig+0x8a>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a1d      	ldr	r2, [pc, #116]	; (800a020 <TIM_Base_SetConfig+0xfc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d108      	bne.n	8009fc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a08      	ldr	r2, [pc, #32]	; (800a008 <TIM_Base_SetConfig+0xe4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d103      	bne.n	8009ff4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	615a      	str	r2, [r3, #20]
}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	40010000 	.word	0x40010000
 800a00c:	40000400 	.word	0x40000400
 800a010:	40000800 	.word	0x40000800
 800a014:	40000c00 	.word	0x40000c00
 800a018:	40014000 	.word	0x40014000
 800a01c:	40014400 	.word	0x40014400
 800a020:	40014800 	.word	0x40014800

0800a024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f023 0201 	bic.w	r2, r3, #1
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f023 0302 	bic.w	r3, r3, #2
 800a06c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	4313      	orrs	r3, r2
 800a076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a1c      	ldr	r2, [pc, #112]	; (800a0ec <TIM_OC1_SetConfig+0xc8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10c      	bne.n	800a09a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f023 0308 	bic.w	r3, r3, #8
 800a086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	4313      	orrs	r3, r2
 800a090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f023 0304 	bic.w	r3, r3, #4
 800a098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <TIM_OC1_SetConfig+0xc8>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d111      	bne.n	800a0c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	621a      	str	r2, [r3, #32]
}
 800a0e0:	bf00      	nop
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	40010000 	.word	0x40010000

0800a0f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	f023 0210 	bic.w	r2, r3, #16
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4313      	orrs	r3, r2
 800a132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f023 0320 	bic.w	r3, r3, #32
 800a13a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	4313      	orrs	r3, r2
 800a146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a1e      	ldr	r2, [pc, #120]	; (800a1c4 <TIM_OC2_SetConfig+0xd4>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10d      	bne.n	800a16c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	4313      	orrs	r3, r2
 800a162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a15      	ldr	r2, [pc, #84]	; (800a1c4 <TIM_OC2_SetConfig+0xd4>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d113      	bne.n	800a19c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a17a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	40010000 	.word	0x40010000

0800a1c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4313      	orrs	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <TIM_OC3_SetConfig+0xd0>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d10d      	bne.n	800a242 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a22c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a14      	ldr	r2, [pc, #80]	; (800a298 <TIM_OC3_SetConfig+0xd0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d113      	bne.n	800a272 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	011b      	lsls	r3, r3, #4
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	4313      	orrs	r3, r2
 800a270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	621a      	str	r2, [r3, #32]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	40010000 	.word	0x40010000

0800a29c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	031b      	lsls	r3, r3, #12
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a10      	ldr	r2, [pc, #64]	; (800a338 <TIM_OC4_SetConfig+0x9c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d109      	bne.n	800a310 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	019b      	lsls	r3, r3, #6
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	621a      	str	r2, [r3, #32]
}
 800a32a:	bf00      	nop
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	40010000 	.word	0x40010000

0800a33c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	f023 0201 	bic.w	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f023 030a 	bic.w	r3, r3, #10
 800a378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	621a      	str	r2, [r3, #32]
}
 800a38e:	bf00      	nop
 800a390:	371c      	adds	r7, #28
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b087      	sub	sp, #28
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	60b9      	str	r1, [r7, #8]
 800a3a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f023 0210 	bic.w	r2, r3, #16
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	031b      	lsls	r3, r3, #12
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	f043 0307 	orr.w	r3, r3, #7
 800a41c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	609a      	str	r2, [r3, #8]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a44a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	021a      	lsls	r2, r3, #8
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	431a      	orrs	r2, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	4313      	orrs	r3, r2
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	609a      	str	r2, [r3, #8]
}
 800a464:	bf00      	nop
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f003 031f 	and.w	r3, r3, #31
 800a482:	2201      	movs	r2, #1
 800a484:	fa02 f303 	lsl.w	r3, r2, r3
 800a488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a1a      	ldr	r2, [r3, #32]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	43db      	mvns	r3, r3
 800a492:	401a      	ands	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6a1a      	ldr	r2, [r3, #32]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 031f 	and.w	r3, r3, #31
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	621a      	str	r2, [r3, #32]
}
 800a4ae:	bf00      	nop
 800a4b0:	371c      	adds	r7, #28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a1c      	ldr	r2, [pc, #112]	; (800a538 <TIM_ResetCallback+0x7c>)
 800a4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a1b      	ldr	r2, [pc, #108]	; (800a53c <TIM_ResetCallback+0x80>)
 800a4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a1a      	ldr	r2, [pc, #104]	; (800a540 <TIM_ResetCallback+0x84>)
 800a4d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a19      	ldr	r2, [pc, #100]	; (800a544 <TIM_ResetCallback+0x88>)
 800a4e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <TIM_ResetCallback+0x8c>)
 800a4e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a17      	ldr	r2, [pc, #92]	; (800a54c <TIM_ResetCallback+0x90>)
 800a4f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a16      	ldr	r2, [pc, #88]	; (800a550 <TIM_ResetCallback+0x94>)
 800a4f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a15      	ldr	r2, [pc, #84]	; (800a554 <TIM_ResetCallback+0x98>)
 800a500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a14      	ldr	r2, [pc, #80]	; (800a558 <TIM_ResetCallback+0x9c>)
 800a508:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a13      	ldr	r2, [pc, #76]	; (800a55c <TIM_ResetCallback+0xa0>)
 800a510:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a12      	ldr	r2, [pc, #72]	; (800a560 <TIM_ResetCallback+0xa4>)
 800a518:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a11      	ldr	r2, [pc, #68]	; (800a564 <TIM_ResetCallback+0xa8>)
 800a520:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a10      	ldr	r2, [pc, #64]	; (800a568 <TIM_ResetCallback+0xac>)
 800a528:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	08004b99 	.word	0x08004b99
 800a53c:	08009a3f 	.word	0x08009a3f
 800a540:	08009aa3 	.word	0x08009aa3
 800a544:	08009ab7 	.word	0x08009ab7
 800a548:	08009a67 	.word	0x08009a67
 800a54c:	08009a7b 	.word	0x08009a7b
 800a550:	08009a53 	.word	0x08009a53
 800a554:	0800332d 	.word	0x0800332d
 800a558:	08009a8f 	.word	0x08009a8f
 800a55c:	08009acb 	.word	0x08009acb
 800a560:	0800a6ed 	.word	0x0800a6ed
 800a564:	0800a701 	.word	0x0800a701
 800a568:	0800a715 	.word	0x0800a715

0800a56c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d101      	bne.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a580:	2302      	movs	r3, #2
 800a582:	e050      	b.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1c      	ldr	r2, [pc, #112]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d018      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d0:	d013      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a18      	ldr	r2, [pc, #96]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00e      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a16      	ldr	r2, [pc, #88]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d009      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a15      	ldr	r2, [pc, #84]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d004      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a13      	ldr	r2, [pc, #76]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d10c      	bne.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40010000 	.word	0x40010000
 800a638:	40000400 	.word	0x40000400
 800a63c:	40000800 	.word	0x40000800
 800a640:	40000c00 	.word	0x40000c00
 800a644:	40014000 	.word	0x40014000

0800a648 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a660:	2302      	movs	r3, #2
 800a662:	e03d      	b.n	800a6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	69db      	ldr	r3, [r3, #28]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	e04a      	b.n	800a7d0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d111      	bne.n	800a76a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fd84 	bl	800b25c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d102      	bne.n	800a762 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a1e      	ldr	r2, [pc, #120]	; (800a7d8 <HAL_UART_Init+0xb0>)
 800a760:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2224      	movs	r2, #36	; 0x24
 800a76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a780:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f84e 	bl	800b824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691a      	ldr	r2, [r3, #16]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a796:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	695a      	ldr	r2, [r3, #20]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68da      	ldr	r2, [r3, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	08005d8d 	.word	0x08005d8d

0800a7dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e052      	b.n	800a894 <HAL_HalfDuplex_Init+0xb8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d111      	bne.n	800a81e <HAL_HalfDuplex_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fd2a 	bl	800b25c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d102      	bne.n	800a816 <HAL_HalfDuplex_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a22      	ldr	r2, [pc, #136]	; (800a89c <HAL_HalfDuplex_Init+0xc0>)
 800a814:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2224      	movs	r2, #36	; 0x24
 800a822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68da      	ldr	r2, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a834:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fff4 	bl	800b824 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a84a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695a      	ldr	r2, [r3, #20]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a85a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	695a      	ldr	r2, [r3, #20]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0208 	orr.w	r2, r2, #8
 800a86a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a87a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2220      	movs	r2, #32
 800a886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2220      	movs	r2, #32
 800a88e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	08005d8d 	.word	0x08005d8d

0800a8a0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d107      	bne.n	800a8c8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	f043 0220 	orr.w	r2, r3, #32
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e08c      	b.n	800a9e2 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d101      	bne.n	800a8d6 <HAL_UART_RegisterCallback+0x36>
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	e085      	b.n	800a9e2 <HAL_UART_RegisterCallback+0x142>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d151      	bne.n	800a98e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	2b0c      	cmp	r3, #12
 800a8ee:	d845      	bhi.n	800a97c <HAL_UART_RegisterCallback+0xdc>
 800a8f0:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <HAL_UART_RegisterCallback+0x58>)
 800a8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f6:	bf00      	nop
 800a8f8:	0800a92d 	.word	0x0800a92d
 800a8fc:	0800a935 	.word	0x0800a935
 800a900:	0800a93d 	.word	0x0800a93d
 800a904:	0800a945 	.word	0x0800a945
 800a908:	0800a94d 	.word	0x0800a94d
 800a90c:	0800a955 	.word	0x0800a955
 800a910:	0800a95d 	.word	0x0800a95d
 800a914:	0800a965 	.word	0x0800a965
 800a918:	0800a97d 	.word	0x0800a97d
 800a91c:	0800a97d 	.word	0x0800a97d
 800a920:	0800a97d 	.word	0x0800a97d
 800a924:	0800a96d 	.word	0x0800a96d
 800a928:	0800a975 	.word	0x0800a975
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a932:	e051      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a93a:	e04d      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a942:	e049      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a94a:	e045      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a952:	e041      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a95a:	e03d      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a962:	e039      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a96a:	e035      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a972:	e031      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a97a:	e02d      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	f043 0220 	orr.w	r2, r3, #32
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	75fb      	strb	r3, [r7, #23]
        break;
 800a98c:	e024      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d116      	bne.n	800a9c8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a99a:	7afb      	ldrb	r3, [r7, #11]
 800a99c:	2b0b      	cmp	r3, #11
 800a99e:	d002      	beq.n	800a9a6 <HAL_UART_RegisterCallback+0x106>
 800a9a0:	2b0c      	cmp	r3, #12
 800a9a2:	d004      	beq.n	800a9ae <HAL_UART_RegisterCallback+0x10e>
 800a9a4:	e007      	b.n	800a9b6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a9ac:	e014      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a9b4:	e010      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	f043 0220 	orr.w	r2, r3, #32
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	75fb      	strb	r3, [r7, #23]
        break;
 800a9c6:	e007      	b.n	800a9d8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9cc:	f043 0220 	orr.w	r2, r3, #32
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop

0800a9f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d11d      	bne.n	800aa46 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <HAL_UART_Receive_IT+0x26>
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e016      	b.n	800aa48 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d101      	bne.n	800aa28 <HAL_UART_Receive_IT+0x38>
 800aa24:	2302      	movs	r3, #2
 800aa26:	e00f      	b.n	800aa48 <HAL_UART_Receive_IT+0x58>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fced 	bl	800b41c <UART_Start_Receive_IT>
 800aa42:	4603      	mov	r3, r0
 800aa44:	e000      	b.n	800aa48 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa46:	2302      	movs	r3, #2
  }
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08c      	sub	sp, #48	; 0x30
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b20      	cmp	r3, #32
 800aa68:	d165      	bne.n	800ab36 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <HAL_UART_Transmit_DMA+0x26>
 800aa70:	88fb      	ldrh	r3, [r7, #6]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e05e      	b.n	800ab38 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_UART_Transmit_DMA+0x38>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e057      	b.n	800ab38 <HAL_UART_Transmit_DMA+0xe8>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	88fa      	ldrh	r2, [r7, #6]
 800aa9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	88fa      	ldrh	r2, [r7, #6]
 800aaa0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2221      	movs	r2, #33	; 0x21
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab4:	4a22      	ldr	r2, [pc, #136]	; (800ab40 <HAL_UART_Transmit_DMA+0xf0>)
 800aab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabc:	4a21      	ldr	r2, [pc, #132]	; (800ab44 <HAL_UART_Transmit_DMA+0xf4>)
 800aabe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac4:	4a20      	ldr	r2, [pc, #128]	; (800ab48 <HAL_UART_Transmit_DMA+0xf8>)
 800aac6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aacc:	2200      	movs	r2, #0
 800aace:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aad0:	f107 0308 	add.w	r3, r7, #8
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	6819      	ldr	r1, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3304      	adds	r3, #4
 800aae4:	461a      	mov	r2, r3
 800aae6:	88fb      	ldrh	r3, [r7, #6]
 800aae8:	f7fb ff70 	bl	80069cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaf4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3314      	adds	r3, #20
 800ab04:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3314      	adds	r3, #20
 800ab1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab1e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab20:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6a39      	ldr	r1, [r7, #32]
 800ab24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	e000      	b.n	800ab38 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ab36:	2302      	movs	r3, #2
  }
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3730      	adds	r7, #48	; 0x30
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	0800b2cd 	.word	0x0800b2cd
 800ab44:	0800b369 	.word	0x0800b369
 800ab48:	0800b387 	.word	0x0800b387

0800ab4c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b09a      	sub	sp, #104	; 0x68
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	330c      	adds	r3, #12
 800ab5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab74:	657a      	str	r2, [r7, #84]	; 0x54
 800ab76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	f023 0301 	bic.w	r3, r3, #1
 800ab9e:	663b      	str	r3, [r7, #96]	; 0x60
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3314      	adds	r3, #20
 800aba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aba8:	643a      	str	r2, [r7, #64]	; 0x40
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e5      	bne.n	800ab88 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d119      	bne.n	800abf8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	330c      	adds	r3, #12
 800abca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	f023 0310 	bic.w	r3, r3, #16
 800abda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	330c      	adds	r3, #12
 800abe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abec:	e841 2300 	strex	r3, r2, [r1]
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1e5      	bne.n	800abc4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	d136      	bne.n	800ac74 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3314      	adds	r3, #20
 800ac0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3314      	adds	r3, #20
 800ac24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac26:	61ba      	str	r2, [r7, #24]
 800ac28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6979      	ldr	r1, [r7, #20]
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	613b      	str	r3, [r7, #16]
   return(result);
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e5      	bne.n	800ac06 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d018      	beq.n	800ac74 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac46:	2200      	movs	r2, #0
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fb ff14 	bl	8006a7c <HAL_DMA_Abort>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00c      	beq.n	800ac74 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fc f928 	bl	8006eb4 <HAL_DMA_GetError>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	d104      	bne.n	800ac74 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2210      	movs	r2, #16
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e00a      	b.n	800ac8a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3768      	adds	r7, #104	; 0x68
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b0ba      	sub	sp, #232	; 0xe8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800acba:	2300      	movs	r3, #0
 800acbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acca:	f003 030f 	and.w	r3, r3, #15
 800acce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800acd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10f      	bne.n	800acfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <HAL_UART_IRQHandler+0x66>
 800ace6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acea:	f003 0320 	and.w	r3, r3, #32
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fcd9 	bl	800b6aa <UART_Receive_IT>
      return;
 800acf8:	e25b      	b.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 80e1 	beq.w	800aec6 <HAL_UART_IRQHandler+0x232>
 800ad04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 80d4 	beq.w	800aec6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00b      	beq.n	800ad42 <HAL_UART_IRQHandler+0xae>
 800ad2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d005      	beq.n	800ad42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3a:	f043 0201 	orr.w	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad46:	f003 0304 	and.w	r3, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00b      	beq.n	800ad66 <HAL_UART_IRQHandler+0xd2>
 800ad4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d005      	beq.n	800ad66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f043 0202 	orr.w	r2, r3, #2
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <HAL_UART_IRQHandler+0xf6>
 800ad72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	f043 0204 	orr.w	r2, r3, #4
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad8e:	f003 0308 	and.w	r3, r3, #8
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d011      	beq.n	800adba <HAL_UART_IRQHandler+0x126>
 800ad96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9a:	f003 0320 	and.w	r3, r3, #32
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d105      	bne.n	800adae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ada2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d005      	beq.n	800adba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	f043 0208 	orr.w	r2, r3, #8
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 81f2 	beq.w	800b1a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc8:	f003 0320 	and.w	r3, r3, #32
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d008      	beq.n	800ade2 <HAL_UART_IRQHandler+0x14e>
 800add0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add4:	f003 0320 	and.w	r3, r3, #32
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fc64 	bl	800b6aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adec:	2b40      	cmp	r3, #64	; 0x40
 800adee:	bf0c      	ite	eq
 800adf0:	2301      	moveq	r3, #1
 800adf2:	2300      	movne	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	f003 0308 	and.w	r3, r3, #8
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d103      	bne.n	800ae0e <HAL_UART_IRQHandler+0x17a>
 800ae06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d051      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fb6a 	bl	800b4e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d142      	bne.n	800aea8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3314      	adds	r3, #20
 800ae28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3314      	adds	r3, #20
 800ae4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1d9      	bne.n	800ae22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d013      	beq.n	800ae9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	4a7f      	ldr	r2, [pc, #508]	; (800b078 <HAL_UART_IRQHandler+0x3e4>)
 800ae7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fb fe6a 	bl	8006b5c <HAL_DMA_Abort_IT>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d019      	beq.n	800aec2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae9c:	e011      	b.n	800aec2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea6:	e00c      	b.n	800aec2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb0:	e007      	b.n	800aec2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aec0:	e172      	b.n	800b1a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec2:	bf00      	nop
    return;
 800aec4:	e170      	b.n	800b1a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	f040 814c 	bne.w	800b168 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 8145 	beq.w	800b168 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aee2:	f003 0310 	and.w	r3, r3, #16
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 813e 	beq.w	800b168 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeec:	2300      	movs	r3, #0
 800aeee:	60bb      	str	r3, [r7, #8]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	60bb      	str	r3, [r7, #8]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	60bb      	str	r3, [r7, #8]
 800af00:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0c:	2b40      	cmp	r3, #64	; 0x40
 800af0e:	f040 80b5 	bne.w	800b07c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 8142 	beq.w	800b1ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af30:	429a      	cmp	r2, r3
 800af32:	f080 813b 	bcs.w	800b1ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af48:	f000 8088 	beq.w	800b05c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	330c      	adds	r3, #12
 800af52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	330c      	adds	r3, #12
 800af74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1d9      	bne.n	800af4c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3314      	adds	r3, #20
 800af9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afa2:	e853 3f00 	ldrex	r3, [r3]
 800afa6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800afa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afaa:	f023 0301 	bic.w	r3, r3, #1
 800afae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3314      	adds	r3, #20
 800afb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800afbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afc8:	e841 2300 	strex	r3, r2, [r1]
 800afcc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e1      	bne.n	800af98 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3314      	adds	r3, #20
 800afda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3314      	adds	r3, #20
 800aff4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aff8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800affa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800affe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b000:	e841 2300 	strex	r3, r2, [r1]
 800b004:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e3      	bne.n	800afd4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	330c      	adds	r3, #12
 800b020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b024:	e853 3f00 	ldrex	r3, [r3]
 800b028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b02a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02c:	f023 0310 	bic.w	r3, r3, #16
 800b030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	330c      	adds	r3, #12
 800b03a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b03e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b040:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e3      	bne.n	800b01a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	4618      	mov	r0, r3
 800b058:	f7fb fd10 	bl	8006a7c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b068:	b292      	uxth	r2, r2
 800b06a:	1a8a      	subs	r2, r1, r2
 800b06c:	b292      	uxth	r2, r2
 800b06e:	4611      	mov	r1, r2
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b074:	e09a      	b.n	800b1ac <HAL_UART_IRQHandler+0x518>
 800b076:	bf00      	nop
 800b078:	0800b5af 	.word	0x0800b5af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b084:	b29b      	uxth	r3, r3
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b090:	b29b      	uxth	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 808c 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f000 8087 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	330c      	adds	r3, #12
 800b0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	330c      	adds	r3, #12
 800b0c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0c6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e3      	bne.n	800b0a2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3314      	adds	r3, #20
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	f023 0301 	bic.w	r3, r3, #1
 800b0f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0fe:	633a      	str	r2, [r7, #48]	; 0x30
 800b100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e3      	bne.n	800b0da <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	330c      	adds	r3, #12
 800b126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 0310 	bic.w	r3, r3, #16
 800b136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	330c      	adds	r3, #12
 800b140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b144:	61fa      	str	r2, [r7, #28]
 800b146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	69b9      	ldr	r1, [r7, #24]
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	617b      	str	r3, [r7, #20]
   return(result);
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e3      	bne.n	800b120 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b15c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b160:	4611      	mov	r1, r2
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b166:	e023      	b.n	800b1b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b170:	2b00      	cmp	r3, #0
 800b172:	d009      	beq.n	800b188 <HAL_UART_IRQHandler+0x4f4>
 800b174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa29 	bl	800b5d8 <UART_Transmit_IT>
    return;
 800b186:	e014      	b.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00e      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
 800b194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d008      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fa69 	bl	800b678 <UART_EndTransmit_IT>
    return;
 800b1a6:	e004      	b.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
    return;
 800b1a8:	bf00      	nop
 800b1aa:	e002      	b.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1ac:	bf00      	nop
 800b1ae:	e000      	b.n	800b1b2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1b0:	bf00      	nop
  }
}
 800b1b2:	37e8      	adds	r7, #232	; 0xe8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a10      	ldr	r2, [pc, #64]	; (800b2a8 <UART_InitCallbacksToDefault+0x4c>)
 800b268:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a0f      	ldr	r2, [pc, #60]	; (800b2ac <UART_InitCallbacksToDefault+0x50>)
 800b26e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a0f      	ldr	r2, [pc, #60]	; (800b2b0 <UART_InitCallbacksToDefault+0x54>)
 800b274:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <UART_InitCallbacksToDefault+0x58>)
 800b27a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a0e      	ldr	r2, [pc, #56]	; (800b2b8 <UART_InitCallbacksToDefault+0x5c>)
 800b280:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a0d      	ldr	r2, [pc, #52]	; (800b2bc <UART_InitCallbacksToDefault+0x60>)
 800b286:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a0d      	ldr	r2, [pc, #52]	; (800b2c0 <UART_InitCallbacksToDefault+0x64>)
 800b28c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a0c      	ldr	r2, [pc, #48]	; (800b2c4 <UART_InitCallbacksToDefault+0x68>)
 800b292:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a0c      	ldr	r2, [pc, #48]	; (800b2c8 <UART_InitCallbacksToDefault+0x6c>)
 800b298:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b29a:	bf00      	nop
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	0800b1cd 	.word	0x0800b1cd
 800b2ac:	0800b1b9 	.word	0x0800b1b9
 800b2b0:	0800b1e1 	.word	0x0800b1e1
 800b2b4:	08004bb9 	.word	0x08004bb9
 800b2b8:	0800b1f5 	.word	0x0800b1f5
 800b2bc:	0800b209 	.word	0x0800b209
 800b2c0:	0800b21d 	.word	0x0800b21d
 800b2c4:	0800b231 	.word	0x0800b231
 800b2c8:	0800b245 	.word	0x0800b245

0800b2cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b090      	sub	sp, #64	; 0x40
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d137      	bne.n	800b358 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3314      	adds	r3, #20
 800b2f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	e853 3f00 	ldrex	r3, [r3]
 800b2fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b304:	63bb      	str	r3, [r7, #56]	; 0x38
 800b306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3314      	adds	r3, #20
 800b30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b30e:	633a      	str	r2, [r7, #48]	; 0x30
 800b310:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e5      	bne.n	800b2ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	330c      	adds	r3, #12
 800b328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	e853 3f00 	ldrex	r3, [r3]
 800b330:	60fb      	str	r3, [r7, #12]
   return(result);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
 800b33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	330c      	adds	r3, #12
 800b340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b342:	61fa      	str	r2, [r7, #28]
 800b344:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b346:	69b9      	ldr	r1, [r7, #24]
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	617b      	str	r3, [r7, #20]
   return(result);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e5      	bne.n	800b322 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b356:	e003      	b.n	800b360 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b35e:	4798      	blx	r3
}
 800b360:	bf00      	nop
 800b362:	3740      	adds	r7, #64	; 0x40
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b374:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a2:	2b80      	cmp	r3, #128	; 0x80
 800b3a4:	bf0c      	ite	eq
 800b3a6:	2301      	moveq	r3, #1
 800b3a8:	2300      	movne	r3, #0
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b21      	cmp	r3, #33	; 0x21
 800b3b8:	d108      	bne.n	800b3cc <UART_DMAError+0x46>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b3c6:	68b8      	ldr	r0, [r7, #8]
 800b3c8:	f000 f866 	bl	800b498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d6:	2b40      	cmp	r3, #64	; 0x40
 800b3d8:	bf0c      	ite	eq
 800b3da:	2301      	moveq	r3, #1
 800b3dc:	2300      	movne	r3, #0
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b22      	cmp	r3, #34	; 0x22
 800b3ec:	d108      	bne.n	800b400 <UART_DMAError+0x7a>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b3fa:	68b8      	ldr	r0, [r7, #8]
 800b3fc:	f000 f874 	bl	800b4e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b404:	f043 0210 	orr.w	r2, r3, #16
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b410:	68b8      	ldr	r0, [r7, #8]
 800b412:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b414:	bf00      	nop
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	88fa      	ldrh	r2, [r7, #6]
 800b434:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	88fa      	ldrh	r2, [r7, #6]
 800b43a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2222      	movs	r2, #34	; 0x22
 800b446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b468:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	695a      	ldr	r2, [r3, #20]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f042 0201 	orr.w	r2, r2, #1
 800b478:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68da      	ldr	r2, [r3, #12]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f042 0220 	orr.w	r2, r2, #32
 800b488:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b089      	sub	sp, #36	; 0x24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	330c      	adds	r3, #12
 800b4a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b4b6:	61fb      	str	r3, [r7, #28]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	61ba      	str	r2, [r7, #24]
 800b4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6979      	ldr	r1, [r7, #20]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e5      	bne.n	800b4a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b4dc:	bf00      	nop
 800b4de:	3724      	adds	r7, #36	; 0x24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b095      	sub	sp, #84	; 0x54
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	330c      	adds	r3, #12
 800b4f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b506:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	330c      	adds	r3, #12
 800b50e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b510:	643a      	str	r2, [r7, #64]	; 0x40
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e5      	bne.n	800b4f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3314      	adds	r3, #20
 800b52a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	61fb      	str	r3, [r7, #28]
   return(result);
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	f023 0301 	bic.w	r3, r3, #1
 800b53a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3314      	adds	r3, #20
 800b542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b544:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e5      	bne.n	800b524 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d119      	bne.n	800b594 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	330c      	adds	r3, #12
 800b566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	e853 3f00 	ldrex	r3, [r3]
 800b56e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	f023 0310 	bic.w	r3, r3, #16
 800b576:	647b      	str	r3, [r7, #68]	; 0x44
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b580:	61ba      	str	r2, [r7, #24]
 800b582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6979      	ldr	r1, [r7, #20]
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	613b      	str	r3, [r7, #16]
   return(result);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e5      	bne.n	800b560 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2220      	movs	r2, #32
 800b598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b5a2:	bf00      	nop
 800b5a4:	3754      	adds	r7, #84	; 0x54
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5d0:	bf00      	nop
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b21      	cmp	r3, #33	; 0x21
 800b5ea:	d13e      	bne.n	800b66a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f4:	d114      	bne.n	800b620 <UART_Transmit_IT+0x48>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d110      	bne.n	800b620 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b612:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	1c9a      	adds	r2, r3, #2
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	621a      	str	r2, [r3, #32]
 800b61e:	e008      	b.n	800b632 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	1c59      	adds	r1, r3, #1
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6211      	str	r1, [r2, #32]
 800b62a:	781a      	ldrb	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b636:	b29b      	uxth	r3, r3
 800b638:	3b01      	subs	r3, #1
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	4619      	mov	r1, r3
 800b640:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10f      	bne.n	800b666 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b654:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68da      	ldr	r2, [r3, #12]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b664:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	e000      	b.n	800b66c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b66a:	2302      	movs	r3, #2
  }
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68da      	ldr	r2, [r3, #12]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b68e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2220      	movs	r2, #32
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b08c      	sub	sp, #48	; 0x30
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b22      	cmp	r3, #34	; 0x22
 800b6bc:	f040 80ad 	bne.w	800b81a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6c8:	d117      	bne.n	800b6fa <UART_Receive_IT+0x50>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d113      	bne.n	800b6fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	1c9a      	adds	r2, r3, #2
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	629a      	str	r2, [r3, #40]	; 0x28
 800b6f8:	e026      	b.n	800b748 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70c:	d007      	beq.n	800b71e <UART_Receive_IT+0x74>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <UART_Receive_IT+0x82>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	b2da      	uxtb	r2, r3
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	701a      	strb	r2, [r3, #0]
 800b72a:	e008      	b.n	800b73e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	3b01      	subs	r3, #1
 800b750:	b29b      	uxth	r3, r3
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	4619      	mov	r1, r3
 800b756:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d15c      	bne.n	800b816 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68da      	ldr	r2, [r3, #12]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0220 	bic.w	r2, r2, #32
 800b76a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68da      	ldr	r2, [r3, #12]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b77a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	695a      	ldr	r2, [r3, #20]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f022 0201 	bic.w	r2, r2, #1
 800b78a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2220      	movs	r2, #32
 800b790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d136      	bne.n	800b80a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	330c      	adds	r3, #12
 800b7a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f023 0310 	bic.w	r3, r3, #16
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	330c      	adds	r3, #12
 800b7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c2:	623a      	str	r2, [r7, #32]
 800b7c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	69f9      	ldr	r1, [r7, #28]
 800b7c8:	6a3a      	ldr	r2, [r7, #32]
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e5      	bne.n	800b7a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b10      	cmp	r3, #16
 800b7e2:	d10a      	bne.n	800b7fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b802:	4611      	mov	r1, r2
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	4798      	blx	r3
 800b808:	e003      	b.n	800b812 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	e002      	b.n	800b81c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	e000      	b.n	800b81c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b81a:	2302      	movs	r3, #2
  }
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3730      	adds	r7, #48	; 0x30
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b828:	b0c0      	sub	sp, #256	; 0x100
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b840:	68d9      	ldr	r1, [r3, #12]
 800b842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	ea40 0301 	orr.w	r3, r0, r1
 800b84c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b852:	689a      	ldr	r2, [r3, #8]
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	431a      	orrs	r2, r3
 800b85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	431a      	orrs	r2, r3
 800b864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b87c:	f021 010c 	bic.w	r1, r1, #12
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b88a:	430b      	orrs	r3, r1
 800b88c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89e:	6999      	ldr	r1, [r3, #24]
 800b8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	ea40 0301 	orr.w	r3, r0, r1
 800b8aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	4b8f      	ldr	r3, [pc, #572]	; (800baf0 <UART_SetConfig+0x2cc>)
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d005      	beq.n	800b8c4 <UART_SetConfig+0xa0>
 800b8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b8d      	ldr	r3, [pc, #564]	; (800baf4 <UART_SetConfig+0x2d0>)
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d104      	bne.n	800b8ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8c4:	f7fc fe80 	bl	80085c8 <HAL_RCC_GetPCLK2Freq>
 800b8c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b8cc:	e003      	b.n	800b8d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8ce:	f7fc fe67 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800b8d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8e0:	f040 810c 	bne.w	800bafc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	1891      	adds	r1, r2, r2
 800b8fc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8fe:	415b      	adcs	r3, r3
 800b900:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b906:	4621      	mov	r1, r4
 800b908:	eb12 0801 	adds.w	r8, r2, r1
 800b90c:	4629      	mov	r1, r5
 800b90e:	eb43 0901 	adc.w	r9, r3, r1
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b91e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b926:	4690      	mov	r8, r2
 800b928:	4699      	mov	r9, r3
 800b92a:	4623      	mov	r3, r4
 800b92c:	eb18 0303 	adds.w	r3, r8, r3
 800b930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b934:	462b      	mov	r3, r5
 800b936:	eb49 0303 	adc.w	r3, r9, r3
 800b93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b94a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b94e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b952:	460b      	mov	r3, r1
 800b954:	18db      	adds	r3, r3, r3
 800b956:	653b      	str	r3, [r7, #80]	; 0x50
 800b958:	4613      	mov	r3, r2
 800b95a:	eb42 0303 	adc.w	r3, r2, r3
 800b95e:	657b      	str	r3, [r7, #84]	; 0x54
 800b960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b968:	f7f5 f996 	bl	8000c98 <__aeabi_uldivmod>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4b61      	ldr	r3, [pc, #388]	; (800baf8 <UART_SetConfig+0x2d4>)
 800b972:	fba3 2302 	umull	r2, r3, r3, r2
 800b976:	095b      	lsrs	r3, r3, #5
 800b978:	011c      	lsls	r4, r3, #4
 800b97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b97e:	2200      	movs	r2, #0
 800b980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b98c:	4642      	mov	r2, r8
 800b98e:	464b      	mov	r3, r9
 800b990:	1891      	adds	r1, r2, r2
 800b992:	64b9      	str	r1, [r7, #72]	; 0x48
 800b994:	415b      	adcs	r3, r3
 800b996:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b99c:	4641      	mov	r1, r8
 800b99e:	eb12 0a01 	adds.w	sl, r2, r1
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	eb43 0b01 	adc.w	fp, r3, r1
 800b9a8:	f04f 0200 	mov.w	r2, #0
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9bc:	4692      	mov	sl, r2
 800b9be:	469b      	mov	fp, r3
 800b9c0:	4643      	mov	r3, r8
 800b9c2:	eb1a 0303 	adds.w	r3, sl, r3
 800b9c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9ca:	464b      	mov	r3, r9
 800b9cc:	eb4b 0303 	adc.w	r3, fp, r3
 800b9d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b9e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	18db      	adds	r3, r3, r3
 800b9ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	eb42 0303 	adc.w	r3, r2, r3
 800b9f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9fe:	f7f5 f94b 	bl	8000c98 <__aeabi_uldivmod>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4611      	mov	r1, r2
 800ba08:	4b3b      	ldr	r3, [pc, #236]	; (800baf8 <UART_SetConfig+0x2d4>)
 800ba0a:	fba3 2301 	umull	r2, r3, r3, r1
 800ba0e:	095b      	lsrs	r3, r3, #5
 800ba10:	2264      	movs	r2, #100	; 0x64
 800ba12:	fb02 f303 	mul.w	r3, r2, r3
 800ba16:	1acb      	subs	r3, r1, r3
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ba1e:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <UART_SetConfig+0x2d4>)
 800ba20:	fba3 2302 	umull	r2, r3, r3, r2
 800ba24:	095b      	lsrs	r3, r3, #5
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba2c:	441c      	add	r4, r3
 800ba2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba40:	4642      	mov	r2, r8
 800ba42:	464b      	mov	r3, r9
 800ba44:	1891      	adds	r1, r2, r2
 800ba46:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba48:	415b      	adcs	r3, r3
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba50:	4641      	mov	r1, r8
 800ba52:	1851      	adds	r1, r2, r1
 800ba54:	6339      	str	r1, [r7, #48]	; 0x30
 800ba56:	4649      	mov	r1, r9
 800ba58:	414b      	adcs	r3, r1
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	f04f 0300 	mov.w	r3, #0
 800ba64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba68:	4659      	mov	r1, fp
 800ba6a:	00cb      	lsls	r3, r1, #3
 800ba6c:	4651      	mov	r1, sl
 800ba6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba72:	4651      	mov	r1, sl
 800ba74:	00ca      	lsls	r2, r1, #3
 800ba76:	4610      	mov	r0, r2
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	189b      	adds	r3, r3, r2
 800ba80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba84:	464b      	mov	r3, r9
 800ba86:	460a      	mov	r2, r1
 800ba88:	eb42 0303 	adc.w	r3, r2, r3
 800ba8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800baa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800baa4:	460b      	mov	r3, r1
 800baa6:	18db      	adds	r3, r3, r3
 800baa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800baaa:	4613      	mov	r3, r2
 800baac:	eb42 0303 	adc.w	r3, r2, r3
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800baba:	f7f5 f8ed 	bl	8000c98 <__aeabi_uldivmod>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <UART_SetConfig+0x2d4>)
 800bac4:	fba3 1302 	umull	r1, r3, r3, r2
 800bac8:	095b      	lsrs	r3, r3, #5
 800baca:	2164      	movs	r1, #100	; 0x64
 800bacc:	fb01 f303 	mul.w	r3, r1, r3
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	3332      	adds	r3, #50	; 0x32
 800bad6:	4a08      	ldr	r2, [pc, #32]	; (800baf8 <UART_SetConfig+0x2d4>)
 800bad8:	fba2 2303 	umull	r2, r3, r2, r3
 800badc:	095b      	lsrs	r3, r3, #5
 800bade:	f003 0207 	and.w	r2, r3, #7
 800bae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4422      	add	r2, r4
 800baea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800baec:	e105      	b.n	800bcfa <UART_SetConfig+0x4d6>
 800baee:	bf00      	nop
 800baf0:	40011000 	.word	0x40011000
 800baf4:	40011400 	.word	0x40011400
 800baf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bafc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb00:	2200      	movs	r2, #0
 800bb02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bb0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bb0e:	4642      	mov	r2, r8
 800bb10:	464b      	mov	r3, r9
 800bb12:	1891      	adds	r1, r2, r2
 800bb14:	6239      	str	r1, [r7, #32]
 800bb16:	415b      	adcs	r3, r3
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb1e:	4641      	mov	r1, r8
 800bb20:	1854      	adds	r4, r2, r1
 800bb22:	4649      	mov	r1, r9
 800bb24:	eb43 0501 	adc.w	r5, r3, r1
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	00eb      	lsls	r3, r5, #3
 800bb32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb36:	00e2      	lsls	r2, r4, #3
 800bb38:	4614      	mov	r4, r2
 800bb3a:	461d      	mov	r5, r3
 800bb3c:	4643      	mov	r3, r8
 800bb3e:	18e3      	adds	r3, r4, r3
 800bb40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb44:	464b      	mov	r3, r9
 800bb46:	eb45 0303 	adc.w	r3, r5, r3
 800bb4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb5e:	f04f 0200 	mov.w	r2, #0
 800bb62:	f04f 0300 	mov.w	r3, #0
 800bb66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	008b      	lsls	r3, r1, #2
 800bb6e:	4621      	mov	r1, r4
 800bb70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb74:	4621      	mov	r1, r4
 800bb76:	008a      	lsls	r2, r1, #2
 800bb78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb7c:	f7f5 f88c 	bl	8000c98 <__aeabi_uldivmod>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4b60      	ldr	r3, [pc, #384]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bb86:	fba3 2302 	umull	r2, r3, r3, r2
 800bb8a:	095b      	lsrs	r3, r3, #5
 800bb8c:	011c      	lsls	r4, r3, #4
 800bb8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	1891      	adds	r1, r2, r2
 800bba6:	61b9      	str	r1, [r7, #24]
 800bba8:	415b      	adcs	r3, r3
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbb0:	4641      	mov	r1, r8
 800bbb2:	1851      	adds	r1, r2, r1
 800bbb4:	6139      	str	r1, [r7, #16]
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	414b      	adcs	r3, r1
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	f04f 0300 	mov.w	r3, #0
 800bbc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bbc8:	4659      	mov	r1, fp
 800bbca:	00cb      	lsls	r3, r1, #3
 800bbcc:	4651      	mov	r1, sl
 800bbce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbd2:	4651      	mov	r1, sl
 800bbd4:	00ca      	lsls	r2, r1, #3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4603      	mov	r3, r0
 800bbdc:	4642      	mov	r2, r8
 800bbde:	189b      	adds	r3, r3, r2
 800bbe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	460a      	mov	r2, r1
 800bbe8:	eb42 0303 	adc.w	r3, r2, r3
 800bbec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	f04f 0300 	mov.w	r3, #0
 800bc04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bc08:	4649      	mov	r1, r9
 800bc0a:	008b      	lsls	r3, r1, #2
 800bc0c:	4641      	mov	r1, r8
 800bc0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc12:	4641      	mov	r1, r8
 800bc14:	008a      	lsls	r2, r1, #2
 800bc16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bc1a:	f7f5 f83d 	bl	8000c98 <__aeabi_uldivmod>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4b39      	ldr	r3, [pc, #228]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bc24:	fba3 1302 	umull	r1, r3, r3, r2
 800bc28:	095b      	lsrs	r3, r3, #5
 800bc2a:	2164      	movs	r1, #100	; 0x64
 800bc2c:	fb01 f303 	mul.w	r3, r1, r3
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	3332      	adds	r3, #50	; 0x32
 800bc36:	4a34      	ldr	r2, [pc, #208]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bc38:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3c:	095b      	lsrs	r3, r3, #5
 800bc3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc42:	441c      	add	r4, r3
 800bc44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc48:	2200      	movs	r2, #0
 800bc4a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc4c:	677a      	str	r2, [r7, #116]	; 0x74
 800bc4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc52:	4642      	mov	r2, r8
 800bc54:	464b      	mov	r3, r9
 800bc56:	1891      	adds	r1, r2, r2
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	415b      	adcs	r3, r3
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc62:	4641      	mov	r1, r8
 800bc64:	1851      	adds	r1, r2, r1
 800bc66:	6039      	str	r1, [r7, #0]
 800bc68:	4649      	mov	r1, r9
 800bc6a:	414b      	adcs	r3, r1
 800bc6c:	607b      	str	r3, [r7, #4]
 800bc6e:	f04f 0200 	mov.w	r2, #0
 800bc72:	f04f 0300 	mov.w	r3, #0
 800bc76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc7a:	4659      	mov	r1, fp
 800bc7c:	00cb      	lsls	r3, r1, #3
 800bc7e:	4651      	mov	r1, sl
 800bc80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc84:	4651      	mov	r1, sl
 800bc86:	00ca      	lsls	r2, r1, #3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4642      	mov	r2, r8
 800bc90:	189b      	adds	r3, r3, r2
 800bc92:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc94:	464b      	mov	r3, r9
 800bc96:	460a      	mov	r2, r1
 800bc98:	eb42 0303 	adc.w	r3, r2, r3
 800bc9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	663b      	str	r3, [r7, #96]	; 0x60
 800bca8:	667a      	str	r2, [r7, #100]	; 0x64
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	008b      	lsls	r3, r1, #2
 800bcba:	4641      	mov	r1, r8
 800bcbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcc0:	4641      	mov	r1, r8
 800bcc2:	008a      	lsls	r2, r1, #2
 800bcc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bcc8:	f7f4 ffe6 	bl	8000c98 <__aeabi_uldivmod>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4b0d      	ldr	r3, [pc, #52]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bcd2:	fba3 1302 	umull	r1, r3, r3, r2
 800bcd6:	095b      	lsrs	r3, r3, #5
 800bcd8:	2164      	movs	r1, #100	; 0x64
 800bcda:	fb01 f303 	mul.w	r3, r1, r3
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	3332      	adds	r3, #50	; 0x32
 800bce4:	4a08      	ldr	r2, [pc, #32]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bce6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	f003 020f 	and.w	r2, r3, #15
 800bcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4422      	add	r2, r4
 800bcf8:	609a      	str	r2, [r3, #8]
}
 800bcfa:	bf00      	nop
 800bcfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bd00:	46bd      	mov	sp, r7
 800bd02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd06:	bf00      	nop
 800bd08:	51eb851f 	.word	0x51eb851f

0800bd0c <__errno>:
 800bd0c:	4b01      	ldr	r3, [pc, #4]	; (800bd14 <__errno+0x8>)
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	2000023c 	.word	0x2000023c

0800bd18 <__libc_init_array>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	4d0d      	ldr	r5, [pc, #52]	; (800bd50 <__libc_init_array+0x38>)
 800bd1c:	4c0d      	ldr	r4, [pc, #52]	; (800bd54 <__libc_init_array+0x3c>)
 800bd1e:	1b64      	subs	r4, r4, r5
 800bd20:	10a4      	asrs	r4, r4, #2
 800bd22:	2600      	movs	r6, #0
 800bd24:	42a6      	cmp	r6, r4
 800bd26:	d109      	bne.n	800bd3c <__libc_init_array+0x24>
 800bd28:	4d0b      	ldr	r5, [pc, #44]	; (800bd58 <__libc_init_array+0x40>)
 800bd2a:	4c0c      	ldr	r4, [pc, #48]	; (800bd5c <__libc_init_array+0x44>)
 800bd2c:	f006 ffee 	bl	8012d0c <_init>
 800bd30:	1b64      	subs	r4, r4, r5
 800bd32:	10a4      	asrs	r4, r4, #2
 800bd34:	2600      	movs	r6, #0
 800bd36:	42a6      	cmp	r6, r4
 800bd38:	d105      	bne.n	800bd46 <__libc_init_array+0x2e>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd40:	4798      	blx	r3
 800bd42:	3601      	adds	r6, #1
 800bd44:	e7ee      	b.n	800bd24 <__libc_init_array+0xc>
 800bd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4a:	4798      	blx	r3
 800bd4c:	3601      	adds	r6, #1
 800bd4e:	e7f2      	b.n	800bd36 <__libc_init_array+0x1e>
 800bd50:	08013808 	.word	0x08013808
 800bd54:	08013808 	.word	0x08013808
 800bd58:	08013808 	.word	0x08013808
 800bd5c:	0801380c 	.word	0x0801380c

0800bd60 <memcpy>:
 800bd60:	440a      	add	r2, r1
 800bd62:	4291      	cmp	r1, r2
 800bd64:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd68:	d100      	bne.n	800bd6c <memcpy+0xc>
 800bd6a:	4770      	bx	lr
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd76:	4291      	cmp	r1, r2
 800bd78:	d1f9      	bne.n	800bd6e <memcpy+0xe>
 800bd7a:	bd10      	pop	{r4, pc}

0800bd7c <memset>:
 800bd7c:	4402      	add	r2, r0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d100      	bne.n	800bd86 <memset+0xa>
 800bd84:	4770      	bx	lr
 800bd86:	f803 1b01 	strb.w	r1, [r3], #1
 800bd8a:	e7f9      	b.n	800bd80 <memset+0x4>

0800bd8c <__cvt>:
 800bd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd90:	ec55 4b10 	vmov	r4, r5, d0
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	460e      	mov	r6, r1
 800bd98:	4619      	mov	r1, r3
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	bfbb      	ittet	lt
 800bd9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bda2:	461d      	movlt	r5, r3
 800bda4:	2300      	movge	r3, #0
 800bda6:	232d      	movlt	r3, #45	; 0x2d
 800bda8:	700b      	strb	r3, [r1, #0]
 800bdaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bdb0:	4691      	mov	r9, r2
 800bdb2:	f023 0820 	bic.w	r8, r3, #32
 800bdb6:	bfbc      	itt	lt
 800bdb8:	4622      	movlt	r2, r4
 800bdba:	4614      	movlt	r4, r2
 800bdbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdc0:	d005      	beq.n	800bdce <__cvt+0x42>
 800bdc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdc6:	d100      	bne.n	800bdca <__cvt+0x3e>
 800bdc8:	3601      	adds	r6, #1
 800bdca:	2102      	movs	r1, #2
 800bdcc:	e000      	b.n	800bdd0 <__cvt+0x44>
 800bdce:	2103      	movs	r1, #3
 800bdd0:	ab03      	add	r3, sp, #12
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	ab02      	add	r3, sp, #8
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	ec45 4b10 	vmov	d0, r4, r5
 800bddc:	4653      	mov	r3, sl
 800bdde:	4632      	mov	r2, r6
 800bde0:	f001 fdae 	bl	800d940 <_dtoa_r>
 800bde4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bde8:	4607      	mov	r7, r0
 800bdea:	d102      	bne.n	800bdf2 <__cvt+0x66>
 800bdec:	f019 0f01 	tst.w	r9, #1
 800bdf0:	d022      	beq.n	800be38 <__cvt+0xac>
 800bdf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdf6:	eb07 0906 	add.w	r9, r7, r6
 800bdfa:	d110      	bne.n	800be1e <__cvt+0x92>
 800bdfc:	783b      	ldrb	r3, [r7, #0]
 800bdfe:	2b30      	cmp	r3, #48	; 0x30
 800be00:	d10a      	bne.n	800be18 <__cvt+0x8c>
 800be02:	2200      	movs	r2, #0
 800be04:	2300      	movs	r3, #0
 800be06:	4620      	mov	r0, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	f7f4 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 800be0e:	b918      	cbnz	r0, 800be18 <__cvt+0x8c>
 800be10:	f1c6 0601 	rsb	r6, r6, #1
 800be14:	f8ca 6000 	str.w	r6, [sl]
 800be18:	f8da 3000 	ldr.w	r3, [sl]
 800be1c:	4499      	add	r9, r3
 800be1e:	2200      	movs	r2, #0
 800be20:	2300      	movs	r3, #0
 800be22:	4620      	mov	r0, r4
 800be24:	4629      	mov	r1, r5
 800be26:	f7f4 fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 800be2a:	b108      	cbz	r0, 800be30 <__cvt+0xa4>
 800be2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800be30:	2230      	movs	r2, #48	; 0x30
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	454b      	cmp	r3, r9
 800be36:	d307      	bcc.n	800be48 <__cvt+0xbc>
 800be38:	9b03      	ldr	r3, [sp, #12]
 800be3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be3c:	1bdb      	subs	r3, r3, r7
 800be3e:	4638      	mov	r0, r7
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	b004      	add	sp, #16
 800be44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be48:	1c59      	adds	r1, r3, #1
 800be4a:	9103      	str	r1, [sp, #12]
 800be4c:	701a      	strb	r2, [r3, #0]
 800be4e:	e7f0      	b.n	800be32 <__cvt+0xa6>

0800be50 <__exponent>:
 800be50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be52:	4603      	mov	r3, r0
 800be54:	2900      	cmp	r1, #0
 800be56:	bfb8      	it	lt
 800be58:	4249      	neglt	r1, r1
 800be5a:	f803 2b02 	strb.w	r2, [r3], #2
 800be5e:	bfb4      	ite	lt
 800be60:	222d      	movlt	r2, #45	; 0x2d
 800be62:	222b      	movge	r2, #43	; 0x2b
 800be64:	2909      	cmp	r1, #9
 800be66:	7042      	strb	r2, [r0, #1]
 800be68:	dd2a      	ble.n	800bec0 <__exponent+0x70>
 800be6a:	f10d 0407 	add.w	r4, sp, #7
 800be6e:	46a4      	mov	ip, r4
 800be70:	270a      	movs	r7, #10
 800be72:	46a6      	mov	lr, r4
 800be74:	460a      	mov	r2, r1
 800be76:	fb91 f6f7 	sdiv	r6, r1, r7
 800be7a:	fb07 1516 	mls	r5, r7, r6, r1
 800be7e:	3530      	adds	r5, #48	; 0x30
 800be80:	2a63      	cmp	r2, #99	; 0x63
 800be82:	f104 34ff 	add.w	r4, r4, #4294967295
 800be86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be8a:	4631      	mov	r1, r6
 800be8c:	dcf1      	bgt.n	800be72 <__exponent+0x22>
 800be8e:	3130      	adds	r1, #48	; 0x30
 800be90:	f1ae 0502 	sub.w	r5, lr, #2
 800be94:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be98:	1c44      	adds	r4, r0, #1
 800be9a:	4629      	mov	r1, r5
 800be9c:	4561      	cmp	r1, ip
 800be9e:	d30a      	bcc.n	800beb6 <__exponent+0x66>
 800bea0:	f10d 0209 	add.w	r2, sp, #9
 800bea4:	eba2 020e 	sub.w	r2, r2, lr
 800bea8:	4565      	cmp	r5, ip
 800beaa:	bf88      	it	hi
 800beac:	2200      	movhi	r2, #0
 800beae:	4413      	add	r3, r2
 800beb0:	1a18      	subs	r0, r3, r0
 800beb2:	b003      	add	sp, #12
 800beb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bebe:	e7ed      	b.n	800be9c <__exponent+0x4c>
 800bec0:	2330      	movs	r3, #48	; 0x30
 800bec2:	3130      	adds	r1, #48	; 0x30
 800bec4:	7083      	strb	r3, [r0, #2]
 800bec6:	70c1      	strb	r1, [r0, #3]
 800bec8:	1d03      	adds	r3, r0, #4
 800beca:	e7f1      	b.n	800beb0 <__exponent+0x60>

0800becc <_printf_float>:
 800becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	ed2d 8b02 	vpush	{d8}
 800bed4:	b08d      	sub	sp, #52	; 0x34
 800bed6:	460c      	mov	r4, r1
 800bed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bedc:	4616      	mov	r6, r2
 800bede:	461f      	mov	r7, r3
 800bee0:	4605      	mov	r5, r0
 800bee2:	f002 fe8b 	bl	800ebfc <_localeconv_r>
 800bee6:	f8d0 a000 	ldr.w	sl, [r0]
 800beea:	4650      	mov	r0, sl
 800beec:	f7f4 f978 	bl	80001e0 <strlen>
 800bef0:	2300      	movs	r3, #0
 800bef2:	930a      	str	r3, [sp, #40]	; 0x28
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	9305      	str	r3, [sp, #20]
 800bef8:	f8d8 3000 	ldr.w	r3, [r8]
 800befc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf00:	3307      	adds	r3, #7
 800bf02:	f023 0307 	bic.w	r3, r3, #7
 800bf06:	f103 0208 	add.w	r2, r3, #8
 800bf0a:	f8c8 2000 	str.w	r2, [r8]
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf1e:	9307      	str	r3, [sp, #28]
 800bf20:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf24:	ee08 0a10 	vmov	s16, r0
 800bf28:	4b9f      	ldr	r3, [pc, #636]	; (800c1a8 <_printf_float+0x2dc>)
 800bf2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf32:	f7f4 fe03 	bl	8000b3c <__aeabi_dcmpun>
 800bf36:	bb88      	cbnz	r0, 800bf9c <_printf_float+0xd0>
 800bf38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf3c:	4b9a      	ldr	r3, [pc, #616]	; (800c1a8 <_printf_float+0x2dc>)
 800bf3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf42:	f7f4 fddd 	bl	8000b00 <__aeabi_dcmple>
 800bf46:	bb48      	cbnz	r0, 800bf9c <_printf_float+0xd0>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	4640      	mov	r0, r8
 800bf4e:	4649      	mov	r1, r9
 800bf50:	f7f4 fdcc 	bl	8000aec <__aeabi_dcmplt>
 800bf54:	b110      	cbz	r0, 800bf5c <_printf_float+0x90>
 800bf56:	232d      	movs	r3, #45	; 0x2d
 800bf58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf5c:	4b93      	ldr	r3, [pc, #588]	; (800c1ac <_printf_float+0x2e0>)
 800bf5e:	4894      	ldr	r0, [pc, #592]	; (800c1b0 <_printf_float+0x2e4>)
 800bf60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf64:	bf94      	ite	ls
 800bf66:	4698      	movls	r8, r3
 800bf68:	4680      	movhi	r8, r0
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	9b05      	ldr	r3, [sp, #20]
 800bf70:	f023 0204 	bic.w	r2, r3, #4
 800bf74:	6022      	str	r2, [r4, #0]
 800bf76:	f04f 0900 	mov.w	r9, #0
 800bf7a:	9700      	str	r7, [sp, #0]
 800bf7c:	4633      	mov	r3, r6
 800bf7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf80:	4621      	mov	r1, r4
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 f9d8 	bl	800c338 <_printf_common>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	f040 8090 	bne.w	800c0ae <_printf_float+0x1e2>
 800bf8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf92:	b00d      	add	sp, #52	; 0x34
 800bf94:	ecbd 8b02 	vpop	{d8}
 800bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9c:	4642      	mov	r2, r8
 800bf9e:	464b      	mov	r3, r9
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	f7f4 fdca 	bl	8000b3c <__aeabi_dcmpun>
 800bfa8:	b140      	cbz	r0, 800bfbc <_printf_float+0xf0>
 800bfaa:	464b      	mov	r3, r9
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	bfbc      	itt	lt
 800bfb0:	232d      	movlt	r3, #45	; 0x2d
 800bfb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfb6:	487f      	ldr	r0, [pc, #508]	; (800c1b4 <_printf_float+0x2e8>)
 800bfb8:	4b7f      	ldr	r3, [pc, #508]	; (800c1b8 <_printf_float+0x2ec>)
 800bfba:	e7d1      	b.n	800bf60 <_printf_float+0x94>
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfc2:	9206      	str	r2, [sp, #24]
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	d13f      	bne.n	800c048 <_printf_float+0x17c>
 800bfc8:	2306      	movs	r3, #6
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	9b05      	ldr	r3, [sp, #20]
 800bfce:	6861      	ldr	r1, [r4, #4]
 800bfd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9303      	str	r3, [sp, #12]
 800bfd8:	ab0a      	add	r3, sp, #40	; 0x28
 800bfda:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfde:	ab09      	add	r3, sp, #36	; 0x24
 800bfe0:	ec49 8b10 	vmov	d0, r8, r9
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	6022      	str	r2, [r4, #0]
 800bfe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bfec:	4628      	mov	r0, r5
 800bfee:	f7ff fecd 	bl	800bd8c <__cvt>
 800bff2:	9b06      	ldr	r3, [sp, #24]
 800bff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bff6:	2b47      	cmp	r3, #71	; 0x47
 800bff8:	4680      	mov	r8, r0
 800bffa:	d108      	bne.n	800c00e <_printf_float+0x142>
 800bffc:	1cc8      	adds	r0, r1, #3
 800bffe:	db02      	blt.n	800c006 <_printf_float+0x13a>
 800c000:	6863      	ldr	r3, [r4, #4]
 800c002:	4299      	cmp	r1, r3
 800c004:	dd41      	ble.n	800c08a <_printf_float+0x1be>
 800c006:	f1ab 0b02 	sub.w	fp, fp, #2
 800c00a:	fa5f fb8b 	uxtb.w	fp, fp
 800c00e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c012:	d820      	bhi.n	800c056 <_printf_float+0x18a>
 800c014:	3901      	subs	r1, #1
 800c016:	465a      	mov	r2, fp
 800c018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c01c:	9109      	str	r1, [sp, #36]	; 0x24
 800c01e:	f7ff ff17 	bl	800be50 <__exponent>
 800c022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c024:	1813      	adds	r3, r2, r0
 800c026:	2a01      	cmp	r2, #1
 800c028:	4681      	mov	r9, r0
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	dc02      	bgt.n	800c034 <_printf_float+0x168>
 800c02e:	6822      	ldr	r2, [r4, #0]
 800c030:	07d2      	lsls	r2, r2, #31
 800c032:	d501      	bpl.n	800c038 <_printf_float+0x16c>
 800c034:	3301      	adds	r3, #1
 800c036:	6123      	str	r3, [r4, #16]
 800c038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d09c      	beq.n	800bf7a <_printf_float+0xae>
 800c040:	232d      	movs	r3, #45	; 0x2d
 800c042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c046:	e798      	b.n	800bf7a <_printf_float+0xae>
 800c048:	9a06      	ldr	r2, [sp, #24]
 800c04a:	2a47      	cmp	r2, #71	; 0x47
 800c04c:	d1be      	bne.n	800bfcc <_printf_float+0x100>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1bc      	bne.n	800bfcc <_printf_float+0x100>
 800c052:	2301      	movs	r3, #1
 800c054:	e7b9      	b.n	800bfca <_printf_float+0xfe>
 800c056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c05a:	d118      	bne.n	800c08e <_printf_float+0x1c2>
 800c05c:	2900      	cmp	r1, #0
 800c05e:	6863      	ldr	r3, [r4, #4]
 800c060:	dd0b      	ble.n	800c07a <_printf_float+0x1ae>
 800c062:	6121      	str	r1, [r4, #16]
 800c064:	b913      	cbnz	r3, 800c06c <_printf_float+0x1a0>
 800c066:	6822      	ldr	r2, [r4, #0]
 800c068:	07d0      	lsls	r0, r2, #31
 800c06a:	d502      	bpl.n	800c072 <_printf_float+0x1a6>
 800c06c:	3301      	adds	r3, #1
 800c06e:	440b      	add	r3, r1
 800c070:	6123      	str	r3, [r4, #16]
 800c072:	65a1      	str	r1, [r4, #88]	; 0x58
 800c074:	f04f 0900 	mov.w	r9, #0
 800c078:	e7de      	b.n	800c038 <_printf_float+0x16c>
 800c07a:	b913      	cbnz	r3, 800c082 <_printf_float+0x1b6>
 800c07c:	6822      	ldr	r2, [r4, #0]
 800c07e:	07d2      	lsls	r2, r2, #31
 800c080:	d501      	bpl.n	800c086 <_printf_float+0x1ba>
 800c082:	3302      	adds	r3, #2
 800c084:	e7f4      	b.n	800c070 <_printf_float+0x1a4>
 800c086:	2301      	movs	r3, #1
 800c088:	e7f2      	b.n	800c070 <_printf_float+0x1a4>
 800c08a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c090:	4299      	cmp	r1, r3
 800c092:	db05      	blt.n	800c0a0 <_printf_float+0x1d4>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	6121      	str	r1, [r4, #16]
 800c098:	07d8      	lsls	r0, r3, #31
 800c09a:	d5ea      	bpl.n	800c072 <_printf_float+0x1a6>
 800c09c:	1c4b      	adds	r3, r1, #1
 800c09e:	e7e7      	b.n	800c070 <_printf_float+0x1a4>
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	bfd4      	ite	le
 800c0a4:	f1c1 0202 	rsble	r2, r1, #2
 800c0a8:	2201      	movgt	r2, #1
 800c0aa:	4413      	add	r3, r2
 800c0ac:	e7e0      	b.n	800c070 <_printf_float+0x1a4>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	055a      	lsls	r2, r3, #21
 800c0b2:	d407      	bmi.n	800c0c4 <_printf_float+0x1f8>
 800c0b4:	6923      	ldr	r3, [r4, #16]
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	47b8      	blx	r7
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d12c      	bne.n	800c11c <_printf_float+0x250>
 800c0c2:	e764      	b.n	800bf8e <_printf_float+0xc2>
 800c0c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0c8:	f240 80e0 	bls.w	800c28c <_printf_float+0x3c0>
 800c0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f7f4 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d034      	beq.n	800c146 <_printf_float+0x27a>
 800c0dc:	4a37      	ldr	r2, [pc, #220]	; (800c1bc <_printf_float+0x2f0>)
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	47b8      	blx	r7
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	f43f af51 	beq.w	800bf8e <_printf_float+0xc2>
 800c0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	db02      	blt.n	800c0fa <_printf_float+0x22e>
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	07d8      	lsls	r0, r3, #31
 800c0f8:	d510      	bpl.n	800c11c <_printf_float+0x250>
 800c0fa:	ee18 3a10 	vmov	r3, s16
 800c0fe:	4652      	mov	r2, sl
 800c100:	4631      	mov	r1, r6
 800c102:	4628      	mov	r0, r5
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	f43f af41 	beq.w	800bf8e <_printf_float+0xc2>
 800c10c:	f04f 0800 	mov.w	r8, #0
 800c110:	f104 091a 	add.w	r9, r4, #26
 800c114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c116:	3b01      	subs	r3, #1
 800c118:	4543      	cmp	r3, r8
 800c11a:	dc09      	bgt.n	800c130 <_printf_float+0x264>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	079b      	lsls	r3, r3, #30
 800c120:	f100 8105 	bmi.w	800c32e <_printf_float+0x462>
 800c124:	68e0      	ldr	r0, [r4, #12]
 800c126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c128:	4298      	cmp	r0, r3
 800c12a:	bfb8      	it	lt
 800c12c:	4618      	movlt	r0, r3
 800c12e:	e730      	b.n	800bf92 <_printf_float+0xc6>
 800c130:	2301      	movs	r3, #1
 800c132:	464a      	mov	r2, r9
 800c134:	4631      	mov	r1, r6
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	f43f af27 	beq.w	800bf8e <_printf_float+0xc2>
 800c140:	f108 0801 	add.w	r8, r8, #1
 800c144:	e7e6      	b.n	800c114 <_printf_float+0x248>
 800c146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c148:	2b00      	cmp	r3, #0
 800c14a:	dc39      	bgt.n	800c1c0 <_printf_float+0x2f4>
 800c14c:	4a1b      	ldr	r2, [pc, #108]	; (800c1bc <_printf_float+0x2f0>)
 800c14e:	2301      	movs	r3, #1
 800c150:	4631      	mov	r1, r6
 800c152:	4628      	mov	r0, r5
 800c154:	47b8      	blx	r7
 800c156:	3001      	adds	r0, #1
 800c158:	f43f af19 	beq.w	800bf8e <_printf_float+0xc2>
 800c15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c160:	4313      	orrs	r3, r2
 800c162:	d102      	bne.n	800c16a <_printf_float+0x29e>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	07d9      	lsls	r1, r3, #31
 800c168:	d5d8      	bpl.n	800c11c <_printf_float+0x250>
 800c16a:	ee18 3a10 	vmov	r3, s16
 800c16e:	4652      	mov	r2, sl
 800c170:	4631      	mov	r1, r6
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	f43f af09 	beq.w	800bf8e <_printf_float+0xc2>
 800c17c:	f04f 0900 	mov.w	r9, #0
 800c180:	f104 0a1a 	add.w	sl, r4, #26
 800c184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c186:	425b      	negs	r3, r3
 800c188:	454b      	cmp	r3, r9
 800c18a:	dc01      	bgt.n	800c190 <_printf_float+0x2c4>
 800c18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c18e:	e792      	b.n	800c0b6 <_printf_float+0x1ea>
 800c190:	2301      	movs	r3, #1
 800c192:	4652      	mov	r2, sl
 800c194:	4631      	mov	r1, r6
 800c196:	4628      	mov	r0, r5
 800c198:	47b8      	blx	r7
 800c19a:	3001      	adds	r0, #1
 800c19c:	f43f aef7 	beq.w	800bf8e <_printf_float+0xc2>
 800c1a0:	f109 0901 	add.w	r9, r9, #1
 800c1a4:	e7ee      	b.n	800c184 <_printf_float+0x2b8>
 800c1a6:	bf00      	nop
 800c1a8:	7fefffff 	.word	0x7fefffff
 800c1ac:	08012d68 	.word	0x08012d68
 800c1b0:	08012d6c 	.word	0x08012d6c
 800c1b4:	08012d74 	.word	0x08012d74
 800c1b8:	08012d70 	.word	0x08012d70
 800c1bc:	08012d78 	.word	0x08012d78
 800c1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	bfa8      	it	ge
 800c1c8:	461a      	movge	r2, r3
 800c1ca:	2a00      	cmp	r2, #0
 800c1cc:	4691      	mov	r9, r2
 800c1ce:	dc37      	bgt.n	800c240 <_printf_float+0x374>
 800c1d0:	f04f 0b00 	mov.w	fp, #0
 800c1d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1d8:	f104 021a 	add.w	r2, r4, #26
 800c1dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1de:	9305      	str	r3, [sp, #20]
 800c1e0:	eba3 0309 	sub.w	r3, r3, r9
 800c1e4:	455b      	cmp	r3, fp
 800c1e6:	dc33      	bgt.n	800c250 <_printf_float+0x384>
 800c1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	db3b      	blt.n	800c268 <_printf_float+0x39c>
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	07da      	lsls	r2, r3, #31
 800c1f4:	d438      	bmi.n	800c268 <_printf_float+0x39c>
 800c1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f8:	9a05      	ldr	r2, [sp, #20]
 800c1fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1fc:	1a9a      	subs	r2, r3, r2
 800c1fe:	eba3 0901 	sub.w	r9, r3, r1
 800c202:	4591      	cmp	r9, r2
 800c204:	bfa8      	it	ge
 800c206:	4691      	movge	r9, r2
 800c208:	f1b9 0f00 	cmp.w	r9, #0
 800c20c:	dc35      	bgt.n	800c27a <_printf_float+0x3ae>
 800c20e:	f04f 0800 	mov.w	r8, #0
 800c212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c216:	f104 0a1a 	add.w	sl, r4, #26
 800c21a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c21e:	1a9b      	subs	r3, r3, r2
 800c220:	eba3 0309 	sub.w	r3, r3, r9
 800c224:	4543      	cmp	r3, r8
 800c226:	f77f af79 	ble.w	800c11c <_printf_float+0x250>
 800c22a:	2301      	movs	r3, #1
 800c22c:	4652      	mov	r2, sl
 800c22e:	4631      	mov	r1, r6
 800c230:	4628      	mov	r0, r5
 800c232:	47b8      	blx	r7
 800c234:	3001      	adds	r0, #1
 800c236:	f43f aeaa 	beq.w	800bf8e <_printf_float+0xc2>
 800c23a:	f108 0801 	add.w	r8, r8, #1
 800c23e:	e7ec      	b.n	800c21a <_printf_float+0x34e>
 800c240:	4613      	mov	r3, r2
 800c242:	4631      	mov	r1, r6
 800c244:	4642      	mov	r2, r8
 800c246:	4628      	mov	r0, r5
 800c248:	47b8      	blx	r7
 800c24a:	3001      	adds	r0, #1
 800c24c:	d1c0      	bne.n	800c1d0 <_printf_float+0x304>
 800c24e:	e69e      	b.n	800bf8e <_printf_float+0xc2>
 800c250:	2301      	movs	r3, #1
 800c252:	4631      	mov	r1, r6
 800c254:	4628      	mov	r0, r5
 800c256:	9205      	str	r2, [sp, #20]
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	f43f ae97 	beq.w	800bf8e <_printf_float+0xc2>
 800c260:	9a05      	ldr	r2, [sp, #20]
 800c262:	f10b 0b01 	add.w	fp, fp, #1
 800c266:	e7b9      	b.n	800c1dc <_printf_float+0x310>
 800c268:	ee18 3a10 	vmov	r3, s16
 800c26c:	4652      	mov	r2, sl
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	d1be      	bne.n	800c1f6 <_printf_float+0x32a>
 800c278:	e689      	b.n	800bf8e <_printf_float+0xc2>
 800c27a:	9a05      	ldr	r2, [sp, #20]
 800c27c:	464b      	mov	r3, r9
 800c27e:	4442      	add	r2, r8
 800c280:	4631      	mov	r1, r6
 800c282:	4628      	mov	r0, r5
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	d1c1      	bne.n	800c20e <_printf_float+0x342>
 800c28a:	e680      	b.n	800bf8e <_printf_float+0xc2>
 800c28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c28e:	2a01      	cmp	r2, #1
 800c290:	dc01      	bgt.n	800c296 <_printf_float+0x3ca>
 800c292:	07db      	lsls	r3, r3, #31
 800c294:	d538      	bpl.n	800c308 <_printf_float+0x43c>
 800c296:	2301      	movs	r3, #1
 800c298:	4642      	mov	r2, r8
 800c29a:	4631      	mov	r1, r6
 800c29c:	4628      	mov	r0, r5
 800c29e:	47b8      	blx	r7
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	f43f ae74 	beq.w	800bf8e <_printf_float+0xc2>
 800c2a6:	ee18 3a10 	vmov	r3, s16
 800c2aa:	4652      	mov	r2, sl
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	f43f ae6b 	beq.w	800bf8e <_printf_float+0xc2>
 800c2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2bc:	2200      	movs	r2, #0
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f7f4 fc0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2c4:	b9d8      	cbnz	r0, 800c2fe <_printf_float+0x432>
 800c2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c8:	f108 0201 	add.w	r2, r8, #1
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b8      	blx	r7
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d10e      	bne.n	800c2f6 <_printf_float+0x42a>
 800c2d8:	e659      	b.n	800bf8e <_printf_float+0xc2>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4652      	mov	r2, sl
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	f43f ae52 	beq.w	800bf8e <_printf_float+0xc2>
 800c2ea:	f108 0801 	add.w	r8, r8, #1
 800c2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	4543      	cmp	r3, r8
 800c2f4:	dcf1      	bgt.n	800c2da <_printf_float+0x40e>
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2fc:	e6dc      	b.n	800c0b8 <_printf_float+0x1ec>
 800c2fe:	f04f 0800 	mov.w	r8, #0
 800c302:	f104 0a1a 	add.w	sl, r4, #26
 800c306:	e7f2      	b.n	800c2ee <_printf_float+0x422>
 800c308:	2301      	movs	r3, #1
 800c30a:	4642      	mov	r2, r8
 800c30c:	e7df      	b.n	800c2ce <_printf_float+0x402>
 800c30e:	2301      	movs	r3, #1
 800c310:	464a      	mov	r2, r9
 800c312:	4631      	mov	r1, r6
 800c314:	4628      	mov	r0, r5
 800c316:	47b8      	blx	r7
 800c318:	3001      	adds	r0, #1
 800c31a:	f43f ae38 	beq.w	800bf8e <_printf_float+0xc2>
 800c31e:	f108 0801 	add.w	r8, r8, #1
 800c322:	68e3      	ldr	r3, [r4, #12]
 800c324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c326:	1a5b      	subs	r3, r3, r1
 800c328:	4543      	cmp	r3, r8
 800c32a:	dcf0      	bgt.n	800c30e <_printf_float+0x442>
 800c32c:	e6fa      	b.n	800c124 <_printf_float+0x258>
 800c32e:	f04f 0800 	mov.w	r8, #0
 800c332:	f104 0919 	add.w	r9, r4, #25
 800c336:	e7f4      	b.n	800c322 <_printf_float+0x456>

0800c338 <_printf_common>:
 800c338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c33c:	4616      	mov	r6, r2
 800c33e:	4699      	mov	r9, r3
 800c340:	688a      	ldr	r2, [r1, #8]
 800c342:	690b      	ldr	r3, [r1, #16]
 800c344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c348:	4293      	cmp	r3, r2
 800c34a:	bfb8      	it	lt
 800c34c:	4613      	movlt	r3, r2
 800c34e:	6033      	str	r3, [r6, #0]
 800c350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c354:	4607      	mov	r7, r0
 800c356:	460c      	mov	r4, r1
 800c358:	b10a      	cbz	r2, 800c35e <_printf_common+0x26>
 800c35a:	3301      	adds	r3, #1
 800c35c:	6033      	str	r3, [r6, #0]
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	0699      	lsls	r1, r3, #26
 800c362:	bf42      	ittt	mi
 800c364:	6833      	ldrmi	r3, [r6, #0]
 800c366:	3302      	addmi	r3, #2
 800c368:	6033      	strmi	r3, [r6, #0]
 800c36a:	6825      	ldr	r5, [r4, #0]
 800c36c:	f015 0506 	ands.w	r5, r5, #6
 800c370:	d106      	bne.n	800c380 <_printf_common+0x48>
 800c372:	f104 0a19 	add.w	sl, r4, #25
 800c376:	68e3      	ldr	r3, [r4, #12]
 800c378:	6832      	ldr	r2, [r6, #0]
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	42ab      	cmp	r3, r5
 800c37e:	dc26      	bgt.n	800c3ce <_printf_common+0x96>
 800c380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c384:	1e13      	subs	r3, r2, #0
 800c386:	6822      	ldr	r2, [r4, #0]
 800c388:	bf18      	it	ne
 800c38a:	2301      	movne	r3, #1
 800c38c:	0692      	lsls	r2, r2, #26
 800c38e:	d42b      	bmi.n	800c3e8 <_printf_common+0xb0>
 800c390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c394:	4649      	mov	r1, r9
 800c396:	4638      	mov	r0, r7
 800c398:	47c0      	blx	r8
 800c39a:	3001      	adds	r0, #1
 800c39c:	d01e      	beq.n	800c3dc <_printf_common+0xa4>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	68e5      	ldr	r5, [r4, #12]
 800c3a2:	6832      	ldr	r2, [r6, #0]
 800c3a4:	f003 0306 	and.w	r3, r3, #6
 800c3a8:	2b04      	cmp	r3, #4
 800c3aa:	bf08      	it	eq
 800c3ac:	1aad      	subeq	r5, r5, r2
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	6922      	ldr	r2, [r4, #16]
 800c3b2:	bf0c      	ite	eq
 800c3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3b8:	2500      	movne	r5, #0
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	bfc4      	itt	gt
 800c3be:	1a9b      	subgt	r3, r3, r2
 800c3c0:	18ed      	addgt	r5, r5, r3
 800c3c2:	2600      	movs	r6, #0
 800c3c4:	341a      	adds	r4, #26
 800c3c6:	42b5      	cmp	r5, r6
 800c3c8:	d11a      	bne.n	800c400 <_printf_common+0xc8>
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	e008      	b.n	800c3e0 <_printf_common+0xa8>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	47c0      	blx	r8
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d103      	bne.n	800c3e4 <_printf_common+0xac>
 800c3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e4:	3501      	adds	r5, #1
 800c3e6:	e7c6      	b.n	800c376 <_printf_common+0x3e>
 800c3e8:	18e1      	adds	r1, r4, r3
 800c3ea:	1c5a      	adds	r2, r3, #1
 800c3ec:	2030      	movs	r0, #48	; 0x30
 800c3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3f2:	4422      	add	r2, r4
 800c3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3fc:	3302      	adds	r3, #2
 800c3fe:	e7c7      	b.n	800c390 <_printf_common+0x58>
 800c400:	2301      	movs	r3, #1
 800c402:	4622      	mov	r2, r4
 800c404:	4649      	mov	r1, r9
 800c406:	4638      	mov	r0, r7
 800c408:	47c0      	blx	r8
 800c40a:	3001      	adds	r0, #1
 800c40c:	d0e6      	beq.n	800c3dc <_printf_common+0xa4>
 800c40e:	3601      	adds	r6, #1
 800c410:	e7d9      	b.n	800c3c6 <_printf_common+0x8e>
	...

0800c414 <_printf_i>:
 800c414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c418:	7e0f      	ldrb	r7, [r1, #24]
 800c41a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c41c:	2f78      	cmp	r7, #120	; 0x78
 800c41e:	4691      	mov	r9, r2
 800c420:	4680      	mov	r8, r0
 800c422:	460c      	mov	r4, r1
 800c424:	469a      	mov	sl, r3
 800c426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c42a:	d807      	bhi.n	800c43c <_printf_i+0x28>
 800c42c:	2f62      	cmp	r7, #98	; 0x62
 800c42e:	d80a      	bhi.n	800c446 <_printf_i+0x32>
 800c430:	2f00      	cmp	r7, #0
 800c432:	f000 80d8 	beq.w	800c5e6 <_printf_i+0x1d2>
 800c436:	2f58      	cmp	r7, #88	; 0x58
 800c438:	f000 80a3 	beq.w	800c582 <_printf_i+0x16e>
 800c43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c444:	e03a      	b.n	800c4bc <_printf_i+0xa8>
 800c446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c44a:	2b15      	cmp	r3, #21
 800c44c:	d8f6      	bhi.n	800c43c <_printf_i+0x28>
 800c44e:	a101      	add	r1, pc, #4	; (adr r1, 800c454 <_printf_i+0x40>)
 800c450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c454:	0800c4ad 	.word	0x0800c4ad
 800c458:	0800c4c1 	.word	0x0800c4c1
 800c45c:	0800c43d 	.word	0x0800c43d
 800c460:	0800c43d 	.word	0x0800c43d
 800c464:	0800c43d 	.word	0x0800c43d
 800c468:	0800c43d 	.word	0x0800c43d
 800c46c:	0800c4c1 	.word	0x0800c4c1
 800c470:	0800c43d 	.word	0x0800c43d
 800c474:	0800c43d 	.word	0x0800c43d
 800c478:	0800c43d 	.word	0x0800c43d
 800c47c:	0800c43d 	.word	0x0800c43d
 800c480:	0800c5cd 	.word	0x0800c5cd
 800c484:	0800c4f1 	.word	0x0800c4f1
 800c488:	0800c5af 	.word	0x0800c5af
 800c48c:	0800c43d 	.word	0x0800c43d
 800c490:	0800c43d 	.word	0x0800c43d
 800c494:	0800c5ef 	.word	0x0800c5ef
 800c498:	0800c43d 	.word	0x0800c43d
 800c49c:	0800c4f1 	.word	0x0800c4f1
 800c4a0:	0800c43d 	.word	0x0800c43d
 800c4a4:	0800c43d 	.word	0x0800c43d
 800c4a8:	0800c5b7 	.word	0x0800c5b7
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	1d1a      	adds	r2, r3, #4
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	602a      	str	r2, [r5, #0]
 800c4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e0a3      	b.n	800c608 <_printf_i+0x1f4>
 800c4c0:	6820      	ldr	r0, [r4, #0]
 800c4c2:	6829      	ldr	r1, [r5, #0]
 800c4c4:	0606      	lsls	r6, r0, #24
 800c4c6:	f101 0304 	add.w	r3, r1, #4
 800c4ca:	d50a      	bpl.n	800c4e2 <_printf_i+0xce>
 800c4cc:	680e      	ldr	r6, [r1, #0]
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	da03      	bge.n	800c4dc <_printf_i+0xc8>
 800c4d4:	232d      	movs	r3, #45	; 0x2d
 800c4d6:	4276      	negs	r6, r6
 800c4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4dc:	485e      	ldr	r0, [pc, #376]	; (800c658 <_printf_i+0x244>)
 800c4de:	230a      	movs	r3, #10
 800c4e0:	e019      	b.n	800c516 <_printf_i+0x102>
 800c4e2:	680e      	ldr	r6, [r1, #0]
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4ea:	bf18      	it	ne
 800c4ec:	b236      	sxthne	r6, r6
 800c4ee:	e7ef      	b.n	800c4d0 <_printf_i+0xbc>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	1d19      	adds	r1, r3, #4
 800c4f6:	6029      	str	r1, [r5, #0]
 800c4f8:	0601      	lsls	r1, r0, #24
 800c4fa:	d501      	bpl.n	800c500 <_printf_i+0xec>
 800c4fc:	681e      	ldr	r6, [r3, #0]
 800c4fe:	e002      	b.n	800c506 <_printf_i+0xf2>
 800c500:	0646      	lsls	r6, r0, #25
 800c502:	d5fb      	bpl.n	800c4fc <_printf_i+0xe8>
 800c504:	881e      	ldrh	r6, [r3, #0]
 800c506:	4854      	ldr	r0, [pc, #336]	; (800c658 <_printf_i+0x244>)
 800c508:	2f6f      	cmp	r7, #111	; 0x6f
 800c50a:	bf0c      	ite	eq
 800c50c:	2308      	moveq	r3, #8
 800c50e:	230a      	movne	r3, #10
 800c510:	2100      	movs	r1, #0
 800c512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c516:	6865      	ldr	r5, [r4, #4]
 800c518:	60a5      	str	r5, [r4, #8]
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	bfa2      	ittt	ge
 800c51e:	6821      	ldrge	r1, [r4, #0]
 800c520:	f021 0104 	bicge.w	r1, r1, #4
 800c524:	6021      	strge	r1, [r4, #0]
 800c526:	b90e      	cbnz	r6, 800c52c <_printf_i+0x118>
 800c528:	2d00      	cmp	r5, #0
 800c52a:	d04d      	beq.n	800c5c8 <_printf_i+0x1b4>
 800c52c:	4615      	mov	r5, r2
 800c52e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c532:	fb03 6711 	mls	r7, r3, r1, r6
 800c536:	5dc7      	ldrb	r7, [r0, r7]
 800c538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c53c:	4637      	mov	r7, r6
 800c53e:	42bb      	cmp	r3, r7
 800c540:	460e      	mov	r6, r1
 800c542:	d9f4      	bls.n	800c52e <_printf_i+0x11a>
 800c544:	2b08      	cmp	r3, #8
 800c546:	d10b      	bne.n	800c560 <_printf_i+0x14c>
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	07de      	lsls	r6, r3, #31
 800c54c:	d508      	bpl.n	800c560 <_printf_i+0x14c>
 800c54e:	6923      	ldr	r3, [r4, #16]
 800c550:	6861      	ldr	r1, [r4, #4]
 800c552:	4299      	cmp	r1, r3
 800c554:	bfde      	ittt	le
 800c556:	2330      	movle	r3, #48	; 0x30
 800c558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c560:	1b52      	subs	r2, r2, r5
 800c562:	6122      	str	r2, [r4, #16]
 800c564:	f8cd a000 	str.w	sl, [sp]
 800c568:	464b      	mov	r3, r9
 800c56a:	aa03      	add	r2, sp, #12
 800c56c:	4621      	mov	r1, r4
 800c56e:	4640      	mov	r0, r8
 800c570:	f7ff fee2 	bl	800c338 <_printf_common>
 800c574:	3001      	adds	r0, #1
 800c576:	d14c      	bne.n	800c612 <_printf_i+0x1fe>
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	b004      	add	sp, #16
 800c57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c582:	4835      	ldr	r0, [pc, #212]	; (800c658 <_printf_i+0x244>)
 800c584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c588:	6829      	ldr	r1, [r5, #0]
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c590:	6029      	str	r1, [r5, #0]
 800c592:	061d      	lsls	r5, r3, #24
 800c594:	d514      	bpl.n	800c5c0 <_printf_i+0x1ac>
 800c596:	07df      	lsls	r7, r3, #31
 800c598:	bf44      	itt	mi
 800c59a:	f043 0320 	orrmi.w	r3, r3, #32
 800c59e:	6023      	strmi	r3, [r4, #0]
 800c5a0:	b91e      	cbnz	r6, 800c5aa <_printf_i+0x196>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	f023 0320 	bic.w	r3, r3, #32
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	2310      	movs	r3, #16
 800c5ac:	e7b0      	b.n	800c510 <_printf_i+0xfc>
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	f043 0320 	orr.w	r3, r3, #32
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	2378      	movs	r3, #120	; 0x78
 800c5b8:	4828      	ldr	r0, [pc, #160]	; (800c65c <_printf_i+0x248>)
 800c5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5be:	e7e3      	b.n	800c588 <_printf_i+0x174>
 800c5c0:	0659      	lsls	r1, r3, #25
 800c5c2:	bf48      	it	mi
 800c5c4:	b2b6      	uxthmi	r6, r6
 800c5c6:	e7e6      	b.n	800c596 <_printf_i+0x182>
 800c5c8:	4615      	mov	r5, r2
 800c5ca:	e7bb      	b.n	800c544 <_printf_i+0x130>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	6826      	ldr	r6, [r4, #0]
 800c5d0:	6961      	ldr	r1, [r4, #20]
 800c5d2:	1d18      	adds	r0, r3, #4
 800c5d4:	6028      	str	r0, [r5, #0]
 800c5d6:	0635      	lsls	r5, r6, #24
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	d501      	bpl.n	800c5e0 <_printf_i+0x1cc>
 800c5dc:	6019      	str	r1, [r3, #0]
 800c5de:	e002      	b.n	800c5e6 <_printf_i+0x1d2>
 800c5e0:	0670      	lsls	r0, r6, #25
 800c5e2:	d5fb      	bpl.n	800c5dc <_printf_i+0x1c8>
 800c5e4:	8019      	strh	r1, [r3, #0]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6123      	str	r3, [r4, #16]
 800c5ea:	4615      	mov	r5, r2
 800c5ec:	e7ba      	b.n	800c564 <_printf_i+0x150>
 800c5ee:	682b      	ldr	r3, [r5, #0]
 800c5f0:	1d1a      	adds	r2, r3, #4
 800c5f2:	602a      	str	r2, [r5, #0]
 800c5f4:	681d      	ldr	r5, [r3, #0]
 800c5f6:	6862      	ldr	r2, [r4, #4]
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f7f3 fdf8 	bl	80001f0 <memchr>
 800c600:	b108      	cbz	r0, 800c606 <_printf_i+0x1f2>
 800c602:	1b40      	subs	r0, r0, r5
 800c604:	6060      	str	r0, [r4, #4]
 800c606:	6863      	ldr	r3, [r4, #4]
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	2300      	movs	r3, #0
 800c60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c610:	e7a8      	b.n	800c564 <_printf_i+0x150>
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	462a      	mov	r2, r5
 800c616:	4649      	mov	r1, r9
 800c618:	4640      	mov	r0, r8
 800c61a:	47d0      	blx	sl
 800c61c:	3001      	adds	r0, #1
 800c61e:	d0ab      	beq.n	800c578 <_printf_i+0x164>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	079b      	lsls	r3, r3, #30
 800c624:	d413      	bmi.n	800c64e <_printf_i+0x23a>
 800c626:	68e0      	ldr	r0, [r4, #12]
 800c628:	9b03      	ldr	r3, [sp, #12]
 800c62a:	4298      	cmp	r0, r3
 800c62c:	bfb8      	it	lt
 800c62e:	4618      	movlt	r0, r3
 800c630:	e7a4      	b.n	800c57c <_printf_i+0x168>
 800c632:	2301      	movs	r3, #1
 800c634:	4632      	mov	r2, r6
 800c636:	4649      	mov	r1, r9
 800c638:	4640      	mov	r0, r8
 800c63a:	47d0      	blx	sl
 800c63c:	3001      	adds	r0, #1
 800c63e:	d09b      	beq.n	800c578 <_printf_i+0x164>
 800c640:	3501      	adds	r5, #1
 800c642:	68e3      	ldr	r3, [r4, #12]
 800c644:	9903      	ldr	r1, [sp, #12]
 800c646:	1a5b      	subs	r3, r3, r1
 800c648:	42ab      	cmp	r3, r5
 800c64a:	dcf2      	bgt.n	800c632 <_printf_i+0x21e>
 800c64c:	e7eb      	b.n	800c626 <_printf_i+0x212>
 800c64e:	2500      	movs	r5, #0
 800c650:	f104 0619 	add.w	r6, r4, #25
 800c654:	e7f5      	b.n	800c642 <_printf_i+0x22e>
 800c656:	bf00      	nop
 800c658:	08012d7a 	.word	0x08012d7a
 800c65c:	08012d8b 	.word	0x08012d8b

0800c660 <_scanf_float>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	b087      	sub	sp, #28
 800c666:	4617      	mov	r7, r2
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	688b      	ldr	r3, [r1, #8]
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c672:	bf83      	ittte	hi
 800c674:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c678:	195b      	addhi	r3, r3, r5
 800c67a:	9302      	strhi	r3, [sp, #8]
 800c67c:	2300      	movls	r3, #0
 800c67e:	bf86      	itte	hi
 800c680:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c684:	608b      	strhi	r3, [r1, #8]
 800c686:	9302      	strls	r3, [sp, #8]
 800c688:	680b      	ldr	r3, [r1, #0]
 800c68a:	468b      	mov	fp, r1
 800c68c:	2500      	movs	r5, #0
 800c68e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c692:	f84b 3b1c 	str.w	r3, [fp], #28
 800c696:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c69a:	4680      	mov	r8, r0
 800c69c:	460c      	mov	r4, r1
 800c69e:	465e      	mov	r6, fp
 800c6a0:	46aa      	mov	sl, r5
 800c6a2:	46a9      	mov	r9, r5
 800c6a4:	9501      	str	r5, [sp, #4]
 800c6a6:	68a2      	ldr	r2, [r4, #8]
 800c6a8:	b152      	cbz	r2, 800c6c0 <_scanf_float+0x60>
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b4e      	cmp	r3, #78	; 0x4e
 800c6b0:	d864      	bhi.n	800c77c <_scanf_float+0x11c>
 800c6b2:	2b40      	cmp	r3, #64	; 0x40
 800c6b4:	d83c      	bhi.n	800c730 <_scanf_float+0xd0>
 800c6b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c6ba:	b2c8      	uxtb	r0, r1
 800c6bc:	280e      	cmp	r0, #14
 800c6be:	d93a      	bls.n	800c736 <_scanf_float+0xd6>
 800c6c0:	f1b9 0f00 	cmp.w	r9, #0
 800c6c4:	d003      	beq.n	800c6ce <_scanf_float+0x6e>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6d2:	f1ba 0f01 	cmp.w	sl, #1
 800c6d6:	f200 8113 	bhi.w	800c900 <_scanf_float+0x2a0>
 800c6da:	455e      	cmp	r6, fp
 800c6dc:	f200 8105 	bhi.w	800c8ea <_scanf_float+0x28a>
 800c6e0:	2501      	movs	r5, #1
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	b007      	add	sp, #28
 800c6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c6ee:	2a0d      	cmp	r2, #13
 800c6f0:	d8e6      	bhi.n	800c6c0 <_scanf_float+0x60>
 800c6f2:	a101      	add	r1, pc, #4	; (adr r1, 800c6f8 <_scanf_float+0x98>)
 800c6f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6f8:	0800c837 	.word	0x0800c837
 800c6fc:	0800c6c1 	.word	0x0800c6c1
 800c700:	0800c6c1 	.word	0x0800c6c1
 800c704:	0800c6c1 	.word	0x0800c6c1
 800c708:	0800c897 	.word	0x0800c897
 800c70c:	0800c86f 	.word	0x0800c86f
 800c710:	0800c6c1 	.word	0x0800c6c1
 800c714:	0800c6c1 	.word	0x0800c6c1
 800c718:	0800c845 	.word	0x0800c845
 800c71c:	0800c6c1 	.word	0x0800c6c1
 800c720:	0800c6c1 	.word	0x0800c6c1
 800c724:	0800c6c1 	.word	0x0800c6c1
 800c728:	0800c6c1 	.word	0x0800c6c1
 800c72c:	0800c7fd 	.word	0x0800c7fd
 800c730:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c734:	e7db      	b.n	800c6ee <_scanf_float+0x8e>
 800c736:	290e      	cmp	r1, #14
 800c738:	d8c2      	bhi.n	800c6c0 <_scanf_float+0x60>
 800c73a:	a001      	add	r0, pc, #4	; (adr r0, 800c740 <_scanf_float+0xe0>)
 800c73c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c740:	0800c7ef 	.word	0x0800c7ef
 800c744:	0800c6c1 	.word	0x0800c6c1
 800c748:	0800c7ef 	.word	0x0800c7ef
 800c74c:	0800c883 	.word	0x0800c883
 800c750:	0800c6c1 	.word	0x0800c6c1
 800c754:	0800c79d 	.word	0x0800c79d
 800c758:	0800c7d9 	.word	0x0800c7d9
 800c75c:	0800c7d9 	.word	0x0800c7d9
 800c760:	0800c7d9 	.word	0x0800c7d9
 800c764:	0800c7d9 	.word	0x0800c7d9
 800c768:	0800c7d9 	.word	0x0800c7d9
 800c76c:	0800c7d9 	.word	0x0800c7d9
 800c770:	0800c7d9 	.word	0x0800c7d9
 800c774:	0800c7d9 	.word	0x0800c7d9
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	2b6e      	cmp	r3, #110	; 0x6e
 800c77e:	d809      	bhi.n	800c794 <_scanf_float+0x134>
 800c780:	2b60      	cmp	r3, #96	; 0x60
 800c782:	d8b2      	bhi.n	800c6ea <_scanf_float+0x8a>
 800c784:	2b54      	cmp	r3, #84	; 0x54
 800c786:	d077      	beq.n	800c878 <_scanf_float+0x218>
 800c788:	2b59      	cmp	r3, #89	; 0x59
 800c78a:	d199      	bne.n	800c6c0 <_scanf_float+0x60>
 800c78c:	2d07      	cmp	r5, #7
 800c78e:	d197      	bne.n	800c6c0 <_scanf_float+0x60>
 800c790:	2508      	movs	r5, #8
 800c792:	e029      	b.n	800c7e8 <_scanf_float+0x188>
 800c794:	2b74      	cmp	r3, #116	; 0x74
 800c796:	d06f      	beq.n	800c878 <_scanf_float+0x218>
 800c798:	2b79      	cmp	r3, #121	; 0x79
 800c79a:	e7f6      	b.n	800c78a <_scanf_float+0x12a>
 800c79c:	6821      	ldr	r1, [r4, #0]
 800c79e:	05c8      	lsls	r0, r1, #23
 800c7a0:	d51a      	bpl.n	800c7d8 <_scanf_float+0x178>
 800c7a2:	9b02      	ldr	r3, [sp, #8]
 800c7a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c7a8:	6021      	str	r1, [r4, #0]
 800c7aa:	f109 0901 	add.w	r9, r9, #1
 800c7ae:	b11b      	cbz	r3, 800c7b8 <_scanf_float+0x158>
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	3201      	adds	r2, #1
 800c7b4:	9302      	str	r3, [sp, #8]
 800c7b6:	60a2      	str	r2, [r4, #8]
 800c7b8:	68a3      	ldr	r3, [r4, #8]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	60a3      	str	r3, [r4, #8]
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	6123      	str	r3, [r4, #16]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	607b      	str	r3, [r7, #4]
 800c7cc:	f340 8084 	ble.w	800c8d8 <_scanf_float+0x278>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	603b      	str	r3, [r7, #0]
 800c7d6:	e766      	b.n	800c6a6 <_scanf_float+0x46>
 800c7d8:	eb1a 0f05 	cmn.w	sl, r5
 800c7dc:	f47f af70 	bne.w	800c6c0 <_scanf_float+0x60>
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c7e6:	6022      	str	r2, [r4, #0]
 800c7e8:	f806 3b01 	strb.w	r3, [r6], #1
 800c7ec:	e7e4      	b.n	800c7b8 <_scanf_float+0x158>
 800c7ee:	6822      	ldr	r2, [r4, #0]
 800c7f0:	0610      	lsls	r0, r2, #24
 800c7f2:	f57f af65 	bpl.w	800c6c0 <_scanf_float+0x60>
 800c7f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7fa:	e7f4      	b.n	800c7e6 <_scanf_float+0x186>
 800c7fc:	f1ba 0f00 	cmp.w	sl, #0
 800c800:	d10e      	bne.n	800c820 <_scanf_float+0x1c0>
 800c802:	f1b9 0f00 	cmp.w	r9, #0
 800c806:	d10e      	bne.n	800c826 <_scanf_float+0x1c6>
 800c808:	6822      	ldr	r2, [r4, #0]
 800c80a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c80e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c812:	d108      	bne.n	800c826 <_scanf_float+0x1c6>
 800c814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c818:	6022      	str	r2, [r4, #0]
 800c81a:	f04f 0a01 	mov.w	sl, #1
 800c81e:	e7e3      	b.n	800c7e8 <_scanf_float+0x188>
 800c820:	f1ba 0f02 	cmp.w	sl, #2
 800c824:	d055      	beq.n	800c8d2 <_scanf_float+0x272>
 800c826:	2d01      	cmp	r5, #1
 800c828:	d002      	beq.n	800c830 <_scanf_float+0x1d0>
 800c82a:	2d04      	cmp	r5, #4
 800c82c:	f47f af48 	bne.w	800c6c0 <_scanf_float+0x60>
 800c830:	3501      	adds	r5, #1
 800c832:	b2ed      	uxtb	r5, r5
 800c834:	e7d8      	b.n	800c7e8 <_scanf_float+0x188>
 800c836:	f1ba 0f01 	cmp.w	sl, #1
 800c83a:	f47f af41 	bne.w	800c6c0 <_scanf_float+0x60>
 800c83e:	f04f 0a02 	mov.w	sl, #2
 800c842:	e7d1      	b.n	800c7e8 <_scanf_float+0x188>
 800c844:	b97d      	cbnz	r5, 800c866 <_scanf_float+0x206>
 800c846:	f1b9 0f00 	cmp.w	r9, #0
 800c84a:	f47f af3c 	bne.w	800c6c6 <_scanf_float+0x66>
 800c84e:	6822      	ldr	r2, [r4, #0]
 800c850:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c854:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c858:	f47f af39 	bne.w	800c6ce <_scanf_float+0x6e>
 800c85c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c860:	6022      	str	r2, [r4, #0]
 800c862:	2501      	movs	r5, #1
 800c864:	e7c0      	b.n	800c7e8 <_scanf_float+0x188>
 800c866:	2d03      	cmp	r5, #3
 800c868:	d0e2      	beq.n	800c830 <_scanf_float+0x1d0>
 800c86a:	2d05      	cmp	r5, #5
 800c86c:	e7de      	b.n	800c82c <_scanf_float+0x1cc>
 800c86e:	2d02      	cmp	r5, #2
 800c870:	f47f af26 	bne.w	800c6c0 <_scanf_float+0x60>
 800c874:	2503      	movs	r5, #3
 800c876:	e7b7      	b.n	800c7e8 <_scanf_float+0x188>
 800c878:	2d06      	cmp	r5, #6
 800c87a:	f47f af21 	bne.w	800c6c0 <_scanf_float+0x60>
 800c87e:	2507      	movs	r5, #7
 800c880:	e7b2      	b.n	800c7e8 <_scanf_float+0x188>
 800c882:	6822      	ldr	r2, [r4, #0]
 800c884:	0591      	lsls	r1, r2, #22
 800c886:	f57f af1b 	bpl.w	800c6c0 <_scanf_float+0x60>
 800c88a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c88e:	6022      	str	r2, [r4, #0]
 800c890:	f8cd 9004 	str.w	r9, [sp, #4]
 800c894:	e7a8      	b.n	800c7e8 <_scanf_float+0x188>
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c89c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c8a0:	d006      	beq.n	800c8b0 <_scanf_float+0x250>
 800c8a2:	0550      	lsls	r0, r2, #21
 800c8a4:	f57f af0c 	bpl.w	800c6c0 <_scanf_float+0x60>
 800c8a8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ac:	f43f af0f 	beq.w	800c6ce <_scanf_float+0x6e>
 800c8b0:	0591      	lsls	r1, r2, #22
 800c8b2:	bf58      	it	pl
 800c8b4:	9901      	ldrpl	r1, [sp, #4]
 800c8b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8ba:	bf58      	it	pl
 800c8bc:	eba9 0101 	subpl.w	r1, r9, r1
 800c8c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c8c4:	bf58      	it	pl
 800c8c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c8ca:	6022      	str	r2, [r4, #0]
 800c8cc:	f04f 0900 	mov.w	r9, #0
 800c8d0:	e78a      	b.n	800c7e8 <_scanf_float+0x188>
 800c8d2:	f04f 0a03 	mov.w	sl, #3
 800c8d6:	e787      	b.n	800c7e8 <_scanf_float+0x188>
 800c8d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8dc:	4639      	mov	r1, r7
 800c8de:	4640      	mov	r0, r8
 800c8e0:	4798      	blx	r3
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	f43f aedf 	beq.w	800c6a6 <_scanf_float+0x46>
 800c8e8:	e6ea      	b.n	800c6c0 <_scanf_float+0x60>
 800c8ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8f2:	463a      	mov	r2, r7
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4798      	blx	r3
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	6123      	str	r3, [r4, #16]
 800c8fe:	e6ec      	b.n	800c6da <_scanf_float+0x7a>
 800c900:	1e6b      	subs	r3, r5, #1
 800c902:	2b06      	cmp	r3, #6
 800c904:	d825      	bhi.n	800c952 <_scanf_float+0x2f2>
 800c906:	2d02      	cmp	r5, #2
 800c908:	d836      	bhi.n	800c978 <_scanf_float+0x318>
 800c90a:	455e      	cmp	r6, fp
 800c90c:	f67f aee8 	bls.w	800c6e0 <_scanf_float+0x80>
 800c910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c914:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c918:	463a      	mov	r2, r7
 800c91a:	4640      	mov	r0, r8
 800c91c:	4798      	blx	r3
 800c91e:	6923      	ldr	r3, [r4, #16]
 800c920:	3b01      	subs	r3, #1
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	e7f1      	b.n	800c90a <_scanf_float+0x2aa>
 800c926:	9802      	ldr	r0, [sp, #8]
 800c928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c92c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c930:	9002      	str	r0, [sp, #8]
 800c932:	463a      	mov	r2, r7
 800c934:	4640      	mov	r0, r8
 800c936:	4798      	blx	r3
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	3b01      	subs	r3, #1
 800c93c:	6123      	str	r3, [r4, #16]
 800c93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c942:	fa5f fa8a 	uxtb.w	sl, sl
 800c946:	f1ba 0f02 	cmp.w	sl, #2
 800c94a:	d1ec      	bne.n	800c926 <_scanf_float+0x2c6>
 800c94c:	3d03      	subs	r5, #3
 800c94e:	b2ed      	uxtb	r5, r5
 800c950:	1b76      	subs	r6, r6, r5
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	05da      	lsls	r2, r3, #23
 800c956:	d52f      	bpl.n	800c9b8 <_scanf_float+0x358>
 800c958:	055b      	lsls	r3, r3, #21
 800c95a:	d510      	bpl.n	800c97e <_scanf_float+0x31e>
 800c95c:	455e      	cmp	r6, fp
 800c95e:	f67f aebf 	bls.w	800c6e0 <_scanf_float+0x80>
 800c962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c96a:	463a      	mov	r2, r7
 800c96c:	4640      	mov	r0, r8
 800c96e:	4798      	blx	r3
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	3b01      	subs	r3, #1
 800c974:	6123      	str	r3, [r4, #16]
 800c976:	e7f1      	b.n	800c95c <_scanf_float+0x2fc>
 800c978:	46aa      	mov	sl, r5
 800c97a:	9602      	str	r6, [sp, #8]
 800c97c:	e7df      	b.n	800c93e <_scanf_float+0x2de>
 800c97e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	2965      	cmp	r1, #101	; 0x65
 800c986:	f103 33ff 	add.w	r3, r3, #4294967295
 800c98a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	d00c      	beq.n	800c9ac <_scanf_float+0x34c>
 800c992:	2945      	cmp	r1, #69	; 0x45
 800c994:	d00a      	beq.n	800c9ac <_scanf_float+0x34c>
 800c996:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c99a:	463a      	mov	r2, r7
 800c99c:	4640      	mov	r0, r8
 800c99e:	4798      	blx	r3
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	1eb5      	subs	r5, r6, #2
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9b0:	463a      	mov	r2, r7
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4798      	blx	r3
 800c9b6:	462e      	mov	r6, r5
 800c9b8:	6825      	ldr	r5, [r4, #0]
 800c9ba:	f015 0510 	ands.w	r5, r5, #16
 800c9be:	d159      	bne.n	800ca74 <_scanf_float+0x414>
 800c9c0:	7035      	strb	r5, [r6, #0]
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9cc:	d11b      	bne.n	800ca06 <_scanf_float+0x3a6>
 800c9ce:	9b01      	ldr	r3, [sp, #4]
 800c9d0:	454b      	cmp	r3, r9
 800c9d2:	eba3 0209 	sub.w	r2, r3, r9
 800c9d6:	d123      	bne.n	800ca20 <_scanf_float+0x3c0>
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4659      	mov	r1, fp
 800c9dc:	4640      	mov	r0, r8
 800c9de:	f000 fe99 	bl	800d714 <_strtod_r>
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	9b03      	ldr	r3, [sp, #12]
 800c9e6:	f012 0f02 	tst.w	r2, #2
 800c9ea:	ec57 6b10 	vmov	r6, r7, d0
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	d021      	beq.n	800ca36 <_scanf_float+0x3d6>
 800c9f2:	9903      	ldr	r1, [sp, #12]
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	600a      	str	r2, [r1, #0]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	e9c3 6700 	strd	r6, r7, [r3]
 800c9fe:	68e3      	ldr	r3, [r4, #12]
 800ca00:	3301      	adds	r3, #1
 800ca02:	60e3      	str	r3, [r4, #12]
 800ca04:	e66d      	b.n	800c6e2 <_scanf_float+0x82>
 800ca06:	9b04      	ldr	r3, [sp, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0e5      	beq.n	800c9d8 <_scanf_float+0x378>
 800ca0c:	9905      	ldr	r1, [sp, #20]
 800ca0e:	230a      	movs	r3, #10
 800ca10:	462a      	mov	r2, r5
 800ca12:	3101      	adds	r1, #1
 800ca14:	4640      	mov	r0, r8
 800ca16:	f000 ff05 	bl	800d824 <_strtol_r>
 800ca1a:	9b04      	ldr	r3, [sp, #16]
 800ca1c:	9e05      	ldr	r6, [sp, #20]
 800ca1e:	1ac2      	subs	r2, r0, r3
 800ca20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ca24:	429e      	cmp	r6, r3
 800ca26:	bf28      	it	cs
 800ca28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca2c:	4912      	ldr	r1, [pc, #72]	; (800ca78 <_scanf_float+0x418>)
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f000 f82c 	bl	800ca8c <siprintf>
 800ca34:	e7d0      	b.n	800c9d8 <_scanf_float+0x378>
 800ca36:	9903      	ldr	r1, [sp, #12]
 800ca38:	f012 0f04 	tst.w	r2, #4
 800ca3c:	f103 0204 	add.w	r2, r3, #4
 800ca40:	600a      	str	r2, [r1, #0]
 800ca42:	d1d9      	bne.n	800c9f8 <_scanf_float+0x398>
 800ca44:	f8d3 8000 	ldr.w	r8, [r3]
 800ca48:	ee10 2a10 	vmov	r2, s0
 800ca4c:	ee10 0a10 	vmov	r0, s0
 800ca50:	463b      	mov	r3, r7
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f4 f872 	bl	8000b3c <__aeabi_dcmpun>
 800ca58:	b128      	cbz	r0, 800ca66 <_scanf_float+0x406>
 800ca5a:	4808      	ldr	r0, [pc, #32]	; (800ca7c <_scanf_float+0x41c>)
 800ca5c:	f000 f810 	bl	800ca80 <nanf>
 800ca60:	ed88 0a00 	vstr	s0, [r8]
 800ca64:	e7cb      	b.n	800c9fe <_scanf_float+0x39e>
 800ca66:	4630      	mov	r0, r6
 800ca68:	4639      	mov	r1, r7
 800ca6a:	f7f4 f8c5 	bl	8000bf8 <__aeabi_d2f>
 800ca6e:	f8c8 0000 	str.w	r0, [r8]
 800ca72:	e7c4      	b.n	800c9fe <_scanf_float+0x39e>
 800ca74:	2500      	movs	r5, #0
 800ca76:	e634      	b.n	800c6e2 <_scanf_float+0x82>
 800ca78:	08012d9c 	.word	0x08012d9c
 800ca7c:	080131a8 	.word	0x080131a8

0800ca80 <nanf>:
 800ca80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca88 <nanf+0x8>
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	7fc00000 	.word	0x7fc00000

0800ca8c <siprintf>:
 800ca8c:	b40e      	push	{r1, r2, r3}
 800ca8e:	b500      	push	{lr}
 800ca90:	b09c      	sub	sp, #112	; 0x70
 800ca92:	ab1d      	add	r3, sp, #116	; 0x74
 800ca94:	9002      	str	r0, [sp, #8]
 800ca96:	9006      	str	r0, [sp, #24]
 800ca98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca9c:	4809      	ldr	r0, [pc, #36]	; (800cac4 <siprintf+0x38>)
 800ca9e:	9107      	str	r1, [sp, #28]
 800caa0:	9104      	str	r1, [sp, #16]
 800caa2:	4909      	ldr	r1, [pc, #36]	; (800cac8 <siprintf+0x3c>)
 800caa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800caa8:	9105      	str	r1, [sp, #20]
 800caaa:	6800      	ldr	r0, [r0, #0]
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	a902      	add	r1, sp, #8
 800cab0:	f002 fed6 	bl	800f860 <_svfiprintf_r>
 800cab4:	9b02      	ldr	r3, [sp, #8]
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
 800caba:	b01c      	add	sp, #112	; 0x70
 800cabc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac0:	b003      	add	sp, #12
 800cac2:	4770      	bx	lr
 800cac4:	2000023c 	.word	0x2000023c
 800cac8:	ffff0208 	.word	0xffff0208

0800cacc <sulp>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	4604      	mov	r4, r0
 800cad0:	460d      	mov	r5, r1
 800cad2:	ec45 4b10 	vmov	d0, r4, r5
 800cad6:	4616      	mov	r6, r2
 800cad8:	f002 fc20 	bl	800f31c <__ulp>
 800cadc:	ec51 0b10 	vmov	r0, r1, d0
 800cae0:	b17e      	cbz	r6, 800cb02 <sulp+0x36>
 800cae2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cae6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800caea:	2b00      	cmp	r3, #0
 800caec:	dd09      	ble.n	800cb02 <sulp+0x36>
 800caee:	051b      	lsls	r3, r3, #20
 800caf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800caf4:	2400      	movs	r4, #0
 800caf6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cafa:	4622      	mov	r2, r4
 800cafc:	462b      	mov	r3, r5
 800cafe:	f7f3 fd83 	bl	8000608 <__aeabi_dmul>
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	0000      	movs	r0, r0
	...

0800cb08 <_strtod_l>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	ed2d 8b02 	vpush	{d8}
 800cb10:	b09d      	sub	sp, #116	; 0x74
 800cb12:	461f      	mov	r7, r3
 800cb14:	2300      	movs	r3, #0
 800cb16:	9318      	str	r3, [sp, #96]	; 0x60
 800cb18:	4ba2      	ldr	r3, [pc, #648]	; (800cda4 <_strtod_l+0x29c>)
 800cb1a:	9213      	str	r2, [sp, #76]	; 0x4c
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	4604      	mov	r4, r0
 800cb22:	4618      	mov	r0, r3
 800cb24:	4688      	mov	r8, r1
 800cb26:	f7f3 fb5b 	bl	80001e0 <strlen>
 800cb2a:	f04f 0a00 	mov.w	sl, #0
 800cb2e:	4605      	mov	r5, r0
 800cb30:	f04f 0b00 	mov.w	fp, #0
 800cb34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb3a:	781a      	ldrb	r2, [r3, #0]
 800cb3c:	2a2b      	cmp	r2, #43	; 0x2b
 800cb3e:	d04e      	beq.n	800cbde <_strtod_l+0xd6>
 800cb40:	d83b      	bhi.n	800cbba <_strtod_l+0xb2>
 800cb42:	2a0d      	cmp	r2, #13
 800cb44:	d834      	bhi.n	800cbb0 <_strtod_l+0xa8>
 800cb46:	2a08      	cmp	r2, #8
 800cb48:	d834      	bhi.n	800cbb4 <_strtod_l+0xac>
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	d03e      	beq.n	800cbcc <_strtod_l+0xc4>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	930a      	str	r3, [sp, #40]	; 0x28
 800cb52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cb54:	7833      	ldrb	r3, [r6, #0]
 800cb56:	2b30      	cmp	r3, #48	; 0x30
 800cb58:	f040 80b0 	bne.w	800ccbc <_strtod_l+0x1b4>
 800cb5c:	7873      	ldrb	r3, [r6, #1]
 800cb5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb62:	2b58      	cmp	r3, #88	; 0x58
 800cb64:	d168      	bne.n	800cc38 <_strtod_l+0x130>
 800cb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	ab18      	add	r3, sp, #96	; 0x60
 800cb6c:	9702      	str	r7, [sp, #8]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	4a8d      	ldr	r2, [pc, #564]	; (800cda8 <_strtod_l+0x2a0>)
 800cb72:	ab19      	add	r3, sp, #100	; 0x64
 800cb74:	a917      	add	r1, sp, #92	; 0x5c
 800cb76:	4620      	mov	r0, r4
 800cb78:	f001 fd38 	bl	800e5ec <__gethex>
 800cb7c:	f010 0707 	ands.w	r7, r0, #7
 800cb80:	4605      	mov	r5, r0
 800cb82:	d005      	beq.n	800cb90 <_strtod_l+0x88>
 800cb84:	2f06      	cmp	r7, #6
 800cb86:	d12c      	bne.n	800cbe2 <_strtod_l+0xda>
 800cb88:	3601      	adds	r6, #1
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cb8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f040 8590 	bne.w	800d6b8 <_strtod_l+0xbb0>
 800cb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9a:	b1eb      	cbz	r3, 800cbd8 <_strtod_l+0xd0>
 800cb9c:	4652      	mov	r2, sl
 800cb9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cba2:	ec43 2b10 	vmov	d0, r2, r3
 800cba6:	b01d      	add	sp, #116	; 0x74
 800cba8:	ecbd 8b02 	vpop	{d8}
 800cbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb0:	2a20      	cmp	r2, #32
 800cbb2:	d1cc      	bne.n	800cb4e <_strtod_l+0x46>
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbb8:	e7be      	b.n	800cb38 <_strtod_l+0x30>
 800cbba:	2a2d      	cmp	r2, #45	; 0x2d
 800cbbc:	d1c7      	bne.n	800cb4e <_strtod_l+0x46>
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	920a      	str	r2, [sp, #40]	; 0x28
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1c2      	bne.n	800cb52 <_strtod_l+0x4a>
 800cbcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cbce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f040 856e 	bne.w	800d6b4 <_strtod_l+0xbac>
 800cbd8:	4652      	mov	r2, sl
 800cbda:	465b      	mov	r3, fp
 800cbdc:	e7e1      	b.n	800cba2 <_strtod_l+0x9a>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	e7ee      	b.n	800cbc0 <_strtod_l+0xb8>
 800cbe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbe4:	b13a      	cbz	r2, 800cbf6 <_strtod_l+0xee>
 800cbe6:	2135      	movs	r1, #53	; 0x35
 800cbe8:	a81a      	add	r0, sp, #104	; 0x68
 800cbea:	f002 fca2 	bl	800f532 <__copybits>
 800cbee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f002 f861 	bl	800ecb8 <_Bfree>
 800cbf6:	3f01      	subs	r7, #1
 800cbf8:	2f04      	cmp	r7, #4
 800cbfa:	d806      	bhi.n	800cc0a <_strtod_l+0x102>
 800cbfc:	e8df f007 	tbb	[pc, r7]
 800cc00:	1714030a 	.word	0x1714030a
 800cc04:	0a          	.byte	0x0a
 800cc05:	00          	.byte	0x00
 800cc06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cc0a:	0728      	lsls	r0, r5, #28
 800cc0c:	d5c0      	bpl.n	800cb90 <_strtod_l+0x88>
 800cc0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cc12:	e7bd      	b.n	800cb90 <_strtod_l+0x88>
 800cc14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cc18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cc1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cc1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc26:	e7f0      	b.n	800cc0a <_strtod_l+0x102>
 800cc28:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cdac <_strtod_l+0x2a4>
 800cc2c:	e7ed      	b.n	800cc0a <_strtod_l+0x102>
 800cc2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cc32:	f04f 3aff 	mov.w	sl, #4294967295
 800cc36:	e7e8      	b.n	800cc0a <_strtod_l+0x102>
 800cc38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc3e:	785b      	ldrb	r3, [r3, #1]
 800cc40:	2b30      	cmp	r3, #48	; 0x30
 800cc42:	d0f9      	beq.n	800cc38 <_strtod_l+0x130>
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d0a3      	beq.n	800cb90 <_strtod_l+0x88>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	f04f 0900 	mov.w	r9, #0
 800cc4e:	9304      	str	r3, [sp, #16]
 800cc50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc52:	9308      	str	r3, [sp, #32]
 800cc54:	f8cd 901c 	str.w	r9, [sp, #28]
 800cc58:	464f      	mov	r7, r9
 800cc5a:	220a      	movs	r2, #10
 800cc5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc5e:	7806      	ldrb	r6, [r0, #0]
 800cc60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cc64:	b2d9      	uxtb	r1, r3
 800cc66:	2909      	cmp	r1, #9
 800cc68:	d92a      	bls.n	800ccc0 <_strtod_l+0x1b8>
 800cc6a:	9905      	ldr	r1, [sp, #20]
 800cc6c:	462a      	mov	r2, r5
 800cc6e:	f002 ff0f 	bl	800fa90 <strncmp>
 800cc72:	b398      	cbz	r0, 800ccdc <_strtod_l+0x1d4>
 800cc74:	2000      	movs	r0, #0
 800cc76:	4632      	mov	r2, r6
 800cc78:	463d      	mov	r5, r7
 800cc7a:	9005      	str	r0, [sp, #20]
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2a65      	cmp	r2, #101	; 0x65
 800cc80:	d001      	beq.n	800cc86 <_strtod_l+0x17e>
 800cc82:	2a45      	cmp	r2, #69	; 0x45
 800cc84:	d118      	bne.n	800ccb8 <_strtod_l+0x1b0>
 800cc86:	b91d      	cbnz	r5, 800cc90 <_strtod_l+0x188>
 800cc88:	9a04      	ldr	r2, [sp, #16]
 800cc8a:	4302      	orrs	r2, r0
 800cc8c:	d09e      	beq.n	800cbcc <_strtod_l+0xc4>
 800cc8e:	2500      	movs	r5, #0
 800cc90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cc94:	f108 0201 	add.w	r2, r8, #1
 800cc98:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cc9e:	2a2b      	cmp	r2, #43	; 0x2b
 800cca0:	d075      	beq.n	800cd8e <_strtod_l+0x286>
 800cca2:	2a2d      	cmp	r2, #45	; 0x2d
 800cca4:	d07b      	beq.n	800cd9e <_strtod_l+0x296>
 800cca6:	f04f 0c00 	mov.w	ip, #0
 800ccaa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ccae:	2909      	cmp	r1, #9
 800ccb0:	f240 8082 	bls.w	800cdb8 <_strtod_l+0x2b0>
 800ccb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ccb8:	2600      	movs	r6, #0
 800ccba:	e09d      	b.n	800cdf8 <_strtod_l+0x2f0>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e7c4      	b.n	800cc4a <_strtod_l+0x142>
 800ccc0:	2f08      	cmp	r7, #8
 800ccc2:	bfd8      	it	le
 800ccc4:	9907      	ldrle	r1, [sp, #28]
 800ccc6:	f100 0001 	add.w	r0, r0, #1
 800ccca:	bfda      	itte	le
 800cccc:	fb02 3301 	mlale	r3, r2, r1, r3
 800ccd0:	9307      	strle	r3, [sp, #28]
 800ccd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ccd6:	3701      	adds	r7, #1
 800ccd8:	9017      	str	r0, [sp, #92]	; 0x5c
 800ccda:	e7bf      	b.n	800cc5c <_strtod_l+0x154>
 800ccdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccde:	195a      	adds	r2, r3, r5
 800cce0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cce2:	5d5a      	ldrb	r2, [r3, r5]
 800cce4:	2f00      	cmp	r7, #0
 800cce6:	d037      	beq.n	800cd58 <_strtod_l+0x250>
 800cce8:	9005      	str	r0, [sp, #20]
 800ccea:	463d      	mov	r5, r7
 800ccec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ccf0:	2b09      	cmp	r3, #9
 800ccf2:	d912      	bls.n	800cd1a <_strtod_l+0x212>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e7c2      	b.n	800cc7e <_strtod_l+0x176>
 800ccf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccfe:	785a      	ldrb	r2, [r3, #1]
 800cd00:	3001      	adds	r0, #1
 800cd02:	2a30      	cmp	r2, #48	; 0x30
 800cd04:	d0f8      	beq.n	800ccf8 <_strtod_l+0x1f0>
 800cd06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cd0a:	2b08      	cmp	r3, #8
 800cd0c:	f200 84d9 	bhi.w	800d6c2 <_strtod_l+0xbba>
 800cd10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd12:	9005      	str	r0, [sp, #20]
 800cd14:	2000      	movs	r0, #0
 800cd16:	9308      	str	r3, [sp, #32]
 800cd18:	4605      	mov	r5, r0
 800cd1a:	3a30      	subs	r2, #48	; 0x30
 800cd1c:	f100 0301 	add.w	r3, r0, #1
 800cd20:	d014      	beq.n	800cd4c <_strtod_l+0x244>
 800cd22:	9905      	ldr	r1, [sp, #20]
 800cd24:	4419      	add	r1, r3
 800cd26:	9105      	str	r1, [sp, #20]
 800cd28:	462b      	mov	r3, r5
 800cd2a:	eb00 0e05 	add.w	lr, r0, r5
 800cd2e:	210a      	movs	r1, #10
 800cd30:	4573      	cmp	r3, lr
 800cd32:	d113      	bne.n	800cd5c <_strtod_l+0x254>
 800cd34:	182b      	adds	r3, r5, r0
 800cd36:	2b08      	cmp	r3, #8
 800cd38:	f105 0501 	add.w	r5, r5, #1
 800cd3c:	4405      	add	r5, r0
 800cd3e:	dc1c      	bgt.n	800cd7a <_strtod_l+0x272>
 800cd40:	9907      	ldr	r1, [sp, #28]
 800cd42:	230a      	movs	r3, #10
 800cd44:	fb03 2301 	mla	r3, r3, r1, r2
 800cd48:	9307      	str	r3, [sp, #28]
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd4e:	1c51      	adds	r1, r2, #1
 800cd50:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd52:	7852      	ldrb	r2, [r2, #1]
 800cd54:	4618      	mov	r0, r3
 800cd56:	e7c9      	b.n	800ccec <_strtod_l+0x1e4>
 800cd58:	4638      	mov	r0, r7
 800cd5a:	e7d2      	b.n	800cd02 <_strtod_l+0x1fa>
 800cd5c:	2b08      	cmp	r3, #8
 800cd5e:	dc04      	bgt.n	800cd6a <_strtod_l+0x262>
 800cd60:	9e07      	ldr	r6, [sp, #28]
 800cd62:	434e      	muls	r6, r1
 800cd64:	9607      	str	r6, [sp, #28]
 800cd66:	3301      	adds	r3, #1
 800cd68:	e7e2      	b.n	800cd30 <_strtod_l+0x228>
 800cd6a:	f103 0c01 	add.w	ip, r3, #1
 800cd6e:	f1bc 0f10 	cmp.w	ip, #16
 800cd72:	bfd8      	it	le
 800cd74:	fb01 f909 	mulle.w	r9, r1, r9
 800cd78:	e7f5      	b.n	800cd66 <_strtod_l+0x25e>
 800cd7a:	2d10      	cmp	r5, #16
 800cd7c:	bfdc      	itt	le
 800cd7e:	230a      	movle	r3, #10
 800cd80:	fb03 2909 	mlale	r9, r3, r9, r2
 800cd84:	e7e1      	b.n	800cd4a <_strtod_l+0x242>
 800cd86:	2300      	movs	r3, #0
 800cd88:	9305      	str	r3, [sp, #20]
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e77c      	b.n	800cc88 <_strtod_l+0x180>
 800cd8e:	f04f 0c00 	mov.w	ip, #0
 800cd92:	f108 0202 	add.w	r2, r8, #2
 800cd96:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd98:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cd9c:	e785      	b.n	800ccaa <_strtod_l+0x1a2>
 800cd9e:	f04f 0c01 	mov.w	ip, #1
 800cda2:	e7f6      	b.n	800cd92 <_strtod_l+0x28a>
 800cda4:	08012ff0 	.word	0x08012ff0
 800cda8:	08012da4 	.word	0x08012da4
 800cdac:	7ff00000 	.word	0x7ff00000
 800cdb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdb2:	1c51      	adds	r1, r2, #1
 800cdb4:	9117      	str	r1, [sp, #92]	; 0x5c
 800cdb6:	7852      	ldrb	r2, [r2, #1]
 800cdb8:	2a30      	cmp	r2, #48	; 0x30
 800cdba:	d0f9      	beq.n	800cdb0 <_strtod_l+0x2a8>
 800cdbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cdc0:	2908      	cmp	r1, #8
 800cdc2:	f63f af79 	bhi.w	800ccb8 <_strtod_l+0x1b0>
 800cdc6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cdca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdcc:	9206      	str	r2, [sp, #24]
 800cdce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdd0:	1c51      	adds	r1, r2, #1
 800cdd2:	9117      	str	r1, [sp, #92]	; 0x5c
 800cdd4:	7852      	ldrb	r2, [r2, #1]
 800cdd6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cdda:	2e09      	cmp	r6, #9
 800cddc:	d937      	bls.n	800ce4e <_strtod_l+0x346>
 800cdde:	9e06      	ldr	r6, [sp, #24]
 800cde0:	1b89      	subs	r1, r1, r6
 800cde2:	2908      	cmp	r1, #8
 800cde4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cde8:	dc02      	bgt.n	800cdf0 <_strtod_l+0x2e8>
 800cdea:	4576      	cmp	r6, lr
 800cdec:	bfa8      	it	ge
 800cdee:	4676      	movge	r6, lr
 800cdf0:	f1bc 0f00 	cmp.w	ip, #0
 800cdf4:	d000      	beq.n	800cdf8 <_strtod_l+0x2f0>
 800cdf6:	4276      	negs	r6, r6
 800cdf8:	2d00      	cmp	r5, #0
 800cdfa:	d14d      	bne.n	800ce98 <_strtod_l+0x390>
 800cdfc:	9904      	ldr	r1, [sp, #16]
 800cdfe:	4301      	orrs	r1, r0
 800ce00:	f47f aec6 	bne.w	800cb90 <_strtod_l+0x88>
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f47f aee1 	bne.w	800cbcc <_strtod_l+0xc4>
 800ce0a:	2a69      	cmp	r2, #105	; 0x69
 800ce0c:	d027      	beq.n	800ce5e <_strtod_l+0x356>
 800ce0e:	dc24      	bgt.n	800ce5a <_strtod_l+0x352>
 800ce10:	2a49      	cmp	r2, #73	; 0x49
 800ce12:	d024      	beq.n	800ce5e <_strtod_l+0x356>
 800ce14:	2a4e      	cmp	r2, #78	; 0x4e
 800ce16:	f47f aed9 	bne.w	800cbcc <_strtod_l+0xc4>
 800ce1a:	499f      	ldr	r1, [pc, #636]	; (800d098 <_strtod_l+0x590>)
 800ce1c:	a817      	add	r0, sp, #92	; 0x5c
 800ce1e:	f001 fe3d 	bl	800ea9c <__match>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	f43f aed2 	beq.w	800cbcc <_strtod_l+0xc4>
 800ce28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b28      	cmp	r3, #40	; 0x28
 800ce2e:	d12d      	bne.n	800ce8c <_strtod_l+0x384>
 800ce30:	499a      	ldr	r1, [pc, #616]	; (800d09c <_strtod_l+0x594>)
 800ce32:	aa1a      	add	r2, sp, #104	; 0x68
 800ce34:	a817      	add	r0, sp, #92	; 0x5c
 800ce36:	f001 fe45 	bl	800eac4 <__hexnan>
 800ce3a:	2805      	cmp	r0, #5
 800ce3c:	d126      	bne.n	800ce8c <_strtod_l+0x384>
 800ce3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ce44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ce48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ce4c:	e6a0      	b.n	800cb90 <_strtod_l+0x88>
 800ce4e:	210a      	movs	r1, #10
 800ce50:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ce54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ce58:	e7b9      	b.n	800cdce <_strtod_l+0x2c6>
 800ce5a:	2a6e      	cmp	r2, #110	; 0x6e
 800ce5c:	e7db      	b.n	800ce16 <_strtod_l+0x30e>
 800ce5e:	4990      	ldr	r1, [pc, #576]	; (800d0a0 <_strtod_l+0x598>)
 800ce60:	a817      	add	r0, sp, #92	; 0x5c
 800ce62:	f001 fe1b 	bl	800ea9c <__match>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f43f aeb0 	beq.w	800cbcc <_strtod_l+0xc4>
 800ce6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce6e:	498d      	ldr	r1, [pc, #564]	; (800d0a4 <_strtod_l+0x59c>)
 800ce70:	3b01      	subs	r3, #1
 800ce72:	a817      	add	r0, sp, #92	; 0x5c
 800ce74:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce76:	f001 fe11 	bl	800ea9c <__match>
 800ce7a:	b910      	cbnz	r0, 800ce82 <_strtod_l+0x37a>
 800ce7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce7e:	3301      	adds	r3, #1
 800ce80:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce82:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d0b4 <_strtod_l+0x5ac>
 800ce86:	f04f 0a00 	mov.w	sl, #0
 800ce8a:	e681      	b.n	800cb90 <_strtod_l+0x88>
 800ce8c:	4886      	ldr	r0, [pc, #536]	; (800d0a8 <_strtod_l+0x5a0>)
 800ce8e:	f002 fde7 	bl	800fa60 <nan>
 800ce92:	ec5b ab10 	vmov	sl, fp, d0
 800ce96:	e67b      	b.n	800cb90 <_strtod_l+0x88>
 800ce98:	9b05      	ldr	r3, [sp, #20]
 800ce9a:	9807      	ldr	r0, [sp, #28]
 800ce9c:	1af3      	subs	r3, r6, r3
 800ce9e:	2f00      	cmp	r7, #0
 800cea0:	bf08      	it	eq
 800cea2:	462f      	moveq	r7, r5
 800cea4:	2d10      	cmp	r5, #16
 800cea6:	9306      	str	r3, [sp, #24]
 800cea8:	46a8      	mov	r8, r5
 800ceaa:	bfa8      	it	ge
 800ceac:	f04f 0810 	movge.w	r8, #16
 800ceb0:	f7f3 fb30 	bl	8000514 <__aeabi_ui2d>
 800ceb4:	2d09      	cmp	r5, #9
 800ceb6:	4682      	mov	sl, r0
 800ceb8:	468b      	mov	fp, r1
 800ceba:	dd13      	ble.n	800cee4 <_strtod_l+0x3dc>
 800cebc:	4b7b      	ldr	r3, [pc, #492]	; (800d0ac <_strtod_l+0x5a4>)
 800cebe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cec2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cec6:	f7f3 fb9f 	bl	8000608 <__aeabi_dmul>
 800ceca:	4682      	mov	sl, r0
 800cecc:	4648      	mov	r0, r9
 800cece:	468b      	mov	fp, r1
 800ced0:	f7f3 fb20 	bl	8000514 <__aeabi_ui2d>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	4650      	mov	r0, sl
 800ceda:	4659      	mov	r1, fp
 800cedc:	f7f3 f9de 	bl	800029c <__adddf3>
 800cee0:	4682      	mov	sl, r0
 800cee2:	468b      	mov	fp, r1
 800cee4:	2d0f      	cmp	r5, #15
 800cee6:	dc38      	bgt.n	800cf5a <_strtod_l+0x452>
 800cee8:	9b06      	ldr	r3, [sp, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f43f ae50 	beq.w	800cb90 <_strtod_l+0x88>
 800cef0:	dd24      	ble.n	800cf3c <_strtod_l+0x434>
 800cef2:	2b16      	cmp	r3, #22
 800cef4:	dc0b      	bgt.n	800cf0e <_strtod_l+0x406>
 800cef6:	496d      	ldr	r1, [pc, #436]	; (800d0ac <_strtod_l+0x5a4>)
 800cef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cefc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf00:	4652      	mov	r2, sl
 800cf02:	465b      	mov	r3, fp
 800cf04:	f7f3 fb80 	bl	8000608 <__aeabi_dmul>
 800cf08:	4682      	mov	sl, r0
 800cf0a:	468b      	mov	fp, r1
 800cf0c:	e640      	b.n	800cb90 <_strtod_l+0x88>
 800cf0e:	9a06      	ldr	r2, [sp, #24]
 800cf10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cf14:	4293      	cmp	r3, r2
 800cf16:	db20      	blt.n	800cf5a <_strtod_l+0x452>
 800cf18:	4c64      	ldr	r4, [pc, #400]	; (800d0ac <_strtod_l+0x5a4>)
 800cf1a:	f1c5 050f 	rsb	r5, r5, #15
 800cf1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf22:	4652      	mov	r2, sl
 800cf24:	465b      	mov	r3, fp
 800cf26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf2a:	f7f3 fb6d 	bl	8000608 <__aeabi_dmul>
 800cf2e:	9b06      	ldr	r3, [sp, #24]
 800cf30:	1b5d      	subs	r5, r3, r5
 800cf32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf3a:	e7e3      	b.n	800cf04 <_strtod_l+0x3fc>
 800cf3c:	9b06      	ldr	r3, [sp, #24]
 800cf3e:	3316      	adds	r3, #22
 800cf40:	db0b      	blt.n	800cf5a <_strtod_l+0x452>
 800cf42:	9b05      	ldr	r3, [sp, #20]
 800cf44:	1b9e      	subs	r6, r3, r6
 800cf46:	4b59      	ldr	r3, [pc, #356]	; (800d0ac <_strtod_l+0x5a4>)
 800cf48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cf4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf50:	4650      	mov	r0, sl
 800cf52:	4659      	mov	r1, fp
 800cf54:	f7f3 fc82 	bl	800085c <__aeabi_ddiv>
 800cf58:	e7d6      	b.n	800cf08 <_strtod_l+0x400>
 800cf5a:	9b06      	ldr	r3, [sp, #24]
 800cf5c:	eba5 0808 	sub.w	r8, r5, r8
 800cf60:	4498      	add	r8, r3
 800cf62:	f1b8 0f00 	cmp.w	r8, #0
 800cf66:	dd74      	ble.n	800d052 <_strtod_l+0x54a>
 800cf68:	f018 030f 	ands.w	r3, r8, #15
 800cf6c:	d00a      	beq.n	800cf84 <_strtod_l+0x47c>
 800cf6e:	494f      	ldr	r1, [pc, #316]	; (800d0ac <_strtod_l+0x5a4>)
 800cf70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf74:	4652      	mov	r2, sl
 800cf76:	465b      	mov	r3, fp
 800cf78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf7c:	f7f3 fb44 	bl	8000608 <__aeabi_dmul>
 800cf80:	4682      	mov	sl, r0
 800cf82:	468b      	mov	fp, r1
 800cf84:	f038 080f 	bics.w	r8, r8, #15
 800cf88:	d04f      	beq.n	800d02a <_strtod_l+0x522>
 800cf8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cf8e:	dd22      	ble.n	800cfd6 <_strtod_l+0x4ce>
 800cf90:	2500      	movs	r5, #0
 800cf92:	462e      	mov	r6, r5
 800cf94:	9507      	str	r5, [sp, #28]
 800cf96:	9505      	str	r5, [sp, #20]
 800cf98:	2322      	movs	r3, #34	; 0x22
 800cf9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d0b4 <_strtod_l+0x5ac>
 800cf9e:	6023      	str	r3, [r4, #0]
 800cfa0:	f04f 0a00 	mov.w	sl, #0
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f43f adf2 	beq.w	800cb90 <_strtod_l+0x88>
 800cfac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f001 fe82 	bl	800ecb8 <_Bfree>
 800cfb4:	9905      	ldr	r1, [sp, #20]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 fe7e 	bl	800ecb8 <_Bfree>
 800cfbc:	4631      	mov	r1, r6
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f001 fe7a 	bl	800ecb8 <_Bfree>
 800cfc4:	9907      	ldr	r1, [sp, #28]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f001 fe76 	bl	800ecb8 <_Bfree>
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f001 fe72 	bl	800ecb8 <_Bfree>
 800cfd4:	e5dc      	b.n	800cb90 <_strtod_l+0x88>
 800cfd6:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <_strtod_l+0x5a8>)
 800cfd8:	9304      	str	r3, [sp, #16]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	4659      	mov	r1, fp
 800cfe4:	4699      	mov	r9, r3
 800cfe6:	f1b8 0f01 	cmp.w	r8, #1
 800cfea:	dc21      	bgt.n	800d030 <_strtod_l+0x528>
 800cfec:	b10b      	cbz	r3, 800cff2 <_strtod_l+0x4ea>
 800cfee:	4682      	mov	sl, r0
 800cff0:	468b      	mov	fp, r1
 800cff2:	4b2f      	ldr	r3, [pc, #188]	; (800d0b0 <_strtod_l+0x5a8>)
 800cff4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cff8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cffc:	4652      	mov	r2, sl
 800cffe:	465b      	mov	r3, fp
 800d000:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d004:	f7f3 fb00 	bl	8000608 <__aeabi_dmul>
 800d008:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <_strtod_l+0x5ac>)
 800d00a:	460a      	mov	r2, r1
 800d00c:	400b      	ands	r3, r1
 800d00e:	492a      	ldr	r1, [pc, #168]	; (800d0b8 <_strtod_l+0x5b0>)
 800d010:	428b      	cmp	r3, r1
 800d012:	4682      	mov	sl, r0
 800d014:	d8bc      	bhi.n	800cf90 <_strtod_l+0x488>
 800d016:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d01a:	428b      	cmp	r3, r1
 800d01c:	bf86      	itte	hi
 800d01e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d0bc <_strtod_l+0x5b4>
 800d022:	f04f 3aff 	movhi.w	sl, #4294967295
 800d026:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d02a:	2300      	movs	r3, #0
 800d02c:	9304      	str	r3, [sp, #16]
 800d02e:	e084      	b.n	800d13a <_strtod_l+0x632>
 800d030:	f018 0f01 	tst.w	r8, #1
 800d034:	d005      	beq.n	800d042 <_strtod_l+0x53a>
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	f7f3 fae4 	bl	8000608 <__aeabi_dmul>
 800d040:	2301      	movs	r3, #1
 800d042:	9a04      	ldr	r2, [sp, #16]
 800d044:	3208      	adds	r2, #8
 800d046:	f109 0901 	add.w	r9, r9, #1
 800d04a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d04e:	9204      	str	r2, [sp, #16]
 800d050:	e7c9      	b.n	800cfe6 <_strtod_l+0x4de>
 800d052:	d0ea      	beq.n	800d02a <_strtod_l+0x522>
 800d054:	f1c8 0800 	rsb	r8, r8, #0
 800d058:	f018 020f 	ands.w	r2, r8, #15
 800d05c:	d00a      	beq.n	800d074 <_strtod_l+0x56c>
 800d05e:	4b13      	ldr	r3, [pc, #76]	; (800d0ac <_strtod_l+0x5a4>)
 800d060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d064:	4650      	mov	r0, sl
 800d066:	4659      	mov	r1, fp
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	f7f3 fbf6 	bl	800085c <__aeabi_ddiv>
 800d070:	4682      	mov	sl, r0
 800d072:	468b      	mov	fp, r1
 800d074:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d078:	d0d7      	beq.n	800d02a <_strtod_l+0x522>
 800d07a:	f1b8 0f1f 	cmp.w	r8, #31
 800d07e:	dd1f      	ble.n	800d0c0 <_strtod_l+0x5b8>
 800d080:	2500      	movs	r5, #0
 800d082:	462e      	mov	r6, r5
 800d084:	9507      	str	r5, [sp, #28]
 800d086:	9505      	str	r5, [sp, #20]
 800d088:	2322      	movs	r3, #34	; 0x22
 800d08a:	f04f 0a00 	mov.w	sl, #0
 800d08e:	f04f 0b00 	mov.w	fp, #0
 800d092:	6023      	str	r3, [r4, #0]
 800d094:	e786      	b.n	800cfa4 <_strtod_l+0x49c>
 800d096:	bf00      	nop
 800d098:	08012d75 	.word	0x08012d75
 800d09c:	08012db8 	.word	0x08012db8
 800d0a0:	08012d6d 	.word	0x08012d6d
 800d0a4:	08012efc 	.word	0x08012efc
 800d0a8:	080131a8 	.word	0x080131a8
 800d0ac:	08013088 	.word	0x08013088
 800d0b0:	08013060 	.word	0x08013060
 800d0b4:	7ff00000 	.word	0x7ff00000
 800d0b8:	7ca00000 	.word	0x7ca00000
 800d0bc:	7fefffff 	.word	0x7fefffff
 800d0c0:	f018 0310 	ands.w	r3, r8, #16
 800d0c4:	bf18      	it	ne
 800d0c6:	236a      	movne	r3, #106	; 0x6a
 800d0c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d478 <_strtod_l+0x970>
 800d0cc:	9304      	str	r3, [sp, #16]
 800d0ce:	4650      	mov	r0, sl
 800d0d0:	4659      	mov	r1, fp
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f018 0f01 	tst.w	r8, #1
 800d0d8:	d004      	beq.n	800d0e4 <_strtod_l+0x5dc>
 800d0da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d0de:	f7f3 fa93 	bl	8000608 <__aeabi_dmul>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d0e8:	f109 0908 	add.w	r9, r9, #8
 800d0ec:	d1f2      	bne.n	800d0d4 <_strtod_l+0x5cc>
 800d0ee:	b10b      	cbz	r3, 800d0f4 <_strtod_l+0x5ec>
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	468b      	mov	fp, r1
 800d0f4:	9b04      	ldr	r3, [sp, #16]
 800d0f6:	b1c3      	cbz	r3, 800d12a <_strtod_l+0x622>
 800d0f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d100:	2b00      	cmp	r3, #0
 800d102:	4659      	mov	r1, fp
 800d104:	dd11      	ble.n	800d12a <_strtod_l+0x622>
 800d106:	2b1f      	cmp	r3, #31
 800d108:	f340 8124 	ble.w	800d354 <_strtod_l+0x84c>
 800d10c:	2b34      	cmp	r3, #52	; 0x34
 800d10e:	bfde      	ittt	le
 800d110:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d114:	f04f 33ff 	movle.w	r3, #4294967295
 800d118:	fa03 f202 	lslle.w	r2, r3, r2
 800d11c:	f04f 0a00 	mov.w	sl, #0
 800d120:	bfcc      	ite	gt
 800d122:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d126:	ea02 0b01 	andle.w	fp, r2, r1
 800d12a:	2200      	movs	r2, #0
 800d12c:	2300      	movs	r3, #0
 800d12e:	4650      	mov	r0, sl
 800d130:	4659      	mov	r1, fp
 800d132:	f7f3 fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d136:	2800      	cmp	r0, #0
 800d138:	d1a2      	bne.n	800d080 <_strtod_l+0x578>
 800d13a:	9b07      	ldr	r3, [sp, #28]
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	9908      	ldr	r1, [sp, #32]
 800d140:	462b      	mov	r3, r5
 800d142:	463a      	mov	r2, r7
 800d144:	4620      	mov	r0, r4
 800d146:	f001 fe1f 	bl	800ed88 <__s2b>
 800d14a:	9007      	str	r0, [sp, #28]
 800d14c:	2800      	cmp	r0, #0
 800d14e:	f43f af1f 	beq.w	800cf90 <_strtod_l+0x488>
 800d152:	9b05      	ldr	r3, [sp, #20]
 800d154:	1b9e      	subs	r6, r3, r6
 800d156:	9b06      	ldr	r3, [sp, #24]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bfb4      	ite	lt
 800d15c:	4633      	movlt	r3, r6
 800d15e:	2300      	movge	r3, #0
 800d160:	930c      	str	r3, [sp, #48]	; 0x30
 800d162:	9b06      	ldr	r3, [sp, #24]
 800d164:	2500      	movs	r5, #0
 800d166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d16a:	9312      	str	r3, [sp, #72]	; 0x48
 800d16c:	462e      	mov	r6, r5
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	4620      	mov	r0, r4
 800d172:	6859      	ldr	r1, [r3, #4]
 800d174:	f001 fd60 	bl	800ec38 <_Balloc>
 800d178:	9005      	str	r0, [sp, #20]
 800d17a:	2800      	cmp	r0, #0
 800d17c:	f43f af0c 	beq.w	800cf98 <_strtod_l+0x490>
 800d180:	9b07      	ldr	r3, [sp, #28]
 800d182:	691a      	ldr	r2, [r3, #16]
 800d184:	3202      	adds	r2, #2
 800d186:	f103 010c 	add.w	r1, r3, #12
 800d18a:	0092      	lsls	r2, r2, #2
 800d18c:	300c      	adds	r0, #12
 800d18e:	f7fe fde7 	bl	800bd60 <memcpy>
 800d192:	ec4b ab10 	vmov	d0, sl, fp
 800d196:	aa1a      	add	r2, sp, #104	; 0x68
 800d198:	a919      	add	r1, sp, #100	; 0x64
 800d19a:	4620      	mov	r0, r4
 800d19c:	f002 f93a 	bl	800f414 <__d2b>
 800d1a0:	ec4b ab18 	vmov	d8, sl, fp
 800d1a4:	9018      	str	r0, [sp, #96]	; 0x60
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f43f aef6 	beq.w	800cf98 <_strtod_l+0x490>
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f001 fe84 	bl	800eebc <__i2b>
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	f43f aeee 	beq.w	800cf98 <_strtod_l+0x490>
 800d1bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1be:	9904      	ldr	r1, [sp, #16]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	bfab      	itete	ge
 800d1c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d1c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d1c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d1ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d1ce:	bfac      	ite	ge
 800d1d0:	eb03 0902 	addge.w	r9, r3, r2
 800d1d4:	1ad7      	sublt	r7, r2, r3
 800d1d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d1d8:	eba3 0801 	sub.w	r8, r3, r1
 800d1dc:	4490      	add	r8, r2
 800d1de:	4ba1      	ldr	r3, [pc, #644]	; (800d464 <_strtod_l+0x95c>)
 800d1e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1e4:	4598      	cmp	r8, r3
 800d1e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d1ea:	f280 80c7 	bge.w	800d37c <_strtod_l+0x874>
 800d1ee:	eba3 0308 	sub.w	r3, r3, r8
 800d1f2:	2b1f      	cmp	r3, #31
 800d1f4:	eba2 0203 	sub.w	r2, r2, r3
 800d1f8:	f04f 0101 	mov.w	r1, #1
 800d1fc:	f300 80b1 	bgt.w	800d362 <_strtod_l+0x85a>
 800d200:	fa01 f303 	lsl.w	r3, r1, r3
 800d204:	930d      	str	r3, [sp, #52]	; 0x34
 800d206:	2300      	movs	r3, #0
 800d208:	9308      	str	r3, [sp, #32]
 800d20a:	eb09 0802 	add.w	r8, r9, r2
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	45c1      	cmp	r9, r8
 800d212:	4417      	add	r7, r2
 800d214:	441f      	add	r7, r3
 800d216:	464b      	mov	r3, r9
 800d218:	bfa8      	it	ge
 800d21a:	4643      	movge	r3, r8
 800d21c:	42bb      	cmp	r3, r7
 800d21e:	bfa8      	it	ge
 800d220:	463b      	movge	r3, r7
 800d222:	2b00      	cmp	r3, #0
 800d224:	bfc2      	ittt	gt
 800d226:	eba8 0803 	subgt.w	r8, r8, r3
 800d22a:	1aff      	subgt	r7, r7, r3
 800d22c:	eba9 0903 	subgt.w	r9, r9, r3
 800d230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d232:	2b00      	cmp	r3, #0
 800d234:	dd17      	ble.n	800d266 <_strtod_l+0x75e>
 800d236:	4631      	mov	r1, r6
 800d238:	461a      	mov	r2, r3
 800d23a:	4620      	mov	r0, r4
 800d23c:	f001 fefe 	bl	800f03c <__pow5mult>
 800d240:	4606      	mov	r6, r0
 800d242:	2800      	cmp	r0, #0
 800d244:	f43f aea8 	beq.w	800cf98 <_strtod_l+0x490>
 800d248:	4601      	mov	r1, r0
 800d24a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d24c:	4620      	mov	r0, r4
 800d24e:	f001 fe4b 	bl	800eee8 <__multiply>
 800d252:	900b      	str	r0, [sp, #44]	; 0x2c
 800d254:	2800      	cmp	r0, #0
 800d256:	f43f ae9f 	beq.w	800cf98 <_strtod_l+0x490>
 800d25a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d25c:	4620      	mov	r0, r4
 800d25e:	f001 fd2b 	bl	800ecb8 <_Bfree>
 800d262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d264:	9318      	str	r3, [sp, #96]	; 0x60
 800d266:	f1b8 0f00 	cmp.w	r8, #0
 800d26a:	f300 808c 	bgt.w	800d386 <_strtod_l+0x87e>
 800d26e:	9b06      	ldr	r3, [sp, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	dd08      	ble.n	800d286 <_strtod_l+0x77e>
 800d274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d276:	9905      	ldr	r1, [sp, #20]
 800d278:	4620      	mov	r0, r4
 800d27a:	f001 fedf 	bl	800f03c <__pow5mult>
 800d27e:	9005      	str	r0, [sp, #20]
 800d280:	2800      	cmp	r0, #0
 800d282:	f43f ae89 	beq.w	800cf98 <_strtod_l+0x490>
 800d286:	2f00      	cmp	r7, #0
 800d288:	dd08      	ble.n	800d29c <_strtod_l+0x794>
 800d28a:	9905      	ldr	r1, [sp, #20]
 800d28c:	463a      	mov	r2, r7
 800d28e:	4620      	mov	r0, r4
 800d290:	f001 ff2e 	bl	800f0f0 <__lshift>
 800d294:	9005      	str	r0, [sp, #20]
 800d296:	2800      	cmp	r0, #0
 800d298:	f43f ae7e 	beq.w	800cf98 <_strtod_l+0x490>
 800d29c:	f1b9 0f00 	cmp.w	r9, #0
 800d2a0:	dd08      	ble.n	800d2b4 <_strtod_l+0x7ac>
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	464a      	mov	r2, r9
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f001 ff22 	bl	800f0f0 <__lshift>
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	f43f ae72 	beq.w	800cf98 <_strtod_l+0x490>
 800d2b4:	9a05      	ldr	r2, [sp, #20]
 800d2b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f001 ffa5 	bl	800f208 <__mdiff>
 800d2be:	4605      	mov	r5, r0
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	f43f ae69 	beq.w	800cf98 <_strtod_l+0x490>
 800d2c6:	68c3      	ldr	r3, [r0, #12]
 800d2c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	60c3      	str	r3, [r0, #12]
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	f001 ff7e 	bl	800f1d0 <__mcmp>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	da60      	bge.n	800d39a <_strtod_l+0x892>
 800d2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2da:	ea53 030a 	orrs.w	r3, r3, sl
 800d2de:	f040 8082 	bne.w	800d3e6 <_strtod_l+0x8de>
 800d2e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d17d      	bne.n	800d3e6 <_strtod_l+0x8de>
 800d2ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2ee:	0d1b      	lsrs	r3, r3, #20
 800d2f0:	051b      	lsls	r3, r3, #20
 800d2f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d2f6:	d976      	bls.n	800d3e6 <_strtod_l+0x8de>
 800d2f8:	696b      	ldr	r3, [r5, #20]
 800d2fa:	b913      	cbnz	r3, 800d302 <_strtod_l+0x7fa>
 800d2fc:	692b      	ldr	r3, [r5, #16]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	dd71      	ble.n	800d3e6 <_strtod_l+0x8de>
 800d302:	4629      	mov	r1, r5
 800d304:	2201      	movs	r2, #1
 800d306:	4620      	mov	r0, r4
 800d308:	f001 fef2 	bl	800f0f0 <__lshift>
 800d30c:	4631      	mov	r1, r6
 800d30e:	4605      	mov	r5, r0
 800d310:	f001 ff5e 	bl	800f1d0 <__mcmp>
 800d314:	2800      	cmp	r0, #0
 800d316:	dd66      	ble.n	800d3e6 <_strtod_l+0x8de>
 800d318:	9904      	ldr	r1, [sp, #16]
 800d31a:	4a53      	ldr	r2, [pc, #332]	; (800d468 <_strtod_l+0x960>)
 800d31c:	465b      	mov	r3, fp
 800d31e:	2900      	cmp	r1, #0
 800d320:	f000 8081 	beq.w	800d426 <_strtod_l+0x91e>
 800d324:	ea02 010b 	and.w	r1, r2, fp
 800d328:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d32c:	dc7b      	bgt.n	800d426 <_strtod_l+0x91e>
 800d32e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d332:	f77f aea9 	ble.w	800d088 <_strtod_l+0x580>
 800d336:	4b4d      	ldr	r3, [pc, #308]	; (800d46c <_strtod_l+0x964>)
 800d338:	4650      	mov	r0, sl
 800d33a:	4659      	mov	r1, fp
 800d33c:	2200      	movs	r2, #0
 800d33e:	f7f3 f963 	bl	8000608 <__aeabi_dmul>
 800d342:	460b      	mov	r3, r1
 800d344:	4303      	orrs	r3, r0
 800d346:	bf08      	it	eq
 800d348:	2322      	moveq	r3, #34	; 0x22
 800d34a:	4682      	mov	sl, r0
 800d34c:	468b      	mov	fp, r1
 800d34e:	bf08      	it	eq
 800d350:	6023      	streq	r3, [r4, #0]
 800d352:	e62b      	b.n	800cfac <_strtod_l+0x4a4>
 800d354:	f04f 32ff 	mov.w	r2, #4294967295
 800d358:	fa02 f303 	lsl.w	r3, r2, r3
 800d35c:	ea03 0a0a 	and.w	sl, r3, sl
 800d360:	e6e3      	b.n	800d12a <_strtod_l+0x622>
 800d362:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d366:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d36a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d36e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d372:	fa01 f308 	lsl.w	r3, r1, r8
 800d376:	9308      	str	r3, [sp, #32]
 800d378:	910d      	str	r1, [sp, #52]	; 0x34
 800d37a:	e746      	b.n	800d20a <_strtod_l+0x702>
 800d37c:	2300      	movs	r3, #0
 800d37e:	9308      	str	r3, [sp, #32]
 800d380:	2301      	movs	r3, #1
 800d382:	930d      	str	r3, [sp, #52]	; 0x34
 800d384:	e741      	b.n	800d20a <_strtod_l+0x702>
 800d386:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d388:	4642      	mov	r2, r8
 800d38a:	4620      	mov	r0, r4
 800d38c:	f001 feb0 	bl	800f0f0 <__lshift>
 800d390:	9018      	str	r0, [sp, #96]	; 0x60
 800d392:	2800      	cmp	r0, #0
 800d394:	f47f af6b 	bne.w	800d26e <_strtod_l+0x766>
 800d398:	e5fe      	b.n	800cf98 <_strtod_l+0x490>
 800d39a:	465f      	mov	r7, fp
 800d39c:	d16e      	bne.n	800d47c <_strtod_l+0x974>
 800d39e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3a4:	b342      	cbz	r2, 800d3f8 <_strtod_l+0x8f0>
 800d3a6:	4a32      	ldr	r2, [pc, #200]	; (800d470 <_strtod_l+0x968>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d128      	bne.n	800d3fe <_strtod_l+0x8f6>
 800d3ac:	9b04      	ldr	r3, [sp, #16]
 800d3ae:	4651      	mov	r1, sl
 800d3b0:	b1eb      	cbz	r3, 800d3ee <_strtod_l+0x8e6>
 800d3b2:	4b2d      	ldr	r3, [pc, #180]	; (800d468 <_strtod_l+0x960>)
 800d3b4:	403b      	ands	r3, r7
 800d3b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d3be:	d819      	bhi.n	800d3f4 <_strtod_l+0x8ec>
 800d3c0:	0d1b      	lsrs	r3, r3, #20
 800d3c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ca:	4299      	cmp	r1, r3
 800d3cc:	d117      	bne.n	800d3fe <_strtod_l+0x8f6>
 800d3ce:	4b29      	ldr	r3, [pc, #164]	; (800d474 <_strtod_l+0x96c>)
 800d3d0:	429f      	cmp	r7, r3
 800d3d2:	d102      	bne.n	800d3da <_strtod_l+0x8d2>
 800d3d4:	3101      	adds	r1, #1
 800d3d6:	f43f addf 	beq.w	800cf98 <_strtod_l+0x490>
 800d3da:	4b23      	ldr	r3, [pc, #140]	; (800d468 <_strtod_l+0x960>)
 800d3dc:	403b      	ands	r3, r7
 800d3de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d3e2:	f04f 0a00 	mov.w	sl, #0
 800d3e6:	9b04      	ldr	r3, [sp, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1a4      	bne.n	800d336 <_strtod_l+0x82e>
 800d3ec:	e5de      	b.n	800cfac <_strtod_l+0x4a4>
 800d3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f2:	e7ea      	b.n	800d3ca <_strtod_l+0x8c2>
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	e7e8      	b.n	800d3ca <_strtod_l+0x8c2>
 800d3f8:	ea53 030a 	orrs.w	r3, r3, sl
 800d3fc:	d08c      	beq.n	800d318 <_strtod_l+0x810>
 800d3fe:	9b08      	ldr	r3, [sp, #32]
 800d400:	b1db      	cbz	r3, 800d43a <_strtod_l+0x932>
 800d402:	423b      	tst	r3, r7
 800d404:	d0ef      	beq.n	800d3e6 <_strtod_l+0x8de>
 800d406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d408:	9a04      	ldr	r2, [sp, #16]
 800d40a:	4650      	mov	r0, sl
 800d40c:	4659      	mov	r1, fp
 800d40e:	b1c3      	cbz	r3, 800d442 <_strtod_l+0x93a>
 800d410:	f7ff fb5c 	bl	800cacc <sulp>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	ec51 0b18 	vmov	r0, r1, d8
 800d41c:	f7f2 ff3e 	bl	800029c <__adddf3>
 800d420:	4682      	mov	sl, r0
 800d422:	468b      	mov	fp, r1
 800d424:	e7df      	b.n	800d3e6 <_strtod_l+0x8de>
 800d426:	4013      	ands	r3, r2
 800d428:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d42c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d430:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d434:	f04f 3aff 	mov.w	sl, #4294967295
 800d438:	e7d5      	b.n	800d3e6 <_strtod_l+0x8de>
 800d43a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d43c:	ea13 0f0a 	tst.w	r3, sl
 800d440:	e7e0      	b.n	800d404 <_strtod_l+0x8fc>
 800d442:	f7ff fb43 	bl	800cacc <sulp>
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	ec51 0b18 	vmov	r0, r1, d8
 800d44e:	f7f2 ff23 	bl	8000298 <__aeabi_dsub>
 800d452:	2200      	movs	r2, #0
 800d454:	2300      	movs	r3, #0
 800d456:	4682      	mov	sl, r0
 800d458:	468b      	mov	fp, r1
 800d45a:	f7f3 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d0c1      	beq.n	800d3e6 <_strtod_l+0x8de>
 800d462:	e611      	b.n	800d088 <_strtod_l+0x580>
 800d464:	fffffc02 	.word	0xfffffc02
 800d468:	7ff00000 	.word	0x7ff00000
 800d46c:	39500000 	.word	0x39500000
 800d470:	000fffff 	.word	0x000fffff
 800d474:	7fefffff 	.word	0x7fefffff
 800d478:	08012dd0 	.word	0x08012dd0
 800d47c:	4631      	mov	r1, r6
 800d47e:	4628      	mov	r0, r5
 800d480:	f002 f824 	bl	800f4cc <__ratio>
 800d484:	ec59 8b10 	vmov	r8, r9, d0
 800d488:	ee10 0a10 	vmov	r0, s0
 800d48c:	2200      	movs	r2, #0
 800d48e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d492:	4649      	mov	r1, r9
 800d494:	f7f3 fb34 	bl	8000b00 <__aeabi_dcmple>
 800d498:	2800      	cmp	r0, #0
 800d49a:	d07a      	beq.n	800d592 <_strtod_l+0xa8a>
 800d49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d04a      	beq.n	800d538 <_strtod_l+0xa30>
 800d4a2:	4b95      	ldr	r3, [pc, #596]	; (800d6f8 <_strtod_l+0xbf0>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d4aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d6f8 <_strtod_l+0xbf0>
 800d4ae:	f04f 0800 	mov.w	r8, #0
 800d4b2:	4b92      	ldr	r3, [pc, #584]	; (800d6fc <_strtod_l+0xbf4>)
 800d4b4:	403b      	ands	r3, r7
 800d4b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d4b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4ba:	4b91      	ldr	r3, [pc, #580]	; (800d700 <_strtod_l+0xbf8>)
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	f040 80b0 	bne.w	800d622 <_strtod_l+0xb1a>
 800d4c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d4ca:	ec4b ab10 	vmov	d0, sl, fp
 800d4ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4d2:	f001 ff23 	bl	800f31c <__ulp>
 800d4d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4da:	ec53 2b10 	vmov	r2, r3, d0
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	4652      	mov	r2, sl
 800d4e4:	465b      	mov	r3, fp
 800d4e6:	f7f2 fed9 	bl	800029c <__adddf3>
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4983      	ldr	r1, [pc, #524]	; (800d6fc <_strtod_l+0xbf4>)
 800d4ee:	4a85      	ldr	r2, [pc, #532]	; (800d704 <_strtod_l+0xbfc>)
 800d4f0:	4019      	ands	r1, r3
 800d4f2:	4291      	cmp	r1, r2
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	d960      	bls.n	800d5ba <_strtod_l+0xab2>
 800d4f8:	ee18 3a90 	vmov	r3, s17
 800d4fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d500:	4293      	cmp	r3, r2
 800d502:	d104      	bne.n	800d50e <_strtod_l+0xa06>
 800d504:	ee18 3a10 	vmov	r3, s16
 800d508:	3301      	adds	r3, #1
 800d50a:	f43f ad45 	beq.w	800cf98 <_strtod_l+0x490>
 800d50e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d710 <_strtod_l+0xc08>
 800d512:	f04f 3aff 	mov.w	sl, #4294967295
 800d516:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d518:	4620      	mov	r0, r4
 800d51a:	f001 fbcd 	bl	800ecb8 <_Bfree>
 800d51e:	9905      	ldr	r1, [sp, #20]
 800d520:	4620      	mov	r0, r4
 800d522:	f001 fbc9 	bl	800ecb8 <_Bfree>
 800d526:	4631      	mov	r1, r6
 800d528:	4620      	mov	r0, r4
 800d52a:	f001 fbc5 	bl	800ecb8 <_Bfree>
 800d52e:	4629      	mov	r1, r5
 800d530:	4620      	mov	r0, r4
 800d532:	f001 fbc1 	bl	800ecb8 <_Bfree>
 800d536:	e61a      	b.n	800d16e <_strtod_l+0x666>
 800d538:	f1ba 0f00 	cmp.w	sl, #0
 800d53c:	d11b      	bne.n	800d576 <_strtod_l+0xa6e>
 800d53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d542:	b9f3      	cbnz	r3, 800d582 <_strtod_l+0xa7a>
 800d544:	4b6c      	ldr	r3, [pc, #432]	; (800d6f8 <_strtod_l+0xbf0>)
 800d546:	2200      	movs	r2, #0
 800d548:	4640      	mov	r0, r8
 800d54a:	4649      	mov	r1, r9
 800d54c:	f7f3 face 	bl	8000aec <__aeabi_dcmplt>
 800d550:	b9d0      	cbnz	r0, 800d588 <_strtod_l+0xa80>
 800d552:	4640      	mov	r0, r8
 800d554:	4649      	mov	r1, r9
 800d556:	4b6c      	ldr	r3, [pc, #432]	; (800d708 <_strtod_l+0xc00>)
 800d558:	2200      	movs	r2, #0
 800d55a:	f7f3 f855 	bl	8000608 <__aeabi_dmul>
 800d55e:	4680      	mov	r8, r0
 800d560:	4689      	mov	r9, r1
 800d562:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d566:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d56a:	9315      	str	r3, [sp, #84]	; 0x54
 800d56c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d570:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d574:	e79d      	b.n	800d4b2 <_strtod_l+0x9aa>
 800d576:	f1ba 0f01 	cmp.w	sl, #1
 800d57a:	d102      	bne.n	800d582 <_strtod_l+0xa7a>
 800d57c:	2f00      	cmp	r7, #0
 800d57e:	f43f ad83 	beq.w	800d088 <_strtod_l+0x580>
 800d582:	4b62      	ldr	r3, [pc, #392]	; (800d70c <_strtod_l+0xc04>)
 800d584:	2200      	movs	r2, #0
 800d586:	e78e      	b.n	800d4a6 <_strtod_l+0x99e>
 800d588:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d708 <_strtod_l+0xc00>
 800d58c:	f04f 0800 	mov.w	r8, #0
 800d590:	e7e7      	b.n	800d562 <_strtod_l+0xa5a>
 800d592:	4b5d      	ldr	r3, [pc, #372]	; (800d708 <_strtod_l+0xc00>)
 800d594:	4640      	mov	r0, r8
 800d596:	4649      	mov	r1, r9
 800d598:	2200      	movs	r2, #0
 800d59a:	f7f3 f835 	bl	8000608 <__aeabi_dmul>
 800d59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4689      	mov	r9, r1
 800d5a4:	b933      	cbnz	r3, 800d5b4 <_strtod_l+0xaac>
 800d5a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5aa:	900e      	str	r0, [sp, #56]	; 0x38
 800d5ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d5b2:	e7dd      	b.n	800d570 <_strtod_l+0xa68>
 800d5b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d5b8:	e7f9      	b.n	800d5ae <_strtod_l+0xaa6>
 800d5ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d5be:	9b04      	ldr	r3, [sp, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1a8      	bne.n	800d516 <_strtod_l+0xa0e>
 800d5c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5ca:	0d1b      	lsrs	r3, r3, #20
 800d5cc:	051b      	lsls	r3, r3, #20
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d1a1      	bne.n	800d516 <_strtod_l+0xa0e>
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	f7f3 fb77 	bl	8000cc8 <__aeabi_d2lz>
 800d5da:	f7f2 ffe7 	bl	80005ac <__aeabi_l2d>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	4649      	mov	r1, r9
 800d5e6:	f7f2 fe57 	bl	8000298 <__aeabi_dsub>
 800d5ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5f0:	ea43 030a 	orr.w	r3, r3, sl
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	4680      	mov	r8, r0
 800d5f8:	4689      	mov	r9, r1
 800d5fa:	d055      	beq.n	800d6a8 <_strtod_l+0xba0>
 800d5fc:	a336      	add	r3, pc, #216	; (adr r3, 800d6d8 <_strtod_l+0xbd0>)
 800d5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d602:	f7f3 fa73 	bl	8000aec <__aeabi_dcmplt>
 800d606:	2800      	cmp	r0, #0
 800d608:	f47f acd0 	bne.w	800cfac <_strtod_l+0x4a4>
 800d60c:	a334      	add	r3, pc, #208	; (adr r3, 800d6e0 <_strtod_l+0xbd8>)
 800d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f3 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	f43f af7b 	beq.w	800d516 <_strtod_l+0xa0e>
 800d620:	e4c4      	b.n	800cfac <_strtod_l+0x4a4>
 800d622:	9b04      	ldr	r3, [sp, #16]
 800d624:	b333      	cbz	r3, 800d674 <_strtod_l+0xb6c>
 800d626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d628:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d62c:	d822      	bhi.n	800d674 <_strtod_l+0xb6c>
 800d62e:	a32e      	add	r3, pc, #184	; (adr r3, 800d6e8 <_strtod_l+0xbe0>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	4640      	mov	r0, r8
 800d636:	4649      	mov	r1, r9
 800d638:	f7f3 fa62 	bl	8000b00 <__aeabi_dcmple>
 800d63c:	b1a0      	cbz	r0, 800d668 <_strtod_l+0xb60>
 800d63e:	4649      	mov	r1, r9
 800d640:	4640      	mov	r0, r8
 800d642:	f7f3 fab9 	bl	8000bb8 <__aeabi_d2uiz>
 800d646:	2801      	cmp	r0, #1
 800d648:	bf38      	it	cc
 800d64a:	2001      	movcc	r0, #1
 800d64c:	f7f2 ff62 	bl	8000514 <__aeabi_ui2d>
 800d650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d652:	4680      	mov	r8, r0
 800d654:	4689      	mov	r9, r1
 800d656:	bb23      	cbnz	r3, 800d6a2 <_strtod_l+0xb9a>
 800d658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d65c:	9010      	str	r0, [sp, #64]	; 0x40
 800d65e:	9311      	str	r3, [sp, #68]	; 0x44
 800d660:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d664:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d66a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d66c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d670:	1a9b      	subs	r3, r3, r2
 800d672:	9309      	str	r3, [sp, #36]	; 0x24
 800d674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d678:	eeb0 0a48 	vmov.f32	s0, s16
 800d67c:	eef0 0a68 	vmov.f32	s1, s17
 800d680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d684:	f001 fe4a 	bl	800f31c <__ulp>
 800d688:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d68c:	ec53 2b10 	vmov	r2, r3, d0
 800d690:	f7f2 ffba 	bl	8000608 <__aeabi_dmul>
 800d694:	ec53 2b18 	vmov	r2, r3, d8
 800d698:	f7f2 fe00 	bl	800029c <__adddf3>
 800d69c:	4682      	mov	sl, r0
 800d69e:	468b      	mov	fp, r1
 800d6a0:	e78d      	b.n	800d5be <_strtod_l+0xab6>
 800d6a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d6a6:	e7db      	b.n	800d660 <_strtod_l+0xb58>
 800d6a8:	a311      	add	r3, pc, #68	; (adr r3, 800d6f0 <_strtod_l+0xbe8>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f3 fa1d 	bl	8000aec <__aeabi_dcmplt>
 800d6b2:	e7b2      	b.n	800d61a <_strtod_l+0xb12>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	f7ff ba6b 	b.w	800cb98 <_strtod_l+0x90>
 800d6c2:	2a65      	cmp	r2, #101	; 0x65
 800d6c4:	f43f ab5f 	beq.w	800cd86 <_strtod_l+0x27e>
 800d6c8:	2a45      	cmp	r2, #69	; 0x45
 800d6ca:	f43f ab5c 	beq.w	800cd86 <_strtod_l+0x27e>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	f7ff bb94 	b.w	800cdfc <_strtod_l+0x2f4>
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	94a03595 	.word	0x94a03595
 800d6dc:	3fdfffff 	.word	0x3fdfffff
 800d6e0:	35afe535 	.word	0x35afe535
 800d6e4:	3fe00000 	.word	0x3fe00000
 800d6e8:	ffc00000 	.word	0xffc00000
 800d6ec:	41dfffff 	.word	0x41dfffff
 800d6f0:	94a03595 	.word	0x94a03595
 800d6f4:	3fcfffff 	.word	0x3fcfffff
 800d6f8:	3ff00000 	.word	0x3ff00000
 800d6fc:	7ff00000 	.word	0x7ff00000
 800d700:	7fe00000 	.word	0x7fe00000
 800d704:	7c9fffff 	.word	0x7c9fffff
 800d708:	3fe00000 	.word	0x3fe00000
 800d70c:	bff00000 	.word	0xbff00000
 800d710:	7fefffff 	.word	0x7fefffff

0800d714 <_strtod_r>:
 800d714:	4b01      	ldr	r3, [pc, #4]	; (800d71c <_strtod_r+0x8>)
 800d716:	f7ff b9f7 	b.w	800cb08 <_strtod_l>
 800d71a:	bf00      	nop
 800d71c:	200002a4 	.word	0x200002a4

0800d720 <_strtol_l.constprop.0>:
 800d720:	2b01      	cmp	r3, #1
 800d722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d726:	d001      	beq.n	800d72c <_strtol_l.constprop.0+0xc>
 800d728:	2b24      	cmp	r3, #36	; 0x24
 800d72a:	d906      	bls.n	800d73a <_strtol_l.constprop.0+0x1a>
 800d72c:	f7fe faee 	bl	800bd0c <__errno>
 800d730:	2316      	movs	r3, #22
 800d732:	6003      	str	r3, [r0, #0]
 800d734:	2000      	movs	r0, #0
 800d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d820 <_strtol_l.constprop.0+0x100>
 800d73e:	460d      	mov	r5, r1
 800d740:	462e      	mov	r6, r5
 800d742:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d746:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d74a:	f017 0708 	ands.w	r7, r7, #8
 800d74e:	d1f7      	bne.n	800d740 <_strtol_l.constprop.0+0x20>
 800d750:	2c2d      	cmp	r4, #45	; 0x2d
 800d752:	d132      	bne.n	800d7ba <_strtol_l.constprop.0+0x9a>
 800d754:	782c      	ldrb	r4, [r5, #0]
 800d756:	2701      	movs	r7, #1
 800d758:	1cb5      	adds	r5, r6, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d05b      	beq.n	800d816 <_strtol_l.constprop.0+0xf6>
 800d75e:	2b10      	cmp	r3, #16
 800d760:	d109      	bne.n	800d776 <_strtol_l.constprop.0+0x56>
 800d762:	2c30      	cmp	r4, #48	; 0x30
 800d764:	d107      	bne.n	800d776 <_strtol_l.constprop.0+0x56>
 800d766:	782c      	ldrb	r4, [r5, #0]
 800d768:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d76c:	2c58      	cmp	r4, #88	; 0x58
 800d76e:	d14d      	bne.n	800d80c <_strtol_l.constprop.0+0xec>
 800d770:	786c      	ldrb	r4, [r5, #1]
 800d772:	2310      	movs	r3, #16
 800d774:	3502      	adds	r5, #2
 800d776:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d77a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d77e:	f04f 0c00 	mov.w	ip, #0
 800d782:	fbb8 f9f3 	udiv	r9, r8, r3
 800d786:	4666      	mov	r6, ip
 800d788:	fb03 8a19 	mls	sl, r3, r9, r8
 800d78c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d790:	f1be 0f09 	cmp.w	lr, #9
 800d794:	d816      	bhi.n	800d7c4 <_strtol_l.constprop.0+0xa4>
 800d796:	4674      	mov	r4, lr
 800d798:	42a3      	cmp	r3, r4
 800d79a:	dd24      	ble.n	800d7e6 <_strtol_l.constprop.0+0xc6>
 800d79c:	f1bc 0f00 	cmp.w	ip, #0
 800d7a0:	db1e      	blt.n	800d7e0 <_strtol_l.constprop.0+0xc0>
 800d7a2:	45b1      	cmp	r9, r6
 800d7a4:	d31c      	bcc.n	800d7e0 <_strtol_l.constprop.0+0xc0>
 800d7a6:	d101      	bne.n	800d7ac <_strtol_l.constprop.0+0x8c>
 800d7a8:	45a2      	cmp	sl, r4
 800d7aa:	db19      	blt.n	800d7e0 <_strtol_l.constprop.0+0xc0>
 800d7ac:	fb06 4603 	mla	r6, r6, r3, r4
 800d7b0:	f04f 0c01 	mov.w	ip, #1
 800d7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7b8:	e7e8      	b.n	800d78c <_strtol_l.constprop.0+0x6c>
 800d7ba:	2c2b      	cmp	r4, #43	; 0x2b
 800d7bc:	bf04      	itt	eq
 800d7be:	782c      	ldrbeq	r4, [r5, #0]
 800d7c0:	1cb5      	addeq	r5, r6, #2
 800d7c2:	e7ca      	b.n	800d75a <_strtol_l.constprop.0+0x3a>
 800d7c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d7c8:	f1be 0f19 	cmp.w	lr, #25
 800d7cc:	d801      	bhi.n	800d7d2 <_strtol_l.constprop.0+0xb2>
 800d7ce:	3c37      	subs	r4, #55	; 0x37
 800d7d0:	e7e2      	b.n	800d798 <_strtol_l.constprop.0+0x78>
 800d7d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d7d6:	f1be 0f19 	cmp.w	lr, #25
 800d7da:	d804      	bhi.n	800d7e6 <_strtol_l.constprop.0+0xc6>
 800d7dc:	3c57      	subs	r4, #87	; 0x57
 800d7de:	e7db      	b.n	800d798 <_strtol_l.constprop.0+0x78>
 800d7e0:	f04f 3cff 	mov.w	ip, #4294967295
 800d7e4:	e7e6      	b.n	800d7b4 <_strtol_l.constprop.0+0x94>
 800d7e6:	f1bc 0f00 	cmp.w	ip, #0
 800d7ea:	da05      	bge.n	800d7f8 <_strtol_l.constprop.0+0xd8>
 800d7ec:	2322      	movs	r3, #34	; 0x22
 800d7ee:	6003      	str	r3, [r0, #0]
 800d7f0:	4646      	mov	r6, r8
 800d7f2:	b942      	cbnz	r2, 800d806 <_strtol_l.constprop.0+0xe6>
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	e79e      	b.n	800d736 <_strtol_l.constprop.0+0x16>
 800d7f8:	b107      	cbz	r7, 800d7fc <_strtol_l.constprop.0+0xdc>
 800d7fa:	4276      	negs	r6, r6
 800d7fc:	2a00      	cmp	r2, #0
 800d7fe:	d0f9      	beq.n	800d7f4 <_strtol_l.constprop.0+0xd4>
 800d800:	f1bc 0f00 	cmp.w	ip, #0
 800d804:	d000      	beq.n	800d808 <_strtol_l.constprop.0+0xe8>
 800d806:	1e69      	subs	r1, r5, #1
 800d808:	6011      	str	r1, [r2, #0]
 800d80a:	e7f3      	b.n	800d7f4 <_strtol_l.constprop.0+0xd4>
 800d80c:	2430      	movs	r4, #48	; 0x30
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1b1      	bne.n	800d776 <_strtol_l.constprop.0+0x56>
 800d812:	2308      	movs	r3, #8
 800d814:	e7af      	b.n	800d776 <_strtol_l.constprop.0+0x56>
 800d816:	2c30      	cmp	r4, #48	; 0x30
 800d818:	d0a5      	beq.n	800d766 <_strtol_l.constprop.0+0x46>
 800d81a:	230a      	movs	r3, #10
 800d81c:	e7ab      	b.n	800d776 <_strtol_l.constprop.0+0x56>
 800d81e:	bf00      	nop
 800d820:	08012df9 	.word	0x08012df9

0800d824 <_strtol_r>:
 800d824:	f7ff bf7c 	b.w	800d720 <_strtol_l.constprop.0>

0800d828 <quorem>:
 800d828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	6903      	ldr	r3, [r0, #16]
 800d82e:	690c      	ldr	r4, [r1, #16]
 800d830:	42a3      	cmp	r3, r4
 800d832:	4607      	mov	r7, r0
 800d834:	f2c0 8081 	blt.w	800d93a <quorem+0x112>
 800d838:	3c01      	subs	r4, #1
 800d83a:	f101 0814 	add.w	r8, r1, #20
 800d83e:	f100 0514 	add.w	r5, r0, #20
 800d842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d84c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d850:	3301      	adds	r3, #1
 800d852:	429a      	cmp	r2, r3
 800d854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d85c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d860:	d331      	bcc.n	800d8c6 <quorem+0x9e>
 800d862:	f04f 0e00 	mov.w	lr, #0
 800d866:	4640      	mov	r0, r8
 800d868:	46ac      	mov	ip, r5
 800d86a:	46f2      	mov	sl, lr
 800d86c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d870:	b293      	uxth	r3, r2
 800d872:	fb06 e303 	mla	r3, r6, r3, lr
 800d876:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	ebaa 0303 	sub.w	r3, sl, r3
 800d880:	f8dc a000 	ldr.w	sl, [ip]
 800d884:	0c12      	lsrs	r2, r2, #16
 800d886:	fa13 f38a 	uxtah	r3, r3, sl
 800d88a:	fb06 e202 	mla	r2, r6, r2, lr
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	9b00      	ldr	r3, [sp, #0]
 800d892:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d896:	b292      	uxth	r2, r2
 800d898:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d89c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d8a4:	4581      	cmp	r9, r0
 800d8a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8aa:	f84c 3b04 	str.w	r3, [ip], #4
 800d8ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d8b2:	d2db      	bcs.n	800d86c <quorem+0x44>
 800d8b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d8b8:	b92b      	cbnz	r3, 800d8c6 <quorem+0x9e>
 800d8ba:	9b01      	ldr	r3, [sp, #4]
 800d8bc:	3b04      	subs	r3, #4
 800d8be:	429d      	cmp	r5, r3
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	d32e      	bcc.n	800d922 <quorem+0xfa>
 800d8c4:	613c      	str	r4, [r7, #16]
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	f001 fc82 	bl	800f1d0 <__mcmp>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	db24      	blt.n	800d91a <quorem+0xf2>
 800d8d0:	3601      	adds	r6, #1
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f04f 0c00 	mov.w	ip, #0
 800d8d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8dc:	f8d0 e000 	ldr.w	lr, [r0]
 800d8e0:	b293      	uxth	r3, r2
 800d8e2:	ebac 0303 	sub.w	r3, ip, r3
 800d8e6:	0c12      	lsrs	r2, r2, #16
 800d8e8:	fa13 f38e 	uxtah	r3, r3, lr
 800d8ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d8f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8fa:	45c1      	cmp	r9, r8
 800d8fc:	f840 3b04 	str.w	r3, [r0], #4
 800d900:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d904:	d2e8      	bcs.n	800d8d8 <quorem+0xb0>
 800d906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d90e:	b922      	cbnz	r2, 800d91a <quorem+0xf2>
 800d910:	3b04      	subs	r3, #4
 800d912:	429d      	cmp	r5, r3
 800d914:	461a      	mov	r2, r3
 800d916:	d30a      	bcc.n	800d92e <quorem+0x106>
 800d918:	613c      	str	r4, [r7, #16]
 800d91a:	4630      	mov	r0, r6
 800d91c:	b003      	add	sp, #12
 800d91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d922:	6812      	ldr	r2, [r2, #0]
 800d924:	3b04      	subs	r3, #4
 800d926:	2a00      	cmp	r2, #0
 800d928:	d1cc      	bne.n	800d8c4 <quorem+0x9c>
 800d92a:	3c01      	subs	r4, #1
 800d92c:	e7c7      	b.n	800d8be <quorem+0x96>
 800d92e:	6812      	ldr	r2, [r2, #0]
 800d930:	3b04      	subs	r3, #4
 800d932:	2a00      	cmp	r2, #0
 800d934:	d1f0      	bne.n	800d918 <quorem+0xf0>
 800d936:	3c01      	subs	r4, #1
 800d938:	e7eb      	b.n	800d912 <quorem+0xea>
 800d93a:	2000      	movs	r0, #0
 800d93c:	e7ee      	b.n	800d91c <quorem+0xf4>
	...

0800d940 <_dtoa_r>:
 800d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d944:	ed2d 8b04 	vpush	{d8-d9}
 800d948:	ec57 6b10 	vmov	r6, r7, d0
 800d94c:	b093      	sub	sp, #76	; 0x4c
 800d94e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d954:	9106      	str	r1, [sp, #24]
 800d956:	ee10 aa10 	vmov	sl, s0
 800d95a:	4604      	mov	r4, r0
 800d95c:	9209      	str	r2, [sp, #36]	; 0x24
 800d95e:	930c      	str	r3, [sp, #48]	; 0x30
 800d960:	46bb      	mov	fp, r7
 800d962:	b975      	cbnz	r5, 800d982 <_dtoa_r+0x42>
 800d964:	2010      	movs	r0, #16
 800d966:	f001 f94d 	bl	800ec04 <malloc>
 800d96a:	4602      	mov	r2, r0
 800d96c:	6260      	str	r0, [r4, #36]	; 0x24
 800d96e:	b920      	cbnz	r0, 800d97a <_dtoa_r+0x3a>
 800d970:	4ba7      	ldr	r3, [pc, #668]	; (800dc10 <_dtoa_r+0x2d0>)
 800d972:	21ea      	movs	r1, #234	; 0xea
 800d974:	48a7      	ldr	r0, [pc, #668]	; (800dc14 <_dtoa_r+0x2d4>)
 800d976:	f002 f8ad 	bl	800fad4 <__assert_func>
 800d97a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d97e:	6005      	str	r5, [r0, #0]
 800d980:	60c5      	str	r5, [r0, #12]
 800d982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d984:	6819      	ldr	r1, [r3, #0]
 800d986:	b151      	cbz	r1, 800d99e <_dtoa_r+0x5e>
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	604a      	str	r2, [r1, #4]
 800d98c:	2301      	movs	r3, #1
 800d98e:	4093      	lsls	r3, r2
 800d990:	608b      	str	r3, [r1, #8]
 800d992:	4620      	mov	r0, r4
 800d994:	f001 f990 	bl	800ecb8 <_Bfree>
 800d998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d99a:	2200      	movs	r2, #0
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	1e3b      	subs	r3, r7, #0
 800d9a0:	bfaa      	itet	ge
 800d9a2:	2300      	movge	r3, #0
 800d9a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d9a8:	f8c8 3000 	strge.w	r3, [r8]
 800d9ac:	4b9a      	ldr	r3, [pc, #616]	; (800dc18 <_dtoa_r+0x2d8>)
 800d9ae:	bfbc      	itt	lt
 800d9b0:	2201      	movlt	r2, #1
 800d9b2:	f8c8 2000 	strlt.w	r2, [r8]
 800d9b6:	ea33 030b 	bics.w	r3, r3, fp
 800d9ba:	d11b      	bne.n	800d9f4 <_dtoa_r+0xb4>
 800d9bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9be:	f242 730f 	movw	r3, #9999	; 0x270f
 800d9c2:	6013      	str	r3, [r2, #0]
 800d9c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9c8:	4333      	orrs	r3, r6
 800d9ca:	f000 8592 	beq.w	800e4f2 <_dtoa_r+0xbb2>
 800d9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9d0:	b963      	cbnz	r3, 800d9ec <_dtoa_r+0xac>
 800d9d2:	4b92      	ldr	r3, [pc, #584]	; (800dc1c <_dtoa_r+0x2dc>)
 800d9d4:	e022      	b.n	800da1c <_dtoa_r+0xdc>
 800d9d6:	4b92      	ldr	r3, [pc, #584]	; (800dc20 <_dtoa_r+0x2e0>)
 800d9d8:	9301      	str	r3, [sp, #4]
 800d9da:	3308      	adds	r3, #8
 800d9dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	9801      	ldr	r0, [sp, #4]
 800d9e2:	b013      	add	sp, #76	; 0x4c
 800d9e4:	ecbd 8b04 	vpop	{d8-d9}
 800d9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ec:	4b8b      	ldr	r3, [pc, #556]	; (800dc1c <_dtoa_r+0x2dc>)
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	3303      	adds	r3, #3
 800d9f2:	e7f3      	b.n	800d9dc <_dtoa_r+0x9c>
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	4659      	mov	r1, fp
 800d9fc:	f7f3 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 800da00:	ec4b ab19 	vmov	d9, sl, fp
 800da04:	4680      	mov	r8, r0
 800da06:	b158      	cbz	r0, 800da20 <_dtoa_r+0xe0>
 800da08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da0a:	2301      	movs	r3, #1
 800da0c:	6013      	str	r3, [r2, #0]
 800da0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 856b 	beq.w	800e4ec <_dtoa_r+0xbac>
 800da16:	4883      	ldr	r0, [pc, #524]	; (800dc24 <_dtoa_r+0x2e4>)
 800da18:	6018      	str	r0, [r3, #0]
 800da1a:	1e43      	subs	r3, r0, #1
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	e7df      	b.n	800d9e0 <_dtoa_r+0xa0>
 800da20:	ec4b ab10 	vmov	d0, sl, fp
 800da24:	aa10      	add	r2, sp, #64	; 0x40
 800da26:	a911      	add	r1, sp, #68	; 0x44
 800da28:	4620      	mov	r0, r4
 800da2a:	f001 fcf3 	bl	800f414 <__d2b>
 800da2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800da32:	ee08 0a10 	vmov	s16, r0
 800da36:	2d00      	cmp	r5, #0
 800da38:	f000 8084 	beq.w	800db44 <_dtoa_r+0x204>
 800da3c:	ee19 3a90 	vmov	r3, s19
 800da40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800da48:	4656      	mov	r6, sl
 800da4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800da4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800da56:	4b74      	ldr	r3, [pc, #464]	; (800dc28 <_dtoa_r+0x2e8>)
 800da58:	2200      	movs	r2, #0
 800da5a:	4630      	mov	r0, r6
 800da5c:	4639      	mov	r1, r7
 800da5e:	f7f2 fc1b 	bl	8000298 <__aeabi_dsub>
 800da62:	a365      	add	r3, pc, #404	; (adr r3, 800dbf8 <_dtoa_r+0x2b8>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f7f2 fdce 	bl	8000608 <__aeabi_dmul>
 800da6c:	a364      	add	r3, pc, #400	; (adr r3, 800dc00 <_dtoa_r+0x2c0>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	f7f2 fc13 	bl	800029c <__adddf3>
 800da76:	4606      	mov	r6, r0
 800da78:	4628      	mov	r0, r5
 800da7a:	460f      	mov	r7, r1
 800da7c:	f7f2 fd5a 	bl	8000534 <__aeabi_i2d>
 800da80:	a361      	add	r3, pc, #388	; (adr r3, 800dc08 <_dtoa_r+0x2c8>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fdbf 	bl	8000608 <__aeabi_dmul>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fc03 	bl	800029c <__adddf3>
 800da96:	4606      	mov	r6, r0
 800da98:	460f      	mov	r7, r1
 800da9a:	f7f3 f865 	bl	8000b68 <__aeabi_d2iz>
 800da9e:	2200      	movs	r2, #0
 800daa0:	9000      	str	r0, [sp, #0]
 800daa2:	2300      	movs	r3, #0
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f3 f820 	bl	8000aec <__aeabi_dcmplt>
 800daac:	b150      	cbz	r0, 800dac4 <_dtoa_r+0x184>
 800daae:	9800      	ldr	r0, [sp, #0]
 800dab0:	f7f2 fd40 	bl	8000534 <__aeabi_i2d>
 800dab4:	4632      	mov	r2, r6
 800dab6:	463b      	mov	r3, r7
 800dab8:	f7f3 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 800dabc:	b910      	cbnz	r0, 800dac4 <_dtoa_r+0x184>
 800dabe:	9b00      	ldr	r3, [sp, #0]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	9b00      	ldr	r3, [sp, #0]
 800dac6:	2b16      	cmp	r3, #22
 800dac8:	d85a      	bhi.n	800db80 <_dtoa_r+0x240>
 800daca:	9a00      	ldr	r2, [sp, #0]
 800dacc:	4b57      	ldr	r3, [pc, #348]	; (800dc2c <_dtoa_r+0x2ec>)
 800dace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad6:	ec51 0b19 	vmov	r0, r1, d9
 800dada:	f7f3 f807 	bl	8000aec <__aeabi_dcmplt>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d050      	beq.n	800db84 <_dtoa_r+0x244>
 800dae2:	9b00      	ldr	r3, [sp, #0]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	2300      	movs	r3, #0
 800daea:	930b      	str	r3, [sp, #44]	; 0x2c
 800daec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daee:	1b5d      	subs	r5, r3, r5
 800daf0:	1e6b      	subs	r3, r5, #1
 800daf2:	9305      	str	r3, [sp, #20]
 800daf4:	bf45      	ittet	mi
 800daf6:	f1c5 0301 	rsbmi	r3, r5, #1
 800dafa:	9304      	strmi	r3, [sp, #16]
 800dafc:	2300      	movpl	r3, #0
 800dafe:	2300      	movmi	r3, #0
 800db00:	bf4c      	ite	mi
 800db02:	9305      	strmi	r3, [sp, #20]
 800db04:	9304      	strpl	r3, [sp, #16]
 800db06:	9b00      	ldr	r3, [sp, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	db3d      	blt.n	800db88 <_dtoa_r+0x248>
 800db0c:	9b05      	ldr	r3, [sp, #20]
 800db0e:	9a00      	ldr	r2, [sp, #0]
 800db10:	920a      	str	r2, [sp, #40]	; 0x28
 800db12:	4413      	add	r3, r2
 800db14:	9305      	str	r3, [sp, #20]
 800db16:	2300      	movs	r3, #0
 800db18:	9307      	str	r3, [sp, #28]
 800db1a:	9b06      	ldr	r3, [sp, #24]
 800db1c:	2b09      	cmp	r3, #9
 800db1e:	f200 8089 	bhi.w	800dc34 <_dtoa_r+0x2f4>
 800db22:	2b05      	cmp	r3, #5
 800db24:	bfc4      	itt	gt
 800db26:	3b04      	subgt	r3, #4
 800db28:	9306      	strgt	r3, [sp, #24]
 800db2a:	9b06      	ldr	r3, [sp, #24]
 800db2c:	f1a3 0302 	sub.w	r3, r3, #2
 800db30:	bfcc      	ite	gt
 800db32:	2500      	movgt	r5, #0
 800db34:	2501      	movle	r5, #1
 800db36:	2b03      	cmp	r3, #3
 800db38:	f200 8087 	bhi.w	800dc4a <_dtoa_r+0x30a>
 800db3c:	e8df f003 	tbb	[pc, r3]
 800db40:	59383a2d 	.word	0x59383a2d
 800db44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800db48:	441d      	add	r5, r3
 800db4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800db4e:	2b20      	cmp	r3, #32
 800db50:	bfc1      	itttt	gt
 800db52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800db56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800db5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800db5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800db62:	bfda      	itte	le
 800db64:	f1c3 0320 	rsble	r3, r3, #32
 800db68:	fa06 f003 	lslle.w	r0, r6, r3
 800db6c:	4318      	orrgt	r0, r3
 800db6e:	f7f2 fcd1 	bl	8000514 <__aeabi_ui2d>
 800db72:	2301      	movs	r3, #1
 800db74:	4606      	mov	r6, r0
 800db76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800db7a:	3d01      	subs	r5, #1
 800db7c:	930e      	str	r3, [sp, #56]	; 0x38
 800db7e:	e76a      	b.n	800da56 <_dtoa_r+0x116>
 800db80:	2301      	movs	r3, #1
 800db82:	e7b2      	b.n	800daea <_dtoa_r+0x1aa>
 800db84:	900b      	str	r0, [sp, #44]	; 0x2c
 800db86:	e7b1      	b.n	800daec <_dtoa_r+0x1ac>
 800db88:	9b04      	ldr	r3, [sp, #16]
 800db8a:	9a00      	ldr	r2, [sp, #0]
 800db8c:	1a9b      	subs	r3, r3, r2
 800db8e:	9304      	str	r3, [sp, #16]
 800db90:	4253      	negs	r3, r2
 800db92:	9307      	str	r3, [sp, #28]
 800db94:	2300      	movs	r3, #0
 800db96:	930a      	str	r3, [sp, #40]	; 0x28
 800db98:	e7bf      	b.n	800db1a <_dtoa_r+0x1da>
 800db9a:	2300      	movs	r3, #0
 800db9c:	9308      	str	r3, [sp, #32]
 800db9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dc55      	bgt.n	800dc50 <_dtoa_r+0x310>
 800dba4:	2301      	movs	r3, #1
 800dba6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	9209      	str	r2, [sp, #36]	; 0x24
 800dbae:	e00c      	b.n	800dbca <_dtoa_r+0x28a>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e7f3      	b.n	800db9c <_dtoa_r+0x25c>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbb8:	9308      	str	r3, [sp, #32]
 800dbba:	9b00      	ldr	r3, [sp, #0]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	9302      	str	r3, [sp, #8]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	9303      	str	r3, [sp, #12]
 800dbc6:	bfb8      	it	lt
 800dbc8:	2301      	movlt	r3, #1
 800dbca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dbcc:	2200      	movs	r2, #0
 800dbce:	6042      	str	r2, [r0, #4]
 800dbd0:	2204      	movs	r2, #4
 800dbd2:	f102 0614 	add.w	r6, r2, #20
 800dbd6:	429e      	cmp	r6, r3
 800dbd8:	6841      	ldr	r1, [r0, #4]
 800dbda:	d93d      	bls.n	800dc58 <_dtoa_r+0x318>
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f001 f82b 	bl	800ec38 <_Balloc>
 800dbe2:	9001      	str	r0, [sp, #4]
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d13b      	bne.n	800dc60 <_dtoa_r+0x320>
 800dbe8:	4b11      	ldr	r3, [pc, #68]	; (800dc30 <_dtoa_r+0x2f0>)
 800dbea:	4602      	mov	r2, r0
 800dbec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dbf0:	e6c0      	b.n	800d974 <_dtoa_r+0x34>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e7df      	b.n	800dbb6 <_dtoa_r+0x276>
 800dbf6:	bf00      	nop
 800dbf8:	636f4361 	.word	0x636f4361
 800dbfc:	3fd287a7 	.word	0x3fd287a7
 800dc00:	8b60c8b3 	.word	0x8b60c8b3
 800dc04:	3fc68a28 	.word	0x3fc68a28
 800dc08:	509f79fb 	.word	0x509f79fb
 800dc0c:	3fd34413 	.word	0x3fd34413
 800dc10:	08012f06 	.word	0x08012f06
 800dc14:	08012f1d 	.word	0x08012f1d
 800dc18:	7ff00000 	.word	0x7ff00000
 800dc1c:	08012f02 	.word	0x08012f02
 800dc20:	08012ef9 	.word	0x08012ef9
 800dc24:	08012d79 	.word	0x08012d79
 800dc28:	3ff80000 	.word	0x3ff80000
 800dc2c:	08013088 	.word	0x08013088
 800dc30:	08012f78 	.word	0x08012f78
 800dc34:	2501      	movs	r5, #1
 800dc36:	2300      	movs	r3, #0
 800dc38:	9306      	str	r3, [sp, #24]
 800dc3a:	9508      	str	r5, [sp, #32]
 800dc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc44:	2200      	movs	r2, #0
 800dc46:	2312      	movs	r3, #18
 800dc48:	e7b0      	b.n	800dbac <_dtoa_r+0x26c>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	9308      	str	r3, [sp, #32]
 800dc4e:	e7f5      	b.n	800dc3c <_dtoa_r+0x2fc>
 800dc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc56:	e7b8      	b.n	800dbca <_dtoa_r+0x28a>
 800dc58:	3101      	adds	r1, #1
 800dc5a:	6041      	str	r1, [r0, #4]
 800dc5c:	0052      	lsls	r2, r2, #1
 800dc5e:	e7b8      	b.n	800dbd2 <_dtoa_r+0x292>
 800dc60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc62:	9a01      	ldr	r2, [sp, #4]
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	2b0e      	cmp	r3, #14
 800dc6a:	f200 809d 	bhi.w	800dda8 <_dtoa_r+0x468>
 800dc6e:	2d00      	cmp	r5, #0
 800dc70:	f000 809a 	beq.w	800dda8 <_dtoa_r+0x468>
 800dc74:	9b00      	ldr	r3, [sp, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dd32      	ble.n	800dce0 <_dtoa_r+0x3a0>
 800dc7a:	4ab7      	ldr	r2, [pc, #732]	; (800df58 <_dtoa_r+0x618>)
 800dc7c:	f003 030f 	and.w	r3, r3, #15
 800dc80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dc84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc88:	9b00      	ldr	r3, [sp, #0]
 800dc8a:	05d8      	lsls	r0, r3, #23
 800dc8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dc90:	d516      	bpl.n	800dcc0 <_dtoa_r+0x380>
 800dc92:	4bb2      	ldr	r3, [pc, #712]	; (800df5c <_dtoa_r+0x61c>)
 800dc94:	ec51 0b19 	vmov	r0, r1, d9
 800dc98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc9c:	f7f2 fdde 	bl	800085c <__aeabi_ddiv>
 800dca0:	f007 070f 	and.w	r7, r7, #15
 800dca4:	4682      	mov	sl, r0
 800dca6:	468b      	mov	fp, r1
 800dca8:	2503      	movs	r5, #3
 800dcaa:	4eac      	ldr	r6, [pc, #688]	; (800df5c <_dtoa_r+0x61c>)
 800dcac:	b957      	cbnz	r7, 800dcc4 <_dtoa_r+0x384>
 800dcae:	4642      	mov	r2, r8
 800dcb0:	464b      	mov	r3, r9
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	4659      	mov	r1, fp
 800dcb6:	f7f2 fdd1 	bl	800085c <__aeabi_ddiv>
 800dcba:	4682      	mov	sl, r0
 800dcbc:	468b      	mov	fp, r1
 800dcbe:	e028      	b.n	800dd12 <_dtoa_r+0x3d2>
 800dcc0:	2502      	movs	r5, #2
 800dcc2:	e7f2      	b.n	800dcaa <_dtoa_r+0x36a>
 800dcc4:	07f9      	lsls	r1, r7, #31
 800dcc6:	d508      	bpl.n	800dcda <_dtoa_r+0x39a>
 800dcc8:	4640      	mov	r0, r8
 800dcca:	4649      	mov	r1, r9
 800dccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dcd0:	f7f2 fc9a 	bl	8000608 <__aeabi_dmul>
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	4680      	mov	r8, r0
 800dcd8:	4689      	mov	r9, r1
 800dcda:	107f      	asrs	r7, r7, #1
 800dcdc:	3608      	adds	r6, #8
 800dcde:	e7e5      	b.n	800dcac <_dtoa_r+0x36c>
 800dce0:	f000 809b 	beq.w	800de1a <_dtoa_r+0x4da>
 800dce4:	9b00      	ldr	r3, [sp, #0]
 800dce6:	4f9d      	ldr	r7, [pc, #628]	; (800df5c <_dtoa_r+0x61c>)
 800dce8:	425e      	negs	r6, r3
 800dcea:	4b9b      	ldr	r3, [pc, #620]	; (800df58 <_dtoa_r+0x618>)
 800dcec:	f006 020f 	and.w	r2, r6, #15
 800dcf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	ec51 0b19 	vmov	r0, r1, d9
 800dcfc:	f7f2 fc84 	bl	8000608 <__aeabi_dmul>
 800dd00:	1136      	asrs	r6, r6, #4
 800dd02:	4682      	mov	sl, r0
 800dd04:	468b      	mov	fp, r1
 800dd06:	2300      	movs	r3, #0
 800dd08:	2502      	movs	r5, #2
 800dd0a:	2e00      	cmp	r6, #0
 800dd0c:	d17a      	bne.n	800de04 <_dtoa_r+0x4c4>
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1d3      	bne.n	800dcba <_dtoa_r+0x37a>
 800dd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 8082 	beq.w	800de1e <_dtoa_r+0x4de>
 800dd1a:	4b91      	ldr	r3, [pc, #580]	; (800df60 <_dtoa_r+0x620>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4650      	mov	r0, sl
 800dd20:	4659      	mov	r1, fp
 800dd22:	f7f2 fee3 	bl	8000aec <__aeabi_dcmplt>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d079      	beq.n	800de1e <_dtoa_r+0x4de>
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d076      	beq.n	800de1e <_dtoa_r+0x4de>
 800dd30:	9b02      	ldr	r3, [sp, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	dd36      	ble.n	800dda4 <_dtoa_r+0x464>
 800dd36:	9b00      	ldr	r3, [sp, #0]
 800dd38:	4650      	mov	r0, sl
 800dd3a:	4659      	mov	r1, fp
 800dd3c:	1e5f      	subs	r7, r3, #1
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4b88      	ldr	r3, [pc, #544]	; (800df64 <_dtoa_r+0x624>)
 800dd42:	f7f2 fc61 	bl	8000608 <__aeabi_dmul>
 800dd46:	9e02      	ldr	r6, [sp, #8]
 800dd48:	4682      	mov	sl, r0
 800dd4a:	468b      	mov	fp, r1
 800dd4c:	3501      	adds	r5, #1
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f7f2 fbf0 	bl	8000534 <__aeabi_i2d>
 800dd54:	4652      	mov	r2, sl
 800dd56:	465b      	mov	r3, fp
 800dd58:	f7f2 fc56 	bl	8000608 <__aeabi_dmul>
 800dd5c:	4b82      	ldr	r3, [pc, #520]	; (800df68 <_dtoa_r+0x628>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f7f2 fa9c 	bl	800029c <__adddf3>
 800dd64:	46d0      	mov	r8, sl
 800dd66:	46d9      	mov	r9, fp
 800dd68:	4682      	mov	sl, r0
 800dd6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dd6e:	2e00      	cmp	r6, #0
 800dd70:	d158      	bne.n	800de24 <_dtoa_r+0x4e4>
 800dd72:	4b7e      	ldr	r3, [pc, #504]	; (800df6c <_dtoa_r+0x62c>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4640      	mov	r0, r8
 800dd78:	4649      	mov	r1, r9
 800dd7a:	f7f2 fa8d 	bl	8000298 <__aeabi_dsub>
 800dd7e:	4652      	mov	r2, sl
 800dd80:	465b      	mov	r3, fp
 800dd82:	4680      	mov	r8, r0
 800dd84:	4689      	mov	r9, r1
 800dd86:	f7f2 fecf 	bl	8000b28 <__aeabi_dcmpgt>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	f040 8295 	bne.w	800e2ba <_dtoa_r+0x97a>
 800dd90:	4652      	mov	r2, sl
 800dd92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dd96:	4640      	mov	r0, r8
 800dd98:	4649      	mov	r1, r9
 800dd9a:	f7f2 fea7 	bl	8000aec <__aeabi_dcmplt>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	f040 8289 	bne.w	800e2b6 <_dtoa_r+0x976>
 800dda4:	ec5b ab19 	vmov	sl, fp, d9
 800dda8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f2c0 8148 	blt.w	800e040 <_dtoa_r+0x700>
 800ddb0:	9a00      	ldr	r2, [sp, #0]
 800ddb2:	2a0e      	cmp	r2, #14
 800ddb4:	f300 8144 	bgt.w	800e040 <_dtoa_r+0x700>
 800ddb8:	4b67      	ldr	r3, [pc, #412]	; (800df58 <_dtoa_r+0x618>)
 800ddba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f280 80d5 	bge.w	800df74 <_dtoa_r+0x634>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f300 80d1 	bgt.w	800df74 <_dtoa_r+0x634>
 800ddd2:	f040 826f 	bne.w	800e2b4 <_dtoa_r+0x974>
 800ddd6:	4b65      	ldr	r3, [pc, #404]	; (800df6c <_dtoa_r+0x62c>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 fc13 	bl	8000608 <__aeabi_dmul>
 800dde2:	4652      	mov	r2, sl
 800dde4:	465b      	mov	r3, fp
 800dde6:	f7f2 fe95 	bl	8000b14 <__aeabi_dcmpge>
 800ddea:	9e03      	ldr	r6, [sp, #12]
 800ddec:	4637      	mov	r7, r6
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f040 8245 	bne.w	800e27e <_dtoa_r+0x93e>
 800ddf4:	9d01      	ldr	r5, [sp, #4]
 800ddf6:	2331      	movs	r3, #49	; 0x31
 800ddf8:	f805 3b01 	strb.w	r3, [r5], #1
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	3301      	adds	r3, #1
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	e240      	b.n	800e286 <_dtoa_r+0x946>
 800de04:	07f2      	lsls	r2, r6, #31
 800de06:	d505      	bpl.n	800de14 <_dtoa_r+0x4d4>
 800de08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de0c:	f7f2 fbfc 	bl	8000608 <__aeabi_dmul>
 800de10:	3501      	adds	r5, #1
 800de12:	2301      	movs	r3, #1
 800de14:	1076      	asrs	r6, r6, #1
 800de16:	3708      	adds	r7, #8
 800de18:	e777      	b.n	800dd0a <_dtoa_r+0x3ca>
 800de1a:	2502      	movs	r5, #2
 800de1c:	e779      	b.n	800dd12 <_dtoa_r+0x3d2>
 800de1e:	9f00      	ldr	r7, [sp, #0]
 800de20:	9e03      	ldr	r6, [sp, #12]
 800de22:	e794      	b.n	800dd4e <_dtoa_r+0x40e>
 800de24:	9901      	ldr	r1, [sp, #4]
 800de26:	4b4c      	ldr	r3, [pc, #304]	; (800df58 <_dtoa_r+0x618>)
 800de28:	4431      	add	r1, r6
 800de2a:	910d      	str	r1, [sp, #52]	; 0x34
 800de2c:	9908      	ldr	r1, [sp, #32]
 800de2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de36:	2900      	cmp	r1, #0
 800de38:	d043      	beq.n	800dec2 <_dtoa_r+0x582>
 800de3a:	494d      	ldr	r1, [pc, #308]	; (800df70 <_dtoa_r+0x630>)
 800de3c:	2000      	movs	r0, #0
 800de3e:	f7f2 fd0d 	bl	800085c <__aeabi_ddiv>
 800de42:	4652      	mov	r2, sl
 800de44:	465b      	mov	r3, fp
 800de46:	f7f2 fa27 	bl	8000298 <__aeabi_dsub>
 800de4a:	9d01      	ldr	r5, [sp, #4]
 800de4c:	4682      	mov	sl, r0
 800de4e:	468b      	mov	fp, r1
 800de50:	4649      	mov	r1, r9
 800de52:	4640      	mov	r0, r8
 800de54:	f7f2 fe88 	bl	8000b68 <__aeabi_d2iz>
 800de58:	4606      	mov	r6, r0
 800de5a:	f7f2 fb6b 	bl	8000534 <__aeabi_i2d>
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	4640      	mov	r0, r8
 800de64:	4649      	mov	r1, r9
 800de66:	f7f2 fa17 	bl	8000298 <__aeabi_dsub>
 800de6a:	3630      	adds	r6, #48	; 0x30
 800de6c:	f805 6b01 	strb.w	r6, [r5], #1
 800de70:	4652      	mov	r2, sl
 800de72:	465b      	mov	r3, fp
 800de74:	4680      	mov	r8, r0
 800de76:	4689      	mov	r9, r1
 800de78:	f7f2 fe38 	bl	8000aec <__aeabi_dcmplt>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d163      	bne.n	800df48 <_dtoa_r+0x608>
 800de80:	4642      	mov	r2, r8
 800de82:	464b      	mov	r3, r9
 800de84:	4936      	ldr	r1, [pc, #216]	; (800df60 <_dtoa_r+0x620>)
 800de86:	2000      	movs	r0, #0
 800de88:	f7f2 fa06 	bl	8000298 <__aeabi_dsub>
 800de8c:	4652      	mov	r2, sl
 800de8e:	465b      	mov	r3, fp
 800de90:	f7f2 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800de94:	2800      	cmp	r0, #0
 800de96:	f040 80b5 	bne.w	800e004 <_dtoa_r+0x6c4>
 800de9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de9c:	429d      	cmp	r5, r3
 800de9e:	d081      	beq.n	800dda4 <_dtoa_r+0x464>
 800dea0:	4b30      	ldr	r3, [pc, #192]	; (800df64 <_dtoa_r+0x624>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	4650      	mov	r0, sl
 800dea6:	4659      	mov	r1, fp
 800dea8:	f7f2 fbae 	bl	8000608 <__aeabi_dmul>
 800deac:	4b2d      	ldr	r3, [pc, #180]	; (800df64 <_dtoa_r+0x624>)
 800deae:	4682      	mov	sl, r0
 800deb0:	468b      	mov	fp, r1
 800deb2:	4640      	mov	r0, r8
 800deb4:	4649      	mov	r1, r9
 800deb6:	2200      	movs	r2, #0
 800deb8:	f7f2 fba6 	bl	8000608 <__aeabi_dmul>
 800debc:	4680      	mov	r8, r0
 800debe:	4689      	mov	r9, r1
 800dec0:	e7c6      	b.n	800de50 <_dtoa_r+0x510>
 800dec2:	4650      	mov	r0, sl
 800dec4:	4659      	mov	r1, fp
 800dec6:	f7f2 fb9f 	bl	8000608 <__aeabi_dmul>
 800deca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800decc:	9d01      	ldr	r5, [sp, #4]
 800dece:	930f      	str	r3, [sp, #60]	; 0x3c
 800ded0:	4682      	mov	sl, r0
 800ded2:	468b      	mov	fp, r1
 800ded4:	4649      	mov	r1, r9
 800ded6:	4640      	mov	r0, r8
 800ded8:	f7f2 fe46 	bl	8000b68 <__aeabi_d2iz>
 800dedc:	4606      	mov	r6, r0
 800dede:	f7f2 fb29 	bl	8000534 <__aeabi_i2d>
 800dee2:	3630      	adds	r6, #48	; 0x30
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4640      	mov	r0, r8
 800deea:	4649      	mov	r1, r9
 800deec:	f7f2 f9d4 	bl	8000298 <__aeabi_dsub>
 800def0:	f805 6b01 	strb.w	r6, [r5], #1
 800def4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800def6:	429d      	cmp	r5, r3
 800def8:	4680      	mov	r8, r0
 800defa:	4689      	mov	r9, r1
 800defc:	f04f 0200 	mov.w	r2, #0
 800df00:	d124      	bne.n	800df4c <_dtoa_r+0x60c>
 800df02:	4b1b      	ldr	r3, [pc, #108]	; (800df70 <_dtoa_r+0x630>)
 800df04:	4650      	mov	r0, sl
 800df06:	4659      	mov	r1, fp
 800df08:	f7f2 f9c8 	bl	800029c <__adddf3>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	4640      	mov	r0, r8
 800df12:	4649      	mov	r1, r9
 800df14:	f7f2 fe08 	bl	8000b28 <__aeabi_dcmpgt>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d173      	bne.n	800e004 <_dtoa_r+0x6c4>
 800df1c:	4652      	mov	r2, sl
 800df1e:	465b      	mov	r3, fp
 800df20:	4913      	ldr	r1, [pc, #76]	; (800df70 <_dtoa_r+0x630>)
 800df22:	2000      	movs	r0, #0
 800df24:	f7f2 f9b8 	bl	8000298 <__aeabi_dsub>
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4640      	mov	r0, r8
 800df2e:	4649      	mov	r1, r9
 800df30:	f7f2 fddc 	bl	8000aec <__aeabi_dcmplt>
 800df34:	2800      	cmp	r0, #0
 800df36:	f43f af35 	beq.w	800dda4 <_dtoa_r+0x464>
 800df3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df3c:	1e6b      	subs	r3, r5, #1
 800df3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df44:	2b30      	cmp	r3, #48	; 0x30
 800df46:	d0f8      	beq.n	800df3a <_dtoa_r+0x5fa>
 800df48:	9700      	str	r7, [sp, #0]
 800df4a:	e049      	b.n	800dfe0 <_dtoa_r+0x6a0>
 800df4c:	4b05      	ldr	r3, [pc, #20]	; (800df64 <_dtoa_r+0x624>)
 800df4e:	f7f2 fb5b 	bl	8000608 <__aeabi_dmul>
 800df52:	4680      	mov	r8, r0
 800df54:	4689      	mov	r9, r1
 800df56:	e7bd      	b.n	800ded4 <_dtoa_r+0x594>
 800df58:	08013088 	.word	0x08013088
 800df5c:	08013060 	.word	0x08013060
 800df60:	3ff00000 	.word	0x3ff00000
 800df64:	40240000 	.word	0x40240000
 800df68:	401c0000 	.word	0x401c0000
 800df6c:	40140000 	.word	0x40140000
 800df70:	3fe00000 	.word	0x3fe00000
 800df74:	9d01      	ldr	r5, [sp, #4]
 800df76:	4656      	mov	r6, sl
 800df78:	465f      	mov	r7, fp
 800df7a:	4642      	mov	r2, r8
 800df7c:	464b      	mov	r3, r9
 800df7e:	4630      	mov	r0, r6
 800df80:	4639      	mov	r1, r7
 800df82:	f7f2 fc6b 	bl	800085c <__aeabi_ddiv>
 800df86:	f7f2 fdef 	bl	8000b68 <__aeabi_d2iz>
 800df8a:	4682      	mov	sl, r0
 800df8c:	f7f2 fad2 	bl	8000534 <__aeabi_i2d>
 800df90:	4642      	mov	r2, r8
 800df92:	464b      	mov	r3, r9
 800df94:	f7f2 fb38 	bl	8000608 <__aeabi_dmul>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4630      	mov	r0, r6
 800df9e:	4639      	mov	r1, r7
 800dfa0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dfa4:	f7f2 f978 	bl	8000298 <__aeabi_dsub>
 800dfa8:	f805 6b01 	strb.w	r6, [r5], #1
 800dfac:	9e01      	ldr	r6, [sp, #4]
 800dfae:	9f03      	ldr	r7, [sp, #12]
 800dfb0:	1bae      	subs	r6, r5, r6
 800dfb2:	42b7      	cmp	r7, r6
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	d135      	bne.n	800e026 <_dtoa_r+0x6e6>
 800dfba:	f7f2 f96f 	bl	800029c <__adddf3>
 800dfbe:	4642      	mov	r2, r8
 800dfc0:	464b      	mov	r3, r9
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	f7f2 fdaf 	bl	8000b28 <__aeabi_dcmpgt>
 800dfca:	b9d0      	cbnz	r0, 800e002 <_dtoa_r+0x6c2>
 800dfcc:	4642      	mov	r2, r8
 800dfce:	464b      	mov	r3, r9
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	f7f2 fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfd8:	b110      	cbz	r0, 800dfe0 <_dtoa_r+0x6a0>
 800dfda:	f01a 0f01 	tst.w	sl, #1
 800dfde:	d110      	bne.n	800e002 <_dtoa_r+0x6c2>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	ee18 1a10 	vmov	r1, s16
 800dfe6:	f000 fe67 	bl	800ecb8 <_Bfree>
 800dfea:	2300      	movs	r3, #0
 800dfec:	9800      	ldr	r0, [sp, #0]
 800dfee:	702b      	strb	r3, [r5, #0]
 800dff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dff2:	3001      	adds	r0, #1
 800dff4:	6018      	str	r0, [r3, #0]
 800dff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f43f acf1 	beq.w	800d9e0 <_dtoa_r+0xa0>
 800dffe:	601d      	str	r5, [r3, #0]
 800e000:	e4ee      	b.n	800d9e0 <_dtoa_r+0xa0>
 800e002:	9f00      	ldr	r7, [sp, #0]
 800e004:	462b      	mov	r3, r5
 800e006:	461d      	mov	r5, r3
 800e008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e00c:	2a39      	cmp	r2, #57	; 0x39
 800e00e:	d106      	bne.n	800e01e <_dtoa_r+0x6de>
 800e010:	9a01      	ldr	r2, [sp, #4]
 800e012:	429a      	cmp	r2, r3
 800e014:	d1f7      	bne.n	800e006 <_dtoa_r+0x6c6>
 800e016:	9901      	ldr	r1, [sp, #4]
 800e018:	2230      	movs	r2, #48	; 0x30
 800e01a:	3701      	adds	r7, #1
 800e01c:	700a      	strb	r2, [r1, #0]
 800e01e:	781a      	ldrb	r2, [r3, #0]
 800e020:	3201      	adds	r2, #1
 800e022:	701a      	strb	r2, [r3, #0]
 800e024:	e790      	b.n	800df48 <_dtoa_r+0x608>
 800e026:	4ba6      	ldr	r3, [pc, #664]	; (800e2c0 <_dtoa_r+0x980>)
 800e028:	2200      	movs	r2, #0
 800e02a:	f7f2 faed 	bl	8000608 <__aeabi_dmul>
 800e02e:	2200      	movs	r2, #0
 800e030:	2300      	movs	r3, #0
 800e032:	4606      	mov	r6, r0
 800e034:	460f      	mov	r7, r1
 800e036:	f7f2 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d09d      	beq.n	800df7a <_dtoa_r+0x63a>
 800e03e:	e7cf      	b.n	800dfe0 <_dtoa_r+0x6a0>
 800e040:	9a08      	ldr	r2, [sp, #32]
 800e042:	2a00      	cmp	r2, #0
 800e044:	f000 80d7 	beq.w	800e1f6 <_dtoa_r+0x8b6>
 800e048:	9a06      	ldr	r2, [sp, #24]
 800e04a:	2a01      	cmp	r2, #1
 800e04c:	f300 80ba 	bgt.w	800e1c4 <_dtoa_r+0x884>
 800e050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e052:	2a00      	cmp	r2, #0
 800e054:	f000 80b2 	beq.w	800e1bc <_dtoa_r+0x87c>
 800e058:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e05c:	9e07      	ldr	r6, [sp, #28]
 800e05e:	9d04      	ldr	r5, [sp, #16]
 800e060:	9a04      	ldr	r2, [sp, #16]
 800e062:	441a      	add	r2, r3
 800e064:	9204      	str	r2, [sp, #16]
 800e066:	9a05      	ldr	r2, [sp, #20]
 800e068:	2101      	movs	r1, #1
 800e06a:	441a      	add	r2, r3
 800e06c:	4620      	mov	r0, r4
 800e06e:	9205      	str	r2, [sp, #20]
 800e070:	f000 ff24 	bl	800eebc <__i2b>
 800e074:	4607      	mov	r7, r0
 800e076:	2d00      	cmp	r5, #0
 800e078:	dd0c      	ble.n	800e094 <_dtoa_r+0x754>
 800e07a:	9b05      	ldr	r3, [sp, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	dd09      	ble.n	800e094 <_dtoa_r+0x754>
 800e080:	42ab      	cmp	r3, r5
 800e082:	9a04      	ldr	r2, [sp, #16]
 800e084:	bfa8      	it	ge
 800e086:	462b      	movge	r3, r5
 800e088:	1ad2      	subs	r2, r2, r3
 800e08a:	9204      	str	r2, [sp, #16]
 800e08c:	9a05      	ldr	r2, [sp, #20]
 800e08e:	1aed      	subs	r5, r5, r3
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	9305      	str	r3, [sp, #20]
 800e094:	9b07      	ldr	r3, [sp, #28]
 800e096:	b31b      	cbz	r3, 800e0e0 <_dtoa_r+0x7a0>
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f000 80af 	beq.w	800e1fe <_dtoa_r+0x8be>
 800e0a0:	2e00      	cmp	r6, #0
 800e0a2:	dd13      	ble.n	800e0cc <_dtoa_r+0x78c>
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	4632      	mov	r2, r6
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 ffc7 	bl	800f03c <__pow5mult>
 800e0ae:	ee18 2a10 	vmov	r2, s16
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	4607      	mov	r7, r0
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 ff16 	bl	800eee8 <__multiply>
 800e0bc:	ee18 1a10 	vmov	r1, s16
 800e0c0:	4680      	mov	r8, r0
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f000 fdf8 	bl	800ecb8 <_Bfree>
 800e0c8:	ee08 8a10 	vmov	s16, r8
 800e0cc:	9b07      	ldr	r3, [sp, #28]
 800e0ce:	1b9a      	subs	r2, r3, r6
 800e0d0:	d006      	beq.n	800e0e0 <_dtoa_r+0x7a0>
 800e0d2:	ee18 1a10 	vmov	r1, s16
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 ffb0 	bl	800f03c <__pow5mult>
 800e0dc:	ee08 0a10 	vmov	s16, r0
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f000 feea 	bl	800eebc <__i2b>
 800e0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	f340 8088 	ble.w	800e202 <_dtoa_r+0x8c2>
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	4601      	mov	r1, r0
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 ffa0 	bl	800f03c <__pow5mult>
 800e0fc:	9b06      	ldr	r3, [sp, #24]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	4606      	mov	r6, r0
 800e102:	f340 8081 	ble.w	800e208 <_dtoa_r+0x8c8>
 800e106:	f04f 0800 	mov.w	r8, #0
 800e10a:	6933      	ldr	r3, [r6, #16]
 800e10c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e110:	6918      	ldr	r0, [r3, #16]
 800e112:	f000 fe83 	bl	800ee1c <__hi0bits>
 800e116:	f1c0 0020 	rsb	r0, r0, #32
 800e11a:	9b05      	ldr	r3, [sp, #20]
 800e11c:	4418      	add	r0, r3
 800e11e:	f010 001f 	ands.w	r0, r0, #31
 800e122:	f000 8092 	beq.w	800e24a <_dtoa_r+0x90a>
 800e126:	f1c0 0320 	rsb	r3, r0, #32
 800e12a:	2b04      	cmp	r3, #4
 800e12c:	f340 808a 	ble.w	800e244 <_dtoa_r+0x904>
 800e130:	f1c0 001c 	rsb	r0, r0, #28
 800e134:	9b04      	ldr	r3, [sp, #16]
 800e136:	4403      	add	r3, r0
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	9b05      	ldr	r3, [sp, #20]
 800e13c:	4403      	add	r3, r0
 800e13e:	4405      	add	r5, r0
 800e140:	9305      	str	r3, [sp, #20]
 800e142:	9b04      	ldr	r3, [sp, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	dd07      	ble.n	800e158 <_dtoa_r+0x818>
 800e148:	ee18 1a10 	vmov	r1, s16
 800e14c:	461a      	mov	r2, r3
 800e14e:	4620      	mov	r0, r4
 800e150:	f000 ffce 	bl	800f0f0 <__lshift>
 800e154:	ee08 0a10 	vmov	s16, r0
 800e158:	9b05      	ldr	r3, [sp, #20]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dd05      	ble.n	800e16a <_dtoa_r+0x82a>
 800e15e:	4631      	mov	r1, r6
 800e160:	461a      	mov	r2, r3
 800e162:	4620      	mov	r0, r4
 800e164:	f000 ffc4 	bl	800f0f0 <__lshift>
 800e168:	4606      	mov	r6, r0
 800e16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d06e      	beq.n	800e24e <_dtoa_r+0x90e>
 800e170:	ee18 0a10 	vmov	r0, s16
 800e174:	4631      	mov	r1, r6
 800e176:	f001 f82b 	bl	800f1d0 <__mcmp>
 800e17a:	2800      	cmp	r0, #0
 800e17c:	da67      	bge.n	800e24e <_dtoa_r+0x90e>
 800e17e:	9b00      	ldr	r3, [sp, #0]
 800e180:	3b01      	subs	r3, #1
 800e182:	ee18 1a10 	vmov	r1, s16
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	220a      	movs	r2, #10
 800e18a:	2300      	movs	r3, #0
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 fdb5 	bl	800ecfc <__multadd>
 800e192:	9b08      	ldr	r3, [sp, #32]
 800e194:	ee08 0a10 	vmov	s16, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 81b1 	beq.w	800e500 <_dtoa_r+0xbc0>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	4639      	mov	r1, r7
 800e1a2:	220a      	movs	r2, #10
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f000 fda9 	bl	800ecfc <__multadd>
 800e1aa:	9b02      	ldr	r3, [sp, #8]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	4607      	mov	r7, r0
 800e1b0:	f300 808e 	bgt.w	800e2d0 <_dtoa_r+0x990>
 800e1b4:	9b06      	ldr	r3, [sp, #24]
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	dc51      	bgt.n	800e25e <_dtoa_r+0x91e>
 800e1ba:	e089      	b.n	800e2d0 <_dtoa_r+0x990>
 800e1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e1c2:	e74b      	b.n	800e05c <_dtoa_r+0x71c>
 800e1c4:	9b03      	ldr	r3, [sp, #12]
 800e1c6:	1e5e      	subs	r6, r3, #1
 800e1c8:	9b07      	ldr	r3, [sp, #28]
 800e1ca:	42b3      	cmp	r3, r6
 800e1cc:	bfbf      	itttt	lt
 800e1ce:	9b07      	ldrlt	r3, [sp, #28]
 800e1d0:	9607      	strlt	r6, [sp, #28]
 800e1d2:	1af2      	sublt	r2, r6, r3
 800e1d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e1d6:	bfb6      	itet	lt
 800e1d8:	189b      	addlt	r3, r3, r2
 800e1da:	1b9e      	subge	r6, r3, r6
 800e1dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e1de:	9b03      	ldr	r3, [sp, #12]
 800e1e0:	bfb8      	it	lt
 800e1e2:	2600      	movlt	r6, #0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	bfb7      	itett	lt
 800e1e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e1ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e1f0:	1a9d      	sublt	r5, r3, r2
 800e1f2:	2300      	movlt	r3, #0
 800e1f4:	e734      	b.n	800e060 <_dtoa_r+0x720>
 800e1f6:	9e07      	ldr	r6, [sp, #28]
 800e1f8:	9d04      	ldr	r5, [sp, #16]
 800e1fa:	9f08      	ldr	r7, [sp, #32]
 800e1fc:	e73b      	b.n	800e076 <_dtoa_r+0x736>
 800e1fe:	9a07      	ldr	r2, [sp, #28]
 800e200:	e767      	b.n	800e0d2 <_dtoa_r+0x792>
 800e202:	9b06      	ldr	r3, [sp, #24]
 800e204:	2b01      	cmp	r3, #1
 800e206:	dc18      	bgt.n	800e23a <_dtoa_r+0x8fa>
 800e208:	f1ba 0f00 	cmp.w	sl, #0
 800e20c:	d115      	bne.n	800e23a <_dtoa_r+0x8fa>
 800e20e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e212:	b993      	cbnz	r3, 800e23a <_dtoa_r+0x8fa>
 800e214:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e218:	0d1b      	lsrs	r3, r3, #20
 800e21a:	051b      	lsls	r3, r3, #20
 800e21c:	b183      	cbz	r3, 800e240 <_dtoa_r+0x900>
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	3301      	adds	r3, #1
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	9b05      	ldr	r3, [sp, #20]
 800e226:	3301      	adds	r3, #1
 800e228:	9305      	str	r3, [sp, #20]
 800e22a:	f04f 0801 	mov.w	r8, #1
 800e22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e230:	2b00      	cmp	r3, #0
 800e232:	f47f af6a 	bne.w	800e10a <_dtoa_r+0x7ca>
 800e236:	2001      	movs	r0, #1
 800e238:	e76f      	b.n	800e11a <_dtoa_r+0x7da>
 800e23a:	f04f 0800 	mov.w	r8, #0
 800e23e:	e7f6      	b.n	800e22e <_dtoa_r+0x8ee>
 800e240:	4698      	mov	r8, r3
 800e242:	e7f4      	b.n	800e22e <_dtoa_r+0x8ee>
 800e244:	f43f af7d 	beq.w	800e142 <_dtoa_r+0x802>
 800e248:	4618      	mov	r0, r3
 800e24a:	301c      	adds	r0, #28
 800e24c:	e772      	b.n	800e134 <_dtoa_r+0x7f4>
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	dc37      	bgt.n	800e2c4 <_dtoa_r+0x984>
 800e254:	9b06      	ldr	r3, [sp, #24]
 800e256:	2b02      	cmp	r3, #2
 800e258:	dd34      	ble.n	800e2c4 <_dtoa_r+0x984>
 800e25a:	9b03      	ldr	r3, [sp, #12]
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	9b02      	ldr	r3, [sp, #8]
 800e260:	b96b      	cbnz	r3, 800e27e <_dtoa_r+0x93e>
 800e262:	4631      	mov	r1, r6
 800e264:	2205      	movs	r2, #5
 800e266:	4620      	mov	r0, r4
 800e268:	f000 fd48 	bl	800ecfc <__multadd>
 800e26c:	4601      	mov	r1, r0
 800e26e:	4606      	mov	r6, r0
 800e270:	ee18 0a10 	vmov	r0, s16
 800e274:	f000 ffac 	bl	800f1d0 <__mcmp>
 800e278:	2800      	cmp	r0, #0
 800e27a:	f73f adbb 	bgt.w	800ddf4 <_dtoa_r+0x4b4>
 800e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e280:	9d01      	ldr	r5, [sp, #4]
 800e282:	43db      	mvns	r3, r3
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	f04f 0800 	mov.w	r8, #0
 800e28a:	4631      	mov	r1, r6
 800e28c:	4620      	mov	r0, r4
 800e28e:	f000 fd13 	bl	800ecb8 <_Bfree>
 800e292:	2f00      	cmp	r7, #0
 800e294:	f43f aea4 	beq.w	800dfe0 <_dtoa_r+0x6a0>
 800e298:	f1b8 0f00 	cmp.w	r8, #0
 800e29c:	d005      	beq.n	800e2aa <_dtoa_r+0x96a>
 800e29e:	45b8      	cmp	r8, r7
 800e2a0:	d003      	beq.n	800e2aa <_dtoa_r+0x96a>
 800e2a2:	4641      	mov	r1, r8
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 fd07 	bl	800ecb8 <_Bfree>
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f000 fd03 	bl	800ecb8 <_Bfree>
 800e2b2:	e695      	b.n	800dfe0 <_dtoa_r+0x6a0>
 800e2b4:	2600      	movs	r6, #0
 800e2b6:	4637      	mov	r7, r6
 800e2b8:	e7e1      	b.n	800e27e <_dtoa_r+0x93e>
 800e2ba:	9700      	str	r7, [sp, #0]
 800e2bc:	4637      	mov	r7, r6
 800e2be:	e599      	b.n	800ddf4 <_dtoa_r+0x4b4>
 800e2c0:	40240000 	.word	0x40240000
 800e2c4:	9b08      	ldr	r3, [sp, #32]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f000 80ca 	beq.w	800e460 <_dtoa_r+0xb20>
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	9302      	str	r3, [sp, #8]
 800e2d0:	2d00      	cmp	r5, #0
 800e2d2:	dd05      	ble.n	800e2e0 <_dtoa_r+0x9a0>
 800e2d4:	4639      	mov	r1, r7
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 ff09 	bl	800f0f0 <__lshift>
 800e2de:	4607      	mov	r7, r0
 800e2e0:	f1b8 0f00 	cmp.w	r8, #0
 800e2e4:	d05b      	beq.n	800e39e <_dtoa_r+0xa5e>
 800e2e6:	6879      	ldr	r1, [r7, #4]
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f000 fca5 	bl	800ec38 <_Balloc>
 800e2ee:	4605      	mov	r5, r0
 800e2f0:	b928      	cbnz	r0, 800e2fe <_dtoa_r+0x9be>
 800e2f2:	4b87      	ldr	r3, [pc, #540]	; (800e510 <_dtoa_r+0xbd0>)
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e2fa:	f7ff bb3b 	b.w	800d974 <_dtoa_r+0x34>
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	3202      	adds	r2, #2
 800e302:	0092      	lsls	r2, r2, #2
 800e304:	f107 010c 	add.w	r1, r7, #12
 800e308:	300c      	adds	r0, #12
 800e30a:	f7fd fd29 	bl	800bd60 <memcpy>
 800e30e:	2201      	movs	r2, #1
 800e310:	4629      	mov	r1, r5
 800e312:	4620      	mov	r0, r4
 800e314:	f000 feec 	bl	800f0f0 <__lshift>
 800e318:	9b01      	ldr	r3, [sp, #4]
 800e31a:	f103 0901 	add.w	r9, r3, #1
 800e31e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e322:	4413      	add	r3, r2
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	f00a 0301 	and.w	r3, sl, #1
 800e32a:	46b8      	mov	r8, r7
 800e32c:	9304      	str	r3, [sp, #16]
 800e32e:	4607      	mov	r7, r0
 800e330:	4631      	mov	r1, r6
 800e332:	ee18 0a10 	vmov	r0, s16
 800e336:	f7ff fa77 	bl	800d828 <quorem>
 800e33a:	4641      	mov	r1, r8
 800e33c:	9002      	str	r0, [sp, #8]
 800e33e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e342:	ee18 0a10 	vmov	r0, s16
 800e346:	f000 ff43 	bl	800f1d0 <__mcmp>
 800e34a:	463a      	mov	r2, r7
 800e34c:	9003      	str	r0, [sp, #12]
 800e34e:	4631      	mov	r1, r6
 800e350:	4620      	mov	r0, r4
 800e352:	f000 ff59 	bl	800f208 <__mdiff>
 800e356:	68c2      	ldr	r2, [r0, #12]
 800e358:	f109 3bff 	add.w	fp, r9, #4294967295
 800e35c:	4605      	mov	r5, r0
 800e35e:	bb02      	cbnz	r2, 800e3a2 <_dtoa_r+0xa62>
 800e360:	4601      	mov	r1, r0
 800e362:	ee18 0a10 	vmov	r0, s16
 800e366:	f000 ff33 	bl	800f1d0 <__mcmp>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4629      	mov	r1, r5
 800e36e:	4620      	mov	r0, r4
 800e370:	9207      	str	r2, [sp, #28]
 800e372:	f000 fca1 	bl	800ecb8 <_Bfree>
 800e376:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e37a:	ea43 0102 	orr.w	r1, r3, r2
 800e37e:	9b04      	ldr	r3, [sp, #16]
 800e380:	430b      	orrs	r3, r1
 800e382:	464d      	mov	r5, r9
 800e384:	d10f      	bne.n	800e3a6 <_dtoa_r+0xa66>
 800e386:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e38a:	d02a      	beq.n	800e3e2 <_dtoa_r+0xaa2>
 800e38c:	9b03      	ldr	r3, [sp, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dd02      	ble.n	800e398 <_dtoa_r+0xa58>
 800e392:	9b02      	ldr	r3, [sp, #8]
 800e394:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e398:	f88b a000 	strb.w	sl, [fp]
 800e39c:	e775      	b.n	800e28a <_dtoa_r+0x94a>
 800e39e:	4638      	mov	r0, r7
 800e3a0:	e7ba      	b.n	800e318 <_dtoa_r+0x9d8>
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	e7e2      	b.n	800e36c <_dtoa_r+0xa2c>
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	db04      	blt.n	800e3b6 <_dtoa_r+0xa76>
 800e3ac:	9906      	ldr	r1, [sp, #24]
 800e3ae:	430b      	orrs	r3, r1
 800e3b0:	9904      	ldr	r1, [sp, #16]
 800e3b2:	430b      	orrs	r3, r1
 800e3b4:	d122      	bne.n	800e3fc <_dtoa_r+0xabc>
 800e3b6:	2a00      	cmp	r2, #0
 800e3b8:	ddee      	ble.n	800e398 <_dtoa_r+0xa58>
 800e3ba:	ee18 1a10 	vmov	r1, s16
 800e3be:	2201      	movs	r2, #1
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f000 fe95 	bl	800f0f0 <__lshift>
 800e3c6:	4631      	mov	r1, r6
 800e3c8:	ee08 0a10 	vmov	s16, r0
 800e3cc:	f000 ff00 	bl	800f1d0 <__mcmp>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	dc03      	bgt.n	800e3dc <_dtoa_r+0xa9c>
 800e3d4:	d1e0      	bne.n	800e398 <_dtoa_r+0xa58>
 800e3d6:	f01a 0f01 	tst.w	sl, #1
 800e3da:	d0dd      	beq.n	800e398 <_dtoa_r+0xa58>
 800e3dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e3e0:	d1d7      	bne.n	800e392 <_dtoa_r+0xa52>
 800e3e2:	2339      	movs	r3, #57	; 0x39
 800e3e4:	f88b 3000 	strb.w	r3, [fp]
 800e3e8:	462b      	mov	r3, r5
 800e3ea:	461d      	mov	r5, r3
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e3f2:	2a39      	cmp	r2, #57	; 0x39
 800e3f4:	d071      	beq.n	800e4da <_dtoa_r+0xb9a>
 800e3f6:	3201      	adds	r2, #1
 800e3f8:	701a      	strb	r2, [r3, #0]
 800e3fa:	e746      	b.n	800e28a <_dtoa_r+0x94a>
 800e3fc:	2a00      	cmp	r2, #0
 800e3fe:	dd07      	ble.n	800e410 <_dtoa_r+0xad0>
 800e400:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e404:	d0ed      	beq.n	800e3e2 <_dtoa_r+0xaa2>
 800e406:	f10a 0301 	add.w	r3, sl, #1
 800e40a:	f88b 3000 	strb.w	r3, [fp]
 800e40e:	e73c      	b.n	800e28a <_dtoa_r+0x94a>
 800e410:	9b05      	ldr	r3, [sp, #20]
 800e412:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e416:	4599      	cmp	r9, r3
 800e418:	d047      	beq.n	800e4aa <_dtoa_r+0xb6a>
 800e41a:	ee18 1a10 	vmov	r1, s16
 800e41e:	2300      	movs	r3, #0
 800e420:	220a      	movs	r2, #10
 800e422:	4620      	mov	r0, r4
 800e424:	f000 fc6a 	bl	800ecfc <__multadd>
 800e428:	45b8      	cmp	r8, r7
 800e42a:	ee08 0a10 	vmov	s16, r0
 800e42e:	f04f 0300 	mov.w	r3, #0
 800e432:	f04f 020a 	mov.w	r2, #10
 800e436:	4641      	mov	r1, r8
 800e438:	4620      	mov	r0, r4
 800e43a:	d106      	bne.n	800e44a <_dtoa_r+0xb0a>
 800e43c:	f000 fc5e 	bl	800ecfc <__multadd>
 800e440:	4680      	mov	r8, r0
 800e442:	4607      	mov	r7, r0
 800e444:	f109 0901 	add.w	r9, r9, #1
 800e448:	e772      	b.n	800e330 <_dtoa_r+0x9f0>
 800e44a:	f000 fc57 	bl	800ecfc <__multadd>
 800e44e:	4639      	mov	r1, r7
 800e450:	4680      	mov	r8, r0
 800e452:	2300      	movs	r3, #0
 800e454:	220a      	movs	r2, #10
 800e456:	4620      	mov	r0, r4
 800e458:	f000 fc50 	bl	800ecfc <__multadd>
 800e45c:	4607      	mov	r7, r0
 800e45e:	e7f1      	b.n	800e444 <_dtoa_r+0xb04>
 800e460:	9b03      	ldr	r3, [sp, #12]
 800e462:	9302      	str	r3, [sp, #8]
 800e464:	9d01      	ldr	r5, [sp, #4]
 800e466:	ee18 0a10 	vmov	r0, s16
 800e46a:	4631      	mov	r1, r6
 800e46c:	f7ff f9dc 	bl	800d828 <quorem>
 800e470:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e474:	9b01      	ldr	r3, [sp, #4]
 800e476:	f805 ab01 	strb.w	sl, [r5], #1
 800e47a:	1aea      	subs	r2, r5, r3
 800e47c:	9b02      	ldr	r3, [sp, #8]
 800e47e:	4293      	cmp	r3, r2
 800e480:	dd09      	ble.n	800e496 <_dtoa_r+0xb56>
 800e482:	ee18 1a10 	vmov	r1, s16
 800e486:	2300      	movs	r3, #0
 800e488:	220a      	movs	r2, #10
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 fc36 	bl	800ecfc <__multadd>
 800e490:	ee08 0a10 	vmov	s16, r0
 800e494:	e7e7      	b.n	800e466 <_dtoa_r+0xb26>
 800e496:	9b02      	ldr	r3, [sp, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	bfc8      	it	gt
 800e49c:	461d      	movgt	r5, r3
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	bfd8      	it	le
 800e4a2:	2501      	movle	r5, #1
 800e4a4:	441d      	add	r5, r3
 800e4a6:	f04f 0800 	mov.w	r8, #0
 800e4aa:	ee18 1a10 	vmov	r1, s16
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 fe1d 	bl	800f0f0 <__lshift>
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	ee08 0a10 	vmov	s16, r0
 800e4bc:	f000 fe88 	bl	800f1d0 <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	dc91      	bgt.n	800e3e8 <_dtoa_r+0xaa8>
 800e4c4:	d102      	bne.n	800e4cc <_dtoa_r+0xb8c>
 800e4c6:	f01a 0f01 	tst.w	sl, #1
 800e4ca:	d18d      	bne.n	800e3e8 <_dtoa_r+0xaa8>
 800e4cc:	462b      	mov	r3, r5
 800e4ce:	461d      	mov	r5, r3
 800e4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4d4:	2a30      	cmp	r2, #48	; 0x30
 800e4d6:	d0fa      	beq.n	800e4ce <_dtoa_r+0xb8e>
 800e4d8:	e6d7      	b.n	800e28a <_dtoa_r+0x94a>
 800e4da:	9a01      	ldr	r2, [sp, #4]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d184      	bne.n	800e3ea <_dtoa_r+0xaaa>
 800e4e0:	9b00      	ldr	r3, [sp, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	2331      	movs	r3, #49	; 0x31
 800e4e8:	7013      	strb	r3, [r2, #0]
 800e4ea:	e6ce      	b.n	800e28a <_dtoa_r+0x94a>
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <_dtoa_r+0xbd4>)
 800e4ee:	f7ff ba95 	b.w	800da1c <_dtoa_r+0xdc>
 800e4f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f47f aa6e 	bne.w	800d9d6 <_dtoa_r+0x96>
 800e4fa:	4b07      	ldr	r3, [pc, #28]	; (800e518 <_dtoa_r+0xbd8>)
 800e4fc:	f7ff ba8e 	b.w	800da1c <_dtoa_r+0xdc>
 800e500:	9b02      	ldr	r3, [sp, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dcae      	bgt.n	800e464 <_dtoa_r+0xb24>
 800e506:	9b06      	ldr	r3, [sp, #24]
 800e508:	2b02      	cmp	r3, #2
 800e50a:	f73f aea8 	bgt.w	800e25e <_dtoa_r+0x91e>
 800e50e:	e7a9      	b.n	800e464 <_dtoa_r+0xb24>
 800e510:	08012f78 	.word	0x08012f78
 800e514:	08012d78 	.word	0x08012d78
 800e518:	08012ef9 	.word	0x08012ef9

0800e51c <rshift>:
 800e51c:	6903      	ldr	r3, [r0, #16]
 800e51e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e522:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e526:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e52a:	f100 0414 	add.w	r4, r0, #20
 800e52e:	dd45      	ble.n	800e5bc <rshift+0xa0>
 800e530:	f011 011f 	ands.w	r1, r1, #31
 800e534:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e538:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e53c:	d10c      	bne.n	800e558 <rshift+0x3c>
 800e53e:	f100 0710 	add.w	r7, r0, #16
 800e542:	4629      	mov	r1, r5
 800e544:	42b1      	cmp	r1, r6
 800e546:	d334      	bcc.n	800e5b2 <rshift+0x96>
 800e548:	1a9b      	subs	r3, r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	1eea      	subs	r2, r5, #3
 800e54e:	4296      	cmp	r6, r2
 800e550:	bf38      	it	cc
 800e552:	2300      	movcc	r3, #0
 800e554:	4423      	add	r3, r4
 800e556:	e015      	b.n	800e584 <rshift+0x68>
 800e558:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e55c:	f1c1 0820 	rsb	r8, r1, #32
 800e560:	40cf      	lsrs	r7, r1
 800e562:	f105 0e04 	add.w	lr, r5, #4
 800e566:	46a1      	mov	r9, r4
 800e568:	4576      	cmp	r6, lr
 800e56a:	46f4      	mov	ip, lr
 800e56c:	d815      	bhi.n	800e59a <rshift+0x7e>
 800e56e:	1a9a      	subs	r2, r3, r2
 800e570:	0092      	lsls	r2, r2, #2
 800e572:	3a04      	subs	r2, #4
 800e574:	3501      	adds	r5, #1
 800e576:	42ae      	cmp	r6, r5
 800e578:	bf38      	it	cc
 800e57a:	2200      	movcc	r2, #0
 800e57c:	18a3      	adds	r3, r4, r2
 800e57e:	50a7      	str	r7, [r4, r2]
 800e580:	b107      	cbz	r7, 800e584 <rshift+0x68>
 800e582:	3304      	adds	r3, #4
 800e584:	1b1a      	subs	r2, r3, r4
 800e586:	42a3      	cmp	r3, r4
 800e588:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e58c:	bf08      	it	eq
 800e58e:	2300      	moveq	r3, #0
 800e590:	6102      	str	r2, [r0, #16]
 800e592:	bf08      	it	eq
 800e594:	6143      	streq	r3, [r0, #20]
 800e596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e59a:	f8dc c000 	ldr.w	ip, [ip]
 800e59e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e5a2:	ea4c 0707 	orr.w	r7, ip, r7
 800e5a6:	f849 7b04 	str.w	r7, [r9], #4
 800e5aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5ae:	40cf      	lsrs	r7, r1
 800e5b0:	e7da      	b.n	800e568 <rshift+0x4c>
 800e5b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e5b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e5ba:	e7c3      	b.n	800e544 <rshift+0x28>
 800e5bc:	4623      	mov	r3, r4
 800e5be:	e7e1      	b.n	800e584 <rshift+0x68>

0800e5c0 <__hexdig_fun>:
 800e5c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e5c4:	2b09      	cmp	r3, #9
 800e5c6:	d802      	bhi.n	800e5ce <__hexdig_fun+0xe>
 800e5c8:	3820      	subs	r0, #32
 800e5ca:	b2c0      	uxtb	r0, r0
 800e5cc:	4770      	bx	lr
 800e5ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e5d2:	2b05      	cmp	r3, #5
 800e5d4:	d801      	bhi.n	800e5da <__hexdig_fun+0x1a>
 800e5d6:	3847      	subs	r0, #71	; 0x47
 800e5d8:	e7f7      	b.n	800e5ca <__hexdig_fun+0xa>
 800e5da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e5de:	2b05      	cmp	r3, #5
 800e5e0:	d801      	bhi.n	800e5e6 <__hexdig_fun+0x26>
 800e5e2:	3827      	subs	r0, #39	; 0x27
 800e5e4:	e7f1      	b.n	800e5ca <__hexdig_fun+0xa>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	4770      	bx	lr
	...

0800e5ec <__gethex>:
 800e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	ed2d 8b02 	vpush	{d8}
 800e5f4:	b089      	sub	sp, #36	; 0x24
 800e5f6:	ee08 0a10 	vmov	s16, r0
 800e5fa:	9304      	str	r3, [sp, #16]
 800e5fc:	4bb4      	ldr	r3, [pc, #720]	; (800e8d0 <__gethex+0x2e4>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	9301      	str	r3, [sp, #4]
 800e602:	4618      	mov	r0, r3
 800e604:	468b      	mov	fp, r1
 800e606:	4690      	mov	r8, r2
 800e608:	f7f1 fdea 	bl	80001e0 <strlen>
 800e60c:	9b01      	ldr	r3, [sp, #4]
 800e60e:	f8db 2000 	ldr.w	r2, [fp]
 800e612:	4403      	add	r3, r0
 800e614:	4682      	mov	sl, r0
 800e616:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e61a:	9305      	str	r3, [sp, #20]
 800e61c:	1c93      	adds	r3, r2, #2
 800e61e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e622:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e626:	32fe      	adds	r2, #254	; 0xfe
 800e628:	18d1      	adds	r1, r2, r3
 800e62a:	461f      	mov	r7, r3
 800e62c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e630:	9100      	str	r1, [sp, #0]
 800e632:	2830      	cmp	r0, #48	; 0x30
 800e634:	d0f8      	beq.n	800e628 <__gethex+0x3c>
 800e636:	f7ff ffc3 	bl	800e5c0 <__hexdig_fun>
 800e63a:	4604      	mov	r4, r0
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d13a      	bne.n	800e6b6 <__gethex+0xca>
 800e640:	9901      	ldr	r1, [sp, #4]
 800e642:	4652      	mov	r2, sl
 800e644:	4638      	mov	r0, r7
 800e646:	f001 fa23 	bl	800fa90 <strncmp>
 800e64a:	4605      	mov	r5, r0
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d168      	bne.n	800e722 <__gethex+0x136>
 800e650:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e654:	eb07 060a 	add.w	r6, r7, sl
 800e658:	f7ff ffb2 	bl	800e5c0 <__hexdig_fun>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d062      	beq.n	800e726 <__gethex+0x13a>
 800e660:	4633      	mov	r3, r6
 800e662:	7818      	ldrb	r0, [r3, #0]
 800e664:	2830      	cmp	r0, #48	; 0x30
 800e666:	461f      	mov	r7, r3
 800e668:	f103 0301 	add.w	r3, r3, #1
 800e66c:	d0f9      	beq.n	800e662 <__gethex+0x76>
 800e66e:	f7ff ffa7 	bl	800e5c0 <__hexdig_fun>
 800e672:	2301      	movs	r3, #1
 800e674:	fab0 f480 	clz	r4, r0
 800e678:	0964      	lsrs	r4, r4, #5
 800e67a:	4635      	mov	r5, r6
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	463a      	mov	r2, r7
 800e680:	4616      	mov	r6, r2
 800e682:	3201      	adds	r2, #1
 800e684:	7830      	ldrb	r0, [r6, #0]
 800e686:	f7ff ff9b 	bl	800e5c0 <__hexdig_fun>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d1f8      	bne.n	800e680 <__gethex+0x94>
 800e68e:	9901      	ldr	r1, [sp, #4]
 800e690:	4652      	mov	r2, sl
 800e692:	4630      	mov	r0, r6
 800e694:	f001 f9fc 	bl	800fa90 <strncmp>
 800e698:	b980      	cbnz	r0, 800e6bc <__gethex+0xd0>
 800e69a:	b94d      	cbnz	r5, 800e6b0 <__gethex+0xc4>
 800e69c:	eb06 050a 	add.w	r5, r6, sl
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	4616      	mov	r6, r2
 800e6a4:	3201      	adds	r2, #1
 800e6a6:	7830      	ldrb	r0, [r6, #0]
 800e6a8:	f7ff ff8a 	bl	800e5c0 <__hexdig_fun>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d1f8      	bne.n	800e6a2 <__gethex+0xb6>
 800e6b0:	1bad      	subs	r5, r5, r6
 800e6b2:	00ad      	lsls	r5, r5, #2
 800e6b4:	e004      	b.n	800e6c0 <__gethex+0xd4>
 800e6b6:	2400      	movs	r4, #0
 800e6b8:	4625      	mov	r5, r4
 800e6ba:	e7e0      	b.n	800e67e <__gethex+0x92>
 800e6bc:	2d00      	cmp	r5, #0
 800e6be:	d1f7      	bne.n	800e6b0 <__gethex+0xc4>
 800e6c0:	7833      	ldrb	r3, [r6, #0]
 800e6c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6c6:	2b50      	cmp	r3, #80	; 0x50
 800e6c8:	d13b      	bne.n	800e742 <__gethex+0x156>
 800e6ca:	7873      	ldrb	r3, [r6, #1]
 800e6cc:	2b2b      	cmp	r3, #43	; 0x2b
 800e6ce:	d02c      	beq.n	800e72a <__gethex+0x13e>
 800e6d0:	2b2d      	cmp	r3, #45	; 0x2d
 800e6d2:	d02e      	beq.n	800e732 <__gethex+0x146>
 800e6d4:	1c71      	adds	r1, r6, #1
 800e6d6:	f04f 0900 	mov.w	r9, #0
 800e6da:	7808      	ldrb	r0, [r1, #0]
 800e6dc:	f7ff ff70 	bl	800e5c0 <__hexdig_fun>
 800e6e0:	1e43      	subs	r3, r0, #1
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b18      	cmp	r3, #24
 800e6e6:	d82c      	bhi.n	800e742 <__gethex+0x156>
 800e6e8:	f1a0 0210 	sub.w	r2, r0, #16
 800e6ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e6f0:	f7ff ff66 	bl	800e5c0 <__hexdig_fun>
 800e6f4:	1e43      	subs	r3, r0, #1
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b18      	cmp	r3, #24
 800e6fa:	d91d      	bls.n	800e738 <__gethex+0x14c>
 800e6fc:	f1b9 0f00 	cmp.w	r9, #0
 800e700:	d000      	beq.n	800e704 <__gethex+0x118>
 800e702:	4252      	negs	r2, r2
 800e704:	4415      	add	r5, r2
 800e706:	f8cb 1000 	str.w	r1, [fp]
 800e70a:	b1e4      	cbz	r4, 800e746 <__gethex+0x15a>
 800e70c:	9b00      	ldr	r3, [sp, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bf14      	ite	ne
 800e712:	2700      	movne	r7, #0
 800e714:	2706      	moveq	r7, #6
 800e716:	4638      	mov	r0, r7
 800e718:	b009      	add	sp, #36	; 0x24
 800e71a:	ecbd 8b02 	vpop	{d8}
 800e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	463e      	mov	r6, r7
 800e724:	4625      	mov	r5, r4
 800e726:	2401      	movs	r4, #1
 800e728:	e7ca      	b.n	800e6c0 <__gethex+0xd4>
 800e72a:	f04f 0900 	mov.w	r9, #0
 800e72e:	1cb1      	adds	r1, r6, #2
 800e730:	e7d3      	b.n	800e6da <__gethex+0xee>
 800e732:	f04f 0901 	mov.w	r9, #1
 800e736:	e7fa      	b.n	800e72e <__gethex+0x142>
 800e738:	230a      	movs	r3, #10
 800e73a:	fb03 0202 	mla	r2, r3, r2, r0
 800e73e:	3a10      	subs	r2, #16
 800e740:	e7d4      	b.n	800e6ec <__gethex+0x100>
 800e742:	4631      	mov	r1, r6
 800e744:	e7df      	b.n	800e706 <__gethex+0x11a>
 800e746:	1bf3      	subs	r3, r6, r7
 800e748:	3b01      	subs	r3, #1
 800e74a:	4621      	mov	r1, r4
 800e74c:	2b07      	cmp	r3, #7
 800e74e:	dc0b      	bgt.n	800e768 <__gethex+0x17c>
 800e750:	ee18 0a10 	vmov	r0, s16
 800e754:	f000 fa70 	bl	800ec38 <_Balloc>
 800e758:	4604      	mov	r4, r0
 800e75a:	b940      	cbnz	r0, 800e76e <__gethex+0x182>
 800e75c:	4b5d      	ldr	r3, [pc, #372]	; (800e8d4 <__gethex+0x2e8>)
 800e75e:	4602      	mov	r2, r0
 800e760:	21de      	movs	r1, #222	; 0xde
 800e762:	485d      	ldr	r0, [pc, #372]	; (800e8d8 <__gethex+0x2ec>)
 800e764:	f001 f9b6 	bl	800fad4 <__assert_func>
 800e768:	3101      	adds	r1, #1
 800e76a:	105b      	asrs	r3, r3, #1
 800e76c:	e7ee      	b.n	800e74c <__gethex+0x160>
 800e76e:	f100 0914 	add.w	r9, r0, #20
 800e772:	f04f 0b00 	mov.w	fp, #0
 800e776:	f1ca 0301 	rsb	r3, sl, #1
 800e77a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e77e:	f8cd b000 	str.w	fp, [sp]
 800e782:	9306      	str	r3, [sp, #24]
 800e784:	42b7      	cmp	r7, r6
 800e786:	d340      	bcc.n	800e80a <__gethex+0x21e>
 800e788:	9802      	ldr	r0, [sp, #8]
 800e78a:	9b00      	ldr	r3, [sp, #0]
 800e78c:	f840 3b04 	str.w	r3, [r0], #4
 800e790:	eba0 0009 	sub.w	r0, r0, r9
 800e794:	1080      	asrs	r0, r0, #2
 800e796:	0146      	lsls	r6, r0, #5
 800e798:	6120      	str	r0, [r4, #16]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 fb3e 	bl	800ee1c <__hi0bits>
 800e7a0:	1a30      	subs	r0, r6, r0
 800e7a2:	f8d8 6000 	ldr.w	r6, [r8]
 800e7a6:	42b0      	cmp	r0, r6
 800e7a8:	dd63      	ble.n	800e872 <__gethex+0x286>
 800e7aa:	1b87      	subs	r7, r0, r6
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f000 fee2 	bl	800f578 <__any_on>
 800e7b4:	4682      	mov	sl, r0
 800e7b6:	b1a8      	cbz	r0, 800e7e4 <__gethex+0x1f8>
 800e7b8:	1e7b      	subs	r3, r7, #1
 800e7ba:	1159      	asrs	r1, r3, #5
 800e7bc:	f003 021f 	and.w	r2, r3, #31
 800e7c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e7c4:	f04f 0a01 	mov.w	sl, #1
 800e7c8:	fa0a f202 	lsl.w	r2, sl, r2
 800e7cc:	420a      	tst	r2, r1
 800e7ce:	d009      	beq.n	800e7e4 <__gethex+0x1f8>
 800e7d0:	4553      	cmp	r3, sl
 800e7d2:	dd05      	ble.n	800e7e0 <__gethex+0x1f4>
 800e7d4:	1eb9      	subs	r1, r7, #2
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f000 fece 	bl	800f578 <__any_on>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d145      	bne.n	800e86c <__gethex+0x280>
 800e7e0:	f04f 0a02 	mov.w	sl, #2
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f7ff fe98 	bl	800e51c <rshift>
 800e7ec:	443d      	add	r5, r7
 800e7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7f2:	42ab      	cmp	r3, r5
 800e7f4:	da4c      	bge.n	800e890 <__gethex+0x2a4>
 800e7f6:	ee18 0a10 	vmov	r0, s16
 800e7fa:	4621      	mov	r1, r4
 800e7fc:	f000 fa5c 	bl	800ecb8 <_Bfree>
 800e800:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e802:	2300      	movs	r3, #0
 800e804:	6013      	str	r3, [r2, #0]
 800e806:	27a3      	movs	r7, #163	; 0xa3
 800e808:	e785      	b.n	800e716 <__gethex+0x12a>
 800e80a:	1e73      	subs	r3, r6, #1
 800e80c:	9a05      	ldr	r2, [sp, #20]
 800e80e:	9303      	str	r3, [sp, #12]
 800e810:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e814:	4293      	cmp	r3, r2
 800e816:	d019      	beq.n	800e84c <__gethex+0x260>
 800e818:	f1bb 0f20 	cmp.w	fp, #32
 800e81c:	d107      	bne.n	800e82e <__gethex+0x242>
 800e81e:	9b02      	ldr	r3, [sp, #8]
 800e820:	9a00      	ldr	r2, [sp, #0]
 800e822:	f843 2b04 	str.w	r2, [r3], #4
 800e826:	9302      	str	r3, [sp, #8]
 800e828:	2300      	movs	r3, #0
 800e82a:	9300      	str	r3, [sp, #0]
 800e82c:	469b      	mov	fp, r3
 800e82e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e832:	f7ff fec5 	bl	800e5c0 <__hexdig_fun>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	f000 000f 	and.w	r0, r0, #15
 800e83c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e840:	4303      	orrs	r3, r0
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	f10b 0b04 	add.w	fp, fp, #4
 800e848:	9b03      	ldr	r3, [sp, #12]
 800e84a:	e00d      	b.n	800e868 <__gethex+0x27c>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	9a06      	ldr	r2, [sp, #24]
 800e850:	4413      	add	r3, r2
 800e852:	42bb      	cmp	r3, r7
 800e854:	d3e0      	bcc.n	800e818 <__gethex+0x22c>
 800e856:	4618      	mov	r0, r3
 800e858:	9901      	ldr	r1, [sp, #4]
 800e85a:	9307      	str	r3, [sp, #28]
 800e85c:	4652      	mov	r2, sl
 800e85e:	f001 f917 	bl	800fa90 <strncmp>
 800e862:	9b07      	ldr	r3, [sp, #28]
 800e864:	2800      	cmp	r0, #0
 800e866:	d1d7      	bne.n	800e818 <__gethex+0x22c>
 800e868:	461e      	mov	r6, r3
 800e86a:	e78b      	b.n	800e784 <__gethex+0x198>
 800e86c:	f04f 0a03 	mov.w	sl, #3
 800e870:	e7b8      	b.n	800e7e4 <__gethex+0x1f8>
 800e872:	da0a      	bge.n	800e88a <__gethex+0x29e>
 800e874:	1a37      	subs	r7, r6, r0
 800e876:	4621      	mov	r1, r4
 800e878:	ee18 0a10 	vmov	r0, s16
 800e87c:	463a      	mov	r2, r7
 800e87e:	f000 fc37 	bl	800f0f0 <__lshift>
 800e882:	1bed      	subs	r5, r5, r7
 800e884:	4604      	mov	r4, r0
 800e886:	f100 0914 	add.w	r9, r0, #20
 800e88a:	f04f 0a00 	mov.w	sl, #0
 800e88e:	e7ae      	b.n	800e7ee <__gethex+0x202>
 800e890:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e894:	42a8      	cmp	r0, r5
 800e896:	dd72      	ble.n	800e97e <__gethex+0x392>
 800e898:	1b45      	subs	r5, r0, r5
 800e89a:	42ae      	cmp	r6, r5
 800e89c:	dc36      	bgt.n	800e90c <__gethex+0x320>
 800e89e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d02a      	beq.n	800e8fc <__gethex+0x310>
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d02c      	beq.n	800e904 <__gethex+0x318>
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d11c      	bne.n	800e8e8 <__gethex+0x2fc>
 800e8ae:	42ae      	cmp	r6, r5
 800e8b0:	d11a      	bne.n	800e8e8 <__gethex+0x2fc>
 800e8b2:	2e01      	cmp	r6, #1
 800e8b4:	d112      	bne.n	800e8dc <__gethex+0x2f0>
 800e8b6:	9a04      	ldr	r2, [sp, #16]
 800e8b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8bc:	6013      	str	r3, [r2, #0]
 800e8be:	2301      	movs	r3, #1
 800e8c0:	6123      	str	r3, [r4, #16]
 800e8c2:	f8c9 3000 	str.w	r3, [r9]
 800e8c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8c8:	2762      	movs	r7, #98	; 0x62
 800e8ca:	601c      	str	r4, [r3, #0]
 800e8cc:	e723      	b.n	800e716 <__gethex+0x12a>
 800e8ce:	bf00      	nop
 800e8d0:	08012ff0 	.word	0x08012ff0
 800e8d4:	08012f78 	.word	0x08012f78
 800e8d8:	08012f89 	.word	0x08012f89
 800e8dc:	1e71      	subs	r1, r6, #1
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f000 fe4a 	bl	800f578 <__any_on>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d1e6      	bne.n	800e8b6 <__gethex+0x2ca>
 800e8e8:	ee18 0a10 	vmov	r0, s16
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	f000 f9e3 	bl	800ecb8 <_Bfree>
 800e8f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	2750      	movs	r7, #80	; 0x50
 800e8fa:	e70c      	b.n	800e716 <__gethex+0x12a>
 800e8fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1f2      	bne.n	800e8e8 <__gethex+0x2fc>
 800e902:	e7d8      	b.n	800e8b6 <__gethex+0x2ca>
 800e904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1d5      	bne.n	800e8b6 <__gethex+0x2ca>
 800e90a:	e7ed      	b.n	800e8e8 <__gethex+0x2fc>
 800e90c:	1e6f      	subs	r7, r5, #1
 800e90e:	f1ba 0f00 	cmp.w	sl, #0
 800e912:	d131      	bne.n	800e978 <__gethex+0x38c>
 800e914:	b127      	cbz	r7, 800e920 <__gethex+0x334>
 800e916:	4639      	mov	r1, r7
 800e918:	4620      	mov	r0, r4
 800e91a:	f000 fe2d 	bl	800f578 <__any_on>
 800e91e:	4682      	mov	sl, r0
 800e920:	117b      	asrs	r3, r7, #5
 800e922:	2101      	movs	r1, #1
 800e924:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e928:	f007 071f 	and.w	r7, r7, #31
 800e92c:	fa01 f707 	lsl.w	r7, r1, r7
 800e930:	421f      	tst	r7, r3
 800e932:	4629      	mov	r1, r5
 800e934:	4620      	mov	r0, r4
 800e936:	bf18      	it	ne
 800e938:	f04a 0a02 	orrne.w	sl, sl, #2
 800e93c:	1b76      	subs	r6, r6, r5
 800e93e:	f7ff fded 	bl	800e51c <rshift>
 800e942:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e946:	2702      	movs	r7, #2
 800e948:	f1ba 0f00 	cmp.w	sl, #0
 800e94c:	d048      	beq.n	800e9e0 <__gethex+0x3f4>
 800e94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d015      	beq.n	800e982 <__gethex+0x396>
 800e956:	2b03      	cmp	r3, #3
 800e958:	d017      	beq.n	800e98a <__gethex+0x39e>
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d109      	bne.n	800e972 <__gethex+0x386>
 800e95e:	f01a 0f02 	tst.w	sl, #2
 800e962:	d006      	beq.n	800e972 <__gethex+0x386>
 800e964:	f8d9 0000 	ldr.w	r0, [r9]
 800e968:	ea4a 0a00 	orr.w	sl, sl, r0
 800e96c:	f01a 0f01 	tst.w	sl, #1
 800e970:	d10e      	bne.n	800e990 <__gethex+0x3a4>
 800e972:	f047 0710 	orr.w	r7, r7, #16
 800e976:	e033      	b.n	800e9e0 <__gethex+0x3f4>
 800e978:	f04f 0a01 	mov.w	sl, #1
 800e97c:	e7d0      	b.n	800e920 <__gethex+0x334>
 800e97e:	2701      	movs	r7, #1
 800e980:	e7e2      	b.n	800e948 <__gethex+0x35c>
 800e982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e984:	f1c3 0301 	rsb	r3, r3, #1
 800e988:	9315      	str	r3, [sp, #84]	; 0x54
 800e98a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0f0      	beq.n	800e972 <__gethex+0x386>
 800e990:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e994:	f104 0314 	add.w	r3, r4, #20
 800e998:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e99c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9a0:	f04f 0c00 	mov.w	ip, #0
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9ae:	d01c      	beq.n	800e9ea <__gethex+0x3fe>
 800e9b0:	3201      	adds	r2, #1
 800e9b2:	6002      	str	r2, [r0, #0]
 800e9b4:	2f02      	cmp	r7, #2
 800e9b6:	f104 0314 	add.w	r3, r4, #20
 800e9ba:	d13f      	bne.n	800ea3c <__gethex+0x450>
 800e9bc:	f8d8 2000 	ldr.w	r2, [r8]
 800e9c0:	3a01      	subs	r2, #1
 800e9c2:	42b2      	cmp	r2, r6
 800e9c4:	d10a      	bne.n	800e9dc <__gethex+0x3f0>
 800e9c6:	1171      	asrs	r1, r6, #5
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9ce:	f006 061f 	and.w	r6, r6, #31
 800e9d2:	fa02 f606 	lsl.w	r6, r2, r6
 800e9d6:	421e      	tst	r6, r3
 800e9d8:	bf18      	it	ne
 800e9da:	4617      	movne	r7, r2
 800e9dc:	f047 0720 	orr.w	r7, r7, #32
 800e9e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9e2:	601c      	str	r4, [r3, #0]
 800e9e4:	9b04      	ldr	r3, [sp, #16]
 800e9e6:	601d      	str	r5, [r3, #0]
 800e9e8:	e695      	b.n	800e716 <__gethex+0x12a>
 800e9ea:	4299      	cmp	r1, r3
 800e9ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9f0:	d8d8      	bhi.n	800e9a4 <__gethex+0x3b8>
 800e9f2:	68a3      	ldr	r3, [r4, #8]
 800e9f4:	459b      	cmp	fp, r3
 800e9f6:	db19      	blt.n	800ea2c <__gethex+0x440>
 800e9f8:	6861      	ldr	r1, [r4, #4]
 800e9fa:	ee18 0a10 	vmov	r0, s16
 800e9fe:	3101      	adds	r1, #1
 800ea00:	f000 f91a 	bl	800ec38 <_Balloc>
 800ea04:	4681      	mov	r9, r0
 800ea06:	b918      	cbnz	r0, 800ea10 <__gethex+0x424>
 800ea08:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <__gethex+0x488>)
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	2184      	movs	r1, #132	; 0x84
 800ea0e:	e6a8      	b.n	800e762 <__gethex+0x176>
 800ea10:	6922      	ldr	r2, [r4, #16]
 800ea12:	3202      	adds	r2, #2
 800ea14:	f104 010c 	add.w	r1, r4, #12
 800ea18:	0092      	lsls	r2, r2, #2
 800ea1a:	300c      	adds	r0, #12
 800ea1c:	f7fd f9a0 	bl	800bd60 <memcpy>
 800ea20:	4621      	mov	r1, r4
 800ea22:	ee18 0a10 	vmov	r0, s16
 800ea26:	f000 f947 	bl	800ecb8 <_Bfree>
 800ea2a:	464c      	mov	r4, r9
 800ea2c:	6923      	ldr	r3, [r4, #16]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea34:	6122      	str	r2, [r4, #16]
 800ea36:	2201      	movs	r2, #1
 800ea38:	615a      	str	r2, [r3, #20]
 800ea3a:	e7bb      	b.n	800e9b4 <__gethex+0x3c8>
 800ea3c:	6922      	ldr	r2, [r4, #16]
 800ea3e:	455a      	cmp	r2, fp
 800ea40:	dd0b      	ble.n	800ea5a <__gethex+0x46e>
 800ea42:	2101      	movs	r1, #1
 800ea44:	4620      	mov	r0, r4
 800ea46:	f7ff fd69 	bl	800e51c <rshift>
 800ea4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea4e:	3501      	adds	r5, #1
 800ea50:	42ab      	cmp	r3, r5
 800ea52:	f6ff aed0 	blt.w	800e7f6 <__gethex+0x20a>
 800ea56:	2701      	movs	r7, #1
 800ea58:	e7c0      	b.n	800e9dc <__gethex+0x3f0>
 800ea5a:	f016 061f 	ands.w	r6, r6, #31
 800ea5e:	d0fa      	beq.n	800ea56 <__gethex+0x46a>
 800ea60:	4453      	add	r3, sl
 800ea62:	f1c6 0620 	rsb	r6, r6, #32
 800ea66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea6a:	f000 f9d7 	bl	800ee1c <__hi0bits>
 800ea6e:	42b0      	cmp	r0, r6
 800ea70:	dbe7      	blt.n	800ea42 <__gethex+0x456>
 800ea72:	e7f0      	b.n	800ea56 <__gethex+0x46a>
 800ea74:	08012f78 	.word	0x08012f78

0800ea78 <L_shift>:
 800ea78:	f1c2 0208 	rsb	r2, r2, #8
 800ea7c:	0092      	lsls	r2, r2, #2
 800ea7e:	b570      	push	{r4, r5, r6, lr}
 800ea80:	f1c2 0620 	rsb	r6, r2, #32
 800ea84:	6843      	ldr	r3, [r0, #4]
 800ea86:	6804      	ldr	r4, [r0, #0]
 800ea88:	fa03 f506 	lsl.w	r5, r3, r6
 800ea8c:	432c      	orrs	r4, r5
 800ea8e:	40d3      	lsrs	r3, r2
 800ea90:	6004      	str	r4, [r0, #0]
 800ea92:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea96:	4288      	cmp	r0, r1
 800ea98:	d3f4      	bcc.n	800ea84 <L_shift+0xc>
 800ea9a:	bd70      	pop	{r4, r5, r6, pc}

0800ea9c <__match>:
 800ea9c:	b530      	push	{r4, r5, lr}
 800ea9e:	6803      	ldr	r3, [r0, #0]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaa6:	b914      	cbnz	r4, 800eaae <__match+0x12>
 800eaa8:	6003      	str	r3, [r0, #0]
 800eaaa:	2001      	movs	r0, #1
 800eaac:	bd30      	pop	{r4, r5, pc}
 800eaae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eab6:	2d19      	cmp	r5, #25
 800eab8:	bf98      	it	ls
 800eaba:	3220      	addls	r2, #32
 800eabc:	42a2      	cmp	r2, r4
 800eabe:	d0f0      	beq.n	800eaa2 <__match+0x6>
 800eac0:	2000      	movs	r0, #0
 800eac2:	e7f3      	b.n	800eaac <__match+0x10>

0800eac4 <__hexnan>:
 800eac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	680b      	ldr	r3, [r1, #0]
 800eaca:	115e      	asrs	r6, r3, #5
 800eacc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ead0:	f013 031f 	ands.w	r3, r3, #31
 800ead4:	b087      	sub	sp, #28
 800ead6:	bf18      	it	ne
 800ead8:	3604      	addne	r6, #4
 800eada:	2500      	movs	r5, #0
 800eadc:	1f37      	subs	r7, r6, #4
 800eade:	4690      	mov	r8, r2
 800eae0:	6802      	ldr	r2, [r0, #0]
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	4682      	mov	sl, r0
 800eae6:	f846 5c04 	str.w	r5, [r6, #-4]
 800eaea:	46b9      	mov	r9, r7
 800eaec:	463c      	mov	r4, r7
 800eaee:	9502      	str	r5, [sp, #8]
 800eaf0:	46ab      	mov	fp, r5
 800eaf2:	7851      	ldrb	r1, [r2, #1]
 800eaf4:	1c53      	adds	r3, r2, #1
 800eaf6:	9303      	str	r3, [sp, #12]
 800eaf8:	b341      	cbz	r1, 800eb4c <__hexnan+0x88>
 800eafa:	4608      	mov	r0, r1
 800eafc:	9205      	str	r2, [sp, #20]
 800eafe:	9104      	str	r1, [sp, #16]
 800eb00:	f7ff fd5e 	bl	800e5c0 <__hexdig_fun>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d14f      	bne.n	800eba8 <__hexnan+0xe4>
 800eb08:	9904      	ldr	r1, [sp, #16]
 800eb0a:	9a05      	ldr	r2, [sp, #20]
 800eb0c:	2920      	cmp	r1, #32
 800eb0e:	d818      	bhi.n	800eb42 <__hexnan+0x7e>
 800eb10:	9b02      	ldr	r3, [sp, #8]
 800eb12:	459b      	cmp	fp, r3
 800eb14:	dd13      	ble.n	800eb3e <__hexnan+0x7a>
 800eb16:	454c      	cmp	r4, r9
 800eb18:	d206      	bcs.n	800eb28 <__hexnan+0x64>
 800eb1a:	2d07      	cmp	r5, #7
 800eb1c:	dc04      	bgt.n	800eb28 <__hexnan+0x64>
 800eb1e:	462a      	mov	r2, r5
 800eb20:	4649      	mov	r1, r9
 800eb22:	4620      	mov	r0, r4
 800eb24:	f7ff ffa8 	bl	800ea78 <L_shift>
 800eb28:	4544      	cmp	r4, r8
 800eb2a:	d950      	bls.n	800ebce <__hexnan+0x10a>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f1a4 0904 	sub.w	r9, r4, #4
 800eb32:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb36:	f8cd b008 	str.w	fp, [sp, #8]
 800eb3a:	464c      	mov	r4, r9
 800eb3c:	461d      	mov	r5, r3
 800eb3e:	9a03      	ldr	r2, [sp, #12]
 800eb40:	e7d7      	b.n	800eaf2 <__hexnan+0x2e>
 800eb42:	2929      	cmp	r1, #41	; 0x29
 800eb44:	d156      	bne.n	800ebf4 <__hexnan+0x130>
 800eb46:	3202      	adds	r2, #2
 800eb48:	f8ca 2000 	str.w	r2, [sl]
 800eb4c:	f1bb 0f00 	cmp.w	fp, #0
 800eb50:	d050      	beq.n	800ebf4 <__hexnan+0x130>
 800eb52:	454c      	cmp	r4, r9
 800eb54:	d206      	bcs.n	800eb64 <__hexnan+0xa0>
 800eb56:	2d07      	cmp	r5, #7
 800eb58:	dc04      	bgt.n	800eb64 <__hexnan+0xa0>
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f7ff ff8a 	bl	800ea78 <L_shift>
 800eb64:	4544      	cmp	r4, r8
 800eb66:	d934      	bls.n	800ebd2 <__hexnan+0x10e>
 800eb68:	f1a8 0204 	sub.w	r2, r8, #4
 800eb6c:	4623      	mov	r3, r4
 800eb6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb72:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb76:	429f      	cmp	r7, r3
 800eb78:	d2f9      	bcs.n	800eb6e <__hexnan+0xaa>
 800eb7a:	1b3b      	subs	r3, r7, r4
 800eb7c:	f023 0303 	bic.w	r3, r3, #3
 800eb80:	3304      	adds	r3, #4
 800eb82:	3401      	adds	r4, #1
 800eb84:	3e03      	subs	r6, #3
 800eb86:	42b4      	cmp	r4, r6
 800eb88:	bf88      	it	hi
 800eb8a:	2304      	movhi	r3, #4
 800eb8c:	4443      	add	r3, r8
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f843 2b04 	str.w	r2, [r3], #4
 800eb94:	429f      	cmp	r7, r3
 800eb96:	d2fb      	bcs.n	800eb90 <__hexnan+0xcc>
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	b91b      	cbnz	r3, 800eba4 <__hexnan+0xe0>
 800eb9c:	4547      	cmp	r7, r8
 800eb9e:	d127      	bne.n	800ebf0 <__hexnan+0x12c>
 800eba0:	2301      	movs	r3, #1
 800eba2:	603b      	str	r3, [r7, #0]
 800eba4:	2005      	movs	r0, #5
 800eba6:	e026      	b.n	800ebf6 <__hexnan+0x132>
 800eba8:	3501      	adds	r5, #1
 800ebaa:	2d08      	cmp	r5, #8
 800ebac:	f10b 0b01 	add.w	fp, fp, #1
 800ebb0:	dd06      	ble.n	800ebc0 <__hexnan+0xfc>
 800ebb2:	4544      	cmp	r4, r8
 800ebb4:	d9c3      	bls.n	800eb3e <__hexnan+0x7a>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebbc:	2501      	movs	r5, #1
 800ebbe:	3c04      	subs	r4, #4
 800ebc0:	6822      	ldr	r2, [r4, #0]
 800ebc2:	f000 000f 	and.w	r0, r0, #15
 800ebc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ebca:	6022      	str	r2, [r4, #0]
 800ebcc:	e7b7      	b.n	800eb3e <__hexnan+0x7a>
 800ebce:	2508      	movs	r5, #8
 800ebd0:	e7b5      	b.n	800eb3e <__hexnan+0x7a>
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d0df      	beq.n	800eb98 <__hexnan+0xd4>
 800ebd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebdc:	f1c3 0320 	rsb	r3, r3, #32
 800ebe0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ebe8:	401a      	ands	r2, r3
 800ebea:	f846 2c04 	str.w	r2, [r6, #-4]
 800ebee:	e7d3      	b.n	800eb98 <__hexnan+0xd4>
 800ebf0:	3f04      	subs	r7, #4
 800ebf2:	e7d1      	b.n	800eb98 <__hexnan+0xd4>
 800ebf4:	2004      	movs	r0, #4
 800ebf6:	b007      	add	sp, #28
 800ebf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebfc <_localeconv_r>:
 800ebfc:	4800      	ldr	r0, [pc, #0]	; (800ec00 <_localeconv_r+0x4>)
 800ebfe:	4770      	bx	lr
 800ec00:	20000394 	.word	0x20000394

0800ec04 <malloc>:
 800ec04:	4b02      	ldr	r3, [pc, #8]	; (800ec10 <malloc+0xc>)
 800ec06:	4601      	mov	r1, r0
 800ec08:	6818      	ldr	r0, [r3, #0]
 800ec0a:	f000 bd59 	b.w	800f6c0 <_malloc_r>
 800ec0e:	bf00      	nop
 800ec10:	2000023c 	.word	0x2000023c

0800ec14 <__ascii_mbtowc>:
 800ec14:	b082      	sub	sp, #8
 800ec16:	b901      	cbnz	r1, 800ec1a <__ascii_mbtowc+0x6>
 800ec18:	a901      	add	r1, sp, #4
 800ec1a:	b142      	cbz	r2, 800ec2e <__ascii_mbtowc+0x1a>
 800ec1c:	b14b      	cbz	r3, 800ec32 <__ascii_mbtowc+0x1e>
 800ec1e:	7813      	ldrb	r3, [r2, #0]
 800ec20:	600b      	str	r3, [r1, #0]
 800ec22:	7812      	ldrb	r2, [r2, #0]
 800ec24:	1e10      	subs	r0, r2, #0
 800ec26:	bf18      	it	ne
 800ec28:	2001      	movne	r0, #1
 800ec2a:	b002      	add	sp, #8
 800ec2c:	4770      	bx	lr
 800ec2e:	4610      	mov	r0, r2
 800ec30:	e7fb      	b.n	800ec2a <__ascii_mbtowc+0x16>
 800ec32:	f06f 0001 	mvn.w	r0, #1
 800ec36:	e7f8      	b.n	800ec2a <__ascii_mbtowc+0x16>

0800ec38 <_Balloc>:
 800ec38:	b570      	push	{r4, r5, r6, lr}
 800ec3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	460d      	mov	r5, r1
 800ec40:	b976      	cbnz	r6, 800ec60 <_Balloc+0x28>
 800ec42:	2010      	movs	r0, #16
 800ec44:	f7ff ffde 	bl	800ec04 <malloc>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	6260      	str	r0, [r4, #36]	; 0x24
 800ec4c:	b920      	cbnz	r0, 800ec58 <_Balloc+0x20>
 800ec4e:	4b18      	ldr	r3, [pc, #96]	; (800ecb0 <_Balloc+0x78>)
 800ec50:	4818      	ldr	r0, [pc, #96]	; (800ecb4 <_Balloc+0x7c>)
 800ec52:	2166      	movs	r1, #102	; 0x66
 800ec54:	f000 ff3e 	bl	800fad4 <__assert_func>
 800ec58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec5c:	6006      	str	r6, [r0, #0]
 800ec5e:	60c6      	str	r6, [r0, #12]
 800ec60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec62:	68f3      	ldr	r3, [r6, #12]
 800ec64:	b183      	cbz	r3, 800ec88 <_Balloc+0x50>
 800ec66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec6e:	b9b8      	cbnz	r0, 800eca0 <_Balloc+0x68>
 800ec70:	2101      	movs	r1, #1
 800ec72:	fa01 f605 	lsl.w	r6, r1, r5
 800ec76:	1d72      	adds	r2, r6, #5
 800ec78:	0092      	lsls	r2, r2, #2
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f000 fc9d 	bl	800f5ba <_calloc_r>
 800ec80:	b160      	cbz	r0, 800ec9c <_Balloc+0x64>
 800ec82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec86:	e00e      	b.n	800eca6 <_Balloc+0x6e>
 800ec88:	2221      	movs	r2, #33	; 0x21
 800ec8a:	2104      	movs	r1, #4
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fc94 	bl	800f5ba <_calloc_r>
 800ec92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec94:	60f0      	str	r0, [r6, #12]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1e4      	bne.n	800ec66 <_Balloc+0x2e>
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}
 800eca0:	6802      	ldr	r2, [r0, #0]
 800eca2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eca6:	2300      	movs	r3, #0
 800eca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ecac:	e7f7      	b.n	800ec9e <_Balloc+0x66>
 800ecae:	bf00      	nop
 800ecb0:	08012f06 	.word	0x08012f06
 800ecb4:	08013004 	.word	0x08013004

0800ecb8 <_Bfree>:
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	b976      	cbnz	r6, 800ece0 <_Bfree+0x28>
 800ecc2:	2010      	movs	r0, #16
 800ecc4:	f7ff ff9e 	bl	800ec04 <malloc>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	6268      	str	r0, [r5, #36]	; 0x24
 800eccc:	b920      	cbnz	r0, 800ecd8 <_Bfree+0x20>
 800ecce:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <_Bfree+0x3c>)
 800ecd0:	4809      	ldr	r0, [pc, #36]	; (800ecf8 <_Bfree+0x40>)
 800ecd2:	218a      	movs	r1, #138	; 0x8a
 800ecd4:	f000 fefe 	bl	800fad4 <__assert_func>
 800ecd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecdc:	6006      	str	r6, [r0, #0]
 800ecde:	60c6      	str	r6, [r0, #12]
 800ece0:	b13c      	cbz	r4, 800ecf2 <_Bfree+0x3a>
 800ece2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ece4:	6862      	ldr	r2, [r4, #4]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecec:	6021      	str	r1, [r4, #0]
 800ecee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	08012f06 	.word	0x08012f06
 800ecf8:	08013004 	.word	0x08013004

0800ecfc <__multadd>:
 800ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed00:	690d      	ldr	r5, [r1, #16]
 800ed02:	4607      	mov	r7, r0
 800ed04:	460c      	mov	r4, r1
 800ed06:	461e      	mov	r6, r3
 800ed08:	f101 0c14 	add.w	ip, r1, #20
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	f8dc 3000 	ldr.w	r3, [ip]
 800ed12:	b299      	uxth	r1, r3
 800ed14:	fb02 6101 	mla	r1, r2, r1, r6
 800ed18:	0c1e      	lsrs	r6, r3, #16
 800ed1a:	0c0b      	lsrs	r3, r1, #16
 800ed1c:	fb02 3306 	mla	r3, r2, r6, r3
 800ed20:	b289      	uxth	r1, r1
 800ed22:	3001      	adds	r0, #1
 800ed24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed28:	4285      	cmp	r5, r0
 800ed2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ed2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed32:	dcec      	bgt.n	800ed0e <__multadd+0x12>
 800ed34:	b30e      	cbz	r6, 800ed7a <__multadd+0x7e>
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	42ab      	cmp	r3, r5
 800ed3a:	dc19      	bgt.n	800ed70 <__multadd+0x74>
 800ed3c:	6861      	ldr	r1, [r4, #4]
 800ed3e:	4638      	mov	r0, r7
 800ed40:	3101      	adds	r1, #1
 800ed42:	f7ff ff79 	bl	800ec38 <_Balloc>
 800ed46:	4680      	mov	r8, r0
 800ed48:	b928      	cbnz	r0, 800ed56 <__multadd+0x5a>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	4b0c      	ldr	r3, [pc, #48]	; (800ed80 <__multadd+0x84>)
 800ed4e:	480d      	ldr	r0, [pc, #52]	; (800ed84 <__multadd+0x88>)
 800ed50:	21b5      	movs	r1, #181	; 0xb5
 800ed52:	f000 febf 	bl	800fad4 <__assert_func>
 800ed56:	6922      	ldr	r2, [r4, #16]
 800ed58:	3202      	adds	r2, #2
 800ed5a:	f104 010c 	add.w	r1, r4, #12
 800ed5e:	0092      	lsls	r2, r2, #2
 800ed60:	300c      	adds	r0, #12
 800ed62:	f7fc fffd 	bl	800bd60 <memcpy>
 800ed66:	4621      	mov	r1, r4
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7ff ffa5 	bl	800ecb8 <_Bfree>
 800ed6e:	4644      	mov	r4, r8
 800ed70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed74:	3501      	adds	r5, #1
 800ed76:	615e      	str	r6, [r3, #20]
 800ed78:	6125      	str	r5, [r4, #16]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed80:	08012f78 	.word	0x08012f78
 800ed84:	08013004 	.word	0x08013004

0800ed88 <__s2b>:
 800ed88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	4615      	mov	r5, r2
 800ed90:	461f      	mov	r7, r3
 800ed92:	2209      	movs	r2, #9
 800ed94:	3308      	adds	r3, #8
 800ed96:	4606      	mov	r6, r0
 800ed98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	2201      	movs	r2, #1
 800eda0:	429a      	cmp	r2, r3
 800eda2:	db09      	blt.n	800edb8 <__s2b+0x30>
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff ff47 	bl	800ec38 <_Balloc>
 800edaa:	b940      	cbnz	r0, 800edbe <__s2b+0x36>
 800edac:	4602      	mov	r2, r0
 800edae:	4b19      	ldr	r3, [pc, #100]	; (800ee14 <__s2b+0x8c>)
 800edb0:	4819      	ldr	r0, [pc, #100]	; (800ee18 <__s2b+0x90>)
 800edb2:	21ce      	movs	r1, #206	; 0xce
 800edb4:	f000 fe8e 	bl	800fad4 <__assert_func>
 800edb8:	0052      	lsls	r2, r2, #1
 800edba:	3101      	adds	r1, #1
 800edbc:	e7f0      	b.n	800eda0 <__s2b+0x18>
 800edbe:	9b08      	ldr	r3, [sp, #32]
 800edc0:	6143      	str	r3, [r0, #20]
 800edc2:	2d09      	cmp	r5, #9
 800edc4:	f04f 0301 	mov.w	r3, #1
 800edc8:	6103      	str	r3, [r0, #16]
 800edca:	dd16      	ble.n	800edfa <__s2b+0x72>
 800edcc:	f104 0909 	add.w	r9, r4, #9
 800edd0:	46c8      	mov	r8, r9
 800edd2:	442c      	add	r4, r5
 800edd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800edd8:	4601      	mov	r1, r0
 800edda:	3b30      	subs	r3, #48	; 0x30
 800eddc:	220a      	movs	r2, #10
 800edde:	4630      	mov	r0, r6
 800ede0:	f7ff ff8c 	bl	800ecfc <__multadd>
 800ede4:	45a0      	cmp	r8, r4
 800ede6:	d1f5      	bne.n	800edd4 <__s2b+0x4c>
 800ede8:	f1a5 0408 	sub.w	r4, r5, #8
 800edec:	444c      	add	r4, r9
 800edee:	1b2d      	subs	r5, r5, r4
 800edf0:	1963      	adds	r3, r4, r5
 800edf2:	42bb      	cmp	r3, r7
 800edf4:	db04      	blt.n	800ee00 <__s2b+0x78>
 800edf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edfa:	340a      	adds	r4, #10
 800edfc:	2509      	movs	r5, #9
 800edfe:	e7f6      	b.n	800edee <__s2b+0x66>
 800ee00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee04:	4601      	mov	r1, r0
 800ee06:	3b30      	subs	r3, #48	; 0x30
 800ee08:	220a      	movs	r2, #10
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f7ff ff76 	bl	800ecfc <__multadd>
 800ee10:	e7ee      	b.n	800edf0 <__s2b+0x68>
 800ee12:	bf00      	nop
 800ee14:	08012f78 	.word	0x08012f78
 800ee18:	08013004 	.word	0x08013004

0800ee1c <__hi0bits>:
 800ee1c:	0c03      	lsrs	r3, r0, #16
 800ee1e:	041b      	lsls	r3, r3, #16
 800ee20:	b9d3      	cbnz	r3, 800ee58 <__hi0bits+0x3c>
 800ee22:	0400      	lsls	r0, r0, #16
 800ee24:	2310      	movs	r3, #16
 800ee26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ee2a:	bf04      	itt	eq
 800ee2c:	0200      	lsleq	r0, r0, #8
 800ee2e:	3308      	addeq	r3, #8
 800ee30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ee34:	bf04      	itt	eq
 800ee36:	0100      	lsleq	r0, r0, #4
 800ee38:	3304      	addeq	r3, #4
 800ee3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ee3e:	bf04      	itt	eq
 800ee40:	0080      	lsleq	r0, r0, #2
 800ee42:	3302      	addeq	r3, #2
 800ee44:	2800      	cmp	r0, #0
 800ee46:	db05      	blt.n	800ee54 <__hi0bits+0x38>
 800ee48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ee4c:	f103 0301 	add.w	r3, r3, #1
 800ee50:	bf08      	it	eq
 800ee52:	2320      	moveq	r3, #32
 800ee54:	4618      	mov	r0, r3
 800ee56:	4770      	bx	lr
 800ee58:	2300      	movs	r3, #0
 800ee5a:	e7e4      	b.n	800ee26 <__hi0bits+0xa>

0800ee5c <__lo0bits>:
 800ee5c:	6803      	ldr	r3, [r0, #0]
 800ee5e:	f013 0207 	ands.w	r2, r3, #7
 800ee62:	4601      	mov	r1, r0
 800ee64:	d00b      	beq.n	800ee7e <__lo0bits+0x22>
 800ee66:	07da      	lsls	r2, r3, #31
 800ee68:	d423      	bmi.n	800eeb2 <__lo0bits+0x56>
 800ee6a:	0798      	lsls	r0, r3, #30
 800ee6c:	bf49      	itett	mi
 800ee6e:	085b      	lsrmi	r3, r3, #1
 800ee70:	089b      	lsrpl	r3, r3, #2
 800ee72:	2001      	movmi	r0, #1
 800ee74:	600b      	strmi	r3, [r1, #0]
 800ee76:	bf5c      	itt	pl
 800ee78:	600b      	strpl	r3, [r1, #0]
 800ee7a:	2002      	movpl	r0, #2
 800ee7c:	4770      	bx	lr
 800ee7e:	b298      	uxth	r0, r3
 800ee80:	b9a8      	cbnz	r0, 800eeae <__lo0bits+0x52>
 800ee82:	0c1b      	lsrs	r3, r3, #16
 800ee84:	2010      	movs	r0, #16
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	b90a      	cbnz	r2, 800ee8e <__lo0bits+0x32>
 800ee8a:	3008      	adds	r0, #8
 800ee8c:	0a1b      	lsrs	r3, r3, #8
 800ee8e:	071a      	lsls	r2, r3, #28
 800ee90:	bf04      	itt	eq
 800ee92:	091b      	lsreq	r3, r3, #4
 800ee94:	3004      	addeq	r0, #4
 800ee96:	079a      	lsls	r2, r3, #30
 800ee98:	bf04      	itt	eq
 800ee9a:	089b      	lsreq	r3, r3, #2
 800ee9c:	3002      	addeq	r0, #2
 800ee9e:	07da      	lsls	r2, r3, #31
 800eea0:	d403      	bmi.n	800eeaa <__lo0bits+0x4e>
 800eea2:	085b      	lsrs	r3, r3, #1
 800eea4:	f100 0001 	add.w	r0, r0, #1
 800eea8:	d005      	beq.n	800eeb6 <__lo0bits+0x5a>
 800eeaa:	600b      	str	r3, [r1, #0]
 800eeac:	4770      	bx	lr
 800eeae:	4610      	mov	r0, r2
 800eeb0:	e7e9      	b.n	800ee86 <__lo0bits+0x2a>
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	4770      	bx	lr
 800eeb6:	2020      	movs	r0, #32
 800eeb8:	4770      	bx	lr
	...

0800eebc <__i2b>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	460c      	mov	r4, r1
 800eec0:	2101      	movs	r1, #1
 800eec2:	f7ff feb9 	bl	800ec38 <_Balloc>
 800eec6:	4602      	mov	r2, r0
 800eec8:	b928      	cbnz	r0, 800eed6 <__i2b+0x1a>
 800eeca:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <__i2b+0x24>)
 800eecc:	4805      	ldr	r0, [pc, #20]	; (800eee4 <__i2b+0x28>)
 800eece:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eed2:	f000 fdff 	bl	800fad4 <__assert_func>
 800eed6:	2301      	movs	r3, #1
 800eed8:	6144      	str	r4, [r0, #20]
 800eeda:	6103      	str	r3, [r0, #16]
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	bf00      	nop
 800eee0:	08012f78 	.word	0x08012f78
 800eee4:	08013004 	.word	0x08013004

0800eee8 <__multiply>:
 800eee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeec:	4691      	mov	r9, r2
 800eeee:	690a      	ldr	r2, [r1, #16]
 800eef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	bfb8      	it	lt
 800eef8:	460b      	movlt	r3, r1
 800eefa:	460c      	mov	r4, r1
 800eefc:	bfbc      	itt	lt
 800eefe:	464c      	movlt	r4, r9
 800ef00:	4699      	movlt	r9, r3
 800ef02:	6927      	ldr	r7, [r4, #16]
 800ef04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ef08:	68a3      	ldr	r3, [r4, #8]
 800ef0a:	6861      	ldr	r1, [r4, #4]
 800ef0c:	eb07 060a 	add.w	r6, r7, sl
 800ef10:	42b3      	cmp	r3, r6
 800ef12:	b085      	sub	sp, #20
 800ef14:	bfb8      	it	lt
 800ef16:	3101      	addlt	r1, #1
 800ef18:	f7ff fe8e 	bl	800ec38 <_Balloc>
 800ef1c:	b930      	cbnz	r0, 800ef2c <__multiply+0x44>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	4b44      	ldr	r3, [pc, #272]	; (800f034 <__multiply+0x14c>)
 800ef22:	4845      	ldr	r0, [pc, #276]	; (800f038 <__multiply+0x150>)
 800ef24:	f240 115d 	movw	r1, #349	; 0x15d
 800ef28:	f000 fdd4 	bl	800fad4 <__assert_func>
 800ef2c:	f100 0514 	add.w	r5, r0, #20
 800ef30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef34:	462b      	mov	r3, r5
 800ef36:	2200      	movs	r2, #0
 800ef38:	4543      	cmp	r3, r8
 800ef3a:	d321      	bcc.n	800ef80 <__multiply+0x98>
 800ef3c:	f104 0314 	add.w	r3, r4, #20
 800ef40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef44:	f109 0314 	add.w	r3, r9, #20
 800ef48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ef4c:	9202      	str	r2, [sp, #8]
 800ef4e:	1b3a      	subs	r2, r7, r4
 800ef50:	3a15      	subs	r2, #21
 800ef52:	f022 0203 	bic.w	r2, r2, #3
 800ef56:	3204      	adds	r2, #4
 800ef58:	f104 0115 	add.w	r1, r4, #21
 800ef5c:	428f      	cmp	r7, r1
 800ef5e:	bf38      	it	cc
 800ef60:	2204      	movcc	r2, #4
 800ef62:	9201      	str	r2, [sp, #4]
 800ef64:	9a02      	ldr	r2, [sp, #8]
 800ef66:	9303      	str	r3, [sp, #12]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d80c      	bhi.n	800ef86 <__multiply+0x9e>
 800ef6c:	2e00      	cmp	r6, #0
 800ef6e:	dd03      	ble.n	800ef78 <__multiply+0x90>
 800ef70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d05a      	beq.n	800f02e <__multiply+0x146>
 800ef78:	6106      	str	r6, [r0, #16]
 800ef7a:	b005      	add	sp, #20
 800ef7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef80:	f843 2b04 	str.w	r2, [r3], #4
 800ef84:	e7d8      	b.n	800ef38 <__multiply+0x50>
 800ef86:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef8a:	f1ba 0f00 	cmp.w	sl, #0
 800ef8e:	d024      	beq.n	800efda <__multiply+0xf2>
 800ef90:	f104 0e14 	add.w	lr, r4, #20
 800ef94:	46a9      	mov	r9, r5
 800ef96:	f04f 0c00 	mov.w	ip, #0
 800ef9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef9e:	f8d9 1000 	ldr.w	r1, [r9]
 800efa2:	fa1f fb82 	uxth.w	fp, r2
 800efa6:	b289      	uxth	r1, r1
 800efa8:	fb0a 110b 	mla	r1, sl, fp, r1
 800efac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800efb0:	f8d9 2000 	ldr.w	r2, [r9]
 800efb4:	4461      	add	r1, ip
 800efb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800efba:	fb0a c20b 	mla	r2, sl, fp, ip
 800efbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800efc2:	b289      	uxth	r1, r1
 800efc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800efc8:	4577      	cmp	r7, lr
 800efca:	f849 1b04 	str.w	r1, [r9], #4
 800efce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800efd2:	d8e2      	bhi.n	800ef9a <__multiply+0xb2>
 800efd4:	9a01      	ldr	r2, [sp, #4]
 800efd6:	f845 c002 	str.w	ip, [r5, r2]
 800efda:	9a03      	ldr	r2, [sp, #12]
 800efdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800efe0:	3304      	adds	r3, #4
 800efe2:	f1b9 0f00 	cmp.w	r9, #0
 800efe6:	d020      	beq.n	800f02a <__multiply+0x142>
 800efe8:	6829      	ldr	r1, [r5, #0]
 800efea:	f104 0c14 	add.w	ip, r4, #20
 800efee:	46ae      	mov	lr, r5
 800eff0:	f04f 0a00 	mov.w	sl, #0
 800eff4:	f8bc b000 	ldrh.w	fp, [ip]
 800eff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800effc:	fb09 220b 	mla	r2, r9, fp, r2
 800f000:	4492      	add	sl, r2
 800f002:	b289      	uxth	r1, r1
 800f004:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f008:	f84e 1b04 	str.w	r1, [lr], #4
 800f00c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f010:	f8be 1000 	ldrh.w	r1, [lr]
 800f014:	0c12      	lsrs	r2, r2, #16
 800f016:	fb09 1102 	mla	r1, r9, r2, r1
 800f01a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f01e:	4567      	cmp	r7, ip
 800f020:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f024:	d8e6      	bhi.n	800eff4 <__multiply+0x10c>
 800f026:	9a01      	ldr	r2, [sp, #4]
 800f028:	50a9      	str	r1, [r5, r2]
 800f02a:	3504      	adds	r5, #4
 800f02c:	e79a      	b.n	800ef64 <__multiply+0x7c>
 800f02e:	3e01      	subs	r6, #1
 800f030:	e79c      	b.n	800ef6c <__multiply+0x84>
 800f032:	bf00      	nop
 800f034:	08012f78 	.word	0x08012f78
 800f038:	08013004 	.word	0x08013004

0800f03c <__pow5mult>:
 800f03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f040:	4615      	mov	r5, r2
 800f042:	f012 0203 	ands.w	r2, r2, #3
 800f046:	4606      	mov	r6, r0
 800f048:	460f      	mov	r7, r1
 800f04a:	d007      	beq.n	800f05c <__pow5mult+0x20>
 800f04c:	4c25      	ldr	r4, [pc, #148]	; (800f0e4 <__pow5mult+0xa8>)
 800f04e:	3a01      	subs	r2, #1
 800f050:	2300      	movs	r3, #0
 800f052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f056:	f7ff fe51 	bl	800ecfc <__multadd>
 800f05a:	4607      	mov	r7, r0
 800f05c:	10ad      	asrs	r5, r5, #2
 800f05e:	d03d      	beq.n	800f0dc <__pow5mult+0xa0>
 800f060:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f062:	b97c      	cbnz	r4, 800f084 <__pow5mult+0x48>
 800f064:	2010      	movs	r0, #16
 800f066:	f7ff fdcd 	bl	800ec04 <malloc>
 800f06a:	4602      	mov	r2, r0
 800f06c:	6270      	str	r0, [r6, #36]	; 0x24
 800f06e:	b928      	cbnz	r0, 800f07c <__pow5mult+0x40>
 800f070:	4b1d      	ldr	r3, [pc, #116]	; (800f0e8 <__pow5mult+0xac>)
 800f072:	481e      	ldr	r0, [pc, #120]	; (800f0ec <__pow5mult+0xb0>)
 800f074:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f078:	f000 fd2c 	bl	800fad4 <__assert_func>
 800f07c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f080:	6004      	str	r4, [r0, #0]
 800f082:	60c4      	str	r4, [r0, #12]
 800f084:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f08c:	b94c      	cbnz	r4, 800f0a2 <__pow5mult+0x66>
 800f08e:	f240 2171 	movw	r1, #625	; 0x271
 800f092:	4630      	mov	r0, r6
 800f094:	f7ff ff12 	bl	800eebc <__i2b>
 800f098:	2300      	movs	r3, #0
 800f09a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f09e:	4604      	mov	r4, r0
 800f0a0:	6003      	str	r3, [r0, #0]
 800f0a2:	f04f 0900 	mov.w	r9, #0
 800f0a6:	07eb      	lsls	r3, r5, #31
 800f0a8:	d50a      	bpl.n	800f0c0 <__pow5mult+0x84>
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	4622      	mov	r2, r4
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f7ff ff1a 	bl	800eee8 <__multiply>
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	4680      	mov	r8, r0
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f7ff fdfd 	bl	800ecb8 <_Bfree>
 800f0be:	4647      	mov	r7, r8
 800f0c0:	106d      	asrs	r5, r5, #1
 800f0c2:	d00b      	beq.n	800f0dc <__pow5mult+0xa0>
 800f0c4:	6820      	ldr	r0, [r4, #0]
 800f0c6:	b938      	cbnz	r0, 800f0d8 <__pow5mult+0x9c>
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7ff ff0b 	bl	800eee8 <__multiply>
 800f0d2:	6020      	str	r0, [r4, #0]
 800f0d4:	f8c0 9000 	str.w	r9, [r0]
 800f0d8:	4604      	mov	r4, r0
 800f0da:	e7e4      	b.n	800f0a6 <__pow5mult+0x6a>
 800f0dc:	4638      	mov	r0, r7
 800f0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0e2:	bf00      	nop
 800f0e4:	08013150 	.word	0x08013150
 800f0e8:	08012f06 	.word	0x08012f06
 800f0ec:	08013004 	.word	0x08013004

0800f0f0 <__lshift>:
 800f0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f4:	460c      	mov	r4, r1
 800f0f6:	6849      	ldr	r1, [r1, #4]
 800f0f8:	6923      	ldr	r3, [r4, #16]
 800f0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0fe:	68a3      	ldr	r3, [r4, #8]
 800f100:	4607      	mov	r7, r0
 800f102:	4691      	mov	r9, r2
 800f104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f108:	f108 0601 	add.w	r6, r8, #1
 800f10c:	42b3      	cmp	r3, r6
 800f10e:	db0b      	blt.n	800f128 <__lshift+0x38>
 800f110:	4638      	mov	r0, r7
 800f112:	f7ff fd91 	bl	800ec38 <_Balloc>
 800f116:	4605      	mov	r5, r0
 800f118:	b948      	cbnz	r0, 800f12e <__lshift+0x3e>
 800f11a:	4602      	mov	r2, r0
 800f11c:	4b2a      	ldr	r3, [pc, #168]	; (800f1c8 <__lshift+0xd8>)
 800f11e:	482b      	ldr	r0, [pc, #172]	; (800f1cc <__lshift+0xdc>)
 800f120:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f124:	f000 fcd6 	bl	800fad4 <__assert_func>
 800f128:	3101      	adds	r1, #1
 800f12a:	005b      	lsls	r3, r3, #1
 800f12c:	e7ee      	b.n	800f10c <__lshift+0x1c>
 800f12e:	2300      	movs	r3, #0
 800f130:	f100 0114 	add.w	r1, r0, #20
 800f134:	f100 0210 	add.w	r2, r0, #16
 800f138:	4618      	mov	r0, r3
 800f13a:	4553      	cmp	r3, sl
 800f13c:	db37      	blt.n	800f1ae <__lshift+0xbe>
 800f13e:	6920      	ldr	r0, [r4, #16]
 800f140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f144:	f104 0314 	add.w	r3, r4, #20
 800f148:	f019 091f 	ands.w	r9, r9, #31
 800f14c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f154:	d02f      	beq.n	800f1b6 <__lshift+0xc6>
 800f156:	f1c9 0e20 	rsb	lr, r9, #32
 800f15a:	468a      	mov	sl, r1
 800f15c:	f04f 0c00 	mov.w	ip, #0
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	fa02 f209 	lsl.w	r2, r2, r9
 800f166:	ea42 020c 	orr.w	r2, r2, ip
 800f16a:	f84a 2b04 	str.w	r2, [sl], #4
 800f16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f172:	4298      	cmp	r0, r3
 800f174:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f178:	d8f2      	bhi.n	800f160 <__lshift+0x70>
 800f17a:	1b03      	subs	r3, r0, r4
 800f17c:	3b15      	subs	r3, #21
 800f17e:	f023 0303 	bic.w	r3, r3, #3
 800f182:	3304      	adds	r3, #4
 800f184:	f104 0215 	add.w	r2, r4, #21
 800f188:	4290      	cmp	r0, r2
 800f18a:	bf38      	it	cc
 800f18c:	2304      	movcc	r3, #4
 800f18e:	f841 c003 	str.w	ip, [r1, r3]
 800f192:	f1bc 0f00 	cmp.w	ip, #0
 800f196:	d001      	beq.n	800f19c <__lshift+0xac>
 800f198:	f108 0602 	add.w	r6, r8, #2
 800f19c:	3e01      	subs	r6, #1
 800f19e:	4638      	mov	r0, r7
 800f1a0:	612e      	str	r6, [r5, #16]
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	f7ff fd88 	bl	800ecb8 <_Bfree>
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	e7c1      	b.n	800f13a <__lshift+0x4a>
 800f1b6:	3904      	subs	r1, #4
 800f1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1c0:	4298      	cmp	r0, r3
 800f1c2:	d8f9      	bhi.n	800f1b8 <__lshift+0xc8>
 800f1c4:	e7ea      	b.n	800f19c <__lshift+0xac>
 800f1c6:	bf00      	nop
 800f1c8:	08012f78 	.word	0x08012f78
 800f1cc:	08013004 	.word	0x08013004

0800f1d0 <__mcmp>:
 800f1d0:	b530      	push	{r4, r5, lr}
 800f1d2:	6902      	ldr	r2, [r0, #16]
 800f1d4:	690c      	ldr	r4, [r1, #16]
 800f1d6:	1b12      	subs	r2, r2, r4
 800f1d8:	d10e      	bne.n	800f1f8 <__mcmp+0x28>
 800f1da:	f100 0314 	add.w	r3, r0, #20
 800f1de:	3114      	adds	r1, #20
 800f1e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f1e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f1e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f1ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f1f0:	42a5      	cmp	r5, r4
 800f1f2:	d003      	beq.n	800f1fc <__mcmp+0x2c>
 800f1f4:	d305      	bcc.n	800f202 <__mcmp+0x32>
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	bd30      	pop	{r4, r5, pc}
 800f1fc:	4283      	cmp	r3, r0
 800f1fe:	d3f3      	bcc.n	800f1e8 <__mcmp+0x18>
 800f200:	e7fa      	b.n	800f1f8 <__mcmp+0x28>
 800f202:	f04f 32ff 	mov.w	r2, #4294967295
 800f206:	e7f7      	b.n	800f1f8 <__mcmp+0x28>

0800f208 <__mdiff>:
 800f208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	460c      	mov	r4, r1
 800f20e:	4606      	mov	r6, r0
 800f210:	4611      	mov	r1, r2
 800f212:	4620      	mov	r0, r4
 800f214:	4690      	mov	r8, r2
 800f216:	f7ff ffdb 	bl	800f1d0 <__mcmp>
 800f21a:	1e05      	subs	r5, r0, #0
 800f21c:	d110      	bne.n	800f240 <__mdiff+0x38>
 800f21e:	4629      	mov	r1, r5
 800f220:	4630      	mov	r0, r6
 800f222:	f7ff fd09 	bl	800ec38 <_Balloc>
 800f226:	b930      	cbnz	r0, 800f236 <__mdiff+0x2e>
 800f228:	4b3a      	ldr	r3, [pc, #232]	; (800f314 <__mdiff+0x10c>)
 800f22a:	4602      	mov	r2, r0
 800f22c:	f240 2132 	movw	r1, #562	; 0x232
 800f230:	4839      	ldr	r0, [pc, #228]	; (800f318 <__mdiff+0x110>)
 800f232:	f000 fc4f 	bl	800fad4 <__assert_func>
 800f236:	2301      	movs	r3, #1
 800f238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f23c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f240:	bfa4      	itt	ge
 800f242:	4643      	movge	r3, r8
 800f244:	46a0      	movge	r8, r4
 800f246:	4630      	mov	r0, r6
 800f248:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f24c:	bfa6      	itte	ge
 800f24e:	461c      	movge	r4, r3
 800f250:	2500      	movge	r5, #0
 800f252:	2501      	movlt	r5, #1
 800f254:	f7ff fcf0 	bl	800ec38 <_Balloc>
 800f258:	b920      	cbnz	r0, 800f264 <__mdiff+0x5c>
 800f25a:	4b2e      	ldr	r3, [pc, #184]	; (800f314 <__mdiff+0x10c>)
 800f25c:	4602      	mov	r2, r0
 800f25e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f262:	e7e5      	b.n	800f230 <__mdiff+0x28>
 800f264:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f268:	6926      	ldr	r6, [r4, #16]
 800f26a:	60c5      	str	r5, [r0, #12]
 800f26c:	f104 0914 	add.w	r9, r4, #20
 800f270:	f108 0514 	add.w	r5, r8, #20
 800f274:	f100 0e14 	add.w	lr, r0, #20
 800f278:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f27c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f280:	f108 0210 	add.w	r2, r8, #16
 800f284:	46f2      	mov	sl, lr
 800f286:	2100      	movs	r1, #0
 800f288:	f859 3b04 	ldr.w	r3, [r9], #4
 800f28c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f290:	fa1f f883 	uxth.w	r8, r3
 800f294:	fa11 f18b 	uxtah	r1, r1, fp
 800f298:	0c1b      	lsrs	r3, r3, #16
 800f29a:	eba1 0808 	sub.w	r8, r1, r8
 800f29e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f2a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f2a6:	fa1f f888 	uxth.w	r8, r8
 800f2aa:	1419      	asrs	r1, r3, #16
 800f2ac:	454e      	cmp	r6, r9
 800f2ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f2b2:	f84a 3b04 	str.w	r3, [sl], #4
 800f2b6:	d8e7      	bhi.n	800f288 <__mdiff+0x80>
 800f2b8:	1b33      	subs	r3, r6, r4
 800f2ba:	3b15      	subs	r3, #21
 800f2bc:	f023 0303 	bic.w	r3, r3, #3
 800f2c0:	3304      	adds	r3, #4
 800f2c2:	3415      	adds	r4, #21
 800f2c4:	42a6      	cmp	r6, r4
 800f2c6:	bf38      	it	cc
 800f2c8:	2304      	movcc	r3, #4
 800f2ca:	441d      	add	r5, r3
 800f2cc:	4473      	add	r3, lr
 800f2ce:	469e      	mov	lr, r3
 800f2d0:	462e      	mov	r6, r5
 800f2d2:	4566      	cmp	r6, ip
 800f2d4:	d30e      	bcc.n	800f2f4 <__mdiff+0xec>
 800f2d6:	f10c 0203 	add.w	r2, ip, #3
 800f2da:	1b52      	subs	r2, r2, r5
 800f2dc:	f022 0203 	bic.w	r2, r2, #3
 800f2e0:	3d03      	subs	r5, #3
 800f2e2:	45ac      	cmp	ip, r5
 800f2e4:	bf38      	it	cc
 800f2e6:	2200      	movcc	r2, #0
 800f2e8:	441a      	add	r2, r3
 800f2ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f2ee:	b17b      	cbz	r3, 800f310 <__mdiff+0x108>
 800f2f0:	6107      	str	r7, [r0, #16]
 800f2f2:	e7a3      	b.n	800f23c <__mdiff+0x34>
 800f2f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800f2f8:	fa11 f288 	uxtah	r2, r1, r8
 800f2fc:	1414      	asrs	r4, r2, #16
 800f2fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f302:	b292      	uxth	r2, r2
 800f304:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f308:	f84e 2b04 	str.w	r2, [lr], #4
 800f30c:	1421      	asrs	r1, r4, #16
 800f30e:	e7e0      	b.n	800f2d2 <__mdiff+0xca>
 800f310:	3f01      	subs	r7, #1
 800f312:	e7ea      	b.n	800f2ea <__mdiff+0xe2>
 800f314:	08012f78 	.word	0x08012f78
 800f318:	08013004 	.word	0x08013004

0800f31c <__ulp>:
 800f31c:	b082      	sub	sp, #8
 800f31e:	ed8d 0b00 	vstr	d0, [sp]
 800f322:	9b01      	ldr	r3, [sp, #4]
 800f324:	4912      	ldr	r1, [pc, #72]	; (800f370 <__ulp+0x54>)
 800f326:	4019      	ands	r1, r3
 800f328:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f32c:	2900      	cmp	r1, #0
 800f32e:	dd05      	ble.n	800f33c <__ulp+0x20>
 800f330:	2200      	movs	r2, #0
 800f332:	460b      	mov	r3, r1
 800f334:	ec43 2b10 	vmov	d0, r2, r3
 800f338:	b002      	add	sp, #8
 800f33a:	4770      	bx	lr
 800f33c:	4249      	negs	r1, r1
 800f33e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f342:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f346:	f04f 0200 	mov.w	r2, #0
 800f34a:	f04f 0300 	mov.w	r3, #0
 800f34e:	da04      	bge.n	800f35a <__ulp+0x3e>
 800f350:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f354:	fa41 f300 	asr.w	r3, r1, r0
 800f358:	e7ec      	b.n	800f334 <__ulp+0x18>
 800f35a:	f1a0 0114 	sub.w	r1, r0, #20
 800f35e:	291e      	cmp	r1, #30
 800f360:	bfda      	itte	le
 800f362:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f366:	fa20 f101 	lsrle.w	r1, r0, r1
 800f36a:	2101      	movgt	r1, #1
 800f36c:	460a      	mov	r2, r1
 800f36e:	e7e1      	b.n	800f334 <__ulp+0x18>
 800f370:	7ff00000 	.word	0x7ff00000

0800f374 <__b2d>:
 800f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f376:	6905      	ldr	r5, [r0, #16]
 800f378:	f100 0714 	add.w	r7, r0, #20
 800f37c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f380:	1f2e      	subs	r6, r5, #4
 800f382:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f386:	4620      	mov	r0, r4
 800f388:	f7ff fd48 	bl	800ee1c <__hi0bits>
 800f38c:	f1c0 0320 	rsb	r3, r0, #32
 800f390:	280a      	cmp	r0, #10
 800f392:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f410 <__b2d+0x9c>
 800f396:	600b      	str	r3, [r1, #0]
 800f398:	dc14      	bgt.n	800f3c4 <__b2d+0x50>
 800f39a:	f1c0 0e0b 	rsb	lr, r0, #11
 800f39e:	fa24 f10e 	lsr.w	r1, r4, lr
 800f3a2:	42b7      	cmp	r7, r6
 800f3a4:	ea41 030c 	orr.w	r3, r1, ip
 800f3a8:	bf34      	ite	cc
 800f3aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f3ae:	2100      	movcs	r1, #0
 800f3b0:	3015      	adds	r0, #21
 800f3b2:	fa04 f000 	lsl.w	r0, r4, r0
 800f3b6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f3ba:	ea40 0201 	orr.w	r2, r0, r1
 800f3be:	ec43 2b10 	vmov	d0, r2, r3
 800f3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c4:	42b7      	cmp	r7, r6
 800f3c6:	bf3a      	itte	cc
 800f3c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f3cc:	f1a5 0608 	subcc.w	r6, r5, #8
 800f3d0:	2100      	movcs	r1, #0
 800f3d2:	380b      	subs	r0, #11
 800f3d4:	d017      	beq.n	800f406 <__b2d+0x92>
 800f3d6:	f1c0 0c20 	rsb	ip, r0, #32
 800f3da:	fa04 f500 	lsl.w	r5, r4, r0
 800f3de:	42be      	cmp	r6, r7
 800f3e0:	fa21 f40c 	lsr.w	r4, r1, ip
 800f3e4:	ea45 0504 	orr.w	r5, r5, r4
 800f3e8:	bf8c      	ite	hi
 800f3ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f3ee:	2400      	movls	r4, #0
 800f3f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f3f4:	fa01 f000 	lsl.w	r0, r1, r0
 800f3f8:	fa24 f40c 	lsr.w	r4, r4, ip
 800f3fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f400:	ea40 0204 	orr.w	r2, r0, r4
 800f404:	e7db      	b.n	800f3be <__b2d+0x4a>
 800f406:	ea44 030c 	orr.w	r3, r4, ip
 800f40a:	460a      	mov	r2, r1
 800f40c:	e7d7      	b.n	800f3be <__b2d+0x4a>
 800f40e:	bf00      	nop
 800f410:	3ff00000 	.word	0x3ff00000

0800f414 <__d2b>:
 800f414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f418:	4689      	mov	r9, r1
 800f41a:	2101      	movs	r1, #1
 800f41c:	ec57 6b10 	vmov	r6, r7, d0
 800f420:	4690      	mov	r8, r2
 800f422:	f7ff fc09 	bl	800ec38 <_Balloc>
 800f426:	4604      	mov	r4, r0
 800f428:	b930      	cbnz	r0, 800f438 <__d2b+0x24>
 800f42a:	4602      	mov	r2, r0
 800f42c:	4b25      	ldr	r3, [pc, #148]	; (800f4c4 <__d2b+0xb0>)
 800f42e:	4826      	ldr	r0, [pc, #152]	; (800f4c8 <__d2b+0xb4>)
 800f430:	f240 310a 	movw	r1, #778	; 0x30a
 800f434:	f000 fb4e 	bl	800fad4 <__assert_func>
 800f438:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f43c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f440:	bb35      	cbnz	r5, 800f490 <__d2b+0x7c>
 800f442:	2e00      	cmp	r6, #0
 800f444:	9301      	str	r3, [sp, #4]
 800f446:	d028      	beq.n	800f49a <__d2b+0x86>
 800f448:	4668      	mov	r0, sp
 800f44a:	9600      	str	r6, [sp, #0]
 800f44c:	f7ff fd06 	bl	800ee5c <__lo0bits>
 800f450:	9900      	ldr	r1, [sp, #0]
 800f452:	b300      	cbz	r0, 800f496 <__d2b+0x82>
 800f454:	9a01      	ldr	r2, [sp, #4]
 800f456:	f1c0 0320 	rsb	r3, r0, #32
 800f45a:	fa02 f303 	lsl.w	r3, r2, r3
 800f45e:	430b      	orrs	r3, r1
 800f460:	40c2      	lsrs	r2, r0
 800f462:	6163      	str	r3, [r4, #20]
 800f464:	9201      	str	r2, [sp, #4]
 800f466:	9b01      	ldr	r3, [sp, #4]
 800f468:	61a3      	str	r3, [r4, #24]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	bf14      	ite	ne
 800f46e:	2202      	movne	r2, #2
 800f470:	2201      	moveq	r2, #1
 800f472:	6122      	str	r2, [r4, #16]
 800f474:	b1d5      	cbz	r5, 800f4ac <__d2b+0x98>
 800f476:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f47a:	4405      	add	r5, r0
 800f47c:	f8c9 5000 	str.w	r5, [r9]
 800f480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f484:	f8c8 0000 	str.w	r0, [r8]
 800f488:	4620      	mov	r0, r4
 800f48a:	b003      	add	sp, #12
 800f48c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f494:	e7d5      	b.n	800f442 <__d2b+0x2e>
 800f496:	6161      	str	r1, [r4, #20]
 800f498:	e7e5      	b.n	800f466 <__d2b+0x52>
 800f49a:	a801      	add	r0, sp, #4
 800f49c:	f7ff fcde 	bl	800ee5c <__lo0bits>
 800f4a0:	9b01      	ldr	r3, [sp, #4]
 800f4a2:	6163      	str	r3, [r4, #20]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	6122      	str	r2, [r4, #16]
 800f4a8:	3020      	adds	r0, #32
 800f4aa:	e7e3      	b.n	800f474 <__d2b+0x60>
 800f4ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f4b4:	f8c9 0000 	str.w	r0, [r9]
 800f4b8:	6918      	ldr	r0, [r3, #16]
 800f4ba:	f7ff fcaf 	bl	800ee1c <__hi0bits>
 800f4be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f4c2:	e7df      	b.n	800f484 <__d2b+0x70>
 800f4c4:	08012f78 	.word	0x08012f78
 800f4c8:	08013004 	.word	0x08013004

0800f4cc <__ratio>:
 800f4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	4688      	mov	r8, r1
 800f4d2:	4669      	mov	r1, sp
 800f4d4:	4681      	mov	r9, r0
 800f4d6:	f7ff ff4d 	bl	800f374 <__b2d>
 800f4da:	a901      	add	r1, sp, #4
 800f4dc:	4640      	mov	r0, r8
 800f4de:	ec55 4b10 	vmov	r4, r5, d0
 800f4e2:	f7ff ff47 	bl	800f374 <__b2d>
 800f4e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f4ee:	eba3 0c02 	sub.w	ip, r3, r2
 800f4f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4f6:	1a9b      	subs	r3, r3, r2
 800f4f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f4fc:	ec51 0b10 	vmov	r0, r1, d0
 800f500:	2b00      	cmp	r3, #0
 800f502:	bfd6      	itet	le
 800f504:	460a      	movle	r2, r1
 800f506:	462a      	movgt	r2, r5
 800f508:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f50c:	468b      	mov	fp, r1
 800f50e:	462f      	mov	r7, r5
 800f510:	bfd4      	ite	le
 800f512:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f516:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f51a:	4620      	mov	r0, r4
 800f51c:	ee10 2a10 	vmov	r2, s0
 800f520:	465b      	mov	r3, fp
 800f522:	4639      	mov	r1, r7
 800f524:	f7f1 f99a 	bl	800085c <__aeabi_ddiv>
 800f528:	ec41 0b10 	vmov	d0, r0, r1
 800f52c:	b003      	add	sp, #12
 800f52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f532 <__copybits>:
 800f532:	3901      	subs	r1, #1
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	1149      	asrs	r1, r1, #5
 800f538:	6914      	ldr	r4, [r2, #16]
 800f53a:	3101      	adds	r1, #1
 800f53c:	f102 0314 	add.w	r3, r2, #20
 800f540:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f544:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f548:	1f05      	subs	r5, r0, #4
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	d30c      	bcc.n	800f568 <__copybits+0x36>
 800f54e:	1aa3      	subs	r3, r4, r2
 800f550:	3b11      	subs	r3, #17
 800f552:	f023 0303 	bic.w	r3, r3, #3
 800f556:	3211      	adds	r2, #17
 800f558:	42a2      	cmp	r2, r4
 800f55a:	bf88      	it	hi
 800f55c:	2300      	movhi	r3, #0
 800f55e:	4418      	add	r0, r3
 800f560:	2300      	movs	r3, #0
 800f562:	4288      	cmp	r0, r1
 800f564:	d305      	bcc.n	800f572 <__copybits+0x40>
 800f566:	bd70      	pop	{r4, r5, r6, pc}
 800f568:	f853 6b04 	ldr.w	r6, [r3], #4
 800f56c:	f845 6f04 	str.w	r6, [r5, #4]!
 800f570:	e7eb      	b.n	800f54a <__copybits+0x18>
 800f572:	f840 3b04 	str.w	r3, [r0], #4
 800f576:	e7f4      	b.n	800f562 <__copybits+0x30>

0800f578 <__any_on>:
 800f578:	f100 0214 	add.w	r2, r0, #20
 800f57c:	6900      	ldr	r0, [r0, #16]
 800f57e:	114b      	asrs	r3, r1, #5
 800f580:	4298      	cmp	r0, r3
 800f582:	b510      	push	{r4, lr}
 800f584:	db11      	blt.n	800f5aa <__any_on+0x32>
 800f586:	dd0a      	ble.n	800f59e <__any_on+0x26>
 800f588:	f011 011f 	ands.w	r1, r1, #31
 800f58c:	d007      	beq.n	800f59e <__any_on+0x26>
 800f58e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f592:	fa24 f001 	lsr.w	r0, r4, r1
 800f596:	fa00 f101 	lsl.w	r1, r0, r1
 800f59a:	428c      	cmp	r4, r1
 800f59c:	d10b      	bne.n	800f5b6 <__any_on+0x3e>
 800f59e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d803      	bhi.n	800f5ae <__any_on+0x36>
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	bd10      	pop	{r4, pc}
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	e7f7      	b.n	800f59e <__any_on+0x26>
 800f5ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	d0f5      	beq.n	800f5a2 <__any_on+0x2a>
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	e7f6      	b.n	800f5a8 <__any_on+0x30>

0800f5ba <_calloc_r>:
 800f5ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5bc:	fba1 2402 	umull	r2, r4, r1, r2
 800f5c0:	b94c      	cbnz	r4, 800f5d6 <_calloc_r+0x1c>
 800f5c2:	4611      	mov	r1, r2
 800f5c4:	9201      	str	r2, [sp, #4]
 800f5c6:	f000 f87b 	bl	800f6c0 <_malloc_r>
 800f5ca:	9a01      	ldr	r2, [sp, #4]
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	b930      	cbnz	r0, 800f5de <_calloc_r+0x24>
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	b003      	add	sp, #12
 800f5d4:	bd30      	pop	{r4, r5, pc}
 800f5d6:	220c      	movs	r2, #12
 800f5d8:	6002      	str	r2, [r0, #0]
 800f5da:	2500      	movs	r5, #0
 800f5dc:	e7f8      	b.n	800f5d0 <_calloc_r+0x16>
 800f5de:	4621      	mov	r1, r4
 800f5e0:	f7fc fbcc 	bl	800bd7c <memset>
 800f5e4:	e7f4      	b.n	800f5d0 <_calloc_r+0x16>
	...

0800f5e8 <_free_r>:
 800f5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ea:	2900      	cmp	r1, #0
 800f5ec:	d044      	beq.n	800f678 <_free_r+0x90>
 800f5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5f2:	9001      	str	r0, [sp, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f5fa:	bfb8      	it	lt
 800f5fc:	18e4      	addlt	r4, r4, r3
 800f5fe:	f000 fab3 	bl	800fb68 <__malloc_lock>
 800f602:	4a1e      	ldr	r2, [pc, #120]	; (800f67c <_free_r+0x94>)
 800f604:	9801      	ldr	r0, [sp, #4]
 800f606:	6813      	ldr	r3, [r2, #0]
 800f608:	b933      	cbnz	r3, 800f618 <_free_r+0x30>
 800f60a:	6063      	str	r3, [r4, #4]
 800f60c:	6014      	str	r4, [r2, #0]
 800f60e:	b003      	add	sp, #12
 800f610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f614:	f000 baae 	b.w	800fb74 <__malloc_unlock>
 800f618:	42a3      	cmp	r3, r4
 800f61a:	d908      	bls.n	800f62e <_free_r+0x46>
 800f61c:	6825      	ldr	r5, [r4, #0]
 800f61e:	1961      	adds	r1, r4, r5
 800f620:	428b      	cmp	r3, r1
 800f622:	bf01      	itttt	eq
 800f624:	6819      	ldreq	r1, [r3, #0]
 800f626:	685b      	ldreq	r3, [r3, #4]
 800f628:	1949      	addeq	r1, r1, r5
 800f62a:	6021      	streq	r1, [r4, #0]
 800f62c:	e7ed      	b.n	800f60a <_free_r+0x22>
 800f62e:	461a      	mov	r2, r3
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	b10b      	cbz	r3, 800f638 <_free_r+0x50>
 800f634:	42a3      	cmp	r3, r4
 800f636:	d9fa      	bls.n	800f62e <_free_r+0x46>
 800f638:	6811      	ldr	r1, [r2, #0]
 800f63a:	1855      	adds	r5, r2, r1
 800f63c:	42a5      	cmp	r5, r4
 800f63e:	d10b      	bne.n	800f658 <_free_r+0x70>
 800f640:	6824      	ldr	r4, [r4, #0]
 800f642:	4421      	add	r1, r4
 800f644:	1854      	adds	r4, r2, r1
 800f646:	42a3      	cmp	r3, r4
 800f648:	6011      	str	r1, [r2, #0]
 800f64a:	d1e0      	bne.n	800f60e <_free_r+0x26>
 800f64c:	681c      	ldr	r4, [r3, #0]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	6053      	str	r3, [r2, #4]
 800f652:	4421      	add	r1, r4
 800f654:	6011      	str	r1, [r2, #0]
 800f656:	e7da      	b.n	800f60e <_free_r+0x26>
 800f658:	d902      	bls.n	800f660 <_free_r+0x78>
 800f65a:	230c      	movs	r3, #12
 800f65c:	6003      	str	r3, [r0, #0]
 800f65e:	e7d6      	b.n	800f60e <_free_r+0x26>
 800f660:	6825      	ldr	r5, [r4, #0]
 800f662:	1961      	adds	r1, r4, r5
 800f664:	428b      	cmp	r3, r1
 800f666:	bf04      	itt	eq
 800f668:	6819      	ldreq	r1, [r3, #0]
 800f66a:	685b      	ldreq	r3, [r3, #4]
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	bf04      	itt	eq
 800f670:	1949      	addeq	r1, r1, r5
 800f672:	6021      	streq	r1, [r4, #0]
 800f674:	6054      	str	r4, [r2, #4]
 800f676:	e7ca      	b.n	800f60e <_free_r+0x26>
 800f678:	b003      	add	sp, #12
 800f67a:	bd30      	pop	{r4, r5, pc}
 800f67c:	20001fc4 	.word	0x20001fc4

0800f680 <sbrk_aligned>:
 800f680:	b570      	push	{r4, r5, r6, lr}
 800f682:	4e0e      	ldr	r6, [pc, #56]	; (800f6bc <sbrk_aligned+0x3c>)
 800f684:	460c      	mov	r4, r1
 800f686:	6831      	ldr	r1, [r6, #0]
 800f688:	4605      	mov	r5, r0
 800f68a:	b911      	cbnz	r1, 800f692 <sbrk_aligned+0x12>
 800f68c:	f000 f9f0 	bl	800fa70 <_sbrk_r>
 800f690:	6030      	str	r0, [r6, #0]
 800f692:	4621      	mov	r1, r4
 800f694:	4628      	mov	r0, r5
 800f696:	f000 f9eb 	bl	800fa70 <_sbrk_r>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	d00a      	beq.n	800f6b4 <sbrk_aligned+0x34>
 800f69e:	1cc4      	adds	r4, r0, #3
 800f6a0:	f024 0403 	bic.w	r4, r4, #3
 800f6a4:	42a0      	cmp	r0, r4
 800f6a6:	d007      	beq.n	800f6b8 <sbrk_aligned+0x38>
 800f6a8:	1a21      	subs	r1, r4, r0
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f000 f9e0 	bl	800fa70 <_sbrk_r>
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d101      	bne.n	800f6b8 <sbrk_aligned+0x38>
 800f6b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	20001fc8 	.word	0x20001fc8

0800f6c0 <_malloc_r>:
 800f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c4:	1ccd      	adds	r5, r1, #3
 800f6c6:	f025 0503 	bic.w	r5, r5, #3
 800f6ca:	3508      	adds	r5, #8
 800f6cc:	2d0c      	cmp	r5, #12
 800f6ce:	bf38      	it	cc
 800f6d0:	250c      	movcc	r5, #12
 800f6d2:	2d00      	cmp	r5, #0
 800f6d4:	4607      	mov	r7, r0
 800f6d6:	db01      	blt.n	800f6dc <_malloc_r+0x1c>
 800f6d8:	42a9      	cmp	r1, r5
 800f6da:	d905      	bls.n	800f6e8 <_malloc_r+0x28>
 800f6dc:	230c      	movs	r3, #12
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	2600      	movs	r6, #0
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e8:	4e2e      	ldr	r6, [pc, #184]	; (800f7a4 <_malloc_r+0xe4>)
 800f6ea:	f000 fa3d 	bl	800fb68 <__malloc_lock>
 800f6ee:	6833      	ldr	r3, [r6, #0]
 800f6f0:	461c      	mov	r4, r3
 800f6f2:	bb34      	cbnz	r4, 800f742 <_malloc_r+0x82>
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	f7ff ffc2 	bl	800f680 <sbrk_aligned>
 800f6fc:	1c43      	adds	r3, r0, #1
 800f6fe:	4604      	mov	r4, r0
 800f700:	d14d      	bne.n	800f79e <_malloc_r+0xde>
 800f702:	6834      	ldr	r4, [r6, #0]
 800f704:	4626      	mov	r6, r4
 800f706:	2e00      	cmp	r6, #0
 800f708:	d140      	bne.n	800f78c <_malloc_r+0xcc>
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	4631      	mov	r1, r6
 800f70e:	4638      	mov	r0, r7
 800f710:	eb04 0803 	add.w	r8, r4, r3
 800f714:	f000 f9ac 	bl	800fa70 <_sbrk_r>
 800f718:	4580      	cmp	r8, r0
 800f71a:	d13a      	bne.n	800f792 <_malloc_r+0xd2>
 800f71c:	6821      	ldr	r1, [r4, #0]
 800f71e:	3503      	adds	r5, #3
 800f720:	1a6d      	subs	r5, r5, r1
 800f722:	f025 0503 	bic.w	r5, r5, #3
 800f726:	3508      	adds	r5, #8
 800f728:	2d0c      	cmp	r5, #12
 800f72a:	bf38      	it	cc
 800f72c:	250c      	movcc	r5, #12
 800f72e:	4629      	mov	r1, r5
 800f730:	4638      	mov	r0, r7
 800f732:	f7ff ffa5 	bl	800f680 <sbrk_aligned>
 800f736:	3001      	adds	r0, #1
 800f738:	d02b      	beq.n	800f792 <_malloc_r+0xd2>
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	442b      	add	r3, r5
 800f73e:	6023      	str	r3, [r4, #0]
 800f740:	e00e      	b.n	800f760 <_malloc_r+0xa0>
 800f742:	6822      	ldr	r2, [r4, #0]
 800f744:	1b52      	subs	r2, r2, r5
 800f746:	d41e      	bmi.n	800f786 <_malloc_r+0xc6>
 800f748:	2a0b      	cmp	r2, #11
 800f74a:	d916      	bls.n	800f77a <_malloc_r+0xba>
 800f74c:	1961      	adds	r1, r4, r5
 800f74e:	42a3      	cmp	r3, r4
 800f750:	6025      	str	r5, [r4, #0]
 800f752:	bf18      	it	ne
 800f754:	6059      	strne	r1, [r3, #4]
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	bf08      	it	eq
 800f75a:	6031      	streq	r1, [r6, #0]
 800f75c:	5162      	str	r2, [r4, r5]
 800f75e:	604b      	str	r3, [r1, #4]
 800f760:	4638      	mov	r0, r7
 800f762:	f104 060b 	add.w	r6, r4, #11
 800f766:	f000 fa05 	bl	800fb74 <__malloc_unlock>
 800f76a:	f026 0607 	bic.w	r6, r6, #7
 800f76e:	1d23      	adds	r3, r4, #4
 800f770:	1af2      	subs	r2, r6, r3
 800f772:	d0b6      	beq.n	800f6e2 <_malloc_r+0x22>
 800f774:	1b9b      	subs	r3, r3, r6
 800f776:	50a3      	str	r3, [r4, r2]
 800f778:	e7b3      	b.n	800f6e2 <_malloc_r+0x22>
 800f77a:	6862      	ldr	r2, [r4, #4]
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	bf0c      	ite	eq
 800f780:	6032      	streq	r2, [r6, #0]
 800f782:	605a      	strne	r2, [r3, #4]
 800f784:	e7ec      	b.n	800f760 <_malloc_r+0xa0>
 800f786:	4623      	mov	r3, r4
 800f788:	6864      	ldr	r4, [r4, #4]
 800f78a:	e7b2      	b.n	800f6f2 <_malloc_r+0x32>
 800f78c:	4634      	mov	r4, r6
 800f78e:	6876      	ldr	r6, [r6, #4]
 800f790:	e7b9      	b.n	800f706 <_malloc_r+0x46>
 800f792:	230c      	movs	r3, #12
 800f794:	603b      	str	r3, [r7, #0]
 800f796:	4638      	mov	r0, r7
 800f798:	f000 f9ec 	bl	800fb74 <__malloc_unlock>
 800f79c:	e7a1      	b.n	800f6e2 <_malloc_r+0x22>
 800f79e:	6025      	str	r5, [r4, #0]
 800f7a0:	e7de      	b.n	800f760 <_malloc_r+0xa0>
 800f7a2:	bf00      	nop
 800f7a4:	20001fc4 	.word	0x20001fc4

0800f7a8 <__ssputs_r>:
 800f7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ac:	688e      	ldr	r6, [r1, #8]
 800f7ae:	429e      	cmp	r6, r3
 800f7b0:	4682      	mov	sl, r0
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	4690      	mov	r8, r2
 800f7b6:	461f      	mov	r7, r3
 800f7b8:	d838      	bhi.n	800f82c <__ssputs_r+0x84>
 800f7ba:	898a      	ldrh	r2, [r1, #12]
 800f7bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7c0:	d032      	beq.n	800f828 <__ssputs_r+0x80>
 800f7c2:	6825      	ldr	r5, [r4, #0]
 800f7c4:	6909      	ldr	r1, [r1, #16]
 800f7c6:	eba5 0901 	sub.w	r9, r5, r1
 800f7ca:	6965      	ldr	r5, [r4, #20]
 800f7cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	444b      	add	r3, r9
 800f7d8:	106d      	asrs	r5, r5, #1
 800f7da:	429d      	cmp	r5, r3
 800f7dc:	bf38      	it	cc
 800f7de:	461d      	movcc	r5, r3
 800f7e0:	0553      	lsls	r3, r2, #21
 800f7e2:	d531      	bpl.n	800f848 <__ssputs_r+0xa0>
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	f7ff ff6b 	bl	800f6c0 <_malloc_r>
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	b950      	cbnz	r0, 800f804 <__ssputs_r+0x5c>
 800f7ee:	230c      	movs	r3, #12
 800f7f0:	f8ca 3000 	str.w	r3, [sl]
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7fa:	81a3      	strh	r3, [r4, #12]
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f804:	6921      	ldr	r1, [r4, #16]
 800f806:	464a      	mov	r2, r9
 800f808:	f7fc faaa 	bl	800bd60 <memcpy>
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	6126      	str	r6, [r4, #16]
 800f81a:	6165      	str	r5, [r4, #20]
 800f81c:	444e      	add	r6, r9
 800f81e:	eba5 0509 	sub.w	r5, r5, r9
 800f822:	6026      	str	r6, [r4, #0]
 800f824:	60a5      	str	r5, [r4, #8]
 800f826:	463e      	mov	r6, r7
 800f828:	42be      	cmp	r6, r7
 800f82a:	d900      	bls.n	800f82e <__ssputs_r+0x86>
 800f82c:	463e      	mov	r6, r7
 800f82e:	6820      	ldr	r0, [r4, #0]
 800f830:	4632      	mov	r2, r6
 800f832:	4641      	mov	r1, r8
 800f834:	f000 f97e 	bl	800fb34 <memmove>
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	1b9b      	subs	r3, r3, r6
 800f83c:	60a3      	str	r3, [r4, #8]
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	4433      	add	r3, r6
 800f842:	6023      	str	r3, [r4, #0]
 800f844:	2000      	movs	r0, #0
 800f846:	e7db      	b.n	800f800 <__ssputs_r+0x58>
 800f848:	462a      	mov	r2, r5
 800f84a:	f000 f999 	bl	800fb80 <_realloc_r>
 800f84e:	4606      	mov	r6, r0
 800f850:	2800      	cmp	r0, #0
 800f852:	d1e1      	bne.n	800f818 <__ssputs_r+0x70>
 800f854:	6921      	ldr	r1, [r4, #16]
 800f856:	4650      	mov	r0, sl
 800f858:	f7ff fec6 	bl	800f5e8 <_free_r>
 800f85c:	e7c7      	b.n	800f7ee <__ssputs_r+0x46>
	...

0800f860 <_svfiprintf_r>:
 800f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	4698      	mov	r8, r3
 800f866:	898b      	ldrh	r3, [r1, #12]
 800f868:	061b      	lsls	r3, r3, #24
 800f86a:	b09d      	sub	sp, #116	; 0x74
 800f86c:	4607      	mov	r7, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	4614      	mov	r4, r2
 800f872:	d50e      	bpl.n	800f892 <_svfiprintf_r+0x32>
 800f874:	690b      	ldr	r3, [r1, #16]
 800f876:	b963      	cbnz	r3, 800f892 <_svfiprintf_r+0x32>
 800f878:	2140      	movs	r1, #64	; 0x40
 800f87a:	f7ff ff21 	bl	800f6c0 <_malloc_r>
 800f87e:	6028      	str	r0, [r5, #0]
 800f880:	6128      	str	r0, [r5, #16]
 800f882:	b920      	cbnz	r0, 800f88e <_svfiprintf_r+0x2e>
 800f884:	230c      	movs	r3, #12
 800f886:	603b      	str	r3, [r7, #0]
 800f888:	f04f 30ff 	mov.w	r0, #4294967295
 800f88c:	e0d1      	b.n	800fa32 <_svfiprintf_r+0x1d2>
 800f88e:	2340      	movs	r3, #64	; 0x40
 800f890:	616b      	str	r3, [r5, #20]
 800f892:	2300      	movs	r3, #0
 800f894:	9309      	str	r3, [sp, #36]	; 0x24
 800f896:	2320      	movs	r3, #32
 800f898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8a0:	2330      	movs	r3, #48	; 0x30
 800f8a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa4c <_svfiprintf_r+0x1ec>
 800f8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8aa:	f04f 0901 	mov.w	r9, #1
 800f8ae:	4623      	mov	r3, r4
 800f8b0:	469a      	mov	sl, r3
 800f8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b6:	b10a      	cbz	r2, 800f8bc <_svfiprintf_r+0x5c>
 800f8b8:	2a25      	cmp	r2, #37	; 0x25
 800f8ba:	d1f9      	bne.n	800f8b0 <_svfiprintf_r+0x50>
 800f8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f8c0:	d00b      	beq.n	800f8da <_svfiprintf_r+0x7a>
 800f8c2:	465b      	mov	r3, fp
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7ff ff6d 	bl	800f7a8 <__ssputs_r>
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f000 80aa 	beq.w	800fa28 <_svfiprintf_r+0x1c8>
 800f8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8d6:	445a      	add	r2, fp
 800f8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800f8da:	f89a 3000 	ldrb.w	r3, [sl]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 80a2 	beq.w	800fa28 <_svfiprintf_r+0x1c8>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8ee:	f10a 0a01 	add.w	sl, sl, #1
 800f8f2:	9304      	str	r3, [sp, #16]
 800f8f4:	9307      	str	r3, [sp, #28]
 800f8f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8fa:	931a      	str	r3, [sp, #104]	; 0x68
 800f8fc:	4654      	mov	r4, sl
 800f8fe:	2205      	movs	r2, #5
 800f900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f904:	4851      	ldr	r0, [pc, #324]	; (800fa4c <_svfiprintf_r+0x1ec>)
 800f906:	f7f0 fc73 	bl	80001f0 <memchr>
 800f90a:	9a04      	ldr	r2, [sp, #16]
 800f90c:	b9d8      	cbnz	r0, 800f946 <_svfiprintf_r+0xe6>
 800f90e:	06d0      	lsls	r0, r2, #27
 800f910:	bf44      	itt	mi
 800f912:	2320      	movmi	r3, #32
 800f914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f918:	0711      	lsls	r1, r2, #28
 800f91a:	bf44      	itt	mi
 800f91c:	232b      	movmi	r3, #43	; 0x2b
 800f91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f922:	f89a 3000 	ldrb.w	r3, [sl]
 800f926:	2b2a      	cmp	r3, #42	; 0x2a
 800f928:	d015      	beq.n	800f956 <_svfiprintf_r+0xf6>
 800f92a:	9a07      	ldr	r2, [sp, #28]
 800f92c:	4654      	mov	r4, sl
 800f92e:	2000      	movs	r0, #0
 800f930:	f04f 0c0a 	mov.w	ip, #10
 800f934:	4621      	mov	r1, r4
 800f936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f93a:	3b30      	subs	r3, #48	; 0x30
 800f93c:	2b09      	cmp	r3, #9
 800f93e:	d94e      	bls.n	800f9de <_svfiprintf_r+0x17e>
 800f940:	b1b0      	cbz	r0, 800f970 <_svfiprintf_r+0x110>
 800f942:	9207      	str	r2, [sp, #28]
 800f944:	e014      	b.n	800f970 <_svfiprintf_r+0x110>
 800f946:	eba0 0308 	sub.w	r3, r0, r8
 800f94a:	fa09 f303 	lsl.w	r3, r9, r3
 800f94e:	4313      	orrs	r3, r2
 800f950:	9304      	str	r3, [sp, #16]
 800f952:	46a2      	mov	sl, r4
 800f954:	e7d2      	b.n	800f8fc <_svfiprintf_r+0x9c>
 800f956:	9b03      	ldr	r3, [sp, #12]
 800f958:	1d19      	adds	r1, r3, #4
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	9103      	str	r1, [sp, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	bfbb      	ittet	lt
 800f962:	425b      	neglt	r3, r3
 800f964:	f042 0202 	orrlt.w	r2, r2, #2
 800f968:	9307      	strge	r3, [sp, #28]
 800f96a:	9307      	strlt	r3, [sp, #28]
 800f96c:	bfb8      	it	lt
 800f96e:	9204      	strlt	r2, [sp, #16]
 800f970:	7823      	ldrb	r3, [r4, #0]
 800f972:	2b2e      	cmp	r3, #46	; 0x2e
 800f974:	d10c      	bne.n	800f990 <_svfiprintf_r+0x130>
 800f976:	7863      	ldrb	r3, [r4, #1]
 800f978:	2b2a      	cmp	r3, #42	; 0x2a
 800f97a:	d135      	bne.n	800f9e8 <_svfiprintf_r+0x188>
 800f97c:	9b03      	ldr	r3, [sp, #12]
 800f97e:	1d1a      	adds	r2, r3, #4
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	9203      	str	r2, [sp, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	bfb8      	it	lt
 800f988:	f04f 33ff 	movlt.w	r3, #4294967295
 800f98c:	3402      	adds	r4, #2
 800f98e:	9305      	str	r3, [sp, #20]
 800f990:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa5c <_svfiprintf_r+0x1fc>
 800f994:	7821      	ldrb	r1, [r4, #0]
 800f996:	2203      	movs	r2, #3
 800f998:	4650      	mov	r0, sl
 800f99a:	f7f0 fc29 	bl	80001f0 <memchr>
 800f99e:	b140      	cbz	r0, 800f9b2 <_svfiprintf_r+0x152>
 800f9a0:	2340      	movs	r3, #64	; 0x40
 800f9a2:	eba0 000a 	sub.w	r0, r0, sl
 800f9a6:	fa03 f000 	lsl.w	r0, r3, r0
 800f9aa:	9b04      	ldr	r3, [sp, #16]
 800f9ac:	4303      	orrs	r3, r0
 800f9ae:	3401      	adds	r4, #1
 800f9b0:	9304      	str	r3, [sp, #16]
 800f9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b6:	4826      	ldr	r0, [pc, #152]	; (800fa50 <_svfiprintf_r+0x1f0>)
 800f9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9bc:	2206      	movs	r2, #6
 800f9be:	f7f0 fc17 	bl	80001f0 <memchr>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d038      	beq.n	800fa38 <_svfiprintf_r+0x1d8>
 800f9c6:	4b23      	ldr	r3, [pc, #140]	; (800fa54 <_svfiprintf_r+0x1f4>)
 800f9c8:	bb1b      	cbnz	r3, 800fa12 <_svfiprintf_r+0x1b2>
 800f9ca:	9b03      	ldr	r3, [sp, #12]
 800f9cc:	3307      	adds	r3, #7
 800f9ce:	f023 0307 	bic.w	r3, r3, #7
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	9303      	str	r3, [sp, #12]
 800f9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d8:	4433      	add	r3, r6
 800f9da:	9309      	str	r3, [sp, #36]	; 0x24
 800f9dc:	e767      	b.n	800f8ae <_svfiprintf_r+0x4e>
 800f9de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	e7a5      	b.n	800f934 <_svfiprintf_r+0xd4>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	3401      	adds	r4, #1
 800f9ec:	9305      	str	r3, [sp, #20]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9fa:	3a30      	subs	r2, #48	; 0x30
 800f9fc:	2a09      	cmp	r2, #9
 800f9fe:	d903      	bls.n	800fa08 <_svfiprintf_r+0x1a8>
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d0c5      	beq.n	800f990 <_svfiprintf_r+0x130>
 800fa04:	9105      	str	r1, [sp, #20]
 800fa06:	e7c3      	b.n	800f990 <_svfiprintf_r+0x130>
 800fa08:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e7f0      	b.n	800f9f4 <_svfiprintf_r+0x194>
 800fa12:	ab03      	add	r3, sp, #12
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	462a      	mov	r2, r5
 800fa18:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <_svfiprintf_r+0x1f8>)
 800fa1a:	a904      	add	r1, sp, #16
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f7fc fa55 	bl	800becc <_printf_float>
 800fa22:	1c42      	adds	r2, r0, #1
 800fa24:	4606      	mov	r6, r0
 800fa26:	d1d6      	bne.n	800f9d6 <_svfiprintf_r+0x176>
 800fa28:	89ab      	ldrh	r3, [r5, #12]
 800fa2a:	065b      	lsls	r3, r3, #25
 800fa2c:	f53f af2c 	bmi.w	800f888 <_svfiprintf_r+0x28>
 800fa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa32:	b01d      	add	sp, #116	; 0x74
 800fa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa38:	ab03      	add	r3, sp, #12
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	462a      	mov	r2, r5
 800fa3e:	4b06      	ldr	r3, [pc, #24]	; (800fa58 <_svfiprintf_r+0x1f8>)
 800fa40:	a904      	add	r1, sp, #16
 800fa42:	4638      	mov	r0, r7
 800fa44:	f7fc fce6 	bl	800c414 <_printf_i>
 800fa48:	e7eb      	b.n	800fa22 <_svfiprintf_r+0x1c2>
 800fa4a:	bf00      	nop
 800fa4c:	0801315c 	.word	0x0801315c
 800fa50:	08013166 	.word	0x08013166
 800fa54:	0800becd 	.word	0x0800becd
 800fa58:	0800f7a9 	.word	0x0800f7a9
 800fa5c:	08013162 	.word	0x08013162

0800fa60 <nan>:
 800fa60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa68 <nan+0x8>
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	00000000 	.word	0x00000000
 800fa6c:	7ff80000 	.word	0x7ff80000

0800fa70 <_sbrk_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4d06      	ldr	r5, [pc, #24]	; (800fa8c <_sbrk_r+0x1c>)
 800fa74:	2300      	movs	r3, #0
 800fa76:	4604      	mov	r4, r0
 800fa78:	4608      	mov	r0, r1
 800fa7a:	602b      	str	r3, [r5, #0]
 800fa7c:	f7f5 fa0e 	bl	8004e9c <_sbrk>
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	d102      	bne.n	800fa8a <_sbrk_r+0x1a>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	b103      	cbz	r3, 800fa8a <_sbrk_r+0x1a>
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	20001fcc 	.word	0x20001fcc

0800fa90 <strncmp>:
 800fa90:	b510      	push	{r4, lr}
 800fa92:	b17a      	cbz	r2, 800fab4 <strncmp+0x24>
 800fa94:	4603      	mov	r3, r0
 800fa96:	3901      	subs	r1, #1
 800fa98:	1884      	adds	r4, r0, r2
 800fa9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800faa2:	4290      	cmp	r0, r2
 800faa4:	d101      	bne.n	800faaa <strncmp+0x1a>
 800faa6:	42a3      	cmp	r3, r4
 800faa8:	d101      	bne.n	800faae <strncmp+0x1e>
 800faaa:	1a80      	subs	r0, r0, r2
 800faac:	bd10      	pop	{r4, pc}
 800faae:	2800      	cmp	r0, #0
 800fab0:	d1f3      	bne.n	800fa9a <strncmp+0xa>
 800fab2:	e7fa      	b.n	800faaa <strncmp+0x1a>
 800fab4:	4610      	mov	r0, r2
 800fab6:	e7f9      	b.n	800faac <strncmp+0x1c>

0800fab8 <__ascii_wctomb>:
 800fab8:	b149      	cbz	r1, 800face <__ascii_wctomb+0x16>
 800faba:	2aff      	cmp	r2, #255	; 0xff
 800fabc:	bf85      	ittet	hi
 800fabe:	238a      	movhi	r3, #138	; 0x8a
 800fac0:	6003      	strhi	r3, [r0, #0]
 800fac2:	700a      	strbls	r2, [r1, #0]
 800fac4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fac8:	bf98      	it	ls
 800faca:	2001      	movls	r0, #1
 800facc:	4770      	bx	lr
 800face:	4608      	mov	r0, r1
 800fad0:	4770      	bx	lr
	...

0800fad4 <__assert_func>:
 800fad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fad6:	4614      	mov	r4, r2
 800fad8:	461a      	mov	r2, r3
 800fada:	4b09      	ldr	r3, [pc, #36]	; (800fb00 <__assert_func+0x2c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4605      	mov	r5, r0
 800fae0:	68d8      	ldr	r0, [r3, #12]
 800fae2:	b14c      	cbz	r4, 800faf8 <__assert_func+0x24>
 800fae4:	4b07      	ldr	r3, [pc, #28]	; (800fb04 <__assert_func+0x30>)
 800fae6:	9100      	str	r1, [sp, #0]
 800fae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800faec:	4906      	ldr	r1, [pc, #24]	; (800fb08 <__assert_func+0x34>)
 800faee:	462b      	mov	r3, r5
 800faf0:	f000 f80e 	bl	800fb10 <fiprintf>
 800faf4:	f000 fa8c 	bl	8010010 <abort>
 800faf8:	4b04      	ldr	r3, [pc, #16]	; (800fb0c <__assert_func+0x38>)
 800fafa:	461c      	mov	r4, r3
 800fafc:	e7f3      	b.n	800fae6 <__assert_func+0x12>
 800fafe:	bf00      	nop
 800fb00:	2000023c 	.word	0x2000023c
 800fb04:	0801316d 	.word	0x0801316d
 800fb08:	0801317a 	.word	0x0801317a
 800fb0c:	080131a8 	.word	0x080131a8

0800fb10 <fiprintf>:
 800fb10:	b40e      	push	{r1, r2, r3}
 800fb12:	b503      	push	{r0, r1, lr}
 800fb14:	4601      	mov	r1, r0
 800fb16:	ab03      	add	r3, sp, #12
 800fb18:	4805      	ldr	r0, [pc, #20]	; (800fb30 <fiprintf+0x20>)
 800fb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb1e:	6800      	ldr	r0, [r0, #0]
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	f000 f885 	bl	800fc30 <_vfiprintf_r>
 800fb26:	b002      	add	sp, #8
 800fb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb2c:	b003      	add	sp, #12
 800fb2e:	4770      	bx	lr
 800fb30:	2000023c 	.word	0x2000023c

0800fb34 <memmove>:
 800fb34:	4288      	cmp	r0, r1
 800fb36:	b510      	push	{r4, lr}
 800fb38:	eb01 0402 	add.w	r4, r1, r2
 800fb3c:	d902      	bls.n	800fb44 <memmove+0x10>
 800fb3e:	4284      	cmp	r4, r0
 800fb40:	4623      	mov	r3, r4
 800fb42:	d807      	bhi.n	800fb54 <memmove+0x20>
 800fb44:	1e43      	subs	r3, r0, #1
 800fb46:	42a1      	cmp	r1, r4
 800fb48:	d008      	beq.n	800fb5c <memmove+0x28>
 800fb4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb52:	e7f8      	b.n	800fb46 <memmove+0x12>
 800fb54:	4402      	add	r2, r0
 800fb56:	4601      	mov	r1, r0
 800fb58:	428a      	cmp	r2, r1
 800fb5a:	d100      	bne.n	800fb5e <memmove+0x2a>
 800fb5c:	bd10      	pop	{r4, pc}
 800fb5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb66:	e7f7      	b.n	800fb58 <memmove+0x24>

0800fb68 <__malloc_lock>:
 800fb68:	4801      	ldr	r0, [pc, #4]	; (800fb70 <__malloc_lock+0x8>)
 800fb6a:	f000 bc11 	b.w	8010390 <__retarget_lock_acquire_recursive>
 800fb6e:	bf00      	nop
 800fb70:	20001fd0 	.word	0x20001fd0

0800fb74 <__malloc_unlock>:
 800fb74:	4801      	ldr	r0, [pc, #4]	; (800fb7c <__malloc_unlock+0x8>)
 800fb76:	f000 bc0c 	b.w	8010392 <__retarget_lock_release_recursive>
 800fb7a:	bf00      	nop
 800fb7c:	20001fd0 	.word	0x20001fd0

0800fb80 <_realloc_r>:
 800fb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb84:	4680      	mov	r8, r0
 800fb86:	4614      	mov	r4, r2
 800fb88:	460e      	mov	r6, r1
 800fb8a:	b921      	cbnz	r1, 800fb96 <_realloc_r+0x16>
 800fb8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb90:	4611      	mov	r1, r2
 800fb92:	f7ff bd95 	b.w	800f6c0 <_malloc_r>
 800fb96:	b92a      	cbnz	r2, 800fba4 <_realloc_r+0x24>
 800fb98:	f7ff fd26 	bl	800f5e8 <_free_r>
 800fb9c:	4625      	mov	r5, r4
 800fb9e:	4628      	mov	r0, r5
 800fba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba4:	f000 fc5c 	bl	8010460 <_malloc_usable_size_r>
 800fba8:	4284      	cmp	r4, r0
 800fbaa:	4607      	mov	r7, r0
 800fbac:	d802      	bhi.n	800fbb4 <_realloc_r+0x34>
 800fbae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbb2:	d812      	bhi.n	800fbda <_realloc_r+0x5a>
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	4640      	mov	r0, r8
 800fbb8:	f7ff fd82 	bl	800f6c0 <_malloc_r>
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d0ed      	beq.n	800fb9e <_realloc_r+0x1e>
 800fbc2:	42bc      	cmp	r4, r7
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	4631      	mov	r1, r6
 800fbc8:	bf28      	it	cs
 800fbca:	463a      	movcs	r2, r7
 800fbcc:	f7fc f8c8 	bl	800bd60 <memcpy>
 800fbd0:	4631      	mov	r1, r6
 800fbd2:	4640      	mov	r0, r8
 800fbd4:	f7ff fd08 	bl	800f5e8 <_free_r>
 800fbd8:	e7e1      	b.n	800fb9e <_realloc_r+0x1e>
 800fbda:	4635      	mov	r5, r6
 800fbdc:	e7df      	b.n	800fb9e <_realloc_r+0x1e>

0800fbde <__sfputc_r>:
 800fbde:	6893      	ldr	r3, [r2, #8]
 800fbe0:	3b01      	subs	r3, #1
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	b410      	push	{r4}
 800fbe6:	6093      	str	r3, [r2, #8]
 800fbe8:	da08      	bge.n	800fbfc <__sfputc_r+0x1e>
 800fbea:	6994      	ldr	r4, [r2, #24]
 800fbec:	42a3      	cmp	r3, r4
 800fbee:	db01      	blt.n	800fbf4 <__sfputc_r+0x16>
 800fbf0:	290a      	cmp	r1, #10
 800fbf2:	d103      	bne.n	800fbfc <__sfputc_r+0x1e>
 800fbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbf8:	f000 b94a 	b.w	800fe90 <__swbuf_r>
 800fbfc:	6813      	ldr	r3, [r2, #0]
 800fbfe:	1c58      	adds	r0, r3, #1
 800fc00:	6010      	str	r0, [r2, #0]
 800fc02:	7019      	strb	r1, [r3, #0]
 800fc04:	4608      	mov	r0, r1
 800fc06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <__sfputs_r>:
 800fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0e:	4606      	mov	r6, r0
 800fc10:	460f      	mov	r7, r1
 800fc12:	4614      	mov	r4, r2
 800fc14:	18d5      	adds	r5, r2, r3
 800fc16:	42ac      	cmp	r4, r5
 800fc18:	d101      	bne.n	800fc1e <__sfputs_r+0x12>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	e007      	b.n	800fc2e <__sfputs_r+0x22>
 800fc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc22:	463a      	mov	r2, r7
 800fc24:	4630      	mov	r0, r6
 800fc26:	f7ff ffda 	bl	800fbde <__sfputc_r>
 800fc2a:	1c43      	adds	r3, r0, #1
 800fc2c:	d1f3      	bne.n	800fc16 <__sfputs_r+0xa>
 800fc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc30 <_vfiprintf_r>:
 800fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	460d      	mov	r5, r1
 800fc36:	b09d      	sub	sp, #116	; 0x74
 800fc38:	4614      	mov	r4, r2
 800fc3a:	4698      	mov	r8, r3
 800fc3c:	4606      	mov	r6, r0
 800fc3e:	b118      	cbz	r0, 800fc48 <_vfiprintf_r+0x18>
 800fc40:	6983      	ldr	r3, [r0, #24]
 800fc42:	b90b      	cbnz	r3, 800fc48 <_vfiprintf_r+0x18>
 800fc44:	f000 fb06 	bl	8010254 <__sinit>
 800fc48:	4b89      	ldr	r3, [pc, #548]	; (800fe70 <_vfiprintf_r+0x240>)
 800fc4a:	429d      	cmp	r5, r3
 800fc4c:	d11b      	bne.n	800fc86 <_vfiprintf_r+0x56>
 800fc4e:	6875      	ldr	r5, [r6, #4]
 800fc50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc52:	07d9      	lsls	r1, r3, #31
 800fc54:	d405      	bmi.n	800fc62 <_vfiprintf_r+0x32>
 800fc56:	89ab      	ldrh	r3, [r5, #12]
 800fc58:	059a      	lsls	r2, r3, #22
 800fc5a:	d402      	bmi.n	800fc62 <_vfiprintf_r+0x32>
 800fc5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc5e:	f000 fb97 	bl	8010390 <__retarget_lock_acquire_recursive>
 800fc62:	89ab      	ldrh	r3, [r5, #12]
 800fc64:	071b      	lsls	r3, r3, #28
 800fc66:	d501      	bpl.n	800fc6c <_vfiprintf_r+0x3c>
 800fc68:	692b      	ldr	r3, [r5, #16]
 800fc6a:	b9eb      	cbnz	r3, 800fca8 <_vfiprintf_r+0x78>
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f000 f960 	bl	800ff34 <__swsetup_r>
 800fc74:	b1c0      	cbz	r0, 800fca8 <_vfiprintf_r+0x78>
 800fc76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc78:	07dc      	lsls	r4, r3, #31
 800fc7a:	d50e      	bpl.n	800fc9a <_vfiprintf_r+0x6a>
 800fc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc80:	b01d      	add	sp, #116	; 0x74
 800fc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc86:	4b7b      	ldr	r3, [pc, #492]	; (800fe74 <_vfiprintf_r+0x244>)
 800fc88:	429d      	cmp	r5, r3
 800fc8a:	d101      	bne.n	800fc90 <_vfiprintf_r+0x60>
 800fc8c:	68b5      	ldr	r5, [r6, #8]
 800fc8e:	e7df      	b.n	800fc50 <_vfiprintf_r+0x20>
 800fc90:	4b79      	ldr	r3, [pc, #484]	; (800fe78 <_vfiprintf_r+0x248>)
 800fc92:	429d      	cmp	r5, r3
 800fc94:	bf08      	it	eq
 800fc96:	68f5      	ldreq	r5, [r6, #12]
 800fc98:	e7da      	b.n	800fc50 <_vfiprintf_r+0x20>
 800fc9a:	89ab      	ldrh	r3, [r5, #12]
 800fc9c:	0598      	lsls	r0, r3, #22
 800fc9e:	d4ed      	bmi.n	800fc7c <_vfiprintf_r+0x4c>
 800fca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fca2:	f000 fb76 	bl	8010392 <__retarget_lock_release_recursive>
 800fca6:	e7e9      	b.n	800fc7c <_vfiprintf_r+0x4c>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	9309      	str	r3, [sp, #36]	; 0x24
 800fcac:	2320      	movs	r3, #32
 800fcae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcb6:	2330      	movs	r3, #48	; 0x30
 800fcb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe7c <_vfiprintf_r+0x24c>
 800fcbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcc0:	f04f 0901 	mov.w	r9, #1
 800fcc4:	4623      	mov	r3, r4
 800fcc6:	469a      	mov	sl, r3
 800fcc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fccc:	b10a      	cbz	r2, 800fcd2 <_vfiprintf_r+0xa2>
 800fcce:	2a25      	cmp	r2, #37	; 0x25
 800fcd0:	d1f9      	bne.n	800fcc6 <_vfiprintf_r+0x96>
 800fcd2:	ebba 0b04 	subs.w	fp, sl, r4
 800fcd6:	d00b      	beq.n	800fcf0 <_vfiprintf_r+0xc0>
 800fcd8:	465b      	mov	r3, fp
 800fcda:	4622      	mov	r2, r4
 800fcdc:	4629      	mov	r1, r5
 800fcde:	4630      	mov	r0, r6
 800fce0:	f7ff ff94 	bl	800fc0c <__sfputs_r>
 800fce4:	3001      	adds	r0, #1
 800fce6:	f000 80aa 	beq.w	800fe3e <_vfiprintf_r+0x20e>
 800fcea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcec:	445a      	add	r2, fp
 800fcee:	9209      	str	r2, [sp, #36]	; 0x24
 800fcf0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f000 80a2 	beq.w	800fe3e <_vfiprintf_r+0x20e>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fd00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd04:	f10a 0a01 	add.w	sl, sl, #1
 800fd08:	9304      	str	r3, [sp, #16]
 800fd0a:	9307      	str	r3, [sp, #28]
 800fd0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd10:	931a      	str	r3, [sp, #104]	; 0x68
 800fd12:	4654      	mov	r4, sl
 800fd14:	2205      	movs	r2, #5
 800fd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd1a:	4858      	ldr	r0, [pc, #352]	; (800fe7c <_vfiprintf_r+0x24c>)
 800fd1c:	f7f0 fa68 	bl	80001f0 <memchr>
 800fd20:	9a04      	ldr	r2, [sp, #16]
 800fd22:	b9d8      	cbnz	r0, 800fd5c <_vfiprintf_r+0x12c>
 800fd24:	06d1      	lsls	r1, r2, #27
 800fd26:	bf44      	itt	mi
 800fd28:	2320      	movmi	r3, #32
 800fd2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd2e:	0713      	lsls	r3, r2, #28
 800fd30:	bf44      	itt	mi
 800fd32:	232b      	movmi	r3, #43	; 0x2b
 800fd34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd38:	f89a 3000 	ldrb.w	r3, [sl]
 800fd3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fd3e:	d015      	beq.n	800fd6c <_vfiprintf_r+0x13c>
 800fd40:	9a07      	ldr	r2, [sp, #28]
 800fd42:	4654      	mov	r4, sl
 800fd44:	2000      	movs	r0, #0
 800fd46:	f04f 0c0a 	mov.w	ip, #10
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd50:	3b30      	subs	r3, #48	; 0x30
 800fd52:	2b09      	cmp	r3, #9
 800fd54:	d94e      	bls.n	800fdf4 <_vfiprintf_r+0x1c4>
 800fd56:	b1b0      	cbz	r0, 800fd86 <_vfiprintf_r+0x156>
 800fd58:	9207      	str	r2, [sp, #28]
 800fd5a:	e014      	b.n	800fd86 <_vfiprintf_r+0x156>
 800fd5c:	eba0 0308 	sub.w	r3, r0, r8
 800fd60:	fa09 f303 	lsl.w	r3, r9, r3
 800fd64:	4313      	orrs	r3, r2
 800fd66:	9304      	str	r3, [sp, #16]
 800fd68:	46a2      	mov	sl, r4
 800fd6a:	e7d2      	b.n	800fd12 <_vfiprintf_r+0xe2>
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	1d19      	adds	r1, r3, #4
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	9103      	str	r1, [sp, #12]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	bfbb      	ittet	lt
 800fd78:	425b      	neglt	r3, r3
 800fd7a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd7e:	9307      	strge	r3, [sp, #28]
 800fd80:	9307      	strlt	r3, [sp, #28]
 800fd82:	bfb8      	it	lt
 800fd84:	9204      	strlt	r2, [sp, #16]
 800fd86:	7823      	ldrb	r3, [r4, #0]
 800fd88:	2b2e      	cmp	r3, #46	; 0x2e
 800fd8a:	d10c      	bne.n	800fda6 <_vfiprintf_r+0x176>
 800fd8c:	7863      	ldrb	r3, [r4, #1]
 800fd8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd90:	d135      	bne.n	800fdfe <_vfiprintf_r+0x1ce>
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	1d1a      	adds	r2, r3, #4
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	9203      	str	r2, [sp, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	bfb8      	it	lt
 800fd9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fda2:	3402      	adds	r4, #2
 800fda4:	9305      	str	r3, [sp, #20]
 800fda6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe8c <_vfiprintf_r+0x25c>
 800fdaa:	7821      	ldrb	r1, [r4, #0]
 800fdac:	2203      	movs	r2, #3
 800fdae:	4650      	mov	r0, sl
 800fdb0:	f7f0 fa1e 	bl	80001f0 <memchr>
 800fdb4:	b140      	cbz	r0, 800fdc8 <_vfiprintf_r+0x198>
 800fdb6:	2340      	movs	r3, #64	; 0x40
 800fdb8:	eba0 000a 	sub.w	r0, r0, sl
 800fdbc:	fa03 f000 	lsl.w	r0, r3, r0
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	4303      	orrs	r3, r0
 800fdc4:	3401      	adds	r4, #1
 800fdc6:	9304      	str	r3, [sp, #16]
 800fdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdcc:	482c      	ldr	r0, [pc, #176]	; (800fe80 <_vfiprintf_r+0x250>)
 800fdce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdd2:	2206      	movs	r2, #6
 800fdd4:	f7f0 fa0c 	bl	80001f0 <memchr>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d03f      	beq.n	800fe5c <_vfiprintf_r+0x22c>
 800fddc:	4b29      	ldr	r3, [pc, #164]	; (800fe84 <_vfiprintf_r+0x254>)
 800fdde:	bb1b      	cbnz	r3, 800fe28 <_vfiprintf_r+0x1f8>
 800fde0:	9b03      	ldr	r3, [sp, #12]
 800fde2:	3307      	adds	r3, #7
 800fde4:	f023 0307 	bic.w	r3, r3, #7
 800fde8:	3308      	adds	r3, #8
 800fdea:	9303      	str	r3, [sp, #12]
 800fdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdee:	443b      	add	r3, r7
 800fdf0:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf2:	e767      	b.n	800fcc4 <_vfiprintf_r+0x94>
 800fdf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	2001      	movs	r0, #1
 800fdfc:	e7a5      	b.n	800fd4a <_vfiprintf_r+0x11a>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	3401      	adds	r4, #1
 800fe02:	9305      	str	r3, [sp, #20]
 800fe04:	4619      	mov	r1, r3
 800fe06:	f04f 0c0a 	mov.w	ip, #10
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe10:	3a30      	subs	r2, #48	; 0x30
 800fe12:	2a09      	cmp	r2, #9
 800fe14:	d903      	bls.n	800fe1e <_vfiprintf_r+0x1ee>
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0c5      	beq.n	800fda6 <_vfiprintf_r+0x176>
 800fe1a:	9105      	str	r1, [sp, #20]
 800fe1c:	e7c3      	b.n	800fda6 <_vfiprintf_r+0x176>
 800fe1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe22:	4604      	mov	r4, r0
 800fe24:	2301      	movs	r3, #1
 800fe26:	e7f0      	b.n	800fe0a <_vfiprintf_r+0x1da>
 800fe28:	ab03      	add	r3, sp, #12
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	462a      	mov	r2, r5
 800fe2e:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <_vfiprintf_r+0x258>)
 800fe30:	a904      	add	r1, sp, #16
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7fc f84a 	bl	800becc <_printf_float>
 800fe38:	4607      	mov	r7, r0
 800fe3a:	1c78      	adds	r0, r7, #1
 800fe3c:	d1d6      	bne.n	800fdec <_vfiprintf_r+0x1bc>
 800fe3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe40:	07d9      	lsls	r1, r3, #31
 800fe42:	d405      	bmi.n	800fe50 <_vfiprintf_r+0x220>
 800fe44:	89ab      	ldrh	r3, [r5, #12]
 800fe46:	059a      	lsls	r2, r3, #22
 800fe48:	d402      	bmi.n	800fe50 <_vfiprintf_r+0x220>
 800fe4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe4c:	f000 faa1 	bl	8010392 <__retarget_lock_release_recursive>
 800fe50:	89ab      	ldrh	r3, [r5, #12]
 800fe52:	065b      	lsls	r3, r3, #25
 800fe54:	f53f af12 	bmi.w	800fc7c <_vfiprintf_r+0x4c>
 800fe58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe5a:	e711      	b.n	800fc80 <_vfiprintf_r+0x50>
 800fe5c:	ab03      	add	r3, sp, #12
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	462a      	mov	r2, r5
 800fe62:	4b09      	ldr	r3, [pc, #36]	; (800fe88 <_vfiprintf_r+0x258>)
 800fe64:	a904      	add	r1, sp, #16
 800fe66:	4630      	mov	r0, r6
 800fe68:	f7fc fad4 	bl	800c414 <_printf_i>
 800fe6c:	e7e4      	b.n	800fe38 <_vfiprintf_r+0x208>
 800fe6e:	bf00      	nop
 800fe70:	080131cc 	.word	0x080131cc
 800fe74:	080131ec 	.word	0x080131ec
 800fe78:	080131ac 	.word	0x080131ac
 800fe7c:	0801315c 	.word	0x0801315c
 800fe80:	08013166 	.word	0x08013166
 800fe84:	0800becd 	.word	0x0800becd
 800fe88:	0800fc0d 	.word	0x0800fc0d
 800fe8c:	08013162 	.word	0x08013162

0800fe90 <__swbuf_r>:
 800fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe92:	460e      	mov	r6, r1
 800fe94:	4614      	mov	r4, r2
 800fe96:	4605      	mov	r5, r0
 800fe98:	b118      	cbz	r0, 800fea2 <__swbuf_r+0x12>
 800fe9a:	6983      	ldr	r3, [r0, #24]
 800fe9c:	b90b      	cbnz	r3, 800fea2 <__swbuf_r+0x12>
 800fe9e:	f000 f9d9 	bl	8010254 <__sinit>
 800fea2:	4b21      	ldr	r3, [pc, #132]	; (800ff28 <__swbuf_r+0x98>)
 800fea4:	429c      	cmp	r4, r3
 800fea6:	d12b      	bne.n	800ff00 <__swbuf_r+0x70>
 800fea8:	686c      	ldr	r4, [r5, #4]
 800feaa:	69a3      	ldr	r3, [r4, #24]
 800feac:	60a3      	str	r3, [r4, #8]
 800feae:	89a3      	ldrh	r3, [r4, #12]
 800feb0:	071a      	lsls	r2, r3, #28
 800feb2:	d52f      	bpl.n	800ff14 <__swbuf_r+0x84>
 800feb4:	6923      	ldr	r3, [r4, #16]
 800feb6:	b36b      	cbz	r3, 800ff14 <__swbuf_r+0x84>
 800feb8:	6923      	ldr	r3, [r4, #16]
 800feba:	6820      	ldr	r0, [r4, #0]
 800febc:	1ac0      	subs	r0, r0, r3
 800febe:	6963      	ldr	r3, [r4, #20]
 800fec0:	b2f6      	uxtb	r6, r6
 800fec2:	4283      	cmp	r3, r0
 800fec4:	4637      	mov	r7, r6
 800fec6:	dc04      	bgt.n	800fed2 <__swbuf_r+0x42>
 800fec8:	4621      	mov	r1, r4
 800feca:	4628      	mov	r0, r5
 800fecc:	f000 f92e 	bl	801012c <_fflush_r>
 800fed0:	bb30      	cbnz	r0, 800ff20 <__swbuf_r+0x90>
 800fed2:	68a3      	ldr	r3, [r4, #8]
 800fed4:	3b01      	subs	r3, #1
 800fed6:	60a3      	str	r3, [r4, #8]
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	1c5a      	adds	r2, r3, #1
 800fedc:	6022      	str	r2, [r4, #0]
 800fede:	701e      	strb	r6, [r3, #0]
 800fee0:	6963      	ldr	r3, [r4, #20]
 800fee2:	3001      	adds	r0, #1
 800fee4:	4283      	cmp	r3, r0
 800fee6:	d004      	beq.n	800fef2 <__swbuf_r+0x62>
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	07db      	lsls	r3, r3, #31
 800feec:	d506      	bpl.n	800fefc <__swbuf_r+0x6c>
 800feee:	2e0a      	cmp	r6, #10
 800fef0:	d104      	bne.n	800fefc <__swbuf_r+0x6c>
 800fef2:	4621      	mov	r1, r4
 800fef4:	4628      	mov	r0, r5
 800fef6:	f000 f919 	bl	801012c <_fflush_r>
 800fefa:	b988      	cbnz	r0, 800ff20 <__swbuf_r+0x90>
 800fefc:	4638      	mov	r0, r7
 800fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff00:	4b0a      	ldr	r3, [pc, #40]	; (800ff2c <__swbuf_r+0x9c>)
 800ff02:	429c      	cmp	r4, r3
 800ff04:	d101      	bne.n	800ff0a <__swbuf_r+0x7a>
 800ff06:	68ac      	ldr	r4, [r5, #8]
 800ff08:	e7cf      	b.n	800feaa <__swbuf_r+0x1a>
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <__swbuf_r+0xa0>)
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	bf08      	it	eq
 800ff10:	68ec      	ldreq	r4, [r5, #12]
 800ff12:	e7ca      	b.n	800feaa <__swbuf_r+0x1a>
 800ff14:	4621      	mov	r1, r4
 800ff16:	4628      	mov	r0, r5
 800ff18:	f000 f80c 	bl	800ff34 <__swsetup_r>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d0cb      	beq.n	800feb8 <__swbuf_r+0x28>
 800ff20:	f04f 37ff 	mov.w	r7, #4294967295
 800ff24:	e7ea      	b.n	800fefc <__swbuf_r+0x6c>
 800ff26:	bf00      	nop
 800ff28:	080131cc 	.word	0x080131cc
 800ff2c:	080131ec 	.word	0x080131ec
 800ff30:	080131ac 	.word	0x080131ac

0800ff34 <__swsetup_r>:
 800ff34:	4b32      	ldr	r3, [pc, #200]	; (8010000 <__swsetup_r+0xcc>)
 800ff36:	b570      	push	{r4, r5, r6, lr}
 800ff38:	681d      	ldr	r5, [r3, #0]
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	460c      	mov	r4, r1
 800ff3e:	b125      	cbz	r5, 800ff4a <__swsetup_r+0x16>
 800ff40:	69ab      	ldr	r3, [r5, #24]
 800ff42:	b913      	cbnz	r3, 800ff4a <__swsetup_r+0x16>
 800ff44:	4628      	mov	r0, r5
 800ff46:	f000 f985 	bl	8010254 <__sinit>
 800ff4a:	4b2e      	ldr	r3, [pc, #184]	; (8010004 <__swsetup_r+0xd0>)
 800ff4c:	429c      	cmp	r4, r3
 800ff4e:	d10f      	bne.n	800ff70 <__swsetup_r+0x3c>
 800ff50:	686c      	ldr	r4, [r5, #4]
 800ff52:	89a3      	ldrh	r3, [r4, #12]
 800ff54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff58:	0719      	lsls	r1, r3, #28
 800ff5a:	d42c      	bmi.n	800ffb6 <__swsetup_r+0x82>
 800ff5c:	06dd      	lsls	r5, r3, #27
 800ff5e:	d411      	bmi.n	800ff84 <__swsetup_r+0x50>
 800ff60:	2309      	movs	r3, #9
 800ff62:	6033      	str	r3, [r6, #0]
 800ff64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff68:	81a3      	strh	r3, [r4, #12]
 800ff6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6e:	e03e      	b.n	800ffee <__swsetup_r+0xba>
 800ff70:	4b25      	ldr	r3, [pc, #148]	; (8010008 <__swsetup_r+0xd4>)
 800ff72:	429c      	cmp	r4, r3
 800ff74:	d101      	bne.n	800ff7a <__swsetup_r+0x46>
 800ff76:	68ac      	ldr	r4, [r5, #8]
 800ff78:	e7eb      	b.n	800ff52 <__swsetup_r+0x1e>
 800ff7a:	4b24      	ldr	r3, [pc, #144]	; (801000c <__swsetup_r+0xd8>)
 800ff7c:	429c      	cmp	r4, r3
 800ff7e:	bf08      	it	eq
 800ff80:	68ec      	ldreq	r4, [r5, #12]
 800ff82:	e7e6      	b.n	800ff52 <__swsetup_r+0x1e>
 800ff84:	0758      	lsls	r0, r3, #29
 800ff86:	d512      	bpl.n	800ffae <__swsetup_r+0x7a>
 800ff88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff8a:	b141      	cbz	r1, 800ff9e <__swsetup_r+0x6a>
 800ff8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff90:	4299      	cmp	r1, r3
 800ff92:	d002      	beq.n	800ff9a <__swsetup_r+0x66>
 800ff94:	4630      	mov	r0, r6
 800ff96:	f7ff fb27 	bl	800f5e8 <_free_r>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ffa4:	81a3      	strh	r3, [r4, #12]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	6063      	str	r3, [r4, #4]
 800ffaa:	6923      	ldr	r3, [r4, #16]
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	89a3      	ldrh	r3, [r4, #12]
 800ffb0:	f043 0308 	orr.w	r3, r3, #8
 800ffb4:	81a3      	strh	r3, [r4, #12]
 800ffb6:	6923      	ldr	r3, [r4, #16]
 800ffb8:	b94b      	cbnz	r3, 800ffce <__swsetup_r+0x9a>
 800ffba:	89a3      	ldrh	r3, [r4, #12]
 800ffbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ffc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffc4:	d003      	beq.n	800ffce <__swsetup_r+0x9a>
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f000 fa09 	bl	80103e0 <__smakebuf_r>
 800ffce:	89a0      	ldrh	r0, [r4, #12]
 800ffd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffd4:	f010 0301 	ands.w	r3, r0, #1
 800ffd8:	d00a      	beq.n	800fff0 <__swsetup_r+0xbc>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	60a3      	str	r3, [r4, #8]
 800ffde:	6963      	ldr	r3, [r4, #20]
 800ffe0:	425b      	negs	r3, r3
 800ffe2:	61a3      	str	r3, [r4, #24]
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	b943      	cbnz	r3, 800fffa <__swsetup_r+0xc6>
 800ffe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ffec:	d1ba      	bne.n	800ff64 <__swsetup_r+0x30>
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	0781      	lsls	r1, r0, #30
 800fff2:	bf58      	it	pl
 800fff4:	6963      	ldrpl	r3, [r4, #20]
 800fff6:	60a3      	str	r3, [r4, #8]
 800fff8:	e7f4      	b.n	800ffe4 <__swsetup_r+0xb0>
 800fffa:	2000      	movs	r0, #0
 800fffc:	e7f7      	b.n	800ffee <__swsetup_r+0xba>
 800fffe:	bf00      	nop
 8010000:	2000023c 	.word	0x2000023c
 8010004:	080131cc 	.word	0x080131cc
 8010008:	080131ec 	.word	0x080131ec
 801000c:	080131ac 	.word	0x080131ac

08010010 <abort>:
 8010010:	b508      	push	{r3, lr}
 8010012:	2006      	movs	r0, #6
 8010014:	f000 fa54 	bl	80104c0 <raise>
 8010018:	2001      	movs	r0, #1
 801001a:	f7f4 fec7 	bl	8004dac <_exit>
	...

08010020 <__sflush_r>:
 8010020:	898a      	ldrh	r2, [r1, #12]
 8010022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010026:	4605      	mov	r5, r0
 8010028:	0710      	lsls	r0, r2, #28
 801002a:	460c      	mov	r4, r1
 801002c:	d458      	bmi.n	80100e0 <__sflush_r+0xc0>
 801002e:	684b      	ldr	r3, [r1, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	dc05      	bgt.n	8010040 <__sflush_r+0x20>
 8010034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010036:	2b00      	cmp	r3, #0
 8010038:	dc02      	bgt.n	8010040 <__sflush_r+0x20>
 801003a:	2000      	movs	r0, #0
 801003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010042:	2e00      	cmp	r6, #0
 8010044:	d0f9      	beq.n	801003a <__sflush_r+0x1a>
 8010046:	2300      	movs	r3, #0
 8010048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801004c:	682f      	ldr	r7, [r5, #0]
 801004e:	602b      	str	r3, [r5, #0]
 8010050:	d032      	beq.n	80100b8 <__sflush_r+0x98>
 8010052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	075a      	lsls	r2, r3, #29
 8010058:	d505      	bpl.n	8010066 <__sflush_r+0x46>
 801005a:	6863      	ldr	r3, [r4, #4]
 801005c:	1ac0      	subs	r0, r0, r3
 801005e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010060:	b10b      	cbz	r3, 8010066 <__sflush_r+0x46>
 8010062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010064:	1ac0      	subs	r0, r0, r3
 8010066:	2300      	movs	r3, #0
 8010068:	4602      	mov	r2, r0
 801006a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801006c:	6a21      	ldr	r1, [r4, #32]
 801006e:	4628      	mov	r0, r5
 8010070:	47b0      	blx	r6
 8010072:	1c43      	adds	r3, r0, #1
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	d106      	bne.n	8010086 <__sflush_r+0x66>
 8010078:	6829      	ldr	r1, [r5, #0]
 801007a:	291d      	cmp	r1, #29
 801007c:	d82c      	bhi.n	80100d8 <__sflush_r+0xb8>
 801007e:	4a2a      	ldr	r2, [pc, #168]	; (8010128 <__sflush_r+0x108>)
 8010080:	40ca      	lsrs	r2, r1
 8010082:	07d6      	lsls	r6, r2, #31
 8010084:	d528      	bpl.n	80100d8 <__sflush_r+0xb8>
 8010086:	2200      	movs	r2, #0
 8010088:	6062      	str	r2, [r4, #4]
 801008a:	04d9      	lsls	r1, r3, #19
 801008c:	6922      	ldr	r2, [r4, #16]
 801008e:	6022      	str	r2, [r4, #0]
 8010090:	d504      	bpl.n	801009c <__sflush_r+0x7c>
 8010092:	1c42      	adds	r2, r0, #1
 8010094:	d101      	bne.n	801009a <__sflush_r+0x7a>
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	b903      	cbnz	r3, 801009c <__sflush_r+0x7c>
 801009a:	6560      	str	r0, [r4, #84]	; 0x54
 801009c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801009e:	602f      	str	r7, [r5, #0]
 80100a0:	2900      	cmp	r1, #0
 80100a2:	d0ca      	beq.n	801003a <__sflush_r+0x1a>
 80100a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100a8:	4299      	cmp	r1, r3
 80100aa:	d002      	beq.n	80100b2 <__sflush_r+0x92>
 80100ac:	4628      	mov	r0, r5
 80100ae:	f7ff fa9b 	bl	800f5e8 <_free_r>
 80100b2:	2000      	movs	r0, #0
 80100b4:	6360      	str	r0, [r4, #52]	; 0x34
 80100b6:	e7c1      	b.n	801003c <__sflush_r+0x1c>
 80100b8:	6a21      	ldr	r1, [r4, #32]
 80100ba:	2301      	movs	r3, #1
 80100bc:	4628      	mov	r0, r5
 80100be:	47b0      	blx	r6
 80100c0:	1c41      	adds	r1, r0, #1
 80100c2:	d1c7      	bne.n	8010054 <__sflush_r+0x34>
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0c4      	beq.n	8010054 <__sflush_r+0x34>
 80100ca:	2b1d      	cmp	r3, #29
 80100cc:	d001      	beq.n	80100d2 <__sflush_r+0xb2>
 80100ce:	2b16      	cmp	r3, #22
 80100d0:	d101      	bne.n	80100d6 <__sflush_r+0xb6>
 80100d2:	602f      	str	r7, [r5, #0]
 80100d4:	e7b1      	b.n	801003a <__sflush_r+0x1a>
 80100d6:	89a3      	ldrh	r3, [r4, #12]
 80100d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100dc:	81a3      	strh	r3, [r4, #12]
 80100de:	e7ad      	b.n	801003c <__sflush_r+0x1c>
 80100e0:	690f      	ldr	r7, [r1, #16]
 80100e2:	2f00      	cmp	r7, #0
 80100e4:	d0a9      	beq.n	801003a <__sflush_r+0x1a>
 80100e6:	0793      	lsls	r3, r2, #30
 80100e8:	680e      	ldr	r6, [r1, #0]
 80100ea:	bf08      	it	eq
 80100ec:	694b      	ldreq	r3, [r1, #20]
 80100ee:	600f      	str	r7, [r1, #0]
 80100f0:	bf18      	it	ne
 80100f2:	2300      	movne	r3, #0
 80100f4:	eba6 0807 	sub.w	r8, r6, r7
 80100f8:	608b      	str	r3, [r1, #8]
 80100fa:	f1b8 0f00 	cmp.w	r8, #0
 80100fe:	dd9c      	ble.n	801003a <__sflush_r+0x1a>
 8010100:	6a21      	ldr	r1, [r4, #32]
 8010102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010104:	4643      	mov	r3, r8
 8010106:	463a      	mov	r2, r7
 8010108:	4628      	mov	r0, r5
 801010a:	47b0      	blx	r6
 801010c:	2800      	cmp	r0, #0
 801010e:	dc06      	bgt.n	801011e <__sflush_r+0xfe>
 8010110:	89a3      	ldrh	r3, [r4, #12]
 8010112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010116:	81a3      	strh	r3, [r4, #12]
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	e78e      	b.n	801003c <__sflush_r+0x1c>
 801011e:	4407      	add	r7, r0
 8010120:	eba8 0800 	sub.w	r8, r8, r0
 8010124:	e7e9      	b.n	80100fa <__sflush_r+0xda>
 8010126:	bf00      	nop
 8010128:	20400001 	.word	0x20400001

0801012c <_fflush_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	690b      	ldr	r3, [r1, #16]
 8010130:	4605      	mov	r5, r0
 8010132:	460c      	mov	r4, r1
 8010134:	b913      	cbnz	r3, 801013c <_fflush_r+0x10>
 8010136:	2500      	movs	r5, #0
 8010138:	4628      	mov	r0, r5
 801013a:	bd38      	pop	{r3, r4, r5, pc}
 801013c:	b118      	cbz	r0, 8010146 <_fflush_r+0x1a>
 801013e:	6983      	ldr	r3, [r0, #24]
 8010140:	b90b      	cbnz	r3, 8010146 <_fflush_r+0x1a>
 8010142:	f000 f887 	bl	8010254 <__sinit>
 8010146:	4b14      	ldr	r3, [pc, #80]	; (8010198 <_fflush_r+0x6c>)
 8010148:	429c      	cmp	r4, r3
 801014a:	d11b      	bne.n	8010184 <_fflush_r+0x58>
 801014c:	686c      	ldr	r4, [r5, #4]
 801014e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d0ef      	beq.n	8010136 <_fflush_r+0xa>
 8010156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010158:	07d0      	lsls	r0, r2, #31
 801015a:	d404      	bmi.n	8010166 <_fflush_r+0x3a>
 801015c:	0599      	lsls	r1, r3, #22
 801015e:	d402      	bmi.n	8010166 <_fflush_r+0x3a>
 8010160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010162:	f000 f915 	bl	8010390 <__retarget_lock_acquire_recursive>
 8010166:	4628      	mov	r0, r5
 8010168:	4621      	mov	r1, r4
 801016a:	f7ff ff59 	bl	8010020 <__sflush_r>
 801016e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010170:	07da      	lsls	r2, r3, #31
 8010172:	4605      	mov	r5, r0
 8010174:	d4e0      	bmi.n	8010138 <_fflush_r+0xc>
 8010176:	89a3      	ldrh	r3, [r4, #12]
 8010178:	059b      	lsls	r3, r3, #22
 801017a:	d4dd      	bmi.n	8010138 <_fflush_r+0xc>
 801017c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801017e:	f000 f908 	bl	8010392 <__retarget_lock_release_recursive>
 8010182:	e7d9      	b.n	8010138 <_fflush_r+0xc>
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <_fflush_r+0x70>)
 8010186:	429c      	cmp	r4, r3
 8010188:	d101      	bne.n	801018e <_fflush_r+0x62>
 801018a:	68ac      	ldr	r4, [r5, #8]
 801018c:	e7df      	b.n	801014e <_fflush_r+0x22>
 801018e:	4b04      	ldr	r3, [pc, #16]	; (80101a0 <_fflush_r+0x74>)
 8010190:	429c      	cmp	r4, r3
 8010192:	bf08      	it	eq
 8010194:	68ec      	ldreq	r4, [r5, #12]
 8010196:	e7da      	b.n	801014e <_fflush_r+0x22>
 8010198:	080131cc 	.word	0x080131cc
 801019c:	080131ec 	.word	0x080131ec
 80101a0:	080131ac 	.word	0x080131ac

080101a4 <std>:
 80101a4:	2300      	movs	r3, #0
 80101a6:	b510      	push	{r4, lr}
 80101a8:	4604      	mov	r4, r0
 80101aa:	e9c0 3300 	strd	r3, r3, [r0]
 80101ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101b2:	6083      	str	r3, [r0, #8]
 80101b4:	8181      	strh	r1, [r0, #12]
 80101b6:	6643      	str	r3, [r0, #100]	; 0x64
 80101b8:	81c2      	strh	r2, [r0, #14]
 80101ba:	6183      	str	r3, [r0, #24]
 80101bc:	4619      	mov	r1, r3
 80101be:	2208      	movs	r2, #8
 80101c0:	305c      	adds	r0, #92	; 0x5c
 80101c2:	f7fb fddb 	bl	800bd7c <memset>
 80101c6:	4b05      	ldr	r3, [pc, #20]	; (80101dc <std+0x38>)
 80101c8:	6263      	str	r3, [r4, #36]	; 0x24
 80101ca:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <std+0x3c>)
 80101cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80101ce:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <std+0x40>)
 80101d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101d2:	4b05      	ldr	r3, [pc, #20]	; (80101e8 <std+0x44>)
 80101d4:	6224      	str	r4, [r4, #32]
 80101d6:	6323      	str	r3, [r4, #48]	; 0x30
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	bf00      	nop
 80101dc:	080104f9 	.word	0x080104f9
 80101e0:	0801051b 	.word	0x0801051b
 80101e4:	08010553 	.word	0x08010553
 80101e8:	08010577 	.word	0x08010577

080101ec <_cleanup_r>:
 80101ec:	4901      	ldr	r1, [pc, #4]	; (80101f4 <_cleanup_r+0x8>)
 80101ee:	f000 b8af 	b.w	8010350 <_fwalk_reent>
 80101f2:	bf00      	nop
 80101f4:	0801012d 	.word	0x0801012d

080101f8 <__sfmoreglue>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	2268      	movs	r2, #104	; 0x68
 80101fc:	1e4d      	subs	r5, r1, #1
 80101fe:	4355      	muls	r5, r2
 8010200:	460e      	mov	r6, r1
 8010202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010206:	f7ff fa5b 	bl	800f6c0 <_malloc_r>
 801020a:	4604      	mov	r4, r0
 801020c:	b140      	cbz	r0, 8010220 <__sfmoreglue+0x28>
 801020e:	2100      	movs	r1, #0
 8010210:	e9c0 1600 	strd	r1, r6, [r0]
 8010214:	300c      	adds	r0, #12
 8010216:	60a0      	str	r0, [r4, #8]
 8010218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801021c:	f7fb fdae 	bl	800bd7c <memset>
 8010220:	4620      	mov	r0, r4
 8010222:	bd70      	pop	{r4, r5, r6, pc}

08010224 <__sfp_lock_acquire>:
 8010224:	4801      	ldr	r0, [pc, #4]	; (801022c <__sfp_lock_acquire+0x8>)
 8010226:	f000 b8b3 	b.w	8010390 <__retarget_lock_acquire_recursive>
 801022a:	bf00      	nop
 801022c:	20001fd1 	.word	0x20001fd1

08010230 <__sfp_lock_release>:
 8010230:	4801      	ldr	r0, [pc, #4]	; (8010238 <__sfp_lock_release+0x8>)
 8010232:	f000 b8ae 	b.w	8010392 <__retarget_lock_release_recursive>
 8010236:	bf00      	nop
 8010238:	20001fd1 	.word	0x20001fd1

0801023c <__sinit_lock_acquire>:
 801023c:	4801      	ldr	r0, [pc, #4]	; (8010244 <__sinit_lock_acquire+0x8>)
 801023e:	f000 b8a7 	b.w	8010390 <__retarget_lock_acquire_recursive>
 8010242:	bf00      	nop
 8010244:	20001fd2 	.word	0x20001fd2

08010248 <__sinit_lock_release>:
 8010248:	4801      	ldr	r0, [pc, #4]	; (8010250 <__sinit_lock_release+0x8>)
 801024a:	f000 b8a2 	b.w	8010392 <__retarget_lock_release_recursive>
 801024e:	bf00      	nop
 8010250:	20001fd2 	.word	0x20001fd2

08010254 <__sinit>:
 8010254:	b510      	push	{r4, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	f7ff fff0 	bl	801023c <__sinit_lock_acquire>
 801025c:	69a3      	ldr	r3, [r4, #24]
 801025e:	b11b      	cbz	r3, 8010268 <__sinit+0x14>
 8010260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010264:	f7ff bff0 	b.w	8010248 <__sinit_lock_release>
 8010268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801026c:	6523      	str	r3, [r4, #80]	; 0x50
 801026e:	4b13      	ldr	r3, [pc, #76]	; (80102bc <__sinit+0x68>)
 8010270:	4a13      	ldr	r2, [pc, #76]	; (80102c0 <__sinit+0x6c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	62a2      	str	r2, [r4, #40]	; 0x28
 8010276:	42a3      	cmp	r3, r4
 8010278:	bf04      	itt	eq
 801027a:	2301      	moveq	r3, #1
 801027c:	61a3      	streq	r3, [r4, #24]
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f820 	bl	80102c4 <__sfp>
 8010284:	6060      	str	r0, [r4, #4]
 8010286:	4620      	mov	r0, r4
 8010288:	f000 f81c 	bl	80102c4 <__sfp>
 801028c:	60a0      	str	r0, [r4, #8]
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f818 	bl	80102c4 <__sfp>
 8010294:	2200      	movs	r2, #0
 8010296:	60e0      	str	r0, [r4, #12]
 8010298:	2104      	movs	r1, #4
 801029a:	6860      	ldr	r0, [r4, #4]
 801029c:	f7ff ff82 	bl	80101a4 <std>
 80102a0:	68a0      	ldr	r0, [r4, #8]
 80102a2:	2201      	movs	r2, #1
 80102a4:	2109      	movs	r1, #9
 80102a6:	f7ff ff7d 	bl	80101a4 <std>
 80102aa:	68e0      	ldr	r0, [r4, #12]
 80102ac:	2202      	movs	r2, #2
 80102ae:	2112      	movs	r1, #18
 80102b0:	f7ff ff78 	bl	80101a4 <std>
 80102b4:	2301      	movs	r3, #1
 80102b6:	61a3      	str	r3, [r4, #24]
 80102b8:	e7d2      	b.n	8010260 <__sinit+0xc>
 80102ba:	bf00      	nop
 80102bc:	08012d64 	.word	0x08012d64
 80102c0:	080101ed 	.word	0x080101ed

080102c4 <__sfp>:
 80102c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c6:	4607      	mov	r7, r0
 80102c8:	f7ff ffac 	bl	8010224 <__sfp_lock_acquire>
 80102cc:	4b1e      	ldr	r3, [pc, #120]	; (8010348 <__sfp+0x84>)
 80102ce:	681e      	ldr	r6, [r3, #0]
 80102d0:	69b3      	ldr	r3, [r6, #24]
 80102d2:	b913      	cbnz	r3, 80102da <__sfp+0x16>
 80102d4:	4630      	mov	r0, r6
 80102d6:	f7ff ffbd 	bl	8010254 <__sinit>
 80102da:	3648      	adds	r6, #72	; 0x48
 80102dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	d503      	bpl.n	80102ec <__sfp+0x28>
 80102e4:	6833      	ldr	r3, [r6, #0]
 80102e6:	b30b      	cbz	r3, 801032c <__sfp+0x68>
 80102e8:	6836      	ldr	r6, [r6, #0]
 80102ea:	e7f7      	b.n	80102dc <__sfp+0x18>
 80102ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102f0:	b9d5      	cbnz	r5, 8010328 <__sfp+0x64>
 80102f2:	4b16      	ldr	r3, [pc, #88]	; (801034c <__sfp+0x88>)
 80102f4:	60e3      	str	r3, [r4, #12]
 80102f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102fa:	6665      	str	r5, [r4, #100]	; 0x64
 80102fc:	f000 f847 	bl	801038e <__retarget_lock_init_recursive>
 8010300:	f7ff ff96 	bl	8010230 <__sfp_lock_release>
 8010304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801030c:	6025      	str	r5, [r4, #0]
 801030e:	61a5      	str	r5, [r4, #24]
 8010310:	2208      	movs	r2, #8
 8010312:	4629      	mov	r1, r5
 8010314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010318:	f7fb fd30 	bl	800bd7c <memset>
 801031c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010324:	4620      	mov	r0, r4
 8010326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010328:	3468      	adds	r4, #104	; 0x68
 801032a:	e7d9      	b.n	80102e0 <__sfp+0x1c>
 801032c:	2104      	movs	r1, #4
 801032e:	4638      	mov	r0, r7
 8010330:	f7ff ff62 	bl	80101f8 <__sfmoreglue>
 8010334:	4604      	mov	r4, r0
 8010336:	6030      	str	r0, [r6, #0]
 8010338:	2800      	cmp	r0, #0
 801033a:	d1d5      	bne.n	80102e8 <__sfp+0x24>
 801033c:	f7ff ff78 	bl	8010230 <__sfp_lock_release>
 8010340:	230c      	movs	r3, #12
 8010342:	603b      	str	r3, [r7, #0]
 8010344:	e7ee      	b.n	8010324 <__sfp+0x60>
 8010346:	bf00      	nop
 8010348:	08012d64 	.word	0x08012d64
 801034c:	ffff0001 	.word	0xffff0001

08010350 <_fwalk_reent>:
 8010350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010354:	4606      	mov	r6, r0
 8010356:	4688      	mov	r8, r1
 8010358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801035c:	2700      	movs	r7, #0
 801035e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010362:	f1b9 0901 	subs.w	r9, r9, #1
 8010366:	d505      	bpl.n	8010374 <_fwalk_reent+0x24>
 8010368:	6824      	ldr	r4, [r4, #0]
 801036a:	2c00      	cmp	r4, #0
 801036c:	d1f7      	bne.n	801035e <_fwalk_reent+0xe>
 801036e:	4638      	mov	r0, r7
 8010370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010374:	89ab      	ldrh	r3, [r5, #12]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d907      	bls.n	801038a <_fwalk_reent+0x3a>
 801037a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801037e:	3301      	adds	r3, #1
 8010380:	d003      	beq.n	801038a <_fwalk_reent+0x3a>
 8010382:	4629      	mov	r1, r5
 8010384:	4630      	mov	r0, r6
 8010386:	47c0      	blx	r8
 8010388:	4307      	orrs	r7, r0
 801038a:	3568      	adds	r5, #104	; 0x68
 801038c:	e7e9      	b.n	8010362 <_fwalk_reent+0x12>

0801038e <__retarget_lock_init_recursive>:
 801038e:	4770      	bx	lr

08010390 <__retarget_lock_acquire_recursive>:
 8010390:	4770      	bx	lr

08010392 <__retarget_lock_release_recursive>:
 8010392:	4770      	bx	lr

08010394 <__swhatbuf_r>:
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	460e      	mov	r6, r1
 8010398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039c:	2900      	cmp	r1, #0
 801039e:	b096      	sub	sp, #88	; 0x58
 80103a0:	4614      	mov	r4, r2
 80103a2:	461d      	mov	r5, r3
 80103a4:	da08      	bge.n	80103b8 <__swhatbuf_r+0x24>
 80103a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	602a      	str	r2, [r5, #0]
 80103ae:	061a      	lsls	r2, r3, #24
 80103b0:	d410      	bmi.n	80103d4 <__swhatbuf_r+0x40>
 80103b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b6:	e00e      	b.n	80103d6 <__swhatbuf_r+0x42>
 80103b8:	466a      	mov	r2, sp
 80103ba:	f000 f903 	bl	80105c4 <_fstat_r>
 80103be:	2800      	cmp	r0, #0
 80103c0:	dbf1      	blt.n	80103a6 <__swhatbuf_r+0x12>
 80103c2:	9a01      	ldr	r2, [sp, #4]
 80103c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103cc:	425a      	negs	r2, r3
 80103ce:	415a      	adcs	r2, r3
 80103d0:	602a      	str	r2, [r5, #0]
 80103d2:	e7ee      	b.n	80103b2 <__swhatbuf_r+0x1e>
 80103d4:	2340      	movs	r3, #64	; 0x40
 80103d6:	2000      	movs	r0, #0
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	b016      	add	sp, #88	; 0x58
 80103dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080103e0 <__smakebuf_r>:
 80103e0:	898b      	ldrh	r3, [r1, #12]
 80103e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103e4:	079d      	lsls	r5, r3, #30
 80103e6:	4606      	mov	r6, r0
 80103e8:	460c      	mov	r4, r1
 80103ea:	d507      	bpl.n	80103fc <__smakebuf_r+0x1c>
 80103ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103f0:	6023      	str	r3, [r4, #0]
 80103f2:	6123      	str	r3, [r4, #16]
 80103f4:	2301      	movs	r3, #1
 80103f6:	6163      	str	r3, [r4, #20]
 80103f8:	b002      	add	sp, #8
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	ab01      	add	r3, sp, #4
 80103fe:	466a      	mov	r2, sp
 8010400:	f7ff ffc8 	bl	8010394 <__swhatbuf_r>
 8010404:	9900      	ldr	r1, [sp, #0]
 8010406:	4605      	mov	r5, r0
 8010408:	4630      	mov	r0, r6
 801040a:	f7ff f959 	bl	800f6c0 <_malloc_r>
 801040e:	b948      	cbnz	r0, 8010424 <__smakebuf_r+0x44>
 8010410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010414:	059a      	lsls	r2, r3, #22
 8010416:	d4ef      	bmi.n	80103f8 <__smakebuf_r+0x18>
 8010418:	f023 0303 	bic.w	r3, r3, #3
 801041c:	f043 0302 	orr.w	r3, r3, #2
 8010420:	81a3      	strh	r3, [r4, #12]
 8010422:	e7e3      	b.n	80103ec <__smakebuf_r+0xc>
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <__smakebuf_r+0x7c>)
 8010426:	62b3      	str	r3, [r6, #40]	; 0x28
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	6020      	str	r0, [r4, #0]
 801042c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	9b00      	ldr	r3, [sp, #0]
 8010434:	6163      	str	r3, [r4, #20]
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	6120      	str	r0, [r4, #16]
 801043a:	b15b      	cbz	r3, 8010454 <__smakebuf_r+0x74>
 801043c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010440:	4630      	mov	r0, r6
 8010442:	f000 f8d1 	bl	80105e8 <_isatty_r>
 8010446:	b128      	cbz	r0, 8010454 <__smakebuf_r+0x74>
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	f023 0303 	bic.w	r3, r3, #3
 801044e:	f043 0301 	orr.w	r3, r3, #1
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	89a0      	ldrh	r0, [r4, #12]
 8010456:	4305      	orrs	r5, r0
 8010458:	81a5      	strh	r5, [r4, #12]
 801045a:	e7cd      	b.n	80103f8 <__smakebuf_r+0x18>
 801045c:	080101ed 	.word	0x080101ed

08010460 <_malloc_usable_size_r>:
 8010460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010464:	1f18      	subs	r0, r3, #4
 8010466:	2b00      	cmp	r3, #0
 8010468:	bfbc      	itt	lt
 801046a:	580b      	ldrlt	r3, [r1, r0]
 801046c:	18c0      	addlt	r0, r0, r3
 801046e:	4770      	bx	lr

08010470 <_raise_r>:
 8010470:	291f      	cmp	r1, #31
 8010472:	b538      	push	{r3, r4, r5, lr}
 8010474:	4604      	mov	r4, r0
 8010476:	460d      	mov	r5, r1
 8010478:	d904      	bls.n	8010484 <_raise_r+0x14>
 801047a:	2316      	movs	r3, #22
 801047c:	6003      	str	r3, [r0, #0]
 801047e:	f04f 30ff 	mov.w	r0, #4294967295
 8010482:	bd38      	pop	{r3, r4, r5, pc}
 8010484:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010486:	b112      	cbz	r2, 801048e <_raise_r+0x1e>
 8010488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801048c:	b94b      	cbnz	r3, 80104a2 <_raise_r+0x32>
 801048e:	4620      	mov	r0, r4
 8010490:	f000 f830 	bl	80104f4 <_getpid_r>
 8010494:	462a      	mov	r2, r5
 8010496:	4601      	mov	r1, r0
 8010498:	4620      	mov	r0, r4
 801049a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801049e:	f000 b817 	b.w	80104d0 <_kill_r>
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d00a      	beq.n	80104bc <_raise_r+0x4c>
 80104a6:	1c59      	adds	r1, r3, #1
 80104a8:	d103      	bne.n	80104b2 <_raise_r+0x42>
 80104aa:	2316      	movs	r3, #22
 80104ac:	6003      	str	r3, [r0, #0]
 80104ae:	2001      	movs	r0, #1
 80104b0:	e7e7      	b.n	8010482 <_raise_r+0x12>
 80104b2:	2400      	movs	r4, #0
 80104b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104b8:	4628      	mov	r0, r5
 80104ba:	4798      	blx	r3
 80104bc:	2000      	movs	r0, #0
 80104be:	e7e0      	b.n	8010482 <_raise_r+0x12>

080104c0 <raise>:
 80104c0:	4b02      	ldr	r3, [pc, #8]	; (80104cc <raise+0xc>)
 80104c2:	4601      	mov	r1, r0
 80104c4:	6818      	ldr	r0, [r3, #0]
 80104c6:	f7ff bfd3 	b.w	8010470 <_raise_r>
 80104ca:	bf00      	nop
 80104cc:	2000023c 	.word	0x2000023c

080104d0 <_kill_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d07      	ldr	r5, [pc, #28]	; (80104f0 <_kill_r+0x20>)
 80104d4:	2300      	movs	r3, #0
 80104d6:	4604      	mov	r4, r0
 80104d8:	4608      	mov	r0, r1
 80104da:	4611      	mov	r1, r2
 80104dc:	602b      	str	r3, [r5, #0]
 80104de:	f7f4 fc55 	bl	8004d8c <_kill>
 80104e2:	1c43      	adds	r3, r0, #1
 80104e4:	d102      	bne.n	80104ec <_kill_r+0x1c>
 80104e6:	682b      	ldr	r3, [r5, #0]
 80104e8:	b103      	cbz	r3, 80104ec <_kill_r+0x1c>
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	bd38      	pop	{r3, r4, r5, pc}
 80104ee:	bf00      	nop
 80104f0:	20001fcc 	.word	0x20001fcc

080104f4 <_getpid_r>:
 80104f4:	f7f4 bc42 	b.w	8004d7c <_getpid>

080104f8 <__sread>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	460c      	mov	r4, r1
 80104fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010500:	f000 f894 	bl	801062c <_read_r>
 8010504:	2800      	cmp	r0, #0
 8010506:	bfab      	itete	ge
 8010508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801050a:	89a3      	ldrhlt	r3, [r4, #12]
 801050c:	181b      	addge	r3, r3, r0
 801050e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010512:	bfac      	ite	ge
 8010514:	6563      	strge	r3, [r4, #84]	; 0x54
 8010516:	81a3      	strhlt	r3, [r4, #12]
 8010518:	bd10      	pop	{r4, pc}

0801051a <__swrite>:
 801051a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801051e:	461f      	mov	r7, r3
 8010520:	898b      	ldrh	r3, [r1, #12]
 8010522:	05db      	lsls	r3, r3, #23
 8010524:	4605      	mov	r5, r0
 8010526:	460c      	mov	r4, r1
 8010528:	4616      	mov	r6, r2
 801052a:	d505      	bpl.n	8010538 <__swrite+0x1e>
 801052c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010530:	2302      	movs	r3, #2
 8010532:	2200      	movs	r2, #0
 8010534:	f000 f868 	bl	8010608 <_lseek_r>
 8010538:	89a3      	ldrh	r3, [r4, #12]
 801053a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801053e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010542:	81a3      	strh	r3, [r4, #12]
 8010544:	4632      	mov	r2, r6
 8010546:	463b      	mov	r3, r7
 8010548:	4628      	mov	r0, r5
 801054a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801054e:	f000 b817 	b.w	8010580 <_write_r>

08010552 <__sseek>:
 8010552:	b510      	push	{r4, lr}
 8010554:	460c      	mov	r4, r1
 8010556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801055a:	f000 f855 	bl	8010608 <_lseek_r>
 801055e:	1c43      	adds	r3, r0, #1
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	bf15      	itete	ne
 8010564:	6560      	strne	r0, [r4, #84]	; 0x54
 8010566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801056a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801056e:	81a3      	strheq	r3, [r4, #12]
 8010570:	bf18      	it	ne
 8010572:	81a3      	strhne	r3, [r4, #12]
 8010574:	bd10      	pop	{r4, pc}

08010576 <__sclose>:
 8010576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801057a:	f000 b813 	b.w	80105a4 <_close_r>
	...

08010580 <_write_r>:
 8010580:	b538      	push	{r3, r4, r5, lr}
 8010582:	4d07      	ldr	r5, [pc, #28]	; (80105a0 <_write_r+0x20>)
 8010584:	4604      	mov	r4, r0
 8010586:	4608      	mov	r0, r1
 8010588:	4611      	mov	r1, r2
 801058a:	2200      	movs	r2, #0
 801058c:	602a      	str	r2, [r5, #0]
 801058e:	461a      	mov	r2, r3
 8010590:	f7f4 fc33 	bl	8004dfa <_write>
 8010594:	1c43      	adds	r3, r0, #1
 8010596:	d102      	bne.n	801059e <_write_r+0x1e>
 8010598:	682b      	ldr	r3, [r5, #0]
 801059a:	b103      	cbz	r3, 801059e <_write_r+0x1e>
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	bd38      	pop	{r3, r4, r5, pc}
 80105a0:	20001fcc 	.word	0x20001fcc

080105a4 <_close_r>:
 80105a4:	b538      	push	{r3, r4, r5, lr}
 80105a6:	4d06      	ldr	r5, [pc, #24]	; (80105c0 <_close_r+0x1c>)
 80105a8:	2300      	movs	r3, #0
 80105aa:	4604      	mov	r4, r0
 80105ac:	4608      	mov	r0, r1
 80105ae:	602b      	str	r3, [r5, #0]
 80105b0:	f7f4 fc3f 	bl	8004e32 <_close>
 80105b4:	1c43      	adds	r3, r0, #1
 80105b6:	d102      	bne.n	80105be <_close_r+0x1a>
 80105b8:	682b      	ldr	r3, [r5, #0]
 80105ba:	b103      	cbz	r3, 80105be <_close_r+0x1a>
 80105bc:	6023      	str	r3, [r4, #0]
 80105be:	bd38      	pop	{r3, r4, r5, pc}
 80105c0:	20001fcc 	.word	0x20001fcc

080105c4 <_fstat_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4d07      	ldr	r5, [pc, #28]	; (80105e4 <_fstat_r+0x20>)
 80105c8:	2300      	movs	r3, #0
 80105ca:	4604      	mov	r4, r0
 80105cc:	4608      	mov	r0, r1
 80105ce:	4611      	mov	r1, r2
 80105d0:	602b      	str	r3, [r5, #0]
 80105d2:	f7f4 fc3a 	bl	8004e4a <_fstat>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	d102      	bne.n	80105e0 <_fstat_r+0x1c>
 80105da:	682b      	ldr	r3, [r5, #0]
 80105dc:	b103      	cbz	r3, 80105e0 <_fstat_r+0x1c>
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	bd38      	pop	{r3, r4, r5, pc}
 80105e2:	bf00      	nop
 80105e4:	20001fcc 	.word	0x20001fcc

080105e8 <_isatty_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d06      	ldr	r5, [pc, #24]	; (8010604 <_isatty_r+0x1c>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	602b      	str	r3, [r5, #0]
 80105f4:	f7f4 fc39 	bl	8004e6a <_isatty>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_isatty_r+0x1a>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_isatty_r+0x1a>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	20001fcc 	.word	0x20001fcc

08010608 <_lseek_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4d07      	ldr	r5, [pc, #28]	; (8010628 <_lseek_r+0x20>)
 801060c:	4604      	mov	r4, r0
 801060e:	4608      	mov	r0, r1
 8010610:	4611      	mov	r1, r2
 8010612:	2200      	movs	r2, #0
 8010614:	602a      	str	r2, [r5, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	f7f4 fc32 	bl	8004e80 <_lseek>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	d102      	bne.n	8010626 <_lseek_r+0x1e>
 8010620:	682b      	ldr	r3, [r5, #0]
 8010622:	b103      	cbz	r3, 8010626 <_lseek_r+0x1e>
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	bd38      	pop	{r3, r4, r5, pc}
 8010628:	20001fcc 	.word	0x20001fcc

0801062c <_read_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	; (801064c <_read_r+0x20>)
 8010630:	4604      	mov	r4, r0
 8010632:	4608      	mov	r0, r1
 8010634:	4611      	mov	r1, r2
 8010636:	2200      	movs	r2, #0
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	f7f4 fbc0 	bl	8004dc0 <_read>
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d102      	bne.n	801064a <_read_r+0x1e>
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	b103      	cbz	r3, 801064a <_read_r+0x1e>
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	bd38      	pop	{r3, r4, r5, pc}
 801064c:	20001fcc 	.word	0x20001fcc

08010650 <atan>:
 8010650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010654:	ec55 4b10 	vmov	r4, r5, d0
 8010658:	4bc3      	ldr	r3, [pc, #780]	; (8010968 <atan+0x318>)
 801065a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801065e:	429e      	cmp	r6, r3
 8010660:	46ab      	mov	fp, r5
 8010662:	dd18      	ble.n	8010696 <atan+0x46>
 8010664:	4bc1      	ldr	r3, [pc, #772]	; (801096c <atan+0x31c>)
 8010666:	429e      	cmp	r6, r3
 8010668:	dc01      	bgt.n	801066e <atan+0x1e>
 801066a:	d109      	bne.n	8010680 <atan+0x30>
 801066c:	b144      	cbz	r4, 8010680 <atan+0x30>
 801066e:	4622      	mov	r2, r4
 8010670:	462b      	mov	r3, r5
 8010672:	4620      	mov	r0, r4
 8010674:	4629      	mov	r1, r5
 8010676:	f7ef fe11 	bl	800029c <__adddf3>
 801067a:	4604      	mov	r4, r0
 801067c:	460d      	mov	r5, r1
 801067e:	e006      	b.n	801068e <atan+0x3e>
 8010680:	f1bb 0f00 	cmp.w	fp, #0
 8010684:	f300 8131 	bgt.w	80108ea <atan+0x29a>
 8010688:	a59b      	add	r5, pc, #620	; (adr r5, 80108f8 <atan+0x2a8>)
 801068a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801068e:	ec45 4b10 	vmov	d0, r4, r5
 8010692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010696:	4bb6      	ldr	r3, [pc, #728]	; (8010970 <atan+0x320>)
 8010698:	429e      	cmp	r6, r3
 801069a:	dc14      	bgt.n	80106c6 <atan+0x76>
 801069c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80106a0:	429e      	cmp	r6, r3
 80106a2:	dc0d      	bgt.n	80106c0 <atan+0x70>
 80106a4:	a396      	add	r3, pc, #600	; (adr r3, 8010900 <atan+0x2b0>)
 80106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106aa:	ee10 0a10 	vmov	r0, s0
 80106ae:	4629      	mov	r1, r5
 80106b0:	f7ef fdf4 	bl	800029c <__adddf3>
 80106b4:	4baf      	ldr	r3, [pc, #700]	; (8010974 <atan+0x324>)
 80106b6:	2200      	movs	r2, #0
 80106b8:	f7f0 fa36 	bl	8000b28 <__aeabi_dcmpgt>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d1e6      	bne.n	801068e <atan+0x3e>
 80106c0:	f04f 3aff 	mov.w	sl, #4294967295
 80106c4:	e02b      	b.n	801071e <atan+0xce>
 80106c6:	f000 f9b7 	bl	8010a38 <fabs>
 80106ca:	4bab      	ldr	r3, [pc, #684]	; (8010978 <atan+0x328>)
 80106cc:	429e      	cmp	r6, r3
 80106ce:	ec55 4b10 	vmov	r4, r5, d0
 80106d2:	f300 80bf 	bgt.w	8010854 <atan+0x204>
 80106d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80106da:	429e      	cmp	r6, r3
 80106dc:	f300 80a0 	bgt.w	8010820 <atan+0x1d0>
 80106e0:	ee10 2a10 	vmov	r2, s0
 80106e4:	ee10 0a10 	vmov	r0, s0
 80106e8:	462b      	mov	r3, r5
 80106ea:	4629      	mov	r1, r5
 80106ec:	f7ef fdd6 	bl	800029c <__adddf3>
 80106f0:	4ba0      	ldr	r3, [pc, #640]	; (8010974 <atan+0x324>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	f7ef fdd0 	bl	8000298 <__aeabi_dsub>
 80106f8:	2200      	movs	r2, #0
 80106fa:	4606      	mov	r6, r0
 80106fc:	460f      	mov	r7, r1
 80106fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010702:	4620      	mov	r0, r4
 8010704:	4629      	mov	r1, r5
 8010706:	f7ef fdc9 	bl	800029c <__adddf3>
 801070a:	4602      	mov	r2, r0
 801070c:	460b      	mov	r3, r1
 801070e:	4630      	mov	r0, r6
 8010710:	4639      	mov	r1, r7
 8010712:	f7f0 f8a3 	bl	800085c <__aeabi_ddiv>
 8010716:	f04f 0a00 	mov.w	sl, #0
 801071a:	4604      	mov	r4, r0
 801071c:	460d      	mov	r5, r1
 801071e:	4622      	mov	r2, r4
 8010720:	462b      	mov	r3, r5
 8010722:	4620      	mov	r0, r4
 8010724:	4629      	mov	r1, r5
 8010726:	f7ef ff6f 	bl	8000608 <__aeabi_dmul>
 801072a:	4602      	mov	r2, r0
 801072c:	460b      	mov	r3, r1
 801072e:	4680      	mov	r8, r0
 8010730:	4689      	mov	r9, r1
 8010732:	f7ef ff69 	bl	8000608 <__aeabi_dmul>
 8010736:	a374      	add	r3, pc, #464	; (adr r3, 8010908 <atan+0x2b8>)
 8010738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073c:	4606      	mov	r6, r0
 801073e:	460f      	mov	r7, r1
 8010740:	f7ef ff62 	bl	8000608 <__aeabi_dmul>
 8010744:	a372      	add	r3, pc, #456	; (adr r3, 8010910 <atan+0x2c0>)
 8010746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074a:	f7ef fda7 	bl	800029c <__adddf3>
 801074e:	4632      	mov	r2, r6
 8010750:	463b      	mov	r3, r7
 8010752:	f7ef ff59 	bl	8000608 <__aeabi_dmul>
 8010756:	a370      	add	r3, pc, #448	; (adr r3, 8010918 <atan+0x2c8>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	f7ef fd9e 	bl	800029c <__adddf3>
 8010760:	4632      	mov	r2, r6
 8010762:	463b      	mov	r3, r7
 8010764:	f7ef ff50 	bl	8000608 <__aeabi_dmul>
 8010768:	a36d      	add	r3, pc, #436	; (adr r3, 8010920 <atan+0x2d0>)
 801076a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076e:	f7ef fd95 	bl	800029c <__adddf3>
 8010772:	4632      	mov	r2, r6
 8010774:	463b      	mov	r3, r7
 8010776:	f7ef ff47 	bl	8000608 <__aeabi_dmul>
 801077a:	a36b      	add	r3, pc, #428	; (adr r3, 8010928 <atan+0x2d8>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	f7ef fd8c 	bl	800029c <__adddf3>
 8010784:	4632      	mov	r2, r6
 8010786:	463b      	mov	r3, r7
 8010788:	f7ef ff3e 	bl	8000608 <__aeabi_dmul>
 801078c:	a368      	add	r3, pc, #416	; (adr r3, 8010930 <atan+0x2e0>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	f7ef fd83 	bl	800029c <__adddf3>
 8010796:	4642      	mov	r2, r8
 8010798:	464b      	mov	r3, r9
 801079a:	f7ef ff35 	bl	8000608 <__aeabi_dmul>
 801079e:	a366      	add	r3, pc, #408	; (adr r3, 8010938 <atan+0x2e8>)
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	4680      	mov	r8, r0
 80107a6:	4689      	mov	r9, r1
 80107a8:	4630      	mov	r0, r6
 80107aa:	4639      	mov	r1, r7
 80107ac:	f7ef ff2c 	bl	8000608 <__aeabi_dmul>
 80107b0:	a363      	add	r3, pc, #396	; (adr r3, 8010940 <atan+0x2f0>)
 80107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b6:	f7ef fd6f 	bl	8000298 <__aeabi_dsub>
 80107ba:	4632      	mov	r2, r6
 80107bc:	463b      	mov	r3, r7
 80107be:	f7ef ff23 	bl	8000608 <__aeabi_dmul>
 80107c2:	a361      	add	r3, pc, #388	; (adr r3, 8010948 <atan+0x2f8>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef fd66 	bl	8000298 <__aeabi_dsub>
 80107cc:	4632      	mov	r2, r6
 80107ce:	463b      	mov	r3, r7
 80107d0:	f7ef ff1a 	bl	8000608 <__aeabi_dmul>
 80107d4:	a35e      	add	r3, pc, #376	; (adr r3, 8010950 <atan+0x300>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7ef fd5d 	bl	8000298 <__aeabi_dsub>
 80107de:	4632      	mov	r2, r6
 80107e0:	463b      	mov	r3, r7
 80107e2:	f7ef ff11 	bl	8000608 <__aeabi_dmul>
 80107e6:	a35c      	add	r3, pc, #368	; (adr r3, 8010958 <atan+0x308>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f7ef fd54 	bl	8000298 <__aeabi_dsub>
 80107f0:	4632      	mov	r2, r6
 80107f2:	463b      	mov	r3, r7
 80107f4:	f7ef ff08 	bl	8000608 <__aeabi_dmul>
 80107f8:	4602      	mov	r2, r0
 80107fa:	460b      	mov	r3, r1
 80107fc:	4640      	mov	r0, r8
 80107fe:	4649      	mov	r1, r9
 8010800:	f7ef fd4c 	bl	800029c <__adddf3>
 8010804:	4622      	mov	r2, r4
 8010806:	462b      	mov	r3, r5
 8010808:	f7ef fefe 	bl	8000608 <__aeabi_dmul>
 801080c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	d14b      	bne.n	80108ae <atan+0x25e>
 8010816:	4620      	mov	r0, r4
 8010818:	4629      	mov	r1, r5
 801081a:	f7ef fd3d 	bl	8000298 <__aeabi_dsub>
 801081e:	e72c      	b.n	801067a <atan+0x2a>
 8010820:	ee10 0a10 	vmov	r0, s0
 8010824:	4b53      	ldr	r3, [pc, #332]	; (8010974 <atan+0x324>)
 8010826:	2200      	movs	r2, #0
 8010828:	4629      	mov	r1, r5
 801082a:	f7ef fd35 	bl	8000298 <__aeabi_dsub>
 801082e:	4b51      	ldr	r3, [pc, #324]	; (8010974 <atan+0x324>)
 8010830:	4606      	mov	r6, r0
 8010832:	460f      	mov	r7, r1
 8010834:	2200      	movs	r2, #0
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7ef fd2f 	bl	800029c <__adddf3>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	4630      	mov	r0, r6
 8010844:	4639      	mov	r1, r7
 8010846:	f7f0 f809 	bl	800085c <__aeabi_ddiv>
 801084a:	f04f 0a01 	mov.w	sl, #1
 801084e:	4604      	mov	r4, r0
 8010850:	460d      	mov	r5, r1
 8010852:	e764      	b.n	801071e <atan+0xce>
 8010854:	4b49      	ldr	r3, [pc, #292]	; (801097c <atan+0x32c>)
 8010856:	429e      	cmp	r6, r3
 8010858:	da1d      	bge.n	8010896 <atan+0x246>
 801085a:	ee10 0a10 	vmov	r0, s0
 801085e:	4b48      	ldr	r3, [pc, #288]	; (8010980 <atan+0x330>)
 8010860:	2200      	movs	r2, #0
 8010862:	4629      	mov	r1, r5
 8010864:	f7ef fd18 	bl	8000298 <__aeabi_dsub>
 8010868:	4b45      	ldr	r3, [pc, #276]	; (8010980 <atan+0x330>)
 801086a:	4606      	mov	r6, r0
 801086c:	460f      	mov	r7, r1
 801086e:	2200      	movs	r2, #0
 8010870:	4620      	mov	r0, r4
 8010872:	4629      	mov	r1, r5
 8010874:	f7ef fec8 	bl	8000608 <__aeabi_dmul>
 8010878:	4b3e      	ldr	r3, [pc, #248]	; (8010974 <atan+0x324>)
 801087a:	2200      	movs	r2, #0
 801087c:	f7ef fd0e 	bl	800029c <__adddf3>
 8010880:	4602      	mov	r2, r0
 8010882:	460b      	mov	r3, r1
 8010884:	4630      	mov	r0, r6
 8010886:	4639      	mov	r1, r7
 8010888:	f7ef ffe8 	bl	800085c <__aeabi_ddiv>
 801088c:	f04f 0a02 	mov.w	sl, #2
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	e743      	b.n	801071e <atan+0xce>
 8010896:	462b      	mov	r3, r5
 8010898:	ee10 2a10 	vmov	r2, s0
 801089c:	4939      	ldr	r1, [pc, #228]	; (8010984 <atan+0x334>)
 801089e:	2000      	movs	r0, #0
 80108a0:	f7ef ffdc 	bl	800085c <__aeabi_ddiv>
 80108a4:	f04f 0a03 	mov.w	sl, #3
 80108a8:	4604      	mov	r4, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	e737      	b.n	801071e <atan+0xce>
 80108ae:	4b36      	ldr	r3, [pc, #216]	; (8010988 <atan+0x338>)
 80108b0:	4e36      	ldr	r6, [pc, #216]	; (801098c <atan+0x33c>)
 80108b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80108b6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80108ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80108be:	f7ef fceb 	bl	8000298 <__aeabi_dsub>
 80108c2:	4622      	mov	r2, r4
 80108c4:	462b      	mov	r3, r5
 80108c6:	f7ef fce7 	bl	8000298 <__aeabi_dsub>
 80108ca:	4602      	mov	r2, r0
 80108cc:	460b      	mov	r3, r1
 80108ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80108d2:	f7ef fce1 	bl	8000298 <__aeabi_dsub>
 80108d6:	f1bb 0f00 	cmp.w	fp, #0
 80108da:	4604      	mov	r4, r0
 80108dc:	460d      	mov	r5, r1
 80108de:	f6bf aed6 	bge.w	801068e <atan+0x3e>
 80108e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108e6:	461d      	mov	r5, r3
 80108e8:	e6d1      	b.n	801068e <atan+0x3e>
 80108ea:	a51d      	add	r5, pc, #116	; (adr r5, 8010960 <atan+0x310>)
 80108ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80108f0:	e6cd      	b.n	801068e <atan+0x3e>
 80108f2:	bf00      	nop
 80108f4:	f3af 8000 	nop.w
 80108f8:	54442d18 	.word	0x54442d18
 80108fc:	bff921fb 	.word	0xbff921fb
 8010900:	8800759c 	.word	0x8800759c
 8010904:	7e37e43c 	.word	0x7e37e43c
 8010908:	e322da11 	.word	0xe322da11
 801090c:	3f90ad3a 	.word	0x3f90ad3a
 8010910:	24760deb 	.word	0x24760deb
 8010914:	3fa97b4b 	.word	0x3fa97b4b
 8010918:	a0d03d51 	.word	0xa0d03d51
 801091c:	3fb10d66 	.word	0x3fb10d66
 8010920:	c54c206e 	.word	0xc54c206e
 8010924:	3fb745cd 	.word	0x3fb745cd
 8010928:	920083ff 	.word	0x920083ff
 801092c:	3fc24924 	.word	0x3fc24924
 8010930:	5555550d 	.word	0x5555550d
 8010934:	3fd55555 	.word	0x3fd55555
 8010938:	2c6a6c2f 	.word	0x2c6a6c2f
 801093c:	bfa2b444 	.word	0xbfa2b444
 8010940:	52defd9a 	.word	0x52defd9a
 8010944:	3fadde2d 	.word	0x3fadde2d
 8010948:	af749a6d 	.word	0xaf749a6d
 801094c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010950:	fe231671 	.word	0xfe231671
 8010954:	3fbc71c6 	.word	0x3fbc71c6
 8010958:	9998ebc4 	.word	0x9998ebc4
 801095c:	3fc99999 	.word	0x3fc99999
 8010960:	54442d18 	.word	0x54442d18
 8010964:	3ff921fb 	.word	0x3ff921fb
 8010968:	440fffff 	.word	0x440fffff
 801096c:	7ff00000 	.word	0x7ff00000
 8010970:	3fdbffff 	.word	0x3fdbffff
 8010974:	3ff00000 	.word	0x3ff00000
 8010978:	3ff2ffff 	.word	0x3ff2ffff
 801097c:	40038000 	.word	0x40038000
 8010980:	3ff80000 	.word	0x3ff80000
 8010984:	bff00000 	.word	0xbff00000
 8010988:	08013230 	.word	0x08013230
 801098c:	08013210 	.word	0x08013210

08010990 <cos>:
 8010990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010992:	ec53 2b10 	vmov	r2, r3, d0
 8010996:	4826      	ldr	r0, [pc, #152]	; (8010a30 <cos+0xa0>)
 8010998:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801099c:	4281      	cmp	r1, r0
 801099e:	dc06      	bgt.n	80109ae <cos+0x1e>
 80109a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010a28 <cos+0x98>
 80109a4:	b005      	add	sp, #20
 80109a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80109aa:	f000 bded 	b.w	8011588 <__kernel_cos>
 80109ae:	4821      	ldr	r0, [pc, #132]	; (8010a34 <cos+0xa4>)
 80109b0:	4281      	cmp	r1, r0
 80109b2:	dd09      	ble.n	80109c8 <cos+0x38>
 80109b4:	ee10 0a10 	vmov	r0, s0
 80109b8:	4619      	mov	r1, r3
 80109ba:	f7ef fc6d 	bl	8000298 <__aeabi_dsub>
 80109be:	ec41 0b10 	vmov	d0, r0, r1
 80109c2:	b005      	add	sp, #20
 80109c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80109c8:	4668      	mov	r0, sp
 80109ca:	f000 f961 	bl	8010c90 <__ieee754_rem_pio2>
 80109ce:	f000 0003 	and.w	r0, r0, #3
 80109d2:	2801      	cmp	r0, #1
 80109d4:	d00b      	beq.n	80109ee <cos+0x5e>
 80109d6:	2802      	cmp	r0, #2
 80109d8:	d016      	beq.n	8010a08 <cos+0x78>
 80109da:	b9e0      	cbnz	r0, 8010a16 <cos+0x86>
 80109dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109e0:	ed9d 0b00 	vldr	d0, [sp]
 80109e4:	f000 fdd0 	bl	8011588 <__kernel_cos>
 80109e8:	ec51 0b10 	vmov	r0, r1, d0
 80109ec:	e7e7      	b.n	80109be <cos+0x2e>
 80109ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109f2:	ed9d 0b00 	vldr	d0, [sp]
 80109f6:	f001 f9df 	bl	8011db8 <__kernel_sin>
 80109fa:	ec53 2b10 	vmov	r2, r3, d0
 80109fe:	ee10 0a10 	vmov	r0, s0
 8010a02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010a06:	e7da      	b.n	80109be <cos+0x2e>
 8010a08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a0c:	ed9d 0b00 	vldr	d0, [sp]
 8010a10:	f000 fdba 	bl	8011588 <__kernel_cos>
 8010a14:	e7f1      	b.n	80109fa <cos+0x6a>
 8010a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a1a:	ed9d 0b00 	vldr	d0, [sp]
 8010a1e:	2001      	movs	r0, #1
 8010a20:	f001 f9ca 	bl	8011db8 <__kernel_sin>
 8010a24:	e7e0      	b.n	80109e8 <cos+0x58>
 8010a26:	bf00      	nop
	...
 8010a30:	3fe921fb 	.word	0x3fe921fb
 8010a34:	7fefffff 	.word	0x7fefffff

08010a38 <fabs>:
 8010a38:	ec51 0b10 	vmov	r0, r1, d0
 8010a3c:	ee10 2a10 	vmov	r2, s0
 8010a40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a44:	ec43 2b10 	vmov	d0, r2, r3
 8010a48:	4770      	bx	lr
 8010a4a:	0000      	movs	r0, r0
 8010a4c:	0000      	movs	r0, r0
	...

08010a50 <sin>:
 8010a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a52:	ec53 2b10 	vmov	r2, r3, d0
 8010a56:	4828      	ldr	r0, [pc, #160]	; (8010af8 <sin+0xa8>)
 8010a58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a5c:	4281      	cmp	r1, r0
 8010a5e:	dc07      	bgt.n	8010a70 <sin+0x20>
 8010a60:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010af0 <sin+0xa0>
 8010a64:	2000      	movs	r0, #0
 8010a66:	b005      	add	sp, #20
 8010a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a6c:	f001 b9a4 	b.w	8011db8 <__kernel_sin>
 8010a70:	4822      	ldr	r0, [pc, #136]	; (8010afc <sin+0xac>)
 8010a72:	4281      	cmp	r1, r0
 8010a74:	dd09      	ble.n	8010a8a <sin+0x3a>
 8010a76:	ee10 0a10 	vmov	r0, s0
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	f7ef fc0c 	bl	8000298 <__aeabi_dsub>
 8010a80:	ec41 0b10 	vmov	d0, r0, r1
 8010a84:	b005      	add	sp, #20
 8010a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a8a:	4668      	mov	r0, sp
 8010a8c:	f000 f900 	bl	8010c90 <__ieee754_rem_pio2>
 8010a90:	f000 0003 	and.w	r0, r0, #3
 8010a94:	2801      	cmp	r0, #1
 8010a96:	d00c      	beq.n	8010ab2 <sin+0x62>
 8010a98:	2802      	cmp	r0, #2
 8010a9a:	d011      	beq.n	8010ac0 <sin+0x70>
 8010a9c:	b9f0      	cbnz	r0, 8010adc <sin+0x8c>
 8010a9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010aa2:	ed9d 0b00 	vldr	d0, [sp]
 8010aa6:	2001      	movs	r0, #1
 8010aa8:	f001 f986 	bl	8011db8 <__kernel_sin>
 8010aac:	ec51 0b10 	vmov	r0, r1, d0
 8010ab0:	e7e6      	b.n	8010a80 <sin+0x30>
 8010ab2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ab6:	ed9d 0b00 	vldr	d0, [sp]
 8010aba:	f000 fd65 	bl	8011588 <__kernel_cos>
 8010abe:	e7f5      	b.n	8010aac <sin+0x5c>
 8010ac0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ac4:	ed9d 0b00 	vldr	d0, [sp]
 8010ac8:	2001      	movs	r0, #1
 8010aca:	f001 f975 	bl	8011db8 <__kernel_sin>
 8010ace:	ec53 2b10 	vmov	r2, r3, d0
 8010ad2:	ee10 0a10 	vmov	r0, s0
 8010ad6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ada:	e7d1      	b.n	8010a80 <sin+0x30>
 8010adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ae0:	ed9d 0b00 	vldr	d0, [sp]
 8010ae4:	f000 fd50 	bl	8011588 <__kernel_cos>
 8010ae8:	e7f1      	b.n	8010ace <sin+0x7e>
 8010aea:	bf00      	nop
 8010aec:	f3af 8000 	nop.w
	...
 8010af8:	3fe921fb 	.word	0x3fe921fb
 8010afc:	7fefffff 	.word	0x7fefffff

08010b00 <tan>:
 8010b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b02:	ec53 2b10 	vmov	r2, r3, d0
 8010b06:	4816      	ldr	r0, [pc, #88]	; (8010b60 <tan+0x60>)
 8010b08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b0c:	4281      	cmp	r1, r0
 8010b0e:	dc07      	bgt.n	8010b20 <tan+0x20>
 8010b10:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010b58 <tan+0x58>
 8010b14:	2001      	movs	r0, #1
 8010b16:	b005      	add	sp, #20
 8010b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b1c:	f001 ba0c 	b.w	8011f38 <__kernel_tan>
 8010b20:	4810      	ldr	r0, [pc, #64]	; (8010b64 <tan+0x64>)
 8010b22:	4281      	cmp	r1, r0
 8010b24:	dd09      	ble.n	8010b3a <tan+0x3a>
 8010b26:	ee10 0a10 	vmov	r0, s0
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	f7ef fbb4 	bl	8000298 <__aeabi_dsub>
 8010b30:	ec41 0b10 	vmov	d0, r0, r1
 8010b34:	b005      	add	sp, #20
 8010b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b3a:	4668      	mov	r0, sp
 8010b3c:	f000 f8a8 	bl	8010c90 <__ieee754_rem_pio2>
 8010b40:	0040      	lsls	r0, r0, #1
 8010b42:	f000 0002 	and.w	r0, r0, #2
 8010b46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b4a:	ed9d 0b00 	vldr	d0, [sp]
 8010b4e:	f1c0 0001 	rsb	r0, r0, #1
 8010b52:	f001 f9f1 	bl	8011f38 <__kernel_tan>
 8010b56:	e7ed      	b.n	8010b34 <tan+0x34>
	...
 8010b60:	3fe921fb 	.word	0x3fe921fb
 8010b64:	7fefffff 	.word	0x7fefffff

08010b68 <sinf>:
 8010b68:	ee10 3a10 	vmov	r3, s0
 8010b6c:	b507      	push	{r0, r1, r2, lr}
 8010b6e:	4a1f      	ldr	r2, [pc, #124]	; (8010bec <sinf+0x84>)
 8010b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b74:	4293      	cmp	r3, r2
 8010b76:	dc07      	bgt.n	8010b88 <sinf+0x20>
 8010b78:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010bf0 <sinf+0x88>
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	b003      	add	sp, #12
 8010b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b84:	f001 beb8 	b.w	80128f8 <__kernel_sinf>
 8010b88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010b8c:	db04      	blt.n	8010b98 <sinf+0x30>
 8010b8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010b92:	b003      	add	sp, #12
 8010b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b98:	4668      	mov	r0, sp
 8010b9a:	f000 fbb9 	bl	8011310 <__ieee754_rem_pio2f>
 8010b9e:	f000 0003 	and.w	r0, r0, #3
 8010ba2:	2801      	cmp	r0, #1
 8010ba4:	d00a      	beq.n	8010bbc <sinf+0x54>
 8010ba6:	2802      	cmp	r0, #2
 8010ba8:	d00f      	beq.n	8010bca <sinf+0x62>
 8010baa:	b9c0      	cbnz	r0, 8010bde <sinf+0x76>
 8010bac:	eddd 0a01 	vldr	s1, [sp, #4]
 8010bb0:	ed9d 0a00 	vldr	s0, [sp]
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	f001 fe9f 	bl	80128f8 <__kernel_sinf>
 8010bba:	e7ea      	b.n	8010b92 <sinf+0x2a>
 8010bbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8010bc0:	ed9d 0a00 	vldr	s0, [sp]
 8010bc4:	f001 fbc2 	bl	801234c <__kernel_cosf>
 8010bc8:	e7e3      	b.n	8010b92 <sinf+0x2a>
 8010bca:	eddd 0a01 	vldr	s1, [sp, #4]
 8010bce:	ed9d 0a00 	vldr	s0, [sp]
 8010bd2:	2001      	movs	r0, #1
 8010bd4:	f001 fe90 	bl	80128f8 <__kernel_sinf>
 8010bd8:	eeb1 0a40 	vneg.f32	s0, s0
 8010bdc:	e7d9      	b.n	8010b92 <sinf+0x2a>
 8010bde:	eddd 0a01 	vldr	s1, [sp, #4]
 8010be2:	ed9d 0a00 	vldr	s0, [sp]
 8010be6:	f001 fbb1 	bl	801234c <__kernel_cosf>
 8010bea:	e7f5      	b.n	8010bd8 <sinf+0x70>
 8010bec:	3f490fd8 	.word	0x3f490fd8
 8010bf0:	00000000 	.word	0x00000000

08010bf4 <sqrt>:
 8010bf4:	b538      	push	{r3, r4, r5, lr}
 8010bf6:	ed2d 8b02 	vpush	{d8}
 8010bfa:	ec55 4b10 	vmov	r4, r5, d0
 8010bfe:	f000 fa53 	bl	80110a8 <__ieee754_sqrt>
 8010c02:	4622      	mov	r2, r4
 8010c04:	462b      	mov	r3, r5
 8010c06:	4620      	mov	r0, r4
 8010c08:	4629      	mov	r1, r5
 8010c0a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c0e:	eef0 8a60 	vmov.f32	s17, s1
 8010c12:	f7ef ff93 	bl	8000b3c <__aeabi_dcmpun>
 8010c16:	b990      	cbnz	r0, 8010c3e <sqrt+0x4a>
 8010c18:	2200      	movs	r2, #0
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	4629      	mov	r1, r5
 8010c20:	f7ef ff64 	bl	8000aec <__aeabi_dcmplt>
 8010c24:	b158      	cbz	r0, 8010c3e <sqrt+0x4a>
 8010c26:	f7fb f871 	bl	800bd0c <__errno>
 8010c2a:	2321      	movs	r3, #33	; 0x21
 8010c2c:	6003      	str	r3, [r0, #0]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	2300      	movs	r3, #0
 8010c32:	4610      	mov	r0, r2
 8010c34:	4619      	mov	r1, r3
 8010c36:	f7ef fe11 	bl	800085c <__aeabi_ddiv>
 8010c3a:	ec41 0b18 	vmov	d8, r0, r1
 8010c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8010c42:	eef0 0a68 	vmov.f32	s1, s17
 8010c46:	ecbd 8b02 	vpop	{d8}
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}

08010c4c <fmodf>:
 8010c4c:	b508      	push	{r3, lr}
 8010c4e:	ed2d 8b02 	vpush	{d8}
 8010c52:	eef0 8a40 	vmov.f32	s17, s0
 8010c56:	eeb0 8a60 	vmov.f32	s16, s1
 8010c5a:	f000 fad7 	bl	801120c <__ieee754_fmodf>
 8010c5e:	eef4 8a48 	vcmp.f32	s17, s16
 8010c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c66:	d60c      	bvs.n	8010c82 <fmodf+0x36>
 8010c68:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010c88 <fmodf+0x3c>
 8010c6c:	eeb4 8a68 	vcmp.f32	s16, s17
 8010c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c74:	d105      	bne.n	8010c82 <fmodf+0x36>
 8010c76:	f7fb f849 	bl	800bd0c <__errno>
 8010c7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010c7e:	2321      	movs	r3, #33	; 0x21
 8010c80:	6003      	str	r3, [r0, #0]
 8010c82:	ecbd 8b02 	vpop	{d8}
 8010c86:	bd08      	pop	{r3, pc}
	...

08010c90 <__ieee754_rem_pio2>:
 8010c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	ed2d 8b02 	vpush	{d8}
 8010c98:	ec55 4b10 	vmov	r4, r5, d0
 8010c9c:	4bca      	ldr	r3, [pc, #808]	; (8010fc8 <__ieee754_rem_pio2+0x338>)
 8010c9e:	b08b      	sub	sp, #44	; 0x2c
 8010ca0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010ca4:	4598      	cmp	r8, r3
 8010ca6:	4682      	mov	sl, r0
 8010ca8:	9502      	str	r5, [sp, #8]
 8010caa:	dc08      	bgt.n	8010cbe <__ieee754_rem_pio2+0x2e>
 8010cac:	2200      	movs	r2, #0
 8010cae:	2300      	movs	r3, #0
 8010cb0:	ed80 0b00 	vstr	d0, [r0]
 8010cb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010cb8:	f04f 0b00 	mov.w	fp, #0
 8010cbc:	e028      	b.n	8010d10 <__ieee754_rem_pio2+0x80>
 8010cbe:	4bc3      	ldr	r3, [pc, #780]	; (8010fcc <__ieee754_rem_pio2+0x33c>)
 8010cc0:	4598      	cmp	r8, r3
 8010cc2:	dc78      	bgt.n	8010db6 <__ieee754_rem_pio2+0x126>
 8010cc4:	9b02      	ldr	r3, [sp, #8]
 8010cc6:	4ec2      	ldr	r6, [pc, #776]	; (8010fd0 <__ieee754_rem_pio2+0x340>)
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	ee10 0a10 	vmov	r0, s0
 8010cce:	a3b0      	add	r3, pc, #704	; (adr r3, 8010f90 <__ieee754_rem_pio2+0x300>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	dd39      	ble.n	8010d4c <__ieee754_rem_pio2+0xbc>
 8010cd8:	f7ef fade 	bl	8000298 <__aeabi_dsub>
 8010cdc:	45b0      	cmp	r8, r6
 8010cde:	4604      	mov	r4, r0
 8010ce0:	460d      	mov	r5, r1
 8010ce2:	d01b      	beq.n	8010d1c <__ieee754_rem_pio2+0x8c>
 8010ce4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x308>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	f7ef fad5 	bl	8000298 <__aeabi_dsub>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	e9ca 2300 	strd	r2, r3, [sl]
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	f7ef facd 	bl	8000298 <__aeabi_dsub>
 8010cfe:	a3a6      	add	r3, pc, #664	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x308>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	f7ef fac8 	bl	8000298 <__aeabi_dsub>
 8010d08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d0c:	f04f 0b01 	mov.w	fp, #1
 8010d10:	4658      	mov	r0, fp
 8010d12:	b00b      	add	sp, #44	; 0x2c
 8010d14:	ecbd 8b02 	vpop	{d8}
 8010d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8010fa0 <__ieee754_rem_pio2+0x310>)
 8010d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d22:	f7ef fab9 	bl	8000298 <__aeabi_dsub>
 8010d26:	a3a0      	add	r3, pc, #640	; (adr r3, 8010fa8 <__ieee754_rem_pio2+0x318>)
 8010d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	460d      	mov	r5, r1
 8010d30:	f7ef fab2 	bl	8000298 <__aeabi_dsub>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	e9ca 2300 	strd	r2, r3, [sl]
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	4629      	mov	r1, r5
 8010d40:	f7ef faaa 	bl	8000298 <__aeabi_dsub>
 8010d44:	a398      	add	r3, pc, #608	; (adr r3, 8010fa8 <__ieee754_rem_pio2+0x318>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	e7db      	b.n	8010d04 <__ieee754_rem_pio2+0x74>
 8010d4c:	f7ef faa6 	bl	800029c <__adddf3>
 8010d50:	45b0      	cmp	r8, r6
 8010d52:	4604      	mov	r4, r0
 8010d54:	460d      	mov	r5, r1
 8010d56:	d016      	beq.n	8010d86 <__ieee754_rem_pio2+0xf6>
 8010d58:	a38f      	add	r3, pc, #572	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x308>)
 8010d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5e:	f7ef fa9d 	bl	800029c <__adddf3>
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	e9ca 2300 	strd	r2, r3, [sl]
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7ef fa93 	bl	8000298 <__aeabi_dsub>
 8010d72:	a389      	add	r3, pc, #548	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x308>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7ef fa90 	bl	800029c <__adddf3>
 8010d7c:	f04f 3bff 	mov.w	fp, #4294967295
 8010d80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d84:	e7c4      	b.n	8010d10 <__ieee754_rem_pio2+0x80>
 8010d86:	a386      	add	r3, pc, #536	; (adr r3, 8010fa0 <__ieee754_rem_pio2+0x310>)
 8010d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8c:	f7ef fa86 	bl	800029c <__adddf3>
 8010d90:	a385      	add	r3, pc, #532	; (adr r3, 8010fa8 <__ieee754_rem_pio2+0x318>)
 8010d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d96:	4604      	mov	r4, r0
 8010d98:	460d      	mov	r5, r1
 8010d9a:	f7ef fa7f 	bl	800029c <__adddf3>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	e9ca 2300 	strd	r2, r3, [sl]
 8010da6:	4620      	mov	r0, r4
 8010da8:	4629      	mov	r1, r5
 8010daa:	f7ef fa75 	bl	8000298 <__aeabi_dsub>
 8010dae:	a37e      	add	r3, pc, #504	; (adr r3, 8010fa8 <__ieee754_rem_pio2+0x318>)
 8010db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db4:	e7e0      	b.n	8010d78 <__ieee754_rem_pio2+0xe8>
 8010db6:	4b87      	ldr	r3, [pc, #540]	; (8010fd4 <__ieee754_rem_pio2+0x344>)
 8010db8:	4598      	cmp	r8, r3
 8010dba:	f300 80d9 	bgt.w	8010f70 <__ieee754_rem_pio2+0x2e0>
 8010dbe:	f7ff fe3b 	bl	8010a38 <fabs>
 8010dc2:	ec55 4b10 	vmov	r4, r5, d0
 8010dc6:	ee10 0a10 	vmov	r0, s0
 8010dca:	a379      	add	r3, pc, #484	; (adr r3, 8010fb0 <__ieee754_rem_pio2+0x320>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	f7ef fc19 	bl	8000608 <__aeabi_dmul>
 8010dd6:	4b80      	ldr	r3, [pc, #512]	; (8010fd8 <__ieee754_rem_pio2+0x348>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f7ef fa5f 	bl	800029c <__adddf3>
 8010dde:	f7ef fec3 	bl	8000b68 <__aeabi_d2iz>
 8010de2:	4683      	mov	fp, r0
 8010de4:	f7ef fba6 	bl	8000534 <__aeabi_i2d>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	ec43 2b18 	vmov	d8, r2, r3
 8010df0:	a367      	add	r3, pc, #412	; (adr r3, 8010f90 <__ieee754_rem_pio2+0x300>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fc07 	bl	8000608 <__aeabi_dmul>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef fa49 	bl	8000298 <__aeabi_dsub>
 8010e06:	a364      	add	r3, pc, #400	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x308>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	4606      	mov	r6, r0
 8010e0e:	460f      	mov	r7, r1
 8010e10:	ec51 0b18 	vmov	r0, r1, d8
 8010e14:	f7ef fbf8 	bl	8000608 <__aeabi_dmul>
 8010e18:	f1bb 0f1f 	cmp.w	fp, #31
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	460d      	mov	r5, r1
 8010e20:	dc0d      	bgt.n	8010e3e <__ieee754_rem_pio2+0x1ae>
 8010e22:	4b6e      	ldr	r3, [pc, #440]	; (8010fdc <__ieee754_rem_pio2+0x34c>)
 8010e24:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e2c:	4543      	cmp	r3, r8
 8010e2e:	d006      	beq.n	8010e3e <__ieee754_rem_pio2+0x1ae>
 8010e30:	4622      	mov	r2, r4
 8010e32:	462b      	mov	r3, r5
 8010e34:	4630      	mov	r0, r6
 8010e36:	4639      	mov	r1, r7
 8010e38:	f7ef fa2e 	bl	8000298 <__aeabi_dsub>
 8010e3c:	e00f      	b.n	8010e5e <__ieee754_rem_pio2+0x1ce>
 8010e3e:	462b      	mov	r3, r5
 8010e40:	4622      	mov	r2, r4
 8010e42:	4630      	mov	r0, r6
 8010e44:	4639      	mov	r1, r7
 8010e46:	f7ef fa27 	bl	8000298 <__aeabi_dsub>
 8010e4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010e4e:	9303      	str	r3, [sp, #12]
 8010e50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e54:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010e58:	f1b8 0f10 	cmp.w	r8, #16
 8010e5c:	dc02      	bgt.n	8010e64 <__ieee754_rem_pio2+0x1d4>
 8010e5e:	e9ca 0100 	strd	r0, r1, [sl]
 8010e62:	e039      	b.n	8010ed8 <__ieee754_rem_pio2+0x248>
 8010e64:	a34e      	add	r3, pc, #312	; (adr r3, 8010fa0 <__ieee754_rem_pio2+0x310>)
 8010e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6a:	ec51 0b18 	vmov	r0, r1, d8
 8010e6e:	f7ef fbcb 	bl	8000608 <__aeabi_dmul>
 8010e72:	4604      	mov	r4, r0
 8010e74:	460d      	mov	r5, r1
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7ef fa0b 	bl	8000298 <__aeabi_dsub>
 8010e82:	4602      	mov	r2, r0
 8010e84:	460b      	mov	r3, r1
 8010e86:	4680      	mov	r8, r0
 8010e88:	4689      	mov	r9, r1
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	4639      	mov	r1, r7
 8010e8e:	f7ef fa03 	bl	8000298 <__aeabi_dsub>
 8010e92:	4622      	mov	r2, r4
 8010e94:	462b      	mov	r3, r5
 8010e96:	f7ef f9ff 	bl	8000298 <__aeabi_dsub>
 8010e9a:	a343      	add	r3, pc, #268	; (adr r3, 8010fa8 <__ieee754_rem_pio2+0x318>)
 8010e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	460d      	mov	r5, r1
 8010ea4:	ec51 0b18 	vmov	r0, r1, d8
 8010ea8:	f7ef fbae 	bl	8000608 <__aeabi_dmul>
 8010eac:	4622      	mov	r2, r4
 8010eae:	462b      	mov	r3, r5
 8010eb0:	f7ef f9f2 	bl	8000298 <__aeabi_dsub>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	4604      	mov	r4, r0
 8010eba:	460d      	mov	r5, r1
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	4649      	mov	r1, r9
 8010ec0:	f7ef f9ea 	bl	8000298 <__aeabi_dsub>
 8010ec4:	9a03      	ldr	r2, [sp, #12]
 8010ec6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	2b31      	cmp	r3, #49	; 0x31
 8010ece:	dc24      	bgt.n	8010f1a <__ieee754_rem_pio2+0x28a>
 8010ed0:	e9ca 0100 	strd	r0, r1, [sl]
 8010ed4:	4646      	mov	r6, r8
 8010ed6:	464f      	mov	r7, r9
 8010ed8:	e9da 8900 	ldrd	r8, r9, [sl]
 8010edc:	4630      	mov	r0, r6
 8010ede:	4642      	mov	r2, r8
 8010ee0:	464b      	mov	r3, r9
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	f7ef f9d8 	bl	8000298 <__aeabi_dsub>
 8010ee8:	462b      	mov	r3, r5
 8010eea:	4622      	mov	r2, r4
 8010eec:	f7ef f9d4 	bl	8000298 <__aeabi_dsub>
 8010ef0:	9b02      	ldr	r3, [sp, #8]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010ef8:	f6bf af0a 	bge.w	8010d10 <__ieee754_rem_pio2+0x80>
 8010efc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010f00:	f8ca 3004 	str.w	r3, [sl, #4]
 8010f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f08:	f8ca 8000 	str.w	r8, [sl]
 8010f0c:	f8ca 0008 	str.w	r0, [sl, #8]
 8010f10:	f8ca 300c 	str.w	r3, [sl, #12]
 8010f14:	f1cb 0b00 	rsb	fp, fp, #0
 8010f18:	e6fa      	b.n	8010d10 <__ieee754_rem_pio2+0x80>
 8010f1a:	a327      	add	r3, pc, #156	; (adr r3, 8010fb8 <__ieee754_rem_pio2+0x328>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	ec51 0b18 	vmov	r0, r1, d8
 8010f24:	f7ef fb70 	bl	8000608 <__aeabi_dmul>
 8010f28:	4604      	mov	r4, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	4640      	mov	r0, r8
 8010f32:	4649      	mov	r1, r9
 8010f34:	f7ef f9b0 	bl	8000298 <__aeabi_dsub>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	460f      	mov	r7, r1
 8010f40:	4640      	mov	r0, r8
 8010f42:	4649      	mov	r1, r9
 8010f44:	f7ef f9a8 	bl	8000298 <__aeabi_dsub>
 8010f48:	4622      	mov	r2, r4
 8010f4a:	462b      	mov	r3, r5
 8010f4c:	f7ef f9a4 	bl	8000298 <__aeabi_dsub>
 8010f50:	a31b      	add	r3, pc, #108	; (adr r3, 8010fc0 <__ieee754_rem_pio2+0x330>)
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	4604      	mov	r4, r0
 8010f58:	460d      	mov	r5, r1
 8010f5a:	ec51 0b18 	vmov	r0, r1, d8
 8010f5e:	f7ef fb53 	bl	8000608 <__aeabi_dmul>
 8010f62:	4622      	mov	r2, r4
 8010f64:	462b      	mov	r3, r5
 8010f66:	f7ef f997 	bl	8000298 <__aeabi_dsub>
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	460d      	mov	r5, r1
 8010f6e:	e75f      	b.n	8010e30 <__ieee754_rem_pio2+0x1a0>
 8010f70:	4b1b      	ldr	r3, [pc, #108]	; (8010fe0 <__ieee754_rem_pio2+0x350>)
 8010f72:	4598      	cmp	r8, r3
 8010f74:	dd36      	ble.n	8010fe4 <__ieee754_rem_pio2+0x354>
 8010f76:	ee10 2a10 	vmov	r2, s0
 8010f7a:	462b      	mov	r3, r5
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	4629      	mov	r1, r5
 8010f80:	f7ef f98a 	bl	8000298 <__aeabi_dsub>
 8010f84:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f88:	e9ca 0100 	strd	r0, r1, [sl]
 8010f8c:	e694      	b.n	8010cb8 <__ieee754_rem_pio2+0x28>
 8010f8e:	bf00      	nop
 8010f90:	54400000 	.word	0x54400000
 8010f94:	3ff921fb 	.word	0x3ff921fb
 8010f98:	1a626331 	.word	0x1a626331
 8010f9c:	3dd0b461 	.word	0x3dd0b461
 8010fa0:	1a600000 	.word	0x1a600000
 8010fa4:	3dd0b461 	.word	0x3dd0b461
 8010fa8:	2e037073 	.word	0x2e037073
 8010fac:	3ba3198a 	.word	0x3ba3198a
 8010fb0:	6dc9c883 	.word	0x6dc9c883
 8010fb4:	3fe45f30 	.word	0x3fe45f30
 8010fb8:	2e000000 	.word	0x2e000000
 8010fbc:	3ba3198a 	.word	0x3ba3198a
 8010fc0:	252049c1 	.word	0x252049c1
 8010fc4:	397b839a 	.word	0x397b839a
 8010fc8:	3fe921fb 	.word	0x3fe921fb
 8010fcc:	4002d97b 	.word	0x4002d97b
 8010fd0:	3ff921fb 	.word	0x3ff921fb
 8010fd4:	413921fb 	.word	0x413921fb
 8010fd8:	3fe00000 	.word	0x3fe00000
 8010fdc:	08013250 	.word	0x08013250
 8010fe0:	7fefffff 	.word	0x7fefffff
 8010fe4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010fe8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010fec:	ee10 0a10 	vmov	r0, s0
 8010ff0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8010ff4:	ee10 6a10 	vmov	r6, s0
 8010ff8:	460f      	mov	r7, r1
 8010ffa:	f7ef fdb5 	bl	8000b68 <__aeabi_d2iz>
 8010ffe:	f7ef fa99 	bl	8000534 <__aeabi_i2d>
 8011002:	4602      	mov	r2, r0
 8011004:	460b      	mov	r3, r1
 8011006:	4630      	mov	r0, r6
 8011008:	4639      	mov	r1, r7
 801100a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801100e:	f7ef f943 	bl	8000298 <__aeabi_dsub>
 8011012:	4b23      	ldr	r3, [pc, #140]	; (80110a0 <__ieee754_rem_pio2+0x410>)
 8011014:	2200      	movs	r2, #0
 8011016:	f7ef faf7 	bl	8000608 <__aeabi_dmul>
 801101a:	460f      	mov	r7, r1
 801101c:	4606      	mov	r6, r0
 801101e:	f7ef fda3 	bl	8000b68 <__aeabi_d2iz>
 8011022:	f7ef fa87 	bl	8000534 <__aeabi_i2d>
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	4630      	mov	r0, r6
 801102c:	4639      	mov	r1, r7
 801102e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011032:	f7ef f931 	bl	8000298 <__aeabi_dsub>
 8011036:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <__ieee754_rem_pio2+0x410>)
 8011038:	2200      	movs	r2, #0
 801103a:	f7ef fae5 	bl	8000608 <__aeabi_dmul>
 801103e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011042:	ad04      	add	r5, sp, #16
 8011044:	f04f 0803 	mov.w	r8, #3
 8011048:	46a9      	mov	r9, r5
 801104a:	2600      	movs	r6, #0
 801104c:	2700      	movs	r7, #0
 801104e:	4632      	mov	r2, r6
 8011050:	463b      	mov	r3, r7
 8011052:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011056:	46c3      	mov	fp, r8
 8011058:	3d08      	subs	r5, #8
 801105a:	f108 38ff 	add.w	r8, r8, #4294967295
 801105e:	f7ef fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8011062:	2800      	cmp	r0, #0
 8011064:	d1f3      	bne.n	801104e <__ieee754_rem_pio2+0x3be>
 8011066:	4b0f      	ldr	r3, [pc, #60]	; (80110a4 <__ieee754_rem_pio2+0x414>)
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	2302      	movs	r3, #2
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	4622      	mov	r2, r4
 8011070:	465b      	mov	r3, fp
 8011072:	4651      	mov	r1, sl
 8011074:	4648      	mov	r0, r9
 8011076:	f000 fb4f 	bl	8011718 <__kernel_rem_pio2>
 801107a:	9b02      	ldr	r3, [sp, #8]
 801107c:	2b00      	cmp	r3, #0
 801107e:	4683      	mov	fp, r0
 8011080:	f6bf ae46 	bge.w	8010d10 <__ieee754_rem_pio2+0x80>
 8011084:	e9da 2100 	ldrd	r2, r1, [sl]
 8011088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801108c:	e9ca 2300 	strd	r2, r3, [sl]
 8011090:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011098:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801109c:	e73a      	b.n	8010f14 <__ieee754_rem_pio2+0x284>
 801109e:	bf00      	nop
 80110a0:	41700000 	.word	0x41700000
 80110a4:	080132d0 	.word	0x080132d0

080110a8 <__ieee754_sqrt>:
 80110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	ec55 4b10 	vmov	r4, r5, d0
 80110b0:	4e55      	ldr	r6, [pc, #340]	; (8011208 <__ieee754_sqrt+0x160>)
 80110b2:	43ae      	bics	r6, r5
 80110b4:	ee10 0a10 	vmov	r0, s0
 80110b8:	ee10 3a10 	vmov	r3, s0
 80110bc:	462a      	mov	r2, r5
 80110be:	4629      	mov	r1, r5
 80110c0:	d110      	bne.n	80110e4 <__ieee754_sqrt+0x3c>
 80110c2:	ee10 2a10 	vmov	r2, s0
 80110c6:	462b      	mov	r3, r5
 80110c8:	f7ef fa9e 	bl	8000608 <__aeabi_dmul>
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	4620      	mov	r0, r4
 80110d2:	4629      	mov	r1, r5
 80110d4:	f7ef f8e2 	bl	800029c <__adddf3>
 80110d8:	4604      	mov	r4, r0
 80110da:	460d      	mov	r5, r1
 80110dc:	ec45 4b10 	vmov	d0, r4, r5
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e4:	2d00      	cmp	r5, #0
 80110e6:	dc10      	bgt.n	801110a <__ieee754_sqrt+0x62>
 80110e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110ec:	4330      	orrs	r0, r6
 80110ee:	d0f5      	beq.n	80110dc <__ieee754_sqrt+0x34>
 80110f0:	b15d      	cbz	r5, 801110a <__ieee754_sqrt+0x62>
 80110f2:	ee10 2a10 	vmov	r2, s0
 80110f6:	462b      	mov	r3, r5
 80110f8:	ee10 0a10 	vmov	r0, s0
 80110fc:	f7ef f8cc 	bl	8000298 <__aeabi_dsub>
 8011100:	4602      	mov	r2, r0
 8011102:	460b      	mov	r3, r1
 8011104:	f7ef fbaa 	bl	800085c <__aeabi_ddiv>
 8011108:	e7e6      	b.n	80110d8 <__ieee754_sqrt+0x30>
 801110a:	1512      	asrs	r2, r2, #20
 801110c:	d074      	beq.n	80111f8 <__ieee754_sqrt+0x150>
 801110e:	07d4      	lsls	r4, r2, #31
 8011110:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011114:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801111c:	bf5e      	ittt	pl
 801111e:	0fda      	lsrpl	r2, r3, #31
 8011120:	005b      	lslpl	r3, r3, #1
 8011122:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011126:	2400      	movs	r4, #0
 8011128:	0fda      	lsrs	r2, r3, #31
 801112a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801112e:	107f      	asrs	r7, r7, #1
 8011130:	005b      	lsls	r3, r3, #1
 8011132:	2516      	movs	r5, #22
 8011134:	4620      	mov	r0, r4
 8011136:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801113a:	1886      	adds	r6, r0, r2
 801113c:	428e      	cmp	r6, r1
 801113e:	bfde      	ittt	le
 8011140:	1b89      	suble	r1, r1, r6
 8011142:	18b0      	addle	r0, r6, r2
 8011144:	18a4      	addle	r4, r4, r2
 8011146:	0049      	lsls	r1, r1, #1
 8011148:	3d01      	subs	r5, #1
 801114a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801114e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011152:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011156:	d1f0      	bne.n	801113a <__ieee754_sqrt+0x92>
 8011158:	462a      	mov	r2, r5
 801115a:	f04f 0e20 	mov.w	lr, #32
 801115e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011162:	4281      	cmp	r1, r0
 8011164:	eb06 0c05 	add.w	ip, r6, r5
 8011168:	dc02      	bgt.n	8011170 <__ieee754_sqrt+0xc8>
 801116a:	d113      	bne.n	8011194 <__ieee754_sqrt+0xec>
 801116c:	459c      	cmp	ip, r3
 801116e:	d811      	bhi.n	8011194 <__ieee754_sqrt+0xec>
 8011170:	f1bc 0f00 	cmp.w	ip, #0
 8011174:	eb0c 0506 	add.w	r5, ip, r6
 8011178:	da43      	bge.n	8011202 <__ieee754_sqrt+0x15a>
 801117a:	2d00      	cmp	r5, #0
 801117c:	db41      	blt.n	8011202 <__ieee754_sqrt+0x15a>
 801117e:	f100 0801 	add.w	r8, r0, #1
 8011182:	1a09      	subs	r1, r1, r0
 8011184:	459c      	cmp	ip, r3
 8011186:	bf88      	it	hi
 8011188:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801118c:	eba3 030c 	sub.w	r3, r3, ip
 8011190:	4432      	add	r2, r6
 8011192:	4640      	mov	r0, r8
 8011194:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011198:	f1be 0e01 	subs.w	lr, lr, #1
 801119c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80111a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80111a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80111a8:	d1db      	bne.n	8011162 <__ieee754_sqrt+0xba>
 80111aa:	430b      	orrs	r3, r1
 80111ac:	d006      	beq.n	80111bc <__ieee754_sqrt+0x114>
 80111ae:	1c50      	adds	r0, r2, #1
 80111b0:	bf13      	iteet	ne
 80111b2:	3201      	addne	r2, #1
 80111b4:	3401      	addeq	r4, #1
 80111b6:	4672      	moveq	r2, lr
 80111b8:	f022 0201 	bicne.w	r2, r2, #1
 80111bc:	1063      	asrs	r3, r4, #1
 80111be:	0852      	lsrs	r2, r2, #1
 80111c0:	07e1      	lsls	r1, r4, #31
 80111c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80111c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80111ca:	bf48      	it	mi
 80111cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80111d0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80111d4:	4614      	mov	r4, r2
 80111d6:	e781      	b.n	80110dc <__ieee754_sqrt+0x34>
 80111d8:	0ad9      	lsrs	r1, r3, #11
 80111da:	3815      	subs	r0, #21
 80111dc:	055b      	lsls	r3, r3, #21
 80111de:	2900      	cmp	r1, #0
 80111e0:	d0fa      	beq.n	80111d8 <__ieee754_sqrt+0x130>
 80111e2:	02cd      	lsls	r5, r1, #11
 80111e4:	d50a      	bpl.n	80111fc <__ieee754_sqrt+0x154>
 80111e6:	f1c2 0420 	rsb	r4, r2, #32
 80111ea:	fa23 f404 	lsr.w	r4, r3, r4
 80111ee:	1e55      	subs	r5, r2, #1
 80111f0:	4093      	lsls	r3, r2
 80111f2:	4321      	orrs	r1, r4
 80111f4:	1b42      	subs	r2, r0, r5
 80111f6:	e78a      	b.n	801110e <__ieee754_sqrt+0x66>
 80111f8:	4610      	mov	r0, r2
 80111fa:	e7f0      	b.n	80111de <__ieee754_sqrt+0x136>
 80111fc:	0049      	lsls	r1, r1, #1
 80111fe:	3201      	adds	r2, #1
 8011200:	e7ef      	b.n	80111e2 <__ieee754_sqrt+0x13a>
 8011202:	4680      	mov	r8, r0
 8011204:	e7bd      	b.n	8011182 <__ieee754_sqrt+0xda>
 8011206:	bf00      	nop
 8011208:	7ff00000 	.word	0x7ff00000

0801120c <__ieee754_fmodf>:
 801120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801120e:	ee10 5a90 	vmov	r5, s1
 8011212:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8011216:	d009      	beq.n	801122c <__ieee754_fmodf+0x20>
 8011218:	ee10 2a10 	vmov	r2, s0
 801121c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011220:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011224:	da02      	bge.n	801122c <__ieee754_fmodf+0x20>
 8011226:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801122a:	dd04      	ble.n	8011236 <__ieee754_fmodf+0x2a>
 801122c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011230:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011236:	42a3      	cmp	r3, r4
 8011238:	dbfc      	blt.n	8011234 <__ieee754_fmodf+0x28>
 801123a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801123e:	d105      	bne.n	801124c <__ieee754_fmodf+0x40>
 8011240:	4b32      	ldr	r3, [pc, #200]	; (801130c <__ieee754_fmodf+0x100>)
 8011242:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8011246:	ed93 0a00 	vldr	s0, [r3]
 801124a:	e7f3      	b.n	8011234 <__ieee754_fmodf+0x28>
 801124c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011250:	d13f      	bne.n	80112d2 <__ieee754_fmodf+0xc6>
 8011252:	0219      	lsls	r1, r3, #8
 8011254:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011258:	2900      	cmp	r1, #0
 801125a:	dc37      	bgt.n	80112cc <__ieee754_fmodf+0xc0>
 801125c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8011260:	d13d      	bne.n	80112de <__ieee754_fmodf+0xd2>
 8011262:	0227      	lsls	r7, r4, #8
 8011264:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011268:	2f00      	cmp	r7, #0
 801126a:	da35      	bge.n	80112d8 <__ieee754_fmodf+0xcc>
 801126c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011270:	bfbb      	ittet	lt
 8011272:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011276:	1a12      	sublt	r2, r2, r0
 8011278:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801127c:	4093      	lsllt	r3, r2
 801127e:	bfa8      	it	ge
 8011280:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8011284:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011288:	bfb5      	itete	lt
 801128a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801128e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8011292:	1a52      	sublt	r2, r2, r1
 8011294:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8011298:	bfb8      	it	lt
 801129a:	4094      	lsllt	r4, r2
 801129c:	1a40      	subs	r0, r0, r1
 801129e:	1b1a      	subs	r2, r3, r4
 80112a0:	bb00      	cbnz	r0, 80112e4 <__ieee754_fmodf+0xd8>
 80112a2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80112a6:	bf38      	it	cc
 80112a8:	4613      	movcc	r3, r2
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0c8      	beq.n	8011240 <__ieee754_fmodf+0x34>
 80112ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80112b2:	db1f      	blt.n	80112f4 <__ieee754_fmodf+0xe8>
 80112b4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80112b8:	db1f      	blt.n	80112fa <__ieee754_fmodf+0xee>
 80112ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80112be:	317f      	adds	r1, #127	; 0x7f
 80112c0:	4333      	orrs	r3, r6
 80112c2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80112c6:	ee00 3a10 	vmov	s0, r3
 80112ca:	e7b3      	b.n	8011234 <__ieee754_fmodf+0x28>
 80112cc:	3801      	subs	r0, #1
 80112ce:	0049      	lsls	r1, r1, #1
 80112d0:	e7c2      	b.n	8011258 <__ieee754_fmodf+0x4c>
 80112d2:	15d8      	asrs	r0, r3, #23
 80112d4:	387f      	subs	r0, #127	; 0x7f
 80112d6:	e7c1      	b.n	801125c <__ieee754_fmodf+0x50>
 80112d8:	3901      	subs	r1, #1
 80112da:	007f      	lsls	r7, r7, #1
 80112dc:	e7c4      	b.n	8011268 <__ieee754_fmodf+0x5c>
 80112de:	15e1      	asrs	r1, r4, #23
 80112e0:	397f      	subs	r1, #127	; 0x7f
 80112e2:	e7c3      	b.n	801126c <__ieee754_fmodf+0x60>
 80112e4:	2a00      	cmp	r2, #0
 80112e6:	da02      	bge.n	80112ee <__ieee754_fmodf+0xe2>
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	3801      	subs	r0, #1
 80112ec:	e7d7      	b.n	801129e <__ieee754_fmodf+0x92>
 80112ee:	d0a7      	beq.n	8011240 <__ieee754_fmodf+0x34>
 80112f0:	0053      	lsls	r3, r2, #1
 80112f2:	e7fa      	b.n	80112ea <__ieee754_fmodf+0xde>
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	3901      	subs	r1, #1
 80112f8:	e7d9      	b.n	80112ae <__ieee754_fmodf+0xa2>
 80112fa:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80112fe:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8011302:	3182      	adds	r1, #130	; 0x82
 8011304:	410b      	asrs	r3, r1
 8011306:	4333      	orrs	r3, r6
 8011308:	e7dd      	b.n	80112c6 <__ieee754_fmodf+0xba>
 801130a:	bf00      	nop
 801130c:	080133d8 	.word	0x080133d8

08011310 <__ieee754_rem_pio2f>:
 8011310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011312:	ee10 6a10 	vmov	r6, s0
 8011316:	4b8e      	ldr	r3, [pc, #568]	; (8011550 <__ieee754_rem_pio2f+0x240>)
 8011318:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801131c:	429d      	cmp	r5, r3
 801131e:	b087      	sub	sp, #28
 8011320:	eef0 7a40 	vmov.f32	s15, s0
 8011324:	4604      	mov	r4, r0
 8011326:	dc05      	bgt.n	8011334 <__ieee754_rem_pio2f+0x24>
 8011328:	2300      	movs	r3, #0
 801132a:	ed80 0a00 	vstr	s0, [r0]
 801132e:	6043      	str	r3, [r0, #4]
 8011330:	2000      	movs	r0, #0
 8011332:	e01a      	b.n	801136a <__ieee754_rem_pio2f+0x5a>
 8011334:	4b87      	ldr	r3, [pc, #540]	; (8011554 <__ieee754_rem_pio2f+0x244>)
 8011336:	429d      	cmp	r5, r3
 8011338:	dc46      	bgt.n	80113c8 <__ieee754_rem_pio2f+0xb8>
 801133a:	2e00      	cmp	r6, #0
 801133c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8011558 <__ieee754_rem_pio2f+0x248>
 8011340:	4b86      	ldr	r3, [pc, #536]	; (801155c <__ieee754_rem_pio2f+0x24c>)
 8011342:	f025 050f 	bic.w	r5, r5, #15
 8011346:	dd1f      	ble.n	8011388 <__ieee754_rem_pio2f+0x78>
 8011348:	429d      	cmp	r5, r3
 801134a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801134e:	d00e      	beq.n	801136e <__ieee754_rem_pio2f+0x5e>
 8011350:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8011560 <__ieee754_rem_pio2f+0x250>
 8011354:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011358:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801135c:	ed80 0a00 	vstr	s0, [r0]
 8011360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011364:	2001      	movs	r0, #1
 8011366:	edc4 7a01 	vstr	s15, [r4, #4]
 801136a:	b007      	add	sp, #28
 801136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8011564 <__ieee754_rem_pio2f+0x254>
 8011372:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8011568 <__ieee754_rem_pio2f+0x258>
 8011376:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801137a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801137e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011382:	edc0 6a00 	vstr	s13, [r0]
 8011386:	e7eb      	b.n	8011360 <__ieee754_rem_pio2f+0x50>
 8011388:	429d      	cmp	r5, r3
 801138a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801138e:	d00e      	beq.n	80113ae <__ieee754_rem_pio2f+0x9e>
 8011390:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011560 <__ieee754_rem_pio2f+0x250>
 8011394:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011398:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801139c:	ed80 0a00 	vstr	s0, [r0]
 80113a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80113a4:	f04f 30ff 	mov.w	r0, #4294967295
 80113a8:	edc4 7a01 	vstr	s15, [r4, #4]
 80113ac:	e7dd      	b.n	801136a <__ieee754_rem_pio2f+0x5a>
 80113ae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8011564 <__ieee754_rem_pio2f+0x254>
 80113b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011568 <__ieee754_rem_pio2f+0x258>
 80113b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80113ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 80113be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80113c2:	edc0 6a00 	vstr	s13, [r0]
 80113c6:	e7eb      	b.n	80113a0 <__ieee754_rem_pio2f+0x90>
 80113c8:	4b68      	ldr	r3, [pc, #416]	; (801156c <__ieee754_rem_pio2f+0x25c>)
 80113ca:	429d      	cmp	r5, r3
 80113cc:	dc72      	bgt.n	80114b4 <__ieee754_rem_pio2f+0x1a4>
 80113ce:	f001 fbe1 	bl	8012b94 <fabsf>
 80113d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011570 <__ieee754_rem_pio2f+0x260>
 80113d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80113da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80113de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80113e6:	ee17 0a90 	vmov	r0, s15
 80113ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011558 <__ieee754_rem_pio2f+0x248>
 80113ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80113f2:	281f      	cmp	r0, #31
 80113f4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011560 <__ieee754_rem_pio2f+0x250>
 80113f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113fc:	eeb1 6a47 	vneg.f32	s12, s14
 8011400:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011404:	ee16 2a90 	vmov	r2, s13
 8011408:	dc1c      	bgt.n	8011444 <__ieee754_rem_pio2f+0x134>
 801140a:	495a      	ldr	r1, [pc, #360]	; (8011574 <__ieee754_rem_pio2f+0x264>)
 801140c:	1e47      	subs	r7, r0, #1
 801140e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8011412:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8011416:	428b      	cmp	r3, r1
 8011418:	d014      	beq.n	8011444 <__ieee754_rem_pio2f+0x134>
 801141a:	6022      	str	r2, [r4, #0]
 801141c:	ed94 7a00 	vldr	s14, [r4]
 8011420:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011424:	2e00      	cmp	r6, #0
 8011426:	ee30 0a67 	vsub.f32	s0, s0, s15
 801142a:	ed84 0a01 	vstr	s0, [r4, #4]
 801142e:	da9c      	bge.n	801136a <__ieee754_rem_pio2f+0x5a>
 8011430:	eeb1 7a47 	vneg.f32	s14, s14
 8011434:	eeb1 0a40 	vneg.f32	s0, s0
 8011438:	ed84 7a00 	vstr	s14, [r4]
 801143c:	ed84 0a01 	vstr	s0, [r4, #4]
 8011440:	4240      	negs	r0, r0
 8011442:	e792      	b.n	801136a <__ieee754_rem_pio2f+0x5a>
 8011444:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011448:	15eb      	asrs	r3, r5, #23
 801144a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801144e:	2d08      	cmp	r5, #8
 8011450:	dde3      	ble.n	801141a <__ieee754_rem_pio2f+0x10a>
 8011452:	eddf 7a44 	vldr	s15, [pc, #272]	; 8011564 <__ieee754_rem_pio2f+0x254>
 8011456:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011568 <__ieee754_rem_pio2f+0x258>
 801145a:	eef0 6a40 	vmov.f32	s13, s0
 801145e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011462:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011466:	eea6 0a27 	vfma.f32	s0, s12, s15
 801146a:	eef0 7a40 	vmov.f32	s15, s0
 801146e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011472:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011476:	ee15 2a90 	vmov	r2, s11
 801147a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801147e:	1a5b      	subs	r3, r3, r1
 8011480:	2b19      	cmp	r3, #25
 8011482:	dc04      	bgt.n	801148e <__ieee754_rem_pio2f+0x17e>
 8011484:	edc4 5a00 	vstr	s11, [r4]
 8011488:	eeb0 0a66 	vmov.f32	s0, s13
 801148c:	e7c6      	b.n	801141c <__ieee754_rem_pio2f+0x10c>
 801148e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011578 <__ieee754_rem_pio2f+0x268>
 8011492:	eeb0 0a66 	vmov.f32	s0, s13
 8011496:	eea6 0a25 	vfma.f32	s0, s12, s11
 801149a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801149e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801157c <__ieee754_rem_pio2f+0x26c>
 80114a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80114a6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80114aa:	ee30 7a67 	vsub.f32	s14, s0, s15
 80114ae:	ed84 7a00 	vstr	s14, [r4]
 80114b2:	e7b3      	b.n	801141c <__ieee754_rem_pio2f+0x10c>
 80114b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80114b8:	db06      	blt.n	80114c8 <__ieee754_rem_pio2f+0x1b8>
 80114ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 80114be:	edc0 7a01 	vstr	s15, [r0, #4]
 80114c2:	edc0 7a00 	vstr	s15, [r0]
 80114c6:	e733      	b.n	8011330 <__ieee754_rem_pio2f+0x20>
 80114c8:	15ea      	asrs	r2, r5, #23
 80114ca:	3a86      	subs	r2, #134	; 0x86
 80114cc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80114d0:	ee07 3a90 	vmov	s15, r3
 80114d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80114d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011580 <__ieee754_rem_pio2f+0x270>
 80114dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80114e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114e4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80114e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80114f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80114f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80114fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011500:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011508:	edcd 7a05 	vstr	s15, [sp, #20]
 801150c:	d11e      	bne.n	801154c <__ieee754_rem_pio2f+0x23c>
 801150e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011516:	bf14      	ite	ne
 8011518:	2302      	movne	r3, #2
 801151a:	2301      	moveq	r3, #1
 801151c:	4919      	ldr	r1, [pc, #100]	; (8011584 <__ieee754_rem_pio2f+0x274>)
 801151e:	9101      	str	r1, [sp, #4]
 8011520:	2102      	movs	r1, #2
 8011522:	9100      	str	r1, [sp, #0]
 8011524:	a803      	add	r0, sp, #12
 8011526:	4621      	mov	r1, r4
 8011528:	f000 ff70 	bl	801240c <__kernel_rem_pio2f>
 801152c:	2e00      	cmp	r6, #0
 801152e:	f6bf af1c 	bge.w	801136a <__ieee754_rem_pio2f+0x5a>
 8011532:	edd4 7a00 	vldr	s15, [r4]
 8011536:	eef1 7a67 	vneg.f32	s15, s15
 801153a:	edc4 7a00 	vstr	s15, [r4]
 801153e:	edd4 7a01 	vldr	s15, [r4, #4]
 8011542:	eef1 7a67 	vneg.f32	s15, s15
 8011546:	edc4 7a01 	vstr	s15, [r4, #4]
 801154a:	e779      	b.n	8011440 <__ieee754_rem_pio2f+0x130>
 801154c:	2303      	movs	r3, #3
 801154e:	e7e5      	b.n	801151c <__ieee754_rem_pio2f+0x20c>
 8011550:	3f490fd8 	.word	0x3f490fd8
 8011554:	4016cbe3 	.word	0x4016cbe3
 8011558:	3fc90f80 	.word	0x3fc90f80
 801155c:	3fc90fd0 	.word	0x3fc90fd0
 8011560:	37354443 	.word	0x37354443
 8011564:	37354400 	.word	0x37354400
 8011568:	2e85a308 	.word	0x2e85a308
 801156c:	43490f80 	.word	0x43490f80
 8011570:	3f22f984 	.word	0x3f22f984
 8011574:	080133e0 	.word	0x080133e0
 8011578:	2e85a300 	.word	0x2e85a300
 801157c:	248d3132 	.word	0x248d3132
 8011580:	43800000 	.word	0x43800000
 8011584:	08013460 	.word	0x08013460

08011588 <__kernel_cos>:
 8011588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	ec57 6b10 	vmov	r6, r7, d0
 8011590:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011594:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011598:	ed8d 1b00 	vstr	d1, [sp]
 801159c:	da07      	bge.n	80115ae <__kernel_cos+0x26>
 801159e:	ee10 0a10 	vmov	r0, s0
 80115a2:	4639      	mov	r1, r7
 80115a4:	f7ef fae0 	bl	8000b68 <__aeabi_d2iz>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	f000 8088 	beq.w	80116be <__kernel_cos+0x136>
 80115ae:	4632      	mov	r2, r6
 80115b0:	463b      	mov	r3, r7
 80115b2:	4630      	mov	r0, r6
 80115b4:	4639      	mov	r1, r7
 80115b6:	f7ef f827 	bl	8000608 <__aeabi_dmul>
 80115ba:	4b51      	ldr	r3, [pc, #324]	; (8011700 <__kernel_cos+0x178>)
 80115bc:	2200      	movs	r2, #0
 80115be:	4604      	mov	r4, r0
 80115c0:	460d      	mov	r5, r1
 80115c2:	f7ef f821 	bl	8000608 <__aeabi_dmul>
 80115c6:	a340      	add	r3, pc, #256	; (adr r3, 80116c8 <__kernel_cos+0x140>)
 80115c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115cc:	4682      	mov	sl, r0
 80115ce:	468b      	mov	fp, r1
 80115d0:	4620      	mov	r0, r4
 80115d2:	4629      	mov	r1, r5
 80115d4:	f7ef f818 	bl	8000608 <__aeabi_dmul>
 80115d8:	a33d      	add	r3, pc, #244	; (adr r3, 80116d0 <__kernel_cos+0x148>)
 80115da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115de:	f7ee fe5d 	bl	800029c <__adddf3>
 80115e2:	4622      	mov	r2, r4
 80115e4:	462b      	mov	r3, r5
 80115e6:	f7ef f80f 	bl	8000608 <__aeabi_dmul>
 80115ea:	a33b      	add	r3, pc, #236	; (adr r3, 80116d8 <__kernel_cos+0x150>)
 80115ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f0:	f7ee fe52 	bl	8000298 <__aeabi_dsub>
 80115f4:	4622      	mov	r2, r4
 80115f6:	462b      	mov	r3, r5
 80115f8:	f7ef f806 	bl	8000608 <__aeabi_dmul>
 80115fc:	a338      	add	r3, pc, #224	; (adr r3, 80116e0 <__kernel_cos+0x158>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	f7ee fe4b 	bl	800029c <__adddf3>
 8011606:	4622      	mov	r2, r4
 8011608:	462b      	mov	r3, r5
 801160a:	f7ee fffd 	bl	8000608 <__aeabi_dmul>
 801160e:	a336      	add	r3, pc, #216	; (adr r3, 80116e8 <__kernel_cos+0x160>)
 8011610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011614:	f7ee fe40 	bl	8000298 <__aeabi_dsub>
 8011618:	4622      	mov	r2, r4
 801161a:	462b      	mov	r3, r5
 801161c:	f7ee fff4 	bl	8000608 <__aeabi_dmul>
 8011620:	a333      	add	r3, pc, #204	; (adr r3, 80116f0 <__kernel_cos+0x168>)
 8011622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011626:	f7ee fe39 	bl	800029c <__adddf3>
 801162a:	4622      	mov	r2, r4
 801162c:	462b      	mov	r3, r5
 801162e:	f7ee ffeb 	bl	8000608 <__aeabi_dmul>
 8011632:	4622      	mov	r2, r4
 8011634:	462b      	mov	r3, r5
 8011636:	f7ee ffe7 	bl	8000608 <__aeabi_dmul>
 801163a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801163e:	4604      	mov	r4, r0
 8011640:	460d      	mov	r5, r1
 8011642:	4630      	mov	r0, r6
 8011644:	4639      	mov	r1, r7
 8011646:	f7ee ffdf 	bl	8000608 <__aeabi_dmul>
 801164a:	460b      	mov	r3, r1
 801164c:	4602      	mov	r2, r0
 801164e:	4629      	mov	r1, r5
 8011650:	4620      	mov	r0, r4
 8011652:	f7ee fe21 	bl	8000298 <__aeabi_dsub>
 8011656:	4b2b      	ldr	r3, [pc, #172]	; (8011704 <__kernel_cos+0x17c>)
 8011658:	4598      	cmp	r8, r3
 801165a:	4606      	mov	r6, r0
 801165c:	460f      	mov	r7, r1
 801165e:	dc10      	bgt.n	8011682 <__kernel_cos+0xfa>
 8011660:	4602      	mov	r2, r0
 8011662:	460b      	mov	r3, r1
 8011664:	4650      	mov	r0, sl
 8011666:	4659      	mov	r1, fp
 8011668:	f7ee fe16 	bl	8000298 <__aeabi_dsub>
 801166c:	460b      	mov	r3, r1
 801166e:	4926      	ldr	r1, [pc, #152]	; (8011708 <__kernel_cos+0x180>)
 8011670:	4602      	mov	r2, r0
 8011672:	2000      	movs	r0, #0
 8011674:	f7ee fe10 	bl	8000298 <__aeabi_dsub>
 8011678:	ec41 0b10 	vmov	d0, r0, r1
 801167c:	b003      	add	sp, #12
 801167e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011682:	4b22      	ldr	r3, [pc, #136]	; (801170c <__kernel_cos+0x184>)
 8011684:	4920      	ldr	r1, [pc, #128]	; (8011708 <__kernel_cos+0x180>)
 8011686:	4598      	cmp	r8, r3
 8011688:	bfcc      	ite	gt
 801168a:	4d21      	ldrgt	r5, [pc, #132]	; (8011710 <__kernel_cos+0x188>)
 801168c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011690:	2400      	movs	r4, #0
 8011692:	4622      	mov	r2, r4
 8011694:	462b      	mov	r3, r5
 8011696:	2000      	movs	r0, #0
 8011698:	f7ee fdfe 	bl	8000298 <__aeabi_dsub>
 801169c:	4622      	mov	r2, r4
 801169e:	4680      	mov	r8, r0
 80116a0:	4689      	mov	r9, r1
 80116a2:	462b      	mov	r3, r5
 80116a4:	4650      	mov	r0, sl
 80116a6:	4659      	mov	r1, fp
 80116a8:	f7ee fdf6 	bl	8000298 <__aeabi_dsub>
 80116ac:	4632      	mov	r2, r6
 80116ae:	463b      	mov	r3, r7
 80116b0:	f7ee fdf2 	bl	8000298 <__aeabi_dsub>
 80116b4:	4602      	mov	r2, r0
 80116b6:	460b      	mov	r3, r1
 80116b8:	4640      	mov	r0, r8
 80116ba:	4649      	mov	r1, r9
 80116bc:	e7da      	b.n	8011674 <__kernel_cos+0xec>
 80116be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80116f8 <__kernel_cos+0x170>
 80116c2:	e7db      	b.n	801167c <__kernel_cos+0xf4>
 80116c4:	f3af 8000 	nop.w
 80116c8:	be8838d4 	.word	0xbe8838d4
 80116cc:	bda8fae9 	.word	0xbda8fae9
 80116d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80116d4:	3e21ee9e 	.word	0x3e21ee9e
 80116d8:	809c52ad 	.word	0x809c52ad
 80116dc:	3e927e4f 	.word	0x3e927e4f
 80116e0:	19cb1590 	.word	0x19cb1590
 80116e4:	3efa01a0 	.word	0x3efa01a0
 80116e8:	16c15177 	.word	0x16c15177
 80116ec:	3f56c16c 	.word	0x3f56c16c
 80116f0:	5555554c 	.word	0x5555554c
 80116f4:	3fa55555 	.word	0x3fa55555
 80116f8:	00000000 	.word	0x00000000
 80116fc:	3ff00000 	.word	0x3ff00000
 8011700:	3fe00000 	.word	0x3fe00000
 8011704:	3fd33332 	.word	0x3fd33332
 8011708:	3ff00000 	.word	0x3ff00000
 801170c:	3fe90000 	.word	0x3fe90000
 8011710:	3fd20000 	.word	0x3fd20000
 8011714:	00000000 	.word	0x00000000

08011718 <__kernel_rem_pio2>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	ed2d 8b02 	vpush	{d8}
 8011720:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011724:	f112 0f14 	cmn.w	r2, #20
 8011728:	9308      	str	r3, [sp, #32]
 801172a:	9101      	str	r1, [sp, #4]
 801172c:	4bc4      	ldr	r3, [pc, #784]	; (8011a40 <__kernel_rem_pio2+0x328>)
 801172e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011730:	900b      	str	r0, [sp, #44]	; 0x2c
 8011732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011736:	9302      	str	r3, [sp, #8]
 8011738:	9b08      	ldr	r3, [sp, #32]
 801173a:	f103 33ff 	add.w	r3, r3, #4294967295
 801173e:	bfa8      	it	ge
 8011740:	1ed4      	subge	r4, r2, #3
 8011742:	9306      	str	r3, [sp, #24]
 8011744:	bfb2      	itee	lt
 8011746:	2400      	movlt	r4, #0
 8011748:	2318      	movge	r3, #24
 801174a:	fb94 f4f3 	sdivge	r4, r4, r3
 801174e:	f06f 0317 	mvn.w	r3, #23
 8011752:	fb04 3303 	mla	r3, r4, r3, r3
 8011756:	eb03 0a02 	add.w	sl, r3, r2
 801175a:	9b02      	ldr	r3, [sp, #8]
 801175c:	9a06      	ldr	r2, [sp, #24]
 801175e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011a30 <__kernel_rem_pio2+0x318>
 8011762:	eb03 0802 	add.w	r8, r3, r2
 8011766:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011768:	1aa7      	subs	r7, r4, r2
 801176a:	ae22      	add	r6, sp, #136	; 0x88
 801176c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011770:	2500      	movs	r5, #0
 8011772:	4545      	cmp	r5, r8
 8011774:	dd13      	ble.n	801179e <__kernel_rem_pio2+0x86>
 8011776:	9b08      	ldr	r3, [sp, #32]
 8011778:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011a30 <__kernel_rem_pio2+0x318>
 801177c:	aa22      	add	r2, sp, #136	; 0x88
 801177e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011782:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011786:	f04f 0800 	mov.w	r8, #0
 801178a:	9b02      	ldr	r3, [sp, #8]
 801178c:	4598      	cmp	r8, r3
 801178e:	dc2f      	bgt.n	80117f0 <__kernel_rem_pio2+0xd8>
 8011790:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011794:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011798:	462f      	mov	r7, r5
 801179a:	2600      	movs	r6, #0
 801179c:	e01b      	b.n	80117d6 <__kernel_rem_pio2+0xbe>
 801179e:	42ef      	cmn	r7, r5
 80117a0:	d407      	bmi.n	80117b2 <__kernel_rem_pio2+0x9a>
 80117a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80117a6:	f7ee fec5 	bl	8000534 <__aeabi_i2d>
 80117aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80117ae:	3501      	adds	r5, #1
 80117b0:	e7df      	b.n	8011772 <__kernel_rem_pio2+0x5a>
 80117b2:	ec51 0b18 	vmov	r0, r1, d8
 80117b6:	e7f8      	b.n	80117aa <__kernel_rem_pio2+0x92>
 80117b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80117c0:	f7ee ff22 	bl	8000608 <__aeabi_dmul>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117cc:	f7ee fd66 	bl	800029c <__adddf3>
 80117d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117d4:	3601      	adds	r6, #1
 80117d6:	9b06      	ldr	r3, [sp, #24]
 80117d8:	429e      	cmp	r6, r3
 80117da:	f1a7 0708 	sub.w	r7, r7, #8
 80117de:	ddeb      	ble.n	80117b8 <__kernel_rem_pio2+0xa0>
 80117e0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80117e4:	f108 0801 	add.w	r8, r8, #1
 80117e8:	ecab 7b02 	vstmia	fp!, {d7}
 80117ec:	3508      	adds	r5, #8
 80117ee:	e7cc      	b.n	801178a <__kernel_rem_pio2+0x72>
 80117f0:	9b02      	ldr	r3, [sp, #8]
 80117f2:	aa0e      	add	r2, sp, #56	; 0x38
 80117f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117f8:	930d      	str	r3, [sp, #52]	; 0x34
 80117fa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80117fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011800:	9c02      	ldr	r4, [sp, #8]
 8011802:	930c      	str	r3, [sp, #48]	; 0x30
 8011804:	00e3      	lsls	r3, r4, #3
 8011806:	930a      	str	r3, [sp, #40]	; 0x28
 8011808:	ab9a      	add	r3, sp, #616	; 0x268
 801180a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801180e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011812:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011816:	ab72      	add	r3, sp, #456	; 0x1c8
 8011818:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801181c:	46c3      	mov	fp, r8
 801181e:	46a1      	mov	r9, r4
 8011820:	f1b9 0f00 	cmp.w	r9, #0
 8011824:	f1a5 0508 	sub.w	r5, r5, #8
 8011828:	dc77      	bgt.n	801191a <__kernel_rem_pio2+0x202>
 801182a:	ec47 6b10 	vmov	d0, r6, r7
 801182e:	4650      	mov	r0, sl
 8011830:	f001 f92a 	bl	8012a88 <scalbn>
 8011834:	ec57 6b10 	vmov	r6, r7, d0
 8011838:	2200      	movs	r2, #0
 801183a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801183e:	ee10 0a10 	vmov	r0, s0
 8011842:	4639      	mov	r1, r7
 8011844:	f7ee fee0 	bl	8000608 <__aeabi_dmul>
 8011848:	ec41 0b10 	vmov	d0, r0, r1
 801184c:	f001 f89c 	bl	8012988 <floor>
 8011850:	4b7c      	ldr	r3, [pc, #496]	; (8011a44 <__kernel_rem_pio2+0x32c>)
 8011852:	ec51 0b10 	vmov	r0, r1, d0
 8011856:	2200      	movs	r2, #0
 8011858:	f7ee fed6 	bl	8000608 <__aeabi_dmul>
 801185c:	4602      	mov	r2, r0
 801185e:	460b      	mov	r3, r1
 8011860:	4630      	mov	r0, r6
 8011862:	4639      	mov	r1, r7
 8011864:	f7ee fd18 	bl	8000298 <__aeabi_dsub>
 8011868:	460f      	mov	r7, r1
 801186a:	4606      	mov	r6, r0
 801186c:	f7ef f97c 	bl	8000b68 <__aeabi_d2iz>
 8011870:	9004      	str	r0, [sp, #16]
 8011872:	f7ee fe5f 	bl	8000534 <__aeabi_i2d>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	4630      	mov	r0, r6
 801187c:	4639      	mov	r1, r7
 801187e:	f7ee fd0b 	bl	8000298 <__aeabi_dsub>
 8011882:	f1ba 0f00 	cmp.w	sl, #0
 8011886:	4606      	mov	r6, r0
 8011888:	460f      	mov	r7, r1
 801188a:	dd6d      	ble.n	8011968 <__kernel_rem_pio2+0x250>
 801188c:	1e62      	subs	r2, r4, #1
 801188e:	ab0e      	add	r3, sp, #56	; 0x38
 8011890:	9d04      	ldr	r5, [sp, #16]
 8011892:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011896:	f1ca 0118 	rsb	r1, sl, #24
 801189a:	fa40 f301 	asr.w	r3, r0, r1
 801189e:	441d      	add	r5, r3
 80118a0:	408b      	lsls	r3, r1
 80118a2:	1ac0      	subs	r0, r0, r3
 80118a4:	ab0e      	add	r3, sp, #56	; 0x38
 80118a6:	9504      	str	r5, [sp, #16]
 80118a8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80118ac:	f1ca 0317 	rsb	r3, sl, #23
 80118b0:	fa40 fb03 	asr.w	fp, r0, r3
 80118b4:	f1bb 0f00 	cmp.w	fp, #0
 80118b8:	dd65      	ble.n	8011986 <__kernel_rem_pio2+0x26e>
 80118ba:	9b04      	ldr	r3, [sp, #16]
 80118bc:	2200      	movs	r2, #0
 80118be:	3301      	adds	r3, #1
 80118c0:	9304      	str	r3, [sp, #16]
 80118c2:	4615      	mov	r5, r2
 80118c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80118c8:	4294      	cmp	r4, r2
 80118ca:	f300 809c 	bgt.w	8011a06 <__kernel_rem_pio2+0x2ee>
 80118ce:	f1ba 0f00 	cmp.w	sl, #0
 80118d2:	dd07      	ble.n	80118e4 <__kernel_rem_pio2+0x1cc>
 80118d4:	f1ba 0f01 	cmp.w	sl, #1
 80118d8:	f000 80c0 	beq.w	8011a5c <__kernel_rem_pio2+0x344>
 80118dc:	f1ba 0f02 	cmp.w	sl, #2
 80118e0:	f000 80c6 	beq.w	8011a70 <__kernel_rem_pio2+0x358>
 80118e4:	f1bb 0f02 	cmp.w	fp, #2
 80118e8:	d14d      	bne.n	8011986 <__kernel_rem_pio2+0x26e>
 80118ea:	4632      	mov	r2, r6
 80118ec:	463b      	mov	r3, r7
 80118ee:	4956      	ldr	r1, [pc, #344]	; (8011a48 <__kernel_rem_pio2+0x330>)
 80118f0:	2000      	movs	r0, #0
 80118f2:	f7ee fcd1 	bl	8000298 <__aeabi_dsub>
 80118f6:	4606      	mov	r6, r0
 80118f8:	460f      	mov	r7, r1
 80118fa:	2d00      	cmp	r5, #0
 80118fc:	d043      	beq.n	8011986 <__kernel_rem_pio2+0x26e>
 80118fe:	4650      	mov	r0, sl
 8011900:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011a38 <__kernel_rem_pio2+0x320>
 8011904:	f001 f8c0 	bl	8012a88 <scalbn>
 8011908:	4630      	mov	r0, r6
 801190a:	4639      	mov	r1, r7
 801190c:	ec53 2b10 	vmov	r2, r3, d0
 8011910:	f7ee fcc2 	bl	8000298 <__aeabi_dsub>
 8011914:	4606      	mov	r6, r0
 8011916:	460f      	mov	r7, r1
 8011918:	e035      	b.n	8011986 <__kernel_rem_pio2+0x26e>
 801191a:	4b4c      	ldr	r3, [pc, #304]	; (8011a4c <__kernel_rem_pio2+0x334>)
 801191c:	2200      	movs	r2, #0
 801191e:	4630      	mov	r0, r6
 8011920:	4639      	mov	r1, r7
 8011922:	f7ee fe71 	bl	8000608 <__aeabi_dmul>
 8011926:	f7ef f91f 	bl	8000b68 <__aeabi_d2iz>
 801192a:	f7ee fe03 	bl	8000534 <__aeabi_i2d>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	ec43 2b18 	vmov	d8, r2, r3
 8011936:	4b46      	ldr	r3, [pc, #280]	; (8011a50 <__kernel_rem_pio2+0x338>)
 8011938:	2200      	movs	r2, #0
 801193a:	f7ee fe65 	bl	8000608 <__aeabi_dmul>
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	4630      	mov	r0, r6
 8011944:	4639      	mov	r1, r7
 8011946:	f7ee fca7 	bl	8000298 <__aeabi_dsub>
 801194a:	f7ef f90d 	bl	8000b68 <__aeabi_d2iz>
 801194e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011952:	f84b 0b04 	str.w	r0, [fp], #4
 8011956:	ec51 0b18 	vmov	r0, r1, d8
 801195a:	f7ee fc9f 	bl	800029c <__adddf3>
 801195e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011962:	4606      	mov	r6, r0
 8011964:	460f      	mov	r7, r1
 8011966:	e75b      	b.n	8011820 <__kernel_rem_pio2+0x108>
 8011968:	d106      	bne.n	8011978 <__kernel_rem_pio2+0x260>
 801196a:	1e63      	subs	r3, r4, #1
 801196c:	aa0e      	add	r2, sp, #56	; 0x38
 801196e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011972:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011976:	e79d      	b.n	80118b4 <__kernel_rem_pio2+0x19c>
 8011978:	4b36      	ldr	r3, [pc, #216]	; (8011a54 <__kernel_rem_pio2+0x33c>)
 801197a:	2200      	movs	r2, #0
 801197c:	f7ef f8ca 	bl	8000b14 <__aeabi_dcmpge>
 8011980:	2800      	cmp	r0, #0
 8011982:	d13d      	bne.n	8011a00 <__kernel_rem_pio2+0x2e8>
 8011984:	4683      	mov	fp, r0
 8011986:	2200      	movs	r2, #0
 8011988:	2300      	movs	r3, #0
 801198a:	4630      	mov	r0, r6
 801198c:	4639      	mov	r1, r7
 801198e:	f7ef f8a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8011992:	2800      	cmp	r0, #0
 8011994:	f000 80c0 	beq.w	8011b18 <__kernel_rem_pio2+0x400>
 8011998:	1e65      	subs	r5, r4, #1
 801199a:	462b      	mov	r3, r5
 801199c:	2200      	movs	r2, #0
 801199e:	9902      	ldr	r1, [sp, #8]
 80119a0:	428b      	cmp	r3, r1
 80119a2:	da6c      	bge.n	8011a7e <__kernel_rem_pio2+0x366>
 80119a4:	2a00      	cmp	r2, #0
 80119a6:	f000 8089 	beq.w	8011abc <__kernel_rem_pio2+0x3a4>
 80119aa:	ab0e      	add	r3, sp, #56	; 0x38
 80119ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80119b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f000 80ad 	beq.w	8011b14 <__kernel_rem_pio2+0x3fc>
 80119ba:	4650      	mov	r0, sl
 80119bc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011a38 <__kernel_rem_pio2+0x320>
 80119c0:	f001 f862 	bl	8012a88 <scalbn>
 80119c4:	ab9a      	add	r3, sp, #616	; 0x268
 80119c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80119ca:	ec57 6b10 	vmov	r6, r7, d0
 80119ce:	00ec      	lsls	r4, r5, #3
 80119d0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80119d4:	46aa      	mov	sl, r5
 80119d6:	f1ba 0f00 	cmp.w	sl, #0
 80119da:	f280 80d6 	bge.w	8011b8a <__kernel_rem_pio2+0x472>
 80119de:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011a30 <__kernel_rem_pio2+0x318>
 80119e2:	462e      	mov	r6, r5
 80119e4:	2e00      	cmp	r6, #0
 80119e6:	f2c0 8104 	blt.w	8011bf2 <__kernel_rem_pio2+0x4da>
 80119ea:	ab72      	add	r3, sp, #456	; 0x1c8
 80119ec:	ed8d 8b06 	vstr	d8, [sp, #24]
 80119f0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011a58 <__kernel_rem_pio2+0x340>
 80119f4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80119f8:	f04f 0800 	mov.w	r8, #0
 80119fc:	1baf      	subs	r7, r5, r6
 80119fe:	e0ea      	b.n	8011bd6 <__kernel_rem_pio2+0x4be>
 8011a00:	f04f 0b02 	mov.w	fp, #2
 8011a04:	e759      	b.n	80118ba <__kernel_rem_pio2+0x1a2>
 8011a06:	f8d8 3000 	ldr.w	r3, [r8]
 8011a0a:	b955      	cbnz	r5, 8011a22 <__kernel_rem_pio2+0x30a>
 8011a0c:	b123      	cbz	r3, 8011a18 <__kernel_rem_pio2+0x300>
 8011a0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011a12:	f8c8 3000 	str.w	r3, [r8]
 8011a16:	2301      	movs	r3, #1
 8011a18:	3201      	adds	r2, #1
 8011a1a:	f108 0804 	add.w	r8, r8, #4
 8011a1e:	461d      	mov	r5, r3
 8011a20:	e752      	b.n	80118c8 <__kernel_rem_pio2+0x1b0>
 8011a22:	1acb      	subs	r3, r1, r3
 8011a24:	f8c8 3000 	str.w	r3, [r8]
 8011a28:	462b      	mov	r3, r5
 8011a2a:	e7f5      	b.n	8011a18 <__kernel_rem_pio2+0x300>
 8011a2c:	f3af 8000 	nop.w
	...
 8011a3c:	3ff00000 	.word	0x3ff00000
 8011a40:	080137b8 	.word	0x080137b8
 8011a44:	40200000 	.word	0x40200000
 8011a48:	3ff00000 	.word	0x3ff00000
 8011a4c:	3e700000 	.word	0x3e700000
 8011a50:	41700000 	.word	0x41700000
 8011a54:	3fe00000 	.word	0x3fe00000
 8011a58:	08013778 	.word	0x08013778
 8011a5c:	1e62      	subs	r2, r4, #1
 8011a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8011a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a68:	a90e      	add	r1, sp, #56	; 0x38
 8011a6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011a6e:	e739      	b.n	80118e4 <__kernel_rem_pio2+0x1cc>
 8011a70:	1e62      	subs	r2, r4, #1
 8011a72:	ab0e      	add	r3, sp, #56	; 0x38
 8011a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011a7c:	e7f4      	b.n	8011a68 <__kernel_rem_pio2+0x350>
 8011a7e:	a90e      	add	r1, sp, #56	; 0x38
 8011a80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011a84:	3b01      	subs	r3, #1
 8011a86:	430a      	orrs	r2, r1
 8011a88:	e789      	b.n	801199e <__kernel_rem_pio2+0x286>
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011a90:	2900      	cmp	r1, #0
 8011a92:	d0fa      	beq.n	8011a8a <__kernel_rem_pio2+0x372>
 8011a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a96:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011a9a:	446a      	add	r2, sp
 8011a9c:	3a98      	subs	r2, #152	; 0x98
 8011a9e:	920a      	str	r2, [sp, #40]	; 0x28
 8011aa0:	9a08      	ldr	r2, [sp, #32]
 8011aa2:	18e3      	adds	r3, r4, r3
 8011aa4:	18a5      	adds	r5, r4, r2
 8011aa6:	aa22      	add	r2, sp, #136	; 0x88
 8011aa8:	f104 0801 	add.w	r8, r4, #1
 8011aac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011ab0:	9304      	str	r3, [sp, #16]
 8011ab2:	9b04      	ldr	r3, [sp, #16]
 8011ab4:	4543      	cmp	r3, r8
 8011ab6:	da04      	bge.n	8011ac2 <__kernel_rem_pio2+0x3aa>
 8011ab8:	461c      	mov	r4, r3
 8011aba:	e6a3      	b.n	8011804 <__kernel_rem_pio2+0xec>
 8011abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011abe:	2301      	movs	r3, #1
 8011ac0:	e7e4      	b.n	8011a8c <__kernel_rem_pio2+0x374>
 8011ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ac4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011ac8:	f7ee fd34 	bl	8000534 <__aeabi_i2d>
 8011acc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ad2:	46ab      	mov	fp, r5
 8011ad4:	461c      	mov	r4, r3
 8011ad6:	f04f 0900 	mov.w	r9, #0
 8011ada:	2600      	movs	r6, #0
 8011adc:	2700      	movs	r7, #0
 8011ade:	9b06      	ldr	r3, [sp, #24]
 8011ae0:	4599      	cmp	r9, r3
 8011ae2:	dd06      	ble.n	8011af2 <__kernel_rem_pio2+0x3da>
 8011ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ae6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011aea:	f108 0801 	add.w	r8, r8, #1
 8011aee:	930a      	str	r3, [sp, #40]	; 0x28
 8011af0:	e7df      	b.n	8011ab2 <__kernel_rem_pio2+0x39a>
 8011af2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011af6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011afa:	f7ee fd85 	bl	8000608 <__aeabi_dmul>
 8011afe:	4602      	mov	r2, r0
 8011b00:	460b      	mov	r3, r1
 8011b02:	4630      	mov	r0, r6
 8011b04:	4639      	mov	r1, r7
 8011b06:	f7ee fbc9 	bl	800029c <__adddf3>
 8011b0a:	f109 0901 	add.w	r9, r9, #1
 8011b0e:	4606      	mov	r6, r0
 8011b10:	460f      	mov	r7, r1
 8011b12:	e7e4      	b.n	8011ade <__kernel_rem_pio2+0x3c6>
 8011b14:	3d01      	subs	r5, #1
 8011b16:	e748      	b.n	80119aa <__kernel_rem_pio2+0x292>
 8011b18:	ec47 6b10 	vmov	d0, r6, r7
 8011b1c:	f1ca 0000 	rsb	r0, sl, #0
 8011b20:	f000 ffb2 	bl	8012a88 <scalbn>
 8011b24:	ec57 6b10 	vmov	r6, r7, d0
 8011b28:	4ba0      	ldr	r3, [pc, #640]	; (8011dac <__kernel_rem_pio2+0x694>)
 8011b2a:	ee10 0a10 	vmov	r0, s0
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ee ffef 	bl	8000b14 <__aeabi_dcmpge>
 8011b36:	b1f8      	cbz	r0, 8011b78 <__kernel_rem_pio2+0x460>
 8011b38:	4b9d      	ldr	r3, [pc, #628]	; (8011db0 <__kernel_rem_pio2+0x698>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	4639      	mov	r1, r7
 8011b40:	f7ee fd62 	bl	8000608 <__aeabi_dmul>
 8011b44:	f7ef f810 	bl	8000b68 <__aeabi_d2iz>
 8011b48:	4680      	mov	r8, r0
 8011b4a:	f7ee fcf3 	bl	8000534 <__aeabi_i2d>
 8011b4e:	4b97      	ldr	r3, [pc, #604]	; (8011dac <__kernel_rem_pio2+0x694>)
 8011b50:	2200      	movs	r2, #0
 8011b52:	f7ee fd59 	bl	8000608 <__aeabi_dmul>
 8011b56:	460b      	mov	r3, r1
 8011b58:	4602      	mov	r2, r0
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	4630      	mov	r0, r6
 8011b5e:	f7ee fb9b 	bl	8000298 <__aeabi_dsub>
 8011b62:	f7ef f801 	bl	8000b68 <__aeabi_d2iz>
 8011b66:	1c65      	adds	r5, r4, #1
 8011b68:	ab0e      	add	r3, sp, #56	; 0x38
 8011b6a:	f10a 0a18 	add.w	sl, sl, #24
 8011b6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011b72:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011b76:	e720      	b.n	80119ba <__kernel_rem_pio2+0x2a2>
 8011b78:	4630      	mov	r0, r6
 8011b7a:	4639      	mov	r1, r7
 8011b7c:	f7ee fff4 	bl	8000b68 <__aeabi_d2iz>
 8011b80:	ab0e      	add	r3, sp, #56	; 0x38
 8011b82:	4625      	mov	r5, r4
 8011b84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011b88:	e717      	b.n	80119ba <__kernel_rem_pio2+0x2a2>
 8011b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011b90:	f7ee fcd0 	bl	8000534 <__aeabi_i2d>
 8011b94:	4632      	mov	r2, r6
 8011b96:	463b      	mov	r3, r7
 8011b98:	f7ee fd36 	bl	8000608 <__aeabi_dmul>
 8011b9c:	4b84      	ldr	r3, [pc, #528]	; (8011db0 <__kernel_rem_pio2+0x698>)
 8011b9e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	f7ee fd2e 	bl	8000608 <__aeabi_dmul>
 8011bac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	460f      	mov	r7, r1
 8011bb4:	e70f      	b.n	80119d6 <__kernel_rem_pio2+0x2be>
 8011bb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011bba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011bbe:	f7ee fd23 	bl	8000608 <__aeabi_dmul>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bca:	f7ee fb67 	bl	800029c <__adddf3>
 8011bce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011bd2:	f108 0801 	add.w	r8, r8, #1
 8011bd6:	9b02      	ldr	r3, [sp, #8]
 8011bd8:	4598      	cmp	r8, r3
 8011bda:	dc01      	bgt.n	8011be0 <__kernel_rem_pio2+0x4c8>
 8011bdc:	45b8      	cmp	r8, r7
 8011bde:	ddea      	ble.n	8011bb6 <__kernel_rem_pio2+0x49e>
 8011be0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011be4:	ab4a      	add	r3, sp, #296	; 0x128
 8011be6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011bea:	ed87 7b00 	vstr	d7, [r7]
 8011bee:	3e01      	subs	r6, #1
 8011bf0:	e6f8      	b.n	80119e4 <__kernel_rem_pio2+0x2cc>
 8011bf2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	dc0b      	bgt.n	8011c10 <__kernel_rem_pio2+0x4f8>
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	dc35      	bgt.n	8011c68 <__kernel_rem_pio2+0x550>
 8011bfc:	d059      	beq.n	8011cb2 <__kernel_rem_pio2+0x59a>
 8011bfe:	9b04      	ldr	r3, [sp, #16]
 8011c00:	f003 0007 	and.w	r0, r3, #7
 8011c04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011c08:	ecbd 8b02 	vpop	{d8}
 8011c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011c12:	2b03      	cmp	r3, #3
 8011c14:	d1f3      	bne.n	8011bfe <__kernel_rem_pio2+0x4e6>
 8011c16:	ab4a      	add	r3, sp, #296	; 0x128
 8011c18:	4423      	add	r3, r4
 8011c1a:	9306      	str	r3, [sp, #24]
 8011c1c:	461c      	mov	r4, r3
 8011c1e:	469a      	mov	sl, r3
 8011c20:	9502      	str	r5, [sp, #8]
 8011c22:	9b02      	ldr	r3, [sp, #8]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	f1aa 0a08 	sub.w	sl, sl, #8
 8011c2a:	dc6b      	bgt.n	8011d04 <__kernel_rem_pio2+0x5ec>
 8011c2c:	46aa      	mov	sl, r5
 8011c2e:	f1ba 0f01 	cmp.w	sl, #1
 8011c32:	f1a4 0408 	sub.w	r4, r4, #8
 8011c36:	f300 8085 	bgt.w	8011d44 <__kernel_rem_pio2+0x62c>
 8011c3a:	9c06      	ldr	r4, [sp, #24]
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	3408      	adds	r4, #8
 8011c40:	2100      	movs	r1, #0
 8011c42:	2d01      	cmp	r5, #1
 8011c44:	f300 809d 	bgt.w	8011d82 <__kernel_rem_pio2+0x66a>
 8011c48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011c4c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011c50:	f1bb 0f00 	cmp.w	fp, #0
 8011c54:	f040 809b 	bne.w	8011d8e <__kernel_rem_pio2+0x676>
 8011c58:	9b01      	ldr	r3, [sp, #4]
 8011c5a:	e9c3 5600 	strd	r5, r6, [r3]
 8011c5e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011c62:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011c66:	e7ca      	b.n	8011bfe <__kernel_rem_pio2+0x4e6>
 8011c68:	3408      	adds	r4, #8
 8011c6a:	ab4a      	add	r3, sp, #296	; 0x128
 8011c6c:	441c      	add	r4, r3
 8011c6e:	462e      	mov	r6, r5
 8011c70:	2000      	movs	r0, #0
 8011c72:	2100      	movs	r1, #0
 8011c74:	2e00      	cmp	r6, #0
 8011c76:	da36      	bge.n	8011ce6 <__kernel_rem_pio2+0x5ce>
 8011c78:	f1bb 0f00 	cmp.w	fp, #0
 8011c7c:	d039      	beq.n	8011cf2 <__kernel_rem_pio2+0x5da>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c84:	9c01      	ldr	r4, [sp, #4]
 8011c86:	e9c4 2300 	strd	r2, r3, [r4]
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011c92:	f7ee fb01 	bl	8000298 <__aeabi_dsub>
 8011c96:	ae4c      	add	r6, sp, #304	; 0x130
 8011c98:	2401      	movs	r4, #1
 8011c9a:	42a5      	cmp	r5, r4
 8011c9c:	da2c      	bge.n	8011cf8 <__kernel_rem_pio2+0x5e0>
 8011c9e:	f1bb 0f00 	cmp.w	fp, #0
 8011ca2:	d002      	beq.n	8011caa <__kernel_rem_pio2+0x592>
 8011ca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ca8:	4619      	mov	r1, r3
 8011caa:	9b01      	ldr	r3, [sp, #4]
 8011cac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011cb0:	e7a5      	b.n	8011bfe <__kernel_rem_pio2+0x4e6>
 8011cb2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011cb6:	eb0d 0403 	add.w	r4, sp, r3
 8011cba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	2d00      	cmp	r5, #0
 8011cc4:	da09      	bge.n	8011cda <__kernel_rem_pio2+0x5c2>
 8011cc6:	f1bb 0f00 	cmp.w	fp, #0
 8011cca:	d002      	beq.n	8011cd2 <__kernel_rem_pio2+0x5ba>
 8011ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	9b01      	ldr	r3, [sp, #4]
 8011cd4:	e9c3 0100 	strd	r0, r1, [r3]
 8011cd8:	e791      	b.n	8011bfe <__kernel_rem_pio2+0x4e6>
 8011cda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011cde:	f7ee fadd 	bl	800029c <__adddf3>
 8011ce2:	3d01      	subs	r5, #1
 8011ce4:	e7ed      	b.n	8011cc2 <__kernel_rem_pio2+0x5aa>
 8011ce6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011cea:	f7ee fad7 	bl	800029c <__adddf3>
 8011cee:	3e01      	subs	r6, #1
 8011cf0:	e7c0      	b.n	8011c74 <__kernel_rem_pio2+0x55c>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	e7c5      	b.n	8011c84 <__kernel_rem_pio2+0x56c>
 8011cf8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011cfc:	f7ee face 	bl	800029c <__adddf3>
 8011d00:	3401      	adds	r4, #1
 8011d02:	e7ca      	b.n	8011c9a <__kernel_rem_pio2+0x582>
 8011d04:	e9da 8900 	ldrd	r8, r9, [sl]
 8011d08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011d0c:	9b02      	ldr	r3, [sp, #8]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	9302      	str	r3, [sp, #8]
 8011d12:	4632      	mov	r2, r6
 8011d14:	463b      	mov	r3, r7
 8011d16:	4640      	mov	r0, r8
 8011d18:	4649      	mov	r1, r9
 8011d1a:	f7ee fabf 	bl	800029c <__adddf3>
 8011d1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4640      	mov	r0, r8
 8011d28:	4649      	mov	r1, r9
 8011d2a:	f7ee fab5 	bl	8000298 <__aeabi_dsub>
 8011d2e:	4632      	mov	r2, r6
 8011d30:	463b      	mov	r3, r7
 8011d32:	f7ee fab3 	bl	800029c <__adddf3>
 8011d36:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011d3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011d3e:	ed8a 7b00 	vstr	d7, [sl]
 8011d42:	e76e      	b.n	8011c22 <__kernel_rem_pio2+0x50a>
 8011d44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011d48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	4632      	mov	r2, r6
 8011d50:	463b      	mov	r3, r7
 8011d52:	4649      	mov	r1, r9
 8011d54:	f7ee faa2 	bl	800029c <__adddf3>
 8011d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	4640      	mov	r0, r8
 8011d62:	4649      	mov	r1, r9
 8011d64:	f7ee fa98 	bl	8000298 <__aeabi_dsub>
 8011d68:	4632      	mov	r2, r6
 8011d6a:	463b      	mov	r3, r7
 8011d6c:	f7ee fa96 	bl	800029c <__adddf3>
 8011d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d78:	ed84 7b00 	vstr	d7, [r4]
 8011d7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d80:	e755      	b.n	8011c2e <__kernel_rem_pio2+0x516>
 8011d82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d86:	f7ee fa89 	bl	800029c <__adddf3>
 8011d8a:	3d01      	subs	r5, #1
 8011d8c:	e759      	b.n	8011c42 <__kernel_rem_pio2+0x52a>
 8011d8e:	9b01      	ldr	r3, [sp, #4]
 8011d90:	9a01      	ldr	r2, [sp, #4]
 8011d92:	601d      	str	r5, [r3, #0]
 8011d94:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011d98:	605c      	str	r4, [r3, #4]
 8011d9a:	609f      	str	r7, [r3, #8]
 8011d9c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011da0:	60d3      	str	r3, [r2, #12]
 8011da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011da6:	6110      	str	r0, [r2, #16]
 8011da8:	6153      	str	r3, [r2, #20]
 8011daa:	e728      	b.n	8011bfe <__kernel_rem_pio2+0x4e6>
 8011dac:	41700000 	.word	0x41700000
 8011db0:	3e700000 	.word	0x3e700000
 8011db4:	00000000 	.word	0x00000000

08011db8 <__kernel_sin>:
 8011db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dbc:	ed2d 8b04 	vpush	{d8-d9}
 8011dc0:	eeb0 8a41 	vmov.f32	s16, s2
 8011dc4:	eef0 8a61 	vmov.f32	s17, s3
 8011dc8:	ec55 4b10 	vmov	r4, r5, d0
 8011dcc:	b083      	sub	sp, #12
 8011dce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011dd2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011dd6:	9001      	str	r0, [sp, #4]
 8011dd8:	da06      	bge.n	8011de8 <__kernel_sin+0x30>
 8011dda:	ee10 0a10 	vmov	r0, s0
 8011dde:	4629      	mov	r1, r5
 8011de0:	f7ee fec2 	bl	8000b68 <__aeabi_d2iz>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d051      	beq.n	8011e8c <__kernel_sin+0xd4>
 8011de8:	4622      	mov	r2, r4
 8011dea:	462b      	mov	r3, r5
 8011dec:	4620      	mov	r0, r4
 8011dee:	4629      	mov	r1, r5
 8011df0:	f7ee fc0a 	bl	8000608 <__aeabi_dmul>
 8011df4:	4682      	mov	sl, r0
 8011df6:	468b      	mov	fp, r1
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	4629      	mov	r1, r5
 8011e00:	f7ee fc02 	bl	8000608 <__aeabi_dmul>
 8011e04:	a341      	add	r3, pc, #260	; (adr r3, 8011f0c <__kernel_sin+0x154>)
 8011e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0a:	4680      	mov	r8, r0
 8011e0c:	4689      	mov	r9, r1
 8011e0e:	4650      	mov	r0, sl
 8011e10:	4659      	mov	r1, fp
 8011e12:	f7ee fbf9 	bl	8000608 <__aeabi_dmul>
 8011e16:	a33f      	add	r3, pc, #252	; (adr r3, 8011f14 <__kernel_sin+0x15c>)
 8011e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1c:	f7ee fa3c 	bl	8000298 <__aeabi_dsub>
 8011e20:	4652      	mov	r2, sl
 8011e22:	465b      	mov	r3, fp
 8011e24:	f7ee fbf0 	bl	8000608 <__aeabi_dmul>
 8011e28:	a33c      	add	r3, pc, #240	; (adr r3, 8011f1c <__kernel_sin+0x164>)
 8011e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2e:	f7ee fa35 	bl	800029c <__adddf3>
 8011e32:	4652      	mov	r2, sl
 8011e34:	465b      	mov	r3, fp
 8011e36:	f7ee fbe7 	bl	8000608 <__aeabi_dmul>
 8011e3a:	a33a      	add	r3, pc, #232	; (adr r3, 8011f24 <__kernel_sin+0x16c>)
 8011e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e40:	f7ee fa2a 	bl	8000298 <__aeabi_dsub>
 8011e44:	4652      	mov	r2, sl
 8011e46:	465b      	mov	r3, fp
 8011e48:	f7ee fbde 	bl	8000608 <__aeabi_dmul>
 8011e4c:	a337      	add	r3, pc, #220	; (adr r3, 8011f2c <__kernel_sin+0x174>)
 8011e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e52:	f7ee fa23 	bl	800029c <__adddf3>
 8011e56:	9b01      	ldr	r3, [sp, #4]
 8011e58:	4606      	mov	r6, r0
 8011e5a:	460f      	mov	r7, r1
 8011e5c:	b9eb      	cbnz	r3, 8011e9a <__kernel_sin+0xe2>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	460b      	mov	r3, r1
 8011e62:	4650      	mov	r0, sl
 8011e64:	4659      	mov	r1, fp
 8011e66:	f7ee fbcf 	bl	8000608 <__aeabi_dmul>
 8011e6a:	a325      	add	r3, pc, #148	; (adr r3, 8011f00 <__kernel_sin+0x148>)
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	f7ee fa12 	bl	8000298 <__aeabi_dsub>
 8011e74:	4642      	mov	r2, r8
 8011e76:	464b      	mov	r3, r9
 8011e78:	f7ee fbc6 	bl	8000608 <__aeabi_dmul>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	460b      	mov	r3, r1
 8011e80:	4620      	mov	r0, r4
 8011e82:	4629      	mov	r1, r5
 8011e84:	f7ee fa0a 	bl	800029c <__adddf3>
 8011e88:	4604      	mov	r4, r0
 8011e8a:	460d      	mov	r5, r1
 8011e8c:	ec45 4b10 	vmov	d0, r4, r5
 8011e90:	b003      	add	sp, #12
 8011e92:	ecbd 8b04 	vpop	{d8-d9}
 8011e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e9a:	4b1b      	ldr	r3, [pc, #108]	; (8011f08 <__kernel_sin+0x150>)
 8011e9c:	ec51 0b18 	vmov	r0, r1, d8
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	f7ee fbb1 	bl	8000608 <__aeabi_dmul>
 8011ea6:	4632      	mov	r2, r6
 8011ea8:	ec41 0b19 	vmov	d9, r0, r1
 8011eac:	463b      	mov	r3, r7
 8011eae:	4640      	mov	r0, r8
 8011eb0:	4649      	mov	r1, r9
 8011eb2:	f7ee fba9 	bl	8000608 <__aeabi_dmul>
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	460b      	mov	r3, r1
 8011eba:	ec51 0b19 	vmov	r0, r1, d9
 8011ebe:	f7ee f9eb 	bl	8000298 <__aeabi_dsub>
 8011ec2:	4652      	mov	r2, sl
 8011ec4:	465b      	mov	r3, fp
 8011ec6:	f7ee fb9f 	bl	8000608 <__aeabi_dmul>
 8011eca:	ec53 2b18 	vmov	r2, r3, d8
 8011ece:	f7ee f9e3 	bl	8000298 <__aeabi_dsub>
 8011ed2:	a30b      	add	r3, pc, #44	; (adr r3, 8011f00 <__kernel_sin+0x148>)
 8011ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed8:	4606      	mov	r6, r0
 8011eda:	460f      	mov	r7, r1
 8011edc:	4640      	mov	r0, r8
 8011ede:	4649      	mov	r1, r9
 8011ee0:	f7ee fb92 	bl	8000608 <__aeabi_dmul>
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	4630      	mov	r0, r6
 8011eea:	4639      	mov	r1, r7
 8011eec:	f7ee f9d6 	bl	800029c <__adddf3>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	460b      	mov	r3, r1
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee f9ce 	bl	8000298 <__aeabi_dsub>
 8011efc:	e7c4      	b.n	8011e88 <__kernel_sin+0xd0>
 8011efe:	bf00      	nop
 8011f00:	55555549 	.word	0x55555549
 8011f04:	3fc55555 	.word	0x3fc55555
 8011f08:	3fe00000 	.word	0x3fe00000
 8011f0c:	5acfd57c 	.word	0x5acfd57c
 8011f10:	3de5d93a 	.word	0x3de5d93a
 8011f14:	8a2b9ceb 	.word	0x8a2b9ceb
 8011f18:	3e5ae5e6 	.word	0x3e5ae5e6
 8011f1c:	57b1fe7d 	.word	0x57b1fe7d
 8011f20:	3ec71de3 	.word	0x3ec71de3
 8011f24:	19c161d5 	.word	0x19c161d5
 8011f28:	3f2a01a0 	.word	0x3f2a01a0
 8011f2c:	1110f8a6 	.word	0x1110f8a6
 8011f30:	3f811111 	.word	0x3f811111
 8011f34:	00000000 	.word	0x00000000

08011f38 <__kernel_tan>:
 8011f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	ed2d 8b06 	vpush	{d8-d10}
 8011f40:	ec5b ab10 	vmov	sl, fp, d0
 8011f44:	4be0      	ldr	r3, [pc, #896]	; (80122c8 <__kernel_tan+0x390>)
 8011f46:	b083      	sub	sp, #12
 8011f48:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8011f4c:	429f      	cmp	r7, r3
 8011f4e:	ec59 8b11 	vmov	r8, r9, d1
 8011f52:	4606      	mov	r6, r0
 8011f54:	f8cd b000 	str.w	fp, [sp]
 8011f58:	dc61      	bgt.n	801201e <__kernel_tan+0xe6>
 8011f5a:	ee10 0a10 	vmov	r0, s0
 8011f5e:	4659      	mov	r1, fp
 8011f60:	f7ee fe02 	bl	8000b68 <__aeabi_d2iz>
 8011f64:	4605      	mov	r5, r0
 8011f66:	2800      	cmp	r0, #0
 8011f68:	f040 8083 	bne.w	8012072 <__kernel_tan+0x13a>
 8011f6c:	1c73      	adds	r3, r6, #1
 8011f6e:	4652      	mov	r2, sl
 8011f70:	4313      	orrs	r3, r2
 8011f72:	433b      	orrs	r3, r7
 8011f74:	d112      	bne.n	8011f9c <__kernel_tan+0x64>
 8011f76:	ec4b ab10 	vmov	d0, sl, fp
 8011f7a:	f7fe fd5d 	bl	8010a38 <fabs>
 8011f7e:	49d3      	ldr	r1, [pc, #844]	; (80122cc <__kernel_tan+0x394>)
 8011f80:	ec53 2b10 	vmov	r2, r3, d0
 8011f84:	2000      	movs	r0, #0
 8011f86:	f7ee fc69 	bl	800085c <__aeabi_ddiv>
 8011f8a:	4682      	mov	sl, r0
 8011f8c:	468b      	mov	fp, r1
 8011f8e:	ec4b ab10 	vmov	d0, sl, fp
 8011f92:	b003      	add	sp, #12
 8011f94:	ecbd 8b06 	vpop	{d8-d10}
 8011f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9c:	2e01      	cmp	r6, #1
 8011f9e:	d0f6      	beq.n	8011f8e <__kernel_tan+0x56>
 8011fa0:	4642      	mov	r2, r8
 8011fa2:	464b      	mov	r3, r9
 8011fa4:	4650      	mov	r0, sl
 8011fa6:	4659      	mov	r1, fp
 8011fa8:	f7ee f978 	bl	800029c <__adddf3>
 8011fac:	4602      	mov	r2, r0
 8011fae:	460b      	mov	r3, r1
 8011fb0:	460f      	mov	r7, r1
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	49c6      	ldr	r1, [pc, #792]	; (80122d0 <__kernel_tan+0x398>)
 8011fb6:	f7ee fc51 	bl	800085c <__aeabi_ddiv>
 8011fba:	e9cd 0100 	strd	r0, r1, [sp]
 8011fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fc2:	462e      	mov	r6, r5
 8011fc4:	4652      	mov	r2, sl
 8011fc6:	462c      	mov	r4, r5
 8011fc8:	4630      	mov	r0, r6
 8011fca:	461d      	mov	r5, r3
 8011fcc:	4639      	mov	r1, r7
 8011fce:	465b      	mov	r3, fp
 8011fd0:	f7ee f962 	bl	8000298 <__aeabi_dsub>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	4640      	mov	r0, r8
 8011fda:	4649      	mov	r1, r9
 8011fdc:	f7ee f95c 	bl	8000298 <__aeabi_dsub>
 8011fe0:	4632      	mov	r2, r6
 8011fe2:	462b      	mov	r3, r5
 8011fe4:	f7ee fb10 	bl	8000608 <__aeabi_dmul>
 8011fe8:	4632      	mov	r2, r6
 8011fea:	4680      	mov	r8, r0
 8011fec:	4689      	mov	r9, r1
 8011fee:	462b      	mov	r3, r5
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7ee fb08 	bl	8000608 <__aeabi_dmul>
 8011ff8:	4bb4      	ldr	r3, [pc, #720]	; (80122cc <__kernel_tan+0x394>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f7ee f94e 	bl	800029c <__adddf3>
 8012000:	4602      	mov	r2, r0
 8012002:	460b      	mov	r3, r1
 8012004:	4640      	mov	r0, r8
 8012006:	4649      	mov	r1, r9
 8012008:	f7ee f948 	bl	800029c <__adddf3>
 801200c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012010:	f7ee fafa 	bl	8000608 <__aeabi_dmul>
 8012014:	4622      	mov	r2, r4
 8012016:	462b      	mov	r3, r5
 8012018:	f7ee f940 	bl	800029c <__adddf3>
 801201c:	e7b5      	b.n	8011f8a <__kernel_tan+0x52>
 801201e:	4bad      	ldr	r3, [pc, #692]	; (80122d4 <__kernel_tan+0x39c>)
 8012020:	429f      	cmp	r7, r3
 8012022:	dd26      	ble.n	8012072 <__kernel_tan+0x13a>
 8012024:	9b00      	ldr	r3, [sp, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	da09      	bge.n	801203e <__kernel_tan+0x106>
 801202a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801202e:	469b      	mov	fp, r3
 8012030:	ee10 aa10 	vmov	sl, s0
 8012034:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012038:	ee11 8a10 	vmov	r8, s2
 801203c:	4699      	mov	r9, r3
 801203e:	4652      	mov	r2, sl
 8012040:	465b      	mov	r3, fp
 8012042:	a183      	add	r1, pc, #524	; (adr r1, 8012250 <__kernel_tan+0x318>)
 8012044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012048:	f7ee f926 	bl	8000298 <__aeabi_dsub>
 801204c:	4642      	mov	r2, r8
 801204e:	464b      	mov	r3, r9
 8012050:	4604      	mov	r4, r0
 8012052:	460d      	mov	r5, r1
 8012054:	a180      	add	r1, pc, #512	; (adr r1, 8012258 <__kernel_tan+0x320>)
 8012056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801205a:	f7ee f91d 	bl	8000298 <__aeabi_dsub>
 801205e:	4622      	mov	r2, r4
 8012060:	462b      	mov	r3, r5
 8012062:	f7ee f91b 	bl	800029c <__adddf3>
 8012066:	f04f 0800 	mov.w	r8, #0
 801206a:	4682      	mov	sl, r0
 801206c:	468b      	mov	fp, r1
 801206e:	f04f 0900 	mov.w	r9, #0
 8012072:	4652      	mov	r2, sl
 8012074:	465b      	mov	r3, fp
 8012076:	4650      	mov	r0, sl
 8012078:	4659      	mov	r1, fp
 801207a:	f7ee fac5 	bl	8000608 <__aeabi_dmul>
 801207e:	4602      	mov	r2, r0
 8012080:	460b      	mov	r3, r1
 8012082:	ec43 2b18 	vmov	d8, r2, r3
 8012086:	f7ee fabf 	bl	8000608 <__aeabi_dmul>
 801208a:	ec53 2b18 	vmov	r2, r3, d8
 801208e:	4604      	mov	r4, r0
 8012090:	460d      	mov	r5, r1
 8012092:	4650      	mov	r0, sl
 8012094:	4659      	mov	r1, fp
 8012096:	f7ee fab7 	bl	8000608 <__aeabi_dmul>
 801209a:	a371      	add	r3, pc, #452	; (adr r3, 8012260 <__kernel_tan+0x328>)
 801209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a0:	ec41 0b19 	vmov	d9, r0, r1
 80120a4:	4620      	mov	r0, r4
 80120a6:	4629      	mov	r1, r5
 80120a8:	f7ee faae 	bl	8000608 <__aeabi_dmul>
 80120ac:	a36e      	add	r3, pc, #440	; (adr r3, 8012268 <__kernel_tan+0x330>)
 80120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b2:	f7ee f8f3 	bl	800029c <__adddf3>
 80120b6:	4622      	mov	r2, r4
 80120b8:	462b      	mov	r3, r5
 80120ba:	f7ee faa5 	bl	8000608 <__aeabi_dmul>
 80120be:	a36c      	add	r3, pc, #432	; (adr r3, 8012270 <__kernel_tan+0x338>)
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	f7ee f8ea 	bl	800029c <__adddf3>
 80120c8:	4622      	mov	r2, r4
 80120ca:	462b      	mov	r3, r5
 80120cc:	f7ee fa9c 	bl	8000608 <__aeabi_dmul>
 80120d0:	a369      	add	r3, pc, #420	; (adr r3, 8012278 <__kernel_tan+0x340>)
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	f7ee f8e1 	bl	800029c <__adddf3>
 80120da:	4622      	mov	r2, r4
 80120dc:	462b      	mov	r3, r5
 80120de:	f7ee fa93 	bl	8000608 <__aeabi_dmul>
 80120e2:	a367      	add	r3, pc, #412	; (adr r3, 8012280 <__kernel_tan+0x348>)
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	f7ee f8d8 	bl	800029c <__adddf3>
 80120ec:	4622      	mov	r2, r4
 80120ee:	462b      	mov	r3, r5
 80120f0:	f7ee fa8a 	bl	8000608 <__aeabi_dmul>
 80120f4:	a364      	add	r3, pc, #400	; (adr r3, 8012288 <__kernel_tan+0x350>)
 80120f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fa:	f7ee f8cf 	bl	800029c <__adddf3>
 80120fe:	ec53 2b18 	vmov	r2, r3, d8
 8012102:	f7ee fa81 	bl	8000608 <__aeabi_dmul>
 8012106:	a362      	add	r3, pc, #392	; (adr r3, 8012290 <__kernel_tan+0x358>)
 8012108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210c:	ec41 0b1a 	vmov	d10, r0, r1
 8012110:	4620      	mov	r0, r4
 8012112:	4629      	mov	r1, r5
 8012114:	f7ee fa78 	bl	8000608 <__aeabi_dmul>
 8012118:	a35f      	add	r3, pc, #380	; (adr r3, 8012298 <__kernel_tan+0x360>)
 801211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211e:	f7ee f8bd 	bl	800029c <__adddf3>
 8012122:	4622      	mov	r2, r4
 8012124:	462b      	mov	r3, r5
 8012126:	f7ee fa6f 	bl	8000608 <__aeabi_dmul>
 801212a:	a35d      	add	r3, pc, #372	; (adr r3, 80122a0 <__kernel_tan+0x368>)
 801212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012130:	f7ee f8b4 	bl	800029c <__adddf3>
 8012134:	4622      	mov	r2, r4
 8012136:	462b      	mov	r3, r5
 8012138:	f7ee fa66 	bl	8000608 <__aeabi_dmul>
 801213c:	a35a      	add	r3, pc, #360	; (adr r3, 80122a8 <__kernel_tan+0x370>)
 801213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012142:	f7ee f8ab 	bl	800029c <__adddf3>
 8012146:	4622      	mov	r2, r4
 8012148:	462b      	mov	r3, r5
 801214a:	f7ee fa5d 	bl	8000608 <__aeabi_dmul>
 801214e:	a358      	add	r3, pc, #352	; (adr r3, 80122b0 <__kernel_tan+0x378>)
 8012150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012154:	f7ee f8a2 	bl	800029c <__adddf3>
 8012158:	4622      	mov	r2, r4
 801215a:	462b      	mov	r3, r5
 801215c:	f7ee fa54 	bl	8000608 <__aeabi_dmul>
 8012160:	a355      	add	r3, pc, #340	; (adr r3, 80122b8 <__kernel_tan+0x380>)
 8012162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012166:	f7ee f899 	bl	800029c <__adddf3>
 801216a:	4602      	mov	r2, r0
 801216c:	460b      	mov	r3, r1
 801216e:	ec51 0b1a 	vmov	r0, r1, d10
 8012172:	f7ee f893 	bl	800029c <__adddf3>
 8012176:	ec53 2b19 	vmov	r2, r3, d9
 801217a:	f7ee fa45 	bl	8000608 <__aeabi_dmul>
 801217e:	4642      	mov	r2, r8
 8012180:	464b      	mov	r3, r9
 8012182:	f7ee f88b 	bl	800029c <__adddf3>
 8012186:	ec53 2b18 	vmov	r2, r3, d8
 801218a:	f7ee fa3d 	bl	8000608 <__aeabi_dmul>
 801218e:	4642      	mov	r2, r8
 8012190:	464b      	mov	r3, r9
 8012192:	f7ee f883 	bl	800029c <__adddf3>
 8012196:	a34a      	add	r3, pc, #296	; (adr r3, 80122c0 <__kernel_tan+0x388>)
 8012198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219c:	4604      	mov	r4, r0
 801219e:	460d      	mov	r5, r1
 80121a0:	ec51 0b19 	vmov	r0, r1, d9
 80121a4:	f7ee fa30 	bl	8000608 <__aeabi_dmul>
 80121a8:	4622      	mov	r2, r4
 80121aa:	462b      	mov	r3, r5
 80121ac:	f7ee f876 	bl	800029c <__adddf3>
 80121b0:	460b      	mov	r3, r1
 80121b2:	ec41 0b18 	vmov	d8, r0, r1
 80121b6:	4602      	mov	r2, r0
 80121b8:	4659      	mov	r1, fp
 80121ba:	4650      	mov	r0, sl
 80121bc:	f7ee f86e 	bl	800029c <__adddf3>
 80121c0:	4b44      	ldr	r3, [pc, #272]	; (80122d4 <__kernel_tan+0x39c>)
 80121c2:	429f      	cmp	r7, r3
 80121c4:	4604      	mov	r4, r0
 80121c6:	460d      	mov	r5, r1
 80121c8:	f340 8086 	ble.w	80122d8 <__kernel_tan+0x3a0>
 80121cc:	4630      	mov	r0, r6
 80121ce:	f7ee f9b1 	bl	8000534 <__aeabi_i2d>
 80121d2:	4622      	mov	r2, r4
 80121d4:	4680      	mov	r8, r0
 80121d6:	4689      	mov	r9, r1
 80121d8:	462b      	mov	r3, r5
 80121da:	4620      	mov	r0, r4
 80121dc:	4629      	mov	r1, r5
 80121de:	f7ee fa13 	bl	8000608 <__aeabi_dmul>
 80121e2:	4642      	mov	r2, r8
 80121e4:	4606      	mov	r6, r0
 80121e6:	460f      	mov	r7, r1
 80121e8:	464b      	mov	r3, r9
 80121ea:	4620      	mov	r0, r4
 80121ec:	4629      	mov	r1, r5
 80121ee:	f7ee f855 	bl	800029c <__adddf3>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	4630      	mov	r0, r6
 80121f8:	4639      	mov	r1, r7
 80121fa:	f7ee fb2f 	bl	800085c <__aeabi_ddiv>
 80121fe:	ec53 2b18 	vmov	r2, r3, d8
 8012202:	f7ee f849 	bl	8000298 <__aeabi_dsub>
 8012206:	4602      	mov	r2, r0
 8012208:	460b      	mov	r3, r1
 801220a:	4650      	mov	r0, sl
 801220c:	4659      	mov	r1, fp
 801220e:	f7ee f843 	bl	8000298 <__aeabi_dsub>
 8012212:	4602      	mov	r2, r0
 8012214:	460b      	mov	r3, r1
 8012216:	f7ee f841 	bl	800029c <__adddf3>
 801221a:	4602      	mov	r2, r0
 801221c:	460b      	mov	r3, r1
 801221e:	4640      	mov	r0, r8
 8012220:	4649      	mov	r1, r9
 8012222:	f7ee f839 	bl	8000298 <__aeabi_dsub>
 8012226:	9b00      	ldr	r3, [sp, #0]
 8012228:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801222c:	f00a 0a02 	and.w	sl, sl, #2
 8012230:	4604      	mov	r4, r0
 8012232:	f1ca 0001 	rsb	r0, sl, #1
 8012236:	460d      	mov	r5, r1
 8012238:	f7ee f97c 	bl	8000534 <__aeabi_i2d>
 801223c:	4602      	mov	r2, r0
 801223e:	460b      	mov	r3, r1
 8012240:	4620      	mov	r0, r4
 8012242:	4629      	mov	r1, r5
 8012244:	f7ee f9e0 	bl	8000608 <__aeabi_dmul>
 8012248:	e69f      	b.n	8011f8a <__kernel_tan+0x52>
 801224a:	bf00      	nop
 801224c:	f3af 8000 	nop.w
 8012250:	54442d18 	.word	0x54442d18
 8012254:	3fe921fb 	.word	0x3fe921fb
 8012258:	33145c07 	.word	0x33145c07
 801225c:	3c81a626 	.word	0x3c81a626
 8012260:	74bf7ad4 	.word	0x74bf7ad4
 8012264:	3efb2a70 	.word	0x3efb2a70
 8012268:	32f0a7e9 	.word	0x32f0a7e9
 801226c:	3f12b80f 	.word	0x3f12b80f
 8012270:	1a8d1068 	.word	0x1a8d1068
 8012274:	3f3026f7 	.word	0x3f3026f7
 8012278:	fee08315 	.word	0xfee08315
 801227c:	3f57dbc8 	.word	0x3f57dbc8
 8012280:	e96e8493 	.word	0xe96e8493
 8012284:	3f8226e3 	.word	0x3f8226e3
 8012288:	1bb341fe 	.word	0x1bb341fe
 801228c:	3faba1ba 	.word	0x3faba1ba
 8012290:	db605373 	.word	0xdb605373
 8012294:	bef375cb 	.word	0xbef375cb
 8012298:	a03792a6 	.word	0xa03792a6
 801229c:	3f147e88 	.word	0x3f147e88
 80122a0:	f2f26501 	.word	0xf2f26501
 80122a4:	3f4344d8 	.word	0x3f4344d8
 80122a8:	c9560328 	.word	0xc9560328
 80122ac:	3f6d6d22 	.word	0x3f6d6d22
 80122b0:	8406d637 	.word	0x8406d637
 80122b4:	3f9664f4 	.word	0x3f9664f4
 80122b8:	1110fe7a 	.word	0x1110fe7a
 80122bc:	3fc11111 	.word	0x3fc11111
 80122c0:	55555563 	.word	0x55555563
 80122c4:	3fd55555 	.word	0x3fd55555
 80122c8:	3e2fffff 	.word	0x3e2fffff
 80122cc:	3ff00000 	.word	0x3ff00000
 80122d0:	bff00000 	.word	0xbff00000
 80122d4:	3fe59427 	.word	0x3fe59427
 80122d8:	2e01      	cmp	r6, #1
 80122da:	d02f      	beq.n	801233c <__kernel_tan+0x404>
 80122dc:	460f      	mov	r7, r1
 80122de:	4602      	mov	r2, r0
 80122e0:	460b      	mov	r3, r1
 80122e2:	4689      	mov	r9, r1
 80122e4:	2000      	movs	r0, #0
 80122e6:	4917      	ldr	r1, [pc, #92]	; (8012344 <__kernel_tan+0x40c>)
 80122e8:	f7ee fab8 	bl	800085c <__aeabi_ddiv>
 80122ec:	2600      	movs	r6, #0
 80122ee:	e9cd 0100 	strd	r0, r1, [sp]
 80122f2:	4652      	mov	r2, sl
 80122f4:	465b      	mov	r3, fp
 80122f6:	4630      	mov	r0, r6
 80122f8:	4639      	mov	r1, r7
 80122fa:	f7ed ffcd 	bl	8000298 <__aeabi_dsub>
 80122fe:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012302:	4602      	mov	r2, r0
 8012304:	460b      	mov	r3, r1
 8012306:	ec51 0b18 	vmov	r0, r1, d8
 801230a:	f7ed ffc5 	bl	8000298 <__aeabi_dsub>
 801230e:	4632      	mov	r2, r6
 8012310:	462b      	mov	r3, r5
 8012312:	f7ee f979 	bl	8000608 <__aeabi_dmul>
 8012316:	46b0      	mov	r8, r6
 8012318:	460f      	mov	r7, r1
 801231a:	4642      	mov	r2, r8
 801231c:	462b      	mov	r3, r5
 801231e:	4634      	mov	r4, r6
 8012320:	4649      	mov	r1, r9
 8012322:	4606      	mov	r6, r0
 8012324:	4640      	mov	r0, r8
 8012326:	f7ee f96f 	bl	8000608 <__aeabi_dmul>
 801232a:	4b07      	ldr	r3, [pc, #28]	; (8012348 <__kernel_tan+0x410>)
 801232c:	2200      	movs	r2, #0
 801232e:	f7ed ffb5 	bl	800029c <__adddf3>
 8012332:	4602      	mov	r2, r0
 8012334:	460b      	mov	r3, r1
 8012336:	4630      	mov	r0, r6
 8012338:	4639      	mov	r1, r7
 801233a:	e665      	b.n	8012008 <__kernel_tan+0xd0>
 801233c:	4682      	mov	sl, r0
 801233e:	468b      	mov	fp, r1
 8012340:	e625      	b.n	8011f8e <__kernel_tan+0x56>
 8012342:	bf00      	nop
 8012344:	bff00000 	.word	0xbff00000
 8012348:	3ff00000 	.word	0x3ff00000

0801234c <__kernel_cosf>:
 801234c:	ee10 3a10 	vmov	r3, s0
 8012350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012354:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012358:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801235c:	da05      	bge.n	801236a <__kernel_cosf+0x1e>
 801235e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012362:	ee17 2a90 	vmov	r2, s15
 8012366:	2a00      	cmp	r2, #0
 8012368:	d03d      	beq.n	80123e6 <__kernel_cosf+0x9a>
 801236a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801236e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80123ec <__kernel_cosf+0xa0>
 8012372:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80123f0 <__kernel_cosf+0xa4>
 8012376:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80123f4 <__kernel_cosf+0xa8>
 801237a:	4a1f      	ldr	r2, [pc, #124]	; (80123f8 <__kernel_cosf+0xac>)
 801237c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012380:	4293      	cmp	r3, r2
 8012382:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80123fc <__kernel_cosf+0xb0>
 8012386:	eee7 7a25 	vfma.f32	s15, s14, s11
 801238a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012400 <__kernel_cosf+0xb4>
 801238e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012392:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8012404 <__kernel_cosf+0xb8>
 8012396:	eee7 7a25 	vfma.f32	s15, s14, s11
 801239a:	eeb0 7a66 	vmov.f32	s14, s13
 801239e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80123a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80123a6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80123aa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80123ae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80123b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80123b6:	dc04      	bgt.n	80123c2 <__kernel_cosf+0x76>
 80123b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80123bc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80123c0:	4770      	bx	lr
 80123c2:	4a11      	ldr	r2, [pc, #68]	; (8012408 <__kernel_cosf+0xbc>)
 80123c4:	4293      	cmp	r3, r2
 80123c6:	bfda      	itte	le
 80123c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80123cc:	ee06 3a90 	vmovle	s13, r3
 80123d0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80123d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80123d8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80123dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80123e4:	4770      	bx	lr
 80123e6:	eeb0 0a46 	vmov.f32	s0, s12
 80123ea:	4770      	bx	lr
 80123ec:	ad47d74e 	.word	0xad47d74e
 80123f0:	310f74f6 	.word	0x310f74f6
 80123f4:	3d2aaaab 	.word	0x3d2aaaab
 80123f8:	3e999999 	.word	0x3e999999
 80123fc:	b493f27c 	.word	0xb493f27c
 8012400:	37d00d01 	.word	0x37d00d01
 8012404:	bab60b61 	.word	0xbab60b61
 8012408:	3f480000 	.word	0x3f480000

0801240c <__kernel_rem_pio2f>:
 801240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012410:	ed2d 8b04 	vpush	{d8-d9}
 8012414:	b0d9      	sub	sp, #356	; 0x164
 8012416:	4688      	mov	r8, r1
 8012418:	9002      	str	r0, [sp, #8]
 801241a:	49bb      	ldr	r1, [pc, #748]	; (8012708 <__kernel_rem_pio2f+0x2fc>)
 801241c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801241e:	9301      	str	r3, [sp, #4]
 8012420:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8012424:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8012428:	1e59      	subs	r1, r3, #1
 801242a:	1d13      	adds	r3, r2, #4
 801242c:	db27      	blt.n	801247e <__kernel_rem_pio2f+0x72>
 801242e:	f1b2 0b03 	subs.w	fp, r2, #3
 8012432:	bf48      	it	mi
 8012434:	f102 0b04 	addmi.w	fp, r2, #4
 8012438:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801243c:	1c45      	adds	r5, r0, #1
 801243e:	00ec      	lsls	r4, r5, #3
 8012440:	1a47      	subs	r7, r0, r1
 8012442:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8012718 <__kernel_rem_pio2f+0x30c>
 8012446:	9403      	str	r4, [sp, #12]
 8012448:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801244c:	eb0a 0c01 	add.w	ip, sl, r1
 8012450:	ae1c      	add	r6, sp, #112	; 0x70
 8012452:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8012456:	2400      	movs	r4, #0
 8012458:	4564      	cmp	r4, ip
 801245a:	dd12      	ble.n	8012482 <__kernel_rem_pio2f+0x76>
 801245c:	9b01      	ldr	r3, [sp, #4]
 801245e:	ac1c      	add	r4, sp, #112	; 0x70
 8012460:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012464:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8012468:	f04f 0c00 	mov.w	ip, #0
 801246c:	45d4      	cmp	ip, sl
 801246e:	dc27      	bgt.n	80124c0 <__kernel_rem_pio2f+0xb4>
 8012470:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8012474:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012718 <__kernel_rem_pio2f+0x30c>
 8012478:	4627      	mov	r7, r4
 801247a:	2600      	movs	r6, #0
 801247c:	e016      	b.n	80124ac <__kernel_rem_pio2f+0xa0>
 801247e:	2000      	movs	r0, #0
 8012480:	e7dc      	b.n	801243c <__kernel_rem_pio2f+0x30>
 8012482:	42e7      	cmn	r7, r4
 8012484:	bf5d      	ittte	pl
 8012486:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801248a:	ee07 3a90 	vmovpl	s15, r3
 801248e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012492:	eef0 7a47 	vmovmi.f32	s15, s14
 8012496:	ece6 7a01 	vstmia	r6!, {s15}
 801249a:	3401      	adds	r4, #1
 801249c:	e7dc      	b.n	8012458 <__kernel_rem_pio2f+0x4c>
 801249e:	ecf9 6a01 	vldmia	r9!, {s13}
 80124a2:	ed97 7a00 	vldr	s14, [r7]
 80124a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80124aa:	3601      	adds	r6, #1
 80124ac:	428e      	cmp	r6, r1
 80124ae:	f1a7 0704 	sub.w	r7, r7, #4
 80124b2:	ddf4      	ble.n	801249e <__kernel_rem_pio2f+0x92>
 80124b4:	eceb 7a01 	vstmia	fp!, {s15}
 80124b8:	f10c 0c01 	add.w	ip, ip, #1
 80124bc:	3404      	adds	r4, #4
 80124be:	e7d5      	b.n	801246c <__kernel_rem_pio2f+0x60>
 80124c0:	ab08      	add	r3, sp, #32
 80124c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80124c6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8012714 <__kernel_rem_pio2f+0x308>
 80124ca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8012710 <__kernel_rem_pio2f+0x304>
 80124ce:	9304      	str	r3, [sp, #16]
 80124d0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80124d4:	4656      	mov	r6, sl
 80124d6:	00b3      	lsls	r3, r6, #2
 80124d8:	9305      	str	r3, [sp, #20]
 80124da:	ab58      	add	r3, sp, #352	; 0x160
 80124dc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80124e0:	ac08      	add	r4, sp, #32
 80124e2:	ab44      	add	r3, sp, #272	; 0x110
 80124e4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80124e8:	46a4      	mov	ip, r4
 80124ea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80124ee:	4637      	mov	r7, r6
 80124f0:	2f00      	cmp	r7, #0
 80124f2:	f1a0 0004 	sub.w	r0, r0, #4
 80124f6:	dc4f      	bgt.n	8012598 <__kernel_rem_pio2f+0x18c>
 80124f8:	4628      	mov	r0, r5
 80124fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80124fe:	f000 fb93 	bl	8012c28 <scalbnf>
 8012502:	eeb0 8a40 	vmov.f32	s16, s0
 8012506:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801250a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801250e:	f000 fb49 	bl	8012ba4 <floorf>
 8012512:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012516:	eea0 8a67 	vfms.f32	s16, s0, s15
 801251a:	2d00      	cmp	r5, #0
 801251c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012520:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012524:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8012528:	ee17 9a90 	vmov	r9, s15
 801252c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012530:	dd44      	ble.n	80125bc <__kernel_rem_pio2f+0x1b0>
 8012532:	f106 3cff 	add.w	ip, r6, #4294967295
 8012536:	ab08      	add	r3, sp, #32
 8012538:	f1c5 0e08 	rsb	lr, r5, #8
 801253c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8012540:	fa47 f00e 	asr.w	r0, r7, lr
 8012544:	4481      	add	r9, r0
 8012546:	fa00 f00e 	lsl.w	r0, r0, lr
 801254a:	1a3f      	subs	r7, r7, r0
 801254c:	f1c5 0007 	rsb	r0, r5, #7
 8012550:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8012554:	4107      	asrs	r7, r0
 8012556:	2f00      	cmp	r7, #0
 8012558:	dd3f      	ble.n	80125da <__kernel_rem_pio2f+0x1ce>
 801255a:	f04f 0e00 	mov.w	lr, #0
 801255e:	f109 0901 	add.w	r9, r9, #1
 8012562:	4673      	mov	r3, lr
 8012564:	4576      	cmp	r6, lr
 8012566:	dc6b      	bgt.n	8012640 <__kernel_rem_pio2f+0x234>
 8012568:	2d00      	cmp	r5, #0
 801256a:	dd04      	ble.n	8012576 <__kernel_rem_pio2f+0x16a>
 801256c:	2d01      	cmp	r5, #1
 801256e:	d078      	beq.n	8012662 <__kernel_rem_pio2f+0x256>
 8012570:	2d02      	cmp	r5, #2
 8012572:	f000 8081 	beq.w	8012678 <__kernel_rem_pio2f+0x26c>
 8012576:	2f02      	cmp	r7, #2
 8012578:	d12f      	bne.n	80125da <__kernel_rem_pio2f+0x1ce>
 801257a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801257e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012582:	b353      	cbz	r3, 80125da <__kernel_rem_pio2f+0x1ce>
 8012584:	4628      	mov	r0, r5
 8012586:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801258a:	f000 fb4d 	bl	8012c28 <scalbnf>
 801258e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012592:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012596:	e020      	b.n	80125da <__kernel_rem_pio2f+0x1ce>
 8012598:	ee60 7a28 	vmul.f32	s15, s0, s17
 801259c:	3f01      	subs	r7, #1
 801259e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80125aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80125ae:	ecac 0a01 	vstmia	ip!, {s0}
 80125b2:	ed90 0a00 	vldr	s0, [r0]
 80125b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80125ba:	e799      	b.n	80124f0 <__kernel_rem_pio2f+0xe4>
 80125bc:	d105      	bne.n	80125ca <__kernel_rem_pio2f+0x1be>
 80125be:	1e70      	subs	r0, r6, #1
 80125c0:	ab08      	add	r3, sp, #32
 80125c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80125c6:	11ff      	asrs	r7, r7, #7
 80125c8:	e7c5      	b.n	8012556 <__kernel_rem_pio2f+0x14a>
 80125ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80125ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80125d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d6:	da31      	bge.n	801263c <__kernel_rem_pio2f+0x230>
 80125d8:	2700      	movs	r7, #0
 80125da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80125de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e2:	f040 809b 	bne.w	801271c <__kernel_rem_pio2f+0x310>
 80125e6:	1e74      	subs	r4, r6, #1
 80125e8:	46a4      	mov	ip, r4
 80125ea:	2000      	movs	r0, #0
 80125ec:	45d4      	cmp	ip, sl
 80125ee:	da4a      	bge.n	8012686 <__kernel_rem_pio2f+0x27a>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d07a      	beq.n	80126ea <__kernel_rem_pio2f+0x2de>
 80125f4:	ab08      	add	r3, sp, #32
 80125f6:	3d08      	subs	r5, #8
 80125f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f000 8081 	beq.w	8012704 <__kernel_rem_pio2f+0x2f8>
 8012602:	4628      	mov	r0, r5
 8012604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012608:	00a5      	lsls	r5, r4, #2
 801260a:	f000 fb0d 	bl	8012c28 <scalbnf>
 801260e:	aa44      	add	r2, sp, #272	; 0x110
 8012610:	1d2b      	adds	r3, r5, #4
 8012612:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8012714 <__kernel_rem_pio2f+0x308>
 8012616:	18d1      	adds	r1, r2, r3
 8012618:	4622      	mov	r2, r4
 801261a:	2a00      	cmp	r2, #0
 801261c:	f280 80ae 	bge.w	801277c <__kernel_rem_pio2f+0x370>
 8012620:	4622      	mov	r2, r4
 8012622:	2a00      	cmp	r2, #0
 8012624:	f2c0 80cc 	blt.w	80127c0 <__kernel_rem_pio2f+0x3b4>
 8012628:	a944      	add	r1, sp, #272	; 0x110
 801262a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801262e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801270c <__kernel_rem_pio2f+0x300>
 8012632:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012718 <__kernel_rem_pio2f+0x30c>
 8012636:	2000      	movs	r0, #0
 8012638:	1aa1      	subs	r1, r4, r2
 801263a:	e0b6      	b.n	80127aa <__kernel_rem_pio2f+0x39e>
 801263c:	2702      	movs	r7, #2
 801263e:	e78c      	b.n	801255a <__kernel_rem_pio2f+0x14e>
 8012640:	6820      	ldr	r0, [r4, #0]
 8012642:	b94b      	cbnz	r3, 8012658 <__kernel_rem_pio2f+0x24c>
 8012644:	b118      	cbz	r0, 801264e <__kernel_rem_pio2f+0x242>
 8012646:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801264a:	6020      	str	r0, [r4, #0]
 801264c:	2001      	movs	r0, #1
 801264e:	f10e 0e01 	add.w	lr, lr, #1
 8012652:	3404      	adds	r4, #4
 8012654:	4603      	mov	r3, r0
 8012656:	e785      	b.n	8012564 <__kernel_rem_pio2f+0x158>
 8012658:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801265c:	6020      	str	r0, [r4, #0]
 801265e:	4618      	mov	r0, r3
 8012660:	e7f5      	b.n	801264e <__kernel_rem_pio2f+0x242>
 8012662:	1e74      	subs	r4, r6, #1
 8012664:	a808      	add	r0, sp, #32
 8012666:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801266a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801266e:	f10d 0c20 	add.w	ip, sp, #32
 8012672:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8012676:	e77e      	b.n	8012576 <__kernel_rem_pio2f+0x16a>
 8012678:	1e74      	subs	r4, r6, #1
 801267a:	a808      	add	r0, sp, #32
 801267c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012680:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8012684:	e7f3      	b.n	801266e <__kernel_rem_pio2f+0x262>
 8012686:	ab08      	add	r3, sp, #32
 8012688:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801268c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012690:	4318      	orrs	r0, r3
 8012692:	e7ab      	b.n	80125ec <__kernel_rem_pio2f+0x1e0>
 8012694:	f10c 0c01 	add.w	ip, ip, #1
 8012698:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801269c:	2c00      	cmp	r4, #0
 801269e:	d0f9      	beq.n	8012694 <__kernel_rem_pio2f+0x288>
 80126a0:	9b05      	ldr	r3, [sp, #20]
 80126a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80126a6:	eb0d 0003 	add.w	r0, sp, r3
 80126aa:	9b01      	ldr	r3, [sp, #4]
 80126ac:	18f4      	adds	r4, r6, r3
 80126ae:	ab1c      	add	r3, sp, #112	; 0x70
 80126b0:	1c77      	adds	r7, r6, #1
 80126b2:	384c      	subs	r0, #76	; 0x4c
 80126b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80126b8:	4466      	add	r6, ip
 80126ba:	42be      	cmp	r6, r7
 80126bc:	f6ff af0b 	blt.w	80124d6 <__kernel_rem_pio2f+0xca>
 80126c0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80126c4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80126c8:	ee07 3a90 	vmov	s15, r3
 80126cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126d0:	f04f 0c00 	mov.w	ip, #0
 80126d4:	ece4 7a01 	vstmia	r4!, {s15}
 80126d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012718 <__kernel_rem_pio2f+0x30c>
 80126dc:	46a1      	mov	r9, r4
 80126de:	458c      	cmp	ip, r1
 80126e0:	dd07      	ble.n	80126f2 <__kernel_rem_pio2f+0x2e6>
 80126e2:	ece0 7a01 	vstmia	r0!, {s15}
 80126e6:	3701      	adds	r7, #1
 80126e8:	e7e7      	b.n	80126ba <__kernel_rem_pio2f+0x2ae>
 80126ea:	9804      	ldr	r0, [sp, #16]
 80126ec:	f04f 0c01 	mov.w	ip, #1
 80126f0:	e7d2      	b.n	8012698 <__kernel_rem_pio2f+0x28c>
 80126f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80126f6:	ed39 7a01 	vldmdb	r9!, {s14}
 80126fa:	f10c 0c01 	add.w	ip, ip, #1
 80126fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012702:	e7ec      	b.n	80126de <__kernel_rem_pio2f+0x2d2>
 8012704:	3c01      	subs	r4, #1
 8012706:	e775      	b.n	80125f4 <__kernel_rem_pio2f+0x1e8>
 8012708:	080137f4 	.word	0x080137f4
 801270c:	080137c8 	.word	0x080137c8
 8012710:	43800000 	.word	0x43800000
 8012714:	3b800000 	.word	0x3b800000
 8012718:	00000000 	.word	0x00000000
 801271c:	9b03      	ldr	r3, [sp, #12]
 801271e:	eeb0 0a48 	vmov.f32	s0, s16
 8012722:	1a98      	subs	r0, r3, r2
 8012724:	f000 fa80 	bl	8012c28 <scalbnf>
 8012728:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8012710 <__kernel_rem_pio2f+0x304>
 801272c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012734:	db19      	blt.n	801276a <__kernel_rem_pio2f+0x35e>
 8012736:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8012714 <__kernel_rem_pio2f+0x308>
 801273a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801273e:	aa08      	add	r2, sp, #32
 8012740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012744:	1c74      	adds	r4, r6, #1
 8012746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801274a:	3508      	adds	r5, #8
 801274c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012754:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012758:	ee10 3a10 	vmov	r3, s0
 801275c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012760:	ee17 3a90 	vmov	r3, s15
 8012764:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012768:	e74b      	b.n	8012602 <__kernel_rem_pio2f+0x1f6>
 801276a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801276e:	aa08      	add	r2, sp, #32
 8012770:	ee10 3a10 	vmov	r3, s0
 8012774:	4634      	mov	r4, r6
 8012776:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801277a:	e742      	b.n	8012602 <__kernel_rem_pio2f+0x1f6>
 801277c:	a808      	add	r0, sp, #32
 801277e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012782:	9001      	str	r0, [sp, #4]
 8012784:	ee07 0a90 	vmov	s15, r0
 8012788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801278c:	3a01      	subs	r2, #1
 801278e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012792:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012796:	ed61 7a01 	vstmdb	r1!, {s15}
 801279a:	e73e      	b.n	801261a <__kernel_rem_pio2f+0x20e>
 801279c:	ecfc 6a01 	vldmia	ip!, {s13}
 80127a0:	ecb6 7a01 	vldmia	r6!, {s14}
 80127a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80127a8:	3001      	adds	r0, #1
 80127aa:	4550      	cmp	r0, sl
 80127ac:	dc01      	bgt.n	80127b2 <__kernel_rem_pio2f+0x3a6>
 80127ae:	4288      	cmp	r0, r1
 80127b0:	ddf4      	ble.n	801279c <__kernel_rem_pio2f+0x390>
 80127b2:	a858      	add	r0, sp, #352	; 0x160
 80127b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80127b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80127bc:	3a01      	subs	r2, #1
 80127be:	e730      	b.n	8012622 <__kernel_rem_pio2f+0x216>
 80127c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80127c2:	2a02      	cmp	r2, #2
 80127c4:	dc09      	bgt.n	80127da <__kernel_rem_pio2f+0x3ce>
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	dc2a      	bgt.n	8012820 <__kernel_rem_pio2f+0x414>
 80127ca:	d043      	beq.n	8012854 <__kernel_rem_pio2f+0x448>
 80127cc:	f009 0007 	and.w	r0, r9, #7
 80127d0:	b059      	add	sp, #356	; 0x164
 80127d2:	ecbd 8b04 	vpop	{d8-d9}
 80127d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80127dc:	2b03      	cmp	r3, #3
 80127de:	d1f5      	bne.n	80127cc <__kernel_rem_pio2f+0x3c0>
 80127e0:	ab30      	add	r3, sp, #192	; 0xc0
 80127e2:	442b      	add	r3, r5
 80127e4:	461a      	mov	r2, r3
 80127e6:	4619      	mov	r1, r3
 80127e8:	4620      	mov	r0, r4
 80127ea:	2800      	cmp	r0, #0
 80127ec:	f1a1 0104 	sub.w	r1, r1, #4
 80127f0:	dc51      	bgt.n	8012896 <__kernel_rem_pio2f+0x48a>
 80127f2:	4621      	mov	r1, r4
 80127f4:	2901      	cmp	r1, #1
 80127f6:	f1a2 0204 	sub.w	r2, r2, #4
 80127fa:	dc5c      	bgt.n	80128b6 <__kernel_rem_pio2f+0x4aa>
 80127fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8012718 <__kernel_rem_pio2f+0x30c>
 8012800:	3304      	adds	r3, #4
 8012802:	2c01      	cmp	r4, #1
 8012804:	dc67      	bgt.n	80128d6 <__kernel_rem_pio2f+0x4ca>
 8012806:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801280a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801280e:	2f00      	cmp	r7, #0
 8012810:	d167      	bne.n	80128e2 <__kernel_rem_pio2f+0x4d6>
 8012812:	edc8 6a00 	vstr	s13, [r8]
 8012816:	ed88 7a01 	vstr	s14, [r8, #4]
 801281a:	edc8 7a02 	vstr	s15, [r8, #8]
 801281e:	e7d5      	b.n	80127cc <__kernel_rem_pio2f+0x3c0>
 8012820:	aa30      	add	r2, sp, #192	; 0xc0
 8012822:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8012718 <__kernel_rem_pio2f+0x30c>
 8012826:	4413      	add	r3, r2
 8012828:	4622      	mov	r2, r4
 801282a:	2a00      	cmp	r2, #0
 801282c:	da24      	bge.n	8012878 <__kernel_rem_pio2f+0x46c>
 801282e:	b34f      	cbz	r7, 8012884 <__kernel_rem_pio2f+0x478>
 8012830:	eef1 7a47 	vneg.f32	s15, s14
 8012834:	edc8 7a00 	vstr	s15, [r8]
 8012838:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801283c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012840:	aa31      	add	r2, sp, #196	; 0xc4
 8012842:	2301      	movs	r3, #1
 8012844:	429c      	cmp	r4, r3
 8012846:	da20      	bge.n	801288a <__kernel_rem_pio2f+0x47e>
 8012848:	b10f      	cbz	r7, 801284e <__kernel_rem_pio2f+0x442>
 801284a:	eef1 7a67 	vneg.f32	s15, s15
 801284e:	edc8 7a01 	vstr	s15, [r8, #4]
 8012852:	e7bb      	b.n	80127cc <__kernel_rem_pio2f+0x3c0>
 8012854:	aa30      	add	r2, sp, #192	; 0xc0
 8012856:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8012718 <__kernel_rem_pio2f+0x30c>
 801285a:	4413      	add	r3, r2
 801285c:	2c00      	cmp	r4, #0
 801285e:	da05      	bge.n	801286c <__kernel_rem_pio2f+0x460>
 8012860:	b10f      	cbz	r7, 8012866 <__kernel_rem_pio2f+0x45a>
 8012862:	eef1 7a67 	vneg.f32	s15, s15
 8012866:	edc8 7a00 	vstr	s15, [r8]
 801286a:	e7af      	b.n	80127cc <__kernel_rem_pio2f+0x3c0>
 801286c:	ed33 7a01 	vldmdb	r3!, {s14}
 8012870:	3c01      	subs	r4, #1
 8012872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012876:	e7f1      	b.n	801285c <__kernel_rem_pio2f+0x450>
 8012878:	ed73 7a01 	vldmdb	r3!, {s15}
 801287c:	3a01      	subs	r2, #1
 801287e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012882:	e7d2      	b.n	801282a <__kernel_rem_pio2f+0x41e>
 8012884:	eef0 7a47 	vmov.f32	s15, s14
 8012888:	e7d4      	b.n	8012834 <__kernel_rem_pio2f+0x428>
 801288a:	ecb2 7a01 	vldmia	r2!, {s14}
 801288e:	3301      	adds	r3, #1
 8012890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012894:	e7d6      	b.n	8012844 <__kernel_rem_pio2f+0x438>
 8012896:	edd1 7a00 	vldr	s15, [r1]
 801289a:	edd1 6a01 	vldr	s13, [r1, #4]
 801289e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80128a2:	3801      	subs	r0, #1
 80128a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128a8:	ed81 7a00 	vstr	s14, [r1]
 80128ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128b0:	edc1 7a01 	vstr	s15, [r1, #4]
 80128b4:	e799      	b.n	80127ea <__kernel_rem_pio2f+0x3de>
 80128b6:	edd2 7a00 	vldr	s15, [r2]
 80128ba:	edd2 6a01 	vldr	s13, [r2, #4]
 80128be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80128c2:	3901      	subs	r1, #1
 80128c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128c8:	ed82 7a00 	vstr	s14, [r2]
 80128cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80128d4:	e78e      	b.n	80127f4 <__kernel_rem_pio2f+0x3e8>
 80128d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80128da:	3c01      	subs	r4, #1
 80128dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80128e0:	e78f      	b.n	8012802 <__kernel_rem_pio2f+0x3f6>
 80128e2:	eef1 6a66 	vneg.f32	s13, s13
 80128e6:	eeb1 7a47 	vneg.f32	s14, s14
 80128ea:	edc8 6a00 	vstr	s13, [r8]
 80128ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80128f2:	eef1 7a67 	vneg.f32	s15, s15
 80128f6:	e790      	b.n	801281a <__kernel_rem_pio2f+0x40e>

080128f8 <__kernel_sinf>:
 80128f8:	ee10 3a10 	vmov	r3, s0
 80128fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012900:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012904:	da04      	bge.n	8012910 <__kernel_sinf+0x18>
 8012906:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801290a:	ee17 3a90 	vmov	r3, s15
 801290e:	b35b      	cbz	r3, 8012968 <__kernel_sinf+0x70>
 8012910:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012914:	eddf 7a15 	vldr	s15, [pc, #84]	; 801296c <__kernel_sinf+0x74>
 8012918:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012970 <__kernel_sinf+0x78>
 801291c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012920:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012974 <__kernel_sinf+0x7c>
 8012924:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012928:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012978 <__kernel_sinf+0x80>
 801292c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012930:	eddf 7a12 	vldr	s15, [pc, #72]	; 801297c <__kernel_sinf+0x84>
 8012934:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012938:	eee6 7a07 	vfma.f32	s15, s12, s14
 801293c:	b930      	cbnz	r0, 801294c <__kernel_sinf+0x54>
 801293e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012980 <__kernel_sinf+0x88>
 8012942:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012946:	eea6 0a26 	vfma.f32	s0, s12, s13
 801294a:	4770      	bx	lr
 801294c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012950:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012954:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012958:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801295c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012984 <__kernel_sinf+0x8c>
 8012960:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012964:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	2f2ec9d3 	.word	0x2f2ec9d3
 8012970:	b2d72f34 	.word	0xb2d72f34
 8012974:	3638ef1b 	.word	0x3638ef1b
 8012978:	b9500d01 	.word	0xb9500d01
 801297c:	3c088889 	.word	0x3c088889
 8012980:	be2aaaab 	.word	0xbe2aaaab
 8012984:	3e2aaaab 	.word	0x3e2aaaab

08012988 <floor>:
 8012988:	ec51 0b10 	vmov	r0, r1, d0
 801298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012990:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012994:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012998:	2e13      	cmp	r6, #19
 801299a:	ee10 5a10 	vmov	r5, s0
 801299e:	ee10 8a10 	vmov	r8, s0
 80129a2:	460c      	mov	r4, r1
 80129a4:	dc32      	bgt.n	8012a0c <floor+0x84>
 80129a6:	2e00      	cmp	r6, #0
 80129a8:	da14      	bge.n	80129d4 <floor+0x4c>
 80129aa:	a333      	add	r3, pc, #204	; (adr r3, 8012a78 <floor+0xf0>)
 80129ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b0:	f7ed fc74 	bl	800029c <__adddf3>
 80129b4:	2200      	movs	r2, #0
 80129b6:	2300      	movs	r3, #0
 80129b8:	f7ee f8b6 	bl	8000b28 <__aeabi_dcmpgt>
 80129bc:	b138      	cbz	r0, 80129ce <floor+0x46>
 80129be:	2c00      	cmp	r4, #0
 80129c0:	da57      	bge.n	8012a72 <floor+0xea>
 80129c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129c6:	431d      	orrs	r5, r3
 80129c8:	d001      	beq.n	80129ce <floor+0x46>
 80129ca:	4c2d      	ldr	r4, [pc, #180]	; (8012a80 <floor+0xf8>)
 80129cc:	2500      	movs	r5, #0
 80129ce:	4621      	mov	r1, r4
 80129d0:	4628      	mov	r0, r5
 80129d2:	e025      	b.n	8012a20 <floor+0x98>
 80129d4:	4f2b      	ldr	r7, [pc, #172]	; (8012a84 <floor+0xfc>)
 80129d6:	4137      	asrs	r7, r6
 80129d8:	ea01 0307 	and.w	r3, r1, r7
 80129dc:	4303      	orrs	r3, r0
 80129de:	d01f      	beq.n	8012a20 <floor+0x98>
 80129e0:	a325      	add	r3, pc, #148	; (adr r3, 8012a78 <floor+0xf0>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e6:	f7ed fc59 	bl	800029c <__adddf3>
 80129ea:	2200      	movs	r2, #0
 80129ec:	2300      	movs	r3, #0
 80129ee:	f7ee f89b 	bl	8000b28 <__aeabi_dcmpgt>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0eb      	beq.n	80129ce <floor+0x46>
 80129f6:	2c00      	cmp	r4, #0
 80129f8:	bfbe      	ittt	lt
 80129fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80129fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a02:	19a4      	addlt	r4, r4, r6
 8012a04:	ea24 0407 	bic.w	r4, r4, r7
 8012a08:	2500      	movs	r5, #0
 8012a0a:	e7e0      	b.n	80129ce <floor+0x46>
 8012a0c:	2e33      	cmp	r6, #51	; 0x33
 8012a0e:	dd0b      	ble.n	8012a28 <floor+0xa0>
 8012a10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a14:	d104      	bne.n	8012a20 <floor+0x98>
 8012a16:	ee10 2a10 	vmov	r2, s0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	f7ed fc3e 	bl	800029c <__adddf3>
 8012a20:	ec41 0b10 	vmov	d0, r0, r1
 8012a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a30:	fa23 f707 	lsr.w	r7, r3, r7
 8012a34:	4207      	tst	r7, r0
 8012a36:	d0f3      	beq.n	8012a20 <floor+0x98>
 8012a38:	a30f      	add	r3, pc, #60	; (adr r3, 8012a78 <floor+0xf0>)
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	f7ed fc2d 	bl	800029c <__adddf3>
 8012a42:	2200      	movs	r2, #0
 8012a44:	2300      	movs	r3, #0
 8012a46:	f7ee f86f 	bl	8000b28 <__aeabi_dcmpgt>
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	d0bf      	beq.n	80129ce <floor+0x46>
 8012a4e:	2c00      	cmp	r4, #0
 8012a50:	da02      	bge.n	8012a58 <floor+0xd0>
 8012a52:	2e14      	cmp	r6, #20
 8012a54:	d103      	bne.n	8012a5e <floor+0xd6>
 8012a56:	3401      	adds	r4, #1
 8012a58:	ea25 0507 	bic.w	r5, r5, r7
 8012a5c:	e7b7      	b.n	80129ce <floor+0x46>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a64:	fa03 f606 	lsl.w	r6, r3, r6
 8012a68:	4435      	add	r5, r6
 8012a6a:	4545      	cmp	r5, r8
 8012a6c:	bf38      	it	cc
 8012a6e:	18e4      	addcc	r4, r4, r3
 8012a70:	e7f2      	b.n	8012a58 <floor+0xd0>
 8012a72:	2500      	movs	r5, #0
 8012a74:	462c      	mov	r4, r5
 8012a76:	e7aa      	b.n	80129ce <floor+0x46>
 8012a78:	8800759c 	.word	0x8800759c
 8012a7c:	7e37e43c 	.word	0x7e37e43c
 8012a80:	bff00000 	.word	0xbff00000
 8012a84:	000fffff 	.word	0x000fffff

08012a88 <scalbn>:
 8012a88:	b570      	push	{r4, r5, r6, lr}
 8012a8a:	ec55 4b10 	vmov	r4, r5, d0
 8012a8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a92:	4606      	mov	r6, r0
 8012a94:	462b      	mov	r3, r5
 8012a96:	b99a      	cbnz	r2, 8012ac0 <scalbn+0x38>
 8012a98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a9c:	4323      	orrs	r3, r4
 8012a9e:	d036      	beq.n	8012b0e <scalbn+0x86>
 8012aa0:	4b39      	ldr	r3, [pc, #228]	; (8012b88 <scalbn+0x100>)
 8012aa2:	4629      	mov	r1, r5
 8012aa4:	ee10 0a10 	vmov	r0, s0
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f7ed fdad 	bl	8000608 <__aeabi_dmul>
 8012aae:	4b37      	ldr	r3, [pc, #220]	; (8012b8c <scalbn+0x104>)
 8012ab0:	429e      	cmp	r6, r3
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	460d      	mov	r5, r1
 8012ab6:	da10      	bge.n	8012ada <scalbn+0x52>
 8012ab8:	a32b      	add	r3, pc, #172	; (adr r3, 8012b68 <scalbn+0xe0>)
 8012aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012abe:	e03a      	b.n	8012b36 <scalbn+0xae>
 8012ac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012ac4:	428a      	cmp	r2, r1
 8012ac6:	d10c      	bne.n	8012ae2 <scalbn+0x5a>
 8012ac8:	ee10 2a10 	vmov	r2, s0
 8012acc:	4620      	mov	r0, r4
 8012ace:	4629      	mov	r1, r5
 8012ad0:	f7ed fbe4 	bl	800029c <__adddf3>
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	460d      	mov	r5, r1
 8012ad8:	e019      	b.n	8012b0e <scalbn+0x86>
 8012ada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012ade:	460b      	mov	r3, r1
 8012ae0:	3a36      	subs	r2, #54	; 0x36
 8012ae2:	4432      	add	r2, r6
 8012ae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012ae8:	428a      	cmp	r2, r1
 8012aea:	dd08      	ble.n	8012afe <scalbn+0x76>
 8012aec:	2d00      	cmp	r5, #0
 8012aee:	a120      	add	r1, pc, #128	; (adr r1, 8012b70 <scalbn+0xe8>)
 8012af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012af4:	da1c      	bge.n	8012b30 <scalbn+0xa8>
 8012af6:	a120      	add	r1, pc, #128	; (adr r1, 8012b78 <scalbn+0xf0>)
 8012af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012afc:	e018      	b.n	8012b30 <scalbn+0xa8>
 8012afe:	2a00      	cmp	r2, #0
 8012b00:	dd08      	ble.n	8012b14 <scalbn+0x8c>
 8012b02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b0e:	ec45 4b10 	vmov	d0, r4, r5
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b18:	da19      	bge.n	8012b4e <scalbn+0xc6>
 8012b1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b1e:	429e      	cmp	r6, r3
 8012b20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012b24:	dd0a      	ble.n	8012b3c <scalbn+0xb4>
 8012b26:	a112      	add	r1, pc, #72	; (adr r1, 8012b70 <scalbn+0xe8>)
 8012b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d1e2      	bne.n	8012af6 <scalbn+0x6e>
 8012b30:	a30f      	add	r3, pc, #60	; (adr r3, 8012b70 <scalbn+0xe8>)
 8012b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b36:	f7ed fd67 	bl	8000608 <__aeabi_dmul>
 8012b3a:	e7cb      	b.n	8012ad4 <scalbn+0x4c>
 8012b3c:	a10a      	add	r1, pc, #40	; (adr r1, 8012b68 <scalbn+0xe0>)
 8012b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d0b8      	beq.n	8012ab8 <scalbn+0x30>
 8012b46:	a10e      	add	r1, pc, #56	; (adr r1, 8012b80 <scalbn+0xf8>)
 8012b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b4c:	e7b4      	b.n	8012ab8 <scalbn+0x30>
 8012b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b52:	3236      	adds	r2, #54	; 0x36
 8012b54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	4b0c      	ldr	r3, [pc, #48]	; (8012b90 <scalbn+0x108>)
 8012b60:	2200      	movs	r2, #0
 8012b62:	e7e8      	b.n	8012b36 <scalbn+0xae>
 8012b64:	f3af 8000 	nop.w
 8012b68:	c2f8f359 	.word	0xc2f8f359
 8012b6c:	01a56e1f 	.word	0x01a56e1f
 8012b70:	8800759c 	.word	0x8800759c
 8012b74:	7e37e43c 	.word	0x7e37e43c
 8012b78:	8800759c 	.word	0x8800759c
 8012b7c:	fe37e43c 	.word	0xfe37e43c
 8012b80:	c2f8f359 	.word	0xc2f8f359
 8012b84:	81a56e1f 	.word	0x81a56e1f
 8012b88:	43500000 	.word	0x43500000
 8012b8c:	ffff3cb0 	.word	0xffff3cb0
 8012b90:	3c900000 	.word	0x3c900000

08012b94 <fabsf>:
 8012b94:	ee10 3a10 	vmov	r3, s0
 8012b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b9c:	ee00 3a10 	vmov	s0, r3
 8012ba0:	4770      	bx	lr
	...

08012ba4 <floorf>:
 8012ba4:	ee10 3a10 	vmov	r3, s0
 8012ba8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012bac:	3a7f      	subs	r2, #127	; 0x7f
 8012bae:	2a16      	cmp	r2, #22
 8012bb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012bb4:	dc2a      	bgt.n	8012c0c <floorf+0x68>
 8012bb6:	2a00      	cmp	r2, #0
 8012bb8:	da11      	bge.n	8012bde <floorf+0x3a>
 8012bba:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012c1c <floorf+0x78>
 8012bbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012bc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bca:	dd05      	ble.n	8012bd8 <floorf+0x34>
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	da23      	bge.n	8012c18 <floorf+0x74>
 8012bd0:	4a13      	ldr	r2, [pc, #76]	; (8012c20 <floorf+0x7c>)
 8012bd2:	2900      	cmp	r1, #0
 8012bd4:	bf18      	it	ne
 8012bd6:	4613      	movne	r3, r2
 8012bd8:	ee00 3a10 	vmov	s0, r3
 8012bdc:	4770      	bx	lr
 8012bde:	4911      	ldr	r1, [pc, #68]	; (8012c24 <floorf+0x80>)
 8012be0:	4111      	asrs	r1, r2
 8012be2:	420b      	tst	r3, r1
 8012be4:	d0fa      	beq.n	8012bdc <floorf+0x38>
 8012be6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012c1c <floorf+0x78>
 8012bea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012bee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf6:	ddef      	ble.n	8012bd8 <floorf+0x34>
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	bfbe      	ittt	lt
 8012bfc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012c00:	fa40 f202 	asrlt.w	r2, r0, r2
 8012c04:	189b      	addlt	r3, r3, r2
 8012c06:	ea23 0301 	bic.w	r3, r3, r1
 8012c0a:	e7e5      	b.n	8012bd8 <floorf+0x34>
 8012c0c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012c10:	d3e4      	bcc.n	8012bdc <floorf+0x38>
 8012c12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c16:	4770      	bx	lr
 8012c18:	2300      	movs	r3, #0
 8012c1a:	e7dd      	b.n	8012bd8 <floorf+0x34>
 8012c1c:	7149f2ca 	.word	0x7149f2ca
 8012c20:	bf800000 	.word	0xbf800000
 8012c24:	007fffff 	.word	0x007fffff

08012c28 <scalbnf>:
 8012c28:	ee10 3a10 	vmov	r3, s0
 8012c2c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012c30:	d025      	beq.n	8012c7e <scalbnf+0x56>
 8012c32:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012c36:	d302      	bcc.n	8012c3e <scalbnf+0x16>
 8012c38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c3c:	4770      	bx	lr
 8012c3e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012c42:	d122      	bne.n	8012c8a <scalbnf+0x62>
 8012c44:	4b2a      	ldr	r3, [pc, #168]	; (8012cf0 <scalbnf+0xc8>)
 8012c46:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012cf4 <scalbnf+0xcc>
 8012c4a:	4298      	cmp	r0, r3
 8012c4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c50:	db16      	blt.n	8012c80 <scalbnf+0x58>
 8012c52:	ee10 3a10 	vmov	r3, s0
 8012c56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c5a:	3a19      	subs	r2, #25
 8012c5c:	4402      	add	r2, r0
 8012c5e:	2afe      	cmp	r2, #254	; 0xfe
 8012c60:	dd15      	ble.n	8012c8e <scalbnf+0x66>
 8012c62:	ee10 3a10 	vmov	r3, s0
 8012c66:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012cf8 <scalbnf+0xd0>
 8012c6a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012cfc <scalbnf+0xd4>
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	eeb0 7a67 	vmov.f32	s14, s15
 8012c74:	bfb8      	it	lt
 8012c76:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c7a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012c7e:	4770      	bx	lr
 8012c80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012d00 <scalbnf+0xd8>
 8012c84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c88:	4770      	bx	lr
 8012c8a:	0dd2      	lsrs	r2, r2, #23
 8012c8c:	e7e6      	b.n	8012c5c <scalbnf+0x34>
 8012c8e:	2a00      	cmp	r2, #0
 8012c90:	dd06      	ble.n	8012ca0 <scalbnf+0x78>
 8012c92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c96:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012c9a:	ee00 3a10 	vmov	s0, r3
 8012c9e:	4770      	bx	lr
 8012ca0:	f112 0f16 	cmn.w	r2, #22
 8012ca4:	da1a      	bge.n	8012cdc <scalbnf+0xb4>
 8012ca6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012caa:	4298      	cmp	r0, r3
 8012cac:	ee10 3a10 	vmov	r3, s0
 8012cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cb4:	dd0a      	ble.n	8012ccc <scalbnf+0xa4>
 8012cb6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012cf8 <scalbnf+0xd0>
 8012cba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012cfc <scalbnf+0xd4>
 8012cbe:	eef0 7a40 	vmov.f32	s15, s0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	bf18      	it	ne
 8012cc6:	eeb0 0a47 	vmovne.f32	s0, s14
 8012cca:	e7db      	b.n	8012c84 <scalbnf+0x5c>
 8012ccc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012d00 <scalbnf+0xd8>
 8012cd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012d04 <scalbnf+0xdc>
 8012cd4:	eef0 7a40 	vmov.f32	s15, s0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	e7f3      	b.n	8012cc4 <scalbnf+0x9c>
 8012cdc:	3219      	adds	r2, #25
 8012cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ce2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012ce6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012d08 <scalbnf+0xe0>
 8012cea:	ee07 3a10 	vmov	s14, r3
 8012cee:	e7c4      	b.n	8012c7a <scalbnf+0x52>
 8012cf0:	ffff3cb0 	.word	0xffff3cb0
 8012cf4:	4c000000 	.word	0x4c000000
 8012cf8:	7149f2ca 	.word	0x7149f2ca
 8012cfc:	f149f2ca 	.word	0xf149f2ca
 8012d00:	0da24260 	.word	0x0da24260
 8012d04:	8da24260 	.word	0x8da24260
 8012d08:	33000000 	.word	0x33000000

08012d0c <_init>:
 8012d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0e:	bf00      	nop
 8012d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d12:	bc08      	pop	{r3}
 8012d14:	469e      	mov	lr, r3
 8012d16:	4770      	bx	lr

08012d18 <_fini>:
 8012d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1a:	bf00      	nop
 8012d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d1e:	bc08      	pop	{r3}
 8012d20:	469e      	mov	lr, r3
 8012d22:	4770      	bx	lr
