
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  08012d08  08012d08  00022d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137e0  080137e0  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  080137e0  080137e0  000237e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137e8  080137e8  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137e8  080137e8  000237e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137ec  080137ec  000237ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  080137f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  20000410  08013c00  00030410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fd4  08013c00  00031fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019206  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003725  00000000  00000000  00049646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0004cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0004e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac35  00000000  00000000  0004f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3f2  00000000  00000000  0006a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0cd0  00000000  00000000  000854df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001261af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee0  00000000  00000000  00126200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000410 	.word	0x20000410
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012cec 	.word	0x08012cec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000414 	.word	0x20000414
 80001dc:	08012cec 	.word	0x08012cec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_EMERGENCY>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_EMERGENCY(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[1] = { 0xF0 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f005 f86a 	bl	80060e8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_EMERGENCY+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 1, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_EMERGENCY+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f006 fb2f 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f005 f859 	bl	80060e8 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_EMERGENCY+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}

}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000042c 	.word	0x2000042c
 8001050:	20000000 	.word	0x20000000
 8001054:	20000430 	.word	0x20000430

08001058 <ENDEFF_EMERGENCY_QUIT>:
void ENDEFF_EMERGENCY_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0xE5, 0x7A, 0xFF, 0x81 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f005 f842 	bl	80060e8 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_EMERGENCY_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2304      	movs	r3, #4
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_EMERGENCY_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f006 fb07 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f005 f831 	bl	80060e8 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_EMERGENCY_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000042c 	.word	0x2000042c
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000430 	.word	0x20000430

080010a8 <ENDEFF_TEST_MODE>:
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f005 f81a 	bl	80060e8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_TEST_MODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f006 fadf 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f005 f809 	bl	80060e8 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_TEST_MODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000042c 	.word	0x2000042c
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000430 	.word	0x20000430

080010f8 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f004 fff2 	bl	80060e8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f006 fab7 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f004 ffe1 	bl	80060e8 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000042c 	.word	0x2000042c
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000430 	.word	0x20000430

08001148 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001150:	f004 ffca 	bl	80060e8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b09      	cmp	r3, #9
 800115e:	d911      	bls.n	8001184 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 800116a:	212a      	movs	r1, #42	; 0x2a
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 fa8f 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001172:	f004 ffb9 	bl	80060e8 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 800117a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
		return;
 8001182:	bf00      	nop
	}
}
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000042c 	.word	0x2000042c
 8001190:	20000010 	.word	0x20000010
 8001194:	20000430 	.word	0x20000430

08001198 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 80011a0:	f004 ffa2 	bl	80060e8 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d911      	bls.n	80011d4 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_IDLE+0x48>)
 80011ba:	212a      	movs	r1, #42	; 0x2a
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 fa67 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c2:	f004 ff91 	bl	80060e8 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011ca:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_IDLE+0x4c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
		return;
 80011d2:	bf00      	nop
	}
}
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000042c 	.word	0x2000042c
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000430 	.word	0x20000430

080011e8 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011f0:	f004 ff7a 	bl	80060e8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001200:	d311      	bcc.n	8001226 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <ENDEFF_GRIPPER_PICK+0x48>)
 800120c:	212a      	movs	r1, #42	; 0x2a
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f006 fa3e 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001214:	f004 ff68 	bl	80060e8 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 800121c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
		return;
 8001224:	bf00      	nop
	}
}
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000042c 	.word	0x2000042c
 8001230:	20000018 	.word	0x20000018
 8001234:	20000430 	.word	0x20000430

08001238 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001240:	f004 ff52 	bl	80060e8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001250:	d311      	bcc.n	8001276 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2302      	movs	r3, #2
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <ENDEFF_GRIPPER_PLACE+0x48>)
 800125c:	212a      	movs	r1, #42	; 0x2a
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f006 fa16 	bl	8007690 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001264:	f004 ff40 	bl	80060e8 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 800126c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <ENDEFF_GRIPPER_PLACE+0x4c>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
		return;
 8001274:	bf00      	nop
	}
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000042c 	.word	0x2000042c
 8001280:	2000001c 	.word	0x2000001c
 8001284:	20000430 	.word	0x20000430

08001288 <ENE_I2C_UPDATE>:

void ENE_I2C_UPDATE(int16_t *DataFrame, I2C_HandleTypeDef *hi2c, uint8_t reinit) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]
	static uint8_t feedback_flag;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;

	if (reinit) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <ENE_I2C_UPDATE+0x20>
		END_EFFECTOR_STATE = INIT;
 800129c:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		feedback_flag = 0;
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	}

	if (feedback_flag && (HAL_GetTick() - feedback_delay > 2200)) {
 80012a8:	4ba4      	ldr	r3, [pc, #656]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <ENE_I2C_UPDATE+0x48>
 80012b0:	f004 ff1a 	bl	80060e8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f640 0298 	movw	r2, #2200	; 0x898
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d905      	bls.n	80012d0 <ENE_I2C_UPDATE+0x48>
		feedback_flag = 0;
 80012c4:	4b9d      	ldr	r3, [pc, #628]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		*DataFrame = 0b0010;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2202      	movs	r2, #2
 80012ce:	801a      	strh	r2, [r3, #0]
	}

	switch (END_EFFECTOR_STATE) {
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f200 813c 	bhi.w	8001552 <ENE_I2C_UPDATE+0x2ca>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <ENE_I2C_UPDATE+0x58>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	0800134f 	.word	0x0800134f
 80012e8:	080013b3 	.word	0x080013b3
 80012ec:	08001497 	.word	0x08001497
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00e      	beq.n	800131e <ENE_I2C_UPDATE+0x96>
			ENDEFF_TEST_MODE(hi2c);
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff fed1 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	f040 8110 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = TEST;
 8001310:	4b89      	ldr	r3, [pc, #548]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800131c:	e108      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8100 	beq.w	8001530 <ENE_I2C_UPDATE+0x2a8>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f7ff ff09 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	f040 80f8 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = RUNMODE;
 8001340:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001342:	2202      	movs	r2, #2
 8001344:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
		break;
 800134c:	e0f0      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <ENE_I2C_UPDATE+0xf4>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff feca 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80e3 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = INIT;
 800136e:	4b72      	ldr	r3, [pc, #456]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800137a:	e0db      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80d3 	beq.w	8001534 <ENE_I2C_UPDATE+0x2ac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff feb2 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fed7 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f040 80c8 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = RUNMODE;
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		break;
 80013b0:	e0c0      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10e      	bne.n	80013e0 <ENE_I2C_UPDATE+0x158>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fee8 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 80bd 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = INIT;
 80013d2:	4b59      	ldr	r3, [pc, #356]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 80013de:	e0b5      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <ENE_I2C_UPDATE+0x186>
			ENDEFF_TEST_MODE(hi2c);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff fe59 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 80a6 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = TEST;
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001406:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
		break;
 800140c:	e09e      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <ENE_I2C_UPDATE+0x1ca>
			ENDEFF_GRIPPER_PICK(hi2c);
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fee2 	bl	80011e8 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 808f 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				feedback_flag = 1;
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001434:	f004 fe58 	bl	80060e8 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800143c:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = PICKED;
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
				picked = 1;
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
		break;
 8001450:	e07c      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	b29b      	uxth	r3, r3
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d074      	beq.n	800154c <ENE_I2C_UPDATE+0x2c4>
			if (picked == 1) {
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d170      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
				ENDEFF_GRIPPER_PLACE(hi2c);
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fee4 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d169      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
					feedback_flag = 1;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
					feedback_delay = HAL_GetTick();
 800147e:	f004 fe33 	bl	80060e8 <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 8001486:	6013      	str	r3, [r2, #0]
					complete = 0;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
					picked = 0;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		break;
 8001494:	e05a      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <ENE_I2C_UPDATE+0x23a>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fe76 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d14d      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = INIT;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80014c0:	e046      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b0001) == 1) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <ENE_I2C_UPDATE+0x266>
			ENDEFF_TEST_MODE(hi2c);
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fde8 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d137      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = TEST;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		break;
 80014ec:	e030      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d028      	beq.n	8001550 <ENE_I2C_UPDATE+0x2c8>
			ENDEFF_GRIPPER_PLACE(hi2c);
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7ff fe9a 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d121      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				feedback_flag = 1;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001512:	f004 fde9 	bl	80060e8 <HAL_GetTick>
 8001516:	4603      	mov	r3, r0
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800151a:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = RUNMODE;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
				picked = 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		break;
 800152e:	e00f      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		break;
 8001530:	bf00      	nop
 8001532:	e00e      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001534:	bf00      	nop
 8001536:	e00c      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
 8001538:	20000434 	.word	0x20000434
 800153c:	20000435 	.word	0x20000435
 8001540:	20000438 	.word	0x20000438
 8001544:	20000430 	.word	0x20000430
 8001548:	2000043c 	.word	0x2000043c
		break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop

0800155c <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4903      	ldr	r1, [pc, #12]	; (8001570 <UARTInterruptConfig+0x14>)
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <UARTInterruptConfig+0x18>)
 8001566:	f009 fa33 	bl	800a9d0 <HAL_UART_Receive_IT>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000440 	.word	0x20000440
 8001574:	20001da4 	.word	0x20001da4

08001578 <Joystick_Transmit>:

void Joystick_Transmit(int16_t Position_x, int16_t Position_y, uint8_t PicknPlace) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	70fb      	strb	r3, [r7, #3]
	static int LastPos_x;
	static int LastPos_y;
	static int LastState;
	static uint8_t data[5];

	data[0] = Position_x >> 8;
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	121b      	asrs	r3, r3, #8
 8001590:	b21b      	sxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <Joystick_Transmit+0xac>)
 8001596:	701a      	strb	r2, [r3, #0]
	data[1] = Position_x & 0xFF;
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <Joystick_Transmit+0xac>)
 800159e:	705a      	strb	r2, [r3, #1]
	data[2] = Position_y >> 8;
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	121b      	asrs	r3, r3, #8
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <Joystick_Transmit+0xac>)
 80015ac:	709a      	strb	r2, [r3, #2]
	data[3] = Position_y & 0xFF;
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <Joystick_Transmit+0xac>)
 80015b4:	70da      	strb	r2, [r3, #3]
	data[4] = PicknPlace;
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <Joystick_Transmit+0xac>)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	7113      	strb	r3, [r2, #4]

	if (Position_x != LastPos_x || Position_y != LastPos_y || PicknPlace != LastState) {
 80015bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <Joystick_Transmit+0xb0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10a      	bne.n	80015de <Joystick_Transmit+0x66>
 80015c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <Joystick_Transmit+0xb4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d104      	bne.n	80015de <Joystick_Transmit+0x66>
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <Joystick_Transmit+0xb8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d012      	beq.n	8001604 <Joystick_Transmit+0x8c>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() - timestamp > 50) {
 80015de:	f004 fd83 	bl	80060e8 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <Joystick_Transmit+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b32      	cmp	r3, #50	; 0x32
 80015ec:	d916      	bls.n	800161c <Joystick_Transmit+0xa4>
			timestamp = HAL_GetTick() + 50;
 80015ee:	f004 fd7b 	bl	80060e8 <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <Joystick_Transmit+0xbc>)
 80015f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, data, sizeof(data));
 80015fa:	2205      	movs	r2, #5
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <Joystick_Transmit+0xac>)
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <Joystick_Transmit+0xc0>)
 8001600:	f009 fa16 	bl	800aa30 <HAL_UART_Transmit_DMA>
		} else {
			return;
		}
	}

	LastPos_x = Position_x;
 8001604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <Joystick_Transmit+0xb0>)
 800160a:	6013      	str	r3, [r2, #0]
	LastPos_y = Position_y;
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <Joystick_Transmit+0xb4>)
 8001612:	6013      	str	r3, [r2, #0]
	LastState = PicknPlace;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <Joystick_Transmit+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e000      	b.n	800161e <Joystick_Transmit+0xa6>
			return;
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000444 	.word	0x20000444
 8001628:	2000044c 	.word	0x2000044c
 800162c:	20000450 	.word	0x20000450
 8001630:	20000454 	.word	0x20000454
 8001634:	20000458 	.word	0x20000458
 8001638:	20001da4 	.word	0x20001da4

0800163c <Joystick_Received>:

void Joystick_Received(int *receivedByte) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	static int count;
	static uint8_t tempData[6];
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <Joystick_Received+0x144>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Joystick_Received+0x16>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d009      	beq.n	8001664 <Joystick_Received+0x28>
 8001650:	e08d      	b.n	800176e <Joystick_Received+0x132>
	case (START):
		if (RxBuffer[0] == 69) {
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <Joystick_Received+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b45      	cmp	r3, #69	; 0x45
 8001658:	f040 8088 	bne.w	800176c <Joystick_Received+0x130>
			Joy_State = COUNT;
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <Joystick_Received+0x144>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001662:	e083      	b.n	800176c <Joystick_Received+0x130>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <Joystick_Received+0x148>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b45      	cmp	r3, #69	; 0x45
 800166a:	d111      	bne.n	8001690 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(tempData); i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e007      	b.n	8001682 <Joystick_Received+0x46>
				tempData[i] = 0;
 8001672:	4a45      	ldr	r2, [pc, #276]	; (8001788 <Joystick_Received+0x14c>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d9f4      	bls.n	8001672 <Joystick_Received+0x36>
			}
			count = 0;
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <Joystick_Received+0x150>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			joystick_callback();
		} else {
			tempData[count] = RxBuffer[0];
			count++;
		}
		break;
 800168e:	e06e      	b.n	800176e <Joystick_Received+0x132>
		} else if (RxBuffer[0] == 71 && count < sizeof(tempData)) {
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <Joystick_Received+0x148>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	d115      	bne.n	80016c4 <Joystick_Received+0x88>
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <Joystick_Received+0x150>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d811      	bhi.n	80016c4 <Joystick_Received+0x88>
			for (int i = 0; i < sizeof(tempData); i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	e007      	b.n	80016b6 <Joystick_Received+0x7a>
				tempData[i] = 0;
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <Joystick_Received+0x14c>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d9f4      	bls.n	80016a6 <Joystick_Received+0x6a>
			count = 0;
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <Joystick_Received+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e052      	b.n	800176a <Joystick_Received+0x12e>
		} else if (RxBuffer[0] == 71 && count == 6) {
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <Joystick_Received+0x148>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b47      	cmp	r3, #71	; 0x47
 80016ca:	d142      	bne.n	8001752 <Joystick_Received+0x116>
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <Joystick_Received+0x150>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d13e      	bne.n	8001752 <Joystick_Received+0x116>
			count = 0;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <Joystick_Received+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			receivedByte[0] = (tempData[1] << 8) | tempData[0];
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <Joystick_Received+0x14c>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <Joystick_Received+0x14c>)
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
			receivedByte[1] = (tempData[3] << 8) | tempData[2];
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <Joystick_Received+0x14c>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	021a      	lsls	r2, r3, #8
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <Joystick_Received+0x14c>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	4619      	mov	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
			receivedByte[2] = tempData[4];
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <Joystick_Received+0x14c>)
 8001700:	791a      	ldrb	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3308      	adds	r3, #8
 8001706:	601a      	str	r2, [r3, #0]
			receivedByte[3] = tempData[5];
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <Joystick_Received+0x14c>)
 800170a:	795a      	ldrb	r2, [r3, #5]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330c      	adds	r3, #12
 8001710:	601a      	str	r2, [r3, #0]
			if (receivedByte[0] > UINT16_MAX / 2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800171a:	db06      	blt.n	800172a <Joystick_Received+0xee>
				receivedByte[0] -= UINT16_MAX + 1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00d      	b.n	8001746 <Joystick_Received+0x10a>
			else if (receivedByte[1] > UINT16_MAX / 2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001734:	db07      	blt.n	8001746 <Joystick_Received+0x10a>
				receivedByte[1] -= UINT16_MAX + 1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001744:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <Joystick_Received+0x144>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			joystick_callback();
 800174c:	f002 f9f0 	bl	8003b30 <joystick_callback>
		} else if (RxBuffer[0] == 71 && count == 6) {
 8001750:	e00b      	b.n	800176a <Joystick_Received+0x12e>
			tempData[count] = RxBuffer[0];
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <Joystick_Received+0x150>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <Joystick_Received+0x148>)
 8001758:	7811      	ldrb	r1, [r2, #0]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <Joystick_Received+0x14c>)
 800175c:	54d1      	strb	r1, [r2, r3]
			count++;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <Joystick_Received+0x150>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <Joystick_Received+0x150>)
 8001766:	6013      	str	r3, [r2, #0]
		break;
 8001768:	e001      	b.n	800176e <Joystick_Received+0x132>
 800176a:	e000      	b.n	800176e <Joystick_Received+0x132>
		break;
 800176c:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <Joystick_Received+0x148>)
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <Joystick_Received+0x154>)
 8001774:	f009 f92c 	bl	800a9d0 <HAL_UART_Receive_IT>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000045c 	.word	0x2000045c
 8001784:	20000440 	.word	0x20000440
 8001788:	20000460 	.word	0x20000460
 800178c:	20000468 	.word	0x20000468
 8001790:	20001da4 	.word	0x20001da4

08001794 <lowpass_filter>:
}

//float C1 = ComputeLowpassConstant(20, 10000);
//float C2 = ComputeLowpassConstant(10, 10000);

void lowpass_filter(int QEIReadRaw_now, float *velocity_measure_filter_now, float *acceleration_measure_filter_now){
 8001794:	b480      	push	{r7}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    static int QEIReadRaw_past = 0;
    static float velocity_measure_filter_past = 0;
    float dt = 0.0001;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <lowpass_filter+0xc4>)
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

    float C1 = 20.0 / (20.0 + 10000.0);
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <lowpass_filter+0xc8>)
 80017a6:	623b      	str	r3, [r7, #32]
    float C2 = 10.0 / (10.0 + 10000.0);
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <lowpass_filter+0xcc>)
 80017aa:	61fb      	str	r3, [r7, #28]

    float velocity_measure = (QEIReadRaw_now - QEIReadRaw_past) / dt;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <lowpass_filter+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	edc7 7a06 	vstr	s15, [r7, #24]
    *velocity_measure_filter_now = (C1 * velocity_measure) + ((1 - C1) * (*velocity_measure_filter_now));
 80017c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80017cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80017dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	edc3 7a00 	vstr	s15, [r3]

    float acceleration_measure = (*velocity_measure_filter_now - velocity_measure_filter_past) / dt;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <lowpass_filter+0xd4>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001804:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a05 	vstr	s15, [r7, #20]
    *acceleration_measure_filter_now = (C2 * acceleration_measure) + ((1 - C2) * (*acceleration_measure_filter_now));
 8001810:	ed97 7a07 	vldr	s14, [r7, #28]
 8001814:	edd7 7a05 	vldr	s15, [r7, #20]
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001820:	edd7 7a07 	vldr	s15, [r7, #28]
 8001824:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edc3 7a00 	vstr	s15, [r3]

    velocity_measure_filter_past = *velocity_measure_filter_now;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a09      	ldr	r2, [pc, #36]	; (8001868 <lowpass_filter+0xd4>)
 8001842:	6013      	str	r3, [r2, #0]

    QEIReadRaw_past = QEIReadRaw_now;
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <lowpass_filter+0xd0>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	38d1b717 	.word	0x38d1b717
 800185c:	3b02cf75 	.word	0x3b02cf75
 8001860:	3a82f0e9 	.word	0x3a82f0e9
 8001864:	2000046c 	.word	0x2000046c
 8001868:	20000470 	.word	0x20000470

0800186c <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <modbus_1t5_Timeout+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	751a      	strb	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000474 	.word	0x20000474

0800188c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <modbus_3t5_Timeout+0x1c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	755a      	strb	r2, [r3, #21]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000474 	.word	0x20000474

080018ac <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <modbus_UART_Recived+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <modbus_UART_Recived+0x60>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	b289      	uxth	r1, r1
 80018ca:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80018ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018d2:	d210      	bcs.n	80018f6 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <modbus_UART_Recived+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d8      	ldr	r0, [r3, #12]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <modbus_UART_Recived+0x60>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <modbus_UART_Recived+0x60>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018e6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80018ea:	4413      	add	r3, r2
 80018ec:	3302      	adds	r3, #2
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f009 f86d 	bl	800a9d0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <modbus_UART_Recived+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000474 	.word	0x20000474

08001910 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <Modbus_init+0x9c>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <Modbus_init+0x9c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <Modbus_init+0x9c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <Modbus_init+0xa0>)
 8001930:	2114      	movs	r1, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f008 f8c4 	bl	8009ac0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <Modbus_init+0x9c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Modbus_init+0xa4>)
 8001940:	210e      	movs	r1, #14
 8001942:	4618      	mov	r0, r3
 8001944:	f008 f8bc 	bl	8009ac0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <Modbus_init+0x9c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <Modbus_init+0xa8>)
 8001950:	2103      	movs	r1, #3
 8001952:	4618      	mov	r0, r3
 8001954:	f008 ff94 	bl	800a880 <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Modbus_init+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d8      	ldr	r0, [r3, #12]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <Modbus_init+0x9c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <Modbus_init+0x9c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800196a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800196e:	4413      	add	r3, r2
 8001970:	3302      	adds	r3, #2
 8001972:	2201      	movs	r2, #1
 8001974:	4619      	mov	r1, r3
 8001976:	f009 f82b 	bl	800a9d0 <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Modbus_init+0x9c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d10c      	bne.n	80019a4 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <Modbus_init+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4618      	mov	r0, r3
 8001992:	f006 fed3 	bl	800873c <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <Modbus_init+0x9c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fb88 	bl	80090b4 <HAL_TIM_OnePulse_Start_IT>
	}

}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000474 	.word	0x20000474
 80019b0:	0800186d 	.word	0x0800186d
 80019b4:	0800188d 	.word	0x0800188d
 80019b8:	080018ad 	.word	0x080018ad

080019bc <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80019c8:	23ff      	movs	r3, #255	; 0xff
 80019ca:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80019d0:	e013      	b.n	80019fa <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	4053      	eors	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <CRC16+0x64>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4053      	eors	r3, r2
 80019ee:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <CRC16+0x68>)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80019fa:	883b      	ldrh	r3, [r7, #0]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	803a      	strh	r2, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e6      	bne.n	80019d2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	b29b      	uxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000120 	.word	0x20000120
 8001a24:	20000020 	.word	0x20000020

08001a28 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7e1b      	ldrb	r3, [r3, #24]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d80a      	bhi.n	8001a50 <Modbus_Protocal_Worker+0x28>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <Modbus_Protocal_Worker+0x18>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a5b 	.word	0x08001a5b
 8001a44:	08001bfb 	.word	0x08001bfb
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001b0d 	.word	0x08001b0d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001a50:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]
		break;
 8001a58:	e0e8      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001a66:	f000 f9dd 	bl	8001e24 <Modbus_Emission>
 8001a6a:	e01c      	b.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 8001a6c:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	7d9b      	ldrb	r3, [r3, #22]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001a86:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	f040 80b3 	bne.w	8001c1e <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68d8      	ldr	r0, [r3, #12]
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ad4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f008 ff76 	bl	800a9d0 <HAL_UART_Receive_IT>
		}
		break;
 8001ae4:	e09b      	b.n	8001c1e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	7d1b      	ldrb	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8098 	beq.w	8001c22 <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	22fe      	movs	r2, #254	; 0xfe
 8001b00:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001b0a:	e08a      	b.n	8001c22 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	7d9b      	ldrb	r3, [r3, #22]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b32:	f113 0f02 	cmn.w	r3, #2
 8001b36:	d150      	bne.n	8001bda <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b50:	3b02      	subs	r3, #2
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff ff31 	bl	80019bc <CRC16>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b5e:	793a      	ldrb	r2, [r7, #4]
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10c      	bne.n	8001b92 <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001b78:	797a      	ldrb	r2, [r7, #5]
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b86:	3b01      	subs	r3, #1
 8001b88:	440b      	add	r3, r1
 8001b8a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d004      	beq.n	8001b9c <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	75da      	strb	r2, [r3, #23]
				break;
 8001b9a:	e047      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d113      	bne.n	8001bd6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f103 0019 	add.w	r0, r3, #25
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f203 2372 	addw	r3, r3, #626	; 0x272
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f00a f8b8 	bl	800bd40 <memcpy>

			//execute command
			Modbus_frame_response();
 8001bd0:	f000 f910 	bl	8001df4 <Modbus_frame_response>
 8001bd4:	e001      	b.n	8001bda <Modbus_Protocal_Worker+0x1b2>
				break;
 8001bd6:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001bd8:	e028      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	7d5b      	ldrb	r3, [r3, #21]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 ff9a 	bl	800ab2c <HAL_UART_AbortReceive>
		break;
 8001bf8:	e015      	b.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d10f      	bne.n	8001c2a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	761a      	strb	r2, [r3, #24]
		break;
 8001c1c:	e005      	b.n	8001c2a <Modbus_Protocal_Worker+0x202>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e004      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c2a:	bf00      	nop
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000474 	.word	0x20000474

08001c38 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	7e9b      	ldrb	r3, [r3, #26]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	7edb      	ldrb	r3, [r3, #27]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d903      	bls.n	8001c6a <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f8a4 	bl	8001db0 <ModbusErrorReply>
		return;
 8001c68:	e023      	b.n	8001cb2 <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	7f12      	ldrb	r2, [r2, #28]
 8001c7c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	7f52      	ldrb	r2, [r2, #29]
 8001c90:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f203 1045 	addw	r0, r3, #325	; 0x145
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3319      	adds	r3, #25
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f00a f84c 	bl	800bd40 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2205      	movs	r2, #5
 8001cae:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000474 	.word	0x20000474

08001cbc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <modbusRead1Register+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <modbusRead1Register+0xf0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	7f5b      	ldrb	r3, [r3, #29]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <modbusRead1Register+0xf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <modbusRead1Register+0xf0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7edb      	ldrb	r3, [r3, #27]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <modbusRead1Register+0x42>
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	2b7d      	cmp	r3, #125	; 0x7d
 8001cfc:	d903      	bls.n	8001d06 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f856 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d04:	e04e      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001d06:	88ba      	ldrh	r2, [r7, #4]
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <modbusRead1Register+0xf0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d808      	bhi.n	8001d24 <modbusRead1Register+0x68>
 8001d12:	88ba      	ldrh	r2, [r7, #4]
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <modbusRead1Register+0xf0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d903      	bls.n	8001d2c <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001d24:	2002      	movs	r0, #2
 8001d26:	f000 f843 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d2a:	e03b      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <modbusRead1Register+0xf0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <modbusRead1Register+0xf0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0052      	lsls	r2, r2, #1
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d46:	2400      	movs	r4, #0
 8001d48:	e020      	b.n	8001d8c <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <modbusRead1Register+0xf0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	4423      	add	r3, r4
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	18d1      	adds	r1, r2, r3
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <modbusRead1Register+0xf0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	1c63      	adds	r3, r4, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	7849      	ldrb	r1, [r1, #1]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <modbusRead1Register+0xf0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	4423      	add	r3, r4
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <modbusRead1Register+0xf0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	0063      	lsls	r3, r4, #1
 8001d7e:	3303      	adds	r3, #3
 8001d80:	7809      	ldrb	r1, [r1, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d8a:	3401      	adds	r4, #1
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	dbdb      	blt.n	8001d4a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <modbusRead1Register+0xf0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000474 	.word	0x20000474

08001db0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	7e5a      	ldrb	r2, [r3, #25]
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000474 	.word	0x20000474

08001df4 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <Modbus_frame_response+0x2c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d004      	beq.n	8001e0c <Modbus_frame_response+0x18>
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d105      	bne.n	8001e12 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001e06:	f7ff ff17 	bl	8001c38 <modbusWrite1Register>
		break;
 8001e0a:	e006      	b.n	8001e1a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001e0c:	f7ff ff56 	bl	8001cbc <modbusRead1Register>
		break;
 8001e10:	e003      	b.n	8001e1a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff ffcc 	bl	8001db0 <ModbusErrorReply>
		break;
 8001e18:	bf00      	nop

	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000474 	.word	0x20000474

08001e24 <Modbus_Emission>:

void Modbus_Emission() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d15e      	bne.n	8001ef8 <Modbus_Emission+0xd4>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e62:	461a      	mov	r2, r3
 8001e64:	f009 ff6c 	bl	800bd40 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3203      	adds	r2, #3
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e8e:	3b02      	subs	r3, #2
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd92 	bl	80019bc <CRC16>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	7939      	ldrb	r1, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	7979      	ldrb	r1, [r7, #5]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d10d      	bne.n	8001ef8 <Modbus_Emission+0xd4>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68d8      	ldr	r0, [r3, #12]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f008 fd9c 	bl	800aa30 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <Modbus_Emission+0xfc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000474 	.word	0x20000474

08001f24 <PositionControlPID>:

// PRIVATE TYPEDEF ================================================================================

// USER CODE ======================================================================================

void PositionControlPID(float trajectory_setpoint, float final_setpoint, float position_now, float Kp, float Ki, float Kd, float *PID_out) {
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f2e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001f32:	ed87 1a05 	vstr	s2, [r7, #20]
 8001f36:	edc7 1a04 	vstr	s3, [r7, #16]
 8001f3a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001f3e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001f42:	6078      	str	r0, [r7, #4]
	static float first = 0;
	static float second = 0;
	static float third = 0;

	// error position
	error_first = trajectory_setpoint - position_now;
 8001f44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <PositionControlPID+0x100>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
	//Position.error[0] = PID_position - QEIReadRaw_now;

	// first error
	first = (Kp + Ki + Kd) * error_first;
 8001f56:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <PositionControlPID+0x100>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <PositionControlPID+0x104>)
 8001f76:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second = (Kp + (2 * Kd)) * error_second;
 8001f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <PositionControlPID+0x108>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <PositionControlPID+0x10c>)
 8001f96:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third = Kd * error_third;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <PositionControlPID+0x110>)
 8001f9c:	ed93 7a00 	vldr	s14, [r3]
 8001fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <PositionControlPID+0x114>)
 8001faa:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	*PID_out += first - second + third;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	ed93 7a00 	vldr	s14, [r3]
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <PositionControlPID+0x104>)
 8001fb6:	edd3 6a00 	vldr	s13, [r3]
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <PositionControlPID+0x10c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <PositionControlPID+0x114>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edc3 7a00 	vstr	s15, [r3]

	if (error_first == 0 && (final_setpoint - trajectory_setpoint) == 0) {
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <PositionControlPID+0x100>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d10e      	bne.n	8002006 <PositionControlPID+0xe2>
 8001fe8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d103      	bne.n	8002006 <PositionControlPID+0xe2>
		*PID_out = 0; // Reset voltage to 0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
	}

	// set present to past
	error_third = error_second;
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <PositionControlPID+0x108>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <PositionControlPID+0x110>)
 800200c:	6013      	str	r3, [r2, #0]
	error_second = error_first;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <PositionControlPID+0x100>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <PositionControlPID+0x108>)
 8002014:	6013      	str	r3, [r2, #0]

}
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000478 	.word	0x20000478
 8002028:	2000047c 	.word	0x2000047c
 800202c:	20000480 	.word	0x20000480
 8002030:	20000484 	.word	0x20000484
 8002034:	20000488 	.word	0x20000488
 8002038:	2000048c 	.word	0x2000048c

0800203c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002042:	463b      	mov	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <MX_ADC1_Init+0x9c>)
 8002052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_ADC1_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <MX_ADC1_Init+0x98>)
 800206a:	2200      	movs	r2, #0
 800206c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002078:	2200      	movs	r2, #0
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_ADC1_Init+0x98>)
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <MX_ADC1_Init+0xa0>)
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_ADC1_Init+0x98>)
 800208a:	2201      	movs	r2, #1
 800208c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_ADC1_Init+0x98>)
 8002098:	2201      	movs	r2, #1
 800209a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <MX_ADC1_Init+0x98>)
 800209e:	f004 f853 	bl	8006148 <HAL_ADC_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020a8:	f002 fda0 	bl	8004bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020ac:	230a      	movs	r3, #10
 80020ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_ADC1_Init+0x98>)
 80020be:	f004 f887 	bl	80061d0 <HAL_ADC_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020c8:	f002 fd90 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000490 	.word	0x20000490
 80020d8:	40012000 	.word	0x40012000
 80020dc:	0f000001 	.word	0x0f000001

080020e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_ADC_MspInit+0x7c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d127      	bne.n	8002152 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_ADC_MspInit+0x80>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_ADC_MspInit+0x80>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800213a:	2303      	movs	r3, #3
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213e:	2303      	movs	r3, #3
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_ADC_MspInit+0x84>)
 800214e:	f004 ff8d 	bl	800706c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40012000 	.word	0x40012000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020800 	.word	0x40020800

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <MX_DMA_Init+0x78>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <MX_DMA_Init+0x78>)
 8002178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_DMA_Init+0x78>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_DMA_Init+0x78>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <MX_DMA_Init+0x78>)
 8002194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_DMA_Init+0x78>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	200f      	movs	r0, #15
 80021ac:	f004 fb19 	bl	80067e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021b0:	200f      	movs	r0, #15
 80021b2:	f004 fb32 	bl	800681a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2011      	movs	r0, #17
 80021bc:	f004 fb11 	bl	80067e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021c0:	2011      	movs	r0, #17
 80021c2:	f004 fb2a 	bl	800681a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2046      	movs	r0, #70	; 0x46
 80021cc:	f004 fb09 	bl	80067e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021d0:	2046      	movs	r0, #70	; 0x46
 80021d2:	f004 fb22 	bl	800681a <HAL_NVIC_EnableIRQ>

}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <MX_GPIO_Init+0x130>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a44      	ldr	r2, [pc, #272]	; (8002314 <MX_GPIO_Init+0x130>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <MX_GPIO_Init+0x130>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <MX_GPIO_Init+0x130>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <MX_GPIO_Init+0x130>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <MX_GPIO_Init+0x130>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <MX_GPIO_Init+0x130>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a36      	ldr	r2, [pc, #216]	; (8002314 <MX_GPIO_Init+0x130>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <MX_GPIO_Init+0x130>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <MX_GPIO_Init+0x130>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <MX_GPIO_Init+0x130>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <MX_GPIO_Init+0x130>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002270:	4829      	ldr	r0, [pc, #164]	; (8002318 <MX_GPIO_Init+0x134>)
 8002272:	f005 f897 	bl	80073a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800227c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4823      	ldr	r0, [pc, #140]	; (800231c <MX_GPIO_Init+0x138>)
 800228e:	f004 feed 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002292:	2304      	movs	r3, #4
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <MX_GPIO_Init+0x138>)
 80022a6:	f004 fee1 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022aa:	2308      	movs	r3, #8
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4817      	ldr	r0, [pc, #92]	; (800231c <MX_GPIO_Init+0x138>)
 80022c0:	f004 fed4 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80022c4:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <MX_GPIO_Init+0x134>)
 80022de:	f004 fec5 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	480a      	ldr	r0, [pc, #40]	; (8002320 <MX_GPIO_Init+0x13c>)
 80022f8:	f004 feb8 	bl	800706c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2009      	movs	r0, #9
 8002302:	f004 fa6e 	bl	80067e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002306:	2009      	movs	r0, #9
 8002308:	f004 fa87 	bl	800681a <HAL_NVIC_EnableIRQ>

}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020800 	.word	0x40020800
 8002320:	40020400 	.word	0x40020400

08002324 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_I2C1_Init+0x50>)
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <MX_I2C1_Init+0x54>)
 800232c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_I2C1_Init+0x50>)
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <MX_I2C1_Init+0x58>)
 8002332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_I2C1_Init+0x50>)
 8002342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_I2C1_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_I2C1_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_I2C1_Init+0x50>)
 8002362:	f005 f851 	bl	8007408 <HAL_I2C_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800236c:	f002 fc3e 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200004d8 	.word	0x200004d8
 8002378:	40005400 	.word	0x40005400
 800237c:	000186a0 	.word	0x000186a0

08002380 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_I2C_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12b      	bne.n	80023fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c2:	2312      	movs	r3, #18
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ce:	2304      	movs	r3, #4
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <HAL_I2C_MspInit+0x8c>)
 80023da:	f004 fe47 	bl	800706c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_I2C_MspInit+0x88>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40005400 	.word	0x40005400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400

08002410 <motor>:
int32_t getLocalPosition();
int32_t getRawPosition();

// USER CODE ======================================================================================

void motor(float voltage) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 800241a:	edd7 7a01 	vldr	s15, [r7, #4]
 800241e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	dd11      	ble.n	800244c <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8002428:	edd7 7a01 	vldr	s15, [r7, #4]
 800242c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80024c0 <motor+0xb0>
 8002430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	dd01      	ble.n	800243e <motor+0x2e>
			voltage = 25000;
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <motor+0xb4>)
 800243c:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002444:	4820      	ldr	r0, [pc, #128]	; (80024c8 <motor+0xb8>)
 8002446:	f004 ffad 	bl	80073a4 <HAL_GPIO_WritePin>
 800244a:	e02b      	b.n	80024a4 <motor+0x94>
	} else if (voltage < 0) {
 800244c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d521      	bpl.n	800249e <motor+0x8e>
		// backward
		voltage *= -1.0;
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f87c 	bl	8000558 <__aeabi_f2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fbc6 	bl	8000bf8 <__aeabi_d2f>
 800246c:	4603      	mov	r3, r0
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef1 7a67 	vneg.f32	s15, s15
 8002476:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 800247a:	edd7 7a01 	vldr	s15, [r7, #4]
 800247e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024c0 <motor+0xb0>
 8002482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dd01      	ble.n	8002490 <motor+0x80>
			voltage = 25000;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <motor+0xb4>)
 800248e:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <motor+0xb8>)
 8002498:	f004 ff84 	bl	80073a4 <HAL_GPIO_WritePin>
 800249c:	e002      	b.n	80024a4 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <motor+0xbc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	ee17 2a90 	vmov	r2, s15
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	46c35000 	.word	0x46c35000
 80024c4:	46c35000 	.word	0x46c35000
 80024c8:	40020000 	.word	0x40020000
 80024cc:	2000197c 	.word	0x2000197c

080024d0 <getLocalPosition>:

int32_t getLocalPosition() {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2) - homeoffset;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <getLocalPosition+0x1c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <getLocalPosition+0x20>)
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	1a9b      	subs	r3, r3, r2
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20001a30 	.word	0x20001a30
 80024f0:	2000190c 	.word	0x2000190c

080024f4 <getRawPosition>:

int32_t getRawPosition() {
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <getRawPosition+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	20001a30 	.word	0x20001a30
 800250c:	00000000 	.word	0x00000000

08002510 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8002510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002514:	b0a2      	sub	sp, #136	; 0x88
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800252a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002534:	3208      	adds	r2, #8
 8002536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002544:	3210      	adds	r2, #16
 8002546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 800254e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8002552:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002556:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800255a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800255e:	eeb0 1a46 	vmov.f32	s2, s12
 8002562:	eef0 1a66 	vmov.f32	s3, s13
 8002566:	eeb0 0a47 	vmov.f32	s0, s14
 800256a:	eef0 0a67 	vmov.f32	s1, s15
 800256e:	f000 fba7 	bl	8002cc0 <subtractCoordinates>
 8002572:	eeb0 7a40 	vmov.f32	s14, s0
 8002576:	eef0 7a60 	vmov.f32	s15, s1
 800257a:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800257e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 8002582:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8002586:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800258a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800258e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002592:	eeb0 1a46 	vmov.f32	s2, s12
 8002596:	eef0 1a66 	vmov.f32	s3, s13
 800259a:	eeb0 0a47 	vmov.f32	s0, s14
 800259e:	eef0 0a67 	vmov.f32	s1, s15
 80025a2:	f000 fb8d 	bl	8002cc0 <subtractCoordinates>
 80025a6:	eeb0 7a40 	vmov.f32	s14, s0
 80025aa:	eef0 7a60 	vmov.f32	s15, s1
 80025ae:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80025b2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 80025b6:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80025ba:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80025be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025c6:	eeb0 1a46 	vmov.f32	s2, s12
 80025ca:	eef0 1a66 	vmov.f32	s3, s13
 80025ce:	eeb0 0a47 	vmov.f32	s0, s14
 80025d2:	eef0 0a67 	vmov.f32	s1, s15
 80025d6:	f000 fb73 	bl	8002cc0 <subtractCoordinates>
 80025da:	eeb0 7a40 	vmov.f32	s14, s0
 80025de:	eef0 7a60 	vmov.f32	s15, s1
 80025e2:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80025e6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 80025ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025f2:	eeb0 0a47 	vmov.f32	s0, s14
 80025f6:	eef0 0a67 	vmov.f32	s1, s15
 80025fa:	f000 fb9b 	bl	8002d34 <calculateNorm>
 80025fe:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8002602:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002606:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800260a:	eeb0 0a47 	vmov.f32	s0, s14
 800260e:	eef0 0a67 	vmov.f32	s1, s15
 8002612:	f000 fb8f 	bl	8002d34 <calculateNorm>
 8002616:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 800261a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800261e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	f000 fb83 	bl	8002d34 <calculateNorm>
 800262e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8002632:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002636:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800263a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	d534      	bpl.n	80026ae <localize+0x19e>
 8002644:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002648:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800264c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d52b      	bpl.n	80026ae <localize+0x19e>
 8002656:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800265a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800265e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	d522      	bpl.n	80026ae <localize+0x19e>
		// CASE 1
		*origin = point2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	461a      	mov	r2, r3
 800266c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002674:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 8002678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800267c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 8002688:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800268c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002690:	eeb0 0a47 	vmov.f32	s0, s14
 8002694:	eef0 0a67 	vmov.f32	s1, s15
 8002698:	f000 fb7f 	bl	8002d9a <negateCoordinate>
 800269c:	eeb0 7a40 	vmov.f32	s14, s0
 80026a0:	eef0 7a60 	vmov.f32	s15, s1
 80026a4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80026a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80026ac:	e134      	b.n	8002918 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80026ae:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026b2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	d53e      	bpl.n	800273e <localize+0x22e>
 80026c0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80026c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d535      	bpl.n	800273e <localize+0x22e>
 80026d2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026d6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d52c      	bpl.n	800273e <localize+0x22e>
		// CASE 2
		*origin = point3;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026f0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 80026f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80026f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002700:	eef0 0a67 	vmov.f32	s1, s15
 8002704:	f000 fb49 	bl	8002d9a <negateCoordinate>
 8002708:	eeb0 7a40 	vmov.f32	s14, s0
 800270c:	eef0 7a60 	vmov.f32	s15, s1
 8002710:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002714:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8002718:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800271c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002720:	eeb0 0a47 	vmov.f32	s0, s14
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	f000 fb37 	bl	8002d9a <negateCoordinate>
 800272c:	eeb0 7a40 	vmov.f32	s14, s0
 8002730:	eef0 7a60 	vmov.f32	s15, s1
 8002734:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002738:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800273c:	e0ec      	b.n	8002918 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 800273e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002742:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d52a      	bpl.n	80027a6 <localize+0x296>
 8002750:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002754:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	d521      	bpl.n	80027a6 <localize+0x296>
 8002762:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002766:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800276a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d518      	bpl.n	80027a6 <localize+0x296>
		// CASE 3
		*origin = point1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800277c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002780:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 8002784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002788:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800278c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002790:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 8002794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800279c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80027a4:	e0b8      	b.n	8002918 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80027a6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027aa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	d52a      	bpl.n	800280e <localize+0x2fe>
 80027b8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80027bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d521      	bpl.n	800280e <localize+0x2fe>
 80027ca:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027ce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d518      	bpl.n	800280e <localize+0x2fe>
		// CASE 4
		*origin = point1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027e8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 80027ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f8:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 80027fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002800:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002808:	e883 0003 	stmia.w	r3, {r0, r1}
 800280c:	e084      	b.n	8002918 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 800280e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002812:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	d53e      	bpl.n	800289e <localize+0x38e>
 8002820:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002824:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	d535      	bpl.n	800289e <localize+0x38e>
 8002832:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002836:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d52c      	bpl.n	800289e <localize+0x38e>
		// CASE 5
		*origin = point3;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800284c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002850:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 8002854:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002858:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800285c:	eeb0 0a47 	vmov.f32	s0, s14
 8002860:	eef0 0a67 	vmov.f32	s1, s15
 8002864:	f000 fa99 	bl	8002d9a <negateCoordinate>
 8002868:	eeb0 7a40 	vmov.f32	s14, s0
 800286c:	eef0 7a60 	vmov.f32	s15, s1
 8002870:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002874:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 8002878:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800287c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002880:	eeb0 0a47 	vmov.f32	s0, s14
 8002884:	eef0 0a67 	vmov.f32	s1, s15
 8002888:	f000 fa87 	bl	8002d9a <negateCoordinate>
 800288c:	eeb0 7a40 	vmov.f32	s14, s0
 8002890:	eef0 7a60 	vmov.f32	s15, s1
 8002894:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002898:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800289c:	e03c      	b.n	8002918 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 800289e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028a2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d533      	bpl.n	8002918 <localize+0x408>
 80028b0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80028b4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c0:	d52a      	bpl.n	8002918 <localize+0x408>
 80028c2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028c6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d2:	d521      	bpl.n	8002918 <localize+0x408>
		// CASE 6
		*origin = point2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028e0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 80028e4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80028e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028ec:	eeb0 0a47 	vmov.f32	s0, s14
 80028f0:	eef0 0a67 	vmov.f32	s1, s15
 80028f4:	f000 fa51 	bl	8002d9a <negateCoordinate>
 80028f8:	eeb0 7a40 	vmov.f32	s14, s0
 80028fc:	eef0 7a60 	vmov.f32	s15, s1
 8002900:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002904:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8002908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002914:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8002918:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800291c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d10e      	bne.n	8002944 <localize+0x434>
		if (vector1.y > 0) {
 8002926:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800292a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	dd03      	ble.n	800293c <localize+0x42c>
			*angle = M_PI / 2.0;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4a72      	ldr	r2, [pc, #456]	; (8002b00 <localize+0x5f0>)
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e092      	b.n	8002a62 <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <localize+0x5f4>)
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e08e      	b.n	8002a62 <localize+0x552>
		}
	} else if (vector1.y == 0) {
 8002944:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002948:	eef5 7a40 	vcmp.f32	s15, #0.0
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	d10f      	bne.n	8002972 <localize+0x462>
		if (vector1.x >= 0) {
 8002952:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	db04      	blt.n	800296a <localize+0x45a>
			*angle = 0;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e07b      	b.n	8002a62 <localize+0x552>
		} else {
			*angle = M_PI;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <localize+0x5f8>)
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e077      	b.n	8002a62 <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 8002972:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002976:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800297a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800297e:	ee16 0a90 	vmov	r0, s13
 8002982:	f7fd fde9 	bl	8000558 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	ec43 2b10 	vmov	d0, r2, r3
 800298e:	f00d fe4f 	bl	8010630 <atan>
 8002992:	ec53 2b10 	vmov	r2, r3, d0
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f92d 	bl	8000bf8 <__aeabi_d2f>
 800299e:	ee07 0a90 	vmov	s15, r0
 80029a2:	eef0 7ae7 	vabs.f32	s15, s15
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 80029ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b8:	d51a      	bpl.n	80029f0 <localize+0x4e0>
 80029ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d513      	bpl.n	80029f0 <localize+0x4e0>
			*angle = M_PI + *angle;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdc3 	bl	8000558 <__aeabi_f2d>
 80029d2:	a347      	add	r3, pc, #284	; (adr r3, 8002af0 <localize+0x5e0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fc60 	bl	800029c <__adddf3>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f908 	bl	8000bf8 <__aeabi_d2f>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e038      	b.n	8002a62 <localize+0x552>
		} else if (vector1.x < 0) {
 80029f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d515      	bpl.n	8002a2a <localize+0x51a>
			*angle = M_PI - *angle;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fda8 	bl	8000558 <__aeabi_f2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	a138      	add	r1, pc, #224	; (adr r1, 8002af0 <localize+0x5e0>)
 8002a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a12:	f7fd fc41 	bl	8000298 <__aeabi_dsub>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f8eb 	bl	8000bf8 <__aeabi_d2f>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e01b      	b.n	8002a62 <localize+0x552>
		} else if (vector1.y < 0) {
 8002a2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	d514      	bpl.n	8002a62 <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd8b 	bl	8000558 <__aeabi_f2d>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	a12c      	add	r1, pc, #176	; (adr r1, 8002af8 <localize+0x5e8>)
 8002a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4c:	f7fd fc24 	bl	8000298 <__aeabi_dsub>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ce 	bl	8000bf8 <__aeabi_d2f>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8002a62:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002a72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8002a82:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	d516      	bpl.n	8002abe <localize+0x5ae>
		*angle = *angle + M_PI;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd5f 	bl	8000558 <__aeabi_f2d>
 8002a9a:	a315      	add	r3, pc, #84	; (adr r3, 8002af0 <localize+0x5e0>)
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fbfc 	bl	800029c <__adddf3>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f8a4 	bl	8000bf8 <__aeabi_d2f>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <localize+0x5fc>)
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002abc:	e003      	b.n	8002ac6 <localize+0x5b6>
	} else {
		dir = 1.0;
 8002abe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <localize+0x600>)
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <localize+0x604>)
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ae4:	e0e1      	b.n	8002caa <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aea:	e0d5      	b.n	8002c98 <localize+0x788>
 8002aec:	f3af 8000 	nop.w
 8002af0:	54442d18 	.word	0x54442d18
 8002af4:	400921fb 	.word	0x400921fb
 8002af8:	54442d18 	.word	0x54442d18
 8002afc:	401921fb 	.word	0x401921fb
 8002b00:	3fc90fdb 	.word	0x3fc90fdb
 8002b04:	4096cbe4 	.word	0x4096cbe4
 8002b08:	40490fdb 	.word	0x40490fdb
 8002b0c:	bf800000 	.word	0xbf800000
 8002b10:	08012d08 	.word	0x08012d08
 8002b14:	08012d14 	.word	0x08012d14
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd1b 	bl	8000558 <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd12 	bl	8000558 <__aeabi_f2d>
 8002b34:	4604      	mov	r4, r0
 8002b36:	460d      	mov	r5, r1
 8002b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3388      	adds	r3, #136	; 0x88
 8002b40:	443b      	add	r3, r7
 8002b42:	3b6c      	subs	r3, #108	; 0x6c
 8002b44:	ed93 7a00 	vldr	s14, [r3]
 8002b48:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	ee17 0a90 	vmov	r0, s15
 8002b54:	f7fd fd00 	bl	8000558 <__aeabi_f2d>
 8002b58:	4680      	mov	r8, r0
 8002b5a:	4689      	mov	r9, r1
 8002b5c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002b60:	f00d ff06 	bl	8010970 <cos>
 8002b64:	ec53 2b10 	vmov	r2, r3, d0
 8002b68:	4640      	mov	r0, r8
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	f7fd fd4c 	bl	8000608 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb90 	bl	800029c <__adddf3>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4690      	mov	r8, r2
 8002b82:	4699      	mov	r9, r3
 8002b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	3388      	adds	r3, #136	; 0x88
 8002b8a:	443b      	add	r3, r7
 8002b8c:	3b78      	subs	r3, #120	; 0x78
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fce1 	bl	8000558 <__aeabi_f2d>
 8002b96:	4604      	mov	r4, r0
 8002b98:	460d      	mov	r5, r1
 8002b9a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002b9e:	f00d ff47 	bl	8010a30 <sin>
 8002ba2:	ec53 2b10 	vmov	r2, r3, d0
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fd2d 	bl	8000608 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	f7fd fb6f 	bl	8000298 <__aeabi_dsub>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	441a      	add	r2, r3
 8002bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	18d4      	adds	r4, r2, r3
 8002bd6:	f7fe f80f 	bl	8000bf8 <__aeabi_d2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fcb8 	bl	8000558 <__aeabi_f2d>
 8002be8:	4604      	mov	r4, r0
 8002bea:	460d      	mov	r5, r1
 8002bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3388      	adds	r3, #136	; 0x88
 8002bf4:	443b      	add	r3, r7
 8002bf6:	3b6c      	subs	r3, #108	; 0x6c
 8002bf8:	ed93 7a00 	vldr	s14, [r3]
 8002bfc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	ee17 0a90 	vmov	r0, s15
 8002c08:	f7fd fca6 	bl	8000558 <__aeabi_f2d>
 8002c0c:	4680      	mov	r8, r0
 8002c0e:	4689      	mov	r9, r1
 8002c10:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c14:	f00d ff0c 	bl	8010a30 <sin>
 8002c18:	ec53 2b10 	vmov	r2, r3, d0
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	4649      	mov	r1, r9
 8002c20:	f7fd fcf2 	bl	8000608 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4620      	mov	r0, r4
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	f7fd fb36 	bl	800029c <__adddf3>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4690      	mov	r8, r2
 8002c36:	4699      	mov	r9, r3
 8002c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	3388      	adds	r3, #136	; 0x88
 8002c3e:	443b      	add	r3, r7
 8002c40:	3b78      	subs	r3, #120	; 0x78
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fc87 	bl	8000558 <__aeabi_f2d>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	460d      	mov	r5, r1
 8002c4e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c52:	f00d fe8d 	bl	8010970 <cos>
 8002c56:	ec53 2b10 	vmov	r2, r3, d0
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fcd3 	bl	8000608 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4640      	mov	r0, r8
 8002c68:	4649      	mov	r1, r9
 8002c6a:	f7fd fb17 	bl	800029c <__adddf3>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	441a      	add	r2, r3
 8002c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	18d4      	adds	r4, r2, r3
 8002c8a:	f7fd ffb5 	bl	8000bf8 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 8002c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c94:	3301      	adds	r3, #1
 8002c96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	f77f af3c 	ble.w	8002b18 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 8002ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f77f af19 	ble.w	8002ae6 <localize+0x5d6>

	// dirty fix for angle error
//	if (dir < 0){
//		*angle = *angle - M_PI;
//	}
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3788      	adds	r7, #136	; 0x88
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002cc0 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	eeb0 6a40 	vmov.f32	s12, s0
 8002cca:	eef0 6a60 	vmov.f32	s13, s1
 8002cce:	eeb0 7a41 	vmov.f32	s14, s2
 8002cd2:	eef0 7a61 	vmov.f32	s15, s3
 8002cd6:	ed87 6a04 	vstr	s12, [r7, #16]
 8002cda:	edc7 6a05 	vstr	s13, [r7, #20]
 8002cde:	ed87 7a02 	vstr	s14, [r7, #8]
 8002ce2:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002cf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002d06:	f107 0320 	add.w	r3, r7, #32
 8002d0a:	f107 0218 	add.w	r2, r7, #24
 8002d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d12:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d16:	6a3a      	ldr	r2, [r7, #32]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	ee07 2a10 	vmov	s14, r2
 8002d1e:	ee07 3a90 	vmov	s15, r3
}
 8002d22:	eeb0 0a47 	vmov.f32	s0, s14
 8002d26:	eef0 0a67 	vmov.f32	s1, s15
 8002d2a:	372c      	adds	r7, #44	; 0x2c
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d3e:	eef0 7a60 	vmov.f32	s15, s1
 8002d42:	ed87 7a00 	vstr	s14, [r7]
 8002d46:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8002d4a:	ed97 7a00 	vldr	s14, [r7]
 8002d4e:	edd7 7a00 	vldr	s15, [r7]
 8002d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d56:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	ee17 0a90 	vmov	r0, s15
 8002d6a:	f7fd fbf5 	bl	8000558 <__aeabi_f2d>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	ec43 2b10 	vmov	d0, r2, r3
 8002d76:	f00d ff2d 	bl	8010bd4 <sqrt>
 8002d7a:	ec53 2b10 	vmov	r2, r3, d0
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ff39 	bl	8000bf8 <__aeabi_d2f>
 8002d86:	4603      	mov	r3, r0
 8002d88:	60fb      	str	r3, [r7, #12]
	return norm;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	ee07 3a90 	vmov	s15, r3
}
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002d9a:	b480      	push	{r7}
 8002d9c:	b089      	sub	sp, #36	; 0x24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	eeb0 7a40 	vmov.f32	s14, s0
 8002da4:	eef0 7a60 	vmov.f32	s15, s1
 8002da8:	ed87 7a02 	vstr	s14, [r7, #8]
 8002dac:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db4:	eef1 7a67 	vneg.f32	s15, s15
 8002db8:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc0:	eef1 7a67 	vneg.f32	s15, s15
 8002dc4:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	f107 0210 	add.w	r2, r7, #16
 8002dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	ee07 2a10 	vmov	s14, r2
 8002de0:	ee07 3a90 	vmov	s15, r3
}
 8002de4:	eeb0 0a47 	vmov.f32	s0, s14
 8002de8:	eef0 0a67 	vmov.f32	s1, s15
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init() {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <modbus_init+0x28>)
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <modbus_init+0x2c>)
 8002e00:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <modbus_init+0x28>)
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <modbus_init+0x30>)
 8002e06:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <modbus_init+0x28>)
 8002e0a:	2215      	movs	r2, #21
 8002e0c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <modbus_init+0x28>)
 8002e10:	2246      	movs	r2, #70	; 0x46
 8002e12:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002e14:	4905      	ldr	r1, [pc, #20]	; (8002e2c <modbus_init+0x34>)
 8002e16:	4802      	ldr	r0, [pc, #8]	; (8002e20 <modbus_init+0x28>)
 8002e18:	f7fe fd7a 	bl	8001910 <Modbus_init>
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	2000052c 	.word	0x2000052c
 8002e24:	20001e18 	.word	0x20001e18
 8002e28:	20001c4c 	.word	0x20001c4c
 8002e2c:	20000a04 	.word	0x20000a04

08002e30 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002e38:	f003 f956 	bl	80060e8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <modbus_heartbeat_handler+0x78>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d32c      	bcc.n	8002ea0 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 8002e46:	f003 f94f 	bl	80060e8 <HAL_GetTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	33c8      	adds	r3, #200	; 0xc8
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <modbus_heartbeat_handler+0x78>)
 8002e50:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <modbus_heartbeat_handler+0x7c>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	f644 0269 	movw	r2, #18537	; 0x4869
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d106      	bne.n	8002e6c <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e015      	b.n	8002e98 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8002e72:	2b7d      	cmp	r3, #125	; 0x7d
 8002e74:	dc08      	bgt.n	8002e88 <modbus_heartbeat_handler+0x58>
				fail++;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e78:	f993 3000 	ldrsb.w	r3, [r3]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e86:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <modbus_heartbeat_handler+0x80>)
 8002e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e8e:	2b09      	cmp	r3, #9
 8002e90:	dd02      	ble.n	8002e98 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <modbus_heartbeat_handler+0x7c>)
 8002e9a:	f645 1261 	movw	r2, #22881	; 0x5961
 8002e9e:	801a      	strh	r2, [r3, #0]
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20001950 	.word	0x20001950
 8002eac:	20000a04 	.word	0x20000a04
 8002eb0:	20001954 	.word	0x20001954

08002eb4 <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <modbus_data_sync+0x218>)
 8002ec6:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b7e      	ldr	r3, [pc, #504]	; (80030cc <modbus_data_sync+0x218>)
 8002ed2:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <modbus_data_sync+0x218>)
 8002ede:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <modbus_data_sync+0x218>)
 8002eea:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b75      	ldr	r3, [pc, #468]	; (80030cc <modbus_data_sync+0x218>)
 8002ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b72      	ldr	r3, [pc, #456]	; (80030cc <modbus_data_sync+0x218>)
 8002f04:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b6e      	ldr	r3, [pc, #440]	; (80030cc <modbus_data_sync+0x218>)
 8002f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <modbus_data_sync+0x218>)
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b67      	ldr	r3, [pc, #412]	; (80030cc <modbus_data_sync+0x218>)
 8002f2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b64      	ldr	r3, [pc, #400]	; (80030cc <modbus_data_sync+0x218>)
 8002f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b60      	ldr	r3, [pc, #384]	; (80030cc <modbus_data_sync+0x218>)
 8002f4a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <modbus_data_sync+0x218>)
 8002f58:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <modbus_data_sync+0x218>)
 8002f66:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 8002f6a:	4b58      	ldr	r3, [pc, #352]	; (80030cc <modbus_data_sync+0x218>)
 8002f6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002f76:	4b55      	ldr	r3, [pc, #340]	; (80030cc <modbus_data_sync+0x218>)
 8002f78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002f82:	4b52      	ldr	r3, [pc, #328]	; (80030cc <modbus_data_sync+0x218>)
 8002f84:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002f8e:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <modbus_data_sync+0x218>)
 8002f90:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_slave_temp;
	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <modbus_data_sync+0x21c>)
 8002f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <modbus_data_sync+0x218>)
 8002fa4:	885b      	ldrh	r3, [r3, #2]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d00f      	beq.n	8002fca <modbus_data_sync+0x116>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002faa:	4b48      	ldr	r3, [pc, #288]	; (80030cc <modbus_data_sync+0x218>)
 8002fac:	885b      	ldrh	r3, [r3, #2]
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fba:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <modbus_data_sync+0x21c>)
 8002fbc:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <modbus_data_sync+0x220>)
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	e017      	b.n	8002ffa <modbus_data_sync+0x146>
	} else if (base_system_status_slave_temp != variables->base_system_status) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fd0:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <modbus_data_sync+0x220>)
 8002fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d00f      	beq.n	8002ffa <modbus_data_sync+0x146>
		MBregisterFrame[0x01].U16 = variables->base_system_status;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <modbus_data_sync+0x218>)
 8002fe4:	805a      	strh	r2, [r3, #2]
		base_system_status_master_temp = variables->base_system_status;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fec:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <modbus_data_sync+0x21c>)
 8002fee:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <modbus_data_sync+0x220>)
 8002ff8:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <modbus_data_sync+0x224>)
 8002ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003000:	461a      	mov	r2, r3
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <modbus_data_sync+0x218>)
 8003004:	889b      	ldrh	r3, [r3, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d00f      	beq.n	800302a <modbus_data_sync+0x176>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <modbus_data_sync+0x218>)
 800300c:	889b      	ldrh	r3, [r3, #4]
 800300e:	b21a      	sxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <modbus_data_sync+0x224>)
 800301c:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <modbus_data_sync+0x228>)
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	e017      	b.n	800305a <modbus_data_sync+0x1a6>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <modbus_data_sync+0x228>)
 8003032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003036:	429a      	cmp	r2, r3
 8003038:	d00f      	beq.n	800305a <modbus_data_sync+0x1a6>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <modbus_data_sync+0x218>)
 8003044:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <modbus_data_sync+0x228>)
 800304e:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <modbus_data_sync+0x224>)
 8003058:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <modbus_data_sync+0x22c>)
 800305c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003060:	461a      	mov	r2, r3
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <modbus_data_sync+0x218>)
 8003064:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003068:	429a      	cmp	r2, r3
 800306a:	d010      	beq.n	800308e <modbus_data_sync+0x1da>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <modbus_data_sync+0x218>)
 800306e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003072:	b21a      	sxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <modbus_data_sync+0x22c>)
 8003080:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <modbus_data_sync+0x230>)
 800308a:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 800308c:	e018      	b.n	80030c0 <modbus_data_sync+0x20c>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <modbus_data_sync+0x230>)
 8003096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309a:	429a      	cmp	r2, r3
 800309c:	d010      	beq.n	80030c0 <modbus_data_sync+0x20c>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <modbus_data_sync+0x218>)
 80030a8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <modbus_data_sync+0x230>)
 80030b4:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <modbus_data_sync+0x22c>)
 80030be:	801a      	strh	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20000a04 	.word	0x20000a04
 80030d0:	20001956 	.word	0x20001956
 80030d4:	20001958 	.word	0x20001958
 80030d8:	2000195a 	.word	0x2000195a
 80030dc:	2000195c 	.word	0x2000195c
 80030e0:	2000195e 	.word	0x2000195e
 80030e4:	20001960 	.word	0x20001960

080030e8 <Set_LED>:
void Set_LED(int LEDnum, int Red, int Green, int Blue);
void Set_Brightness(int brightness);
void WS2812_Send(void);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	b2d9      	uxtb	r1, r3
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <Set_LED+0x58>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <Set_LED+0x58>)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	460a      	mov	r2, r1
 8003110:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	b2d9      	uxtb	r1, r3
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <Set_LED+0x58>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	460a      	mov	r2, r1
 8003120:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2d9      	uxtb	r1, r3
 8003126:	4a06      	ldr	r2, [pc, #24]	; (8003140 <Set_LED+0x58>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	460a      	mov	r2, r1
 8003130:	70da      	strb	r2, [r3, #3]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000a90 	.word	0x20000a90
 8003144:	00000000 	.word	0x00000000

08003148 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b2d      	cmp	r3, #45	; 0x2d
 8003154:	dd01      	ble.n	800315a <Set_Brightness+0x12>
		brightness = 45;
 8003156:	232d      	movs	r3, #45	; 0x2d
 8003158:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e060      	b.n	8003222 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8003160:	4a37      	ldr	r2, [pc, #220]	; (8003240 <Set_Brightness+0xf8>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003168:	4a36      	ldr	r2, [pc, #216]	; (8003244 <Set_Brightness+0xfc>)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8003170:	2301      	movs	r3, #1
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e04f      	b.n	8003216 <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003184:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * 3.14159265 / 180;  // in rad
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7fd f9e5 	bl	8000558 <__aeabi_f2d>
 800318e:	a32a      	add	r3, pc, #168	; (adr r3, 8003238 <Set_Brightness+0xf0>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fd fa38 	bl	8000608 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <Set_Brightness+0x100>)
 80031a6:	f7fd fb59 	bl	800085c <__aeabi_ddiv>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fd21 	bl	8000bf8 <__aeabi_d2f>
 80031b6:	4603      	mov	r3, r0
 80031b8:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / tan(angle);
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <Set_Brightness+0xf8>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9b3 	bl	8000534 <__aeabi_i2d>
 80031ce:	4604      	mov	r4, r0
 80031d0:	460d      	mov	r5, r1
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7fd f9c0 	bl	8000558 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	ec43 2b10 	vmov	d0, r2, r3
 80031e0:	f00d fc7e 	bl	8010ae0 <tan>
 80031e4:	ec53 2b10 	vmov	r2, r3, d0
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fd fb36 	bl	800085c <__aeabi_ddiv>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcde 	bl	8000bb8 <__aeabi_d2uiz>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b2d9      	uxtb	r1, r3
 8003200:	4a10      	ldr	r2, [pc, #64]	; (8003244 <Set_Brightness+0xfc>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	460a      	mov	r2, r1
 800320e:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	3301      	adds	r3, #1
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b03      	cmp	r3, #3
 800321a:	ddac      	ble.n	8003176 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b3b      	cmp	r3, #59	; 0x3b
 8003226:	dd9b      	ble.n	8003160 <Set_Brightness+0x18>
		}
	}
#endif
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bdb0      	pop	{r4, r5, r7, pc}
 8003232:	bf00      	nop
 8003234:	f3af 8000 	nop.w
 8003238:	53c8d4f1 	.word	0x53c8d4f1
 800323c:	400921fb 	.word	0x400921fb
 8003240:	20000a90 	.word	0x20000a90
 8003244:	20000b80 	.word	0x20000b80
 8003248:	40668000 	.word	0x40668000

0800324c <WS2812_Send>:

void WS2812_Send(void) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
	if (!datasentflag) {
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <WS2812_Send+0xd0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05a      	beq.n	8003312 <WS2812_Send+0xc6>
		return;
	}
	uint32_t indx = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e036      	b.n	80032d4 <WS2812_Send+0x88>
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8003266:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <WS2812_Send+0xd4>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	492b      	ldr	r1, [pc, #172]	; (8003320 <WS2812_Send+0xd4>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	789b      	ldrb	r3, [r3, #2]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	431a      	orrs	r2, r3
 8003280:	4927      	ldr	r1, [pc, #156]	; (8003320 <WS2812_Send+0xd4>)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	78db      	ldrb	r3, [r3, #3]
 800328a:	4313      	orrs	r3, r2
 800328c:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 800328e:	2317      	movs	r3, #23
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e019      	b.n	80032c8 <WS2812_Send+0x7c>
			if (color & (1 << i)) {
 8003294:	2201      	movs	r2, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <WS2812_Send+0x66>
				pwmData[indx] = 83;  // 2/3 of 125
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <WS2812_Send+0xd8>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2153      	movs	r1, #83	; 0x53
 80032ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80032b0:	e004      	b.n	80032bc <WS2812_Send+0x70>
			} else {
				pwmData[indx] = 42;  // 1/3 of 125
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <WS2812_Send+0xd8>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	212a      	movs	r1, #42	; 0x2a
 80032b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	dae2      	bge.n	8003294 <WS2812_Send+0x48>
	for (int i = 0; i < MAX_LED; i++) {
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	3301      	adds	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b3b      	cmp	r3, #59	; 0x3b
 80032d8:	ddc5      	ble.n	8003266 <WS2812_Send+0x1a>
		}
	}

	for (int i = 0; i < 50; i++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	e00a      	b.n	80032f6 <WS2812_Send+0xaa>
		pwmData[indx] = 0;
 80032e0:	4a10      	ldr	r2, [pc, #64]	; (8003324 <WS2812_Send+0xd8>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2100      	movs	r1, #0
 80032e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b31      	cmp	r3, #49	; 0x31
 80032fa:	ddf1      	ble.n	80032e0 <WS2812_Send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <WS2812_Send+0xd8>)
 8003302:	2100      	movs	r1, #0
 8003304:	4808      	ldr	r0, [pc, #32]	; (8003328 <WS2812_Send+0xdc>)
 8003306:	f005 fbf7 	bl	8008af8 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <WS2812_Send+0xd0>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e000      	b.n	8003314 <WS2812_Send+0xc8>
		return;
 8003312:	bf00      	nop
}
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000220 	.word	0x20000220
 8003320:	20000b80 	.word	0x20000b80
 8003324:	20000c70 	.word	0x20000c70
 8003328:	20001ae4 	.word	0x20001ae4

0800332c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d106      	bne.n	800334a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800333c:	2100      	movs	r1, #0
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003340:	f005 fd8a 	bl	8008e58 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
	}
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20001ae4 	.word	0x20001ae4
 8003358:	20000220 	.word	0x20000220
 800335c:	00000000 	.word	0x00000000

08003360 <main_logic>:
void preset_data_xy();
void emergency_handler();

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	ENE_I2C_UPDATE(&variables->end_effector_status, &hi2c1, 0);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3326      	adds	r3, #38	; 0x26
 800336c:	2200      	movs	r2, #0
 800336e:	49b2      	ldr	r1, [pc, #712]	; (8003638 <main_logic+0x2d8>)
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd ff89 	bl	8001288 <ENE_I2C_UPDATE>
	RGB_logic(state, tray_point_n, emergency);
 8003376:	4bb1      	ldr	r3, [pc, #708]	; (800363c <main_logic+0x2dc>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	4bb0      	ldr	r3, [pc, #704]	; (8003640 <main_logic+0x2e0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4619      	mov	r1, r3
 8003382:	4bb0      	ldr	r3, [pc, #704]	; (8003644 <main_logic+0x2e4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 fee6 	bl	8004158 <RGB_logic>
	data_report(variables);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb53 	bl	8003a38 <data_report>
	Joystick_Transmit(variables->x_target_position, setpoint_y * 0.3, jog_enable + jog_point_n);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 401e 	ldrsh.w	r4, [r3, #30]
 8003398:	4bab      	ldr	r3, [pc, #684]	; (8003648 <main_logic+0x2e8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd f8c9 	bl	8000534 <__aeabi_i2d>
 80033a2:	a3a1      	add	r3, pc, #644	; (adr r3, 8003628 <main_logic+0x2c8>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f92e 	bl	8000608 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f7fd fbd8 	bl	8000b68 <__aeabi_d2iz>
 80033b8:	4603      	mov	r3, r0
 80033ba:	b219      	sxth	r1, r3
 80033bc:	4ba3      	ldr	r3, [pc, #652]	; (800364c <main_logic+0x2ec>)
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	4ba3      	ldr	r3, [pc, #652]	; (8003650 <main_logic+0x2f0>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7fe f8d4 	bl	8001578 <Joystick_Transmit>
	emergency_handler();
 80033d0:	f000 fe84 	bl	80040dc <emergency_handler>
	x_spam_position(variables);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb8f 	bl	8003af8 <x_spam_position>

	static uint32_t wait_timer;
	switch (state) {
 80033da:	4b98      	ldr	r3, [pc, #608]	; (800363c <main_logic+0x2dc>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	f200 8207 	bhi.w	80037f2 <main_logic+0x492>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <main_logic+0x8c>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003411 	.word	0x08003411
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	08003515 	.word	0x08003515
 80033f8:	08003515 	.word	0x08003515
 80033fc:	08003527 	.word	0x08003527
 8003400:	0800355f 	.word	0x0800355f
 8003404:	08003773 	.word	0x08003773
 8003408:	080037c9 	.word	0x080037c9
 800340c:	080037d5 	.word	0x080037d5
	case MSwait:
		if (HAL_GetTick() - wait_timer > 1500) {
 8003410:	f002 fe6a 	bl	80060e8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	4b8f      	ldr	r3, [pc, #572]	; (8003654 <main_logic+0x2f4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003420:	4293      	cmp	r3, r2
 8003422:	f240 81dd 	bls.w	80037e0 <main_logic+0x480>
			state = MSidle;
 8003426:	4b85      	ldr	r3, [pc, #532]	; (800363c <main_logic+0x2dc>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800342c:	e1d8      	b.n	80037e0 <main_logic+0x480>
	case MSidle:
		wait_timer = HAL_GetTick();
 800342e:	f002 fe5b 	bl	80060e8 <HAL_GetTick>
 8003432:	4603      	mov	r3, r0
 8003434:	4a87      	ldr	r2, [pc, #540]	; (8003654 <main_logic+0x2f4>)
 8003436:	6013      	str	r3, [r2, #0]
		variables->y_moving_status = 0;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	815a      	strh	r2, [r3, #10]
		jog_enable = 0;
 800343e:	4b83      	ldr	r3, [pc, #524]	; (800364c <main_logic+0x2ec>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]

		if (variables->base_system_status & 0b1) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <main_logic+0x10c>
			// pick mode
			variables->base_system_status = 0;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	801a      	strh	r2, [r3, #0]
			state = MSpick;
 800345a:	4b78      	ldr	r3, [pc, #480]	; (800363c <main_logic+0x2dc>)
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 8003466:	4b79      	ldr	r3, [pc, #484]	; (800364c <main_logic+0x2ec>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b10) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <main_logic+0x134>
			// place mode
			variables->base_system_status = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]
			state = MSplace;
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <main_logic+0x2dc>)
 8003484:	2203      	movs	r2, #3
 8003486:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <main_logic+0x2ec>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b100) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <main_logic+0x162>
			// home mode
			variables->base_system_status = 0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	801a      	strh	r2, [r3, #0]
			state = MShome;
 80034aa:	4b64      	ldr	r3, [pc, #400]	; (800363c <main_logic+0x2dc>)
 80034ac:	2204      	movs	r2, #4
 80034ae:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 4;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2204      	movs	r2, #4
 80034b4:	815a      	strh	r2, [r3, #10]
			variables->x_target_position = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
			//variables->x_moving_status = 1;
		}

		if (variables->base_system_status & 0b1000) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <main_logic+0x18e>
			// start tray mode
			variables->base_system_status = 0;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	801a      	strh	r2, [r3, #0]
			state = MStray;
 80034d8:	4b58      	ldr	r3, [pc, #352]	; (800363c <main_logic+0x2dc>)
 80034da:	2205      	movs	r2, #5
 80034dc:	701a      	strb	r2, [r3, #0]
			tray_point_n = 0;
 80034de:	4b58      	ldr	r3, [pc, #352]	; (8003640 <main_logic+0x2e0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
			tray_delay = HAL_GetTick();
 80034e4:	f002 fe00 	bl	80060e8 <HAL_GetTick>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4a5b      	ldr	r2, [pc, #364]	; (8003658 <main_logic+0x2f8>)
 80034ec:	6013      	str	r3, [r2, #0]
		}

		if (variables->base_system_status & 0b10000) {
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8172 	beq.w	80037e4 <main_logic+0x484>
			// point mode
			variables->base_system_status = 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	801a      	strh	r2, [r3, #0]
			state = MSpoint;
 8003506:	4b4d      	ldr	r3, [pc, #308]	; (800363c <main_logic+0x2dc>)
 8003508:	2206      	movs	r2, #6
 800350a:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 32;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	815a      	strh	r2, [r3, #10]
		}
		break;
 8003512:	e167      	b.n	80037e4 <main_logic+0x484>
	case MSpick: // MSpick or MSplace
	case MSplace:
		variables->x_target_position = setpoint_x;
 8003514:	4b51      	ldr	r3, [pc, #324]	; (800365c <main_logic+0x2fc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	b21a      	sxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 faea 	bl	8003af8 <x_spam_position>
		break;
 8003524:	e165      	b.n	80037f2 <main_logic+0x492>
	case MShome:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8003526:	2108      	movs	r1, #8
 8003528:	484d      	ldr	r0, [pc, #308]	; (8003660 <main_logic+0x300>)
 800352a:	f003 ff23 	bl	8007374 <HAL_GPIO_ReadPin>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <main_logic+0x1e0>
			home_status = 1;
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <main_logic+0x304>)
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
			home_handler();
 800353a:	f000 fa21 	bl	8003980 <home_handler>
		} else if (!home_status) {
			home_status = 1;
			PID_enable = 0;
			voltage = -8000;
		}
		break;
 800353e:	e153      	b.n	80037e8 <main_logic+0x488>
		} else if (!home_status) {
 8003540:	4b48      	ldr	r3, [pc, #288]	; (8003664 <main_logic+0x304>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 814f 	bne.w	80037e8 <main_logic+0x488>
			home_status = 1;
 800354a:	4b46      	ldr	r3, [pc, #280]	; (8003664 <main_logic+0x304>)
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
			PID_enable = 0;
 8003550:	4b45      	ldr	r3, [pc, #276]	; (8003668 <main_logic+0x308>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
			voltage = -8000;
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <main_logic+0x30c>)
 8003558:	4a45      	ldr	r2, [pc, #276]	; (8003670 <main_logic+0x310>)
 800355a:	601a      	str	r2, [r3, #0]
		break;
 800355c:	e144      	b.n	80037e8 <main_logic+0x488>
	case MStray:
		variables->x_target_position = setpoint_x;
 800355e:	4b3f      	ldr	r3, [pc, #252]	; (800365c <main_logic+0x2fc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b21a      	sxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fac5 	bl	8003af8 <x_spam_position>
		switch (tray_wait_mode) {
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <main_logic+0x314>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b04      	cmp	r3, #4
 8003574:	f200 80e9 	bhi.w	800374a <main_logic+0x3ea>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <main_logic+0x220>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	08003595 	.word	0x08003595
 8003584:	080035fb 	.word	0x080035fb
 8003588:	0800367d 	.word	0x0800367d
 800358c:	080036f1 	.word	0x080036f1
 8003590:	0800371b 	.word	0x0800371b
		case 0:
			// move to pick
			variables->y_moving_status = 8;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2208      	movs	r2, #8
 8003598:	815a      	strh	r2, [r3, #10]
			setpoint_x = pick[tray_point_n].x * 10;
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <main_logic+0x2e0>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4a36      	ldr	r2, [pc, #216]	; (8003678 <main_logic+0x318>)
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b4:	ee17 2a90 	vmov	r2, s15
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <main_logic+0x2fc>)
 80035ba:	601a      	str	r2, [r3, #0]
			setpoint_y = pick[tray_point_n].y / 0.03;
 80035bc:	4b20      	ldr	r3, [pc, #128]	; (8003640 <main_logic+0x2e0>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	4a2d      	ldr	r2, [pc, #180]	; (8003678 <main_logic+0x318>)
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc ffc4 	bl	8000558 <__aeabi_f2d>
 80035d0:	a317      	add	r3, pc, #92	; (adr r3, 8003630 <main_logic+0x2d0>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f941 	bl	800085c <__aeabi_ddiv>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f7fd fac1 	bl	8000b68 <__aeabi_d2iz>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <main_logic+0x2e8>)
 80035ea:	6013      	str	r3, [r2, #0]
			variables->x_moving_status = 2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
			tray_wait_mode = 1;
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <main_logic+0x314>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
			break;
 80035f8:	e0a7      	b.n	800374a <main_logic+0x3ea>
		case 1:
			// wait for move to finish then pick
			if (move_finished(10)) {
 80035fa:	200a      	movs	r0, #10
 80035fc:	f000 fbf0 	bl	8003de0 <move_finished>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 809a 	beq.w	800373c <main_logic+0x3dc>
				end_effector_gripper(variables, 0);
 8003608:	2100      	movs	r1, #0
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f98e 	bl	800392c <end_effector_gripper>
				tray_wait_mode = 2;
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <main_logic+0x314>)
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 8003616:	f002 fd67 	bl	80060e8 <HAL_GetTick>
 800361a:	4603      	mov	r3, r0
 800361c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <main_logic+0x2f8>)
 8003622:	6013      	str	r3, [r2, #0]
			}
			break;
 8003624:	e08a      	b.n	800373c <main_logic+0x3dc>
 8003626:	bf00      	nop
 8003628:	33333333 	.word	0x33333333
 800362c:	3fd33333 	.word	0x3fd33333
 8003630:	eb851eb8 	.word	0xeb851eb8
 8003634:	3f9eb851 	.word	0x3f9eb851
 8003638:	200004d8 	.word	0x200004d8
 800363c:	20000221 	.word	0x20000221
 8003640:	20001818 	.word	0x20001818
 8003644:	20001814 	.word	0x20001814
 8003648:	20001904 	.word	0x20001904
 800364c:	20001816 	.word	0x20001816
 8003650:	20001817 	.word	0x20001817
 8003654:	20001964 	.word	0x20001964
 8003658:	2000181c 	.word	0x2000181c
 800365c:	20001908 	.word	0x20001908
 8003660:	40020800 	.word	0x40020800
 8003664:	20001815 	.word	0x20001815
 8003668:	20000222 	.word	0x20000222
 800366c:	20001820 	.word	0x20001820
 8003670:	c5fa0000 	.word	0xc5fa0000
 8003674:	20001819 	.word	0x20001819
 8003678:	20001850 	.word	0x20001850
		case 2:
			// wait for pick to finish then move to place
			if (HAL_GetTick() >= tray_delay) {
 800367c:	f002 fd34 	bl	80060e8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	4b63      	ldr	r3, [pc, #396]	; (8003810 <main_logic+0x4b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d35a      	bcc.n	8003740 <main_logic+0x3e0>
				variables->y_moving_status = 16;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2210      	movs	r2, #16
 800368e:	815a      	strh	r2, [r3, #10]
				setpoint_x = place[tray_point_n].x * 10;
 8003690:	4b60      	ldr	r3, [pc, #384]	; (8003814 <main_logic+0x4b4>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4a60      	ldr	r2, [pc, #384]	; (8003818 <main_logic+0x4b8>)
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036aa:	ee17 2a90 	vmov	r2, s15
 80036ae:	4b5b      	ldr	r3, [pc, #364]	; (800381c <main_logic+0x4bc>)
 80036b0:	601a      	str	r2, [r3, #0]
				setpoint_y = place[tray_point_n].y / 0.03;
 80036b2:	4b58      	ldr	r3, [pc, #352]	; (8003814 <main_logic+0x4b4>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	4a58      	ldr	r2, [pc, #352]	; (8003818 <main_logic+0x4b8>)
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff49 	bl	8000558 <__aeabi_f2d>
 80036c6:	a34e      	add	r3, pc, #312	; (adr r3, 8003800 <main_logic+0x4a0>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fd f8c6 	bl	800085c <__aeabi_ddiv>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f7fd fa46 	bl	8000b68 <__aeabi_d2iz>
 80036dc:	4603      	mov	r3, r0
 80036de:	4a50      	ldr	r2, [pc, #320]	; (8003820 <main_logic+0x4c0>)
 80036e0:	6013      	str	r3, [r2, #0]
				variables->x_moving_status = 2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
				tray_wait_mode = 3;
 80036e8:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <main_logic+0x4c4>)
 80036ea:	2203      	movs	r2, #3
 80036ec:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036ee:	e027      	b.n	8003740 <main_logic+0x3e0>
		case 3:
			// wait for move to place then place
			if (move_finished(10)) {
 80036f0:	200a      	movs	r0, #10
 80036f2:	f000 fb75 	bl	8003de0 <move_finished>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <main_logic+0x3e4>
				end_effector_gripper(variables, 1);
 80036fc:	2101      	movs	r1, #1
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f914 	bl	800392c <end_effector_gripper>
				tray_wait_mode = 4;
 8003704:	4b47      	ldr	r3, [pc, #284]	; (8003824 <main_logic+0x4c4>)
 8003706:	2204      	movs	r2, #4
 8003708:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 800370a:	f002 fced 	bl	80060e8 <HAL_GetTick>
 800370e:	4603      	mov	r3, r0
 8003710:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8003714:	4a3e      	ldr	r2, [pc, #248]	; (8003810 <main_logic+0x4b0>)
 8003716:	6013      	str	r3, [r2, #0]
			}
			break;
 8003718:	e014      	b.n	8003744 <main_logic+0x3e4>
		case 4:
			// wait for place to finish then reset to state 0
			if (HAL_GetTick() >= tray_delay) {
 800371a:	f002 fce5 	bl	80060e8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <main_logic+0x4b0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d30f      	bcc.n	8003748 <main_logic+0x3e8>
				tray_wait_mode = 0;
 8003728:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <main_logic+0x4c4>)
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
				tray_point_n++;
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <main_logic+0x4b4>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <main_logic+0x4b4>)
 8003738:	701a      	strb	r2, [r3, #0]
			}
			break;
 800373a:	e005      	b.n	8003748 <main_logic+0x3e8>
			break;
 800373c:	bf00      	nop
 800373e:	e004      	b.n	800374a <main_logic+0x3ea>
			break;
 8003740:	bf00      	nop
 8003742:	e002      	b.n	800374a <main_logic+0x3ea>
			break;
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <main_logic+0x3ea>
			break;
 8003748:	bf00      	nop
		}
		if (tray_point_n >= 9) {
 800374a:	4b32      	ldr	r3, [pc, #200]	; (8003814 <main_logic+0x4b4>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b08      	cmp	r3, #8
 8003750:	d94c      	bls.n	80037ec <main_logic+0x48c>
			setpoint_y = 0;
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <main_logic+0x4c0>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
			tray_point_n = 0;
 8003758:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <main_logic+0x4b4>)
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
			variables->x_target_position = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
			state = MSidle;
 800376a:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <main_logic+0x4c8>)
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003770:	e03c      	b.n	80037ec <main_logic+0x48c>
	case MSpoint:
		setpoint_y = variables->goal_point_y / 0.3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fedb 	bl	8000534 <__aeabi_i2d>
 800377e:	a322      	add	r3, pc, #136	; (adr r3, 8003808 <main_logic+0x4a8>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f7fd f86a 	bl	800085c <__aeabi_ddiv>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd f9ea 	bl	8000b68 <__aeabi_d2iz>
 8003794:	4603      	mov	r3, r0
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <main_logic+0x4c0>)
 8003798:	6013      	str	r3, [r2, #0]
		variables->x_target_position = variables->goal_point_x;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	83da      	strh	r2, [r3, #30]
		variables->x_moving_status = 2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	851a      	strh	r2, [r3, #40]	; 0x28

		if (abs(setpoint_y - getLocalPosition()) < 10) {
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <main_logic+0x4c0>)
 80037ac:	681c      	ldr	r4, [r3, #0]
 80037ae:	f7fe fe8f 	bl	80024d0 <getLocalPosition>
 80037b2:	4603      	mov	r3, r0
 80037b4:	1ae3      	subs	r3, r4, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bfb8      	it	lt
 80037ba:	425b      	neglt	r3, r3
 80037bc:	2b09      	cmp	r3, #9
 80037be:	dc17      	bgt.n	80037f0 <main_logic+0x490>
			state = MSwait;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <main_logic+0x4c8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80037c6:	e013      	b.n	80037f0 <main_logic+0x490>
	case MStestY:
		preset_data_y_only();
 80037c8:	f000 fb36 	bl	8003e38 <preset_data_y_only>
		state = MSidle;
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <main_logic+0x4c8>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
		break;
 80037d2:	e00e      	b.n	80037f2 <main_logic+0x492>
	case MStestXY:
		preset_data_xy();
 80037d4:	f000 fb88 	bl	8003ee8 <preset_data_xy>
		state = MSidle;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <main_logic+0x4c8>)
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
		break;
 80037de:	e008      	b.n	80037f2 <main_logic+0x492>
		break;
 80037e0:	bf00      	nop
 80037e2:	e006      	b.n	80037f2 <main_logic+0x492>
		break;
 80037e4:	bf00      	nop
 80037e6:	e004      	b.n	80037f2 <main_logic+0x492>
		break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <main_logic+0x492>
		break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <main_logic+0x492>
		break;
 80037f0:	bf00      	nop
	}
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	f3af 8000 	nop.w
 8003800:	eb851eb8 	.word	0xeb851eb8
 8003804:	3f9eb851 	.word	0x3f9eb851
 8003808:	33333333 	.word	0x33333333
 800380c:	3fd33333 	.word	0x3fd33333
 8003810:	2000181c 	.word	0x2000181c
 8003814:	20001818 	.word	0x20001818
 8003818:	20001898 	.word	0x20001898
 800381c:	20001908 	.word	0x20001908
 8003820:	20001904 	.word	0x20001904
 8003824:	20001819 	.word	0x20001819
 8003828:	20000221 	.word	0x20000221

0800382c <interrupt_logic>:

void interrupt_logic() {
 800382c:	b580      	push	{r7, lr}
 800382e:	ed2d 8b02 	vpush	{d8}
 8003832:	af00      	add	r7, sp, #0
	// Call trajectory function
	Trajectory(setpoint_y, 34000, 60000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 0);
 8003834:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <interrupt_logic+0xc8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003840:	2300      	movs	r3, #0
 8003842:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <interrupt_logic+0xcc>)
 8003844:	492d      	ldr	r1, [pc, #180]	; (80038fc <interrupt_logic+0xd0>)
 8003846:	482e      	ldr	r0, [pc, #184]	; (8003900 <interrupt_logic+0xd4>)
 8003848:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8003904 <interrupt_logic+0xd8>
 800384c:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8003908 <interrupt_logic+0xdc>
 8003850:	eeb0 0a67 	vmov.f32	s0, s15
 8003854:	f001 feb4 	bl	80055c0 <Trajectory>

	lowpass_filter(getRawPosition(), &actual_velocity, &actual_acceleration);
 8003858:	f7fe fe4c 	bl	80024f4 <getRawPosition>
 800385c:	4603      	mov	r3, r0
 800385e:	4a2b      	ldr	r2, [pc, #172]	; (800390c <interrupt_logic+0xe0>)
 8003860:	492b      	ldr	r1, [pc, #172]	; (8003910 <interrupt_logic+0xe4>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd ff96 	bl	8001794 <lowpass_filter>

	// Call PID function
	if (PID_enable) {
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <interrupt_logic+0xe8>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d035      	beq.n	80038dc <interrupt_logic+0xb0>
		static int count = 0;
		count++;
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <interrupt_logic+0xec>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <interrupt_logic+0xec>)
 8003878:	6013      	str	r3, [r2, #0]
		if (count >= 5) {
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <interrupt_logic+0xec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b04      	cmp	r3, #4
 8003880:	dd2c      	ble.n	80038dc <interrupt_logic+0xb0>
			PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage);
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <interrupt_logic+0xd4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800388e:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <interrupt_logic+0xc8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800389a:	f7fe fe19 	bl	80024d0 <getLocalPosition>
 800389e:	ee07 0a90 	vmov	s15, r0
 80038a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <interrupt_logic+0xf0>)
 80038a8:	ed93 7a00 	vldr	s14, [r3]
 80038ac:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <interrupt_logic+0xf4>)
 80038ae:	edd3 6a00 	vldr	s13, [r3]
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <interrupt_logic+0xf8>)
 80038b4:	ed93 6a00 	vldr	s12, [r3]
 80038b8:	481b      	ldr	r0, [pc, #108]	; (8003928 <interrupt_logic+0xfc>)
 80038ba:	eef0 2a46 	vmov.f32	s5, s12
 80038be:	eeb0 2a66 	vmov.f32	s4, s13
 80038c2:	eef0 1a47 	vmov.f32	s3, s14
 80038c6:	eeb0 1a67 	vmov.f32	s2, s15
 80038ca:	eef0 0a68 	vmov.f32	s1, s17
 80038ce:	eeb0 0a48 	vmov.f32	s0, s16
 80038d2:	f7fe fb27 	bl	8001f24 <PositionControlPID>
			count = 0;
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <interrupt_logic+0xec>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
		}
	}

	// Call motor function
	motor(voltage);
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <interrupt_logic+0xfc>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eeb0 0a67 	vmov.f32	s0, s15
 80038e6:	f7fe fd93 	bl	8002410 <motor>
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	ecbd 8b02 	vpop	{d8}
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20001904 	.word	0x20001904
 80038f8:	2000182c 	.word	0x2000182c
 80038fc:	20001828 	.word	0x20001828
 8003900:	20001824 	.word	0x20001824
 8003904:	476a6000 	.word	0x476a6000
 8003908:	4704d000 	.word	0x4704d000
 800390c:	20001834 	.word	0x20001834
 8003910:	20001830 	.word	0x20001830
 8003914:	20000222 	.word	0x20000222
 8003918:	20001968 	.word	0x20001968
 800391c:	20000224 	.word	0x20000224
 8003920:	20000228 	.word	0x20000228
 8003924:	2000022c 	.word	0x2000022c
 8003928:	20001820 	.word	0x20001820

0800392c <end_effector_gripper>:

void end_effector_gripper(MB *variables, uint8_t mode) {
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
	if ((variables->end_effector_status & 0b0010) == 0) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800393e:	b29b      	uxth	r3, r3
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d014      	beq.n	8003972 <end_effector_gripper+0x46>
		return;
	}

	if (!mode) {
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <end_effector_gripper+0x34>
		// pick
		variables->end_effector_status |= 0b0100;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	b21a      	sxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	84da      	strh	r2, [r3, #38]	; 0x26
 800395e:	e009      	b.n	8003974 <end_effector_gripper+0x48>
	} else {
		// place
		variables->end_effector_status |= 0b1000;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	b21a      	sxth	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	84da      	strh	r2, [r3, #38]	; 0x26
 8003970:	e000      	b.n	8003974 <end_effector_gripper+0x48>
		return;
 8003972:	bf00      	nop
	}
}
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <home_handler>:
		// on
		variables->end_effector_status |= 0b0001;
	}
}

void home_handler() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
	if (!home_status) {
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <home_handler+0x84>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d037      	beq.n	80039fc <home_handler+0x7c>
		return;
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 800398c:	2108      	movs	r1, #8
 800398e:	481e      	ldr	r0, [pc, #120]	; (8003a08 <home_handler+0x88>)
 8003990:	f003 fcf0 	bl	8007374 <HAL_GPIO_ReadPin>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d032      	beq.n	8003a00 <home_handler+0x80>
		return;
	}
	motor(0);
 800399a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003a0c <home_handler+0x8c>
 800399e:	f7fe fd37 	bl	8002410 <motor>
	homeoffset = getRawPosition() + 11500;
 80039a2:	f7fe fda7 	bl	80024f4 <getRawPosition>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 80039ac:	332c      	adds	r3, #44	; 0x2c
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <home_handler+0x90>)
 80039b0:	6013      	str	r3, [r2, #0]
	setpointtraj_y = -11500;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <home_handler+0x94>)
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <home_handler+0x98>)
 80039b6:	601a      	str	r2, [r3, #0]
	setpoint_y = -11500;
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <home_handler+0x9c>)
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <home_handler+0x98>)
 80039bc:	601a      	str	r2, [r3, #0]
	Trajectory(setpoint_y, 34000, 80000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 1);
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <home_handler+0x9c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ca:	2301      	movs	r3, #1
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <home_handler+0xa0>)
 80039ce:	4915      	ldr	r1, [pc, #84]	; (8003a24 <home_handler+0xa4>)
 80039d0:	4810      	ldr	r0, [pc, #64]	; (8003a14 <home_handler+0x94>)
 80039d2:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8003a28 <home_handler+0xa8>
 80039d6:	eddf 0a15 	vldr	s1, [pc, #84]	; 8003a2c <home_handler+0xac>
 80039da:	eeb0 0a67 	vmov.f32	s0, s15
 80039de:	f001 fdef 	bl	80055c0 <Trajectory>
	home_status = 0;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <home_handler+0x84>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
	PID_enable = 1;
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <home_handler+0xb0>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
	state = MSwait;
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <home_handler+0xb4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
	setpoint_y = 0;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <home_handler+0x9c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e002      	b.n	8003a02 <home_handler+0x82>
		return;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <home_handler+0x82>
		return;
 8003a00:	bf00      	nop
}
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20001815 	.word	0x20001815
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	00000000 	.word	0x00000000
 8003a10:	2000190c 	.word	0x2000190c
 8003a14:	20001824 	.word	0x20001824
 8003a18:	ffffd314 	.word	0xffffd314
 8003a1c:	20001904 	.word	0x20001904
 8003a20:	2000182c 	.word	0x2000182c
 8003a24:	20001828 	.word	0x20001828
 8003a28:	479c4000 	.word	0x479c4000
 8003a2c:	4704d000 	.word	0x4704d000
 8003a30:	20000222 	.word	0x20000222
 8003a34:	20000221 	.word	0x20000221

08003a38 <data_report>:

void data_report(MB *variables) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	variables->y_actual_position = getLocalPosition() * 0.3;
 8003a40:	f7fe fd46 	bl	80024d0 <getLocalPosition>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd74 	bl	8000534 <__aeabi_i2d>
 8003a4c:	a326      	add	r3, pc, #152	; (adr r3, 8003ae8 <data_report+0xb0>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fdd9 	bl	8000608 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd f883 	bl	8000b68 <__aeabi_d2iz>
 8003a62:	4603      	mov	r3, r0
 8003a64:	b21a      	sxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	819a      	strh	r2, [r3, #12]
	variables->y_actual_speed = abs(actual_velocity) * 0.3;
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <data_report+0xb8>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a74:	ee17 3a90 	vmov	r3, s15
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bfb8      	it	lt
 8003a7c:	425b      	neglt	r3, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fd58 	bl	8000534 <__aeabi_i2d>
 8003a84:	a318      	add	r3, pc, #96	; (adr r3, 8003ae8 <data_report+0xb0>)
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f7fc fdbd 	bl	8000608 <__aeabi_dmul>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f7fd f867 	bl	8000b68 <__aeabi_d2iz>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	b21a      	sxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	81da      	strh	r2, [r3, #14]
	variables->y_actual_acceleration = abs(actual_acceleration) * 0.3;
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <data_report+0xbc>)
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aac:	ee17 3a90 	vmov	r3, s15
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bfb8      	it	lt
 8003ab4:	425b      	neglt	r3, r3
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fc fd3c 	bl	8000534 <__aeabi_i2d>
 8003abc:	a30a      	add	r3, pc, #40	; (adr r3, 8003ae8 <data_report+0xb0>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fda1 	bl	8000608 <__aeabi_dmul>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f7fd f84b 	bl	8000b68 <__aeabi_d2iz>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	b21a      	sxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	821a      	strh	r2, [r3, #16]
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	33333333 	.word	0x33333333
 8003aec:	3fd33333 	.word	0x3fd33333
 8003af0:	20001830 	.word	0x20001830
 8003af4:	20001834 	.word	0x20001834

08003af8 <x_spam_position>:

void x_spam_position(MB *variables) {
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	if ((variables->x_actual_position - variables->x_target_position) != 0 && variables->x_moving_status == 0) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d007      	beq.n	8003b20 <x_spam_position+0x28>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <x_spam_position+0x28>
		variables->x_moving_status = 2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
	}
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	0000      	movs	r0, r0
	...

08003b30 <joystick_callback>:

void joystick_callback() {
 8003b30:	b598      	push	{r3, r4, r7, lr}
 8003b32:	af00      	add	r7, sp, #0
	if (!jog_enable) {
 8003b34:	4b96      	ldr	r3, [pc, #600]	; (8003d90 <joystick_callback+0x260>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 811d 	beq.w	8003d78 <joystick_callback+0x248>
		return;
	}

	setpoint_x += receivedByte[0];
 8003b3e:	4b95      	ldr	r3, [pc, #596]	; (8003d94 <joystick_callback+0x264>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b95      	ldr	r3, [pc, #596]	; (8003d98 <joystick_callback+0x268>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4413      	add	r3, r2
 8003b48:	4a93      	ldr	r2, [pc, #588]	; (8003d98 <joystick_callback+0x268>)
 8003b4a:	6013      	str	r3, [r2, #0]
	setpoint_y += receivedByte[1];
 8003b4c:	4b91      	ldr	r3, [pc, #580]	; (8003d94 <joystick_callback+0x264>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <joystick_callback+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	4a91      	ldr	r2, [pc, #580]	; (8003d9c <joystick_callback+0x26c>)
 8003b58:	6013      	str	r3, [r2, #0]

	if (setpoint_x > 1400) {
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	; (8003d98 <joystick_callback+0x268>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003b62:	dd04      	ble.n	8003b6e <joystick_callback+0x3e>
		setpoint_x = 1400;
 8003b64:	4b8c      	ldr	r3, [pc, #560]	; (8003d98 <joystick_callback+0x268>)
 8003b66:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e007      	b.n	8003b7e <joystick_callback+0x4e>
	} else if (setpoint_x < -1400) {
 8003b6e:	4b8a      	ldr	r3, [pc, #552]	; (8003d98 <joystick_callback+0x268>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f513 6faf 	cmn.w	r3, #1400	; 0x578
 8003b76:	da02      	bge.n	8003b7e <joystick_callback+0x4e>
		setpoint_x = -1400;
 8003b78:	4b87      	ldr	r3, [pc, #540]	; (8003d98 <joystick_callback+0x268>)
 8003b7a:	4a89      	ldr	r2, [pc, #548]	; (8003da0 <joystick_callback+0x270>)
 8003b7c:	601a      	str	r2, [r3, #0]
	}

	if (setpoint_y > 11667) {
 8003b7e:	4b87      	ldr	r3, [pc, #540]	; (8003d9c <joystick_callback+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003b86:	4293      	cmp	r3, r2
 8003b88:	dd04      	ble.n	8003b94 <joystick_callback+0x64>
		setpoint_y = 11667;
 8003b8a:	4b84      	ldr	r3, [pc, #528]	; (8003d9c <joystick_callback+0x26c>)
 8003b8c:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e007      	b.n	8003ba4 <joystick_callback+0x74>
	} else if (setpoint_y < -11667) {
 8003b94:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <joystick_callback+0x26c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a82      	ldr	r2, [pc, #520]	; (8003da4 <joystick_callback+0x274>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	da02      	bge.n	8003ba4 <joystick_callback+0x74>
		setpoint_y = -11667;
 8003b9e:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <joystick_callback+0x26c>)
 8003ba0:	4a80      	ldr	r2, [pc, #512]	; (8003da4 <joystick_callback+0x274>)
 8003ba2:	601a      	str	r2, [r3, #0]
	}

	if (receivedByte[2]) {
 8003ba4:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <joystick_callback+0x264>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d036      	beq.n	8003c1a <joystick_callback+0xea>
		corners[jog_point_n].x = setpoint_x / 10.0;
 8003bac:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <joystick_callback+0x268>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fc fcbf 	bl	8000534 <__aeabi_i2d>
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <joystick_callback+0x278>)
 8003bbc:	f7fc fe4e 	bl	800085c <__aeabi_ddiv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4979      	ldr	r1, [pc, #484]	; (8003dac <joystick_callback+0x27c>)
 8003bc6:	7809      	ldrb	r1, [r1, #0]
 8003bc8:	460c      	mov	r4, r1
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f7fd f813 	bl	8000bf8 <__aeabi_d2f>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4976      	ldr	r1, [pc, #472]	; (8003db0 <joystick_callback+0x280>)
 8003bd6:	00e3      	lsls	r3, r4, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	601a      	str	r2, [r3, #0]
		corners[jog_point_n].y = setpoint_y * 0.03;
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	; (8003d9c <joystick_callback+0x26c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fca7 	bl	8000534 <__aeabi_i2d>
 8003be6:	a366      	add	r3, pc, #408	; (adr r3, 8003d80 <joystick_callback+0x250>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fd0c 	bl	8000608 <__aeabi_dmul>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	496d      	ldr	r1, [pc, #436]	; (8003dac <joystick_callback+0x27c>)
 8003bf6:	7809      	ldrb	r1, [r1, #0]
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fc fffb 	bl	8000bf8 <__aeabi_d2f>
 8003c02:	4602      	mov	r2, r0
 8003c04:	496a      	ldr	r1, [pc, #424]	; (8003db0 <joystick_callback+0x280>)
 8003c06:	00e3      	lsls	r3, r4, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	601a      	str	r2, [r3, #0]
		jog_point_n++;
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <joystick_callback+0x27c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <joystick_callback+0x27c>)
 8003c18:	701a      	strb	r2, [r3, #0]
	}
	if (jog_point_n >= 3) {
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <joystick_callback+0x27c>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	f240 80ab 	bls.w	8003d7a <joystick_callback+0x24a>
		if (state == MSpick) {
 8003c24:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <joystick_callback+0x284>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d14f      	bne.n	8003ccc <joystick_callback+0x19c>
			localize(corners, pick, &origin_pick, &angle_pick);
 8003c2c:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <joystick_callback+0x288>)
 8003c2e:	4a63      	ldr	r2, [pc, #396]	; (8003dbc <joystick_callback+0x28c>)
 8003c30:	4963      	ldr	r1, [pc, #396]	; (8003dc0 <joystick_callback+0x290>)
 8003c32:	485f      	ldr	r0, [pc, #380]	; (8003db0 <joystick_callback+0x280>)
 8003c34:	f7fe fc6c 	bl	8002510 <localize>
			MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003c38:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <joystick_callback+0x288>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fc8b 	bl	8000558 <__aeabi_f2d>
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <joystick_callback+0x294>)
 8003c48:	f7fc fcde 	bl	8000608 <__aeabi_dmul>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	a34c      	add	r3, pc, #304	; (adr r3, 8003d88 <joystick_callback+0x258>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fdff 	bl	800085c <__aeabi_ddiv>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	4958      	ldr	r1, [pc, #352]	; (8003dc8 <joystick_callback+0x298>)
 8003c68:	f7fc fb16 	bl	8000298 <__aeabi_dsub>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <joystick_callback+0x29c>)
 8003c7a:	f7fc fcc5 	bl	8000608 <__aeabi_dmul>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fc ff6f 	bl	8000b68 <__aeabi_d2iz>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	b21a      	sxth	r2, r3
 8003c8e:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <joystick_callback+0x2a0>)
 8003c90:	82da      	strh	r2, [r3, #22]
			MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <joystick_callback+0x28c>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca4:	ee17 3a90 	vmov	r3, s15
 8003ca8:	b21a      	sxth	r2, r3
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <joystick_callback+0x2a0>)
 8003cac:	825a      	strh	r2, [r3, #18]
			MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 8003cae:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <joystick_callback+0x28c>)
 8003cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc0:	ee17 3a90 	vmov	r3, s15
 8003cc4:	b21a      	sxth	r2, r3
 8003cc6:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <joystick_callback+0x2a0>)
 8003cc8:	829a      	strh	r2, [r3, #20]
 8003cca:	e04e      	b.n	8003d6a <joystick_callback+0x23a>
		} else {
			localize(corners, place, &origin_place, &angle_place);
 8003ccc:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <joystick_callback+0x2a4>)
 8003cce:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <joystick_callback+0x2a8>)
 8003cd0:	4942      	ldr	r1, [pc, #264]	; (8003ddc <joystick_callback+0x2ac>)
 8003cd2:	4837      	ldr	r0, [pc, #220]	; (8003db0 <joystick_callback+0x280>)
 8003cd4:	f7fe fc1c 	bl	8002510 <localize>
			MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <joystick_callback+0x2a4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fc3b 	bl	8000558 <__aeabi_f2d>
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <joystick_callback+0x294>)
 8003ce8:	f7fc fc8e 	bl	8000608 <__aeabi_dmul>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	a324      	add	r3, pc, #144	; (adr r3, 8003d88 <joystick_callback+0x258>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fdaf 	bl	800085c <__aeabi_ddiv>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	4930      	ldr	r1, [pc, #192]	; (8003dc8 <joystick_callback+0x298>)
 8003d08:	f7fc fac6 	bl	8000298 <__aeabi_dsub>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <joystick_callback+0x29c>)
 8003d1a:	f7fc fc75 	bl	8000608 <__aeabi_dmul>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f7fc ff1f 	bl	8000b68 <__aeabi_d2iz>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	b21a      	sxth	r2, r3
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <joystick_callback+0x2a0>)
 8003d30:	839a      	strh	r2, [r3, #28]
			MBvariables.place_tray_origin_x = origin_place.x * 10;
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <joystick_callback+0x2a8>)
 8003d34:	edd3 7a00 	vldr	s15, [r3]
 8003d38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d44:	ee17 3a90 	vmov	r3, s15
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <joystick_callback+0x2a0>)
 8003d4c:	831a      	strh	r2, [r3, #24]
			MBvariables.place_tray_origin_y = origin_place.y * 10;
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <joystick_callback+0x2a8>)
 8003d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d60:	ee17 3a90 	vmov	r3, s15
 8003d64:	b21a      	sxth	r2, r3
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <joystick_callback+0x2a0>)
 8003d68:	835a      	strh	r2, [r3, #26]
		}
		state = MSwait;
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <joystick_callback+0x284>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
		jog_point_n = 0;
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <joystick_callback+0x27c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e000      	b.n	8003d7a <joystick_callback+0x24a>
		return;
 8003d78:	bf00      	nop
	}
}
 8003d7a:	bd98      	pop	{r3, r4, r7, pc}
 8003d7c:	f3af 8000 	nop.w
 8003d80:	eb851eb8 	.word	0xeb851eb8
 8003d84:	3f9eb851 	.word	0x3f9eb851
 8003d88:	54442d18 	.word	0x54442d18
 8003d8c:	400921fb 	.word	0x400921fb
 8003d90:	20001816 	.word	0x20001816
 8003d94:	2000193c 	.word	0x2000193c
 8003d98:	20001908 	.word	0x20001908
 8003d9c:	20001904 	.word	0x20001904
 8003da0:	fffffa88 	.word	0xfffffa88
 8003da4:	ffffd26d 	.word	0xffffd26d
 8003da8:	40240000 	.word	0x40240000
 8003dac:	20001817 	.word	0x20001817
 8003db0:	20001838 	.word	0x20001838
 8003db4:	20000221 	.word	0x20000221
 8003db8:	200018e8 	.word	0x200018e8
 8003dbc:	200018e0 	.word	0x200018e0
 8003dc0:	20001850 	.word	0x20001850
 8003dc4:	40668000 	.word	0x40668000
 8003dc8:	40768000 	.word	0x40768000
 8003dcc:	40590000 	.word	0x40590000
 8003dd0:	20001910 	.word	0x20001910
 8003dd4:	200018f4 	.word	0x200018f4
 8003dd8:	200018ec 	.word	0x200018ec
 8003ddc:	20001898 	.word	0x20001898

08003de0 <move_finished>:

uint8_t move_finished(uint32_t tolerance) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	if (abs(getLocalPosition() - setpoint_y) < tolerance && abs(MBvariables.x_actual_position - setpoint_x) < tolerance) {
 8003de8:	f7fe fb72 	bl	80024d0 <getLocalPosition>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <move_finished+0x4c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bfb8      	it	lt
 8003df8:	425b      	neglt	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d90f      	bls.n	8003e22 <move_finished+0x42>
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <move_finished+0x50>)
 8003e04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <move_finished+0x54>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	425b      	neglt	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <move_finished+0x42>
		return 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <move_finished+0x44>
	}
	return 0;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20001904 	.word	0x20001904
 8003e30:	20001910 	.word	0x20001910
 8003e34:	20001908 	.word	0x20001908

08003e38 <preset_data_y_only>:

void preset_data_y_only() {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 9; i++) {
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	e043      	b.n	8003ecc <preset_data_y_only+0x94>
		pick[i].y = 38.0 + 38.0 * i;
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fc fb75 	bl	8000534 <__aeabi_i2d>
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <preset_data_y_only+0xa4>)
 8003e50:	f7fc fbda 	bl	8000608 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <preset_data_y_only+0xa4>)
 8003e62:	f7fc fa1b 	bl	800029c <__adddf3>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7fc fec3 	bl	8000bf8 <__aeabi_d2f>
 8003e72:	4602      	mov	r2, r0
 8003e74:	491a      	ldr	r1, [pc, #104]	; (8003ee0 <preset_data_y_only+0xa8>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	601a      	str	r2, [r3, #0]
		place[i].y = -(38.0 + 38.0 * i);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fc fb57 	bl	8000534 <__aeabi_i2d>
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <preset_data_y_only+0xa4>)
 8003e8c:	f7fc fbbc 	bl	8000608 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <preset_data_y_only+0xa4>)
 8003e9e:	f7fc f9fd 	bl	800029c <__adddf3>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7fc fea5 	bl	8000bf8 <__aeabi_d2f>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef1 7a67 	vneg.f32	s15, s15
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <preset_data_y_only+0xac>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	ddb8      	ble.n	8003e44 <preset_data_y_only+0xc>
	}
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40430000 	.word	0x40430000
 8003ee0:	20001850 	.word	0x20001850
 8003ee4:	20001898 	.word	0x20001898

08003ee8 <preset_data_xy>:

void preset_data_xy() {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	corners[0].x = 7.1;
 8003eec:	4b64      	ldr	r3, [pc, #400]	; (8004080 <preset_data_xy+0x198>)
 8003eee:	4a65      	ldr	r2, [pc, #404]	; (8004084 <preset_data_xy+0x19c>)
 8003ef0:	601a      	str	r2, [r3, #0]
	corners[0].y = -68.0;
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <preset_data_xy+0x198>)
 8003ef4:	4a64      	ldr	r2, [pc, #400]	; (8004088 <preset_data_xy+0x1a0>)
 8003ef6:	605a      	str	r2, [r3, #4]
	corners[1].x = 52.7;
 8003ef8:	4b61      	ldr	r3, [pc, #388]	; (8004080 <preset_data_xy+0x198>)
 8003efa:	4a64      	ldr	r2, [pc, #400]	; (800408c <preset_data_xy+0x1a4>)
 8003efc:	609a      	str	r2, [r3, #8]
	corners[1].y = -29.4;
 8003efe:	4b60      	ldr	r3, [pc, #384]	; (8004080 <preset_data_xy+0x198>)
 8003f00:	4a63      	ldr	r2, [pc, #396]	; (8004090 <preset_data_xy+0x1a8>)
 8003f02:	60da      	str	r2, [r3, #12]
	corners[2].x = 21.2;
 8003f04:	4b5e      	ldr	r3, [pc, #376]	; (8004080 <preset_data_xy+0x198>)
 8003f06:	4a63      	ldr	r2, [pc, #396]	; (8004094 <preset_data_xy+0x1ac>)
 8003f08:	611a      	str	r2, [r3, #16]
	corners[2].y = 8.2;
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <preset_data_xy+0x198>)
 8003f0c:	4a62      	ldr	r2, [pc, #392]	; (8004098 <preset_data_xy+0x1b0>)
 8003f0e:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin_pick, &angle_pick);
 8003f10:	4b62      	ldr	r3, [pc, #392]	; (800409c <preset_data_xy+0x1b4>)
 8003f12:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <preset_data_xy+0x1b8>)
 8003f14:	4963      	ldr	r1, [pc, #396]	; (80040a4 <preset_data_xy+0x1bc>)
 8003f16:	485a      	ldr	r0, [pc, #360]	; (8004080 <preset_data_xy+0x198>)
 8003f18:	f7fe fafa 	bl	8002510 <localize>
	MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	; (800409c <preset_data_xy+0x1b4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb19 	bl	8000558 <__aeabi_f2d>
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	4b5f      	ldr	r3, [pc, #380]	; (80040a8 <preset_data_xy+0x1c0>)
 8003f2c:	f7fc fb6c 	bl	8000608 <__aeabi_dmul>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	a34f      	add	r3, pc, #316	; (adr r3, 8004078 <preset_data_xy+0x190>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f7fc fc8d 	bl	800085c <__aeabi_ddiv>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	f04f 0000 	mov.w	r0, #0
 8003f4a:	4958      	ldr	r1, [pc, #352]	; (80040ac <preset_data_xy+0x1c4>)
 8003f4c:	f7fc f9a4 	bl	8000298 <__aeabi_dsub>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b54      	ldr	r3, [pc, #336]	; (80040b0 <preset_data_xy+0x1c8>)
 8003f5e:	f7fc fb53 	bl	8000608 <__aeabi_dmul>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7fc fdfd 	bl	8000b68 <__aeabi_d2iz>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <preset_data_xy+0x1cc>)
 8003f74:	82da      	strh	r2, [r3, #22]
	MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 8003f76:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <preset_data_xy+0x1b8>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f88:	ee17 3a90 	vmov	r3, s15
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <preset_data_xy+0x1cc>)
 8003f90:	825a      	strh	r2, [r3, #18]
	MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <preset_data_xy+0x1b8>)
 8003f94:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa4:	ee17 3a90 	vmov	r3, s15
 8003fa8:	b21a      	sxth	r2, r3
 8003faa:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <preset_data_xy+0x1cc>)
 8003fac:	829a      	strh	r2, [r3, #20]

	corners[0].x = -90.3;
 8003fae:	4b34      	ldr	r3, [pc, #208]	; (8004080 <preset_data_xy+0x198>)
 8003fb0:	4a41      	ldr	r2, [pc, #260]	; (80040b8 <preset_data_xy+0x1d0>)
 8003fb2:	601a      	str	r2, [r3, #0]
	corners[0].y = -170.0;
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <preset_data_xy+0x198>)
 8003fb6:	4a41      	ldr	r2, [pc, #260]	; (80040bc <preset_data_xy+0x1d4>)
 8003fb8:	605a      	str	r2, [r3, #4]
	corners[1].x = -46.1;
 8003fba:	4b31      	ldr	r3, [pc, #196]	; (8004080 <preset_data_xy+0x198>)
 8003fbc:	4a40      	ldr	r2, [pc, #256]	; (80040c0 <preset_data_xy+0x1d8>)
 8003fbe:	609a      	str	r2, [r3, #8]
	corners[1].y = -149.4;
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <preset_data_xy+0x198>)
 8003fc2:	4a40      	ldr	r2, [pc, #256]	; (80040c4 <preset_data_xy+0x1dc>)
 8003fc4:	60da      	str	r2, [r3, #12]
	corners[2].x = -69.6;
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <preset_data_xy+0x198>)
 8003fc8:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <preset_data_xy+0x1e0>)
 8003fca:	611a      	str	r2, [r3, #16]
	corners[2].y = -95.3;
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	; (8004080 <preset_data_xy+0x198>)
 8003fce:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <preset_data_xy+0x1e4>)
 8003fd0:	615a      	str	r2, [r3, #20]
	localize(corners, place, &origin_place, &angle_place);
 8003fd2:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <preset_data_xy+0x1e8>)
 8003fd4:	4a3f      	ldr	r2, [pc, #252]	; (80040d4 <preset_data_xy+0x1ec>)
 8003fd6:	4940      	ldr	r1, [pc, #256]	; (80040d8 <preset_data_xy+0x1f0>)
 8003fd8:	4829      	ldr	r0, [pc, #164]	; (8004080 <preset_data_xy+0x198>)
 8003fda:	f7fe fa99 	bl	8002510 <localize>
	MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8003fde:	4b3c      	ldr	r3, [pc, #240]	; (80040d0 <preset_data_xy+0x1e8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fab8 	bl	8000558 <__aeabi_f2d>
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <preset_data_xy+0x1c0>)
 8003fee:	f7fc fb0b 	bl	8000608 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	a31f      	add	r3, pc, #124	; (adr r3, 8004078 <preset_data_xy+0x190>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc fc2c 	bl	800085c <__aeabi_ddiv>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	f04f 0000 	mov.w	r0, #0
 800400c:	4927      	ldr	r1, [pc, #156]	; (80040ac <preset_data_xy+0x1c4>)
 800400e:	f7fc f943 	bl	8000298 <__aeabi_dsub>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <preset_data_xy+0x1c8>)
 8004020:	f7fc faf2 	bl	8000608 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f7fc fd9c 	bl	8000b68 <__aeabi_d2iz>
 8004030:	4603      	mov	r3, r0
 8004032:	b21a      	sxth	r2, r3
 8004034:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <preset_data_xy+0x1cc>)
 8004036:	839a      	strh	r2, [r3, #28]
	MBvariables.place_tray_origin_x = origin_place.x * 10;
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <preset_data_xy+0x1ec>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404a:	ee17 3a90 	vmov	r3, s15
 800404e:	b21a      	sxth	r2, r3
 8004050:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <preset_data_xy+0x1cc>)
 8004052:	831a      	strh	r2, [r3, #24]
	MBvariables.place_tray_origin_y = origin_place.y * 10;
 8004054:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <preset_data_xy+0x1ec>)
 8004056:	edd3 7a01 	vldr	s15, [r3, #4]
 800405a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800405e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004066:	ee17 3a90 	vmov	r3, s15
 800406a:	b21a      	sxth	r2, r3
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <preset_data_xy+0x1cc>)
 800406e:	835a      	strh	r2, [r3, #26]
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}
 8004074:	f3af 8000 	nop.w
 8004078:	54442d18 	.word	0x54442d18
 800407c:	400921fb 	.word	0x400921fb
 8004080:	20001838 	.word	0x20001838
 8004084:	40e33333 	.word	0x40e33333
 8004088:	c2880000 	.word	0xc2880000
 800408c:	4252cccd 	.word	0x4252cccd
 8004090:	c1eb3333 	.word	0xc1eb3333
 8004094:	41a9999a 	.word	0x41a9999a
 8004098:	41033333 	.word	0x41033333
 800409c:	200018e8 	.word	0x200018e8
 80040a0:	200018e0 	.word	0x200018e0
 80040a4:	20001850 	.word	0x20001850
 80040a8:	40668000 	.word	0x40668000
 80040ac:	40768000 	.word	0x40768000
 80040b0:	40590000 	.word	0x40590000
 80040b4:	20001910 	.word	0x20001910
 80040b8:	c2b4999a 	.word	0xc2b4999a
 80040bc:	c32a0000 	.word	0xc32a0000
 80040c0:	c2386666 	.word	0xc2386666
 80040c4:	c3156666 	.word	0xc3156666
 80040c8:	c28b3333 	.word	0xc28b3333
 80040cc:	c2be999a 	.word	0xc2be999a
 80040d0:	200018f4 	.word	0x200018f4
 80040d4:	200018ec 	.word	0x200018ec
 80040d8:	20001898 	.word	0x20001898

080040dc <emergency_handler>:

void emergency_handler() {
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
	static uint8_t prev_state;
	emergency = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80040e0:	2104      	movs	r1, #4
 80040e2:	4818      	ldr	r0, [pc, #96]	; (8004144 <emergency_handler+0x68>)
 80040e4:	f003 f946 	bl	8007374 <HAL_GPIO_ReadPin>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <emergency_handler+0x6c>)
 80040f8:	701a      	strb	r2, [r3, #0]

	// going into emergency
	if (!prev_state && emergency) {
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <emergency_handler+0x70>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <emergency_handler+0x34>
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <emergency_handler+0x6c>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <emergency_handler+0x34>
		ENDEFF_EMERGENCY(&hi2c1);
 800410a:	4811      	ldr	r0, [pc, #68]	; (8004150 <emergency_handler+0x74>)
 800410c:	f7fc ff7c 	bl	8001008 <ENDEFF_EMERGENCY>
	}

	// leaving emergency
	if (prev_state && !emergency) {
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <emergency_handler+0x70>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <emergency_handler+0x5a>
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <emergency_handler+0x6c>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <emergency_handler+0x5a>
		ENDEFF_EMERGENCY_QUIT(&hi2c1);
 8004120:	480b      	ldr	r0, [pc, #44]	; (8004150 <emergency_handler+0x74>)
 8004122:	f7fc ff99 	bl	8001058 <ENDEFF_EMERGENCY_QUIT>
		HAL_Delay(11);
 8004126:	200b      	movs	r0, #11
 8004128:	f001 ffea 	bl	8006100 <HAL_Delay>
		ENE_I2C_UPDATE(&MBvariables.end_effector_status, &hi2c1, 1);
 800412c:	2201      	movs	r2, #1
 800412e:	4908      	ldr	r1, [pc, #32]	; (8004150 <emergency_handler+0x74>)
 8004130:	4808      	ldr	r0, [pc, #32]	; (8004154 <emergency_handler+0x78>)
 8004132:	f7fd f8a9 	bl	8001288 <ENE_I2C_UPDATE>
	}

	prev_state = emergency;
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <emergency_handler+0x6c>)
 8004138:	781a      	ldrb	r2, [r3, #0]
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <emergency_handler+0x70>)
 800413c:	701a      	strb	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40020800 	.word	0x40020800
 8004148:	20001814 	.word	0x20001814
 800414c:	2000196c 	.word	0x2000196c
 8004150:	200004d8 	.word	0x200004d8
 8004154:	20001936 	.word	0x20001936

08004158 <RGB_logic>:
uint32_t LEDtime = 0;
MachineState laststate = MSidle;

// USER CODE ======================================================================================

void RGB_logic(MachineState state, uint8_t point, uint8_t emergency) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
 8004162:	460b      	mov	r3, r1
 8004164:	71bb      	strb	r3, [r7, #6]
 8004166:	4613      	mov	r3, r2
 8004168:	717b      	strb	r3, [r7, #5]
	// Run on 200 Hz
	static uint32_t timestamp;
	if (HAL_GetTick() - timestamp < 5) {
 800416a:	f001 ffbd 	bl	80060e8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	4b4a      	ldr	r3, [pc, #296]	; (800429c <RGB_logic+0x144>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b04      	cmp	r3, #4
 8004178:	f240 808c 	bls.w	8004294 <RGB_logic+0x13c>
		return;
	}
	timestamp = HAL_GetTick() + 5;
 800417c:	f001 ffb4 	bl	80060e8 <HAL_GetTick>
 8004180:	4603      	mov	r3, r0
 8004182:	3305      	adds	r3, #5
 8004184:	4a45      	ldr	r2, [pc, #276]	; (800429c <RGB_logic+0x144>)
 8004186:	6013      	str	r3, [r2, #0]

	// Main logic here
	if (emergency) {
 8004188:	797b      	ldrb	r3, [r7, #5]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00f      	beq.n	80041ae <RGB_logic+0x56>
		laststate = MSwait;
 800418e:	4b44      	ldr	r3, [pc, #272]	; (80042a0 <RGB_logic+0x148>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
		RGB_BreathingPattern(500, 255, 0, 0);
 8004194:	2300      	movs	r3, #0
 8004196:	2200      	movs	r2, #0
 8004198:	21ff      	movs	r1, #255	; 0xff
 800419a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800419e:	f000 faf7 	bl	8004790 <RGB_BreathingPattern>
		Set_Brightness(45);
 80041a2:	202d      	movs	r0, #45	; 0x2d
 80041a4:	f7fe ffd0 	bl	8003148 <Set_Brightness>
		WS2812_Send();
 80041a8:	f7ff f850 	bl	800324c <WS2812_Send>
		return;
 80041ac:	e073      	b.n	8004296 <RGB_logic+0x13e>
	} else {
		switch (state) {
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d868      	bhi.n	8004286 <RGB_logic+0x12e>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <RGB_logic+0x64>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041d9 	.word	0x080041d9
 80041c0:	080041fd 	.word	0x080041fd
 80041c4:	08004229 	.word	0x08004229
 80041c8:	08004229 	.word	0x08004229
 80041cc:	0800423f 	.word	0x0800423f
 80041d0:	08004255 	.word	0x08004255
 80041d4:	08004271 	.word	0x08004271
		case MSwait:
			if (laststate != MSwait) {
 80041d8:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <RGB_logic+0x148>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <RGB_logic+0x8e>
				LEDtime = 0;
 80041e0:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <RGB_logic+0x14c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
			}
			RGB_BreathingPattern(500, 0, 255, 0);
 80041e6:	2300      	movs	r3, #0
 80041e8:	22ff      	movs	r2, #255	; 0xff
 80041ea:	2100      	movs	r1, #0
 80041ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041f0:	f000 face 	bl	8004790 <RGB_BreathingPattern>
			laststate = MSwait;
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <RGB_logic+0x148>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
			break;
 80041fa:	e045      	b.n	8004288 <RGB_logic+0x130>
		case MSidle:
			if (laststate != MSidle) {
 80041fc:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <RGB_logic+0x148>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d002      	beq.n	800420a <RGB_logic+0xb2>
				LEDtime = 0;
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <RGB_logic+0x14c>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
			}
			RGB_Rainbow(!MBvariables.heartbeat);
 800420a:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <RGB_logic+0x150>)
 800420c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f860 	bl	80042e0 <RGB_Rainbow>
			laststate = MSidle;
 8004220:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <RGB_logic+0x148>)
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
			break;
 8004226:	e02f      	b.n	8004288 <RGB_logic+0x130>
		case MSpick:
		case MSplace:
			RGB_BreathingPattern(500, 255, 255, 255);
 8004228:	23ff      	movs	r3, #255	; 0xff
 800422a:	22ff      	movs	r2, #255	; 0xff
 800422c:	21ff      	movs	r1, #255	; 0xff
 800422e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004232:	f000 faad 	bl	8004790 <RGB_BreathingPattern>
			laststate = MSpick;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <RGB_logic+0x148>)
 8004238:	2202      	movs	r2, #2
 800423a:	701a      	strb	r2, [r3, #0]
			break;
 800423c:	e024      	b.n	8004288 <RGB_logic+0x130>
		case MShome:
			RGB_BreathingPattern(500, 0, 0, 255);
 800423e:	23ff      	movs	r3, #255	; 0xff
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004248:	f000 faa2 	bl	8004790 <RGB_BreathingPattern>
			laststate = MShome;
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <RGB_logic+0x148>)
 800424e:	2204      	movs	r2, #4
 8004250:	701a      	strb	r2, [r3, #0]
			break;
 8004252:	e019      	b.n	8004288 <RGB_logic+0x130>
		case MStray:
			if (laststate != MStray) {
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <RGB_logic+0x148>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d001      	beq.n	8004260 <RGB_logic+0x108>
				RGB_off();
 800425c:	f000 f826 	bl	80042ac <RGB_off>
			}
			RGB_TrayProgress(point);
 8004260:	79bb      	ldrb	r3, [r7, #6]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb7c 	bl	8004960 <RGB_TrayProgress>
			laststate = MStray;
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <RGB_logic+0x148>)
 800426a:	2205      	movs	r2, #5
 800426c:	701a      	strb	r2, [r3, #0]
			break;
 800426e:	e00b      	b.n	8004288 <RGB_logic+0x130>
		case MSpoint:
			laststate = MSpoint;
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <RGB_logic+0x148>)
 8004272:	2206      	movs	r2, #6
 8004274:	701a      	strb	r2, [r3, #0]
			RGB_BreathingPattern(500, 255, 165, 0);
 8004276:	2300      	movs	r3, #0
 8004278:	22a5      	movs	r2, #165	; 0xa5
 800427a:	21ff      	movs	r1, #255	; 0xff
 800427c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004280:	f000 fa86 	bl	8004790 <RGB_BreathingPattern>
			break;
 8004284:	e000      	b.n	8004288 <RGB_logic+0x130>
		default:
			break;
 8004286:	bf00      	nop

//	for (int i = 16; i < 24; i++) {
//		Set_LED(i, 0, 0, 0);
//	}

	Set_Brightness(45);
 8004288:	202d      	movs	r0, #45	; 0x2d
 800428a:	f7fe ff5d 	bl	8003148 <Set_Brightness>
	WS2812_Send();
 800428e:	f7fe ffdd 	bl	800324c <WS2812_Send>
 8004292:	e000      	b.n	8004296 <RGB_logic+0x13e>
		return;
 8004294:	bf00      	nop
}
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20001970 	.word	0x20001970
 80042a0:	20000223 	.word	0x20000223
 80042a4:	200018f8 	.word	0x200018f8
 80042a8:	20001910 	.word	0x20001910

080042ac <RGB_off>:

void RGB_off() {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; i++) {
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	e008      	b.n	80042ca <RGB_off+0x1e>
		Set_LED(i, 0, 0, 0);
 80042b8:	2300      	movs	r3, #0
 80042ba:	2200      	movs	r2, #0
 80042bc:	2100      	movs	r1, #0
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe ff12 	bl	80030e8 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3301      	adds	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b3b      	cmp	r3, #59	; 0x3b
 80042ce:	ddf3      	ble.n	80042b8 <RGB_off+0xc>
	}
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	0000      	movs	r0, r0
 80042dc:	0000      	movs	r0, r0
	...

080042e0 <RGB_Rainbow>:

void RGB_Rainbow(uint8_t dobreathing) {
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b090      	sub	sp, #64	; 0x40
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
	static uint32_t startTime = 0;
	static const uint32_t transitionDuration = 5000; // Transition duration in milliseconds

	if (HAL_GetTick() - startTime >= transitionDuration) {
 80042ea:	f001 fefd 	bl	80060e8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4bc1      	ldr	r3, [pc, #772]	; (80045f8 <RGB_Rainbow+0x318>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	4bc1      	ldr	r3, [pc, #772]	; (80045fc <RGB_Rainbow+0x31c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d304      	bcc.n	8004308 <RGB_Rainbow+0x28>
		startTime = HAL_GetTick();
 80042fe:	f001 fef3 	bl	80060e8 <HAL_GetTick>
 8004302:	4603      	mov	r3, r0
 8004304:	4abc      	ldr	r2, [pc, #752]	; (80045f8 <RGB_Rainbow+0x318>)
 8004306:	6013      	str	r3, [r2, #0]
	}

	// Calculate time elapsed in the current transition
	uint32_t elapsed = HAL_GetTick() - startTime;
 8004308:	f001 feee 	bl	80060e8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	4bba      	ldr	r3, [pc, #744]	; (80045f8 <RGB_Rainbow+0x318>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate the normalized progress (0.0 to 1.0) within the transition
	float progress = (float) elapsed / transitionDuration;
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004320:	4bb6      	ldr	r3, [pc, #728]	; (80045fc <RGB_Rainbow+0x31c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800432c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004330:	edc7 7a08 	vstr	s15, [r7, #32]

	// Calculate the hue angle based on the progress
	float hueAngle = 360.0f * progress;
 8004334:	edd7 7a08 	vldr	s15, [r7, #32]
 8004338:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004600 <RGB_Rainbow+0x320>
 800433c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004340:	edc7 7a07 	vstr	s15, [r7, #28]

	// Set LED colors based on the hue angle
	for (int i = 0; i < MAX_LED; i++) {
 8004344:	2300      	movs	r3, #0
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004348:	e1f2      	b.n	8004730 <RGB_Rainbow+0x450>
		// Calculate the hue value for the current LED
		float ledHue = hueAngle + (i * (360.0f / MAX_LED));
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004354:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800435c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004364:	edc7 7a06 	vstr	s15, [r7, #24]

		// Convert hue to RGB using HSV color model
		float huePrime = fmodf(ledHue / 60.0f, 6.0f);
 8004368:	edd7 7a06 	vldr	s15, [r7, #24]
 800436c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004604 <RGB_Rainbow+0x324>
 8004370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004374:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004378:	eeb0 0a47 	vmov.f32	s0, s14
 800437c:	f00c fc56 	bl	8010c2c <fmodf>
 8004380:	ed87 0a05 	vstr	s0, [r7, #20]
		float chroma = 1.0f;
 8004384:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004388:	613b      	str	r3, [r7, #16]
		float x = chroma * (1.0f - fabsf(fmodf(huePrime, 2.0f) - 1.0f));
 800438a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800438e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004392:	f00c fc4b 	bl	8010c2c <fmodf>
 8004396:	eef0 7a40 	vmov.f32	s15, s0
 800439a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800439e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043a2:	eef0 7ae7 	vabs.f32	s15, s15
 80043a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a03 	vstr	s15, [r7, #12]

		float red, green, blue;

		if (huePrime >= 0.0f && huePrime < 1.0f) {
 80043ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80043be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c6:	db10      	blt.n	80043ea <RGB_Rainbow+0x10a>
 80043c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	d507      	bpl.n	80043ea <RGB_Rainbow+0x10a>
			red = chroma;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
 80043e8:	e06e      	b.n	80044c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 1.0f && huePrime < 2.0f) {
 80043ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fa:	db10      	blt.n	800441e <RGB_Rainbow+0x13e>
 80043fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004400:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d507      	bpl.n	800441e <RGB_Rainbow+0x13e>
			red = x;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
 800441c:	e054      	b.n	80044c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 2.0f && huePrime < 3.0f) {
 800441e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004422:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442e:	db10      	blt.n	8004452 <RGB_Rainbow+0x172>
 8004430:	edd7 7a05 	vldr	s15, [r7, #20]
 8004434:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d507      	bpl.n	8004452 <RGB_Rainbow+0x172>
			red = 0.0f;
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	633b      	str	r3, [r7, #48]	; 0x30
 8004450:	e03a      	b.n	80044c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 3.0f && huePrime < 4.0f) {
 8004452:	edd7 7a05 	vldr	s15, [r7, #20]
 8004456:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800445a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	db10      	blt.n	8004486 <RGB_Rainbow+0x1a6>
 8004464:	edd7 7a05 	vldr	s15, [r7, #20]
 8004468:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800446c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004474:	d507      	bpl.n	8004486 <RGB_Rainbow+0x1a6>
			red = 0.0f;
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
 8004484:	e020      	b.n	80044c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 4.0f && huePrime < 5.0f) {
 8004486:	edd7 7a05 	vldr	s15, [r7, #20]
 800448a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800448e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	db10      	blt.n	80044ba <RGB_Rainbow+0x1da>
 8004498:	edd7 7a05 	vldr	s15, [r7, #20]
 800449c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80044a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	d507      	bpl.n	80044ba <RGB_Rainbow+0x1da>
			red = x;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
 80044b8:	e006      	b.n	80044c8 <RGB_Rainbow+0x1e8>
		} else {
			red = chroma;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// slow fade in
		if (LEDtime == 0) {
 80044c8:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <RGB_Rainbow+0x328>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <RGB_Rainbow+0x1fa>
			LEDtime = HAL_GetTick();
 80044d0:	f001 fe0a 	bl	80060e8 <HAL_GetTick>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4a4c      	ldr	r2, [pc, #304]	; (8004608 <RGB_Rainbow+0x328>)
 80044d8:	6013      	str	r3, [r2, #0]
		}

		float intensity;
		if (HAL_GetTick() - LEDtime < 4000) {
 80044da:	f001 fe05 	bl	80060e8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b49      	ldr	r3, [pc, #292]	; (8004608 <RGB_Rainbow+0x328>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80044ea:	d216      	bcs.n	800451a <RGB_Rainbow+0x23a>
			intensity = (HAL_GetTick() - LEDtime) / 4000.0;
 80044ec:	f001 fdfc 	bl	80060e8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b45      	ldr	r3, [pc, #276]	; (8004608 <RGB_Rainbow+0x328>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc f80b 	bl	8000514 <__aeabi_ui2d>
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	4b42      	ldr	r3, [pc, #264]	; (800460c <RGB_Rainbow+0x32c>)
 8004504:	f7fc f9aa 	bl	800085c <__aeabi_ddiv>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f7fc fb72 	bl	8000bf8 <__aeabi_d2f>
 8004514:	4603      	mov	r3, r0
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004518:	e002      	b.n	8004520 <RGB_Rainbow+0x240>
		} else {
			intensity = 1;
 800451a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		intensity = sqrt(intensity);
 8004520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004522:	f7fc f819 	bl	8000558 <__aeabi_f2d>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	ec43 2b10 	vmov	d0, r2, r3
 800452e:	f00c fb51 	bl	8010bd4 <sqrt>
 8004532:	ec53 2b10 	vmov	r2, r3, d0
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	f7fc fb5d 	bl	8000bf8 <__aeabi_d2f>
 800453e:	4603      	mov	r3, r0
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c

		// breathing pattern
		float intensity2;
		if (dobreathing) {
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d069      	beq.n	800461c <RGB_Rainbow+0x33c>
			intensity2 = 0.1 + 0.9 * (0.5 * (1.0 + sinf((2.0 * PI * elapsed) / 2000)));
 8004548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800454a:	f7fb ffe3 	bl	8000514 <__aeabi_ui2d>
 800454e:	a324      	add	r3, pc, #144	; (adr r3, 80045e0 <RGB_Rainbow+0x300>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fc f858 	bl	8000608 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <RGB_Rainbow+0x330>)
 8004566:	f7fc f979 	bl	800085c <__aeabi_ddiv>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	f7fc fb41 	bl	8000bf8 <__aeabi_d2f>
 8004576:	4603      	mov	r3, r0
 8004578:	ee00 3a10 	vmov	s0, r3
 800457c:	f00c fae4 	bl	8010b48 <sinf>
 8004580:	ee10 3a10 	vmov	r3, s0
 8004584:	4618      	mov	r0, r3
 8004586:	f7fb ffe7 	bl	8000558 <__aeabi_f2d>
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <RGB_Rainbow+0x334>)
 8004590:	f7fb fe84 	bl	800029c <__adddf3>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <RGB_Rainbow+0x338>)
 80045a2:	f7fc f831 	bl	8000608 <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	a30e      	add	r3, pc, #56	; (adr r3, 80045e8 <RGB_Rainbow+0x308>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f828 	bl	8000608 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	a30b      	add	r3, pc, #44	; (adr r3, 80045f0 <RGB_Rainbow+0x310>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7fb fe69 	bl	800029c <__adddf3>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	f7fc fb11 	bl	8000bf8 <__aeabi_d2f>
 80045d6:	4603      	mov	r3, r0
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045da:	e022      	b.n	8004622 <RGB_Rainbow+0x342>
 80045dc:	f3af 8000 	nop.w
 80045e0:	60000000 	.word	0x60000000
 80045e4:	401921fb 	.word	0x401921fb
 80045e8:	cccccccd 	.word	0xcccccccd
 80045ec:	3feccccc 	.word	0x3feccccc
 80045f0:	9999999a 	.word	0x9999999a
 80045f4:	3fb99999 	.word	0x3fb99999
 80045f8:	20001974 	.word	0x20001974
 80045fc:	08012d20 	.word	0x08012d20
 8004600:	43b40000 	.word	0x43b40000
 8004604:	42700000 	.word	0x42700000
 8004608:	200018f8 	.word	0x200018f8
 800460c:	40af4000 	.word	0x40af4000
 8004610:	409f4000 	.word	0x409f4000
 8004614:	3ff00000 	.word	0x3ff00000
 8004618:	3fe00000 	.word	0x3fe00000
		} else {
			intensity2 = 1.0;
 800461c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Scale RGB values to 0-255 range
		uint8_t r = (uint8_t) (red * 255.0 * intensity * intensity2);
 8004622:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004624:	f7fb ff98 	bl	8000558 <__aeabi_f2d>
 8004628:	a347      	add	r3, pc, #284	; (adr r3, 8004748 <RGB_Rainbow+0x468>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fb ffeb 	bl	8000608 <__aeabi_dmul>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4614      	mov	r4, r2
 8004638:	461d      	mov	r5, r3
 800463a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800463c:	f7fb ff8c 	bl	8000558 <__aeabi_f2d>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fb ffde 	bl	8000608 <__aeabi_dmul>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004656:	f7fb ff7f 	bl	8000558 <__aeabi_f2d>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4620      	mov	r0, r4
 8004660:	4629      	mov	r1, r5
 8004662:	f7fb ffd1 	bl	8000608 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f7fc faa3 	bl	8000bb8 <__aeabi_d2uiz>
 8004672:	4603      	mov	r3, r0
 8004674:	72fb      	strb	r3, [r7, #11]
		uint8_t g = (uint8_t) (green * 255.0 * intensity * intensity2);
 8004676:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004678:	f7fb ff6e 	bl	8000558 <__aeabi_f2d>
 800467c:	a332      	add	r3, pc, #200	; (adr r3, 8004748 <RGB_Rainbow+0x468>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fb ffc1 	bl	8000608 <__aeabi_dmul>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4614      	mov	r4, r2
 800468c:	461d      	mov	r5, r3
 800468e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004690:	f7fb ff62 	bl	8000558 <__aeabi_f2d>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4620      	mov	r0, r4
 800469a:	4629      	mov	r1, r5
 800469c:	f7fb ffb4 	bl	8000608 <__aeabi_dmul>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046aa:	f7fb ff55 	bl	8000558 <__aeabi_f2d>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4620      	mov	r0, r4
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7fb ffa7 	bl	8000608 <__aeabi_dmul>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	f7fc fa79 	bl	8000bb8 <__aeabi_d2uiz>
 80046c6:	4603      	mov	r3, r0
 80046c8:	72bb      	strb	r3, [r7, #10]
		uint8_t b = (uint8_t) (blue * 255.0 * intensity * intensity2);
 80046ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046cc:	f7fb ff44 	bl	8000558 <__aeabi_f2d>
 80046d0:	a31d      	add	r3, pc, #116	; (adr r3, 8004748 <RGB_Rainbow+0x468>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb ff97 	bl	8000608 <__aeabi_dmul>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4614      	mov	r4, r2
 80046e0:	461d      	mov	r5, r3
 80046e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046e4:	f7fb ff38 	bl	8000558 <__aeabi_f2d>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	f7fb ff8a 	bl	8000608 <__aeabi_dmul>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fe:	f7fb ff2b 	bl	8000558 <__aeabi_f2d>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f7fb ff7d 	bl	8000608 <__aeabi_dmul>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	f7fc fa4f 	bl	8000bb8 <__aeabi_d2uiz>
 800471a:	4603      	mov	r3, r0
 800471c:	727b      	strb	r3, [r7, #9]

		// Set LED color
		Set_LED(i, r, g, b);
 800471e:	7af9      	ldrb	r1, [r7, #11]
 8004720:	7aba      	ldrb	r2, [r7, #10]
 8004722:	7a7b      	ldrb	r3, [r7, #9]
 8004724:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004726:	f7fe fcdf 	bl	80030e8 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	3301      	adds	r3, #1
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004732:	2b3b      	cmp	r3, #59	; 0x3b
 8004734:	f77f ae09 	ble.w	800434a <RGB_Rainbow+0x6a>
	}
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3740      	adds	r7, #64	; 0x40
 800473e:	46bd      	mov	sp, r7
 8004740:	bdb0      	pop	{r4, r5, r7, pc}
 8004742:	bf00      	nop
 8004744:	f3af 8000 	nop.w
 8004748:	00000000 	.word	0x00000000
 800474c:	406fe000 	.word	0x406fe000

08004750 <RGB_Bootup>:

void RGB_Bootup(void) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++) {
 8004756:	2300      	movs	r3, #0
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	e010      	b.n	800477e <RGB_Bootup+0x2e>
		Set_LED(i, 255, 0, 0);
 800475c:	2300      	movs	r3, #0
 800475e:	2200      	movs	r2, #0
 8004760:	21ff      	movs	r1, #255	; 0xff
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fe fcc0 	bl	80030e8 <Set_LED>
		HAL_Delay(10);
 8004768:	200a      	movs	r0, #10
 800476a:	f001 fcc9 	bl	8006100 <HAL_Delay>
		Set_Brightness(45);
 800476e:	202d      	movs	r0, #45	; 0x2d
 8004770:	f7fe fcea 	bl	8003148 <Set_Brightness>
		WS2812_Send();
 8004774:	f7fe fd6a 	bl	800324c <WS2812_Send>
	for (int i = 0; i < 60; i++) {
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b3b      	cmp	r3, #59	; 0x3b
 8004782:	ddeb      	ble.n	800475c <RGB_Bootup+0xc>
	}
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <RGB_BreathingPattern>:

void RGB_BreathingPattern(uint32_t period, uint8_t R, uint8_t G, uint8_t B) {
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	461a      	mov	r2, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	70fb      	strb	r3, [r7, #3]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70bb      	strb	r3, [r7, #2]
 80047a6:	4613      	mov	r3, r2
 80047a8:	707b      	strb	r3, [r7, #1]
	if (LEDtime == 0) {
 80047aa:	4b69      	ldr	r3, [pc, #420]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <RGB_BreathingPattern+0x2c>
		LEDtime = HAL_GetTick();
 80047b2:	f001 fc99 	bl	80060e8 <HAL_GetTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4a65      	ldr	r2, [pc, #404]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 80047ba:	6013      	str	r3, [r2, #0]
	}

	uint32_t elapsedTime = HAL_GetTick() - LEDtime;
 80047bc:	f001 fc94 	bl	80060e8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	60fb      	str	r3, [r7, #12]
	float intensity;

	intensity = 0.5 * (1.0 + sinf((2.0 * PI * elapsedTime) / period));
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7fb fea2 	bl	8000514 <__aeabi_ui2d>
 80047d0:	a35d      	add	r3, pc, #372	; (adr r3, 8004948 <RGB_BreathingPattern+0x1b8>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb ff17 	bl	8000608 <__aeabi_dmul>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4614      	mov	r4, r2
 80047e0:	461d      	mov	r5, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fb fe96 	bl	8000514 <__aeabi_ui2d>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	f7fc f834 	bl	800085c <__aeabi_ddiv>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fc f9fc 	bl	8000bf8 <__aeabi_d2f>
 8004800:	4603      	mov	r3, r0
 8004802:	ee00 3a10 	vmov	s0, r3
 8004806:	f00c f99f 	bl	8010b48 <sinf>
 800480a:	ee10 3a10 	vmov	r3, s0
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fea2 	bl	8000558 <__aeabi_f2d>
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	4b4e      	ldr	r3, [pc, #312]	; (8004954 <RGB_BreathingPattern+0x1c4>)
 800481a:	f7fb fd3f 	bl	800029c <__adddf3>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	4b4b      	ldr	r3, [pc, #300]	; (8004958 <RGB_BreathingPattern+0x1c8>)
 800482c:	f7fb feec 	bl	8000608 <__aeabi_dmul>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f7fc f9de 	bl	8000bf8 <__aeabi_d2f>
 800483c:	4603      	mov	r3, r0
 800483e:	60bb      	str	r3, [r7, #8]

	// slow fade in
	if (LEDtime == 0) {
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <RGB_BreathingPattern+0xc2>
		LEDtime = HAL_GetTick();
 8004848:	f001 fc4e 	bl	80060e8 <HAL_GetTick>
 800484c:	4603      	mov	r3, r0
 800484e:	4a40      	ldr	r2, [pc, #256]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 8004850:	6013      	str	r3, [r2, #0]
	}

	float intensity2;
	if (HAL_GetTick() - LEDtime < 4000) {
 8004852:	f001 fc49 	bl	80060e8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004862:	d216      	bcs.n	8004892 <RGB_BreathingPattern+0x102>
		intensity2 = (HAL_GetTick() - LEDtime) / 4000.0;
 8004864:	f001 fc40 	bl	80060e8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <RGB_BreathingPattern+0x1c0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	4618      	mov	r0, r3
 8004872:	f7fb fe4f 	bl	8000514 <__aeabi_ui2d>
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	4b38      	ldr	r3, [pc, #224]	; (800495c <RGB_BreathingPattern+0x1cc>)
 800487c:	f7fb ffee 	bl	800085c <__aeabi_ddiv>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	f7fc f9b6 	bl	8000bf8 <__aeabi_d2f>
 800488c:	4603      	mov	r3, r0
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e002      	b.n	8004898 <RGB_BreathingPattern+0x108>
	} else {
		intensity2 = 1;
 8004892:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004896:	617b      	str	r3, [r7, #20]
	}

	intensity2 = sqrt(intensity2);
 8004898:	6978      	ldr	r0, [r7, #20]
 800489a:	f7fb fe5d 	bl	8000558 <__aeabi_f2d>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	ec43 2b10 	vmov	d0, r2, r3
 80048a6:	f00c f995 	bl	8010bd4 <sqrt>
 80048aa:	ec53 2b10 	vmov	r2, r3, d0
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fc f9a1 	bl	8000bf8 <__aeabi_d2f>
 80048b6:	4603      	mov	r3, r0
 80048b8:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < MAX_LED; i++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e038      	b.n	8004932 <RGB_BreathingPattern+0x1a2>
		Set_LED(i, R * intensity * intensity2, G * intensity * intensity2, B * intensity * intensity2);
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80048de:	78bb      	ldrb	r3, [r7, #2]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80048fc:	787b      	ldrb	r3, [r7, #1]
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004906:	edd7 7a02 	vldr	s15, [r7, #8]
 800490a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800490e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491a:	ee17 3a90 	vmov	r3, s15
 800491e:	ee16 2a10 	vmov	r2, s12
 8004922:	ee16 1a90 	vmov	r1, s13
 8004926:	6938      	ldr	r0, [r7, #16]
 8004928:	f7fe fbde 	bl	80030e8 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3301      	adds	r3, #1
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b3b      	cmp	r3, #59	; 0x3b
 8004936:	ddc3      	ble.n	80048c0 <RGB_BreathingPattern+0x130>
	}
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bdb0      	pop	{r4, r5, r7, pc}
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	60000000 	.word	0x60000000
 800494c:	401921fb 	.word	0x401921fb
 8004950:	200018f8 	.word	0x200018f8
 8004954:	3ff00000 	.word	0x3ff00000
 8004958:	3fe00000 	.word	0x3fe00000
 800495c:	40af4000 	.word	0x40af4000

08004960 <RGB_TrayProgress>:

void RGB_TrayProgress(uint8_t point) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
	float percentage = (point + 1.0) / 9.0;
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	4618      	mov	r0, r3
 800496e:	f7fb fde1 	bl	8000534 <__aeabi_i2d>
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <RGB_TrayProgress+0x84>)
 8004978:	f7fb fc90 	bl	800029c <__adddf3>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <RGB_TrayProgress+0x88>)
 800498a:	f7fb ff67 	bl	800085c <__aeabi_ddiv>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	f7fc f92f 	bl	8000bf8 <__aeabi_d2f>
 800499a:	4603      	mov	r3, r0
 800499c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e008      	b.n	80049b6 <RGB_TrayProgress+0x56>
		Set_LED(i, 0, 255, 0);
 80049a4:	2300      	movs	r3, #0
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	2100      	movs	r1, #0
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7fe fb9c 	bl	80030e8 <Set_LED>
	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	68b8      	ldr	r0, [r7, #8]
 80049b8:	f7fb fdce 	bl	8000558 <__aeabi_f2d>
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <RGB_TrayProgress+0x8c>)
 80049c2:	f7fb fe21 	bl	8000608 <__aeabi_dmul>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7fc f8cb 	bl	8000b68 <__aeabi_d2iz>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4293      	cmp	r3, r2
 80049d8:	dbe4      	blt.n	80049a4 <RGB_TrayProgress+0x44>
	}
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	3ff00000 	.word	0x3ff00000
 80049e8:	40220000 	.word	0x40220000
 80049ec:	404e0000 	.word	0x404e0000

080049f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 80049f4:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <main+0xa0>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 1000;
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <main+0xa0>)
 80049fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a00:	841a      	strh	r2, [r3, #32]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004a02:	f001 fb0b 	bl	800601c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004a06:	f000 f84f 	bl	8004aa8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004a0a:	f7fd fbeb 	bl	80021e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8004a0e:	f7fd fbab 	bl	8002168 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8004a12:	f001 f955 	bl	8005cc0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004a16:	f7fd fc85 	bl	8002324 <MX_I2C1_Init>
	MX_TIM1_Init();
 8004a1a:	f000 fa77 	bl	8004f0c <MX_TIM1_Init>
	MX_TIM2_Init();
 8004a1e:	f000 fb15 	bl	800504c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8004a22:	f001 f923 	bl	8005c6c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8004a26:	f7fd fb09 	bl	800203c <MX_ADC1_Init>
	MX_TIM9_Init();
 8004a2a:	f000 fbd9 	bl	80051e0 <MX_TIM9_Init>
	MX_TIM11_Init();
 8004a2e:	f000 fc11 	bl	8005254 <MX_TIM11_Init>
	MX_TIM3_Init();
 8004a32:	f000 fb5f 	bl	80050f4 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8004a36:	f001 f96f 	bl	8005d18 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8004a3a:	4816      	ldr	r0, [pc, #88]	; (8004a94 <main+0xa4>)
 8004a3c:	f003 fe24 	bl	8008688 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004a40:	2100      	movs	r1, #0
 8004a42:	4814      	ldr	r0, [pc, #80]	; (8004a94 <main+0xa4>)
 8004a44:	f003 ffa8 	bl	8008998 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8004a48:	2104      	movs	r1, #4
 8004a4a:	4813      	ldr	r0, [pc, #76]	; (8004a98 <main+0xa8>)
 8004a4c:	f004 fc4c 	bl	80092e8 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8004a50:	4812      	ldr	r0, [pc, #72]	; (8004a9c <main+0xac>)
 8004a52:	f003 fe73 	bl	800873c <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 8004a56:	f7fe f9cf 	bl	8002df8 <modbus_init>

	// Initialize UART1
	UARTInterruptConfig();
 8004a5a:	f7fc fd7f 	bl	800155c <UARTInterruptConfig>

	RGB_Bootup();
 8004a5e:	f7ff fe77 	bl	8004750 <RGB_Bootup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 8004a62:	f7fc ffe1 	bl	8001a28 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(&MBvariables);
 8004a66:	480a      	ldr	r0, [pc, #40]	; (8004a90 <main+0xa0>)
 8004a68:	f7fe f9e2 	bl	8002e30 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 8004a6c:	4808      	ldr	r0, [pc, #32]	; (8004a90 <main+0xa0>)
 8004a6e:	f7fe fa21 	bl	8002eb4 <modbus_data_sync>
		QEIReadHome = getLocalPosition();
 8004a72:	f7fd fd2d 	bl	80024d0 <getLocalPosition>
 8004a76:	4603      	mov	r3, r0
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <main+0xb0>)
 8004a7a:	6013      	str	r3, [r2, #0]
		QEIReadRaw = getRawPosition();
 8004a7c:	f7fd fd3a 	bl	80024f4 <getRawPosition>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <main+0xb4>)
 8004a84:	6013      	str	r3, [r2, #0]
		main_logic(&MBvariables);
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <main+0xa0>)
 8004a88:	f7fe fc6a 	bl	8003360 <main_logic>
		Modbus_Protocal_Worker();
 8004a8c:	e7e9      	b.n	8004a62 <main+0x72>
 8004a8e:	bf00      	nop
 8004a90:	20001910 	.word	0x20001910
 8004a94:	2000197c 	.word	0x2000197c
 8004a98:	20001a30 	.word	0x20001a30
 8004a9c:	20001b98 	.word	0x20001b98
 8004aa0:	20001900 	.word	0x20001900
 8004aa4:	200018fc 	.word	0x200018fc

08004aa8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b094      	sub	sp, #80	; 0x50
 8004aac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004aae:	f107 0320 	add.w	r3, r7, #32
 8004ab2:	2230      	movs	r2, #48	; 0x30
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f007 f950 	bl	800bd5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004abc:	f107 030c 	add.w	r3, r7, #12
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <SystemClock_Config+0xc8>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <SystemClock_Config+0xc8>)
 8004ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ada:	6413      	str	r3, [r2, #64]	; 0x40
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <SystemClock_Config+0xc8>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <SystemClock_Config+0xcc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <SystemClock_Config+0xcc>)
 8004af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <SystemClock_Config+0xcc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b04:	2302      	movs	r3, #2
 8004b06:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b10:	2302      	movs	r3, #2
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b14:	2300      	movs	r3, #0
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004b18:	2308      	movs	r3, #8
 8004b1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004b1c:	2364      	movs	r3, #100	; 0x64
 8004b1e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b20:	2302      	movs	r3, #2
 8004b22:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b24:	2304      	movs	r3, #4
 8004b26:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b28:	f107 0320 	add.w	r3, r7, #32
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f003 f8b7 	bl	8007ca0 <HAL_RCC_OscConfig>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <SystemClock_Config+0x94>
		Error_Handler();
 8004b38:	f000 f858 	bl	8004bec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b40:	2302      	movs	r3, #2
 8004b42:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b4c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004b52:	f107 030c 	add.w	r3, r7, #12
 8004b56:	2103      	movs	r1, #3
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f003 fb19 	bl	8008190 <HAL_RCC_ClockConfig>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <SystemClock_Config+0xc0>
		Error_Handler();
 8004b64:	f000 f842 	bl	8004bec <Error_Handler>
	}
}
 8004b68:	bf00      	nop
 8004b6a:	3750      	adds	r7, #80	; 0x50
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_PeriodElapsedCallback+0x14>
		interrupt_logic();
 8004b88:	f7fe fe50 	bl	800382c <interrupt_logic>
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20001b98 	.word	0x20001b98

08004b98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <HAL_UART_RxCpltCallback+0x20>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d102      	bne.n	8004bae <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received((int*) &receivedByte);
 8004ba8:	4804      	ldr	r0, [pc, #16]	; (8004bbc <HAL_UART_RxCpltCallback+0x24>)
 8004baa:	f7fc fd47 	bl	800163c <Joystick_Received>
	}
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20001da4 	.word	0x20001da4
 8004bbc:	2000193c 	.word	0x2000193c

08004bc0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d106      	bne.n	8004bde <HAL_GPIO_EXTI_Callback+0x1e>
		home_handler();
 8004bd0:	f7fe fed6 	bl	8003980 <home_handler>
		interrupt_count++;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_GPIO_EXTI_Callback+0x28>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	4a03      	ldr	r2, [pc, #12]	; (8004be8 <HAL_GPIO_EXTI_Callback+0x28>)
 8004bdc:	6013      	str	r3, [r2, #0]
	}
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000194c 	.word	0x2000194c

08004bec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf0:	b672      	cpsid	i
}
 8004bf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004bf4:	e7fe      	b.n	8004bf4 <Error_Handler+0x8>
	...

08004bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <HAL_MspInit+0x4c>)
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <HAL_MspInit+0x4c>)
 8004c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_MspInit+0x4c>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_MspInit+0x4c>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <HAL_MspInit+0x4c>)
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_MspInit+0x4c>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c36:	2007      	movs	r0, #7
 8004c38:	f001 fdc8 	bl	80067cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800

08004c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c4c:	e7fe      	b.n	8004c4c <NMI_Handler+0x4>

08004c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c52:	e7fe      	b.n	8004c52 <HardFault_Handler+0x4>

08004c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c58:	e7fe      	b.n	8004c58 <MemManage_Handler+0x4>

08004c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c5e:	e7fe      	b.n	8004c5e <BusFault_Handler+0x4>

08004c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c64:	e7fe      	b.n	8004c64 <UsageFault_Handler+0x4>

08004c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c94:	f001 fa14 	bl	80060c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c98:	bf00      	nop
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004ca0:	2008      	movs	r0, #8
 8004ca2:	f002 fb99 	bl	80073d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004cb0:	4802      	ldr	r0, [pc, #8]	; (8004cbc <DMA1_Stream4_IRQHandler+0x10>)
 8004cb2:	f001 ff65 	bl	8006b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20001d00 	.word	0x20001d00

08004cc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <DMA1_Stream6_IRQHandler+0x10>)
 8004cc6:	f001 ff5b 	bl	8006b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20001f60 	.word	0x20001f60

08004cd4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004cd8:	4803      	ldr	r0, [pc, #12]	; (8004ce8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004cda:	f004 fb93 	bl	8009404 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004cde:	4803      	ldr	r0, [pc, #12]	; (8004cec <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004ce0:	f004 fb90 	bl	8009404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	2000197c 	.word	0x2000197c
 8004cec:	20001b98 	.word	0x20001b98

08004cf0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004cf6:	f004 fb85 	bl	8009404 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004cfa:	4803      	ldr	r0, [pc, #12]	; (8004d08 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004cfc:	f004 fb82 	bl	8009404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	2000197c 	.word	0x2000197c
 8004d08:	20001c4c 	.word	0x20001c4c

08004d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d10:	4802      	ldr	r0, [pc, #8]	; (8004d1c <USART1_IRQHandler+0x10>)
 8004d12:	f005 ffaf 	bl	800ac74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20001da4 	.word	0x20001da4

08004d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d24:	4802      	ldr	r0, [pc, #8]	; (8004d30 <USART2_IRQHandler+0x10>)
 8004d26:	f005 ffa5 	bl	800ac74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20001e18 	.word	0x20001e18

08004d34 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004d38:	4802      	ldr	r0, [pc, #8]	; (8004d44 <DMA2_Stream7_IRQHandler+0x10>)
 8004d3a:	f001 ff21 	bl	8006b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20001f00 	.word	0x20001f00

08004d48 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004d4c:	4802      	ldr	r0, [pc, #8]	; (8004d58 <USART6_IRQHandler+0x10>)
 8004d4e:	f005 ff91 	bl	800ac74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20001e8c 	.word	0x20001e8c

08004d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return 1;
 8004d60:	2301      	movs	r3, #1
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <_kill>:

int _kill(int pid, int sig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d76:	f006 ffb9 	bl	800bcec <__errno>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2216      	movs	r2, #22
 8004d7e:	601a      	str	r2, [r3, #0]
  return -1;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_exit>:

void _exit (int status)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d94:	f04f 31ff 	mov.w	r1, #4294967295
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ffe7 	bl	8004d6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d9e:	e7fe      	b.n	8004d9e <_exit+0x12>

08004da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e00a      	b.n	8004dc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004db2:	f3af 8000 	nop.w
 8004db6:	4601      	mov	r1, r0
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	60ba      	str	r2, [r7, #8]
 8004dbe:	b2ca      	uxtb	r2, r1
 8004dc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	dbf0      	blt.n	8004db2 <_read+0x12>
  }

  return len;
 8004dd0:	687b      	ldr	r3, [r7, #4]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e009      	b.n	8004e00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	60ba      	str	r2, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	dbf1      	blt.n	8004dec <_write+0x12>
  }
  return len;
 8004e08:	687b      	ldr	r3, [r7, #4]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <_close>:

int _close(int file)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e3a:	605a      	str	r2, [r3, #4]
  return 0;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_isatty>:

int _isatty(int file)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e52:	2301      	movs	r3, #1
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <_sbrk+0x5c>)
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <_sbrk+0x60>)
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <_sbrk+0x64>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <_sbrk+0x64>)
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <_sbrk+0x68>)
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <_sbrk+0x64>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d207      	bcs.n	8004ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004eac:	f006 ff1e 	bl	800bcec <__errno>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	220c      	movs	r2, #12
 8004eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	e009      	b.n	8004ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <_sbrk+0x64>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <_sbrk+0x64>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <_sbrk+0x64>)
 8004ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20020000 	.word	0x20020000
 8004edc:	00000400 	.word	0x00000400
 8004ee0:	20001978 	.word	0x20001978
 8004ee4:	20001fd8 	.word	0x20001fd8

08004ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <SystemInit+0x20>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <SystemInit+0x20>)
 8004ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b096      	sub	sp, #88	; 0x58
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	60da      	str	r2, [r3, #12]
 8004f38:	611a      	str	r2, [r3, #16]
 8004f3a:	615a      	str	r2, [r3, #20]
 8004f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	2220      	movs	r2, #32
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f006 ff09 	bl	800bd5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f4c:	4a3e      	ldr	r2, [pc, #248]	; (8005048 <MX_TIM1_Init+0x13c>)
 8004f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8004f50:	4b3c      	ldr	r3, [pc, #240]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f52:	2204      	movs	r2, #4
 8004f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f56:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8004f5c:	4b39      	ldr	r3, [pc, #228]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f5e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8004f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f64:	4b37      	ldr	r3, [pc, #220]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f6a:	4b36      	ldr	r3, [pc, #216]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f70:	4b34      	ldr	r3, [pc, #208]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f76:	4833      	ldr	r0, [pc, #204]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f78:	f003 fb2a 	bl	80085d0 <HAL_TIM_Base_Init>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004f82:	f7ff fe33 	bl	8004bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f90:	4619      	mov	r1, r3
 8004f92:	482c      	ldr	r0, [pc, #176]	; (8005044 <MX_TIM1_Init+0x138>)
 8004f94:	f004 fc7c 	bl	8009890 <HAL_TIM_ConfigClockSource>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004f9e:	f7ff fe25 	bl	8004bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004fa2:	4828      	ldr	r0, [pc, #160]	; (8005044 <MX_TIM1_Init+0x138>)
 8004fa4:	f003 fc92 	bl	80088cc <HAL_TIM_PWM_Init>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004fae:	f7ff fe1d 	bl	8004bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4820      	ldr	r0, [pc, #128]	; (8005044 <MX_TIM1_Init+0x138>)
 8004fc2:	f005 fac3 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004fcc:	f7ff fe0e 	bl	8004bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fd0:	2360      	movs	r3, #96	; 0x60
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4813      	ldr	r0, [pc, #76]	; (8005044 <MX_TIM1_Init+0x138>)
 8004ff6:	f004 fb89 	bl	800970c <HAL_TIM_PWM_ConfigChannel>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005000:	f7ff fdf4 	bl	8004bec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005008:	2300      	movs	r3, #0
 800500a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800501c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005022:	1d3b      	adds	r3, r7, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4807      	ldr	r0, [pc, #28]	; (8005044 <MX_TIM1_Init+0x138>)
 8005028:	f005 fafe 	bl	800a628 <HAL_TIMEx_ConfigBreakDeadTime>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005032:	f7ff fddb 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005036:	4803      	ldr	r0, [pc, #12]	; (8005044 <MX_TIM1_Init+0x138>)
 8005038:	f000 fa62 	bl	8005500 <HAL_TIM_MspPostInit>

}
 800503c:	bf00      	nop
 800503e:	3758      	adds	r7, #88	; 0x58
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	2000197c 	.word	0x2000197c
 8005048:	40010000 	.word	0x40010000

0800504c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	2224      	movs	r2, #36	; 0x24
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f006 fe7e 	bl	800bd5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005068:	4b21      	ldr	r3, [pc, #132]	; (80050f0 <MX_TIM2_Init+0xa4>)
 800506a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800506e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005070:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <MX_TIM2_Init+0xa4>)
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <MX_TIM2_Init+0xa4>)
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <MX_TIM2_Init+0xa4>)
 800507e:	f04f 32ff 	mov.w	r2, #4294967295
 8005082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <MX_TIM2_Init+0xa4>)
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800508a:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <MX_TIM2_Init+0xa4>)
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005090:	2303      	movs	r3, #3
 8005092:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	4619      	mov	r1, r3
 80050ba:	480d      	ldr	r0, [pc, #52]	; (80050f0 <MX_TIM2_Init+0xa4>)
 80050bc:	f004 f860 	bl	8009180 <HAL_TIM_Encoder_Init>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80050c6:	f7ff fd91 	bl	8004bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4806      	ldr	r0, [pc, #24]	; (80050f0 <MX_TIM2_Init+0xa4>)
 80050d8:	f005 fa38 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80050e2:	f7ff fd83 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80050e6:	bf00      	nop
 80050e8:	3730      	adds	r7, #48	; 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20001a30 	.word	0x20001a30

080050f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08e      	sub	sp, #56	; 0x38
 80050f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005108:	f107 0320 	add.w	r3, r7, #32
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
 8005120:	615a      	str	r2, [r3, #20]
 8005122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005124:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005126:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <MX_TIM3_Init+0xe8>)
 8005128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800512a:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <MX_TIM3_Init+0xe4>)
 800512c:	2200      	movs	r2, #0
 800512e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005130:	4b29      	ldr	r3, [pc, #164]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 8005136:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005138:	227c      	movs	r2, #124	; 0x7c
 800513a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800513c:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <MX_TIM3_Init+0xe4>)
 800513e:	2200      	movs	r2, #0
 8005140:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005142:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005144:	2200      	movs	r2, #0
 8005146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005148:	4823      	ldr	r0, [pc, #140]	; (80051d8 <MX_TIM3_Init+0xe4>)
 800514a:	f003 fa41 	bl	80085d0 <HAL_TIM_Base_Init>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005154:	f7ff fd4a 	bl	8004bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800515e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005162:	4619      	mov	r1, r3
 8005164:	481c      	ldr	r0, [pc, #112]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005166:	f004 fb93 	bl	8009890 <HAL_TIM_ConfigClockSource>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005170:	f7ff fd3c 	bl	8004bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005174:	4818      	ldr	r0, [pc, #96]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005176:	f003 fba9 	bl	80088cc <HAL_TIM_PWM_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005180:	f7ff fd34 	bl	8004bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005184:	2300      	movs	r3, #0
 8005186:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800518c:	f107 0320 	add.w	r3, r7, #32
 8005190:	4619      	mov	r1, r3
 8005192:	4811      	ldr	r0, [pc, #68]	; (80051d8 <MX_TIM3_Init+0xe4>)
 8005194:	f005 f9da 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800519e:	f7ff fd25 	bl	8004bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051a2:	2360      	movs	r3, #96	; 0x60
 80051a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	2200      	movs	r2, #0
 80051b6:	4619      	mov	r1, r3
 80051b8:	4807      	ldr	r0, [pc, #28]	; (80051d8 <MX_TIM3_Init+0xe4>)
 80051ba:	f004 faa7 	bl	800970c <HAL_TIM_PWM_ConfigChannel>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80051c4:	f7ff fd12 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80051c8:	4803      	ldr	r0, [pc, #12]	; (80051d8 <MX_TIM3_Init+0xe4>)
 80051ca:	f000 f999 	bl	8005500 <HAL_TIM_MspPostInit>

}
 80051ce:	bf00      	nop
 80051d0:	3738      	adds	r7, #56	; 0x38
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20001ae4 	.word	0x20001ae4
 80051dc:	40000400 	.word	0x40000400

080051e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051e6:	463b      	mov	r3, r7
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80051f2:	4b16      	ldr	r3, [pc, #88]	; (800524c <MX_TIM9_Init+0x6c>)
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <MX_TIM9_Init+0x70>)
 80051f6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <MX_TIM9_Init+0x6c>)
 80051fa:	2209      	movs	r2, #9
 80051fc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <MX_TIM9_Init+0x6c>)
 8005200:	2200      	movs	r2, #0
 8005202:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <MX_TIM9_Init+0x6c>)
 8005206:	f240 32e7 	movw	r2, #999	; 0x3e7
 800520a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <MX_TIM9_Init+0x6c>)
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005212:	4b0e      	ldr	r3, [pc, #56]	; (800524c <MX_TIM9_Init+0x6c>)
 8005214:	2200      	movs	r2, #0
 8005216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005218:	480c      	ldr	r0, [pc, #48]	; (800524c <MX_TIM9_Init+0x6c>)
 800521a:	f003 f9d9 	bl	80085d0 <HAL_TIM_Base_Init>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005224:	f7ff fce2 	bl	8004bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800522c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800522e:	463b      	mov	r3, r7
 8005230:	4619      	mov	r1, r3
 8005232:	4806      	ldr	r0, [pc, #24]	; (800524c <MX_TIM9_Init+0x6c>)
 8005234:	f004 fb2c 	bl	8009890 <HAL_TIM_ConfigClockSource>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800523e:	f7ff fcd5 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20001b98 	.word	0x20001b98
 8005250:	40014000 	.word	0x40014000

08005254 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	615a      	str	r2, [r3, #20]
 800526a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <MX_TIM11_Init+0xa0>)
 800526e:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <MX_TIM11_Init+0xa4>)
 8005270:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005272:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <MX_TIM11_Init+0xa0>)
 8005274:	2263      	movs	r2, #99	; 0x63
 8005276:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005278:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <MX_TIM11_Init+0xa0>)
 800527a:	2200      	movs	r2, #0
 800527c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800527e:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <MX_TIM11_Init+0xa0>)
 8005280:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8005284:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005286:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <MX_TIM11_Init+0xa0>)
 8005288:	2200      	movs	r2, #0
 800528a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <MX_TIM11_Init+0xa0>)
 800528e:	2200      	movs	r2, #0
 8005290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005292:	4818      	ldr	r0, [pc, #96]	; (80052f4 <MX_TIM11_Init+0xa0>)
 8005294:	f003 f99c 	bl	80085d0 <HAL_TIM_Base_Init>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800529e:	f7ff fca5 	bl	8004bec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80052a2:	4814      	ldr	r0, [pc, #80]	; (80052f4 <MX_TIM11_Init+0xa0>)
 80052a4:	f003 faac 	bl	8008800 <HAL_TIM_OC_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80052ae:	f7ff fc9d 	bl	8004bec <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80052b2:	2108      	movs	r1, #8
 80052b4:	480f      	ldr	r0, [pc, #60]	; (80052f4 <MX_TIM11_Init+0xa0>)
 80052b6:	f003 fe95 	bl	8008fe4 <HAL_TIM_OnePulse_Init>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80052c0:	f7ff fc94 	bl	8004bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80052c4:	2310      	movs	r3, #16
 80052c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80052c8:	f240 5399 	movw	r3, #1433	; 0x599
 80052cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052d6:	1d3b      	adds	r3, r7, #4
 80052d8:	2200      	movs	r2, #0
 80052da:	4619      	mov	r1, r3
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <MX_TIM11_Init+0xa0>)
 80052de:	f004 f9b9 	bl	8009654 <HAL_TIM_OC_ConfigChannel>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 80052e8:	f7ff fc80 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80052ec:	bf00      	nop
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20001c4c 	.word	0x20001c4c
 80052f8:	40014800 	.word	0x40014800

080052fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a53      	ldr	r2, [pc, #332]	; (8005458 <HAL_TIM_Base_MspInit+0x15c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d11e      	bne.n	800534c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	4b52      	ldr	r3, [pc, #328]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	4a51      	ldr	r2, [pc, #324]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	6453      	str	r3, [r2, #68]	; 0x44
 800531e:	4b4f      	ldr	r3, [pc, #316]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	2018      	movs	r0, #24
 8005330:	f001 fa57 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005334:	2018      	movs	r0, #24
 8005336:	f001 fa70 	bl	800681a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800533a:	2200      	movs	r2, #0
 800533c:	2100      	movs	r1, #0
 800533e:	201a      	movs	r0, #26
 8005340:	f001 fa4f 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005344:	201a      	movs	r0, #26
 8005346:	f001 fa68 	bl	800681a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800534a:	e080      	b.n	800544e <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM3)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a43      	ldr	r2, [pc, #268]	; (8005460 <HAL_TIM_Base_MspInit+0x164>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d144      	bne.n	80053e0 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	4b40      	ldr	r3, [pc, #256]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	4a3f      	ldr	r2, [pc, #252]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005360:	f043 0302 	orr.w	r3, r3, #2
 8005364:	6413      	str	r3, [r2, #64]	; 0x40
 8005366:	4b3d      	ldr	r3, [pc, #244]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8005372:	4b3c      	ldr	r3, [pc, #240]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 8005374:	4a3c      	ldr	r2, [pc, #240]	; (8005468 <HAL_TIM_Base_MspInit+0x16c>)
 8005376:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8005378:	4b3a      	ldr	r3, [pc, #232]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 800537a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800537e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005380:	4b38      	ldr	r3, [pc, #224]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 8005382:	2240      	movs	r2, #64	; 0x40
 8005384:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 8005388:	2200      	movs	r2, #0
 800538a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800538c:	4b35      	ldr	r3, [pc, #212]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 800538e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005392:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005394:	4b33      	ldr	r3, [pc, #204]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 8005396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800539c:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 800539e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80053a4:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80053b6:	482b      	ldr	r0, [pc, #172]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053b8:	f001 fa4a 	bl	8006850 <HAL_DMA_Init>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_TIM_Base_MspInit+0xca>
      Error_Handler();
 80053c2:	f7ff fc13 	bl	8004bec <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
 80053cc:	4a25      	ldr	r2, [pc, #148]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a23      	ldr	r2, [pc, #140]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
 80053d8:	4a22      	ldr	r2, [pc, #136]	; (8005464 <HAL_TIM_Base_MspInit+0x168>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80053de:	e036      	b.n	800544e <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM9)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <HAL_TIM_Base_MspInit+0x170>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d116      	bne.n	8005418 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	6453      	str	r3, [r2, #68]	; 0x44
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005406:	2200      	movs	r2, #0
 8005408:	2100      	movs	r1, #0
 800540a:	2018      	movs	r0, #24
 800540c:	f001 f9e9 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005410:	2018      	movs	r0, #24
 8005412:	f001 fa02 	bl	800681a <HAL_NVIC_EnableIRQ>
}
 8005416:	e01a      	b.n	800544e <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM11)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <HAL_TIM_Base_MspInit+0x174>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d115      	bne.n	800544e <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005430:	6453      	str	r3, [r2, #68]	; 0x44
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_TIM_Base_MspInit+0x160>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800543e:	2200      	movs	r2, #0
 8005440:	2100      	movs	r1, #0
 8005442:	201a      	movs	r0, #26
 8005444:	f001 f9cd 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005448:	201a      	movs	r0, #26
 800544a:	f001 f9e6 	bl	800681a <HAL_NVIC_EnableIRQ>
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40023800 	.word	0x40023800
 8005460:	40000400 	.word	0x40000400
 8005464:	20001d00 	.word	0x20001d00
 8005468:	40026070 	.word	0x40026070
 800546c:	40014000 	.word	0x40014000
 8005470:	40014800 	.word	0x40014800

08005474 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005494:	d12b      	bne.n	80054ee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <HAL_TIM_Encoder_MspInit+0x84>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	6413      	str	r3, [r2, #64]	; 0x40
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	4a0f      	ldr	r2, [pc, #60]	; (80054f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6313      	str	r3, [r2, #48]	; 0x30
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054ce:	2303      	movs	r3, #3
 80054d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d2:	2302      	movs	r3, #2
 80054d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054da:	2300      	movs	r3, #0
 80054dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054de:	2301      	movs	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	4619      	mov	r1, r3
 80054e8:	4804      	ldr	r0, [pc, #16]	; (80054fc <HAL_TIM_Encoder_MspInit+0x88>)
 80054ea:	f001 fdbf 	bl	800706c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80054ee:	bf00      	nop
 80054f0:	3728      	adds	r7, #40	; 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40020000 	.word	0x40020000

08005500 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <HAL_TIM_MspPostInit+0xb0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d11f      	bne.n	8005562 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <HAL_TIM_MspPostInit+0xb4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	4a22      	ldr	r2, [pc, #136]	; (80055b4 <HAL_TIM_MspPostInit+0xb4>)
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	6313      	str	r3, [r2, #48]	; 0x30
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_TIM_MspPostInit+0xb4>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800553e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	2302      	movs	r3, #2
 8005546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554c:	2300      	movs	r3, #0
 800554e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005550:	2301      	movs	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	4619      	mov	r1, r3
 800555a:	4817      	ldr	r0, [pc, #92]	; (80055b8 <HAL_TIM_MspPostInit+0xb8>)
 800555c:	f001 fd86 	bl	800706c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005560:	e022      	b.n	80055a8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a15      	ldr	r2, [pc, #84]	; (80055bc <HAL_TIM_MspPostInit+0xbc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d11d      	bne.n	80055a8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <HAL_TIM_MspPostInit+0xb4>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	4a0f      	ldr	r2, [pc, #60]	; (80055b4 <HAL_TIM_MspPostInit+0xb4>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	6313      	str	r3, [r2, #48]	; 0x30
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <HAL_TIM_MspPostInit+0xb4>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005594:	2300      	movs	r3, #0
 8005596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005598:	2302      	movs	r3, #2
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	4619      	mov	r1, r3
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <HAL_TIM_MspPostInit+0xb8>)
 80055a4:	f001 fd62 	bl	800706c <HAL_GPIO_Init>
}
 80055a8:	bf00      	nop
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40000400 	.word	0x40000400

080055c0 <Trajectory>:
float setpoint_now = 0;
float target = 0;

// USER CODE ======================================================================================

void Trajectory(float setpoint_now_input, float velocity_max, float acceleration_max, int *position_out, float *velocity_out, float *acceleration_out, int homemode) {
 80055c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	ed87 0a07 	vstr	s0, [r7, #28]
 80055cc:	edc7 0a06 	vstr	s1, [r7, #24]
 80055d0:	ed87 1a05 	vstr	s2, [r7, #20]
 80055d4:	6138      	str	r0, [r7, #16]
 80055d6:	60f9      	str	r1, [r7, #12]
 80055d8:	60ba      	str	r2, [r7, #8]
 80055da:	607b      	str	r3, [r7, #4]
	static float time_err = 0;

	static float setpoint_past = 0;
	static float distance = 0;

	if(homemode == 1){
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d115      	bne.n	800560e <Trajectory+0x4e>
		setpoint_past = setpoint_now_input;
 80055e2:	4a6c      	ldr	r2, [pc, #432]	; (8005794 <Trajectory+0x1d4>)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	6013      	str	r3, [r2, #0]
		time_trajectory = 0;
 80055e8:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <Trajectory+0x1d8>)
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
		abs_distance = 0;
 80055f0:	4b6a      	ldr	r3, [pc, #424]	; (800579c <Trajectory+0x1dc>)
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
		distance = 0;
 80055f8:	4b69      	ldr	r3, [pc, #420]	; (80057a0 <Trajectory+0x1e0>)
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
		position = setpoint_now_input;
 8005600:	4a68      	ldr	r2, [pc, #416]	; (80057a4 <Trajectory+0x1e4>)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	6013      	str	r3, [r2, #0]
		initial_position = setpoint_now_input;
 8005606:	4a68      	ldr	r2, [pc, #416]	; (80057a8 <Trajectory+0x1e8>)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	6013      	str	r3, [r2, #0]
		return;
 800560c:	e306      	b.n	8005c1c <Trajectory+0x65c>
	}

	else if(homemode == 0)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 82f2 	bne.w	8005bfa <Trajectory+0x63a>
	{
		// distance and +-(sign)
		if (setpoint_past != setpoint_now_input && time_trajectory == 0) {
 8005616:	4b5f      	ldr	r3, [pc, #380]	; (8005794 <Trajectory+0x1d4>)
 8005618:	edd3 7a00 	vldr	s15, [r3]
 800561c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005620:	eeb4 7a67 	vcmp.f32	s14, s15
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	d03f      	beq.n	80056aa <Trajectory+0xea>
 800562a:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <Trajectory+0x1d8>)
 800562c:	edd3 7a00 	vldr	s15, [r3]
 8005630:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	d137      	bne.n	80056aa <Trajectory+0xea>
			setpoint_now = setpoint_now_input;
 800563a:	4a5c      	ldr	r2, [pc, #368]	; (80057ac <Trajectory+0x1ec>)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	6013      	str	r3, [r2, #0]
			distance = setpoint_now - initial_position;
 8005640:	4b5a      	ldr	r3, [pc, #360]	; (80057ac <Trajectory+0x1ec>)
 8005642:	ed93 7a00 	vldr	s14, [r3]
 8005646:	4b58      	ldr	r3, [pc, #352]	; (80057a8 <Trajectory+0x1e8>)
 8005648:	edd3 7a00 	vldr	s15, [r3]
 800564c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <Trajectory+0x1e0>)
 8005652:	edc3 7a00 	vstr	s15, [r3]
			setpoint_past = setpoint_now;
 8005656:	4b55      	ldr	r3, [pc, #340]	; (80057ac <Trajectory+0x1ec>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a4e      	ldr	r2, [pc, #312]	; (8005794 <Trajectory+0x1d4>)
 800565c:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 800565e:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <Trajectory+0x1e0>)
 8005660:	edd3 7a00 	vldr	s15, [r3]
 8005664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566c:	db07      	blt.n	800567e <Trajectory+0xbe>
				sign = 1;
 800566e:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <Trajectory+0x1f0>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
				abs_distance = distance;
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <Trajectory+0x1e0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a48      	ldr	r2, [pc, #288]	; (800579c <Trajectory+0x1dc>)
 800567a:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 800567c:	e019      	b.n	80056b2 <Trajectory+0xf2>
			} else if (distance < 0) {
 800567e:	4b48      	ldr	r3, [pc, #288]	; (80057a0 <Trajectory+0x1e0>)
 8005680:	edd3 7a00 	vldr	s15, [r3]
 8005684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	d400      	bmi.n	8005690 <Trajectory+0xd0>
			if (distance >= 0) {
 800568e:	e010      	b.n	80056b2 <Trajectory+0xf2>
				sign = -1;
 8005690:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <Trajectory+0x1f0>)
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	601a      	str	r2, [r3, #0]
				abs_distance = distance * (-1);
 8005698:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <Trajectory+0x1e0>)
 800569a:	edd3 7a00 	vldr	s15, [r3]
 800569e:	eef1 7a67 	vneg.f32	s15, s15
 80056a2:	4b3e      	ldr	r3, [pc, #248]	; (800579c <Trajectory+0x1dc>)
 80056a4:	edc3 7a00 	vstr	s15, [r3]
			if (distance >= 0) {
 80056a8:	e003      	b.n	80056b2 <Trajectory+0xf2>
			}
		} else {
			setpoint_past = setpoint_now;
 80056aa:	4b40      	ldr	r3, [pc, #256]	; (80057ac <Trajectory+0x1ec>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a39      	ldr	r2, [pc, #228]	; (8005794 <Trajectory+0x1d4>)
 80056b0:	6013      	str	r3, [r2, #0]
		}

	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max) / acceleration_max)) {
 80056b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80056b6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80056ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	4b36      	ldr	r3, [pc, #216]	; (800579c <Trajectory+0x1dc>)
 80056c4:	edd3 7a00 	vldr	s15, [r3]
 80056c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d0:	d57a      	bpl.n	80057c8 <Trajectory+0x208>
		time_acc = ((velocity_max - 0) / acceleration_max);
 80056d2:	edd7 6a06 	vldr	s13, [r7, #24]
 80056d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80056da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056de:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <Trajectory+0x1f4>)
 80056e0:	edc3 7a00 	vstr	s15, [r3]
		time_const = ((1.0 / velocity_max) * ((abs_distance) - ((velocity_max * velocity_max) / acceleration_max)));
 80056e4:	69b8      	ldr	r0, [r7, #24]
 80056e6:	f7fa ff37 	bl	8000558 <__aeabi_f2d>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	f04f 0000 	mov.w	r0, #0
 80056f2:	4931      	ldr	r1, [pc, #196]	; (80057b8 <Trajectory+0x1f8>)
 80056f4:	f7fb f8b2 	bl	800085c <__aeabi_ddiv>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	461d      	mov	r5, r3
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <Trajectory+0x1dc>)
 8005702:	ed93 7a00 	vldr	s14, [r3]
 8005706:	edd7 7a06 	vldr	s15, [r7, #24]
 800570a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800570e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005712:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800571a:	ee17 0a90 	vmov	r0, s15
 800571e:	f7fa ff1b 	bl	8000558 <__aeabi_f2d>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fa ff6d 	bl	8000608 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	f7fb fa5f 	bl	8000bf8 <__aeabi_d2f>
 800573a:	4603      	mov	r3, r0
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <Trajectory+0x1fc>)
 800573e:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance - (velocity_max * velocity_max) / acceleration_max) / velocity_max;
 8005740:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <Trajectory+0x1f4>)
 8005742:	edd3 7a00 	vldr	s15, [r3]
 8005746:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800574a:	4b14      	ldr	r3, [pc, #80]	; (800579c <Trajectory+0x1dc>)
 800574c:	edd3 6a00 	vldr	s13, [r3]
 8005750:	edd7 7a06 	vldr	s15, [r7, #24]
 8005754:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8005758:	ed97 6a05 	vldr	s12, [r7, #20]
 800575c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005760:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005764:	edd7 6a06 	vldr	s13, [r7, #24]
 8005768:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800576c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005770:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <Trajectory+0x200>)
 8005772:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <Trajectory+0x1f0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005782:	edd7 7a06 	vldr	s15, [r7, #24]
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	4b0e      	ldr	r3, [pc, #56]	; (80057c4 <Trajectory+0x204>)
 800578c:	edc3 7a00 	vstr	s15, [r3]
 8005790:	e056      	b.n	8005840 <Trajectory+0x280>
 8005792:	bf00      	nop
 8005794:	20001d7c 	.word	0x20001d7c
 8005798:	20001d80 	.word	0x20001d80
 800579c:	20001d60 	.word	0x20001d60
 80057a0:	20001d84 	.word	0x20001d84
 80057a4:	20001d68 	.word	0x20001d68
 80057a8:	20001d64 	.word	0x20001d64
 80057ac:	20001d78 	.word	0x20001d78
 80057b0:	20001d74 	.word	0x20001d74
 80057b4:	20001d88 	.word	0x20001d88
 80057b8:	3ff00000 	.word	0x3ff00000
 80057bc:	20001d8c 	.word	0x20001d8c
 80057c0:	20001d90 	.word	0x20001d90
 80057c4:	20001d94 	.word	0x20001d94
	}

	else {
		time_acc = sqrt(abs_distance / acceleration_max);
 80057c8:	4b8d      	ldr	r3, [pc, #564]	; (8005a00 <Trajectory+0x440>)
 80057ca:	ed93 7a00 	vldr	s14, [r3]
 80057ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80057d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057d6:	ee16 0a90 	vmov	r0, s13
 80057da:	f7fa febd 	bl	8000558 <__aeabi_f2d>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	ec43 2b10 	vmov	d0, r2, r3
 80057e6:	f00b f9f5 	bl	8010bd4 <sqrt>
 80057ea:	ec53 2b10 	vmov	r2, r3, d0
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	f7fb fa01 	bl	8000bf8 <__aeabi_d2f>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4a82      	ldr	r2, [pc, #520]	; (8005a04 <Trajectory+0x444>)
 80057fa:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 80057fc:	4b81      	ldr	r3, [pc, #516]	; (8005a04 <Trajectory+0x444>)
 80057fe:	edd3 7a00 	vldr	s15, [r3]
 8005802:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005806:	4b80      	ldr	r3, [pc, #512]	; (8005a08 <Trajectory+0x448>)
 8005808:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 800580c:	4b7f      	ldr	r3, [pc, #508]	; (8005a0c <Trajectory+0x44c>)
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8005814:	4b7e      	ldr	r3, [pc, #504]	; (8005a10 <Trajectory+0x450>)
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc * sign;
 800581c:	4b79      	ldr	r3, [pc, #484]	; (8005a04 <Trajectory+0x444>)
 800581e:	ed93 7a00 	vldr	s14, [r3]
 8005822:	edd7 7a05 	vldr	s15, [r7, #20]
 8005826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800582a:	4b7a      	ldr	r3, [pc, #488]	; (8005a14 <Trajectory+0x454>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	4b77      	ldr	r3, [pc, #476]	; (8005a18 <Trajectory+0x458>)
 800583c:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 8005840:	4b76      	ldr	r3, [pc, #472]	; (8005a1c <Trajectory+0x45c>)
 8005842:	edd3 7a00 	vldr	s15, [r3]
 8005846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584e:	f2c0 8085 	blt.w	800595c <Trajectory+0x39c>
 8005852:	4b72      	ldr	r3, [pc, #456]	; (8005a1c <Trajectory+0x45c>)
 8005854:	ed93 7a00 	vldr	s14, [r3]
 8005858:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <Trajectory+0x444>)
 800585a:	edd3 7a00 	vldr	s15, [r3]
 800585e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d579      	bpl.n	800595c <Trajectory+0x39c>
		time_trajectory += 0.0001;
 8005868:	4b6c      	ldr	r3, [pc, #432]	; (8005a1c <Trajectory+0x45c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f7fa fe73 	bl	8000558 <__aeabi_f2d>
 8005872:	a361      	add	r3, pc, #388	; (adr r3, 80059f8 <Trajectory+0x438>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f7fa fd10 	bl	800029c <__adddf3>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	f7fb f9b8 	bl	8000bf8 <__aeabi_d2f>
 8005888:	4603      	mov	r3, r0
 800588a:	4a64      	ldr	r2, [pc, #400]	; (8005a1c <Trajectory+0x45c>)
 800588c:	6013      	str	r3, [r2, #0]
		position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory) * sign);
 800588e:	4b64      	ldr	r3, [pc, #400]	; (8005a20 <Trajectory+0x460>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa fe60 	bl	8000558 <__aeabi_f2d>
 8005898:	4604      	mov	r4, r0
 800589a:	460d      	mov	r5, r1
 800589c:	6978      	ldr	r0, [r7, #20]
 800589e:	f7fa fe5b 	bl	8000558 <__aeabi_f2d>
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	4b5f      	ldr	r3, [pc, #380]	; (8005a24 <Trajectory+0x464>)
 80058a8:	f7fa feae 	bl	8000608 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4690      	mov	r8, r2
 80058b2:	4699      	mov	r9, r3
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <Trajectory+0x45c>)
 80058b6:	ed93 7a00 	vldr	s14, [r3]
 80058ba:	4b58      	ldr	r3, [pc, #352]	; (8005a1c <Trajectory+0x45c>)
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c4:	ee17 0a90 	vmov	r0, s15
 80058c8:	f7fa fe46 	bl	8000558 <__aeabi_f2d>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fe98 	bl	8000608 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	4699      	mov	r9, r3
 80058e0:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <Trajectory+0x454>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fa fe25 	bl	8000534 <__aeabi_i2d>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4640      	mov	r0, r8
 80058f0:	4649      	mov	r1, r9
 80058f2:	f7fa fe89 	bl	8000608 <__aeabi_dmul>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4620      	mov	r0, r4
 80058fc:	4629      	mov	r1, r5
 80058fe:	f7fa fccd 	bl	800029c <__adddf3>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	f7fb f975 	bl	8000bf8 <__aeabi_d2f>
 800590e:	4603      	mov	r3, r0
 8005910:	4a45      	ldr	r2, [pc, #276]	; (8005a28 <Trajectory+0x468>)
 8005912:	6013      	str	r3, [r2, #0]
		velocity = (acceleration_max * time_trajectory * sign);
 8005914:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <Trajectory+0x45c>)
 8005916:	ed93 7a00 	vldr	s14, [r3]
 800591a:	edd7 7a05 	vldr	s15, [r7, #20]
 800591e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005922:	4b3c      	ldr	r3, [pc, #240]	; (8005a14 <Trajectory+0x454>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800592e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005932:	4b3e      	ldr	r3, [pc, #248]	; (8005a2c <Trajectory+0x46c>)
 8005934:	edc3 7a00 	vstr	s15, [r3]
		position_acc = position;
 8005938:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <Trajectory+0x468>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <Trajectory+0x470>)
 800593e:	6013      	str	r3, [r2, #0]
		acceleration = acceleration_max * sign;
 8005940:	4b34      	ldr	r3, [pc, #208]	; (8005a14 <Trajectory+0x454>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800594c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <Trajectory+0x474>)
 8005956:	edc3 7a00 	vstr	s15, [r3]
 800595a:	e12d      	b.n	8005bb8 <Trajectory+0x5f8>
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc)) {
 800595c:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <Trajectory+0x448>)
 800595e:	ed93 7a00 	vldr	s14, [r3]
 8005962:	4b28      	ldr	r3, [pc, #160]	; (8005a04 <Trajectory+0x444>)
 8005964:	edd3 7a00 	vldr	s15, [r3]
 8005968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <Trajectory+0x45c>)
 800596e:	edd3 7a00 	vldr	s15, [r3]
 8005972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597a:	dd5d      	ble.n	8005a38 <Trajectory+0x478>
		time_trajectory += 0.0001;
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <Trajectory+0x45c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fa fde9 	bl	8000558 <__aeabi_f2d>
 8005986:	a31c      	add	r3, pc, #112	; (adr r3, 80059f8 <Trajectory+0x438>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fc86 	bl	800029c <__adddf3>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	f7fb f92e 	bl	8000bf8 <__aeabi_d2f>
 800599c:	4603      	mov	r3, r0
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <Trajectory+0x45c>)
 80059a0:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 80059a2:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <Trajectory+0x45c>)
 80059a4:	ed93 7a00 	vldr	s14, [r3]
 80059a8:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <Trajectory+0x444>)
 80059aa:	edd3 7a00 	vldr	s15, [r3]
 80059ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <Trajectory+0x458>)
 80059b4:	edd3 7a00 	vldr	s15, [r3]
 80059b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059bc:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <Trajectory+0x470>)
 80059be:	edd3 7a00 	vldr	s15, [r3]
 80059c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <Trajectory+0x468>)
 80059c8:	edc3 7a00 	vstr	s15, [r3]
		position_const = position - position_acc;
 80059cc:	4b16      	ldr	r3, [pc, #88]	; (8005a28 <Trajectory+0x468>)
 80059ce:	ed93 7a00 	vldr	s14, [r3]
 80059d2:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <Trajectory+0x470>)
 80059d4:	edd3 7a00 	vldr	s15, [r3]
 80059d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <Trajectory+0x450>)
 80059de:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <Trajectory+0x458>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a11      	ldr	r2, [pc, #68]	; (8005a2c <Trajectory+0x46c>)
 80059e8:	6013      	str	r3, [r2, #0]
		acceleration = 0;
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <Trajectory+0x474>)
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e0e1      	b.n	8005bb8 <Trajectory+0x5f8>
 80059f4:	f3af 8000 	nop.w
 80059f8:	eb1c432d 	.word	0xeb1c432d
 80059fc:	3f1a36e2 	.word	0x3f1a36e2
 8005a00:	20001d60 	.word	0x20001d60
 8005a04:	20001d88 	.word	0x20001d88
 8005a08:	20001d90 	.word	0x20001d90
 8005a0c:	20001d8c 	.word	0x20001d8c
 8005a10:	20001d98 	.word	0x20001d98
 8005a14:	20001d74 	.word	0x20001d74
 8005a18:	20001d94 	.word	0x20001d94
 8005a1c:	20001d80 	.word	0x20001d80
 8005a20:	20001d64 	.word	0x20001d64
 8005a24:	3fe00000 	.word	0x3fe00000
 8005a28:	20001d68 	.word	0x20001d68
 8005a2c:	20001d6c 	.word	0x20001d6c
 8005a30:	20001d9c 	.word	0x20001d9c
 8005a34:	20001d70 	.word	0x20001d70
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total)) {
 8005a38:	4b7d      	ldr	r3, [pc, #500]	; (8005c30 <Trajectory+0x670>)
 8005a3a:	ed93 7a00 	vldr	s14, [r3]
 8005a3e:	4b7d      	ldr	r3, [pc, #500]	; (8005c34 <Trajectory+0x674>)
 8005a40:	edd3 7a00 	vldr	s15, [r3]
 8005a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a48:	4b7b      	ldr	r3, [pc, #492]	; (8005c38 <Trajectory+0x678>)
 8005a4a:	edd3 7a00 	vldr	s15, [r3]
 8005a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a56:	f200 80af 	bhi.w	8005bb8 <Trajectory+0x5f8>
 8005a5a:	4b77      	ldr	r3, [pc, #476]	; (8005c38 <Trajectory+0x678>)
 8005a5c:	ed93 7a00 	vldr	s14, [r3]
 8005a60:	4b73      	ldr	r3, [pc, #460]	; (8005c30 <Trajectory+0x670>)
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6e:	f140 80a3 	bpl.w	8005bb8 <Trajectory+0x5f8>
		time_trajectory += 0.0001;
 8005a72:	4b71      	ldr	r3, [pc, #452]	; (8005c38 <Trajectory+0x678>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fa fd6e 	bl	8000558 <__aeabi_f2d>
 8005a7c:	a36a      	add	r3, pc, #424	; (adr r3, 8005c28 <Trajectory+0x668>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fc0b 	bl	800029c <__adddf3>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f7fb f8b3 	bl	8000bf8 <__aeabi_d2f>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4a68      	ldr	r2, [pc, #416]	; (8005c38 <Trajectory+0x678>)
 8005a96:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 8005a98:	4b67      	ldr	r3, [pc, #412]	; (8005c38 <Trajectory+0x678>)
 8005a9a:	ed93 7a00 	vldr	s14, [r3]
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <Trajectory+0x674>)
 8005aa0:	edd3 6a00 	vldr	s13, [r3]
 8005aa4:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <Trajectory+0x67c>)
 8005aa6:	edd3 7a00 	vldr	s15, [r3]
 8005aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ab2:	4b63      	ldr	r3, [pc, #396]	; (8005c40 <Trajectory+0x680>)
 8005ab4:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 * (-1) * acceleration_max * (time_err * time_err) * sign);
 8005ab8:	4b62      	ldr	r3, [pc, #392]	; (8005c44 <Trajectory+0x684>)
 8005aba:	ed93 7a00 	vldr	s14, [r3]
 8005abe:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <Trajectory+0x688>)
 8005ac0:	edd3 7a00 	vldr	s15, [r3]
 8005ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ac8:	4b60      	ldr	r3, [pc, #384]	; (8005c4c <Trajectory+0x68c>)
 8005aca:	edd3 6a00 	vldr	s13, [r3]
 8005ace:	4b5c      	ldr	r3, [pc, #368]	; (8005c40 <Trajectory+0x680>)
 8005ad0:	edd3 7a00 	vldr	s15, [r3]
 8005ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005adc:	ee17 0a90 	vmov	r0, s15
 8005ae0:	f7fa fd3a 	bl	8000558 <__aeabi_f2d>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	6978      	ldr	r0, [r7, #20]
 8005aea:	f7fa fd35 	bl	8000558 <__aeabi_f2d>
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	4b57      	ldr	r3, [pc, #348]	; (8005c50 <Trajectory+0x690>)
 8005af4:	f7fa fd88 	bl	8000608 <__aeabi_dmul>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4690      	mov	r8, r2
 8005afe:	4699      	mov	r9, r3
 8005b00:	4b4f      	ldr	r3, [pc, #316]	; (8005c40 <Trajectory+0x680>)
 8005b02:	ed93 7a00 	vldr	s14, [r3]
 8005b06:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <Trajectory+0x680>)
 8005b08:	edd3 7a00 	vldr	s15, [r3]
 8005b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b10:	ee17 0a90 	vmov	r0, s15
 8005b14:	f7fa fd20 	bl	8000558 <__aeabi_f2d>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa fd72 	bl	8000608 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4690      	mov	r8, r2
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	4b49      	ldr	r3, [pc, #292]	; (8005c54 <Trajectory+0x694>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fa fcff 	bl	8000534 <__aeabi_i2d>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f7fa fd63 	bl	8000608 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fba7 	bl	800029c <__adddf3>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	f7fb f84f 	bl	8000bf8 <__aeabi_d2f>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4a3e      	ldr	r2, [pc, #248]	; (8005c58 <Trajectory+0x698>)
 8005b5e:	6013      	str	r3, [r2, #0]
		velocity = (-acceleration_max * sign * time_err) + (max_velocity);
 8005b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b64:	eeb1 7a67 	vneg.f32	s14, s15
 8005b68:	4b3a      	ldr	r3, [pc, #232]	; (8005c54 <Trajectory+0x694>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b78:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <Trajectory+0x680>)
 8005b7a:	edd3 7a00 	vldr	s15, [r3]
 8005b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b82:	4b32      	ldr	r3, [pc, #200]	; (8005c4c <Trajectory+0x68c>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8c:	4b33      	ldr	r3, [pc, #204]	; (8005c5c <Trajectory+0x69c>)
 8005b8e:	edc3 7a00 	vstr	s15, [r3]
		acceleration = -acceleration_max * sign;
 8005b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b96:	eeb1 7a67 	vneg.f32	s14, s15
 8005b9a:	4b2e      	ldr	r3, [pc, #184]	; (8005c54 <Trajectory+0x694>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	4b2d      	ldr	r3, [pc, #180]	; (8005c60 <Trajectory+0x6a0>)
 8005bac:	edc3 7a00 	vstr	s15, [r3]
		initial_position = position;
 8005bb0:	4b29      	ldr	r3, [pc, #164]	; (8005c58 <Trajectory+0x698>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <Trajectory+0x6a4>)
 8005bb6:	6013      	str	r3, [r2, #0]
	}

	position = (int) position;
 8005bb8:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <Trajectory+0x698>)
 8005bba:	edd3 7a00 	vldr	s15, [r3]
 8005bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc6:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <Trajectory+0x698>)
 8005bc8:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_now == position) {
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <Trajectory+0x6a8>)
 8005bce:	ed93 7a00 	vldr	s14, [r3]
 8005bd2:	4b21      	ldr	r3, [pc, #132]	; (8005c58 <Trajectory+0x698>)
 8005bd4:	edd3 7a00 	vldr	s15, [r3]
 8005bd8:	eeb4 7a67 	vcmp.f32	s14, s15
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	d10b      	bne.n	8005bfa <Trajectory+0x63a>
		time_trajectory = 0;
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <Trajectory+0x678>)
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
		acceleration = 0;
 8005bea:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <Trajectory+0x6a0>)
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
		velocity = 0;
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <Trajectory+0x69c>)
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
	}
	}

	*position_out = position;
 8005bfa:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <Trajectory+0x698>)
 8005bfc:	edd3 7a00 	vldr	s15, [r3]
 8005c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c04:	ee17 2a90 	vmov	r2, s15
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	601a      	str	r2, [r3, #0]
	*velocity_out = velocity;
 8005c0c:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <Trajectory+0x69c>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]
	*acceleration_out = acceleration;
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <Trajectory+0x6a0>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c24:	f3af 8000 	nop.w
 8005c28:	eb1c432d 	.word	0xeb1c432d
 8005c2c:	3f1a36e2 	.word	0x3f1a36e2
 8005c30:	20001d90 	.word	0x20001d90
 8005c34:	20001d88 	.word	0x20001d88
 8005c38:	20001d80 	.word	0x20001d80
 8005c3c:	20001d8c 	.word	0x20001d8c
 8005c40:	20001da0 	.word	0x20001da0
 8005c44:	20001d9c 	.word	0x20001d9c
 8005c48:	20001d98 	.word	0x20001d98
 8005c4c:	20001d94 	.word	0x20001d94
 8005c50:	bfe00000 	.word	0xbfe00000
 8005c54:	20001d74 	.word	0x20001d74
 8005c58:	20001d68 	.word	0x20001d68
 8005c5c:	20001d6c 	.word	0x20001d6c
 8005c60:	20001d70 	.word	0x20001d70
 8005c64:	20001d64 	.word	0x20001d64
 8005c68:	20001d78 	.word	0x20001d78

08005c6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c70:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c72:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <MX_USART1_UART_Init+0x50>)
 8005c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c92:	220c      	movs	r2, #12
 8005c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ca2:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <MX_USART1_UART_Init+0x4c>)
 8005ca4:	f004 fd30 	bl	800a708 <HAL_UART_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005cae:	f7fe ff9d 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20001da4 	.word	0x20001da4
 8005cbc:	40011000 	.word	0x40011000

08005cc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005cc4:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <MX_USART2_UART_Init+0x54>)
 8005cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005ccc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cd8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cea:	220c      	movs	r2, #12
 8005cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005cfa:	4805      	ldr	r0, [pc, #20]	; (8005d10 <MX_USART2_UART_Init+0x50>)
 8005cfc:	f004 fd04 	bl	800a708 <HAL_UART_Init>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8005d06:	f7fe ff71 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20001e18 	.word	0x20001e18
 8005d14:	40004400 	.word	0x40004400

08005d18 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005d1c:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <MX_USART6_UART_Init+0x50>)
 8005d20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005d28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d3e:	2208      	movs	r2, #8
 8005d40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8005d4e:	4805      	ldr	r0, [pc, #20]	; (8005d64 <MX_USART6_UART_Init+0x4c>)
 8005d50:	f004 fd34 	bl	800a7bc <HAL_HalfDuplex_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005d5a:	f7fe ff47 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005d5e:	bf00      	nop
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20001e8c 	.word	0x20001e8c
 8005d68:	40011400 	.word	0x40011400

08005d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08e      	sub	sp, #56	; 0x38
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a85      	ldr	r2, [pc, #532]	; (8005fa0 <HAL_UART_MspInit+0x234>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d163      	bne.n	8005e56 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d8e:	2300      	movs	r3, #0
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	4b84      	ldr	r3, [pc, #528]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	4a83      	ldr	r2, [pc, #524]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005d98:	f043 0310 	orr.w	r3, r3, #16
 8005d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9e:	4b81      	ldr	r3, [pc, #516]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	623b      	str	r3, [r7, #32]
 8005da8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	4b7d      	ldr	r3, [pc, #500]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	4a7c      	ldr	r2, [pc, #496]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dba:	4b7a      	ldr	r3, [pc, #488]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005dc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dd8:	2307      	movs	r3, #7
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de0:	4619      	mov	r1, r3
 8005de2:	4871      	ldr	r0, [pc, #452]	; (8005fa8 <HAL_UART_MspInit+0x23c>)
 8005de4:	f001 f942 	bl	800706c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005de8:	4b70      	ldr	r3, [pc, #448]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005dea:	4a71      	ldr	r2, [pc, #452]	; (8005fb0 <HAL_UART_MspInit+0x244>)
 8005dec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005dee:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005df4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005df6:	4b6d      	ldr	r3, [pc, #436]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005df8:	2240      	movs	r2, #64	; 0x40
 8005dfa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dfc:	4b6b      	ldr	r3, [pc, #428]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e02:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e08:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e0a:	4b68      	ldr	r3, [pc, #416]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e10:	4b66      	ldr	r3, [pc, #408]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005e16:	4b65      	ldr	r3, [pc, #404]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e1c:	4b63      	ldr	r3, [pc, #396]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e22:	4b62      	ldr	r3, [pc, #392]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e28:	4860      	ldr	r0, [pc, #384]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e2a:	f000 fd11 	bl	8006850 <HAL_DMA_Init>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005e34:	f7fe feda 	bl	8004bec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a5c      	ldr	r2, [pc, #368]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8005e3e:	4a5b      	ldr	r2, [pc, #364]	; (8005fac <HAL_UART_MspInit+0x240>)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e44:	2200      	movs	r2, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	2025      	movs	r0, #37	; 0x25
 8005e4a:	f000 fcca 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e4e:	2025      	movs	r0, #37	; 0x25
 8005e50:	f000 fce3 	bl	800681a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005e54:	e0a0      	b.n	8005f98 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART2)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a56      	ldr	r2, [pc, #344]	; (8005fb4 <HAL_UART_MspInit+0x248>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d162      	bne.n	8005f26 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e60:	2300      	movs	r3, #0
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	4a4e      	ldr	r2, [pc, #312]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e70:	4b4c      	ldr	r3, [pc, #304]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	4b48      	ldr	r3, [pc, #288]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	4a47      	ldr	r2, [pc, #284]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e8c:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005e98:	230c      	movs	r3, #12
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ea8:	2307      	movs	r3, #7
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	483d      	ldr	r0, [pc, #244]	; (8005fa8 <HAL_UART_MspInit+0x23c>)
 8005eb4:	f001 f8da 	bl	800706c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005eb8:	4b3f      	ldr	r3, [pc, #252]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005eba:	4a40      	ldr	r2, [pc, #256]	; (8005fbc <HAL_UART_MspInit+0x250>)
 8005ebc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ec0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ec4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ecc:	4b3a      	ldr	r3, [pc, #232]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed2:	4b39      	ldr	r3, [pc, #228]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ee0:	4b35      	ldr	r3, [pc, #212]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005ee6:	4b34      	ldr	r3, [pc, #208]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef2:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005ef8:	482f      	ldr	r0, [pc, #188]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005efa:	f000 fca9 	bl	8006850 <HAL_DMA_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005f04:	f7fe fe72 	bl	8004bec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a2b      	ldr	r2, [pc, #172]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f0e:	4a2a      	ldr	r2, [pc, #168]	; (8005fb8 <HAL_UART_MspInit+0x24c>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	2026      	movs	r0, #38	; 0x26
 8005f1a:	f000 fc62 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f1e:	2026      	movs	r0, #38	; 0x26
 8005f20:	f000 fc7b 	bl	800681a <HAL_NVIC_EnableIRQ>
}
 8005f24:	e038      	b.n	8005f98 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART6)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a25      	ldr	r2, [pc, #148]	; (8005fc0 <HAL_UART_MspInit+0x254>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d133      	bne.n	8005f98 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005f3a:	f043 0320 	orr.w	r3, r3, #32
 8005f3e:	6453      	str	r3, [r2, #68]	; 0x44
 8005f40:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005f56:	f043 0304 	orr.w	r3, r3, #4
 8005f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5c:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <HAL_UART_MspInit+0x238>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f6c:	2312      	movs	r3, #18
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f74:	2303      	movs	r3, #3
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005f78:	2308      	movs	r3, #8
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f80:	4619      	mov	r1, r3
 8005f82:	4810      	ldr	r0, [pc, #64]	; (8005fc4 <HAL_UART_MspInit+0x258>)
 8005f84:	f001 f872 	bl	800706c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	2047      	movs	r0, #71	; 0x47
 8005f8e:	f000 fc28 	bl	80067e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005f92:	2047      	movs	r0, #71	; 0x47
 8005f94:	f000 fc41 	bl	800681a <HAL_NVIC_EnableIRQ>
}
 8005f98:	bf00      	nop
 8005f9a:	3738      	adds	r7, #56	; 0x38
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40011000 	.word	0x40011000
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40020000 	.word	0x40020000
 8005fac:	20001f00 	.word	0x20001f00
 8005fb0:	400264b8 	.word	0x400264b8
 8005fb4:	40004400 	.word	0x40004400
 8005fb8:	20001f60 	.word	0x20001f60
 8005fbc:	400260a0 	.word	0x400260a0
 8005fc0:	40011400 	.word	0x40011400
 8005fc4:	40020800 	.word	0x40020800

08005fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005fcc:	480d      	ldr	r0, [pc, #52]	; (8006004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005fce:	490e      	ldr	r1, [pc, #56]	; (8006008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005fd0:	4a0e      	ldr	r2, [pc, #56]	; (800600c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fd4:	e002      	b.n	8005fdc <LoopCopyDataInit>

08005fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fda:	3304      	adds	r3, #4

08005fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fe0:	d3f9      	bcc.n	8005fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005fe4:	4c0b      	ldr	r4, [pc, #44]	; (8006014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fe8:	e001      	b.n	8005fee <LoopFillZerobss>

08005fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fec:	3204      	adds	r2, #4

08005fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ff0:	d3fb      	bcc.n	8005fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005ff2:	f7fe ff79 	bl	8004ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ff6:	f005 fe7f 	bl	800bcf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ffa:	f7fe fcf9 	bl	80049f0 <main>
  bx  lr    
 8005ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006008:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 800600c:	080137f0 	.word	0x080137f0
  ldr r2, =_sbss
 8006010:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8006014:	20001fd4 	.word	0x20001fd4

08006018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006018:	e7fe      	b.n	8006018 <ADC_IRQHandler>
	...

0800601c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <HAL_Init+0x40>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0d      	ldr	r2, [pc, #52]	; (800605c <HAL_Init+0x40>)
 8006026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800602a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_Init+0x40>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <HAL_Init+0x40>)
 8006032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <HAL_Init+0x40>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a07      	ldr	r2, [pc, #28]	; (800605c <HAL_Init+0x40>)
 800603e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006044:	2003      	movs	r0, #3
 8006046:	f000 fbc1 	bl	80067cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800604a:	2000      	movs	r0, #0
 800604c:	f000 f808 	bl	8006060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006050:	f7fe fdd2 	bl	8004bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40023c00 	.word	0x40023c00

08006060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006068:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <HAL_InitTick+0x54>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <HAL_InitTick+0x58>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	4619      	mov	r1, r3
 8006072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006076:	fbb3 f3f1 	udiv	r3, r3, r1
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fbd9 	bl	8006836 <HAL_SYSTICK_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e00e      	b.n	80060ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d80a      	bhi.n	80060aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006094:	2200      	movs	r2, #0
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	f000 fba1 	bl	80067e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060a0:	4a06      	ldr	r2, [pc, #24]	; (80060bc <HAL_InitTick+0x5c>)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e000      	b.n	80060ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000230 	.word	0x20000230
 80060b8:	20000238 	.word	0x20000238
 80060bc:	20000234 	.word	0x20000234

080060c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <HAL_IncTick+0x20>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <HAL_IncTick+0x24>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4413      	add	r3, r2
 80060d0:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <HAL_IncTick+0x24>)
 80060d2:	6013      	str	r3, [r2, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000238 	.word	0x20000238
 80060e4:	20001fc0 	.word	0x20001fc0

080060e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return uwTick;
 80060ec:	4b03      	ldr	r3, [pc, #12]	; (80060fc <HAL_GetTick+0x14>)
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20001fc0 	.word	0x20001fc0

08006100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006108:	f7ff ffee 	bl	80060e8 <HAL_GetTick>
 800610c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d005      	beq.n	8006126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_Delay+0x44>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006126:	bf00      	nop
 8006128:	f7ff ffde 	bl	80060e8 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	429a      	cmp	r2, r3
 8006136:	d8f7      	bhi.n	8006128 <HAL_Delay+0x28>
  {
  }
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000238 	.word	0x20000238

08006148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e033      	b.n	80061c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb ffba 	bl	80020e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b00      	cmp	r3, #0
 8006184:	d118      	bne.n	80061b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800618e:	f023 0302 	bic.w	r3, r3, #2
 8006192:	f043 0202 	orr.w	r2, r3, #2
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f94a 	bl	8006434 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	f043 0201 	orr.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
 80061b6:	e001      	b.n	80061bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x1c>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e113      	b.n	8006414 <HAL_ADC_ConfigChannel+0x244>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	d925      	bls.n	8006248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68d9      	ldr	r1, [r3, #12]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	3b1e      	subs	r3, #30
 8006212:	2207      	movs	r2, #7
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43da      	mvns	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	400a      	ands	r2, r1
 8006220:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68d9      	ldr	r1, [r3, #12]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	4618      	mov	r0, r3
 8006234:	4603      	mov	r3, r0
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4403      	add	r3, r0
 800623a:	3b1e      	subs	r3, #30
 800623c:	409a      	lsls	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e022      	b.n	800628e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6919      	ldr	r1, [r3, #16]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	2207      	movs	r2, #7
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	400a      	ands	r2, r1
 800626a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6919      	ldr	r1, [r3, #16]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	4618      	mov	r0, r3
 800627e:	4603      	mov	r3, r0
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	4403      	add	r3, r0
 8006284:	409a      	lsls	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b06      	cmp	r3, #6
 8006294:	d824      	bhi.n	80062e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	3b05      	subs	r3, #5
 80062a8:	221f      	movs	r2, #31
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	43da      	mvns	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	400a      	ands	r2, r1
 80062b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4618      	mov	r0, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	3b05      	subs	r3, #5
 80062d2:	fa00 f203 	lsl.w	r2, r0, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	635a      	str	r2, [r3, #52]	; 0x34
 80062de:	e04c      	b.n	800637a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b0c      	cmp	r3, #12
 80062e6:	d824      	bhi.n	8006332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	3b23      	subs	r3, #35	; 0x23
 80062fa:	221f      	movs	r2, #31
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43da      	mvns	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	400a      	ands	r2, r1
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	4618      	mov	r0, r3
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	3b23      	subs	r3, #35	; 0x23
 8006324:	fa00 f203 	lsl.w	r2, r0, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
 8006330:	e023      	b.n	800637a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	3b41      	subs	r3, #65	; 0x41
 8006344:	221f      	movs	r2, #31
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43da      	mvns	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	400a      	ands	r2, r1
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	4618      	mov	r0, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	3b41      	subs	r3, #65	; 0x41
 800636e:	fa00 f203 	lsl.w	r2, r0, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800637a:	4b29      	ldr	r3, [pc, #164]	; (8006420 <HAL_ADC_ConfigChannel+0x250>)
 800637c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a28      	ldr	r2, [pc, #160]	; (8006424 <HAL_ADC_ConfigChannel+0x254>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10f      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x1d8>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b12      	cmp	r3, #18
 800638e:	d10b      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_ADC_ConfigChannel+0x254>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12b      	bne.n	800640a <HAL_ADC_ConfigChannel+0x23a>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <HAL_ADC_ConfigChannel+0x258>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <HAL_ADC_ConfigChannel+0x1f4>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b11      	cmp	r3, #17
 80063c2:	d122      	bne.n	800640a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a11      	ldr	r2, [pc, #68]	; (8006428 <HAL_ADC_ConfigChannel+0x258>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d111      	bne.n	800640a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <HAL_ADC_ConfigChannel+0x25c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a11      	ldr	r2, [pc, #68]	; (8006430 <HAL_ADC_ConfigChannel+0x260>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	0c9a      	lsrs	r2, r3, #18
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063fc:	e002      	b.n	8006404 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3b01      	subs	r3, #1
 8006402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f9      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	40012300 	.word	0x40012300
 8006424:	40012000 	.word	0x40012000
 8006428:	10000012 	.word	0x10000012
 800642c:	20000230 	.word	0x20000230
 8006430:	431bde83 	.word	0x431bde83

08006434 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <ADC_Init+0x1f0>)
 800643e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6859      	ldr	r1, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	021a      	lsls	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800648c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6859      	ldr	r1, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6899      	ldr	r1, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	4a58      	ldr	r2, [pc, #352]	; (8006628 <ADC_Init+0x1f4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6899      	ldr	r1, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6899      	ldr	r1, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	e00f      	b.n	8006532 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006530:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0202 	bic.w	r2, r2, #2
 8006540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6899      	ldr	r1, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7e1b      	ldrb	r3, [r3, #24]
 800654c:	005a      	lsls	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01b      	beq.n	8006598 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800657e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6859      	ldr	r1, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	3b01      	subs	r3, #1
 800658c:	035a      	lsls	r2, r3, #13
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	e007      	b.n	80065a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80065b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	051a      	lsls	r2, r3, #20
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6899      	ldr	r1, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065ea:	025a      	lsls	r2, r3, #9
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6899      	ldr	r1, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	029a      	lsls	r2, r3, #10
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40012300 	.word	0x40012300
 8006628:	0f000001 	.word	0x0f000001

0800662c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <__NVIC_SetPriorityGrouping+0x44>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006648:	4013      	ands	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <__NVIC_SetPriorityGrouping+0x44>)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	60d3      	str	r3, [r2, #12]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <__NVIC_GetPriorityGrouping+0x18>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0a1b      	lsrs	r3, r3, #8
 800667e:	f003 0307 	and.w	r3, r3, #7
}
 8006682:	4618      	mov	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	e000ed00 	.word	0xe000ed00

08006690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	db0b      	blt.n	80066ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	f003 021f 	and.w	r2, r3, #31
 80066a8:	4907      	ldr	r1, [pc, #28]	; (80066c8 <__NVIC_EnableIRQ+0x38>)
 80066aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2001      	movs	r0, #1
 80066b2:	fa00 f202 	lsl.w	r2, r0, r2
 80066b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	e000e100 	.word	0xe000e100

080066cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db0a      	blt.n	80066f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	490c      	ldr	r1, [pc, #48]	; (8006718 <__NVIC_SetPriority+0x4c>)
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	440b      	add	r3, r1
 80066f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066f4:	e00a      	b.n	800670c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4908      	ldr	r1, [pc, #32]	; (800671c <__NVIC_SetPriority+0x50>)
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	3b04      	subs	r3, #4
 8006704:	0112      	lsls	r2, r2, #4
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	440b      	add	r3, r1
 800670a:	761a      	strb	r2, [r3, #24]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	e000e100 	.word	0xe000e100
 800671c:	e000ed00 	.word	0xe000ed00

08006720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f1c3 0307 	rsb	r3, r3, #7
 800673a:	2b04      	cmp	r3, #4
 800673c:	bf28      	it	cs
 800673e:	2304      	movcs	r3, #4
 8006740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3304      	adds	r3, #4
 8006746:	2b06      	cmp	r3, #6
 8006748:	d902      	bls.n	8006750 <NVIC_EncodePriority+0x30>
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3b03      	subs	r3, #3
 800674e:	e000      	b.n	8006752 <NVIC_EncodePriority+0x32>
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43da      	mvns	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	401a      	ands	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006768:	f04f 31ff 	mov.w	r1, #4294967295
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	43d9      	mvns	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006778:	4313      	orrs	r3, r2
         );
}
 800677a:	4618      	mov	r0, r3
 800677c:	3724      	adds	r7, #36	; 0x24
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3b01      	subs	r3, #1
 8006794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006798:	d301      	bcc.n	800679e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800679a:	2301      	movs	r3, #1
 800679c:	e00f      	b.n	80067be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800679e:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <SysTick_Config+0x40>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067a6:	210f      	movs	r1, #15
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	f7ff ff8e 	bl	80066cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <SysTick_Config+0x40>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <SysTick_Config+0x40>)
 80067b8:	2207      	movs	r2, #7
 80067ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	e000e010 	.word	0xe000e010

080067cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff29 	bl	800662c <__NVIC_SetPriorityGrouping>
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	4603      	mov	r3, r0
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067f4:	f7ff ff3e 	bl	8006674 <__NVIC_GetPriorityGrouping>
 80067f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	6978      	ldr	r0, [r7, #20]
 8006800:	f7ff ff8e 	bl	8006720 <NVIC_EncodePriority>
 8006804:	4602      	mov	r2, r0
 8006806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff5d 	bl	80066cc <__NVIC_SetPriority>
}
 8006812:	bf00      	nop
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	4603      	mov	r3, r0
 8006822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff ff31 	bl	8006690 <__NVIC_EnableIRQ>
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ffa2 	bl	8006788 <SysTick_Config>
 8006844:	4603      	mov	r3, r0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800685c:	f7ff fc44 	bl	80060e8 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e099      	b.n	80069a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800688c:	e00f      	b.n	80068ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800688e:	f7ff fc2b 	bl	80060e8 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b05      	cmp	r3, #5
 800689a:	d908      	bls.n	80068ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2203      	movs	r2, #3
 80068a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e078      	b.n	80069a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e8      	bne.n	800688e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4b38      	ldr	r3, [pc, #224]	; (80069a8 <HAL_DMA_Init+0x158>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	2b04      	cmp	r3, #4
 8006906:	d107      	bne.n	8006918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	4313      	orrs	r3, r2
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2b04      	cmp	r3, #4
 8006940:	d117      	bne.n	8006972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00e      	beq.n	8006972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb0d 	bl	8006f74 <DMA_CheckFifoParam>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800696e:	2301      	movs	r3, #1
 8006970:	e016      	b.n	80069a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fac4 	bl	8006f08 <DMA_CalcBaseAndBitshift>
 8006980:	4603      	mov	r3, r0
 8006982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	223f      	movs	r2, #63	; 0x3f
 800698a:	409a      	lsls	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	f010803f 	.word	0xf010803f

080069ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_DMA_Start_IT+0x26>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e040      	b.n	8006a54 <HAL_DMA_Start_IT+0xa8>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d12f      	bne.n	8006a46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fa56 	bl	8006eac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	223f      	movs	r2, #63	; 0x3f
 8006a06:	409a      	lsls	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0216 	orr.w	r2, r2, #22
 8006a1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0208 	orr.w	r2, r2, #8
 8006a32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e005      	b.n	8006a52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a6a:	f7ff fb3d 	bl	80060e8 <HAL_GetTick>
 8006a6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d008      	beq.n	8006a8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2280      	movs	r2, #128	; 0x80
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e052      	b.n	8006b34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0216 	bic.w	r2, r2, #22
 8006a9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <HAL_DMA_Abort+0x62>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0208 	bic.w	r2, r2, #8
 8006acc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ade:	e013      	b.n	8006b08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ae0:	f7ff fb02 	bl	80060e8 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d90c      	bls.n	8006b08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2203      	movs	r2, #3
 8006af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e015      	b.n	8006b34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e4      	bne.n	8006ae0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1a:	223f      	movs	r2, #63	; 0x3f
 8006b1c:	409a      	lsls	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d004      	beq.n	8006b5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e00c      	b.n	8006b74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2205      	movs	r2, #5
 8006b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b8c:	4b8e      	ldr	r3, [pc, #568]	; (8006dc8 <HAL_DMA_IRQHandler+0x248>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a8e      	ldr	r2, [pc, #568]	; (8006dcc <HAL_DMA_IRQHandler+0x24c>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	0a9b      	lsrs	r3, r3, #10
 8006b98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	2208      	movs	r2, #8
 8006bac:	409a      	lsls	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01a      	beq.n	8006bec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d013      	beq.n	8006bec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0204 	bic.w	r2, r2, #4
 8006bd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd8:	2208      	movs	r2, #8
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	f043 0201 	orr.w	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d012      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00b      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0e:	2201      	movs	r2, #1
 8006c10:	409a      	lsls	r2, r3
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f043 0202 	orr.w	r2, r3, #2
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	2204      	movs	r2, #4
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d012      	beq.n	8006c58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c44:	2204      	movs	r2, #4
 8006c46:	409a      	lsls	r2, r3
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	f043 0204 	orr.w	r2, r3, #4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d043      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d03c      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	409a      	lsls	r2, r3
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d018      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d108      	bne.n	8006cb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d024      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
 8006cae:	e01f      	b.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01b      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
 8006cc0:	e016      	b.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d107      	bne.n	8006ce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0208 	bic.w	r2, r2, #8
 8006cde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 808f 	beq.w	8006e20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8087 	beq.w	8006e20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	2220      	movs	r2, #32
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d136      	bne.n	8006d98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0216 	bic.w	r2, r2, #22
 8006d38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <HAL_DMA_IRQHandler+0x1da>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0208 	bic.w	r2, r2, #8
 8006d68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6e:	223f      	movs	r2, #63	; 0x3f
 8006d70:	409a      	lsls	r2, r3
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d07e      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
        }
        return;
 8006d96:	e079      	b.n	8006e8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01d      	beq.n	8006de2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d031      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
 8006dc4:	e02c      	b.n	8006e20 <HAL_DMA_IRQHandler+0x2a0>
 8006dc6:	bf00      	nop
 8006dc8:	20000230 	.word	0x20000230
 8006dcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d023      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
 8006de0:	e01e      	b.n	8006e20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10f      	bne.n	8006e10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0210 	bic.w	r2, r2, #16
 8006dfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d032      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d022      	beq.n	8006e7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2205      	movs	r2, #5
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d307      	bcc.n	8006e68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f2      	bne.n	8006e4c <HAL_DMA_IRQHandler+0x2cc>
 8006e66:	e000      	b.n	8006e6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
 8006e8a:	e000      	b.n	8006e8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e8c:	bf00      	nop
    }
  }
}
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ec8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	d108      	bne.n	8006eec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006eea:	e007      	b.n	8006efc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	60da      	str	r2, [r3, #12]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	3b10      	subs	r3, #16
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <DMA_CalcBaseAndBitshift+0x64>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <DMA_CalcBaseAndBitshift+0x68>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d909      	bls.n	8006f4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	1d1a      	adds	r2, r3, #4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	659a      	str	r2, [r3, #88]	; 0x58
 8006f48:	e007      	b.n	8006f5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	aaaaaaab 	.word	0xaaaaaaab
 8006f70:	08012d3c 	.word	0x08012d3c

08006f74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d11f      	bne.n	8006fce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d856      	bhi.n	8007042 <DMA_CheckFifoParam+0xce>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <DMA_CheckFifoParam+0x28>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fbf 	.word	0x08006fbf
 8006fa4:	08006fad 	.word	0x08006fad
 8006fa8:	08007043 	.word	0x08007043
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d046      	beq.n	8007046 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fbc:	e043      	b.n	8007046 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fc6:	d140      	bne.n	800704a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fcc:	e03d      	b.n	800704a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd6:	d121      	bne.n	800701c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d837      	bhi.n	800704e <DMA_CheckFifoParam+0xda>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <DMA_CheckFifoParam+0x70>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08006ff5 	.word	0x08006ff5
 8006fe8:	08006ffb 	.word	0x08006ffb
 8006fec:	08006ff5 	.word	0x08006ff5
 8006ff0:	0800700d 	.word	0x0800700d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff8:	e030      	b.n	800705c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d025      	beq.n	8007052 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800700a:	e022      	b.n	8007052 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007014:	d11f      	bne.n	8007056 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800701a:	e01c      	b.n	8007056 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d903      	bls.n	800702a <DMA_CheckFifoParam+0xb6>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d003      	beq.n	8007030 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007028:	e018      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	73fb      	strb	r3, [r7, #15]
      break;
 800702e:	e015      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00e      	beq.n	800705a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	73fb      	strb	r3, [r7, #15]
      break;
 8007040:	e00b      	b.n	800705a <DMA_CheckFifoParam+0xe6>
      break;
 8007042:	bf00      	nop
 8007044:	e00a      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      break;
 8007046:	bf00      	nop
 8007048:	e008      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      break;
 800704a:	bf00      	nop
 800704c:	e006      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      break;
 800704e:	bf00      	nop
 8007050:	e004      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      break;
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      break;   
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <DMA_CheckFifoParam+0xe8>
      break;
 800705a:	bf00      	nop
    }
  } 
  
  return status; 
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop

0800706c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	; 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007082:	2300      	movs	r3, #0
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	e159      	b.n	800733c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007088:	2201      	movs	r2, #1
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4013      	ands	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	f040 8148 	bne.w	8007336 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d005      	beq.n	80070be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d130      	bne.n	8007120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	2203      	movs	r2, #3
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43db      	mvns	r3, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4013      	ands	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070f4:	2201      	movs	r2, #1
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	43db      	mvns	r3, r3
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4013      	ands	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	091b      	lsrs	r3, r3, #4
 800710a:	f003 0201 	and.w	r2, r3, #1
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	4313      	orrs	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	2b03      	cmp	r3, #3
 800712a:	d017      	beq.n	800715c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	2203      	movs	r2, #3
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4313      	orrs	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d123      	bne.n	80071b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	08da      	lsrs	r2, r3, #3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3208      	adds	r2, #8
 8007170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	220f      	movs	r2, #15
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	43db      	mvns	r3, r3
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4013      	ands	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	08da      	lsrs	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3208      	adds	r2, #8
 80071aa:	69b9      	ldr	r1, [r7, #24]
 80071ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	2203      	movs	r2, #3
 80071bc:	fa02 f303 	lsl.w	r3, r2, r3
 80071c0:	43db      	mvns	r3, r3
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	4013      	ands	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f003 0203 	and.w	r2, r3, #3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4313      	orrs	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80a2 	beq.w	8007336 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	4b57      	ldr	r3, [pc, #348]	; (8007354 <HAL_GPIO_Init+0x2e8>)
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	4a56      	ldr	r2, [pc, #344]	; (8007354 <HAL_GPIO_Init+0x2e8>)
 80071fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007200:	6453      	str	r3, [r2, #68]	; 0x44
 8007202:	4b54      	ldr	r3, [pc, #336]	; (8007354 <HAL_GPIO_Init+0x2e8>)
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800720e:	4a52      	ldr	r2, [pc, #328]	; (8007358 <HAL_GPIO_Init+0x2ec>)
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	3302      	adds	r3, #2
 8007216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800721a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	220f      	movs	r2, #15
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4013      	ands	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a49      	ldr	r2, [pc, #292]	; (800735c <HAL_GPIO_Init+0x2f0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d019      	beq.n	800726e <HAL_GPIO_Init+0x202>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a48      	ldr	r2, [pc, #288]	; (8007360 <HAL_GPIO_Init+0x2f4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <HAL_GPIO_Init+0x1fe>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a47      	ldr	r2, [pc, #284]	; (8007364 <HAL_GPIO_Init+0x2f8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00d      	beq.n	8007266 <HAL_GPIO_Init+0x1fa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a46      	ldr	r2, [pc, #280]	; (8007368 <HAL_GPIO_Init+0x2fc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <HAL_GPIO_Init+0x1f6>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a45      	ldr	r2, [pc, #276]	; (800736c <HAL_GPIO_Init+0x300>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d101      	bne.n	800725e <HAL_GPIO_Init+0x1f2>
 800725a:	2304      	movs	r3, #4
 800725c:	e008      	b.n	8007270 <HAL_GPIO_Init+0x204>
 800725e:	2307      	movs	r3, #7
 8007260:	e006      	b.n	8007270 <HAL_GPIO_Init+0x204>
 8007262:	2303      	movs	r3, #3
 8007264:	e004      	b.n	8007270 <HAL_GPIO_Init+0x204>
 8007266:	2302      	movs	r3, #2
 8007268:	e002      	b.n	8007270 <HAL_GPIO_Init+0x204>
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <HAL_GPIO_Init+0x204>
 800726e:	2300      	movs	r3, #0
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	f002 0203 	and.w	r2, r2, #3
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	4093      	lsls	r3, r2
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	4313      	orrs	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007280:	4935      	ldr	r1, [pc, #212]	; (8007358 <HAL_GPIO_Init+0x2ec>)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	089b      	lsrs	r3, r3, #2
 8007286:	3302      	adds	r3, #2
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800728e:	4b38      	ldr	r3, [pc, #224]	; (8007370 <HAL_GPIO_Init+0x304>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	43db      	mvns	r3, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072b2:	4a2f      	ldr	r2, [pc, #188]	; (8007370 <HAL_GPIO_Init+0x304>)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072b8:	4b2d      	ldr	r3, [pc, #180]	; (8007370 <HAL_GPIO_Init+0x304>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4013      	ands	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072dc:	4a24      	ldr	r2, [pc, #144]	; (8007370 <HAL_GPIO_Init+0x304>)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072e2:	4b23      	ldr	r3, [pc, #140]	; (8007370 <HAL_GPIO_Init+0x304>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4013      	ands	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007306:	4a1a      	ldr	r2, [pc, #104]	; (8007370 <HAL_GPIO_Init+0x304>)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800730c:	4b18      	ldr	r3, [pc, #96]	; (8007370 <HAL_GPIO_Init+0x304>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007330:	4a0f      	ldr	r2, [pc, #60]	; (8007370 <HAL_GPIO_Init+0x304>)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	3301      	adds	r3, #1
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	f67f aea2 	bls.w	8007088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3724      	adds	r7, #36	; 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40023800 	.word	0x40023800
 8007358:	40013800 	.word	0x40013800
 800735c:	40020000 	.word	0x40020000
 8007360:	40020400 	.word	0x40020400
 8007364:	40020800 	.word	0x40020800
 8007368:	40020c00 	.word	0x40020c00
 800736c:	40021000 	.word	0x40021000
 8007370:	40013c00 	.word	0x40013c00

08007374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	887b      	ldrh	r3, [r7, #2]
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	e001      	b.n	8007396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	807b      	strh	r3, [r7, #2]
 80073b0:	4613      	mov	r3, r2
 80073b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073b4:	787b      	ldrb	r3, [r7, #1]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073ba:	887a      	ldrh	r2, [r7, #2]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073c0:	e003      	b.n	80073ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	041a      	lsls	r2, r3, #16
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	619a      	str	r2, [r3, #24]
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073e2:	4b08      	ldr	r3, [pc, #32]	; (8007404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073e4:	695a      	ldr	r2, [r3, #20]
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073ee:	4a05      	ldr	r2, [pc, #20]	; (8007404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073f4:	88fb      	ldrh	r3, [r7, #6]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fd fbe2 	bl	8004bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	40013c00 	.word	0x40013c00

08007408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e12b      	b.n	8007672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d106      	bne.n	8007434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fa ffa6 	bl	8002380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2224      	movs	r2, #36	; 0x24
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0201 	bic.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800745a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800746a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800746c:	f001 f888 	bl	8008580 <HAL_RCC_GetPCLK1Freq>
 8007470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4a81      	ldr	r2, [pc, #516]	; (800767c <HAL_I2C_Init+0x274>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d807      	bhi.n	800748c <HAL_I2C_Init+0x84>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a80      	ldr	r2, [pc, #512]	; (8007680 <HAL_I2C_Init+0x278>)
 8007480:	4293      	cmp	r3, r2
 8007482:	bf94      	ite	ls
 8007484:	2301      	movls	r3, #1
 8007486:	2300      	movhi	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	e006      	b.n	800749a <HAL_I2C_Init+0x92>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a7d      	ldr	r2, [pc, #500]	; (8007684 <HAL_I2C_Init+0x27c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	bf94      	ite	ls
 8007494:	2301      	movls	r3, #1
 8007496:	2300      	movhi	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e0e7      	b.n	8007672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4a78      	ldr	r2, [pc, #480]	; (8007688 <HAL_I2C_Init+0x280>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	0c9b      	lsrs	r3, r3, #18
 80074ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4a6a      	ldr	r2, [pc, #424]	; (800767c <HAL_I2C_Init+0x274>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d802      	bhi.n	80074dc <HAL_I2C_Init+0xd4>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3301      	adds	r3, #1
 80074da:	e009      	b.n	80074f0 <HAL_I2C_Init+0xe8>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	4a69      	ldr	r2, [pc, #420]	; (800768c <HAL_I2C_Init+0x284>)
 80074e8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ec:	099b      	lsrs	r3, r3, #6
 80074ee:	3301      	adds	r3, #1
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	430b      	orrs	r3, r1
 80074f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	495c      	ldr	r1, [pc, #368]	; (800767c <HAL_I2C_Init+0x274>)
 800750c:	428b      	cmp	r3, r1
 800750e:	d819      	bhi.n	8007544 <HAL_I2C_Init+0x13c>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	1e59      	subs	r1, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	fbb1 f3f3 	udiv	r3, r1, r3
 800751e:	1c59      	adds	r1, r3, #1
 8007520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007524:	400b      	ands	r3, r1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <HAL_I2C_Init+0x138>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1e59      	subs	r1, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	fbb1 f3f3 	udiv	r3, r1, r3
 8007538:	3301      	adds	r3, #1
 800753a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753e:	e051      	b.n	80075e4 <HAL_I2C_Init+0x1dc>
 8007540:	2304      	movs	r3, #4
 8007542:	e04f      	b.n	80075e4 <HAL_I2C_Init+0x1dc>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d111      	bne.n	8007570 <HAL_I2C_Init+0x168>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	1e58      	subs	r0, r3, #1
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6859      	ldr	r1, [r3, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	440b      	add	r3, r1
 800755a:	fbb0 f3f3 	udiv	r3, r0, r3
 800755e:	3301      	adds	r3, #1
 8007560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	e012      	b.n	8007596 <HAL_I2C_Init+0x18e>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1e58      	subs	r0, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6859      	ldr	r1, [r3, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	0099      	lsls	r1, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	fbb0 f3f3 	udiv	r3, r0, r3
 8007586:	3301      	adds	r3, #1
 8007588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <HAL_I2C_Init+0x196>
 800759a:	2301      	movs	r3, #1
 800759c:	e022      	b.n	80075e4 <HAL_I2C_Init+0x1dc>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10e      	bne.n	80075c4 <HAL_I2C_Init+0x1bc>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	1e58      	subs	r0, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	440b      	add	r3, r1
 80075b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b8:	3301      	adds	r3, #1
 80075ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c2:	e00f      	b.n	80075e4 <HAL_I2C_Init+0x1dc>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1e58      	subs	r0, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6859      	ldr	r1, [r3, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	0099      	lsls	r1, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80075da:	3301      	adds	r3, #1
 80075dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	6809      	ldr	r1, [r1, #0]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69da      	ldr	r2, [r3, #28]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6911      	ldr	r1, [r2, #16]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	68d2      	ldr	r2, [r2, #12]
 800761e:	4311      	orrs	r1, r2
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	430b      	orrs	r3, r1
 8007626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695a      	ldr	r2, [r3, #20]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	000186a0 	.word	0x000186a0
 8007680:	001e847f 	.word	0x001e847f
 8007684:	003d08ff 	.word	0x003d08ff
 8007688:	431bde83 	.word	0x431bde83
 800768c:	10624dd3 	.word	0x10624dd3

08007690 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	461a      	mov	r2, r3
 800769c:	460b      	mov	r3, r1
 800769e:	817b      	strh	r3, [r7, #10]
 80076a0:	4613      	mov	r3, r2
 80076a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076a4:	f7fe fd20 	bl	80060e8 <HAL_GetTick>
 80076a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	f040 80e0 	bne.w	8007878 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2319      	movs	r3, #25
 80076be:	2201      	movs	r2, #1
 80076c0:	4970      	ldr	r1, [pc, #448]	; (8007884 <HAL_I2C_Master_Transmit+0x1f4>)
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f964 	bl	8007990 <I2C_WaitOnFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076ce:	2302      	movs	r3, #2
 80076d0:	e0d3      	b.n	800787a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_I2C_Master_Transmit+0x50>
 80076dc:	2302      	movs	r3, #2
 80076de:	e0cc      	b.n	800787a <HAL_I2C_Master_Transmit+0x1ea>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d007      	beq.n	8007706 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0201 	orr.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007714:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2221      	movs	r2, #33	; 0x21
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2210      	movs	r2, #16
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	893a      	ldrh	r2, [r7, #8]
 8007736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a50      	ldr	r2, [pc, #320]	; (8007888 <HAL_I2C_Master_Transmit+0x1f8>)
 8007746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007748:	8979      	ldrh	r1, [r7, #10]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6a3a      	ldr	r2, [r7, #32]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f89c 	bl	800788c <I2C_MasterRequestWrite>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e08d      	b.n	800787a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775e:	2300      	movs	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007774:	e066      	b.n	8007844 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	6a39      	ldr	r1, [r7, #32]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f9de 	bl	8007b3c <I2C_WaitOnTXEFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00d      	beq.n	80077a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	2b04      	cmp	r3, #4
 800778c:	d107      	bne.n	800779e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800779c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e06b      	b.n	800787a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	781a      	ldrb	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d11b      	bne.n	8007818 <HAL_I2C_Master_Transmit+0x188>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d017      	beq.n	8007818 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	6a39      	ldr	r1, [r7, #32]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f9ce 	bl	8007bbe <I2C_WaitOnBTFFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00d      	beq.n	8007844 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	2b04      	cmp	r3, #4
 800782e:	d107      	bne.n	8007840 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800783e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e01a      	b.n	800787a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007848:	2b00      	cmp	r3, #0
 800784a:	d194      	bne.n	8007776 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	e000      	b.n	800787a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	00100002 	.word	0x00100002
 8007888:	ffff0000 	.word	0xffff0000

0800788c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af02      	add	r7, sp, #8
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	460b      	mov	r3, r1
 800789a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d006      	beq.n	80078b6 <I2C_MasterRequestWrite+0x2a>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d003      	beq.n	80078b6 <I2C_MasterRequestWrite+0x2a>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078b4:	d108      	bne.n	80078c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e00b      	b.n	80078e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	2b12      	cmp	r3, #18
 80078ce:	d107      	bne.n	80078e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f84f 	bl	8007990 <I2C_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d103      	bne.n	8007910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e035      	b.n	8007980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800791c:	d108      	bne.n	8007930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800792c:	611a      	str	r2, [r3, #16]
 800792e:	e01b      	b.n	8007968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	11db      	asrs	r3, r3, #7
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 0306 	and.w	r3, r3, #6
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f063 030f 	orn	r3, r3, #15
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	490e      	ldr	r1, [pc, #56]	; (8007988 <I2C_MasterRequestWrite+0xfc>)
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f875 	bl	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e010      	b.n	8007980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4907      	ldr	r1, [pc, #28]	; (800798c <I2C_MasterRequestWrite+0x100>)
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f865 	bl	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	00010008 	.word	0x00010008
 800798c:	00010002 	.word	0x00010002

08007990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a0:	e025      	b.n	80079ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d021      	beq.n	80079ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079aa:	f7fe fb9d 	bl	80060e8 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d302      	bcc.n	80079c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d116      	bne.n	80079ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f043 0220 	orr.w	r2, r3, #32
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e023      	b.n	8007a36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d10d      	bne.n	8007a14 <I2C_WaitOnFlagUntilTimeout+0x84>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	43da      	mvns	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4013      	ands	r3, r2
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bf0c      	ite	eq
 8007a0a:	2301      	moveq	r3, #1
 8007a0c:	2300      	movne	r3, #0
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	e00c      	b.n	8007a2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bf0c      	ite	eq
 8007a26:	2301      	moveq	r3, #1
 8007a28:	2300      	movne	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d0b6      	beq.n	80079a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a4c:	e051      	b.n	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5c:	d123      	bne.n	8007aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f043 0204 	orr.w	r2, r3, #4
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e046      	b.n	8007b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d021      	beq.n	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7fe fb1b 	bl	80060e8 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d116      	bne.n	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e020      	b.n	8007b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d10c      	bne.n	8007b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	43da      	mvns	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4013      	ands	r3, r2
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bf14      	ite	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	2300      	moveq	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	e00b      	b.n	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	43da      	mvns	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4013      	ands	r3, r2
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d18d      	bne.n	8007a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b48:	e02d      	b.n	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f878 	bl	8007c40 <I2C_IsAcknowledgeFailed>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e02d      	b.n	8007bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d021      	beq.n	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b62:	f7fe fac1 	bl	80060e8 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d302      	bcc.n	8007b78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d116      	bne.n	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f043 0220 	orr.w	r2, r3, #32
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e007      	b.n	8007bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb0:	2b80      	cmp	r3, #128	; 0x80
 8007bb2:	d1ca      	bne.n	8007b4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bca:	e02d      	b.n	8007c28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f837 	bl	8007c40 <I2C_IsAcknowledgeFailed>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e02d      	b.n	8007c38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d021      	beq.n	8007c28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be4:	f7fe fa80 	bl	80060e8 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d302      	bcc.n	8007bfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d116      	bne.n	8007c28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	f043 0220 	orr.w	r2, r3, #32
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e007      	b.n	8007c38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f003 0304 	and.w	r3, r3, #4
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d1ca      	bne.n	8007bcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c56:	d11b      	bne.n	8007c90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	f043 0204 	orr.w	r2, r3, #4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
	...

08007ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e267      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d075      	beq.n	8007daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cbe:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d00c      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cca:	4b85      	ldr	r3, [pc, #532]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d112      	bne.n	8007cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cd6:	4b82      	ldr	r3, [pc, #520]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce2:	d10b      	bne.n	8007cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce4:	4b7e      	ldr	r3, [pc, #504]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d05b      	beq.n	8007da8 <HAL_RCC_OscConfig+0x108>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d157      	bne.n	8007da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e242      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d04:	d106      	bne.n	8007d14 <HAL_RCC_OscConfig+0x74>
 8007d06:	4b76      	ldr	r3, [pc, #472]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a75      	ldr	r2, [pc, #468]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e01d      	b.n	8007d50 <HAL_RCC_OscConfig+0xb0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d1c:	d10c      	bne.n	8007d38 <HAL_RCC_OscConfig+0x98>
 8007d1e:	4b70      	ldr	r3, [pc, #448]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a6f      	ldr	r2, [pc, #444]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	4b6d      	ldr	r3, [pc, #436]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a6c      	ldr	r2, [pc, #432]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e00b      	b.n	8007d50 <HAL_RCC_OscConfig+0xb0>
 8007d38:	4b69      	ldr	r3, [pc, #420]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a68      	ldr	r2, [pc, #416]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	4b66      	ldr	r3, [pc, #408]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a65      	ldr	r2, [pc, #404]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d013      	beq.n	8007d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d58:	f7fe f9c6 	bl	80060e8 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d60:	f7fe f9c2 	bl	80060e8 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e207      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d72:	4b5b      	ldr	r3, [pc, #364]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0xc0>
 8007d7e:	e014      	b.n	8007daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d80:	f7fe f9b2 	bl	80060e8 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d88:	f7fe f9ae 	bl	80060e8 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b64      	cmp	r3, #100	; 0x64
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e1f3      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9a:	4b51      	ldr	r3, [pc, #324]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f0      	bne.n	8007d88 <HAL_RCC_OscConfig+0xe8>
 8007da6:	e000      	b.n	8007daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d063      	beq.n	8007e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007db6:	4b4a      	ldr	r3, [pc, #296]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dc2:	4b47      	ldr	r3, [pc, #284]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	d11c      	bne.n	8007e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dce:	4b44      	ldr	r3, [pc, #272]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d116      	bne.n	8007e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dda:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_RCC_OscConfig+0x152>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d001      	beq.n	8007df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e1c7      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df2:	4b3b      	ldr	r3, [pc, #236]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4937      	ldr	r1, [pc, #220]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e06:	e03a      	b.n	8007e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d020      	beq.n	8007e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e10:	4b34      	ldr	r3, [pc, #208]	; (8007ee4 <HAL_RCC_OscConfig+0x244>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e16:	f7fe f967 	bl	80060e8 <HAL_GetTick>
 8007e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e1e:	f7fe f963 	bl	80060e8 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e1a8      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e30:	4b2b      	ldr	r3, [pc, #172]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e3c:	4b28      	ldr	r3, [pc, #160]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4925      	ldr	r1, [pc, #148]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	600b      	str	r3, [r1, #0]
 8007e50:	e015      	b.n	8007e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <HAL_RCC_OscConfig+0x244>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e58:	f7fe f946 	bl	80060e8 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e60:	f7fe f942 	bl	80060e8 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e187      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d036      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <HAL_RCC_OscConfig+0x248>)
 8007e94:	2201      	movs	r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e98:	f7fe f926 	bl	80060e8 <HAL_GetTick>
 8007e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea0:	f7fe f922 	bl	80060e8 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e167      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <HAL_RCC_OscConfig+0x240>)
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x200>
 8007ebe:	e01b      	b.n	8007ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <HAL_RCC_OscConfig+0x248>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec6:	f7fe f90f 	bl	80060e8 <HAL_GetTick>
 8007eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ecc:	e00e      	b.n	8007eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ece:	f7fe f90b 	bl	80060e8 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d907      	bls.n	8007eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e150      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	42470000 	.word	0x42470000
 8007ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eec:	4b88      	ldr	r3, [pc, #544]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1ea      	bne.n	8007ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8097 	beq.w	8008034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f06:	2300      	movs	r3, #0
 8007f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f0a:	4b81      	ldr	r3, [pc, #516]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10f      	bne.n	8007f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f16:	2300      	movs	r3, #0
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	4b7d      	ldr	r3, [pc, #500]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	4a7c      	ldr	r2, [pc, #496]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f24:	6413      	str	r3, [r2, #64]	; 0x40
 8007f26:	4b7a      	ldr	r3, [pc, #488]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	60bb      	str	r3, [r7, #8]
 8007f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f32:	2301      	movs	r3, #1
 8007f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f36:	4b77      	ldr	r3, [pc, #476]	; (8008114 <HAL_RCC_OscConfig+0x474>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d118      	bne.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f42:	4b74      	ldr	r3, [pc, #464]	; (8008114 <HAL_RCC_OscConfig+0x474>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a73      	ldr	r2, [pc, #460]	; (8008114 <HAL_RCC_OscConfig+0x474>)
 8007f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f4e:	f7fe f8cb 	bl	80060e8 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f56:	f7fe f8c7 	bl	80060e8 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e10c      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f68:	4b6a      	ldr	r3, [pc, #424]	; (8008114 <HAL_RCC_OscConfig+0x474>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0f0      	beq.n	8007f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d106      	bne.n	8007f8a <HAL_RCC_OscConfig+0x2ea>
 8007f7c:	4b64      	ldr	r3, [pc, #400]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	4a63      	ldr	r2, [pc, #396]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f82:	f043 0301 	orr.w	r3, r3, #1
 8007f86:	6713      	str	r3, [r2, #112]	; 0x70
 8007f88:	e01c      	b.n	8007fc4 <HAL_RCC_OscConfig+0x324>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d10c      	bne.n	8007fac <HAL_RCC_OscConfig+0x30c>
 8007f92:	4b5f      	ldr	r3, [pc, #380]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f96:	4a5e      	ldr	r2, [pc, #376]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007f98:	f043 0304 	orr.w	r3, r3, #4
 8007f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f9e:	4b5c      	ldr	r3, [pc, #368]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa2:	4a5b      	ldr	r2, [pc, #364]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8007faa:	e00b      	b.n	8007fc4 <HAL_RCC_OscConfig+0x324>
 8007fac:	4b58      	ldr	r3, [pc, #352]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb0:	4a57      	ldr	r2, [pc, #348]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb8:	4b55      	ldr	r3, [pc, #340]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbc:	4a54      	ldr	r2, [pc, #336]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fbe:	f023 0304 	bic.w	r3, r3, #4
 8007fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d015      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fcc:	f7fe f88c 	bl	80060e8 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd2:	e00a      	b.n	8007fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fd4:	f7fe f888 	bl	80060e8 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e0cb      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fea:	4b49      	ldr	r3, [pc, #292]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0ee      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x334>
 8007ff6:	e014      	b.n	8008022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff8:	f7fe f876 	bl	80060e8 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ffe:	e00a      	b.n	8008016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008000:	f7fe f872 	bl	80060e8 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	f241 3288 	movw	r2, #5000	; 0x1388
 800800e:	4293      	cmp	r3, r2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e0b5      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008016:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1ee      	bne.n	8008000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008028:	4b39      	ldr	r3, [pc, #228]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	4a38      	ldr	r2, [pc, #224]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 800802e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 80a1 	beq.w	8008180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800803e:	4b34      	ldr	r3, [pc, #208]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	2b08      	cmp	r3, #8
 8008048:	d05c      	beq.n	8008104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d141      	bne.n	80080d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008052:	4b31      	ldr	r3, [pc, #196]	; (8008118 <HAL_RCC_OscConfig+0x478>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008058:	f7fe f846 	bl	80060e8 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008060:	f7fe f842 	bl	80060e8 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e087      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008072:	4b27      	ldr	r3, [pc, #156]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f0      	bne.n	8008060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69da      	ldr	r2, [r3, #28]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	019b      	lsls	r3, r3, #6
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	3b01      	subs	r3, #1
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	061b      	lsls	r3, r3, #24
 80080a2:	491b      	ldr	r1, [pc, #108]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080a8:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <HAL_RCC_OscConfig+0x478>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ae:	f7fe f81b 	bl	80060e8 <HAL_GetTick>
 80080b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b6:	f7fe f817 	bl	80060e8 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e05c      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c8:	4b11      	ldr	r3, [pc, #68]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCC_OscConfig+0x416>
 80080d4:	e054      	b.n	8008180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <HAL_RCC_OscConfig+0x478>)
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080dc:	f7fe f804 	bl	80060e8 <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080e4:	f7fe f800 	bl	80060e8 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e045      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <HAL_RCC_OscConfig+0x470>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1f0      	bne.n	80080e4 <HAL_RCC_OscConfig+0x444>
 8008102:	e03d      	b.n	8008180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d107      	bne.n	800811c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e038      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
 8008110:	40023800 	.word	0x40023800
 8008114:	40007000 	.word	0x40007000
 8008118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800811c:	4b1b      	ldr	r3, [pc, #108]	; (800818c <HAL_RCC_OscConfig+0x4ec>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d028      	beq.n	800817c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008134:	429a      	cmp	r2, r3
 8008136:	d121      	bne.n	800817c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008142:	429a      	cmp	r2, r3
 8008144:	d11a      	bne.n	800817c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800814c:	4013      	ands	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008154:	4293      	cmp	r3, r2
 8008156:	d111      	bne.n	800817c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	3b01      	subs	r3, #1
 8008166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008168:	429a      	cmp	r2, r3
 800816a:	d107      	bne.n	800817c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e000      	b.n	8008182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40023800 	.word	0x40023800

08008190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0cc      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081a4:	4b68      	ldr	r3, [pc, #416]	; (8008348 <HAL_RCC_ClockConfig+0x1b8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d90c      	bls.n	80081cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081b2:	4b65      	ldr	r3, [pc, #404]	; (8008348 <HAL_RCC_ClockConfig+0x1b8>)
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ba:	4b63      	ldr	r3, [pc, #396]	; (8008348 <HAL_RCC_ClockConfig+0x1b8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d001      	beq.n	80081cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0b8      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d020      	beq.n	800821a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081e4:	4b59      	ldr	r3, [pc, #356]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	4a58      	ldr	r2, [pc, #352]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 80081ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081fc:	4b53      	ldr	r3, [pc, #332]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4a52      	ldr	r2, [pc, #328]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008208:	4b50      	ldr	r3, [pc, #320]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	494d      	ldr	r1, [pc, #308]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008216:	4313      	orrs	r3, r2
 8008218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d044      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d107      	bne.n	800823e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800822e:	4b47      	ldr	r3, [pc, #284]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d119      	bne.n	800826e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e07f      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d003      	beq.n	800824e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800824a:	2b03      	cmp	r3, #3
 800824c:	d107      	bne.n	800825e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800824e:	4b3f      	ldr	r3, [pc, #252]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e06f      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825e:	4b3b      	ldr	r3, [pc, #236]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e067      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800826e:	4b37      	ldr	r3, [pc, #220]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f023 0203 	bic.w	r2, r3, #3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	4934      	ldr	r1, [pc, #208]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 800827c:	4313      	orrs	r3, r2
 800827e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008280:	f7fd ff32 	bl	80060e8 <HAL_GetTick>
 8008284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008286:	e00a      	b.n	800829e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008288:	f7fd ff2e 	bl	80060e8 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f241 3288 	movw	r2, #5000	; 0x1388
 8008296:	4293      	cmp	r3, r2
 8008298:	d901      	bls.n	800829e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e04f      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829e:	4b2b      	ldr	r3, [pc, #172]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 020c 	and.w	r2, r3, #12
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d1eb      	bne.n	8008288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b0:	4b25      	ldr	r3, [pc, #148]	; (8008348 <HAL_RCC_ClockConfig+0x1b8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d20c      	bcs.n	80082d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082be:	4b22      	ldr	r3, [pc, #136]	; (8008348 <HAL_RCC_ClockConfig+0x1b8>)
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c6:	4b20      	ldr	r3, [pc, #128]	; (8008348 <HAL_RCC_ClockConfig+0x1b8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d001      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e032      	b.n	800833e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082e4:	4b19      	ldr	r3, [pc, #100]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	4916      	ldr	r1, [pc, #88]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	490e      	ldr	r1, [pc, #56]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	4313      	orrs	r3, r2
 8008314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008316:	f000 f821 	bl	800835c <HAL_RCC_GetSysClockFreq>
 800831a:	4602      	mov	r2, r0
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <HAL_RCC_ClockConfig+0x1bc>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	091b      	lsrs	r3, r3, #4
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	490a      	ldr	r1, [pc, #40]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 8008328:	5ccb      	ldrb	r3, [r1, r3]
 800832a:	fa22 f303 	lsr.w	r3, r2, r3
 800832e:	4a09      	ldr	r2, [pc, #36]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <HAL_RCC_ClockConfig+0x1c8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd fe92 	bl	8006060 <HAL_InitTick>

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40023c00 	.word	0x40023c00
 800834c:	40023800 	.word	0x40023800
 8008350:	08012d24 	.word	0x08012d24
 8008354:	20000230 	.word	0x20000230
 8008358:	20000234 	.word	0x20000234

0800835c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800835c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008360:	b094      	sub	sp, #80	; 0x50
 8008362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	647b      	str	r3, [r7, #68]	; 0x44
 8008368:	2300      	movs	r3, #0
 800836a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800836c:	2300      	movs	r3, #0
 800836e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008374:	4b79      	ldr	r3, [pc, #484]	; (800855c <HAL_RCC_GetSysClockFreq+0x200>)
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f003 030c 	and.w	r3, r3, #12
 800837c:	2b08      	cmp	r3, #8
 800837e:	d00d      	beq.n	800839c <HAL_RCC_GetSysClockFreq+0x40>
 8008380:	2b08      	cmp	r3, #8
 8008382:	f200 80e1 	bhi.w	8008548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x34>
 800838a:	2b04      	cmp	r3, #4
 800838c:	d003      	beq.n	8008396 <HAL_RCC_GetSysClockFreq+0x3a>
 800838e:	e0db      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008390:	4b73      	ldr	r3, [pc, #460]	; (8008560 <HAL_RCC_GetSysClockFreq+0x204>)
 8008392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008394:	e0db      	b.n	800854e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008396:	4b73      	ldr	r3, [pc, #460]	; (8008564 <HAL_RCC_GetSysClockFreq+0x208>)
 8008398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800839a:	e0d8      	b.n	800854e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800839c:	4b6f      	ldr	r3, [pc, #444]	; (800855c <HAL_RCC_GetSysClockFreq+0x200>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083a6:	4b6d      	ldr	r3, [pc, #436]	; (800855c <HAL_RCC_GetSysClockFreq+0x200>)
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d063      	beq.n	800847a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083b2:	4b6a      	ldr	r3, [pc, #424]	; (800855c <HAL_RCC_GetSysClockFreq+0x200>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	099b      	lsrs	r3, r3, #6
 80083b8:	2200      	movs	r2, #0
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80083bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c4:	633b      	str	r3, [r7, #48]	; 0x30
 80083c6:	2300      	movs	r3, #0
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083ce:	4622      	mov	r2, r4
 80083d0:	462b      	mov	r3, r5
 80083d2:	f04f 0000 	mov.w	r0, #0
 80083d6:	f04f 0100 	mov.w	r1, #0
 80083da:	0159      	lsls	r1, r3, #5
 80083dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083e0:	0150      	lsls	r0, r2, #5
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4621      	mov	r1, r4
 80083e8:	1a51      	subs	r1, r2, r1
 80083ea:	6139      	str	r1, [r7, #16]
 80083ec:	4629      	mov	r1, r5
 80083ee:	eb63 0301 	sbc.w	r3, r3, r1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008400:	4659      	mov	r1, fp
 8008402:	018b      	lsls	r3, r1, #6
 8008404:	4651      	mov	r1, sl
 8008406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800840a:	4651      	mov	r1, sl
 800840c:	018a      	lsls	r2, r1, #6
 800840e:	4651      	mov	r1, sl
 8008410:	ebb2 0801 	subs.w	r8, r2, r1
 8008414:	4659      	mov	r1, fp
 8008416:	eb63 0901 	sbc.w	r9, r3, r1
 800841a:	f04f 0200 	mov.w	r2, #0
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800842a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800842e:	4690      	mov	r8, r2
 8008430:	4699      	mov	r9, r3
 8008432:	4623      	mov	r3, r4
 8008434:	eb18 0303 	adds.w	r3, r8, r3
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	462b      	mov	r3, r5
 800843c:	eb49 0303 	adc.w	r3, r9, r3
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800844e:	4629      	mov	r1, r5
 8008450:	024b      	lsls	r3, r1, #9
 8008452:	4621      	mov	r1, r4
 8008454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008458:	4621      	mov	r1, r4
 800845a:	024a      	lsls	r2, r1, #9
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008462:	2200      	movs	r2, #0
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
 8008466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800846c:	f7f8 fc14 	bl	8000c98 <__aeabi_uldivmod>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4613      	mov	r3, r2
 8008476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008478:	e058      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800847a:	4b38      	ldr	r3, [pc, #224]	; (800855c <HAL_RCC_GetSysClockFreq+0x200>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	099b      	lsrs	r3, r3, #6
 8008480:	2200      	movs	r2, #0
 8008482:	4618      	mov	r0, r3
 8008484:	4611      	mov	r1, r2
 8008486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800848a:	623b      	str	r3, [r7, #32]
 800848c:	2300      	movs	r3, #0
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
 8008490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008494:	4642      	mov	r2, r8
 8008496:	464b      	mov	r3, r9
 8008498:	f04f 0000 	mov.w	r0, #0
 800849c:	f04f 0100 	mov.w	r1, #0
 80084a0:	0159      	lsls	r1, r3, #5
 80084a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084a6:	0150      	lsls	r0, r2, #5
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4641      	mov	r1, r8
 80084ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80084b2:	4649      	mov	r1, r9
 80084b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80084b8:	f04f 0200 	mov.w	r2, #0
 80084bc:	f04f 0300 	mov.w	r3, #0
 80084c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084cc:	ebb2 040a 	subs.w	r4, r2, sl
 80084d0:	eb63 050b 	sbc.w	r5, r3, fp
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	00eb      	lsls	r3, r5, #3
 80084de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084e2:	00e2      	lsls	r2, r4, #3
 80084e4:	4614      	mov	r4, r2
 80084e6:	461d      	mov	r5, r3
 80084e8:	4643      	mov	r3, r8
 80084ea:	18e3      	adds	r3, r4, r3
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	464b      	mov	r3, r9
 80084f0:	eb45 0303 	adc.w	r3, r5, r3
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008502:	4629      	mov	r1, r5
 8008504:	028b      	lsls	r3, r1, #10
 8008506:	4621      	mov	r1, r4
 8008508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800850c:	4621      	mov	r1, r4
 800850e:	028a      	lsls	r2, r1, #10
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008516:	2200      	movs	r2, #0
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	61fa      	str	r2, [r7, #28]
 800851c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008520:	f7f8 fbba 	bl	8000c98 <__aeabi_uldivmod>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4613      	mov	r3, r2
 800852a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <HAL_RCC_GetSysClockFreq+0x200>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	0c1b      	lsrs	r3, r3, #16
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	3301      	adds	r3, #1
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800853c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800853e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008540:	fbb2 f3f3 	udiv	r3, r2, r3
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008546:	e002      	b.n	800854e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <HAL_RCC_GetSysClockFreq+0x204>)
 800854a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800854c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800854e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008550:	4618      	mov	r0, r3
 8008552:	3750      	adds	r7, #80	; 0x50
 8008554:	46bd      	mov	sp, r7
 8008556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800855a:	bf00      	nop
 800855c:	40023800 	.word	0x40023800
 8008560:	00f42400 	.word	0x00f42400
 8008564:	007a1200 	.word	0x007a1200

08008568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800856c:	4b03      	ldr	r3, [pc, #12]	; (800857c <HAL_RCC_GetHCLKFreq+0x14>)
 800856e:	681b      	ldr	r3, [r3, #0]
}
 8008570:	4618      	mov	r0, r3
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000230 	.word	0x20000230

08008580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008584:	f7ff fff0 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 8008588:	4602      	mov	r2, r0
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	0a9b      	lsrs	r3, r3, #10
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	4903      	ldr	r1, [pc, #12]	; (80085a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008596:	5ccb      	ldrb	r3, [r1, r3]
 8008598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800859c:	4618      	mov	r0, r3
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40023800 	.word	0x40023800
 80085a4:	08012d34 	.word	0x08012d34

080085a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085ac:	f7ff ffdc 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 80085b0:	4602      	mov	r2, r0
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	0b5b      	lsrs	r3, r3, #13
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	4903      	ldr	r1, [pc, #12]	; (80085cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80085be:	5ccb      	ldrb	r3, [r1, r3]
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40023800 	.word	0x40023800
 80085cc:	08012d34 	.word	0x08012d34

080085d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e04c      	b.n	800867c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d111      	bne.n	8008612 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 ff50 	bl	800a49c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1f      	ldr	r2, [pc, #124]	; (8008684 <HAL_TIM_Base_Init+0xb4>)
 8008608:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3304      	adds	r3, #4
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f001 fc6d 	bl	8009f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	080052fd 	.word	0x080052fd

08008688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d001      	beq.n	80086a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e03c      	b.n	800871a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1e      	ldr	r2, [pc, #120]	; (8008728 <HAL_TIM_Base_Start+0xa0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d018      	beq.n	80086e4 <HAL_TIM_Base_Start+0x5c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ba:	d013      	beq.n	80086e4 <HAL_TIM_Base_Start+0x5c>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a1a      	ldr	r2, [pc, #104]	; (800872c <HAL_TIM_Base_Start+0xa4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00e      	beq.n	80086e4 <HAL_TIM_Base_Start+0x5c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a19      	ldr	r2, [pc, #100]	; (8008730 <HAL_TIM_Base_Start+0xa8>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d009      	beq.n	80086e4 <HAL_TIM_Base_Start+0x5c>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a17      	ldr	r2, [pc, #92]	; (8008734 <HAL_TIM_Base_Start+0xac>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d004      	beq.n	80086e4 <HAL_TIM_Base_Start+0x5c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a16      	ldr	r2, [pc, #88]	; (8008738 <HAL_TIM_Base_Start+0xb0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d111      	bne.n	8008708 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b06      	cmp	r3, #6
 80086f4:	d010      	beq.n	8008718 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0201 	orr.w	r2, r2, #1
 8008704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008706:	e007      	b.n	8008718 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	40010000 	.word	0x40010000
 800872c:	40000400 	.word	0x40000400
 8008730:	40000800 	.word	0x40000800
 8008734:	40000c00 	.word	0x40000c00
 8008738:	40014000 	.word	0x40014000

0800873c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	d001      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e044      	b.n	80087de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f042 0201 	orr.w	r2, r2, #1
 800876a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1e      	ldr	r2, [pc, #120]	; (80087ec <HAL_TIM_Base_Start_IT+0xb0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0x6c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877e:	d013      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0x6c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1a      	ldr	r2, [pc, #104]	; (80087f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0x6c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a19      	ldr	r2, [pc, #100]	; (80087f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0x6c>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0x6c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a16      	ldr	r2, [pc, #88]	; (80087fc <HAL_TIM_Base_Start_IT+0xc0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d111      	bne.n	80087cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b06      	cmp	r3, #6
 80087b8:	d010      	beq.n	80087dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0201 	orr.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ca:	e007      	b.n	80087dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0201 	orr.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40014000 	.word	0x40014000

08008800 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e04c      	b.n	80088ac <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d111      	bne.n	8008842 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fe38 	bl	800a49c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <HAL_TIM_OC_Init+0xb4>)
 8008838:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f001 fb55 	bl	8009f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	080088b9 	.word	0x080088b9

080088b8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e04c      	b.n	8008978 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d111      	bne.n	800890e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fdd2 	bl	800a49c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <HAL_TIM_PWM_Init+0xb4>)
 8008904:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	4619      	mov	r1, r3
 8008920:	4610      	mov	r0, r2
 8008922:	f001 faef 	bl	8009f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	08008985 	.word	0x08008985

08008984 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <HAL_TIM_PWM_Start+0x24>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	bf14      	ite	ne
 80089b4:	2301      	movne	r3, #1
 80089b6:	2300      	moveq	r3, #0
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	e022      	b.n	8008a02 <HAL_TIM_PWM_Start+0x6a>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d109      	bne.n	80089d6 <HAL_TIM_PWM_Start+0x3e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	bf14      	ite	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	2300      	moveq	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	e015      	b.n	8008a02 <HAL_TIM_PWM_Start+0x6a>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d109      	bne.n	80089f0 <HAL_TIM_PWM_Start+0x58>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	bf14      	ite	ne
 80089e8:	2301      	movne	r3, #1
 80089ea:	2300      	moveq	r3, #0
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	e008      	b.n	8008a02 <HAL_TIM_PWM_Start+0x6a>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	bf14      	ite	ne
 80089fc:	2301      	movne	r3, #1
 80089fe:	2300      	moveq	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e068      	b.n	8008adc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <HAL_TIM_PWM_Start+0x82>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a18:	e013      	b.n	8008a42 <HAL_TIM_PWM_Start+0xaa>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d104      	bne.n	8008a2a <HAL_TIM_PWM_Start+0x92>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a28:	e00b      	b.n	8008a42 <HAL_TIM_PWM_Start+0xaa>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d104      	bne.n	8008a3a <HAL_TIM_PWM_Start+0xa2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a38:	e003      	b.n	8008a42 <HAL_TIM_PWM_Start+0xaa>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2201      	movs	r2, #1
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fd00 	bl	800a450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a23      	ldr	r2, [pc, #140]	; (8008ae4 <HAL_TIM_PWM_Start+0x14c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d107      	bne.n	8008a6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ae4 <HAL_TIM_PWM_Start+0x14c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d018      	beq.n	8008aa6 <HAL_TIM_PWM_Start+0x10e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7c:	d013      	beq.n	8008aa6 <HAL_TIM_PWM_Start+0x10e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <HAL_TIM_PWM_Start+0x150>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00e      	beq.n	8008aa6 <HAL_TIM_PWM_Start+0x10e>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a17      	ldr	r2, [pc, #92]	; (8008aec <HAL_TIM_PWM_Start+0x154>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d009      	beq.n	8008aa6 <HAL_TIM_PWM_Start+0x10e>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a16      	ldr	r2, [pc, #88]	; (8008af0 <HAL_TIM_PWM_Start+0x158>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d004      	beq.n	8008aa6 <HAL_TIM_PWM_Start+0x10e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a14      	ldr	r2, [pc, #80]	; (8008af4 <HAL_TIM_PWM_Start+0x15c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d111      	bne.n	8008aca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d010      	beq.n	8008ada <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac8:	e007      	b.n	8008ada <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0201 	orr.w	r2, r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40014000 	.word	0x40014000

08008af8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2301      	moveq	r3, #1
 8008b1e:	2300      	movne	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	e022      	b.n	8008b6a <HAL_TIM_PWM_Start_DMA+0x72>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d109      	bne.n	8008b3e <HAL_TIM_PWM_Start_DMA+0x46>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	bf0c      	ite	eq
 8008b36:	2301      	moveq	r3, #1
 8008b38:	2300      	movne	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	e015      	b.n	8008b6a <HAL_TIM_PWM_Start_DMA+0x72>
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d109      	bne.n	8008b58 <HAL_TIM_PWM_Start_DMA+0x60>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	bf0c      	ite	eq
 8008b50:	2301      	moveq	r3, #1
 8008b52:	2300      	movne	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	e008      	b.n	8008b6a <HAL_TIM_PWM_Start_DMA+0x72>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e15d      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <HAL_TIM_PWM_Start_DMA+0x94>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	e022      	b.n	8008bd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d109      	bne.n	8008ba6 <HAL_TIM_PWM_Start_DMA+0xae>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	bf0c      	ite	eq
 8008b9e:	2301      	moveq	r3, #1
 8008ba0:	2300      	movne	r3, #0
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e015      	b.n	8008bd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d109      	bne.n	8008bc0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2301      	moveq	r3, #1
 8008bba:	2300      	movne	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	e008      	b.n	8008bd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	bf0c      	ite	eq
 8008bcc:	2301      	moveq	r3, #1
 8008bce:	2300      	movne	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d024      	beq.n	8008c20 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_TIM_PWM_Start_DMA+0xee>
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e123      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf4:	e016      	b.n	8008c24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d104      	bne.n	8008c06 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c04:	e00e      	b.n	8008c24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d104      	bne.n	8008c16 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c14:	e006      	b.n	8008c24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c1e:	e001      	b.n	8008c24 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e104      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b0c      	cmp	r3, #12
 8008c28:	f200 80ae 	bhi.w	8008d88 <HAL_TIM_PWM_Start_DMA+0x290>
 8008c2c:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c69 	.word	0x08008c69
 8008c38:	08008d89 	.word	0x08008d89
 8008c3c:	08008d89 	.word	0x08008d89
 8008c40:	08008d89 	.word	0x08008d89
 8008c44:	08008cb1 	.word	0x08008cb1
 8008c48:	08008d89 	.word	0x08008d89
 8008c4c:	08008d89 	.word	0x08008d89
 8008c50:	08008d89 	.word	0x08008d89
 8008c54:	08008cf9 	.word	0x08008cf9
 8008c58:	08008d89 	.word	0x08008d89
 8008c5c:	08008d89 	.word	0x08008d89
 8008c60:	08008d89 	.word	0x08008d89
 8008c64:	08008d41 	.word	0x08008d41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	4a72      	ldr	r2, [pc, #456]	; (8008e38 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008c6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	4a71      	ldr	r2, [pc, #452]	; (8008e3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	4a70      	ldr	r2, [pc, #448]	; (8008e40 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008c7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3334      	adds	r3, #52	; 0x34
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	887b      	ldrh	r3, [r7, #2]
 8008c90:	f7fd fe8c 	bl	80069ac <HAL_DMA_Start_IT>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e0c7      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cac:	60da      	str	r2, [r3, #12]
      break;
 8008cae:	e06e      	b.n	8008d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	4a60      	ldr	r2, [pc, #384]	; (8008e38 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008cb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	4a5f      	ldr	r2, [pc, #380]	; (8008e3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc4:	4a5e      	ldr	r2, [pc, #376]	; (8008e40 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008cc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3338      	adds	r3, #56	; 0x38
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	887b      	ldrh	r3, [r7, #2]
 8008cd8:	f7fd fe68 	bl	80069ac <HAL_DMA_Start_IT>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e0a3      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cf4:	60da      	str	r2, [r3, #12]
      break;
 8008cf6:	e04a      	b.n	8008d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a4e      	ldr	r2, [pc, #312]	; (8008e38 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008cfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4a4d      	ldr	r2, [pc, #308]	; (8008e3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a4c      	ldr	r2, [pc, #304]	; (8008e40 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	333c      	adds	r3, #60	; 0x3c
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	887b      	ldrh	r3, [r7, #2]
 8008d20:	f7fd fe44 	bl	80069ac <HAL_DMA_Start_IT>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e07f      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d3c:	60da      	str	r2, [r3, #12]
      break;
 8008d3e:	e026      	b.n	8008d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	4a3c      	ldr	r2, [pc, #240]	; (8008e38 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008d46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	4a3b      	ldr	r2, [pc, #236]	; (8008e3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d54:	4a3a      	ldr	r2, [pc, #232]	; (8008e40 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3340      	adds	r3, #64	; 0x40
 8008d64:	461a      	mov	r2, r3
 8008d66:	887b      	ldrh	r3, [r7, #2]
 8008d68:	f7fd fe20 	bl	80069ac <HAL_DMA_Start_IT>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e05b      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d84:	60da      	str	r2, [r3, #12]
      break;
 8008d86:	e002      	b.n	8008d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d14b      	bne.n	8008e2c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fb57 	bl	800a450 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a27      	ldr	r2, [pc, #156]	; (8008e44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d107      	bne.n	8008dbc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a20      	ldr	r2, [pc, #128]	; (8008e44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d018      	beq.n	8008df8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d013      	beq.n	8008df8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a1c      	ldr	r2, [pc, #112]	; (8008e48 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00e      	beq.n	8008df8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <HAL_TIM_PWM_Start_DMA+0x354>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d009      	beq.n	8008df8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d004      	beq.n	8008df8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a18      	ldr	r2, [pc, #96]	; (8008e54 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d111      	bne.n	8008e1c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 0307 	and.w	r3, r3, #7
 8008e02:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b06      	cmp	r3, #6
 8008e08:	d010      	beq.n	8008e2c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0201 	orr.w	r2, r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e1a:	e007      	b.n	8008e2c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0201 	orr.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	08009deb 	.word	0x08009deb
 8008e3c:	08009e97 	.word	0x08009e97
 8008e40:	08009d55 	.word	0x08009d55
 8008e44:	40010000 	.word	0x40010000
 8008e48:	40000400 	.word	0x40000400
 8008e4c:	40000800 	.word	0x40000800
 8008e50:	40000c00 	.word	0x40000c00
 8008e54:	40014000 	.word	0x40014000

08008e58 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b0c      	cmp	r3, #12
 8008e6a:	d855      	bhi.n	8008f18 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008e6c:	a201      	add	r2, pc, #4	; (adr r2, 8008e74 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008ea9 	.word	0x08008ea9
 8008e78:	08008f19 	.word	0x08008f19
 8008e7c:	08008f19 	.word	0x08008f19
 8008e80:	08008f19 	.word	0x08008f19
 8008e84:	08008ec5 	.word	0x08008ec5
 8008e88:	08008f19 	.word	0x08008f19
 8008e8c:	08008f19 	.word	0x08008f19
 8008e90:	08008f19 	.word	0x08008f19
 8008e94:	08008ee1 	.word	0x08008ee1
 8008e98:	08008f19 	.word	0x08008f19
 8008e9c:	08008f19 	.word	0x08008f19
 8008ea0:	08008f19 	.word	0x08008f19
 8008ea4:	08008efd 	.word	0x08008efd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008eb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fd fe3d 	bl	8006b3c <HAL_DMA_Abort_IT>
      break;
 8008ec2:	e02c      	b.n	8008f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ed2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fe2f 	bl	8006b3c <HAL_DMA_Abort_IT>
      break;
 8008ede:	e01e      	b.n	8008f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd fe21 	bl	8006b3c <HAL_DMA_Abort_IT>
      break;
 8008efa:	e010      	b.n	8008f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fd fe13 	bl	8006b3c <HAL_DMA_Abort_IT>
      break;
 8008f16:	e002      	b.n	8008f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d157      	bne.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fa8f 	bl	800a450 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a2a      	ldr	r2, [pc, #168]	; (8008fe0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d117      	bne.n	8008f6c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a1a      	ldr	r2, [r3, #32]
 8008f42:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10f      	bne.n	8008f6c <HAL_TIM_PWM_Stop_DMA+0x114>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	f240 4344 	movw	r3, #1092	; 0x444
 8008f56:	4013      	ands	r3, r2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d107      	bne.n	8008f6c <HAL_TIM_PWM_Stop_DMA+0x114>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6a1a      	ldr	r2, [r3, #32]
 8008f72:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10f      	bne.n	8008f9c <HAL_TIM_PWM_Stop_DMA+0x144>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6a1a      	ldr	r2, [r3, #32]
 8008f82:	f240 4344 	movw	r3, #1092	; 0x444
 8008f86:	4013      	ands	r3, r2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d107      	bne.n	8008f9c <HAL_TIM_PWM_Stop_DMA+0x144>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0201 	bic.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <HAL_TIM_PWM_Stop_DMA+0x154>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008faa:	e013      	b.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d104      	bne.n	8008fbc <HAL_TIM_PWM_Stop_DMA+0x164>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fba:	e00b      	b.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d104      	bne.n	8008fcc <HAL_TIM_PWM_Stop_DMA+0x174>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fca:	e003      	b.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40010000 	.word	0x40010000

08008fe4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e04c      	b.n	8009092 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d111      	bne.n	8009028 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 fa45 	bl	800a49c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009016:	2b00      	cmp	r3, #0
 8009018:	d102      	bne.n	8009020 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a1f      	ldr	r2, [pc, #124]	; (800909c <HAL_TIM_OnePulse_Init+0xb8>)
 800901e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f000 ff62 	bl	8009f04 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0208 	bic.w	r2, r2, #8
 800904e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6819      	ldr	r1, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	080090a1 	.word	0x080090a1

080090a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090dc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d108      	bne.n	80090f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d105      	bne.n	80090f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090ea:	7b7b      	ldrb	r3, [r7, #13]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d102      	bne.n	80090f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090f0:	7b3b      	ldrb	r3, [r7, #12]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d001      	beq.n	80090fa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e03b      	b.n	8009172 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2202      	movs	r2, #2
 80090fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0202 	orr.w	r2, r2, #2
 8009128:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f042 0204 	orr.w	r2, r2, #4
 8009138:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2201      	movs	r2, #1
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f001 f984 	bl	800a450 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2201      	movs	r2, #1
 800914e:	2104      	movs	r1, #4
 8009150:	4618      	mov	r0, r3
 8009152:	f001 f97d 	bl	800a450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d107      	bne.n	8009170 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800916e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40010000 	.word	0x40010000

08009180 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e0a2      	b.n	80092da <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d111      	bne.n	80091c4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 f977 	bl	800a49c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a4a      	ldr	r2, [pc, #296]	; (80092e4 <HAL_TIM_Encoder_Init+0x164>)
 80091ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091da:	f023 0307 	bic.w	r3, r3, #7
 80091de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4610      	mov	r0, r2
 80091ec:	f000 fe8a 	bl	8009f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	4313      	orrs	r3, r2
 8009210:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009218:	f023 0303 	bic.w	r3, r3, #3
 800921c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	4313      	orrs	r3, r2
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	4313      	orrs	r3, r2
 800922e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009236:	f023 030c 	bic.w	r3, r3, #12
 800923a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	4313      	orrs	r3, r2
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	011a      	lsls	r2, r3, #4
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	031b      	lsls	r3, r3, #12
 8009266:	4313      	orrs	r3, r2
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009274:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800927c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	4313      	orrs	r3, r2
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08005475 	.word	0x08005475

080092e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009300:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009308:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009310:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d110      	bne.n	800933a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d102      	bne.n	8009324 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800931e:	7b7b      	ldrb	r3, [r7, #13]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d001      	beq.n	8009328 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e069      	b.n	80093fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009338:	e031      	b.n	800939e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b04      	cmp	r3, #4
 800933e:	d110      	bne.n	8009362 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d102      	bne.n	800934c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009346:	7b3b      	ldrb	r3, [r7, #12]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d001      	beq.n	8009350 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e055      	b.n	80093fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009360:	e01d      	b.n	800939e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d108      	bne.n	800937a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d105      	bne.n	800937a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800936e:	7b7b      	ldrb	r3, [r7, #13]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d102      	bne.n	800937a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009374:	7b3b      	ldrb	r3, [r7, #12]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d001      	beq.n	800937e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e03e      	b.n	80093fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2202      	movs	r2, #2
 8009382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_TIM_Encoder_Start+0xc4>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d008      	beq.n	80093bc <HAL_TIM_Encoder_Start+0xd4>
 80093aa:	e00f      	b.n	80093cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2201      	movs	r2, #1
 80093b2:	2100      	movs	r1, #0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f84b 	bl	800a450 <TIM_CCxChannelCmd>
      break;
 80093ba:	e016      	b.n	80093ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2201      	movs	r2, #1
 80093c2:	2104      	movs	r1, #4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 f843 	bl	800a450 <TIM_CCxChannelCmd>
      break;
 80093ca:	e00e      	b.n	80093ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2201      	movs	r2, #1
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 f83b 	bl	800a450 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2201      	movs	r2, #1
 80093e0:	2104      	movs	r1, #4
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 f834 	bl	800a450 <TIM_CCxChannelCmd>
      break;
 80093e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0201 	orr.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b02      	cmp	r3, #2
 8009418:	d128      	bne.n	800946c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b02      	cmp	r3, #2
 8009426:	d121      	bne.n	800946c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0202 	mvn.w	r2, #2
 8009430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
 8009450:	e009      	b.n	8009466 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b04      	cmp	r3, #4
 8009478:	d128      	bne.n	80094cc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d121      	bne.n	80094cc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0204 	mvn.w	r2, #4
 8009490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2202      	movs	r2, #2
 8009496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
 80094b0:	e009      	b.n	80094c6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b08      	cmp	r3, #8
 80094d8:	d128      	bne.n	800952c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d121      	bne.n	800952c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f06f 0208 	mvn.w	r2, #8
 80094f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2204      	movs	r2, #4
 80094f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f003 0303 	and.w	r3, r3, #3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
 8009510:	e009      	b.n	8009526 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	2b10      	cmp	r3, #16
 8009538:	d128      	bne.n	800958c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b10      	cmp	r3, #16
 8009546:	d121      	bne.n	800958c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f06f 0210 	mvn.w	r2, #16
 8009550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2208      	movs	r2, #8
 8009556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	4798      	blx	r3
 8009570:	e009      	b.n	8009586 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b01      	cmp	r3, #1
 8009598:	d110      	bne.n	80095bc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d109      	bne.n	80095bc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f06f 0201 	mvn.w	r2, #1
 80095b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c6:	2b80      	cmp	r3, #128	; 0x80
 80095c8:	d110      	bne.n	80095ec <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d4:	2b80      	cmp	r3, #128	; 0x80
 80095d6:	d109      	bne.n	80095ec <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	d110      	bne.n	800961c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b40      	cmp	r3, #64	; 0x40
 8009606:	d109      	bne.n	800961c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b20      	cmp	r3, #32
 8009628:	d110      	bne.n	800964c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b20      	cmp	r3, #32
 8009636:	d109      	bne.n	800964c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0220 	mvn.w	r2, #32
 8009640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_TIM_OC_ConfigChannel+0x1e>
 800966e:	2302      	movs	r3, #2
 8009670:	e048      	b.n	8009704 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b0c      	cmp	r3, #12
 800967e:	d839      	bhi.n	80096f4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009680:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009686:	bf00      	nop
 8009688:	080096bd 	.word	0x080096bd
 800968c:	080096f5 	.word	0x080096f5
 8009690:	080096f5 	.word	0x080096f5
 8009694:	080096f5 	.word	0x080096f5
 8009698:	080096cb 	.word	0x080096cb
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	080096f5 	.word	0x080096f5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096d9 	.word	0x080096d9
 80096ac:	080096f5 	.word	0x080096f5
 80096b0:	080096f5 	.word	0x080096f5
 80096b4:	080096f5 	.word	0x080096f5
 80096b8:	080096e7 	.word	0x080096e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 fc9e 	bl	800a004 <TIM_OC1_SetConfig>
      break;
 80096c8:	e017      	b.n	80096fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fcfd 	bl	800a0d0 <TIM_OC2_SetConfig>
      break;
 80096d6:	e010      	b.n	80096fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fd62 	bl	800a1a8 <TIM_OC3_SetConfig>
      break;
 80096e4:	e009      	b.n	80096fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 fdc5 	bl	800a27c <TIM_OC4_SetConfig>
      break;
 80096f2:	e002      	b.n	80096fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
      break;
 80096f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009702:	7dfb      	ldrb	r3, [r7, #23]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009726:	2302      	movs	r3, #2
 8009728:	e0ae      	b.n	8009888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b0c      	cmp	r3, #12
 8009736:	f200 809f 	bhi.w	8009878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009775 	.word	0x08009775
 8009744:	08009879 	.word	0x08009879
 8009748:	08009879 	.word	0x08009879
 800974c:	08009879 	.word	0x08009879
 8009750:	080097b5 	.word	0x080097b5
 8009754:	08009879 	.word	0x08009879
 8009758:	08009879 	.word	0x08009879
 800975c:	08009879 	.word	0x08009879
 8009760:	080097f7 	.word	0x080097f7
 8009764:	08009879 	.word	0x08009879
 8009768:	08009879 	.word	0x08009879
 800976c:	08009879 	.word	0x08009879
 8009770:	08009837 	.word	0x08009837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fc42 	bl	800a004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0208 	orr.w	r2, r2, #8
 800978e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0204 	bic.w	r2, r2, #4
 800979e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6999      	ldr	r1, [r3, #24]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691a      	ldr	r2, [r3, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	619a      	str	r2, [r3, #24]
      break;
 80097b2:	e064      	b.n	800987e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fc88 	bl	800a0d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6999      	ldr	r1, [r3, #24]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	021a      	lsls	r2, r3, #8
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	619a      	str	r2, [r3, #24]
      break;
 80097f4:	e043      	b.n	800987e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fcd3 	bl	800a1a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69da      	ldr	r2, [r3, #28]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0208 	orr.w	r2, r2, #8
 8009810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69da      	ldr	r2, [r3, #28]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0204 	bic.w	r2, r2, #4
 8009820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69d9      	ldr	r1, [r3, #28]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	61da      	str	r2, [r3, #28]
      break;
 8009834:	e023      	b.n	800987e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fd1d 	bl	800a27c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69da      	ldr	r2, [r3, #28]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69da      	ldr	r2, [r3, #28]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69d9      	ldr	r1, [r3, #28]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	021a      	lsls	r2, r3, #8
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	61da      	str	r2, [r3, #28]
      break;
 8009876:	e002      	b.n	800987e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]
      break;
 800987c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_TIM_ConfigClockSource+0x1c>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e0b4      	b.n	8009a16 <HAL_TIM_ConfigClockSource+0x186>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80098ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098e4:	d03e      	beq.n	8009964 <HAL_TIM_ConfigClockSource+0xd4>
 80098e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ea:	f200 8087 	bhi.w	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 80098ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f2:	f000 8086 	beq.w	8009a02 <HAL_TIM_ConfigClockSource+0x172>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	d87f      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 80098fc:	2b70      	cmp	r3, #112	; 0x70
 80098fe:	d01a      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0xa6>
 8009900:	2b70      	cmp	r3, #112	; 0x70
 8009902:	d87b      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009904:	2b60      	cmp	r3, #96	; 0x60
 8009906:	d050      	beq.n	80099aa <HAL_TIM_ConfigClockSource+0x11a>
 8009908:	2b60      	cmp	r3, #96	; 0x60
 800990a:	d877      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800990c:	2b50      	cmp	r3, #80	; 0x50
 800990e:	d03c      	beq.n	800998a <HAL_TIM_ConfigClockSource+0xfa>
 8009910:	2b50      	cmp	r3, #80	; 0x50
 8009912:	d873      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	d058      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0x13a>
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	d86f      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800991c:	2b30      	cmp	r3, #48	; 0x30
 800991e:	d064      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009920:	2b30      	cmp	r3, #48	; 0x30
 8009922:	d86b      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b20      	cmp	r3, #32
 8009926:	d060      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009928:	2b20      	cmp	r3, #32
 800992a:	d867      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d05c      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009930:	2b10      	cmp	r3, #16
 8009932:	d05a      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009934:	e062      	b.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6818      	ldr	r0, [r3, #0]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	6899      	ldr	r1, [r3, #8]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f000 fd63 	bl	800a410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	609a      	str	r2, [r3, #8]
      break;
 8009962:	e04f      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6818      	ldr	r0, [r3, #0]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	6899      	ldr	r1, [r3, #8]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f000 fd4c 	bl	800a410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009986:	609a      	str	r2, [r3, #8]
      break;
 8009988:	e03c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	6859      	ldr	r1, [r3, #4]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	461a      	mov	r2, r3
 8009998:	f000 fcc0 	bl	800a31c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2150      	movs	r1, #80	; 0x50
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fd19 	bl	800a3da <TIM_ITRx_SetConfig>
      break;
 80099a8:	e02c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f000 fcdf 	bl	800a37a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2160      	movs	r1, #96	; 0x60
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fd09 	bl	800a3da <TIM_ITRx_SetConfig>
      break;
 80099c8:	e01c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6859      	ldr	r1, [r3, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 fca0 	bl	800a31c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2140      	movs	r1, #64	; 0x40
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fcf9 	bl	800a3da <TIM_ITRx_SetConfig>
      break;
 80099e8:	e00c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f000 fcf0 	bl	800a3da <TIM_ITRx_SetConfig>
      break;
 80099fa:	e003      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009a00:	e000      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e135      	b.n	8009d48 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <HAL_TIM_RegisterCallback+0x2a>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e12e      	b.n	8009d48 <HAL_TIM_RegisterCallback+0x288>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	f040 80ba 	bne.w	8009c74 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	2b1a      	cmp	r3, #26
 8009b04:	f200 80b3 	bhi.w	8009c6e <HAL_TIM_RegisterCallback+0x1ae>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <HAL_TIM_RegisterCallback+0x50>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b7d 	.word	0x08009b7d
 8009b14:	08009b85 	.word	0x08009b85
 8009b18:	08009b8d 	.word	0x08009b8d
 8009b1c:	08009b95 	.word	0x08009b95
 8009b20:	08009b9d 	.word	0x08009b9d
 8009b24:	08009ba5 	.word	0x08009ba5
 8009b28:	08009bad 	.word	0x08009bad
 8009b2c:	08009bb5 	.word	0x08009bb5
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009bc5 	.word	0x08009bc5
 8009b38:	08009bcd 	.word	0x08009bcd
 8009b3c:	08009bd5 	.word	0x08009bd5
 8009b40:	08009bdd 	.word	0x08009bdd
 8009b44:	08009be5 	.word	0x08009be5
 8009b48:	08009bed 	.word	0x08009bed
 8009b4c:	08009bf7 	.word	0x08009bf7
 8009b50:	08009c01 	.word	0x08009c01
 8009b54:	08009c0b 	.word	0x08009c0b
 8009b58:	08009c15 	.word	0x08009c15
 8009b5c:	08009c1f 	.word	0x08009c1f
 8009b60:	08009c29 	.word	0x08009c29
 8009b64:	08009c33 	.word	0x08009c33
 8009b68:	08009c3d 	.word	0x08009c3d
 8009b6c:	08009c47 	.word	0x08009c47
 8009b70:	08009c51 	.word	0x08009c51
 8009b74:	08009c5b 	.word	0x08009c5b
 8009b78:	08009c65 	.word	0x08009c65
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009b82:	e0dc      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009b8a:	e0d8      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009b92:	e0d4      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009b9a:	e0d0      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009ba2:	e0cc      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009baa:	e0c8      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009bb2:	e0c4      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009bba:	e0c0      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009bc2:	e0bc      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009bca:	e0b8      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009bd2:	e0b4      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009bda:	e0b0      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009be2:	e0ac      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009bea:	e0a8      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009bf4:	e0a3      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009bfe:	e09e      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009c08:	e099      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009c12:	e094      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009c1c:	e08f      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009c26:	e08a      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009c30:	e085      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009c3a:	e080      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009c44:	e07b      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009c4e:	e076      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009c58:	e071      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009c62:	e06c      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009c6c:	e067      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	75fb      	strb	r3, [r7, #23]
        break;
 8009c72:	e064      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d15c      	bne.n	8009d3a <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009c80:	7afb      	ldrb	r3, [r7, #11]
 8009c82:	2b0d      	cmp	r3, #13
 8009c84:	d856      	bhi.n	8009d34 <HAL_TIM_RegisterCallback+0x274>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <HAL_TIM_RegisterCallback+0x1cc>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cc5 	.word	0x08009cc5
 8009c90:	08009ccd 	.word	0x08009ccd
 8009c94:	08009cd5 	.word	0x08009cd5
 8009c98:	08009cdd 	.word	0x08009cdd
 8009c9c:	08009ce5 	.word	0x08009ce5
 8009ca0:	08009ced 	.word	0x08009ced
 8009ca4:	08009cf5 	.word	0x08009cf5
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	08009d05 	.word	0x08009d05
 8009cb0:	08009d0d 	.word	0x08009d0d
 8009cb4:	08009d15 	.word	0x08009d15
 8009cb8:	08009d1d 	.word	0x08009d1d
 8009cbc:	08009d25 	.word	0x08009d25
 8009cc0:	08009d2d 	.word	0x08009d2d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009cca:	e038      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009cd2:	e034      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009cda:	e030      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009ce2:	e02c      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009cea:	e028      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009cf2:	e024      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009cfa:	e020      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009d02:	e01c      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009d0a:	e018      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009d12:	e014      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009d1a:	e010      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009d22:	e00c      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009d2a:	e008      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009d32:	e004      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	75fb      	strb	r3, [r7, #23]
        break;
 8009d38:	e001      	b.n	8009d3e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d107      	bne.n	8009d7c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d7a:	e02a      	b.n	8009dd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d107      	bne.n	8009d96 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d94:	e01d      	b.n	8009dd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d107      	bne.n	8009db0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2204      	movs	r2, #4
 8009da4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dae:	e010      	b.n	8009dd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d107      	bne.n	8009dca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dc8:	e003      	b.n	8009dd2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	771a      	strb	r2, [r3, #28]
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d10b      	bne.n	8009e1a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d136      	bne.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e18:	e031      	b.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d10b      	bne.n	8009e3c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2202      	movs	r2, #2
 8009e28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d125      	bne.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e3a:	e020      	b.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d10b      	bne.n	8009e5e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2204      	movs	r2, #4
 8009e4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d114      	bne.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e5c:	e00f      	b.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d10a      	bne.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d103      	bne.n	8009e7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	771a      	strb	r2, [r3, #28]
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d103      	bne.n	8009eb6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	771a      	strb	r2, [r3, #28]
 8009eb4:	e019      	b.n	8009eea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d103      	bne.n	8009ec8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	771a      	strb	r2, [r3, #28]
 8009ec6:	e010      	b.n	8009eea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d103      	bne.n	8009eda <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2204      	movs	r2, #4
 8009ed6:	771a      	strb	r2, [r3, #28]
 8009ed8:	e007      	b.n	8009eea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d102      	bne.n	8009eea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2208      	movs	r2, #8
 8009ee8:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	771a      	strb	r2, [r3, #28]
}
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a34      	ldr	r2, [pc, #208]	; (8009fe8 <TIM_Base_SetConfig+0xe4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d00f      	beq.n	8009f3c <TIM_Base_SetConfig+0x38>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f22:	d00b      	beq.n	8009f3c <TIM_Base_SetConfig+0x38>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a31      	ldr	r2, [pc, #196]	; (8009fec <TIM_Base_SetConfig+0xe8>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d007      	beq.n	8009f3c <TIM_Base_SetConfig+0x38>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a30      	ldr	r2, [pc, #192]	; (8009ff0 <TIM_Base_SetConfig+0xec>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_Base_SetConfig+0x38>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a2f      	ldr	r2, [pc, #188]	; (8009ff4 <TIM_Base_SetConfig+0xf0>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d108      	bne.n	8009f4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a25      	ldr	r2, [pc, #148]	; (8009fe8 <TIM_Base_SetConfig+0xe4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d01b      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f5c:	d017      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a22      	ldr	r2, [pc, #136]	; (8009fec <TIM_Base_SetConfig+0xe8>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d013      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <TIM_Base_SetConfig+0xec>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d00f      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a20      	ldr	r2, [pc, #128]	; (8009ff4 <TIM_Base_SetConfig+0xf0>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d00b      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a1f      	ldr	r2, [pc, #124]	; (8009ff8 <TIM_Base_SetConfig+0xf4>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d007      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <TIM_Base_SetConfig+0xf8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d003      	beq.n	8009f8e <TIM_Base_SetConfig+0x8a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a1d      	ldr	r2, [pc, #116]	; (800a000 <TIM_Base_SetConfig+0xfc>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d108      	bne.n	8009fa0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	689a      	ldr	r2, [r3, #8]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <TIM_Base_SetConfig+0xe4>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d103      	bne.n	8009fd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	615a      	str	r2, [r3, #20]
}
 8009fda:	bf00      	nop
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40000400 	.word	0x40000400
 8009ff0:	40000800 	.word	0x40000800
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40014000 	.word	0x40014000
 8009ffc:	40014400 	.word	0x40014400
 800a000:	40014800 	.word	0x40014800

0800a004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	f023 0201 	bic.w	r2, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f023 0302 	bic.w	r3, r3, #2
 800a04c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	4313      	orrs	r3, r2
 800a056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <TIM_OC1_SetConfig+0xc8>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d10c      	bne.n	800a07a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f023 0308 	bic.w	r3, r3, #8
 800a066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f023 0304 	bic.w	r3, r3, #4
 800a078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a13      	ldr	r2, [pc, #76]	; (800a0cc <TIM_OC1_SetConfig+0xc8>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d111      	bne.n	800a0a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	621a      	str	r2, [r3, #32]
}
 800a0c0:	bf00      	nop
 800a0c2:	371c      	adds	r7, #28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	40010000 	.word	0x40010000

0800a0d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	f023 0210 	bic.w	r2, r3, #16
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f023 0320 	bic.w	r3, r3, #32
 800a11a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	011b      	lsls	r3, r3, #4
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a1e      	ldr	r2, [pc, #120]	; (800a1a4 <TIM_OC2_SetConfig+0xd4>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10d      	bne.n	800a14c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a14a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a15      	ldr	r2, [pc, #84]	; (800a1a4 <TIM_OC2_SetConfig+0xd4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d113      	bne.n	800a17c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a15a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	621a      	str	r2, [r3, #32]
}
 800a196:	bf00      	nop
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40010000 	.word	0x40010000

0800a1a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 0303 	bic.w	r3, r3, #3
 800a1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <TIM_OC3_SetConfig+0xd0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d10d      	bne.n	800a222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a20c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	4313      	orrs	r3, r2
 800a218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a14      	ldr	r2, [pc, #80]	; (800a278 <TIM_OC3_SetConfig+0xd0>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d113      	bne.n	800a252 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	4313      	orrs	r3, r2
 800a244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	621a      	str	r2, [r3, #32]
}
 800a26c:	bf00      	nop
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	40010000 	.word	0x40010000

0800a27c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	031b      	lsls	r3, r3, #12
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a10      	ldr	r2, [pc, #64]	; (800a318 <TIM_OC4_SetConfig+0x9c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d109      	bne.n	800a2f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	019b      	lsls	r3, r3, #6
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	621a      	str	r2, [r3, #32]
}
 800a30a:	bf00      	nop
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	40010000 	.word	0x40010000

0800a31c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	f023 0201 	bic.w	r2, r3, #1
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	011b      	lsls	r3, r3, #4
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	4313      	orrs	r3, r2
 800a350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f023 030a 	bic.w	r3, r3, #10
 800a358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4313      	orrs	r3, r2
 800a360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	621a      	str	r2, [r3, #32]
}
 800a36e:	bf00      	nop
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b087      	sub	sp, #28
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	f023 0210 	bic.w	r2, r3, #16
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	031b      	lsls	r3, r3, #12
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	621a      	str	r2, [r3, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b085      	sub	sp, #20
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f043 0307 	orr.w	r3, r3, #7
 800a3fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	609a      	str	r2, [r3, #8]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a42a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	021a      	lsls	r2, r3, #8
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	431a      	orrs	r2, r3
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4313      	orrs	r3, r2
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	609a      	str	r2, [r3, #8]
}
 800a444:	bf00      	nop
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f003 031f 	and.w	r3, r3, #31
 800a462:	2201      	movs	r2, #1
 800a464:	fa02 f303 	lsl.w	r3, r2, r3
 800a468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1a      	ldr	r2, [r3, #32]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	43db      	mvns	r3, r3
 800a472:	401a      	ands	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6a1a      	ldr	r2, [r3, #32]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f003 031f 	and.w	r3, r3, #31
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	fa01 f303 	lsl.w	r3, r1, r3
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	621a      	str	r2, [r3, #32]
}
 800a48e:	bf00      	nop
 800a490:	371c      	adds	r7, #28
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
	...

0800a49c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a1c      	ldr	r2, [pc, #112]	; (800a518 <TIM_ResetCallback+0x7c>)
 800a4a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a1b      	ldr	r2, [pc, #108]	; (800a51c <TIM_ResetCallback+0x80>)
 800a4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a1a      	ldr	r2, [pc, #104]	; (800a520 <TIM_ResetCallback+0x84>)
 800a4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a19      	ldr	r2, [pc, #100]	; (800a524 <TIM_ResetCallback+0x88>)
 800a4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a18      	ldr	r2, [pc, #96]	; (800a528 <TIM_ResetCallback+0x8c>)
 800a4c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a17      	ldr	r2, [pc, #92]	; (800a52c <TIM_ResetCallback+0x90>)
 800a4d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a16      	ldr	r2, [pc, #88]	; (800a530 <TIM_ResetCallback+0x94>)
 800a4d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a15      	ldr	r2, [pc, #84]	; (800a534 <TIM_ResetCallback+0x98>)
 800a4e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a14      	ldr	r2, [pc, #80]	; (800a538 <TIM_ResetCallback+0x9c>)
 800a4e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a13      	ldr	r2, [pc, #76]	; (800a53c <TIM_ResetCallback+0xa0>)
 800a4f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a12      	ldr	r2, [pc, #72]	; (800a540 <TIM_ResetCallback+0xa4>)
 800a4f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a11      	ldr	r2, [pc, #68]	; (800a544 <TIM_ResetCallback+0xa8>)
 800a500:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a10      	ldr	r2, [pc, #64]	; (800a548 <TIM_ResetCallback+0xac>)
 800a508:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	08004b79 	.word	0x08004b79
 800a51c:	08009a1f 	.word	0x08009a1f
 800a520:	08009a83 	.word	0x08009a83
 800a524:	08009a97 	.word	0x08009a97
 800a528:	08009a47 	.word	0x08009a47
 800a52c:	08009a5b 	.word	0x08009a5b
 800a530:	08009a33 	.word	0x08009a33
 800a534:	0800332d 	.word	0x0800332d
 800a538:	08009a6f 	.word	0x08009a6f
 800a53c:	08009aab 	.word	0x08009aab
 800a540:	0800a6cd 	.word	0x0800a6cd
 800a544:	0800a6e1 	.word	0x0800a6e1
 800a548:	0800a6f5 	.word	0x0800a6f5

0800a54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a560:	2302      	movs	r3, #2
 800a562:	e050      	b.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a1c      	ldr	r2, [pc, #112]	; (800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d018      	beq.n	800a5da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b0:	d013      	beq.n	800a5da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a18      	ldr	r2, [pc, #96]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d00e      	beq.n	800a5da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a16      	ldr	r2, [pc, #88]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d009      	beq.n	800a5da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a15      	ldr	r2, [pc, #84]	; (800a620 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d004      	beq.n	800a5da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a13      	ldr	r2, [pc, #76]	; (800a624 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d10c      	bne.n	800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	40010000 	.word	0x40010000
 800a618:	40000400 	.word	0x40000400
 800a61c:	40000800 	.word	0x40000800
 800a620:	40000c00 	.word	0x40000c00
 800a624:	40014000 	.word	0x40014000

0800a628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d101      	bne.n	800a644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a640:	2302      	movs	r3, #2
 800a642:	e03d      	b.n	800a6c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	4313      	orrs	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4313      	orrs	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	4313      	orrs	r3, r2
 800a690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e04a      	b.n	800a7b0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d111      	bne.n	800a74a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fd84 	bl	800b23c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d102      	bne.n	800a742 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a1e      	ldr	r2, [pc, #120]	; (800a7b8 <HAL_UART_Init+0xb0>)
 800a740:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2224      	movs	r2, #36	; 0x24
 800a74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a760:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f84e 	bl	800b804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	691a      	ldr	r2, [r3, #16]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a776:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695a      	ldr	r2, [r3, #20]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a786:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a796:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	08005d6d 	.word	0x08005d6d

0800a7bc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e052      	b.n	800a874 <HAL_HalfDuplex_Init+0xb8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d111      	bne.n	800a7fe <HAL_HalfDuplex_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fd2a 	bl	800b23c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <HAL_HalfDuplex_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a22      	ldr	r2, [pc, #136]	; (800a87c <HAL_HalfDuplex_Init+0xc0>)
 800a7f4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2224      	movs	r2, #36	; 0x24
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a814:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fff4 	bl	800b804 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a82a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	695a      	ldr	r2, [r3, #20]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a83a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	695a      	ldr	r2, [r3, #20]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f042 0208 	orr.w	r2, r2, #8
 800a84a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a85a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	08005d6d 	.word	0x08005d6d

0800a880 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	460b      	mov	r3, r1
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d107      	bne.n	800a8a8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	f043 0220 	orr.w	r2, r3, #32
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e08c      	b.n	800a9c2 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d101      	bne.n	800a8b6 <HAL_UART_RegisterCallback+0x36>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e085      	b.n	800a9c2 <HAL_UART_RegisterCallback+0x142>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d151      	bne.n	800a96e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a8ca:	7afb      	ldrb	r3, [r7, #11]
 800a8cc:	2b0c      	cmp	r3, #12
 800a8ce:	d845      	bhi.n	800a95c <HAL_UART_RegisterCallback+0xdc>
 800a8d0:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <HAL_UART_RegisterCallback+0x58>)
 800a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d6:	bf00      	nop
 800a8d8:	0800a90d 	.word	0x0800a90d
 800a8dc:	0800a915 	.word	0x0800a915
 800a8e0:	0800a91d 	.word	0x0800a91d
 800a8e4:	0800a925 	.word	0x0800a925
 800a8e8:	0800a92d 	.word	0x0800a92d
 800a8ec:	0800a935 	.word	0x0800a935
 800a8f0:	0800a93d 	.word	0x0800a93d
 800a8f4:	0800a945 	.word	0x0800a945
 800a8f8:	0800a95d 	.word	0x0800a95d
 800a8fc:	0800a95d 	.word	0x0800a95d
 800a900:	0800a95d 	.word	0x0800a95d
 800a904:	0800a94d 	.word	0x0800a94d
 800a908:	0800a955 	.word	0x0800a955
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a912:	e051      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a91a:	e04d      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a922:	e049      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a92a:	e045      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a932:	e041      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a93a:	e03d      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a942:	e039      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a94a:	e035      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a952:	e031      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a95a:	e02d      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a960:	f043 0220 	orr.w	r2, r3, #32
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	75fb      	strb	r3, [r7, #23]
        break;
 800a96c:	e024      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d116      	bne.n	800a9a8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	2b0b      	cmp	r3, #11
 800a97e:	d002      	beq.n	800a986 <HAL_UART_RegisterCallback+0x106>
 800a980:	2b0c      	cmp	r3, #12
 800a982:	d004      	beq.n	800a98e <HAL_UART_RegisterCallback+0x10e>
 800a984:	e007      	b.n	800a996 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a98c:	e014      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a994:	e010      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	f043 0220 	orr.w	r2, r3, #32
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	75fb      	strb	r3, [r7, #23]
        break;
 800a9a6:	e007      	b.n	800a9b8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ac:	f043 0220 	orr.w	r2, r3, #32
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop

0800a9d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	d11d      	bne.n	800aa26 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <HAL_UART_Receive_IT+0x26>
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e016      	b.n	800aa28 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d101      	bne.n	800aa08 <HAL_UART_Receive_IT+0x38>
 800aa04:	2302      	movs	r3, #2
 800aa06:	e00f      	b.n	800aa28 <HAL_UART_Receive_IT+0x58>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa16:	88fb      	ldrh	r3, [r7, #6]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	68b9      	ldr	r1, [r7, #8]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fced 	bl	800b3fc <UART_Start_Receive_IT>
 800aa22:	4603      	mov	r3, r0
 800aa24:	e000      	b.n	800aa28 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa26:	2302      	movs	r3, #2
  }
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08c      	sub	sp, #48	; 0x30
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	d165      	bne.n	800ab16 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <HAL_UART_Transmit_DMA+0x26>
 800aa50:	88fb      	ldrh	r3, [r7, #6]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e05e      	b.n	800ab18 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_UART_Transmit_DMA+0x38>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e057      	b.n	800ab18 <HAL_UART_Transmit_DMA+0xe8>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	88fa      	ldrh	r2, [r7, #6]
 800aa7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	88fa      	ldrh	r2, [r7, #6]
 800aa80:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2221      	movs	r2, #33	; 0x21
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa94:	4a22      	ldr	r2, [pc, #136]	; (800ab20 <HAL_UART_Transmit_DMA+0xf0>)
 800aa96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9c:	4a21      	ldr	r2, [pc, #132]	; (800ab24 <HAL_UART_Transmit_DMA+0xf4>)
 800aa9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa4:	4a20      	ldr	r2, [pc, #128]	; (800ab28 <HAL_UART_Transmit_DMA+0xf8>)
 800aaa6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaac:	2200      	movs	r2, #0
 800aaae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aab0:	f107 0308 	add.w	r3, r7, #8
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	6819      	ldr	r1, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3304      	adds	r3, #4
 800aac4:	461a      	mov	r2, r3
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	f7fb ff70 	bl	80069ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aad4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3314      	adds	r3, #20
 800aae4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	617b      	str	r3, [r7, #20]
   return(result);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3314      	adds	r3, #20
 800aafc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafe:	627a      	str	r2, [r7, #36]	; 0x24
 800ab00:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab02:	6a39      	ldr	r1, [r7, #32]
 800ab04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab06:	e841 2300 	strex	r3, r2, [r1]
 800ab0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1e5      	bne.n	800aade <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e000      	b.n	800ab18 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ab16:	2302      	movs	r3, #2
  }
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3730      	adds	r7, #48	; 0x30
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	0800b2ad 	.word	0x0800b2ad
 800ab24:	0800b349 	.word	0x0800b349
 800ab28:	0800b367 	.word	0x0800b367

0800ab2c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b09a      	sub	sp, #104	; 0x68
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	330c      	adds	r3, #12
 800ab3a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab4a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	330c      	adds	r3, #12
 800ab52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab54:	657a      	str	r2, [r7, #84]	; 0x54
 800ab56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e5      	bne.n	800ab34 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3314      	adds	r3, #20
 800ab6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab72:	e853 3f00 	ldrex	r3, [r3]
 800ab76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	f023 0301 	bic.w	r3, r3, #1
 800ab7e:	663b      	str	r3, [r7, #96]	; 0x60
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3314      	adds	r3, #20
 800ab86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab88:	643a      	str	r2, [r7, #64]	; 0x40
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e5      	bne.n	800ab68 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d119      	bne.n	800abd8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	330c      	adds	r3, #12
 800abaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	f023 0310 	bic.w	r3, r3, #16
 800abba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	330c      	adds	r3, #12
 800abc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e5      	bne.n	800aba4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe2:	2b40      	cmp	r3, #64	; 0x40
 800abe4:	d136      	bne.n	800ac54 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3314      	adds	r3, #20
 800abec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfc:	65bb      	str	r3, [r7, #88]	; 0x58
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3314      	adds	r3, #20
 800ac04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac06:	61ba      	str	r2, [r7, #24]
 800ac08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0a:	6979      	ldr	r1, [r7, #20]
 800ac0c:	69ba      	ldr	r2, [r7, #24]
 800ac0e:	e841 2300 	strex	r3, r2, [r1]
 800ac12:	613b      	str	r3, [r7, #16]
   return(result);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1e5      	bne.n	800abe6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d018      	beq.n	800ac54 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	2200      	movs	r2, #0
 800ac28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fb ff14 	bl	8006a5c <HAL_DMA_Abort>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fc f928 	bl	8006e94 <HAL_DMA_GetError>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b20      	cmp	r3, #32
 800ac48:	d104      	bne.n	800ac54 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e00a      	b.n	800ac6a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3768      	adds	r7, #104	; 0x68
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b0ba      	sub	sp, #232	; 0xe8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800acb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10f      	bne.n	800acda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <HAL_UART_IRQHandler+0x66>
 800acc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fcd9 	bl	800b68a <UART_Receive_IT>
      return;
 800acd8:	e25b      	b.n	800b192 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80e1 	beq.w	800aea6 <HAL_UART_IRQHandler+0x232>
 800ace4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80d4 	beq.w	800aea6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800acfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00b      	beq.n	800ad22 <HAL_UART_IRQHandler+0xae>
 800ad0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d005      	beq.n	800ad22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	f043 0201 	orr.w	r2, r3, #1
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad26:	f003 0304 	and.w	r3, r3, #4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <HAL_UART_IRQHandler+0xd2>
 800ad2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	f043 0202 	orr.w	r2, r3, #2
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4a:	f003 0302 	and.w	r3, r3, #2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <HAL_UART_IRQHandler+0xf6>
 800ad52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	f043 0204 	orr.w	r2, r3, #4
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6e:	f003 0308 	and.w	r3, r3, #8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d011      	beq.n	800ad9a <HAL_UART_IRQHandler+0x126>
 800ad76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d005      	beq.n	800ad9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad92:	f043 0208 	orr.w	r2, r3, #8
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 81f2 	beq.w	800b188 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ada4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	d008      	beq.n	800adc2 <HAL_UART_IRQHandler+0x14e>
 800adb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fc64 	bl	800b68a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adcc:	2b40      	cmp	r3, #64	; 0x40
 800adce:	bf0c      	ite	eq
 800add0:	2301      	moveq	r3, #1
 800add2:	2300      	movne	r3, #0
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	f003 0308 	and.w	r3, r3, #8
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <HAL_UART_IRQHandler+0x17a>
 800ade6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adea:	2b00      	cmp	r3, #0
 800adec:	d051      	beq.n	800ae92 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fb6a 	bl	800b4c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d142      	bne.n	800ae88 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3314      	adds	r3, #20
 800ae08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3314      	adds	r3, #20
 800ae2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1d9      	bne.n	800ae02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d013      	beq.n	800ae7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	4a7f      	ldr	r2, [pc, #508]	; (800b058 <HAL_UART_IRQHandler+0x3e4>)
 800ae5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fb fe6a 	bl	8006b3c <HAL_DMA_Abort_IT>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d019      	beq.n	800aea2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7c:	e011      	b.n	800aea2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae86:	e00c      	b.n	800aea2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae90:	e007      	b.n	800aea2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aea0:	e172      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea2:	bf00      	nop
    return;
 800aea4:	e170      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	f040 814c 	bne.w	800b148 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aeb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb4:	f003 0310 	and.w	r3, r3, #16
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 8145 	beq.w	800b148 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aec2:	f003 0310 	and.w	r3, r3, #16
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 813e 	beq.w	800b148 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aecc:	2300      	movs	r3, #0
 800aece:	60bb      	str	r3, [r7, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	60bb      	str	r3, [r7, #8]
 800aee0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeec:	2b40      	cmp	r3, #64	; 0x40
 800aeee:	f040 80b5 	bne.w	800b05c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aefe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 8142 	beq.w	800b18c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af10:	429a      	cmp	r2, r3
 800af12:	f080 813b 	bcs.w	800b18c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af28:	f000 8088 	beq.w	800b03c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	330c      	adds	r3, #12
 800af32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af3a:	e853 3f00 	ldrex	r3, [r3]
 800af3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	330c      	adds	r3, #12
 800af54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af68:	e841 2300 	strex	r3, r2, [r1]
 800af6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1d9      	bne.n	800af2c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3314      	adds	r3, #20
 800af7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af82:	e853 3f00 	ldrex	r3, [r3]
 800af86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af8a:	f023 0301 	bic.w	r3, r3, #1
 800af8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3314      	adds	r3, #20
 800af98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afa0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afa8:	e841 2300 	strex	r3, r2, [r1]
 800afac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e1      	bne.n	800af78 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3314      	adds	r3, #20
 800afba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3314      	adds	r3, #20
 800afd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afe0:	e841 2300 	strex	r3, r2, [r1]
 800afe4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e3      	bne.n	800afb4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2220      	movs	r2, #32
 800aff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	330c      	adds	r3, #12
 800b000:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b004:	e853 3f00 	ldrex	r3, [r3]
 800b008:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b00a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b00c:	f023 0310 	bic.w	r3, r3, #16
 800b010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	330c      	adds	r3, #12
 800b01a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b01e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b020:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e3      	bne.n	800affa <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	4618      	mov	r0, r3
 800b038:	f7fb fd10 	bl	8006a5c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b048:	b292      	uxth	r2, r2
 800b04a:	1a8a      	subs	r2, r1, r2
 800b04c:	b292      	uxth	r2, r2
 800b04e:	4611      	mov	r1, r2
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b054:	e09a      	b.n	800b18c <HAL_UART_IRQHandler+0x518>
 800b056:	bf00      	nop
 800b058:	0800b58f 	.word	0x0800b58f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b064:	b29b      	uxth	r3, r3
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 808c 	beq.w	800b190 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8087 	beq.w	800b190 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	330c      	adds	r3, #12
 800b088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e3      	bne.n	800b082 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3314      	adds	r3, #20
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3314      	adds	r3, #20
 800b0da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0de:	633a      	str	r2, [r7, #48]	; 0x30
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e3      	bne.n	800b0ba <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f023 0310 	bic.w	r3, r3, #16
 800b116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	330c      	adds	r3, #12
 800b120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b124:	61fa      	str	r2, [r7, #28]
 800b126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	69b9      	ldr	r1, [r7, #24]
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	617b      	str	r3, [r7, #20]
   return(result);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e3      	bne.n	800b100 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b13c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b140:	4611      	mov	r1, r2
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b146:	e023      	b.n	800b190 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b150:	2b00      	cmp	r3, #0
 800b152:	d009      	beq.n	800b168 <HAL_UART_IRQHandler+0x4f4>
 800b154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa29 	bl	800b5b8 <UART_Transmit_IT>
    return;
 800b166:	e014      	b.n	800b192 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00e      	beq.n	800b192 <HAL_UART_IRQHandler+0x51e>
 800b174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d008      	beq.n	800b192 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa69 	bl	800b658 <UART_EndTransmit_IT>
    return;
 800b186:	e004      	b.n	800b192 <HAL_UART_IRQHandler+0x51e>
    return;
 800b188:	bf00      	nop
 800b18a:	e002      	b.n	800b192 <HAL_UART_IRQHandler+0x51e>
      return;
 800b18c:	bf00      	nop
 800b18e:	e000      	b.n	800b192 <HAL_UART_IRQHandler+0x51e>
      return;
 800b190:	bf00      	nop
  }
}
 800b192:	37e8      	adds	r7, #232	; 0xe8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a10      	ldr	r2, [pc, #64]	; (800b288 <UART_InitCallbacksToDefault+0x4c>)
 800b248:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a0f      	ldr	r2, [pc, #60]	; (800b28c <UART_InitCallbacksToDefault+0x50>)
 800b24e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a0f      	ldr	r2, [pc, #60]	; (800b290 <UART_InitCallbacksToDefault+0x54>)
 800b254:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a0e      	ldr	r2, [pc, #56]	; (800b294 <UART_InitCallbacksToDefault+0x58>)
 800b25a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a0e      	ldr	r2, [pc, #56]	; (800b298 <UART_InitCallbacksToDefault+0x5c>)
 800b260:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a0d      	ldr	r2, [pc, #52]	; (800b29c <UART_InitCallbacksToDefault+0x60>)
 800b266:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a0d      	ldr	r2, [pc, #52]	; (800b2a0 <UART_InitCallbacksToDefault+0x64>)
 800b26c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a0c      	ldr	r2, [pc, #48]	; (800b2a4 <UART_InitCallbacksToDefault+0x68>)
 800b272:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a0c      	ldr	r2, [pc, #48]	; (800b2a8 <UART_InitCallbacksToDefault+0x6c>)
 800b278:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	0800b1ad 	.word	0x0800b1ad
 800b28c:	0800b199 	.word	0x0800b199
 800b290:	0800b1c1 	.word	0x0800b1c1
 800b294:	08004b99 	.word	0x08004b99
 800b298:	0800b1d5 	.word	0x0800b1d5
 800b29c:	0800b1e9 	.word	0x0800b1e9
 800b2a0:	0800b1fd 	.word	0x0800b1fd
 800b2a4:	0800b211 	.word	0x0800b211
 800b2a8:	0800b225 	.word	0x0800b225

0800b2ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b090      	sub	sp, #64	; 0x40
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d137      	bne.n	800b338 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3314      	adds	r3, #20
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ee:	633a      	str	r2, [r7, #48]	; 0x30
 800b2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e5      	bne.n	800b2ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	330c      	adds	r3, #12
 800b308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	e853 3f00 	ldrex	r3, [r3]
 800b310:	60fb      	str	r3, [r7, #12]
   return(result);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
 800b31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	330c      	adds	r3, #12
 800b320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b322:	61fa      	str	r2, [r7, #28]
 800b324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	69b9      	ldr	r1, [r7, #24]
 800b328:	69fa      	ldr	r2, [r7, #28]
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	617b      	str	r3, [r7, #20]
   return(result);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e5      	bne.n	800b302 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b336:	e003      	b.n	800b340 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b33c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b33e:	4798      	blx	r3
}
 800b340:	bf00      	nop
 800b342:	3740      	adds	r7, #64	; 0x40
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b36e:	2300      	movs	r3, #0
 800b370:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	bf0c      	ite	eq
 800b386:	2301      	moveq	r3, #1
 800b388:	2300      	movne	r3, #0
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b21      	cmp	r3, #33	; 0x21
 800b398:	d108      	bne.n	800b3ac <UART_DMAError+0x46>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d005      	beq.n	800b3ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b3a6:	68b8      	ldr	r0, [r7, #8]
 800b3a8:	f000 f866 	bl	800b478 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	bf0c      	ite	eq
 800b3ba:	2301      	moveq	r3, #1
 800b3bc:	2300      	movne	r3, #0
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b22      	cmp	r3, #34	; 0x22
 800b3cc:	d108      	bne.n	800b3e0 <UART_DMAError+0x7a>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b3da:	68b8      	ldr	r0, [r7, #8]
 800b3dc:	f000 f874 	bl	800b4c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	f043 0210 	orr.w	r2, r3, #16
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f0:	68b8      	ldr	r0, [r7, #8]
 800b3f2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3f4:	bf00      	nop
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4613      	mov	r3, r2
 800b408:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	88fa      	ldrh	r2, [r7, #6]
 800b414:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	88fa      	ldrh	r2, [r7, #6]
 800b41a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2222      	movs	r2, #34	; 0x22
 800b426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d007      	beq.n	800b44a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68da      	ldr	r2, [r3, #12]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b448:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	695a      	ldr	r2, [r3, #20]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f042 0201 	orr.w	r2, r2, #1
 800b458:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f042 0220 	orr.w	r2, r2, #32
 800b468:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b089      	sub	sp, #36	; 0x24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	330c      	adds	r3, #12
 800b486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b496:	61fb      	str	r3, [r7, #28]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	330c      	adds	r3, #12
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	61ba      	str	r2, [r7, #24]
 800b4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6979      	ldr	r1, [r7, #20]
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e5      	bne.n	800b480 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b4bc:	bf00      	nop
 800b4be:	3724      	adds	r7, #36	; 0x24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b095      	sub	sp, #84	; 0x54
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	330c      	adds	r3, #12
 800b4d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	330c      	adds	r3, #12
 800b4ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4f0:	643a      	str	r2, [r7, #64]	; 0x40
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4f8:	e841 2300 	strex	r3, r2, [r1]
 800b4fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1e5      	bne.n	800b4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3314      	adds	r3, #20
 800b50a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	61fb      	str	r3, [r7, #28]
   return(result);
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	f023 0301 	bic.w	r3, r3, #1
 800b51a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3314      	adds	r3, #20
 800b522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b524:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e5      	bne.n	800b504 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d119      	bne.n	800b574 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	330c      	adds	r3, #12
 800b546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	e853 3f00 	ldrex	r3, [r3]
 800b54e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f023 0310 	bic.w	r3, r3, #16
 800b556:	647b      	str	r3, [r7, #68]	; 0x44
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	330c      	adds	r3, #12
 800b55e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b560:	61ba      	str	r2, [r7, #24]
 800b562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	6979      	ldr	r1, [r7, #20]
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	e841 2300 	strex	r3, r2, [r1]
 800b56c:	613b      	str	r3, [r7, #16]
   return(result);
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e5      	bne.n	800b540 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2220      	movs	r2, #32
 800b578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b582:	bf00      	nop
 800b584:	3754      	adds	r7, #84	; 0x54
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b21      	cmp	r3, #33	; 0x21
 800b5ca:	d13e      	bne.n	800b64a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d4:	d114      	bne.n	800b600 <UART_Transmit_IT+0x48>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d110      	bne.n	800b600 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a1b      	ldr	r3, [r3, #32]
 800b5f8:	1c9a      	adds	r2, r3, #2
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	621a      	str	r2, [r3, #32]
 800b5fe:	e008      	b.n	800b612 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	1c59      	adds	r1, r3, #1
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	6211      	str	r1, [r2, #32]
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b616:	b29b      	uxth	r3, r3
 800b618:	3b01      	subs	r3, #1
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	4619      	mov	r1, r3
 800b620:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10f      	bne.n	800b646 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b634:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68da      	ldr	r2, [r3, #12]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b644:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	e000      	b.n	800b64c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b64a:	2302      	movs	r3, #2
  }
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b66e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2220      	movs	r2, #32
 800b674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b08c      	sub	sp, #48	; 0x30
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b22      	cmp	r3, #34	; 0x22
 800b69c:	f040 80ad 	bne.w	800b7fa <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a8:	d117      	bne.n	800b6da <UART_Receive_IT+0x50>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d113      	bne.n	800b6da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	1c9a      	adds	r2, r3, #2
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	629a      	str	r2, [r3, #40]	; 0x28
 800b6d8:	e026      	b.n	800b728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ec:	d007      	beq.n	800b6fe <UART_Receive_IT+0x74>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <UART_Receive_IT+0x82>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	b2da      	uxtb	r2, r3
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	701a      	strb	r2, [r3, #0]
 800b70a:	e008      	b.n	800b71e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	3b01      	subs	r3, #1
 800b730:	b29b      	uxth	r3, r3
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4619      	mov	r1, r3
 800b736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d15c      	bne.n	800b7f6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 0220 	bic.w	r2, r2, #32
 800b74a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b75a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	695a      	ldr	r2, [r3, #20]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0201 	bic.w	r2, r2, #1
 800b76a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2220      	movs	r2, #32
 800b770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d136      	bne.n	800b7ea <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	330c      	adds	r3, #12
 800b788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	613b      	str	r3, [r7, #16]
   return(result);
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f023 0310 	bic.w	r3, r3, #16
 800b798:	627b      	str	r3, [r7, #36]	; 0x24
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	330c      	adds	r3, #12
 800b7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a2:	623a      	str	r2, [r7, #32]
 800b7a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	69f9      	ldr	r1, [r7, #28]
 800b7a8:	6a3a      	ldr	r2, [r7, #32]
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e5      	bne.n	800b782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0310 	and.w	r3, r3, #16
 800b7c0:	2b10      	cmp	r3, #16
 800b7c2:	d10a      	bne.n	800b7da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	4798      	blx	r3
 800b7e8:	e003      	b.n	800b7f2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e002      	b.n	800b7fc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e000      	b.n	800b7fc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b7fa:	2302      	movs	r3, #2
  }
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3730      	adds	r7, #48	; 0x30
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b808:	b0c0      	sub	sp, #256	; 0x100
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b820:	68d9      	ldr	r1, [r3, #12]
 800b822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	ea40 0301 	orr.w	r3, r0, r1
 800b82c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b82e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b832:	689a      	ldr	r2, [r3, #8]
 800b834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	431a      	orrs	r2, r3
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	431a      	orrs	r2, r3
 800b844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b85c:	f021 010c 	bic.w	r1, r1, #12
 800b860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b86a:	430b      	orrs	r3, r1
 800b86c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
 800b876:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b87e:	6999      	ldr	r1, [r3, #24]
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	ea40 0301 	orr.w	r3, r0, r1
 800b88a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4b8f      	ldr	r3, [pc, #572]	; (800bad0 <UART_SetConfig+0x2cc>)
 800b894:	429a      	cmp	r2, r3
 800b896:	d005      	beq.n	800b8a4 <UART_SetConfig+0xa0>
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b8d      	ldr	r3, [pc, #564]	; (800bad4 <UART_SetConfig+0x2d0>)
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d104      	bne.n	800b8ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8a4:	f7fc fe80 	bl	80085a8 <HAL_RCC_GetPCLK2Freq>
 800b8a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b8ac:	e003      	b.n	800b8b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8ae:	f7fc fe67 	bl	8008580 <HAL_RCC_GetPCLK1Freq>
 800b8b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ba:	69db      	ldr	r3, [r3, #28]
 800b8bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c0:	f040 810c 	bne.w	800badc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	462b      	mov	r3, r5
 800b8da:	1891      	adds	r1, r2, r2
 800b8dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8de:	415b      	adcs	r3, r3
 800b8e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	eb12 0801 	adds.w	r8, r2, r1
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	eb43 0901 	adc.w	r9, r3, r1
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b906:	4690      	mov	r8, r2
 800b908:	4699      	mov	r9, r3
 800b90a:	4623      	mov	r3, r4
 800b90c:	eb18 0303 	adds.w	r3, r8, r3
 800b910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b914:	462b      	mov	r3, r5
 800b916:	eb49 0303 	adc.w	r3, r9, r3
 800b91a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b91e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b92a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b92e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b932:	460b      	mov	r3, r1
 800b934:	18db      	adds	r3, r3, r3
 800b936:	653b      	str	r3, [r7, #80]	; 0x50
 800b938:	4613      	mov	r3, r2
 800b93a:	eb42 0303 	adc.w	r3, r2, r3
 800b93e:	657b      	str	r3, [r7, #84]	; 0x54
 800b940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b948:	f7f5 f9a6 	bl	8000c98 <__aeabi_uldivmod>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	4b61      	ldr	r3, [pc, #388]	; (800bad8 <UART_SetConfig+0x2d4>)
 800b952:	fba3 2302 	umull	r2, r3, r3, r2
 800b956:	095b      	lsrs	r3, r3, #5
 800b958:	011c      	lsls	r4, r3, #4
 800b95a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b964:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	1891      	adds	r1, r2, r2
 800b972:	64b9      	str	r1, [r7, #72]	; 0x48
 800b974:	415b      	adcs	r3, r3
 800b976:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b97c:	4641      	mov	r1, r8
 800b97e:	eb12 0a01 	adds.w	sl, r2, r1
 800b982:	4649      	mov	r1, r9
 800b984:	eb43 0b01 	adc.w	fp, r3, r1
 800b988:	f04f 0200 	mov.w	r2, #0
 800b98c:	f04f 0300 	mov.w	r3, #0
 800b990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b99c:	4692      	mov	sl, r2
 800b99e:	469b      	mov	fp, r3
 800b9a0:	4643      	mov	r3, r8
 800b9a2:	eb1a 0303 	adds.w	r3, sl, r3
 800b9a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9aa:	464b      	mov	r3, r9
 800b9ac:	eb4b 0303 	adc.w	r3, fp, r3
 800b9b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b9c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	18db      	adds	r3, r3, r3
 800b9cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	eb42 0303 	adc.w	r3, r2, r3
 800b9d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9de:	f7f5 f95b 	bl	8000c98 <__aeabi_uldivmod>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	4b3b      	ldr	r3, [pc, #236]	; (800bad8 <UART_SetConfig+0x2d4>)
 800b9ea:	fba3 2301 	umull	r2, r3, r3, r1
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	2264      	movs	r2, #100	; 0x64
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	1acb      	subs	r3, r1, r3
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b9fe:	4b36      	ldr	r3, [pc, #216]	; (800bad8 <UART_SetConfig+0x2d4>)
 800ba00:	fba3 2302 	umull	r2, r3, r3, r2
 800ba04:	095b      	lsrs	r3, r3, #5
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba0c:	441c      	add	r4, r3
 800ba0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba20:	4642      	mov	r2, r8
 800ba22:	464b      	mov	r3, r9
 800ba24:	1891      	adds	r1, r2, r2
 800ba26:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba28:	415b      	adcs	r3, r3
 800ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba30:	4641      	mov	r1, r8
 800ba32:	1851      	adds	r1, r2, r1
 800ba34:	6339      	str	r1, [r7, #48]	; 0x30
 800ba36:	4649      	mov	r1, r9
 800ba38:	414b      	adcs	r3, r1
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3c:	f04f 0200 	mov.w	r2, #0
 800ba40:	f04f 0300 	mov.w	r3, #0
 800ba44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba48:	4659      	mov	r1, fp
 800ba4a:	00cb      	lsls	r3, r1, #3
 800ba4c:	4651      	mov	r1, sl
 800ba4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba52:	4651      	mov	r1, sl
 800ba54:	00ca      	lsls	r2, r1, #3
 800ba56:	4610      	mov	r0, r2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4642      	mov	r2, r8
 800ba5e:	189b      	adds	r3, r3, r2
 800ba60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba64:	464b      	mov	r3, r9
 800ba66:	460a      	mov	r2, r1
 800ba68:	eb42 0303 	adc.w	r3, r2, r3
 800ba6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba84:	460b      	mov	r3, r1
 800ba86:	18db      	adds	r3, r3, r3
 800ba88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	eb42 0303 	adc.w	r3, r2, r3
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba9a:	f7f5 f8fd 	bl	8000c98 <__aeabi_uldivmod>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <UART_SetConfig+0x2d4>)
 800baa4:	fba3 1302 	umull	r1, r3, r3, r2
 800baa8:	095b      	lsrs	r3, r3, #5
 800baaa:	2164      	movs	r1, #100	; 0x64
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	3332      	adds	r3, #50	; 0x32
 800bab6:	4a08      	ldr	r2, [pc, #32]	; (800bad8 <UART_SetConfig+0x2d4>)
 800bab8:	fba2 2303 	umull	r2, r3, r2, r3
 800babc:	095b      	lsrs	r3, r3, #5
 800babe:	f003 0207 	and.w	r2, r3, #7
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4422      	add	r2, r4
 800baca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bacc:	e105      	b.n	800bcda <UART_SetConfig+0x4d6>
 800bace:	bf00      	nop
 800bad0:	40011000 	.word	0x40011000
 800bad4:	40011400 	.word	0x40011400
 800bad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800badc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bae6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800baea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800baee:	4642      	mov	r2, r8
 800baf0:	464b      	mov	r3, r9
 800baf2:	1891      	adds	r1, r2, r2
 800baf4:	6239      	str	r1, [r7, #32]
 800baf6:	415b      	adcs	r3, r3
 800baf8:	627b      	str	r3, [r7, #36]	; 0x24
 800bafa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bafe:	4641      	mov	r1, r8
 800bb00:	1854      	adds	r4, r2, r1
 800bb02:	4649      	mov	r1, r9
 800bb04:	eb43 0501 	adc.w	r5, r3, r1
 800bb08:	f04f 0200 	mov.w	r2, #0
 800bb0c:	f04f 0300 	mov.w	r3, #0
 800bb10:	00eb      	lsls	r3, r5, #3
 800bb12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb16:	00e2      	lsls	r2, r4, #3
 800bb18:	4614      	mov	r4, r2
 800bb1a:	461d      	mov	r5, r3
 800bb1c:	4643      	mov	r3, r8
 800bb1e:	18e3      	adds	r3, r4, r3
 800bb20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb24:	464b      	mov	r3, r9
 800bb26:	eb45 0303 	adc.w	r3, r5, r3
 800bb2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb3e:	f04f 0200 	mov.w	r2, #0
 800bb42:	f04f 0300 	mov.w	r3, #0
 800bb46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	008b      	lsls	r3, r1, #2
 800bb4e:	4621      	mov	r1, r4
 800bb50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb54:	4621      	mov	r1, r4
 800bb56:	008a      	lsls	r2, r1, #2
 800bb58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb5c:	f7f5 f89c 	bl	8000c98 <__aeabi_uldivmod>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4b60      	ldr	r3, [pc, #384]	; (800bce8 <UART_SetConfig+0x4e4>)
 800bb66:	fba3 2302 	umull	r2, r3, r3, r2
 800bb6a:	095b      	lsrs	r3, r3, #5
 800bb6c:	011c      	lsls	r4, r3, #4
 800bb6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb72:	2200      	movs	r2, #0
 800bb74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb80:	4642      	mov	r2, r8
 800bb82:	464b      	mov	r3, r9
 800bb84:	1891      	adds	r1, r2, r2
 800bb86:	61b9      	str	r1, [r7, #24]
 800bb88:	415b      	adcs	r3, r3
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb90:	4641      	mov	r1, r8
 800bb92:	1851      	adds	r1, r2, r1
 800bb94:	6139      	str	r1, [r7, #16]
 800bb96:	4649      	mov	r1, r9
 800bb98:	414b      	adcs	r3, r1
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	f04f 0200 	mov.w	r2, #0
 800bba0:	f04f 0300 	mov.w	r3, #0
 800bba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bba8:	4659      	mov	r1, fp
 800bbaa:	00cb      	lsls	r3, r1, #3
 800bbac:	4651      	mov	r1, sl
 800bbae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbb2:	4651      	mov	r1, sl
 800bbb4:	00ca      	lsls	r2, r1, #3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	4642      	mov	r2, r8
 800bbbe:	189b      	adds	r3, r3, r2
 800bbc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbc4:	464b      	mov	r3, r9
 800bbc6:	460a      	mov	r2, r1
 800bbc8:	eb42 0303 	adc.w	r3, r2, r3
 800bbcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbda:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbdc:	f04f 0200 	mov.w	r2, #0
 800bbe0:	f04f 0300 	mov.w	r3, #0
 800bbe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bbe8:	4649      	mov	r1, r9
 800bbea:	008b      	lsls	r3, r1, #2
 800bbec:	4641      	mov	r1, r8
 800bbee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbf2:	4641      	mov	r1, r8
 800bbf4:	008a      	lsls	r2, r1, #2
 800bbf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bbfa:	f7f5 f84d 	bl	8000c98 <__aeabi_uldivmod>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4b39      	ldr	r3, [pc, #228]	; (800bce8 <UART_SetConfig+0x4e4>)
 800bc04:	fba3 1302 	umull	r1, r3, r3, r2
 800bc08:	095b      	lsrs	r3, r3, #5
 800bc0a:	2164      	movs	r1, #100	; 0x64
 800bc0c:	fb01 f303 	mul.w	r3, r1, r3
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	011b      	lsls	r3, r3, #4
 800bc14:	3332      	adds	r3, #50	; 0x32
 800bc16:	4a34      	ldr	r2, [pc, #208]	; (800bce8 <UART_SetConfig+0x4e4>)
 800bc18:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1c:	095b      	lsrs	r3, r3, #5
 800bc1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc22:	441c      	add	r4, r3
 800bc24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc28:	2200      	movs	r2, #0
 800bc2a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc2c:	677a      	str	r2, [r7, #116]	; 0x74
 800bc2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc32:	4642      	mov	r2, r8
 800bc34:	464b      	mov	r3, r9
 800bc36:	1891      	adds	r1, r2, r2
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	415b      	adcs	r3, r3
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc42:	4641      	mov	r1, r8
 800bc44:	1851      	adds	r1, r2, r1
 800bc46:	6039      	str	r1, [r7, #0]
 800bc48:	4649      	mov	r1, r9
 800bc4a:	414b      	adcs	r3, r1
 800bc4c:	607b      	str	r3, [r7, #4]
 800bc4e:	f04f 0200 	mov.w	r2, #0
 800bc52:	f04f 0300 	mov.w	r3, #0
 800bc56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc5a:	4659      	mov	r1, fp
 800bc5c:	00cb      	lsls	r3, r1, #3
 800bc5e:	4651      	mov	r1, sl
 800bc60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc64:	4651      	mov	r1, sl
 800bc66:	00ca      	lsls	r2, r1, #3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	4642      	mov	r2, r8
 800bc70:	189b      	adds	r3, r3, r2
 800bc72:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc74:	464b      	mov	r3, r9
 800bc76:	460a      	mov	r2, r1
 800bc78:	eb42 0303 	adc.w	r3, r2, r3
 800bc7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	663b      	str	r3, [r7, #96]	; 0x60
 800bc88:	667a      	str	r2, [r7, #100]	; 0x64
 800bc8a:	f04f 0200 	mov.w	r2, #0
 800bc8e:	f04f 0300 	mov.w	r3, #0
 800bc92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc96:	4649      	mov	r1, r9
 800bc98:	008b      	lsls	r3, r1, #2
 800bc9a:	4641      	mov	r1, r8
 800bc9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bca0:	4641      	mov	r1, r8
 800bca2:	008a      	lsls	r2, r1, #2
 800bca4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bca8:	f7f4 fff6 	bl	8000c98 <__aeabi_uldivmod>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4b0d      	ldr	r3, [pc, #52]	; (800bce8 <UART_SetConfig+0x4e4>)
 800bcb2:	fba3 1302 	umull	r1, r3, r3, r2
 800bcb6:	095b      	lsrs	r3, r3, #5
 800bcb8:	2164      	movs	r1, #100	; 0x64
 800bcba:	fb01 f303 	mul.w	r3, r1, r3
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	011b      	lsls	r3, r3, #4
 800bcc2:	3332      	adds	r3, #50	; 0x32
 800bcc4:	4a08      	ldr	r2, [pc, #32]	; (800bce8 <UART_SetConfig+0x4e4>)
 800bcc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcca:	095b      	lsrs	r3, r3, #5
 800bccc:	f003 020f 	and.w	r2, r3, #15
 800bcd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4422      	add	r2, r4
 800bcd8:	609a      	str	r2, [r3, #8]
}
 800bcda:	bf00      	nop
 800bcdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bce0:	46bd      	mov	sp, r7
 800bce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bce6:	bf00      	nop
 800bce8:	51eb851f 	.word	0x51eb851f

0800bcec <__errno>:
 800bcec:	4b01      	ldr	r3, [pc, #4]	; (800bcf4 <__errno+0x8>)
 800bcee:	6818      	ldr	r0, [r3, #0]
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	2000023c 	.word	0x2000023c

0800bcf8 <__libc_init_array>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	4d0d      	ldr	r5, [pc, #52]	; (800bd30 <__libc_init_array+0x38>)
 800bcfc:	4c0d      	ldr	r4, [pc, #52]	; (800bd34 <__libc_init_array+0x3c>)
 800bcfe:	1b64      	subs	r4, r4, r5
 800bd00:	10a4      	asrs	r4, r4, #2
 800bd02:	2600      	movs	r6, #0
 800bd04:	42a6      	cmp	r6, r4
 800bd06:	d109      	bne.n	800bd1c <__libc_init_array+0x24>
 800bd08:	4d0b      	ldr	r5, [pc, #44]	; (800bd38 <__libc_init_array+0x40>)
 800bd0a:	4c0c      	ldr	r4, [pc, #48]	; (800bd3c <__libc_init_array+0x44>)
 800bd0c:	f006 ffee 	bl	8012cec <_init>
 800bd10:	1b64      	subs	r4, r4, r5
 800bd12:	10a4      	asrs	r4, r4, #2
 800bd14:	2600      	movs	r6, #0
 800bd16:	42a6      	cmp	r6, r4
 800bd18:	d105      	bne.n	800bd26 <__libc_init_array+0x2e>
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd20:	4798      	blx	r3
 800bd22:	3601      	adds	r6, #1
 800bd24:	e7ee      	b.n	800bd04 <__libc_init_array+0xc>
 800bd26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd2a:	4798      	blx	r3
 800bd2c:	3601      	adds	r6, #1
 800bd2e:	e7f2      	b.n	800bd16 <__libc_init_array+0x1e>
 800bd30:	080137e8 	.word	0x080137e8
 800bd34:	080137e8 	.word	0x080137e8
 800bd38:	080137e8 	.word	0x080137e8
 800bd3c:	080137ec 	.word	0x080137ec

0800bd40 <memcpy>:
 800bd40:	440a      	add	r2, r1
 800bd42:	4291      	cmp	r1, r2
 800bd44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd48:	d100      	bne.n	800bd4c <memcpy+0xc>
 800bd4a:	4770      	bx	lr
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd56:	4291      	cmp	r1, r2
 800bd58:	d1f9      	bne.n	800bd4e <memcpy+0xe>
 800bd5a:	bd10      	pop	{r4, pc}

0800bd5c <memset>:
 800bd5c:	4402      	add	r2, r0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d100      	bne.n	800bd66 <memset+0xa>
 800bd64:	4770      	bx	lr
 800bd66:	f803 1b01 	strb.w	r1, [r3], #1
 800bd6a:	e7f9      	b.n	800bd60 <memset+0x4>

0800bd6c <__cvt>:
 800bd6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd70:	ec55 4b10 	vmov	r4, r5, d0
 800bd74:	2d00      	cmp	r5, #0
 800bd76:	460e      	mov	r6, r1
 800bd78:	4619      	mov	r1, r3
 800bd7a:	462b      	mov	r3, r5
 800bd7c:	bfbb      	ittet	lt
 800bd7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd82:	461d      	movlt	r5, r3
 800bd84:	2300      	movge	r3, #0
 800bd86:	232d      	movlt	r3, #45	; 0x2d
 800bd88:	700b      	strb	r3, [r1, #0]
 800bd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd90:	4691      	mov	r9, r2
 800bd92:	f023 0820 	bic.w	r8, r3, #32
 800bd96:	bfbc      	itt	lt
 800bd98:	4622      	movlt	r2, r4
 800bd9a:	4614      	movlt	r4, r2
 800bd9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bda0:	d005      	beq.n	800bdae <__cvt+0x42>
 800bda2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bda6:	d100      	bne.n	800bdaa <__cvt+0x3e>
 800bda8:	3601      	adds	r6, #1
 800bdaa:	2102      	movs	r1, #2
 800bdac:	e000      	b.n	800bdb0 <__cvt+0x44>
 800bdae:	2103      	movs	r1, #3
 800bdb0:	ab03      	add	r3, sp, #12
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	ab02      	add	r3, sp, #8
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	ec45 4b10 	vmov	d0, r4, r5
 800bdbc:	4653      	mov	r3, sl
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	f001 fdae 	bl	800d920 <_dtoa_r>
 800bdc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bdc8:	4607      	mov	r7, r0
 800bdca:	d102      	bne.n	800bdd2 <__cvt+0x66>
 800bdcc:	f019 0f01 	tst.w	r9, #1
 800bdd0:	d022      	beq.n	800be18 <__cvt+0xac>
 800bdd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdd6:	eb07 0906 	add.w	r9, r7, r6
 800bdda:	d110      	bne.n	800bdfe <__cvt+0x92>
 800bddc:	783b      	ldrb	r3, [r7, #0]
 800bdde:	2b30      	cmp	r3, #48	; 0x30
 800bde0:	d10a      	bne.n	800bdf8 <__cvt+0x8c>
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7f4 fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdee:	b918      	cbnz	r0, 800bdf8 <__cvt+0x8c>
 800bdf0:	f1c6 0601 	rsb	r6, r6, #1
 800bdf4:	f8ca 6000 	str.w	r6, [sl]
 800bdf8:	f8da 3000 	ldr.w	r3, [sl]
 800bdfc:	4499      	add	r9, r3
 800bdfe:	2200      	movs	r2, #0
 800be00:	2300      	movs	r3, #0
 800be02:	4620      	mov	r0, r4
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 800be0a:	b108      	cbz	r0, 800be10 <__cvt+0xa4>
 800be0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800be10:	2230      	movs	r2, #48	; 0x30
 800be12:	9b03      	ldr	r3, [sp, #12]
 800be14:	454b      	cmp	r3, r9
 800be16:	d307      	bcc.n	800be28 <__cvt+0xbc>
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be1c:	1bdb      	subs	r3, r3, r7
 800be1e:	4638      	mov	r0, r7
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	b004      	add	sp, #16
 800be24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be28:	1c59      	adds	r1, r3, #1
 800be2a:	9103      	str	r1, [sp, #12]
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e7f0      	b.n	800be12 <__cvt+0xa6>

0800be30 <__exponent>:
 800be30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be32:	4603      	mov	r3, r0
 800be34:	2900      	cmp	r1, #0
 800be36:	bfb8      	it	lt
 800be38:	4249      	neglt	r1, r1
 800be3a:	f803 2b02 	strb.w	r2, [r3], #2
 800be3e:	bfb4      	ite	lt
 800be40:	222d      	movlt	r2, #45	; 0x2d
 800be42:	222b      	movge	r2, #43	; 0x2b
 800be44:	2909      	cmp	r1, #9
 800be46:	7042      	strb	r2, [r0, #1]
 800be48:	dd2a      	ble.n	800bea0 <__exponent+0x70>
 800be4a:	f10d 0407 	add.w	r4, sp, #7
 800be4e:	46a4      	mov	ip, r4
 800be50:	270a      	movs	r7, #10
 800be52:	46a6      	mov	lr, r4
 800be54:	460a      	mov	r2, r1
 800be56:	fb91 f6f7 	sdiv	r6, r1, r7
 800be5a:	fb07 1516 	mls	r5, r7, r6, r1
 800be5e:	3530      	adds	r5, #48	; 0x30
 800be60:	2a63      	cmp	r2, #99	; 0x63
 800be62:	f104 34ff 	add.w	r4, r4, #4294967295
 800be66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be6a:	4631      	mov	r1, r6
 800be6c:	dcf1      	bgt.n	800be52 <__exponent+0x22>
 800be6e:	3130      	adds	r1, #48	; 0x30
 800be70:	f1ae 0502 	sub.w	r5, lr, #2
 800be74:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be78:	1c44      	adds	r4, r0, #1
 800be7a:	4629      	mov	r1, r5
 800be7c:	4561      	cmp	r1, ip
 800be7e:	d30a      	bcc.n	800be96 <__exponent+0x66>
 800be80:	f10d 0209 	add.w	r2, sp, #9
 800be84:	eba2 020e 	sub.w	r2, r2, lr
 800be88:	4565      	cmp	r5, ip
 800be8a:	bf88      	it	hi
 800be8c:	2200      	movhi	r2, #0
 800be8e:	4413      	add	r3, r2
 800be90:	1a18      	subs	r0, r3, r0
 800be92:	b003      	add	sp, #12
 800be94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be9e:	e7ed      	b.n	800be7c <__exponent+0x4c>
 800bea0:	2330      	movs	r3, #48	; 0x30
 800bea2:	3130      	adds	r1, #48	; 0x30
 800bea4:	7083      	strb	r3, [r0, #2]
 800bea6:	70c1      	strb	r1, [r0, #3]
 800bea8:	1d03      	adds	r3, r0, #4
 800beaa:	e7f1      	b.n	800be90 <__exponent+0x60>

0800beac <_printf_float>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	ed2d 8b02 	vpush	{d8}
 800beb4:	b08d      	sub	sp, #52	; 0x34
 800beb6:	460c      	mov	r4, r1
 800beb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bebc:	4616      	mov	r6, r2
 800bebe:	461f      	mov	r7, r3
 800bec0:	4605      	mov	r5, r0
 800bec2:	f002 fe8b 	bl	800ebdc <_localeconv_r>
 800bec6:	f8d0 a000 	ldr.w	sl, [r0]
 800beca:	4650      	mov	r0, sl
 800becc:	f7f4 f988 	bl	80001e0 <strlen>
 800bed0:	2300      	movs	r3, #0
 800bed2:	930a      	str	r3, [sp, #40]	; 0x28
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	9305      	str	r3, [sp, #20]
 800bed8:	f8d8 3000 	ldr.w	r3, [r8]
 800bedc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bee0:	3307      	adds	r3, #7
 800bee2:	f023 0307 	bic.w	r3, r3, #7
 800bee6:	f103 0208 	add.w	r2, r3, #8
 800beea:	f8c8 2000 	str.w	r2, [r8]
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bef6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800befa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800befe:	9307      	str	r3, [sp, #28]
 800bf00:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf04:	ee08 0a10 	vmov	s16, r0
 800bf08:	4b9f      	ldr	r3, [pc, #636]	; (800c188 <_printf_float+0x2dc>)
 800bf0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf12:	f7f4 fe13 	bl	8000b3c <__aeabi_dcmpun>
 800bf16:	bb88      	cbnz	r0, 800bf7c <_printf_float+0xd0>
 800bf18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf1c:	4b9a      	ldr	r3, [pc, #616]	; (800c188 <_printf_float+0x2dc>)
 800bf1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf22:	f7f4 fded 	bl	8000b00 <__aeabi_dcmple>
 800bf26:	bb48      	cbnz	r0, 800bf7c <_printf_float+0xd0>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	4649      	mov	r1, r9
 800bf30:	f7f4 fddc 	bl	8000aec <__aeabi_dcmplt>
 800bf34:	b110      	cbz	r0, 800bf3c <_printf_float+0x90>
 800bf36:	232d      	movs	r3, #45	; 0x2d
 800bf38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf3c:	4b93      	ldr	r3, [pc, #588]	; (800c18c <_printf_float+0x2e0>)
 800bf3e:	4894      	ldr	r0, [pc, #592]	; (800c190 <_printf_float+0x2e4>)
 800bf40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf44:	bf94      	ite	ls
 800bf46:	4698      	movls	r8, r3
 800bf48:	4680      	movhi	r8, r0
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	6123      	str	r3, [r4, #16]
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	f023 0204 	bic.w	r2, r3, #4
 800bf54:	6022      	str	r2, [r4, #0]
 800bf56:	f04f 0900 	mov.w	r9, #0
 800bf5a:	9700      	str	r7, [sp, #0]
 800bf5c:	4633      	mov	r3, r6
 800bf5e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf60:	4621      	mov	r1, r4
 800bf62:	4628      	mov	r0, r5
 800bf64:	f000 f9d8 	bl	800c318 <_printf_common>
 800bf68:	3001      	adds	r0, #1
 800bf6a:	f040 8090 	bne.w	800c08e <_printf_float+0x1e2>
 800bf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf72:	b00d      	add	sp, #52	; 0x34
 800bf74:	ecbd 8b02 	vpop	{d8}
 800bf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7c:	4642      	mov	r2, r8
 800bf7e:	464b      	mov	r3, r9
 800bf80:	4640      	mov	r0, r8
 800bf82:	4649      	mov	r1, r9
 800bf84:	f7f4 fdda 	bl	8000b3c <__aeabi_dcmpun>
 800bf88:	b140      	cbz	r0, 800bf9c <_printf_float+0xf0>
 800bf8a:	464b      	mov	r3, r9
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bfbc      	itt	lt
 800bf90:	232d      	movlt	r3, #45	; 0x2d
 800bf92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf96:	487f      	ldr	r0, [pc, #508]	; (800c194 <_printf_float+0x2e8>)
 800bf98:	4b7f      	ldr	r3, [pc, #508]	; (800c198 <_printf_float+0x2ec>)
 800bf9a:	e7d1      	b.n	800bf40 <_printf_float+0x94>
 800bf9c:	6863      	ldr	r3, [r4, #4]
 800bf9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfa2:	9206      	str	r2, [sp, #24]
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	d13f      	bne.n	800c028 <_printf_float+0x17c>
 800bfa8:	2306      	movs	r3, #6
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	6861      	ldr	r1, [r4, #4]
 800bfb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9303      	str	r3, [sp, #12]
 800bfb8:	ab0a      	add	r3, sp, #40	; 0x28
 800bfba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfbe:	ab09      	add	r3, sp, #36	; 0x24
 800bfc0:	ec49 8b10 	vmov	d0, r8, r9
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	6022      	str	r2, [r4, #0]
 800bfc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f7ff fecd 	bl	800bd6c <__cvt>
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfd6:	2b47      	cmp	r3, #71	; 0x47
 800bfd8:	4680      	mov	r8, r0
 800bfda:	d108      	bne.n	800bfee <_printf_float+0x142>
 800bfdc:	1cc8      	adds	r0, r1, #3
 800bfde:	db02      	blt.n	800bfe6 <_printf_float+0x13a>
 800bfe0:	6863      	ldr	r3, [r4, #4]
 800bfe2:	4299      	cmp	r1, r3
 800bfe4:	dd41      	ble.n	800c06a <_printf_float+0x1be>
 800bfe6:	f1ab 0b02 	sub.w	fp, fp, #2
 800bfea:	fa5f fb8b 	uxtb.w	fp, fp
 800bfee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bff2:	d820      	bhi.n	800c036 <_printf_float+0x18a>
 800bff4:	3901      	subs	r1, #1
 800bff6:	465a      	mov	r2, fp
 800bff8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bffc:	9109      	str	r1, [sp, #36]	; 0x24
 800bffe:	f7ff ff17 	bl	800be30 <__exponent>
 800c002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c004:	1813      	adds	r3, r2, r0
 800c006:	2a01      	cmp	r2, #1
 800c008:	4681      	mov	r9, r0
 800c00a:	6123      	str	r3, [r4, #16]
 800c00c:	dc02      	bgt.n	800c014 <_printf_float+0x168>
 800c00e:	6822      	ldr	r2, [r4, #0]
 800c010:	07d2      	lsls	r2, r2, #31
 800c012:	d501      	bpl.n	800c018 <_printf_float+0x16c>
 800c014:	3301      	adds	r3, #1
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d09c      	beq.n	800bf5a <_printf_float+0xae>
 800c020:	232d      	movs	r3, #45	; 0x2d
 800c022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c026:	e798      	b.n	800bf5a <_printf_float+0xae>
 800c028:	9a06      	ldr	r2, [sp, #24]
 800c02a:	2a47      	cmp	r2, #71	; 0x47
 800c02c:	d1be      	bne.n	800bfac <_printf_float+0x100>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1bc      	bne.n	800bfac <_printf_float+0x100>
 800c032:	2301      	movs	r3, #1
 800c034:	e7b9      	b.n	800bfaa <_printf_float+0xfe>
 800c036:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c03a:	d118      	bne.n	800c06e <_printf_float+0x1c2>
 800c03c:	2900      	cmp	r1, #0
 800c03e:	6863      	ldr	r3, [r4, #4]
 800c040:	dd0b      	ble.n	800c05a <_printf_float+0x1ae>
 800c042:	6121      	str	r1, [r4, #16]
 800c044:	b913      	cbnz	r3, 800c04c <_printf_float+0x1a0>
 800c046:	6822      	ldr	r2, [r4, #0]
 800c048:	07d0      	lsls	r0, r2, #31
 800c04a:	d502      	bpl.n	800c052 <_printf_float+0x1a6>
 800c04c:	3301      	adds	r3, #1
 800c04e:	440b      	add	r3, r1
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	65a1      	str	r1, [r4, #88]	; 0x58
 800c054:	f04f 0900 	mov.w	r9, #0
 800c058:	e7de      	b.n	800c018 <_printf_float+0x16c>
 800c05a:	b913      	cbnz	r3, 800c062 <_printf_float+0x1b6>
 800c05c:	6822      	ldr	r2, [r4, #0]
 800c05e:	07d2      	lsls	r2, r2, #31
 800c060:	d501      	bpl.n	800c066 <_printf_float+0x1ba>
 800c062:	3302      	adds	r3, #2
 800c064:	e7f4      	b.n	800c050 <_printf_float+0x1a4>
 800c066:	2301      	movs	r3, #1
 800c068:	e7f2      	b.n	800c050 <_printf_float+0x1a4>
 800c06a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	4299      	cmp	r1, r3
 800c072:	db05      	blt.n	800c080 <_printf_float+0x1d4>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	6121      	str	r1, [r4, #16]
 800c078:	07d8      	lsls	r0, r3, #31
 800c07a:	d5ea      	bpl.n	800c052 <_printf_float+0x1a6>
 800c07c:	1c4b      	adds	r3, r1, #1
 800c07e:	e7e7      	b.n	800c050 <_printf_float+0x1a4>
 800c080:	2900      	cmp	r1, #0
 800c082:	bfd4      	ite	le
 800c084:	f1c1 0202 	rsble	r2, r1, #2
 800c088:	2201      	movgt	r2, #1
 800c08a:	4413      	add	r3, r2
 800c08c:	e7e0      	b.n	800c050 <_printf_float+0x1a4>
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	055a      	lsls	r2, r3, #21
 800c092:	d407      	bmi.n	800c0a4 <_printf_float+0x1f8>
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	4642      	mov	r2, r8
 800c098:	4631      	mov	r1, r6
 800c09a:	4628      	mov	r0, r5
 800c09c:	47b8      	blx	r7
 800c09e:	3001      	adds	r0, #1
 800c0a0:	d12c      	bne.n	800c0fc <_printf_float+0x250>
 800c0a2:	e764      	b.n	800bf6e <_printf_float+0xc2>
 800c0a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0a8:	f240 80e0 	bls.w	800c26c <_printf_float+0x3c0>
 800c0ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f7f4 fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d034      	beq.n	800c126 <_printf_float+0x27a>
 800c0bc:	4a37      	ldr	r2, [pc, #220]	; (800c19c <_printf_float+0x2f0>)
 800c0be:	2301      	movs	r3, #1
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b8      	blx	r7
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	f43f af51 	beq.w	800bf6e <_printf_float+0xc2>
 800c0cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	db02      	blt.n	800c0da <_printf_float+0x22e>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	07d8      	lsls	r0, r3, #31
 800c0d8:	d510      	bpl.n	800c0fc <_printf_float+0x250>
 800c0da:	ee18 3a10 	vmov	r3, s16
 800c0de:	4652      	mov	r2, sl
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	47b8      	blx	r7
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	f43f af41 	beq.w	800bf6e <_printf_float+0xc2>
 800c0ec:	f04f 0800 	mov.w	r8, #0
 800c0f0:	f104 091a 	add.w	r9, r4, #26
 800c0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	4543      	cmp	r3, r8
 800c0fa:	dc09      	bgt.n	800c110 <_printf_float+0x264>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	079b      	lsls	r3, r3, #30
 800c100:	f100 8105 	bmi.w	800c30e <_printf_float+0x462>
 800c104:	68e0      	ldr	r0, [r4, #12]
 800c106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c108:	4298      	cmp	r0, r3
 800c10a:	bfb8      	it	lt
 800c10c:	4618      	movlt	r0, r3
 800c10e:	e730      	b.n	800bf72 <_printf_float+0xc6>
 800c110:	2301      	movs	r3, #1
 800c112:	464a      	mov	r2, r9
 800c114:	4631      	mov	r1, r6
 800c116:	4628      	mov	r0, r5
 800c118:	47b8      	blx	r7
 800c11a:	3001      	adds	r0, #1
 800c11c:	f43f af27 	beq.w	800bf6e <_printf_float+0xc2>
 800c120:	f108 0801 	add.w	r8, r8, #1
 800c124:	e7e6      	b.n	800c0f4 <_printf_float+0x248>
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dc39      	bgt.n	800c1a0 <_printf_float+0x2f4>
 800c12c:	4a1b      	ldr	r2, [pc, #108]	; (800c19c <_printf_float+0x2f0>)
 800c12e:	2301      	movs	r3, #1
 800c130:	4631      	mov	r1, r6
 800c132:	4628      	mov	r0, r5
 800c134:	47b8      	blx	r7
 800c136:	3001      	adds	r0, #1
 800c138:	f43f af19 	beq.w	800bf6e <_printf_float+0xc2>
 800c13c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c140:	4313      	orrs	r3, r2
 800c142:	d102      	bne.n	800c14a <_printf_float+0x29e>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	07d9      	lsls	r1, r3, #31
 800c148:	d5d8      	bpl.n	800c0fc <_printf_float+0x250>
 800c14a:	ee18 3a10 	vmov	r3, s16
 800c14e:	4652      	mov	r2, sl
 800c150:	4631      	mov	r1, r6
 800c152:	4628      	mov	r0, r5
 800c154:	47b8      	blx	r7
 800c156:	3001      	adds	r0, #1
 800c158:	f43f af09 	beq.w	800bf6e <_printf_float+0xc2>
 800c15c:	f04f 0900 	mov.w	r9, #0
 800c160:	f104 0a1a 	add.w	sl, r4, #26
 800c164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c166:	425b      	negs	r3, r3
 800c168:	454b      	cmp	r3, r9
 800c16a:	dc01      	bgt.n	800c170 <_printf_float+0x2c4>
 800c16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c16e:	e792      	b.n	800c096 <_printf_float+0x1ea>
 800c170:	2301      	movs	r3, #1
 800c172:	4652      	mov	r2, sl
 800c174:	4631      	mov	r1, r6
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	f43f aef7 	beq.w	800bf6e <_printf_float+0xc2>
 800c180:	f109 0901 	add.w	r9, r9, #1
 800c184:	e7ee      	b.n	800c164 <_printf_float+0x2b8>
 800c186:	bf00      	nop
 800c188:	7fefffff 	.word	0x7fefffff
 800c18c:	08012d48 	.word	0x08012d48
 800c190:	08012d4c 	.word	0x08012d4c
 800c194:	08012d54 	.word	0x08012d54
 800c198:	08012d50 	.word	0x08012d50
 800c19c:	08012d58 	.word	0x08012d58
 800c1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	bfa8      	it	ge
 800c1a8:	461a      	movge	r2, r3
 800c1aa:	2a00      	cmp	r2, #0
 800c1ac:	4691      	mov	r9, r2
 800c1ae:	dc37      	bgt.n	800c220 <_printf_float+0x374>
 800c1b0:	f04f 0b00 	mov.w	fp, #0
 800c1b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1b8:	f104 021a 	add.w	r2, r4, #26
 800c1bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1be:	9305      	str	r3, [sp, #20]
 800c1c0:	eba3 0309 	sub.w	r3, r3, r9
 800c1c4:	455b      	cmp	r3, fp
 800c1c6:	dc33      	bgt.n	800c230 <_printf_float+0x384>
 800c1c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	db3b      	blt.n	800c248 <_printf_float+0x39c>
 800c1d0:	6823      	ldr	r3, [r4, #0]
 800c1d2:	07da      	lsls	r2, r3, #31
 800c1d4:	d438      	bmi.n	800c248 <_printf_float+0x39c>
 800c1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1d8:	9a05      	ldr	r2, [sp, #20]
 800c1da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1dc:	1a9a      	subs	r2, r3, r2
 800c1de:	eba3 0901 	sub.w	r9, r3, r1
 800c1e2:	4591      	cmp	r9, r2
 800c1e4:	bfa8      	it	ge
 800c1e6:	4691      	movge	r9, r2
 800c1e8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ec:	dc35      	bgt.n	800c25a <_printf_float+0x3ae>
 800c1ee:	f04f 0800 	mov.w	r8, #0
 800c1f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1f6:	f104 0a1a 	add.w	sl, r4, #26
 800c1fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1fe:	1a9b      	subs	r3, r3, r2
 800c200:	eba3 0309 	sub.w	r3, r3, r9
 800c204:	4543      	cmp	r3, r8
 800c206:	f77f af79 	ble.w	800c0fc <_printf_float+0x250>
 800c20a:	2301      	movs	r3, #1
 800c20c:	4652      	mov	r2, sl
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f aeaa 	beq.w	800bf6e <_printf_float+0xc2>
 800c21a:	f108 0801 	add.w	r8, r8, #1
 800c21e:	e7ec      	b.n	800c1fa <_printf_float+0x34e>
 800c220:	4613      	mov	r3, r2
 800c222:	4631      	mov	r1, r6
 800c224:	4642      	mov	r2, r8
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	d1c0      	bne.n	800c1b0 <_printf_float+0x304>
 800c22e:	e69e      	b.n	800bf6e <_printf_float+0xc2>
 800c230:	2301      	movs	r3, #1
 800c232:	4631      	mov	r1, r6
 800c234:	4628      	mov	r0, r5
 800c236:	9205      	str	r2, [sp, #20]
 800c238:	47b8      	blx	r7
 800c23a:	3001      	adds	r0, #1
 800c23c:	f43f ae97 	beq.w	800bf6e <_printf_float+0xc2>
 800c240:	9a05      	ldr	r2, [sp, #20]
 800c242:	f10b 0b01 	add.w	fp, fp, #1
 800c246:	e7b9      	b.n	800c1bc <_printf_float+0x310>
 800c248:	ee18 3a10 	vmov	r3, s16
 800c24c:	4652      	mov	r2, sl
 800c24e:	4631      	mov	r1, r6
 800c250:	4628      	mov	r0, r5
 800c252:	47b8      	blx	r7
 800c254:	3001      	adds	r0, #1
 800c256:	d1be      	bne.n	800c1d6 <_printf_float+0x32a>
 800c258:	e689      	b.n	800bf6e <_printf_float+0xc2>
 800c25a:	9a05      	ldr	r2, [sp, #20]
 800c25c:	464b      	mov	r3, r9
 800c25e:	4442      	add	r2, r8
 800c260:	4631      	mov	r1, r6
 800c262:	4628      	mov	r0, r5
 800c264:	47b8      	blx	r7
 800c266:	3001      	adds	r0, #1
 800c268:	d1c1      	bne.n	800c1ee <_printf_float+0x342>
 800c26a:	e680      	b.n	800bf6e <_printf_float+0xc2>
 800c26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c26e:	2a01      	cmp	r2, #1
 800c270:	dc01      	bgt.n	800c276 <_printf_float+0x3ca>
 800c272:	07db      	lsls	r3, r3, #31
 800c274:	d538      	bpl.n	800c2e8 <_printf_float+0x43c>
 800c276:	2301      	movs	r3, #1
 800c278:	4642      	mov	r2, r8
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b8      	blx	r7
 800c280:	3001      	adds	r0, #1
 800c282:	f43f ae74 	beq.w	800bf6e <_printf_float+0xc2>
 800c286:	ee18 3a10 	vmov	r3, s16
 800c28a:	4652      	mov	r2, sl
 800c28c:	4631      	mov	r1, r6
 800c28e:	4628      	mov	r0, r5
 800c290:	47b8      	blx	r7
 800c292:	3001      	adds	r0, #1
 800c294:	f43f ae6b 	beq.w	800bf6e <_printf_float+0xc2>
 800c298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c29c:	2200      	movs	r2, #0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f7f4 fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2a4:	b9d8      	cbnz	r0, 800c2de <_printf_float+0x432>
 800c2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a8:	f108 0201 	add.w	r2, r8, #1
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	47b8      	blx	r7
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	d10e      	bne.n	800c2d6 <_printf_float+0x42a>
 800c2b8:	e659      	b.n	800bf6e <_printf_float+0xc2>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4652      	mov	r2, sl
 800c2be:	4631      	mov	r1, r6
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b8      	blx	r7
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	f43f ae52 	beq.w	800bf6e <_printf_float+0xc2>
 800c2ca:	f108 0801 	add.w	r8, r8, #1
 800c2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	4543      	cmp	r3, r8
 800c2d4:	dcf1      	bgt.n	800c2ba <_printf_float+0x40e>
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2dc:	e6dc      	b.n	800c098 <_printf_float+0x1ec>
 800c2de:	f04f 0800 	mov.w	r8, #0
 800c2e2:	f104 0a1a 	add.w	sl, r4, #26
 800c2e6:	e7f2      	b.n	800c2ce <_printf_float+0x422>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	4642      	mov	r2, r8
 800c2ec:	e7df      	b.n	800c2ae <_printf_float+0x402>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	464a      	mov	r2, r9
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	47b8      	blx	r7
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	f43f ae38 	beq.w	800bf6e <_printf_float+0xc2>
 800c2fe:	f108 0801 	add.w	r8, r8, #1
 800c302:	68e3      	ldr	r3, [r4, #12]
 800c304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c306:	1a5b      	subs	r3, r3, r1
 800c308:	4543      	cmp	r3, r8
 800c30a:	dcf0      	bgt.n	800c2ee <_printf_float+0x442>
 800c30c:	e6fa      	b.n	800c104 <_printf_float+0x258>
 800c30e:	f04f 0800 	mov.w	r8, #0
 800c312:	f104 0919 	add.w	r9, r4, #25
 800c316:	e7f4      	b.n	800c302 <_printf_float+0x456>

0800c318 <_printf_common>:
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	4616      	mov	r6, r2
 800c31e:	4699      	mov	r9, r3
 800c320:	688a      	ldr	r2, [r1, #8]
 800c322:	690b      	ldr	r3, [r1, #16]
 800c324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c328:	4293      	cmp	r3, r2
 800c32a:	bfb8      	it	lt
 800c32c:	4613      	movlt	r3, r2
 800c32e:	6033      	str	r3, [r6, #0]
 800c330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c334:	4607      	mov	r7, r0
 800c336:	460c      	mov	r4, r1
 800c338:	b10a      	cbz	r2, 800c33e <_printf_common+0x26>
 800c33a:	3301      	adds	r3, #1
 800c33c:	6033      	str	r3, [r6, #0]
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	0699      	lsls	r1, r3, #26
 800c342:	bf42      	ittt	mi
 800c344:	6833      	ldrmi	r3, [r6, #0]
 800c346:	3302      	addmi	r3, #2
 800c348:	6033      	strmi	r3, [r6, #0]
 800c34a:	6825      	ldr	r5, [r4, #0]
 800c34c:	f015 0506 	ands.w	r5, r5, #6
 800c350:	d106      	bne.n	800c360 <_printf_common+0x48>
 800c352:	f104 0a19 	add.w	sl, r4, #25
 800c356:	68e3      	ldr	r3, [r4, #12]
 800c358:	6832      	ldr	r2, [r6, #0]
 800c35a:	1a9b      	subs	r3, r3, r2
 800c35c:	42ab      	cmp	r3, r5
 800c35e:	dc26      	bgt.n	800c3ae <_printf_common+0x96>
 800c360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c364:	1e13      	subs	r3, r2, #0
 800c366:	6822      	ldr	r2, [r4, #0]
 800c368:	bf18      	it	ne
 800c36a:	2301      	movne	r3, #1
 800c36c:	0692      	lsls	r2, r2, #26
 800c36e:	d42b      	bmi.n	800c3c8 <_printf_common+0xb0>
 800c370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c374:	4649      	mov	r1, r9
 800c376:	4638      	mov	r0, r7
 800c378:	47c0      	blx	r8
 800c37a:	3001      	adds	r0, #1
 800c37c:	d01e      	beq.n	800c3bc <_printf_common+0xa4>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	68e5      	ldr	r5, [r4, #12]
 800c382:	6832      	ldr	r2, [r6, #0]
 800c384:	f003 0306 	and.w	r3, r3, #6
 800c388:	2b04      	cmp	r3, #4
 800c38a:	bf08      	it	eq
 800c38c:	1aad      	subeq	r5, r5, r2
 800c38e:	68a3      	ldr	r3, [r4, #8]
 800c390:	6922      	ldr	r2, [r4, #16]
 800c392:	bf0c      	ite	eq
 800c394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c398:	2500      	movne	r5, #0
 800c39a:	4293      	cmp	r3, r2
 800c39c:	bfc4      	itt	gt
 800c39e:	1a9b      	subgt	r3, r3, r2
 800c3a0:	18ed      	addgt	r5, r5, r3
 800c3a2:	2600      	movs	r6, #0
 800c3a4:	341a      	adds	r4, #26
 800c3a6:	42b5      	cmp	r5, r6
 800c3a8:	d11a      	bne.n	800c3e0 <_printf_common+0xc8>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	e008      	b.n	800c3c0 <_printf_common+0xa8>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4652      	mov	r2, sl
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	47c0      	blx	r8
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d103      	bne.n	800c3c4 <_printf_common+0xac>
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c4:	3501      	adds	r5, #1
 800c3c6:	e7c6      	b.n	800c356 <_printf_common+0x3e>
 800c3c8:	18e1      	adds	r1, r4, r3
 800c3ca:	1c5a      	adds	r2, r3, #1
 800c3cc:	2030      	movs	r0, #48	; 0x30
 800c3ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3d2:	4422      	add	r2, r4
 800c3d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3dc:	3302      	adds	r3, #2
 800c3de:	e7c7      	b.n	800c370 <_printf_common+0x58>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	4622      	mov	r2, r4
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	47c0      	blx	r8
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d0e6      	beq.n	800c3bc <_printf_common+0xa4>
 800c3ee:	3601      	adds	r6, #1
 800c3f0:	e7d9      	b.n	800c3a6 <_printf_common+0x8e>
	...

0800c3f4 <_printf_i>:
 800c3f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	7e0f      	ldrb	r7, [r1, #24]
 800c3fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3fc:	2f78      	cmp	r7, #120	; 0x78
 800c3fe:	4691      	mov	r9, r2
 800c400:	4680      	mov	r8, r0
 800c402:	460c      	mov	r4, r1
 800c404:	469a      	mov	sl, r3
 800c406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c40a:	d807      	bhi.n	800c41c <_printf_i+0x28>
 800c40c:	2f62      	cmp	r7, #98	; 0x62
 800c40e:	d80a      	bhi.n	800c426 <_printf_i+0x32>
 800c410:	2f00      	cmp	r7, #0
 800c412:	f000 80d8 	beq.w	800c5c6 <_printf_i+0x1d2>
 800c416:	2f58      	cmp	r7, #88	; 0x58
 800c418:	f000 80a3 	beq.w	800c562 <_printf_i+0x16e>
 800c41c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c424:	e03a      	b.n	800c49c <_printf_i+0xa8>
 800c426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c42a:	2b15      	cmp	r3, #21
 800c42c:	d8f6      	bhi.n	800c41c <_printf_i+0x28>
 800c42e:	a101      	add	r1, pc, #4	; (adr r1, 800c434 <_printf_i+0x40>)
 800c430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c434:	0800c48d 	.word	0x0800c48d
 800c438:	0800c4a1 	.word	0x0800c4a1
 800c43c:	0800c41d 	.word	0x0800c41d
 800c440:	0800c41d 	.word	0x0800c41d
 800c444:	0800c41d 	.word	0x0800c41d
 800c448:	0800c41d 	.word	0x0800c41d
 800c44c:	0800c4a1 	.word	0x0800c4a1
 800c450:	0800c41d 	.word	0x0800c41d
 800c454:	0800c41d 	.word	0x0800c41d
 800c458:	0800c41d 	.word	0x0800c41d
 800c45c:	0800c41d 	.word	0x0800c41d
 800c460:	0800c5ad 	.word	0x0800c5ad
 800c464:	0800c4d1 	.word	0x0800c4d1
 800c468:	0800c58f 	.word	0x0800c58f
 800c46c:	0800c41d 	.word	0x0800c41d
 800c470:	0800c41d 	.word	0x0800c41d
 800c474:	0800c5cf 	.word	0x0800c5cf
 800c478:	0800c41d 	.word	0x0800c41d
 800c47c:	0800c4d1 	.word	0x0800c4d1
 800c480:	0800c41d 	.word	0x0800c41d
 800c484:	0800c41d 	.word	0x0800c41d
 800c488:	0800c597 	.word	0x0800c597
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	1d1a      	adds	r2, r3, #4
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	602a      	str	r2, [r5, #0]
 800c494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c49c:	2301      	movs	r3, #1
 800c49e:	e0a3      	b.n	800c5e8 <_printf_i+0x1f4>
 800c4a0:	6820      	ldr	r0, [r4, #0]
 800c4a2:	6829      	ldr	r1, [r5, #0]
 800c4a4:	0606      	lsls	r6, r0, #24
 800c4a6:	f101 0304 	add.w	r3, r1, #4
 800c4aa:	d50a      	bpl.n	800c4c2 <_printf_i+0xce>
 800c4ac:	680e      	ldr	r6, [r1, #0]
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	2e00      	cmp	r6, #0
 800c4b2:	da03      	bge.n	800c4bc <_printf_i+0xc8>
 800c4b4:	232d      	movs	r3, #45	; 0x2d
 800c4b6:	4276      	negs	r6, r6
 800c4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4bc:	485e      	ldr	r0, [pc, #376]	; (800c638 <_printf_i+0x244>)
 800c4be:	230a      	movs	r3, #10
 800c4c0:	e019      	b.n	800c4f6 <_printf_i+0x102>
 800c4c2:	680e      	ldr	r6, [r1, #0]
 800c4c4:	602b      	str	r3, [r5, #0]
 800c4c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4ca:	bf18      	it	ne
 800c4cc:	b236      	sxthne	r6, r6
 800c4ce:	e7ef      	b.n	800c4b0 <_printf_i+0xbc>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	6820      	ldr	r0, [r4, #0]
 800c4d4:	1d19      	adds	r1, r3, #4
 800c4d6:	6029      	str	r1, [r5, #0]
 800c4d8:	0601      	lsls	r1, r0, #24
 800c4da:	d501      	bpl.n	800c4e0 <_printf_i+0xec>
 800c4dc:	681e      	ldr	r6, [r3, #0]
 800c4de:	e002      	b.n	800c4e6 <_printf_i+0xf2>
 800c4e0:	0646      	lsls	r6, r0, #25
 800c4e2:	d5fb      	bpl.n	800c4dc <_printf_i+0xe8>
 800c4e4:	881e      	ldrh	r6, [r3, #0]
 800c4e6:	4854      	ldr	r0, [pc, #336]	; (800c638 <_printf_i+0x244>)
 800c4e8:	2f6f      	cmp	r7, #111	; 0x6f
 800c4ea:	bf0c      	ite	eq
 800c4ec:	2308      	moveq	r3, #8
 800c4ee:	230a      	movne	r3, #10
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4f6:	6865      	ldr	r5, [r4, #4]
 800c4f8:	60a5      	str	r5, [r4, #8]
 800c4fa:	2d00      	cmp	r5, #0
 800c4fc:	bfa2      	ittt	ge
 800c4fe:	6821      	ldrge	r1, [r4, #0]
 800c500:	f021 0104 	bicge.w	r1, r1, #4
 800c504:	6021      	strge	r1, [r4, #0]
 800c506:	b90e      	cbnz	r6, 800c50c <_printf_i+0x118>
 800c508:	2d00      	cmp	r5, #0
 800c50a:	d04d      	beq.n	800c5a8 <_printf_i+0x1b4>
 800c50c:	4615      	mov	r5, r2
 800c50e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c512:	fb03 6711 	mls	r7, r3, r1, r6
 800c516:	5dc7      	ldrb	r7, [r0, r7]
 800c518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c51c:	4637      	mov	r7, r6
 800c51e:	42bb      	cmp	r3, r7
 800c520:	460e      	mov	r6, r1
 800c522:	d9f4      	bls.n	800c50e <_printf_i+0x11a>
 800c524:	2b08      	cmp	r3, #8
 800c526:	d10b      	bne.n	800c540 <_printf_i+0x14c>
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	07de      	lsls	r6, r3, #31
 800c52c:	d508      	bpl.n	800c540 <_printf_i+0x14c>
 800c52e:	6923      	ldr	r3, [r4, #16]
 800c530:	6861      	ldr	r1, [r4, #4]
 800c532:	4299      	cmp	r1, r3
 800c534:	bfde      	ittt	le
 800c536:	2330      	movle	r3, #48	; 0x30
 800c538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c53c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c540:	1b52      	subs	r2, r2, r5
 800c542:	6122      	str	r2, [r4, #16]
 800c544:	f8cd a000 	str.w	sl, [sp]
 800c548:	464b      	mov	r3, r9
 800c54a:	aa03      	add	r2, sp, #12
 800c54c:	4621      	mov	r1, r4
 800c54e:	4640      	mov	r0, r8
 800c550:	f7ff fee2 	bl	800c318 <_printf_common>
 800c554:	3001      	adds	r0, #1
 800c556:	d14c      	bne.n	800c5f2 <_printf_i+0x1fe>
 800c558:	f04f 30ff 	mov.w	r0, #4294967295
 800c55c:	b004      	add	sp, #16
 800c55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c562:	4835      	ldr	r0, [pc, #212]	; (800c638 <_printf_i+0x244>)
 800c564:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c568:	6829      	ldr	r1, [r5, #0]
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c570:	6029      	str	r1, [r5, #0]
 800c572:	061d      	lsls	r5, r3, #24
 800c574:	d514      	bpl.n	800c5a0 <_printf_i+0x1ac>
 800c576:	07df      	lsls	r7, r3, #31
 800c578:	bf44      	itt	mi
 800c57a:	f043 0320 	orrmi.w	r3, r3, #32
 800c57e:	6023      	strmi	r3, [r4, #0]
 800c580:	b91e      	cbnz	r6, 800c58a <_printf_i+0x196>
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	f023 0320 	bic.w	r3, r3, #32
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	2310      	movs	r3, #16
 800c58c:	e7b0      	b.n	800c4f0 <_printf_i+0xfc>
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	f043 0320 	orr.w	r3, r3, #32
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	2378      	movs	r3, #120	; 0x78
 800c598:	4828      	ldr	r0, [pc, #160]	; (800c63c <_printf_i+0x248>)
 800c59a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c59e:	e7e3      	b.n	800c568 <_printf_i+0x174>
 800c5a0:	0659      	lsls	r1, r3, #25
 800c5a2:	bf48      	it	mi
 800c5a4:	b2b6      	uxthmi	r6, r6
 800c5a6:	e7e6      	b.n	800c576 <_printf_i+0x182>
 800c5a8:	4615      	mov	r5, r2
 800c5aa:	e7bb      	b.n	800c524 <_printf_i+0x130>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	6826      	ldr	r6, [r4, #0]
 800c5b0:	6961      	ldr	r1, [r4, #20]
 800c5b2:	1d18      	adds	r0, r3, #4
 800c5b4:	6028      	str	r0, [r5, #0]
 800c5b6:	0635      	lsls	r5, r6, #24
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	d501      	bpl.n	800c5c0 <_printf_i+0x1cc>
 800c5bc:	6019      	str	r1, [r3, #0]
 800c5be:	e002      	b.n	800c5c6 <_printf_i+0x1d2>
 800c5c0:	0670      	lsls	r0, r6, #25
 800c5c2:	d5fb      	bpl.n	800c5bc <_printf_i+0x1c8>
 800c5c4:	8019      	strh	r1, [r3, #0]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	6123      	str	r3, [r4, #16]
 800c5ca:	4615      	mov	r5, r2
 800c5cc:	e7ba      	b.n	800c544 <_printf_i+0x150>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	1d1a      	adds	r2, r3, #4
 800c5d2:	602a      	str	r2, [r5, #0]
 800c5d4:	681d      	ldr	r5, [r3, #0]
 800c5d6:	6862      	ldr	r2, [r4, #4]
 800c5d8:	2100      	movs	r1, #0
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f7f3 fe08 	bl	80001f0 <memchr>
 800c5e0:	b108      	cbz	r0, 800c5e6 <_printf_i+0x1f2>
 800c5e2:	1b40      	subs	r0, r0, r5
 800c5e4:	6060      	str	r0, [r4, #4]
 800c5e6:	6863      	ldr	r3, [r4, #4]
 800c5e8:	6123      	str	r3, [r4, #16]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5f0:	e7a8      	b.n	800c544 <_printf_i+0x150>
 800c5f2:	6923      	ldr	r3, [r4, #16]
 800c5f4:	462a      	mov	r2, r5
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	47d0      	blx	sl
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	d0ab      	beq.n	800c558 <_printf_i+0x164>
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	079b      	lsls	r3, r3, #30
 800c604:	d413      	bmi.n	800c62e <_printf_i+0x23a>
 800c606:	68e0      	ldr	r0, [r4, #12]
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	4298      	cmp	r0, r3
 800c60c:	bfb8      	it	lt
 800c60e:	4618      	movlt	r0, r3
 800c610:	e7a4      	b.n	800c55c <_printf_i+0x168>
 800c612:	2301      	movs	r3, #1
 800c614:	4632      	mov	r2, r6
 800c616:	4649      	mov	r1, r9
 800c618:	4640      	mov	r0, r8
 800c61a:	47d0      	blx	sl
 800c61c:	3001      	adds	r0, #1
 800c61e:	d09b      	beq.n	800c558 <_printf_i+0x164>
 800c620:	3501      	adds	r5, #1
 800c622:	68e3      	ldr	r3, [r4, #12]
 800c624:	9903      	ldr	r1, [sp, #12]
 800c626:	1a5b      	subs	r3, r3, r1
 800c628:	42ab      	cmp	r3, r5
 800c62a:	dcf2      	bgt.n	800c612 <_printf_i+0x21e>
 800c62c:	e7eb      	b.n	800c606 <_printf_i+0x212>
 800c62e:	2500      	movs	r5, #0
 800c630:	f104 0619 	add.w	r6, r4, #25
 800c634:	e7f5      	b.n	800c622 <_printf_i+0x22e>
 800c636:	bf00      	nop
 800c638:	08012d5a 	.word	0x08012d5a
 800c63c:	08012d6b 	.word	0x08012d6b

0800c640 <_scanf_float>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	b087      	sub	sp, #28
 800c646:	4617      	mov	r7, r2
 800c648:	9303      	str	r3, [sp, #12]
 800c64a:	688b      	ldr	r3, [r1, #8]
 800c64c:	1e5a      	subs	r2, r3, #1
 800c64e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c652:	bf83      	ittte	hi
 800c654:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c658:	195b      	addhi	r3, r3, r5
 800c65a:	9302      	strhi	r3, [sp, #8]
 800c65c:	2300      	movls	r3, #0
 800c65e:	bf86      	itte	hi
 800c660:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c664:	608b      	strhi	r3, [r1, #8]
 800c666:	9302      	strls	r3, [sp, #8]
 800c668:	680b      	ldr	r3, [r1, #0]
 800c66a:	468b      	mov	fp, r1
 800c66c:	2500      	movs	r5, #0
 800c66e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c672:	f84b 3b1c 	str.w	r3, [fp], #28
 800c676:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c67a:	4680      	mov	r8, r0
 800c67c:	460c      	mov	r4, r1
 800c67e:	465e      	mov	r6, fp
 800c680:	46aa      	mov	sl, r5
 800c682:	46a9      	mov	r9, r5
 800c684:	9501      	str	r5, [sp, #4]
 800c686:	68a2      	ldr	r2, [r4, #8]
 800c688:	b152      	cbz	r2, 800c6a0 <_scanf_float+0x60>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b4e      	cmp	r3, #78	; 0x4e
 800c690:	d864      	bhi.n	800c75c <_scanf_float+0x11c>
 800c692:	2b40      	cmp	r3, #64	; 0x40
 800c694:	d83c      	bhi.n	800c710 <_scanf_float+0xd0>
 800c696:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c69a:	b2c8      	uxtb	r0, r1
 800c69c:	280e      	cmp	r0, #14
 800c69e:	d93a      	bls.n	800c716 <_scanf_float+0xd6>
 800c6a0:	f1b9 0f00 	cmp.w	r9, #0
 800c6a4:	d003      	beq.n	800c6ae <_scanf_float+0x6e>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6b2:	f1ba 0f01 	cmp.w	sl, #1
 800c6b6:	f200 8113 	bhi.w	800c8e0 <_scanf_float+0x2a0>
 800c6ba:	455e      	cmp	r6, fp
 800c6bc:	f200 8105 	bhi.w	800c8ca <_scanf_float+0x28a>
 800c6c0:	2501      	movs	r5, #1
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	b007      	add	sp, #28
 800c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c6ce:	2a0d      	cmp	r2, #13
 800c6d0:	d8e6      	bhi.n	800c6a0 <_scanf_float+0x60>
 800c6d2:	a101      	add	r1, pc, #4	; (adr r1, 800c6d8 <_scanf_float+0x98>)
 800c6d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6d8:	0800c817 	.word	0x0800c817
 800c6dc:	0800c6a1 	.word	0x0800c6a1
 800c6e0:	0800c6a1 	.word	0x0800c6a1
 800c6e4:	0800c6a1 	.word	0x0800c6a1
 800c6e8:	0800c877 	.word	0x0800c877
 800c6ec:	0800c84f 	.word	0x0800c84f
 800c6f0:	0800c6a1 	.word	0x0800c6a1
 800c6f4:	0800c6a1 	.word	0x0800c6a1
 800c6f8:	0800c825 	.word	0x0800c825
 800c6fc:	0800c6a1 	.word	0x0800c6a1
 800c700:	0800c6a1 	.word	0x0800c6a1
 800c704:	0800c6a1 	.word	0x0800c6a1
 800c708:	0800c6a1 	.word	0x0800c6a1
 800c70c:	0800c7dd 	.word	0x0800c7dd
 800c710:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c714:	e7db      	b.n	800c6ce <_scanf_float+0x8e>
 800c716:	290e      	cmp	r1, #14
 800c718:	d8c2      	bhi.n	800c6a0 <_scanf_float+0x60>
 800c71a:	a001      	add	r0, pc, #4	; (adr r0, 800c720 <_scanf_float+0xe0>)
 800c71c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c720:	0800c7cf 	.word	0x0800c7cf
 800c724:	0800c6a1 	.word	0x0800c6a1
 800c728:	0800c7cf 	.word	0x0800c7cf
 800c72c:	0800c863 	.word	0x0800c863
 800c730:	0800c6a1 	.word	0x0800c6a1
 800c734:	0800c77d 	.word	0x0800c77d
 800c738:	0800c7b9 	.word	0x0800c7b9
 800c73c:	0800c7b9 	.word	0x0800c7b9
 800c740:	0800c7b9 	.word	0x0800c7b9
 800c744:	0800c7b9 	.word	0x0800c7b9
 800c748:	0800c7b9 	.word	0x0800c7b9
 800c74c:	0800c7b9 	.word	0x0800c7b9
 800c750:	0800c7b9 	.word	0x0800c7b9
 800c754:	0800c7b9 	.word	0x0800c7b9
 800c758:	0800c7b9 	.word	0x0800c7b9
 800c75c:	2b6e      	cmp	r3, #110	; 0x6e
 800c75e:	d809      	bhi.n	800c774 <_scanf_float+0x134>
 800c760:	2b60      	cmp	r3, #96	; 0x60
 800c762:	d8b2      	bhi.n	800c6ca <_scanf_float+0x8a>
 800c764:	2b54      	cmp	r3, #84	; 0x54
 800c766:	d077      	beq.n	800c858 <_scanf_float+0x218>
 800c768:	2b59      	cmp	r3, #89	; 0x59
 800c76a:	d199      	bne.n	800c6a0 <_scanf_float+0x60>
 800c76c:	2d07      	cmp	r5, #7
 800c76e:	d197      	bne.n	800c6a0 <_scanf_float+0x60>
 800c770:	2508      	movs	r5, #8
 800c772:	e029      	b.n	800c7c8 <_scanf_float+0x188>
 800c774:	2b74      	cmp	r3, #116	; 0x74
 800c776:	d06f      	beq.n	800c858 <_scanf_float+0x218>
 800c778:	2b79      	cmp	r3, #121	; 0x79
 800c77a:	e7f6      	b.n	800c76a <_scanf_float+0x12a>
 800c77c:	6821      	ldr	r1, [r4, #0]
 800c77e:	05c8      	lsls	r0, r1, #23
 800c780:	d51a      	bpl.n	800c7b8 <_scanf_float+0x178>
 800c782:	9b02      	ldr	r3, [sp, #8]
 800c784:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c788:	6021      	str	r1, [r4, #0]
 800c78a:	f109 0901 	add.w	r9, r9, #1
 800c78e:	b11b      	cbz	r3, 800c798 <_scanf_float+0x158>
 800c790:	3b01      	subs	r3, #1
 800c792:	3201      	adds	r2, #1
 800c794:	9302      	str	r3, [sp, #8]
 800c796:	60a2      	str	r2, [r4, #8]
 800c798:	68a3      	ldr	r3, [r4, #8]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	60a3      	str	r3, [r4, #8]
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	607b      	str	r3, [r7, #4]
 800c7ac:	f340 8084 	ble.w	800c8b8 <_scanf_float+0x278>
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	603b      	str	r3, [r7, #0]
 800c7b6:	e766      	b.n	800c686 <_scanf_float+0x46>
 800c7b8:	eb1a 0f05 	cmn.w	sl, r5
 800c7bc:	f47f af70 	bne.w	800c6a0 <_scanf_float+0x60>
 800c7c0:	6822      	ldr	r2, [r4, #0]
 800c7c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c7c6:	6022      	str	r2, [r4, #0]
 800c7c8:	f806 3b01 	strb.w	r3, [r6], #1
 800c7cc:	e7e4      	b.n	800c798 <_scanf_float+0x158>
 800c7ce:	6822      	ldr	r2, [r4, #0]
 800c7d0:	0610      	lsls	r0, r2, #24
 800c7d2:	f57f af65 	bpl.w	800c6a0 <_scanf_float+0x60>
 800c7d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7da:	e7f4      	b.n	800c7c6 <_scanf_float+0x186>
 800c7dc:	f1ba 0f00 	cmp.w	sl, #0
 800c7e0:	d10e      	bne.n	800c800 <_scanf_float+0x1c0>
 800c7e2:	f1b9 0f00 	cmp.w	r9, #0
 800c7e6:	d10e      	bne.n	800c806 <_scanf_float+0x1c6>
 800c7e8:	6822      	ldr	r2, [r4, #0]
 800c7ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c7ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c7f2:	d108      	bne.n	800c806 <_scanf_float+0x1c6>
 800c7f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c7f8:	6022      	str	r2, [r4, #0]
 800c7fa:	f04f 0a01 	mov.w	sl, #1
 800c7fe:	e7e3      	b.n	800c7c8 <_scanf_float+0x188>
 800c800:	f1ba 0f02 	cmp.w	sl, #2
 800c804:	d055      	beq.n	800c8b2 <_scanf_float+0x272>
 800c806:	2d01      	cmp	r5, #1
 800c808:	d002      	beq.n	800c810 <_scanf_float+0x1d0>
 800c80a:	2d04      	cmp	r5, #4
 800c80c:	f47f af48 	bne.w	800c6a0 <_scanf_float+0x60>
 800c810:	3501      	adds	r5, #1
 800c812:	b2ed      	uxtb	r5, r5
 800c814:	e7d8      	b.n	800c7c8 <_scanf_float+0x188>
 800c816:	f1ba 0f01 	cmp.w	sl, #1
 800c81a:	f47f af41 	bne.w	800c6a0 <_scanf_float+0x60>
 800c81e:	f04f 0a02 	mov.w	sl, #2
 800c822:	e7d1      	b.n	800c7c8 <_scanf_float+0x188>
 800c824:	b97d      	cbnz	r5, 800c846 <_scanf_float+0x206>
 800c826:	f1b9 0f00 	cmp.w	r9, #0
 800c82a:	f47f af3c 	bne.w	800c6a6 <_scanf_float+0x66>
 800c82e:	6822      	ldr	r2, [r4, #0]
 800c830:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c834:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c838:	f47f af39 	bne.w	800c6ae <_scanf_float+0x6e>
 800c83c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c840:	6022      	str	r2, [r4, #0]
 800c842:	2501      	movs	r5, #1
 800c844:	e7c0      	b.n	800c7c8 <_scanf_float+0x188>
 800c846:	2d03      	cmp	r5, #3
 800c848:	d0e2      	beq.n	800c810 <_scanf_float+0x1d0>
 800c84a:	2d05      	cmp	r5, #5
 800c84c:	e7de      	b.n	800c80c <_scanf_float+0x1cc>
 800c84e:	2d02      	cmp	r5, #2
 800c850:	f47f af26 	bne.w	800c6a0 <_scanf_float+0x60>
 800c854:	2503      	movs	r5, #3
 800c856:	e7b7      	b.n	800c7c8 <_scanf_float+0x188>
 800c858:	2d06      	cmp	r5, #6
 800c85a:	f47f af21 	bne.w	800c6a0 <_scanf_float+0x60>
 800c85e:	2507      	movs	r5, #7
 800c860:	e7b2      	b.n	800c7c8 <_scanf_float+0x188>
 800c862:	6822      	ldr	r2, [r4, #0]
 800c864:	0591      	lsls	r1, r2, #22
 800c866:	f57f af1b 	bpl.w	800c6a0 <_scanf_float+0x60>
 800c86a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c86e:	6022      	str	r2, [r4, #0]
 800c870:	f8cd 9004 	str.w	r9, [sp, #4]
 800c874:	e7a8      	b.n	800c7c8 <_scanf_float+0x188>
 800c876:	6822      	ldr	r2, [r4, #0]
 800c878:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c87c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c880:	d006      	beq.n	800c890 <_scanf_float+0x250>
 800c882:	0550      	lsls	r0, r2, #21
 800c884:	f57f af0c 	bpl.w	800c6a0 <_scanf_float+0x60>
 800c888:	f1b9 0f00 	cmp.w	r9, #0
 800c88c:	f43f af0f 	beq.w	800c6ae <_scanf_float+0x6e>
 800c890:	0591      	lsls	r1, r2, #22
 800c892:	bf58      	it	pl
 800c894:	9901      	ldrpl	r1, [sp, #4]
 800c896:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c89a:	bf58      	it	pl
 800c89c:	eba9 0101 	subpl.w	r1, r9, r1
 800c8a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c8a4:	bf58      	it	pl
 800c8a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	f04f 0900 	mov.w	r9, #0
 800c8b0:	e78a      	b.n	800c7c8 <_scanf_float+0x188>
 800c8b2:	f04f 0a03 	mov.w	sl, #3
 800c8b6:	e787      	b.n	800c7c8 <_scanf_float+0x188>
 800c8b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8bc:	4639      	mov	r1, r7
 800c8be:	4640      	mov	r0, r8
 800c8c0:	4798      	blx	r3
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	f43f aedf 	beq.w	800c686 <_scanf_float+0x46>
 800c8c8:	e6ea      	b.n	800c6a0 <_scanf_float+0x60>
 800c8ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8d2:	463a      	mov	r2, r7
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	4798      	blx	r3
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	6123      	str	r3, [r4, #16]
 800c8de:	e6ec      	b.n	800c6ba <_scanf_float+0x7a>
 800c8e0:	1e6b      	subs	r3, r5, #1
 800c8e2:	2b06      	cmp	r3, #6
 800c8e4:	d825      	bhi.n	800c932 <_scanf_float+0x2f2>
 800c8e6:	2d02      	cmp	r5, #2
 800c8e8:	d836      	bhi.n	800c958 <_scanf_float+0x318>
 800c8ea:	455e      	cmp	r6, fp
 800c8ec:	f67f aee8 	bls.w	800c6c0 <_scanf_float+0x80>
 800c8f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8f8:	463a      	mov	r2, r7
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	4798      	blx	r3
 800c8fe:	6923      	ldr	r3, [r4, #16]
 800c900:	3b01      	subs	r3, #1
 800c902:	6123      	str	r3, [r4, #16]
 800c904:	e7f1      	b.n	800c8ea <_scanf_float+0x2aa>
 800c906:	9802      	ldr	r0, [sp, #8]
 800c908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c90c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c910:	9002      	str	r0, [sp, #8]
 800c912:	463a      	mov	r2, r7
 800c914:	4640      	mov	r0, r8
 800c916:	4798      	blx	r3
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	6123      	str	r3, [r4, #16]
 800c91e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c922:	fa5f fa8a 	uxtb.w	sl, sl
 800c926:	f1ba 0f02 	cmp.w	sl, #2
 800c92a:	d1ec      	bne.n	800c906 <_scanf_float+0x2c6>
 800c92c:	3d03      	subs	r5, #3
 800c92e:	b2ed      	uxtb	r5, r5
 800c930:	1b76      	subs	r6, r6, r5
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	05da      	lsls	r2, r3, #23
 800c936:	d52f      	bpl.n	800c998 <_scanf_float+0x358>
 800c938:	055b      	lsls	r3, r3, #21
 800c93a:	d510      	bpl.n	800c95e <_scanf_float+0x31e>
 800c93c:	455e      	cmp	r6, fp
 800c93e:	f67f aebf 	bls.w	800c6c0 <_scanf_float+0x80>
 800c942:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c94a:	463a      	mov	r2, r7
 800c94c:	4640      	mov	r0, r8
 800c94e:	4798      	blx	r3
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	3b01      	subs	r3, #1
 800c954:	6123      	str	r3, [r4, #16]
 800c956:	e7f1      	b.n	800c93c <_scanf_float+0x2fc>
 800c958:	46aa      	mov	sl, r5
 800c95a:	9602      	str	r6, [sp, #8]
 800c95c:	e7df      	b.n	800c91e <_scanf_float+0x2de>
 800c95e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	2965      	cmp	r1, #101	; 0x65
 800c966:	f103 33ff 	add.w	r3, r3, #4294967295
 800c96a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c96e:	6123      	str	r3, [r4, #16]
 800c970:	d00c      	beq.n	800c98c <_scanf_float+0x34c>
 800c972:	2945      	cmp	r1, #69	; 0x45
 800c974:	d00a      	beq.n	800c98c <_scanf_float+0x34c>
 800c976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c97a:	463a      	mov	r2, r7
 800c97c:	4640      	mov	r0, r8
 800c97e:	4798      	blx	r3
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c986:	3b01      	subs	r3, #1
 800c988:	1eb5      	subs	r5, r6, #2
 800c98a:	6123      	str	r3, [r4, #16]
 800c98c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c990:	463a      	mov	r2, r7
 800c992:	4640      	mov	r0, r8
 800c994:	4798      	blx	r3
 800c996:	462e      	mov	r6, r5
 800c998:	6825      	ldr	r5, [r4, #0]
 800c99a:	f015 0510 	ands.w	r5, r5, #16
 800c99e:	d159      	bne.n	800ca54 <_scanf_float+0x414>
 800c9a0:	7035      	strb	r5, [r6, #0]
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ac:	d11b      	bne.n	800c9e6 <_scanf_float+0x3a6>
 800c9ae:	9b01      	ldr	r3, [sp, #4]
 800c9b0:	454b      	cmp	r3, r9
 800c9b2:	eba3 0209 	sub.w	r2, r3, r9
 800c9b6:	d123      	bne.n	800ca00 <_scanf_float+0x3c0>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	4640      	mov	r0, r8
 800c9be:	f000 fe99 	bl	800d6f4 <_strtod_r>
 800c9c2:	6822      	ldr	r2, [r4, #0]
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	f012 0f02 	tst.w	r2, #2
 800c9ca:	ec57 6b10 	vmov	r6, r7, d0
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	d021      	beq.n	800ca16 <_scanf_float+0x3d6>
 800c9d2:	9903      	ldr	r1, [sp, #12]
 800c9d4:	1d1a      	adds	r2, r3, #4
 800c9d6:	600a      	str	r2, [r1, #0]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	e9c3 6700 	strd	r6, r7, [r3]
 800c9de:	68e3      	ldr	r3, [r4, #12]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	60e3      	str	r3, [r4, #12]
 800c9e4:	e66d      	b.n	800c6c2 <_scanf_float+0x82>
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d0e5      	beq.n	800c9b8 <_scanf_float+0x378>
 800c9ec:	9905      	ldr	r1, [sp, #20]
 800c9ee:	230a      	movs	r3, #10
 800c9f0:	462a      	mov	r2, r5
 800c9f2:	3101      	adds	r1, #1
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	f000 ff05 	bl	800d804 <_strtol_r>
 800c9fa:	9b04      	ldr	r3, [sp, #16]
 800c9fc:	9e05      	ldr	r6, [sp, #20]
 800c9fe:	1ac2      	subs	r2, r0, r3
 800ca00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ca04:	429e      	cmp	r6, r3
 800ca06:	bf28      	it	cs
 800ca08:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca0c:	4912      	ldr	r1, [pc, #72]	; (800ca58 <_scanf_float+0x418>)
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f000 f82c 	bl	800ca6c <siprintf>
 800ca14:	e7d0      	b.n	800c9b8 <_scanf_float+0x378>
 800ca16:	9903      	ldr	r1, [sp, #12]
 800ca18:	f012 0f04 	tst.w	r2, #4
 800ca1c:	f103 0204 	add.w	r2, r3, #4
 800ca20:	600a      	str	r2, [r1, #0]
 800ca22:	d1d9      	bne.n	800c9d8 <_scanf_float+0x398>
 800ca24:	f8d3 8000 	ldr.w	r8, [r3]
 800ca28:	ee10 2a10 	vmov	r2, s0
 800ca2c:	ee10 0a10 	vmov	r0, s0
 800ca30:	463b      	mov	r3, r7
 800ca32:	4639      	mov	r1, r7
 800ca34:	f7f4 f882 	bl	8000b3c <__aeabi_dcmpun>
 800ca38:	b128      	cbz	r0, 800ca46 <_scanf_float+0x406>
 800ca3a:	4808      	ldr	r0, [pc, #32]	; (800ca5c <_scanf_float+0x41c>)
 800ca3c:	f000 f810 	bl	800ca60 <nanf>
 800ca40:	ed88 0a00 	vstr	s0, [r8]
 800ca44:	e7cb      	b.n	800c9de <_scanf_float+0x39e>
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f4 f8d5 	bl	8000bf8 <__aeabi_d2f>
 800ca4e:	f8c8 0000 	str.w	r0, [r8]
 800ca52:	e7c4      	b.n	800c9de <_scanf_float+0x39e>
 800ca54:	2500      	movs	r5, #0
 800ca56:	e634      	b.n	800c6c2 <_scanf_float+0x82>
 800ca58:	08012d7c 	.word	0x08012d7c
 800ca5c:	08013188 	.word	0x08013188

0800ca60 <nanf>:
 800ca60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca68 <nanf+0x8>
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	7fc00000 	.word	0x7fc00000

0800ca6c <siprintf>:
 800ca6c:	b40e      	push	{r1, r2, r3}
 800ca6e:	b500      	push	{lr}
 800ca70:	b09c      	sub	sp, #112	; 0x70
 800ca72:	ab1d      	add	r3, sp, #116	; 0x74
 800ca74:	9002      	str	r0, [sp, #8]
 800ca76:	9006      	str	r0, [sp, #24]
 800ca78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca7c:	4809      	ldr	r0, [pc, #36]	; (800caa4 <siprintf+0x38>)
 800ca7e:	9107      	str	r1, [sp, #28]
 800ca80:	9104      	str	r1, [sp, #16]
 800ca82:	4909      	ldr	r1, [pc, #36]	; (800caa8 <siprintf+0x3c>)
 800ca84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca88:	9105      	str	r1, [sp, #20]
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	a902      	add	r1, sp, #8
 800ca90:	f002 fed6 	bl	800f840 <_svfiprintf_r>
 800ca94:	9b02      	ldr	r3, [sp, #8]
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	b01c      	add	sp, #112	; 0x70
 800ca9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa0:	b003      	add	sp, #12
 800caa2:	4770      	bx	lr
 800caa4:	2000023c 	.word	0x2000023c
 800caa8:	ffff0208 	.word	0xffff0208

0800caac <sulp>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	4604      	mov	r4, r0
 800cab0:	460d      	mov	r5, r1
 800cab2:	ec45 4b10 	vmov	d0, r4, r5
 800cab6:	4616      	mov	r6, r2
 800cab8:	f002 fc20 	bl	800f2fc <__ulp>
 800cabc:	ec51 0b10 	vmov	r0, r1, d0
 800cac0:	b17e      	cbz	r6, 800cae2 <sulp+0x36>
 800cac2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cac6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800caca:	2b00      	cmp	r3, #0
 800cacc:	dd09      	ble.n	800cae2 <sulp+0x36>
 800cace:	051b      	lsls	r3, r3, #20
 800cad0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cad4:	2400      	movs	r4, #0
 800cad6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cada:	4622      	mov	r2, r4
 800cadc:	462b      	mov	r3, r5
 800cade:	f7f3 fd93 	bl	8000608 <__aeabi_dmul>
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	0000      	movs	r0, r0
	...

0800cae8 <_strtod_l>:
 800cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caec:	ed2d 8b02 	vpush	{d8}
 800caf0:	b09d      	sub	sp, #116	; 0x74
 800caf2:	461f      	mov	r7, r3
 800caf4:	2300      	movs	r3, #0
 800caf6:	9318      	str	r3, [sp, #96]	; 0x60
 800caf8:	4ba2      	ldr	r3, [pc, #648]	; (800cd84 <_strtod_l+0x29c>)
 800cafa:	9213      	str	r2, [sp, #76]	; 0x4c
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	9305      	str	r3, [sp, #20]
 800cb00:	4604      	mov	r4, r0
 800cb02:	4618      	mov	r0, r3
 800cb04:	4688      	mov	r8, r1
 800cb06:	f7f3 fb6b 	bl	80001e0 <strlen>
 800cb0a:	f04f 0a00 	mov.w	sl, #0
 800cb0e:	4605      	mov	r5, r0
 800cb10:	f04f 0b00 	mov.w	fp, #0
 800cb14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb1a:	781a      	ldrb	r2, [r3, #0]
 800cb1c:	2a2b      	cmp	r2, #43	; 0x2b
 800cb1e:	d04e      	beq.n	800cbbe <_strtod_l+0xd6>
 800cb20:	d83b      	bhi.n	800cb9a <_strtod_l+0xb2>
 800cb22:	2a0d      	cmp	r2, #13
 800cb24:	d834      	bhi.n	800cb90 <_strtod_l+0xa8>
 800cb26:	2a08      	cmp	r2, #8
 800cb28:	d834      	bhi.n	800cb94 <_strtod_l+0xac>
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	d03e      	beq.n	800cbac <_strtod_l+0xc4>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	930a      	str	r3, [sp, #40]	; 0x28
 800cb32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cb34:	7833      	ldrb	r3, [r6, #0]
 800cb36:	2b30      	cmp	r3, #48	; 0x30
 800cb38:	f040 80b0 	bne.w	800cc9c <_strtod_l+0x1b4>
 800cb3c:	7873      	ldrb	r3, [r6, #1]
 800cb3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb42:	2b58      	cmp	r3, #88	; 0x58
 800cb44:	d168      	bne.n	800cc18 <_strtod_l+0x130>
 800cb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb48:	9301      	str	r3, [sp, #4]
 800cb4a:	ab18      	add	r3, sp, #96	; 0x60
 800cb4c:	9702      	str	r7, [sp, #8]
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4a8d      	ldr	r2, [pc, #564]	; (800cd88 <_strtod_l+0x2a0>)
 800cb52:	ab19      	add	r3, sp, #100	; 0x64
 800cb54:	a917      	add	r1, sp, #92	; 0x5c
 800cb56:	4620      	mov	r0, r4
 800cb58:	f001 fd38 	bl	800e5cc <__gethex>
 800cb5c:	f010 0707 	ands.w	r7, r0, #7
 800cb60:	4605      	mov	r5, r0
 800cb62:	d005      	beq.n	800cb70 <_strtod_l+0x88>
 800cb64:	2f06      	cmp	r7, #6
 800cb66:	d12c      	bne.n	800cbc2 <_strtod_l+0xda>
 800cb68:	3601      	adds	r6, #1
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cb6e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f040 8590 	bne.w	800d698 <_strtod_l+0xbb0>
 800cb78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7a:	b1eb      	cbz	r3, 800cbb8 <_strtod_l+0xd0>
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cb82:	ec43 2b10 	vmov	d0, r2, r3
 800cb86:	b01d      	add	sp, #116	; 0x74
 800cb88:	ecbd 8b02 	vpop	{d8}
 800cb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb90:	2a20      	cmp	r2, #32
 800cb92:	d1cc      	bne.n	800cb2e <_strtod_l+0x46>
 800cb94:	3301      	adds	r3, #1
 800cb96:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb98:	e7be      	b.n	800cb18 <_strtod_l+0x30>
 800cb9a:	2a2d      	cmp	r2, #45	; 0x2d
 800cb9c:	d1c7      	bne.n	800cb2e <_strtod_l+0x46>
 800cb9e:	2201      	movs	r2, #1
 800cba0:	920a      	str	r2, [sp, #40]	; 0x28
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cba6:	785b      	ldrb	r3, [r3, #1]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1c2      	bne.n	800cb32 <_strtod_l+0x4a>
 800cbac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cbae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f040 856e 	bne.w	800d694 <_strtod_l+0xbac>
 800cbb8:	4652      	mov	r2, sl
 800cbba:	465b      	mov	r3, fp
 800cbbc:	e7e1      	b.n	800cb82 <_strtod_l+0x9a>
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	e7ee      	b.n	800cba0 <_strtod_l+0xb8>
 800cbc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbc4:	b13a      	cbz	r2, 800cbd6 <_strtod_l+0xee>
 800cbc6:	2135      	movs	r1, #53	; 0x35
 800cbc8:	a81a      	add	r0, sp, #104	; 0x68
 800cbca:	f002 fca2 	bl	800f512 <__copybits>
 800cbce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f002 f861 	bl	800ec98 <_Bfree>
 800cbd6:	3f01      	subs	r7, #1
 800cbd8:	2f04      	cmp	r7, #4
 800cbda:	d806      	bhi.n	800cbea <_strtod_l+0x102>
 800cbdc:	e8df f007 	tbb	[pc, r7]
 800cbe0:	1714030a 	.word	0x1714030a
 800cbe4:	0a          	.byte	0x0a
 800cbe5:	00          	.byte	0x00
 800cbe6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cbea:	0728      	lsls	r0, r5, #28
 800cbec:	d5c0      	bpl.n	800cb70 <_strtod_l+0x88>
 800cbee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cbf2:	e7bd      	b.n	800cb70 <_strtod_l+0x88>
 800cbf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cbf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cbfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cbfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc06:	e7f0      	b.n	800cbea <_strtod_l+0x102>
 800cc08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cd8c <_strtod_l+0x2a4>
 800cc0c:	e7ed      	b.n	800cbea <_strtod_l+0x102>
 800cc0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cc12:	f04f 3aff 	mov.w	sl, #4294967295
 800cc16:	e7e8      	b.n	800cbea <_strtod_l+0x102>
 800cc18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc1e:	785b      	ldrb	r3, [r3, #1]
 800cc20:	2b30      	cmp	r3, #48	; 0x30
 800cc22:	d0f9      	beq.n	800cc18 <_strtod_l+0x130>
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d0a3      	beq.n	800cb70 <_strtod_l+0x88>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	f04f 0900 	mov.w	r9, #0
 800cc2e:	9304      	str	r3, [sp, #16]
 800cc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc32:	9308      	str	r3, [sp, #32]
 800cc34:	f8cd 901c 	str.w	r9, [sp, #28]
 800cc38:	464f      	mov	r7, r9
 800cc3a:	220a      	movs	r2, #10
 800cc3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc3e:	7806      	ldrb	r6, [r0, #0]
 800cc40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cc44:	b2d9      	uxtb	r1, r3
 800cc46:	2909      	cmp	r1, #9
 800cc48:	d92a      	bls.n	800cca0 <_strtod_l+0x1b8>
 800cc4a:	9905      	ldr	r1, [sp, #20]
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	f002 ff0f 	bl	800fa70 <strncmp>
 800cc52:	b398      	cbz	r0, 800ccbc <_strtod_l+0x1d4>
 800cc54:	2000      	movs	r0, #0
 800cc56:	4632      	mov	r2, r6
 800cc58:	463d      	mov	r5, r7
 800cc5a:	9005      	str	r0, [sp, #20]
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2a65      	cmp	r2, #101	; 0x65
 800cc60:	d001      	beq.n	800cc66 <_strtod_l+0x17e>
 800cc62:	2a45      	cmp	r2, #69	; 0x45
 800cc64:	d118      	bne.n	800cc98 <_strtod_l+0x1b0>
 800cc66:	b91d      	cbnz	r5, 800cc70 <_strtod_l+0x188>
 800cc68:	9a04      	ldr	r2, [sp, #16]
 800cc6a:	4302      	orrs	r2, r0
 800cc6c:	d09e      	beq.n	800cbac <_strtod_l+0xc4>
 800cc6e:	2500      	movs	r5, #0
 800cc70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cc74:	f108 0201 	add.w	r2, r8, #1
 800cc78:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cc7e:	2a2b      	cmp	r2, #43	; 0x2b
 800cc80:	d075      	beq.n	800cd6e <_strtod_l+0x286>
 800cc82:	2a2d      	cmp	r2, #45	; 0x2d
 800cc84:	d07b      	beq.n	800cd7e <_strtod_l+0x296>
 800cc86:	f04f 0c00 	mov.w	ip, #0
 800cc8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cc8e:	2909      	cmp	r1, #9
 800cc90:	f240 8082 	bls.w	800cd98 <_strtod_l+0x2b0>
 800cc94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cc98:	2600      	movs	r6, #0
 800cc9a:	e09d      	b.n	800cdd8 <_strtod_l+0x2f0>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e7c4      	b.n	800cc2a <_strtod_l+0x142>
 800cca0:	2f08      	cmp	r7, #8
 800cca2:	bfd8      	it	le
 800cca4:	9907      	ldrle	r1, [sp, #28]
 800cca6:	f100 0001 	add.w	r0, r0, #1
 800ccaa:	bfda      	itte	le
 800ccac:	fb02 3301 	mlale	r3, r2, r1, r3
 800ccb0:	9307      	strle	r3, [sp, #28]
 800ccb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ccb6:	3701      	adds	r7, #1
 800ccb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800ccba:	e7bf      	b.n	800cc3c <_strtod_l+0x154>
 800ccbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccbe:	195a      	adds	r2, r3, r5
 800ccc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccc2:	5d5a      	ldrb	r2, [r3, r5]
 800ccc4:	2f00      	cmp	r7, #0
 800ccc6:	d037      	beq.n	800cd38 <_strtod_l+0x250>
 800ccc8:	9005      	str	r0, [sp, #20]
 800ccca:	463d      	mov	r5, r7
 800cccc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ccd0:	2b09      	cmp	r3, #9
 800ccd2:	d912      	bls.n	800ccfa <_strtod_l+0x212>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e7c2      	b.n	800cc5e <_strtod_l+0x176>
 800ccd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccde:	785a      	ldrb	r2, [r3, #1]
 800cce0:	3001      	adds	r0, #1
 800cce2:	2a30      	cmp	r2, #48	; 0x30
 800cce4:	d0f8      	beq.n	800ccd8 <_strtod_l+0x1f0>
 800cce6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ccea:	2b08      	cmp	r3, #8
 800ccec:	f200 84d9 	bhi.w	800d6a2 <_strtod_l+0xbba>
 800ccf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccf2:	9005      	str	r0, [sp, #20]
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	9308      	str	r3, [sp, #32]
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	3a30      	subs	r2, #48	; 0x30
 800ccfc:	f100 0301 	add.w	r3, r0, #1
 800cd00:	d014      	beq.n	800cd2c <_strtod_l+0x244>
 800cd02:	9905      	ldr	r1, [sp, #20]
 800cd04:	4419      	add	r1, r3
 800cd06:	9105      	str	r1, [sp, #20]
 800cd08:	462b      	mov	r3, r5
 800cd0a:	eb00 0e05 	add.w	lr, r0, r5
 800cd0e:	210a      	movs	r1, #10
 800cd10:	4573      	cmp	r3, lr
 800cd12:	d113      	bne.n	800cd3c <_strtod_l+0x254>
 800cd14:	182b      	adds	r3, r5, r0
 800cd16:	2b08      	cmp	r3, #8
 800cd18:	f105 0501 	add.w	r5, r5, #1
 800cd1c:	4405      	add	r5, r0
 800cd1e:	dc1c      	bgt.n	800cd5a <_strtod_l+0x272>
 800cd20:	9907      	ldr	r1, [sp, #28]
 800cd22:	230a      	movs	r3, #10
 800cd24:	fb03 2301 	mla	r3, r3, r1, r2
 800cd28:	9307      	str	r3, [sp, #28]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd2e:	1c51      	adds	r1, r2, #1
 800cd30:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd32:	7852      	ldrb	r2, [r2, #1]
 800cd34:	4618      	mov	r0, r3
 800cd36:	e7c9      	b.n	800cccc <_strtod_l+0x1e4>
 800cd38:	4638      	mov	r0, r7
 800cd3a:	e7d2      	b.n	800cce2 <_strtod_l+0x1fa>
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	dc04      	bgt.n	800cd4a <_strtod_l+0x262>
 800cd40:	9e07      	ldr	r6, [sp, #28]
 800cd42:	434e      	muls	r6, r1
 800cd44:	9607      	str	r6, [sp, #28]
 800cd46:	3301      	adds	r3, #1
 800cd48:	e7e2      	b.n	800cd10 <_strtod_l+0x228>
 800cd4a:	f103 0c01 	add.w	ip, r3, #1
 800cd4e:	f1bc 0f10 	cmp.w	ip, #16
 800cd52:	bfd8      	it	le
 800cd54:	fb01 f909 	mulle.w	r9, r1, r9
 800cd58:	e7f5      	b.n	800cd46 <_strtod_l+0x25e>
 800cd5a:	2d10      	cmp	r5, #16
 800cd5c:	bfdc      	itt	le
 800cd5e:	230a      	movle	r3, #10
 800cd60:	fb03 2909 	mlale	r9, r3, r9, r2
 800cd64:	e7e1      	b.n	800cd2a <_strtod_l+0x242>
 800cd66:	2300      	movs	r3, #0
 800cd68:	9305      	str	r3, [sp, #20]
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e77c      	b.n	800cc68 <_strtod_l+0x180>
 800cd6e:	f04f 0c00 	mov.w	ip, #0
 800cd72:	f108 0202 	add.w	r2, r8, #2
 800cd76:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd78:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cd7c:	e785      	b.n	800cc8a <_strtod_l+0x1a2>
 800cd7e:	f04f 0c01 	mov.w	ip, #1
 800cd82:	e7f6      	b.n	800cd72 <_strtod_l+0x28a>
 800cd84:	08012fd0 	.word	0x08012fd0
 800cd88:	08012d84 	.word	0x08012d84
 800cd8c:	7ff00000 	.word	0x7ff00000
 800cd90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd92:	1c51      	adds	r1, r2, #1
 800cd94:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd96:	7852      	ldrb	r2, [r2, #1]
 800cd98:	2a30      	cmp	r2, #48	; 0x30
 800cd9a:	d0f9      	beq.n	800cd90 <_strtod_l+0x2a8>
 800cd9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cda0:	2908      	cmp	r1, #8
 800cda2:	f63f af79 	bhi.w	800cc98 <_strtod_l+0x1b0>
 800cda6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cdaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdac:	9206      	str	r2, [sp, #24]
 800cdae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdb0:	1c51      	adds	r1, r2, #1
 800cdb2:	9117      	str	r1, [sp, #92]	; 0x5c
 800cdb4:	7852      	ldrb	r2, [r2, #1]
 800cdb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cdba:	2e09      	cmp	r6, #9
 800cdbc:	d937      	bls.n	800ce2e <_strtod_l+0x346>
 800cdbe:	9e06      	ldr	r6, [sp, #24]
 800cdc0:	1b89      	subs	r1, r1, r6
 800cdc2:	2908      	cmp	r1, #8
 800cdc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cdc8:	dc02      	bgt.n	800cdd0 <_strtod_l+0x2e8>
 800cdca:	4576      	cmp	r6, lr
 800cdcc:	bfa8      	it	ge
 800cdce:	4676      	movge	r6, lr
 800cdd0:	f1bc 0f00 	cmp.w	ip, #0
 800cdd4:	d000      	beq.n	800cdd8 <_strtod_l+0x2f0>
 800cdd6:	4276      	negs	r6, r6
 800cdd8:	2d00      	cmp	r5, #0
 800cdda:	d14d      	bne.n	800ce78 <_strtod_l+0x390>
 800cddc:	9904      	ldr	r1, [sp, #16]
 800cdde:	4301      	orrs	r1, r0
 800cde0:	f47f aec6 	bne.w	800cb70 <_strtod_l+0x88>
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f47f aee1 	bne.w	800cbac <_strtod_l+0xc4>
 800cdea:	2a69      	cmp	r2, #105	; 0x69
 800cdec:	d027      	beq.n	800ce3e <_strtod_l+0x356>
 800cdee:	dc24      	bgt.n	800ce3a <_strtod_l+0x352>
 800cdf0:	2a49      	cmp	r2, #73	; 0x49
 800cdf2:	d024      	beq.n	800ce3e <_strtod_l+0x356>
 800cdf4:	2a4e      	cmp	r2, #78	; 0x4e
 800cdf6:	f47f aed9 	bne.w	800cbac <_strtod_l+0xc4>
 800cdfa:	499f      	ldr	r1, [pc, #636]	; (800d078 <_strtod_l+0x590>)
 800cdfc:	a817      	add	r0, sp, #92	; 0x5c
 800cdfe:	f001 fe3d 	bl	800ea7c <__match>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	f43f aed2 	beq.w	800cbac <_strtod_l+0xc4>
 800ce08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b28      	cmp	r3, #40	; 0x28
 800ce0e:	d12d      	bne.n	800ce6c <_strtod_l+0x384>
 800ce10:	499a      	ldr	r1, [pc, #616]	; (800d07c <_strtod_l+0x594>)
 800ce12:	aa1a      	add	r2, sp, #104	; 0x68
 800ce14:	a817      	add	r0, sp, #92	; 0x5c
 800ce16:	f001 fe45 	bl	800eaa4 <__hexnan>
 800ce1a:	2805      	cmp	r0, #5
 800ce1c:	d126      	bne.n	800ce6c <_strtod_l+0x384>
 800ce1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ce24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ce28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ce2c:	e6a0      	b.n	800cb70 <_strtod_l+0x88>
 800ce2e:	210a      	movs	r1, #10
 800ce30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ce34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ce38:	e7b9      	b.n	800cdae <_strtod_l+0x2c6>
 800ce3a:	2a6e      	cmp	r2, #110	; 0x6e
 800ce3c:	e7db      	b.n	800cdf6 <_strtod_l+0x30e>
 800ce3e:	4990      	ldr	r1, [pc, #576]	; (800d080 <_strtod_l+0x598>)
 800ce40:	a817      	add	r0, sp, #92	; 0x5c
 800ce42:	f001 fe1b 	bl	800ea7c <__match>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f43f aeb0 	beq.w	800cbac <_strtod_l+0xc4>
 800ce4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce4e:	498d      	ldr	r1, [pc, #564]	; (800d084 <_strtod_l+0x59c>)
 800ce50:	3b01      	subs	r3, #1
 800ce52:	a817      	add	r0, sp, #92	; 0x5c
 800ce54:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce56:	f001 fe11 	bl	800ea7c <__match>
 800ce5a:	b910      	cbnz	r0, 800ce62 <_strtod_l+0x37a>
 800ce5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce5e:	3301      	adds	r3, #1
 800ce60:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce62:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d094 <_strtod_l+0x5ac>
 800ce66:	f04f 0a00 	mov.w	sl, #0
 800ce6a:	e681      	b.n	800cb70 <_strtod_l+0x88>
 800ce6c:	4886      	ldr	r0, [pc, #536]	; (800d088 <_strtod_l+0x5a0>)
 800ce6e:	f002 fde7 	bl	800fa40 <nan>
 800ce72:	ec5b ab10 	vmov	sl, fp, d0
 800ce76:	e67b      	b.n	800cb70 <_strtod_l+0x88>
 800ce78:	9b05      	ldr	r3, [sp, #20]
 800ce7a:	9807      	ldr	r0, [sp, #28]
 800ce7c:	1af3      	subs	r3, r6, r3
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	bf08      	it	eq
 800ce82:	462f      	moveq	r7, r5
 800ce84:	2d10      	cmp	r5, #16
 800ce86:	9306      	str	r3, [sp, #24]
 800ce88:	46a8      	mov	r8, r5
 800ce8a:	bfa8      	it	ge
 800ce8c:	f04f 0810 	movge.w	r8, #16
 800ce90:	f7f3 fb40 	bl	8000514 <__aeabi_ui2d>
 800ce94:	2d09      	cmp	r5, #9
 800ce96:	4682      	mov	sl, r0
 800ce98:	468b      	mov	fp, r1
 800ce9a:	dd13      	ble.n	800cec4 <_strtod_l+0x3dc>
 800ce9c:	4b7b      	ldr	r3, [pc, #492]	; (800d08c <_strtod_l+0x5a4>)
 800ce9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cea2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cea6:	f7f3 fbaf 	bl	8000608 <__aeabi_dmul>
 800ceaa:	4682      	mov	sl, r0
 800ceac:	4648      	mov	r0, r9
 800ceae:	468b      	mov	fp, r1
 800ceb0:	f7f3 fb30 	bl	8000514 <__aeabi_ui2d>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	4650      	mov	r0, sl
 800ceba:	4659      	mov	r1, fp
 800cebc:	f7f3 f9ee 	bl	800029c <__adddf3>
 800cec0:	4682      	mov	sl, r0
 800cec2:	468b      	mov	fp, r1
 800cec4:	2d0f      	cmp	r5, #15
 800cec6:	dc38      	bgt.n	800cf3a <_strtod_l+0x452>
 800cec8:	9b06      	ldr	r3, [sp, #24]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f43f ae50 	beq.w	800cb70 <_strtod_l+0x88>
 800ced0:	dd24      	ble.n	800cf1c <_strtod_l+0x434>
 800ced2:	2b16      	cmp	r3, #22
 800ced4:	dc0b      	bgt.n	800ceee <_strtod_l+0x406>
 800ced6:	496d      	ldr	r1, [pc, #436]	; (800d08c <_strtod_l+0x5a4>)
 800ced8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee0:	4652      	mov	r2, sl
 800cee2:	465b      	mov	r3, fp
 800cee4:	f7f3 fb90 	bl	8000608 <__aeabi_dmul>
 800cee8:	4682      	mov	sl, r0
 800ceea:	468b      	mov	fp, r1
 800ceec:	e640      	b.n	800cb70 <_strtod_l+0x88>
 800ceee:	9a06      	ldr	r2, [sp, #24]
 800cef0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cef4:	4293      	cmp	r3, r2
 800cef6:	db20      	blt.n	800cf3a <_strtod_l+0x452>
 800cef8:	4c64      	ldr	r4, [pc, #400]	; (800d08c <_strtod_l+0x5a4>)
 800cefa:	f1c5 050f 	rsb	r5, r5, #15
 800cefe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf02:	4652      	mov	r2, sl
 800cf04:	465b      	mov	r3, fp
 800cf06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf0a:	f7f3 fb7d 	bl	8000608 <__aeabi_dmul>
 800cf0e:	9b06      	ldr	r3, [sp, #24]
 800cf10:	1b5d      	subs	r5, r3, r5
 800cf12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf1a:	e7e3      	b.n	800cee4 <_strtod_l+0x3fc>
 800cf1c:	9b06      	ldr	r3, [sp, #24]
 800cf1e:	3316      	adds	r3, #22
 800cf20:	db0b      	blt.n	800cf3a <_strtod_l+0x452>
 800cf22:	9b05      	ldr	r3, [sp, #20]
 800cf24:	1b9e      	subs	r6, r3, r6
 800cf26:	4b59      	ldr	r3, [pc, #356]	; (800d08c <_strtod_l+0x5a4>)
 800cf28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cf2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf30:	4650      	mov	r0, sl
 800cf32:	4659      	mov	r1, fp
 800cf34:	f7f3 fc92 	bl	800085c <__aeabi_ddiv>
 800cf38:	e7d6      	b.n	800cee8 <_strtod_l+0x400>
 800cf3a:	9b06      	ldr	r3, [sp, #24]
 800cf3c:	eba5 0808 	sub.w	r8, r5, r8
 800cf40:	4498      	add	r8, r3
 800cf42:	f1b8 0f00 	cmp.w	r8, #0
 800cf46:	dd74      	ble.n	800d032 <_strtod_l+0x54a>
 800cf48:	f018 030f 	ands.w	r3, r8, #15
 800cf4c:	d00a      	beq.n	800cf64 <_strtod_l+0x47c>
 800cf4e:	494f      	ldr	r1, [pc, #316]	; (800d08c <_strtod_l+0x5a4>)
 800cf50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf54:	4652      	mov	r2, sl
 800cf56:	465b      	mov	r3, fp
 800cf58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf5c:	f7f3 fb54 	bl	8000608 <__aeabi_dmul>
 800cf60:	4682      	mov	sl, r0
 800cf62:	468b      	mov	fp, r1
 800cf64:	f038 080f 	bics.w	r8, r8, #15
 800cf68:	d04f      	beq.n	800d00a <_strtod_l+0x522>
 800cf6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cf6e:	dd22      	ble.n	800cfb6 <_strtod_l+0x4ce>
 800cf70:	2500      	movs	r5, #0
 800cf72:	462e      	mov	r6, r5
 800cf74:	9507      	str	r5, [sp, #28]
 800cf76:	9505      	str	r5, [sp, #20]
 800cf78:	2322      	movs	r3, #34	; 0x22
 800cf7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d094 <_strtod_l+0x5ac>
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	f04f 0a00 	mov.w	sl, #0
 800cf84:	9b07      	ldr	r3, [sp, #28]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f43f adf2 	beq.w	800cb70 <_strtod_l+0x88>
 800cf8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f001 fe82 	bl	800ec98 <_Bfree>
 800cf94:	9905      	ldr	r1, [sp, #20]
 800cf96:	4620      	mov	r0, r4
 800cf98:	f001 fe7e 	bl	800ec98 <_Bfree>
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f001 fe7a 	bl	800ec98 <_Bfree>
 800cfa4:	9907      	ldr	r1, [sp, #28]
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f001 fe76 	bl	800ec98 <_Bfree>
 800cfac:	4629      	mov	r1, r5
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f001 fe72 	bl	800ec98 <_Bfree>
 800cfb4:	e5dc      	b.n	800cb70 <_strtod_l+0x88>
 800cfb6:	4b36      	ldr	r3, [pc, #216]	; (800d090 <_strtod_l+0x5a8>)
 800cfb8:	9304      	str	r3, [sp, #16]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cfc0:	4650      	mov	r0, sl
 800cfc2:	4659      	mov	r1, fp
 800cfc4:	4699      	mov	r9, r3
 800cfc6:	f1b8 0f01 	cmp.w	r8, #1
 800cfca:	dc21      	bgt.n	800d010 <_strtod_l+0x528>
 800cfcc:	b10b      	cbz	r3, 800cfd2 <_strtod_l+0x4ea>
 800cfce:	4682      	mov	sl, r0
 800cfd0:	468b      	mov	fp, r1
 800cfd2:	4b2f      	ldr	r3, [pc, #188]	; (800d090 <_strtod_l+0x5a8>)
 800cfd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cfd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cfdc:	4652      	mov	r2, sl
 800cfde:	465b      	mov	r3, fp
 800cfe0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cfe4:	f7f3 fb10 	bl	8000608 <__aeabi_dmul>
 800cfe8:	4b2a      	ldr	r3, [pc, #168]	; (800d094 <_strtod_l+0x5ac>)
 800cfea:	460a      	mov	r2, r1
 800cfec:	400b      	ands	r3, r1
 800cfee:	492a      	ldr	r1, [pc, #168]	; (800d098 <_strtod_l+0x5b0>)
 800cff0:	428b      	cmp	r3, r1
 800cff2:	4682      	mov	sl, r0
 800cff4:	d8bc      	bhi.n	800cf70 <_strtod_l+0x488>
 800cff6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cffa:	428b      	cmp	r3, r1
 800cffc:	bf86      	itte	hi
 800cffe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d09c <_strtod_l+0x5b4>
 800d002:	f04f 3aff 	movhi.w	sl, #4294967295
 800d006:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d00a:	2300      	movs	r3, #0
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	e084      	b.n	800d11a <_strtod_l+0x632>
 800d010:	f018 0f01 	tst.w	r8, #1
 800d014:	d005      	beq.n	800d022 <_strtod_l+0x53a>
 800d016:	9b04      	ldr	r3, [sp, #16]
 800d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01c:	f7f3 faf4 	bl	8000608 <__aeabi_dmul>
 800d020:	2301      	movs	r3, #1
 800d022:	9a04      	ldr	r2, [sp, #16]
 800d024:	3208      	adds	r2, #8
 800d026:	f109 0901 	add.w	r9, r9, #1
 800d02a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d02e:	9204      	str	r2, [sp, #16]
 800d030:	e7c9      	b.n	800cfc6 <_strtod_l+0x4de>
 800d032:	d0ea      	beq.n	800d00a <_strtod_l+0x522>
 800d034:	f1c8 0800 	rsb	r8, r8, #0
 800d038:	f018 020f 	ands.w	r2, r8, #15
 800d03c:	d00a      	beq.n	800d054 <_strtod_l+0x56c>
 800d03e:	4b13      	ldr	r3, [pc, #76]	; (800d08c <_strtod_l+0x5a4>)
 800d040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d044:	4650      	mov	r0, sl
 800d046:	4659      	mov	r1, fp
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 fc06 	bl	800085c <__aeabi_ddiv>
 800d050:	4682      	mov	sl, r0
 800d052:	468b      	mov	fp, r1
 800d054:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d058:	d0d7      	beq.n	800d00a <_strtod_l+0x522>
 800d05a:	f1b8 0f1f 	cmp.w	r8, #31
 800d05e:	dd1f      	ble.n	800d0a0 <_strtod_l+0x5b8>
 800d060:	2500      	movs	r5, #0
 800d062:	462e      	mov	r6, r5
 800d064:	9507      	str	r5, [sp, #28]
 800d066:	9505      	str	r5, [sp, #20]
 800d068:	2322      	movs	r3, #34	; 0x22
 800d06a:	f04f 0a00 	mov.w	sl, #0
 800d06e:	f04f 0b00 	mov.w	fp, #0
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	e786      	b.n	800cf84 <_strtod_l+0x49c>
 800d076:	bf00      	nop
 800d078:	08012d55 	.word	0x08012d55
 800d07c:	08012d98 	.word	0x08012d98
 800d080:	08012d4d 	.word	0x08012d4d
 800d084:	08012edc 	.word	0x08012edc
 800d088:	08013188 	.word	0x08013188
 800d08c:	08013068 	.word	0x08013068
 800d090:	08013040 	.word	0x08013040
 800d094:	7ff00000 	.word	0x7ff00000
 800d098:	7ca00000 	.word	0x7ca00000
 800d09c:	7fefffff 	.word	0x7fefffff
 800d0a0:	f018 0310 	ands.w	r3, r8, #16
 800d0a4:	bf18      	it	ne
 800d0a6:	236a      	movne	r3, #106	; 0x6a
 800d0a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d458 <_strtod_l+0x970>
 800d0ac:	9304      	str	r3, [sp, #16]
 800d0ae:	4650      	mov	r0, sl
 800d0b0:	4659      	mov	r1, fp
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f018 0f01 	tst.w	r8, #1
 800d0b8:	d004      	beq.n	800d0c4 <_strtod_l+0x5dc>
 800d0ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d0be:	f7f3 faa3 	bl	8000608 <__aeabi_dmul>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d0c8:	f109 0908 	add.w	r9, r9, #8
 800d0cc:	d1f2      	bne.n	800d0b4 <_strtod_l+0x5cc>
 800d0ce:	b10b      	cbz	r3, 800d0d4 <_strtod_l+0x5ec>
 800d0d0:	4682      	mov	sl, r0
 800d0d2:	468b      	mov	fp, r1
 800d0d4:	9b04      	ldr	r3, [sp, #16]
 800d0d6:	b1c3      	cbz	r3, 800d10a <_strtod_l+0x622>
 800d0d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	4659      	mov	r1, fp
 800d0e4:	dd11      	ble.n	800d10a <_strtod_l+0x622>
 800d0e6:	2b1f      	cmp	r3, #31
 800d0e8:	f340 8124 	ble.w	800d334 <_strtod_l+0x84c>
 800d0ec:	2b34      	cmp	r3, #52	; 0x34
 800d0ee:	bfde      	ittt	le
 800d0f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d0f4:	f04f 33ff 	movle.w	r3, #4294967295
 800d0f8:	fa03 f202 	lslle.w	r2, r3, r2
 800d0fc:	f04f 0a00 	mov.w	sl, #0
 800d100:	bfcc      	ite	gt
 800d102:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d106:	ea02 0b01 	andle.w	fp, r2, r1
 800d10a:	2200      	movs	r2, #0
 800d10c:	2300      	movs	r3, #0
 800d10e:	4650      	mov	r0, sl
 800d110:	4659      	mov	r1, fp
 800d112:	f7f3 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d116:	2800      	cmp	r0, #0
 800d118:	d1a2      	bne.n	800d060 <_strtod_l+0x578>
 800d11a:	9b07      	ldr	r3, [sp, #28]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	9908      	ldr	r1, [sp, #32]
 800d120:	462b      	mov	r3, r5
 800d122:	463a      	mov	r2, r7
 800d124:	4620      	mov	r0, r4
 800d126:	f001 fe1f 	bl	800ed68 <__s2b>
 800d12a:	9007      	str	r0, [sp, #28]
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f43f af1f 	beq.w	800cf70 <_strtod_l+0x488>
 800d132:	9b05      	ldr	r3, [sp, #20]
 800d134:	1b9e      	subs	r6, r3, r6
 800d136:	9b06      	ldr	r3, [sp, #24]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	bfb4      	ite	lt
 800d13c:	4633      	movlt	r3, r6
 800d13e:	2300      	movge	r3, #0
 800d140:	930c      	str	r3, [sp, #48]	; 0x30
 800d142:	9b06      	ldr	r3, [sp, #24]
 800d144:	2500      	movs	r5, #0
 800d146:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d14a:	9312      	str	r3, [sp, #72]	; 0x48
 800d14c:	462e      	mov	r6, r5
 800d14e:	9b07      	ldr	r3, [sp, #28]
 800d150:	4620      	mov	r0, r4
 800d152:	6859      	ldr	r1, [r3, #4]
 800d154:	f001 fd60 	bl	800ec18 <_Balloc>
 800d158:	9005      	str	r0, [sp, #20]
 800d15a:	2800      	cmp	r0, #0
 800d15c:	f43f af0c 	beq.w	800cf78 <_strtod_l+0x490>
 800d160:	9b07      	ldr	r3, [sp, #28]
 800d162:	691a      	ldr	r2, [r3, #16]
 800d164:	3202      	adds	r2, #2
 800d166:	f103 010c 	add.w	r1, r3, #12
 800d16a:	0092      	lsls	r2, r2, #2
 800d16c:	300c      	adds	r0, #12
 800d16e:	f7fe fde7 	bl	800bd40 <memcpy>
 800d172:	ec4b ab10 	vmov	d0, sl, fp
 800d176:	aa1a      	add	r2, sp, #104	; 0x68
 800d178:	a919      	add	r1, sp, #100	; 0x64
 800d17a:	4620      	mov	r0, r4
 800d17c:	f002 f93a 	bl	800f3f4 <__d2b>
 800d180:	ec4b ab18 	vmov	d8, sl, fp
 800d184:	9018      	str	r0, [sp, #96]	; 0x60
 800d186:	2800      	cmp	r0, #0
 800d188:	f43f aef6 	beq.w	800cf78 <_strtod_l+0x490>
 800d18c:	2101      	movs	r1, #1
 800d18e:	4620      	mov	r0, r4
 800d190:	f001 fe84 	bl	800ee9c <__i2b>
 800d194:	4606      	mov	r6, r0
 800d196:	2800      	cmp	r0, #0
 800d198:	f43f aeee 	beq.w	800cf78 <_strtod_l+0x490>
 800d19c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d19e:	9904      	ldr	r1, [sp, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bfab      	itete	ge
 800d1a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d1a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d1a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d1aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d1ae:	bfac      	ite	ge
 800d1b0:	eb03 0902 	addge.w	r9, r3, r2
 800d1b4:	1ad7      	sublt	r7, r2, r3
 800d1b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d1b8:	eba3 0801 	sub.w	r8, r3, r1
 800d1bc:	4490      	add	r8, r2
 800d1be:	4ba1      	ldr	r3, [pc, #644]	; (800d444 <_strtod_l+0x95c>)
 800d1c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1c4:	4598      	cmp	r8, r3
 800d1c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d1ca:	f280 80c7 	bge.w	800d35c <_strtod_l+0x874>
 800d1ce:	eba3 0308 	sub.w	r3, r3, r8
 800d1d2:	2b1f      	cmp	r3, #31
 800d1d4:	eba2 0203 	sub.w	r2, r2, r3
 800d1d8:	f04f 0101 	mov.w	r1, #1
 800d1dc:	f300 80b1 	bgt.w	800d342 <_strtod_l+0x85a>
 800d1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1e4:	930d      	str	r3, [sp, #52]	; 0x34
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	9308      	str	r3, [sp, #32]
 800d1ea:	eb09 0802 	add.w	r8, r9, r2
 800d1ee:	9b04      	ldr	r3, [sp, #16]
 800d1f0:	45c1      	cmp	r9, r8
 800d1f2:	4417      	add	r7, r2
 800d1f4:	441f      	add	r7, r3
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	bfa8      	it	ge
 800d1fa:	4643      	movge	r3, r8
 800d1fc:	42bb      	cmp	r3, r7
 800d1fe:	bfa8      	it	ge
 800d200:	463b      	movge	r3, r7
 800d202:	2b00      	cmp	r3, #0
 800d204:	bfc2      	ittt	gt
 800d206:	eba8 0803 	subgt.w	r8, r8, r3
 800d20a:	1aff      	subgt	r7, r7, r3
 800d20c:	eba9 0903 	subgt.w	r9, r9, r3
 800d210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d212:	2b00      	cmp	r3, #0
 800d214:	dd17      	ble.n	800d246 <_strtod_l+0x75e>
 800d216:	4631      	mov	r1, r6
 800d218:	461a      	mov	r2, r3
 800d21a:	4620      	mov	r0, r4
 800d21c:	f001 fefe 	bl	800f01c <__pow5mult>
 800d220:	4606      	mov	r6, r0
 800d222:	2800      	cmp	r0, #0
 800d224:	f43f aea8 	beq.w	800cf78 <_strtod_l+0x490>
 800d228:	4601      	mov	r1, r0
 800d22a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d22c:	4620      	mov	r0, r4
 800d22e:	f001 fe4b 	bl	800eec8 <__multiply>
 800d232:	900b      	str	r0, [sp, #44]	; 0x2c
 800d234:	2800      	cmp	r0, #0
 800d236:	f43f ae9f 	beq.w	800cf78 <_strtod_l+0x490>
 800d23a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d23c:	4620      	mov	r0, r4
 800d23e:	f001 fd2b 	bl	800ec98 <_Bfree>
 800d242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d244:	9318      	str	r3, [sp, #96]	; 0x60
 800d246:	f1b8 0f00 	cmp.w	r8, #0
 800d24a:	f300 808c 	bgt.w	800d366 <_strtod_l+0x87e>
 800d24e:	9b06      	ldr	r3, [sp, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	dd08      	ble.n	800d266 <_strtod_l+0x77e>
 800d254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d256:	9905      	ldr	r1, [sp, #20]
 800d258:	4620      	mov	r0, r4
 800d25a:	f001 fedf 	bl	800f01c <__pow5mult>
 800d25e:	9005      	str	r0, [sp, #20]
 800d260:	2800      	cmp	r0, #0
 800d262:	f43f ae89 	beq.w	800cf78 <_strtod_l+0x490>
 800d266:	2f00      	cmp	r7, #0
 800d268:	dd08      	ble.n	800d27c <_strtod_l+0x794>
 800d26a:	9905      	ldr	r1, [sp, #20]
 800d26c:	463a      	mov	r2, r7
 800d26e:	4620      	mov	r0, r4
 800d270:	f001 ff2e 	bl	800f0d0 <__lshift>
 800d274:	9005      	str	r0, [sp, #20]
 800d276:	2800      	cmp	r0, #0
 800d278:	f43f ae7e 	beq.w	800cf78 <_strtod_l+0x490>
 800d27c:	f1b9 0f00 	cmp.w	r9, #0
 800d280:	dd08      	ble.n	800d294 <_strtod_l+0x7ac>
 800d282:	4631      	mov	r1, r6
 800d284:	464a      	mov	r2, r9
 800d286:	4620      	mov	r0, r4
 800d288:	f001 ff22 	bl	800f0d0 <__lshift>
 800d28c:	4606      	mov	r6, r0
 800d28e:	2800      	cmp	r0, #0
 800d290:	f43f ae72 	beq.w	800cf78 <_strtod_l+0x490>
 800d294:	9a05      	ldr	r2, [sp, #20]
 800d296:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d298:	4620      	mov	r0, r4
 800d29a:	f001 ffa5 	bl	800f1e8 <__mdiff>
 800d29e:	4605      	mov	r5, r0
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	f43f ae69 	beq.w	800cf78 <_strtod_l+0x490>
 800d2a6:	68c3      	ldr	r3, [r0, #12]
 800d2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60c3      	str	r3, [r0, #12]
 800d2ae:	4631      	mov	r1, r6
 800d2b0:	f001 ff7e 	bl	800f1b0 <__mcmp>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	da60      	bge.n	800d37a <_strtod_l+0x892>
 800d2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ba:	ea53 030a 	orrs.w	r3, r3, sl
 800d2be:	f040 8082 	bne.w	800d3c6 <_strtod_l+0x8de>
 800d2c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d17d      	bne.n	800d3c6 <_strtod_l+0x8de>
 800d2ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2ce:	0d1b      	lsrs	r3, r3, #20
 800d2d0:	051b      	lsls	r3, r3, #20
 800d2d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d2d6:	d976      	bls.n	800d3c6 <_strtod_l+0x8de>
 800d2d8:	696b      	ldr	r3, [r5, #20]
 800d2da:	b913      	cbnz	r3, 800d2e2 <_strtod_l+0x7fa>
 800d2dc:	692b      	ldr	r3, [r5, #16]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	dd71      	ble.n	800d3c6 <_strtod_l+0x8de>
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f001 fef2 	bl	800f0d0 <__lshift>
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	f001 ff5e 	bl	800f1b0 <__mcmp>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	dd66      	ble.n	800d3c6 <_strtod_l+0x8de>
 800d2f8:	9904      	ldr	r1, [sp, #16]
 800d2fa:	4a53      	ldr	r2, [pc, #332]	; (800d448 <_strtod_l+0x960>)
 800d2fc:	465b      	mov	r3, fp
 800d2fe:	2900      	cmp	r1, #0
 800d300:	f000 8081 	beq.w	800d406 <_strtod_l+0x91e>
 800d304:	ea02 010b 	and.w	r1, r2, fp
 800d308:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d30c:	dc7b      	bgt.n	800d406 <_strtod_l+0x91e>
 800d30e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d312:	f77f aea9 	ble.w	800d068 <_strtod_l+0x580>
 800d316:	4b4d      	ldr	r3, [pc, #308]	; (800d44c <_strtod_l+0x964>)
 800d318:	4650      	mov	r0, sl
 800d31a:	4659      	mov	r1, fp
 800d31c:	2200      	movs	r2, #0
 800d31e:	f7f3 f973 	bl	8000608 <__aeabi_dmul>
 800d322:	460b      	mov	r3, r1
 800d324:	4303      	orrs	r3, r0
 800d326:	bf08      	it	eq
 800d328:	2322      	moveq	r3, #34	; 0x22
 800d32a:	4682      	mov	sl, r0
 800d32c:	468b      	mov	fp, r1
 800d32e:	bf08      	it	eq
 800d330:	6023      	streq	r3, [r4, #0]
 800d332:	e62b      	b.n	800cf8c <_strtod_l+0x4a4>
 800d334:	f04f 32ff 	mov.w	r2, #4294967295
 800d338:	fa02 f303 	lsl.w	r3, r2, r3
 800d33c:	ea03 0a0a 	and.w	sl, r3, sl
 800d340:	e6e3      	b.n	800d10a <_strtod_l+0x622>
 800d342:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d346:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d34a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d34e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d352:	fa01 f308 	lsl.w	r3, r1, r8
 800d356:	9308      	str	r3, [sp, #32]
 800d358:	910d      	str	r1, [sp, #52]	; 0x34
 800d35a:	e746      	b.n	800d1ea <_strtod_l+0x702>
 800d35c:	2300      	movs	r3, #0
 800d35e:	9308      	str	r3, [sp, #32]
 800d360:	2301      	movs	r3, #1
 800d362:	930d      	str	r3, [sp, #52]	; 0x34
 800d364:	e741      	b.n	800d1ea <_strtod_l+0x702>
 800d366:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d368:	4642      	mov	r2, r8
 800d36a:	4620      	mov	r0, r4
 800d36c:	f001 feb0 	bl	800f0d0 <__lshift>
 800d370:	9018      	str	r0, [sp, #96]	; 0x60
 800d372:	2800      	cmp	r0, #0
 800d374:	f47f af6b 	bne.w	800d24e <_strtod_l+0x766>
 800d378:	e5fe      	b.n	800cf78 <_strtod_l+0x490>
 800d37a:	465f      	mov	r7, fp
 800d37c:	d16e      	bne.n	800d45c <_strtod_l+0x974>
 800d37e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d384:	b342      	cbz	r2, 800d3d8 <_strtod_l+0x8f0>
 800d386:	4a32      	ldr	r2, [pc, #200]	; (800d450 <_strtod_l+0x968>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d128      	bne.n	800d3de <_strtod_l+0x8f6>
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	4651      	mov	r1, sl
 800d390:	b1eb      	cbz	r3, 800d3ce <_strtod_l+0x8e6>
 800d392:	4b2d      	ldr	r3, [pc, #180]	; (800d448 <_strtod_l+0x960>)
 800d394:	403b      	ands	r3, r7
 800d396:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d39a:	f04f 32ff 	mov.w	r2, #4294967295
 800d39e:	d819      	bhi.n	800d3d4 <_strtod_l+0x8ec>
 800d3a0:	0d1b      	lsrs	r3, r3, #20
 800d3a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3aa:	4299      	cmp	r1, r3
 800d3ac:	d117      	bne.n	800d3de <_strtod_l+0x8f6>
 800d3ae:	4b29      	ldr	r3, [pc, #164]	; (800d454 <_strtod_l+0x96c>)
 800d3b0:	429f      	cmp	r7, r3
 800d3b2:	d102      	bne.n	800d3ba <_strtod_l+0x8d2>
 800d3b4:	3101      	adds	r1, #1
 800d3b6:	f43f addf 	beq.w	800cf78 <_strtod_l+0x490>
 800d3ba:	4b23      	ldr	r3, [pc, #140]	; (800d448 <_strtod_l+0x960>)
 800d3bc:	403b      	ands	r3, r7
 800d3be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d3c2:	f04f 0a00 	mov.w	sl, #0
 800d3c6:	9b04      	ldr	r3, [sp, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1a4      	bne.n	800d316 <_strtod_l+0x82e>
 800d3cc:	e5de      	b.n	800cf8c <_strtod_l+0x4a4>
 800d3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d2:	e7ea      	b.n	800d3aa <_strtod_l+0x8c2>
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	e7e8      	b.n	800d3aa <_strtod_l+0x8c2>
 800d3d8:	ea53 030a 	orrs.w	r3, r3, sl
 800d3dc:	d08c      	beq.n	800d2f8 <_strtod_l+0x810>
 800d3de:	9b08      	ldr	r3, [sp, #32]
 800d3e0:	b1db      	cbz	r3, 800d41a <_strtod_l+0x932>
 800d3e2:	423b      	tst	r3, r7
 800d3e4:	d0ef      	beq.n	800d3c6 <_strtod_l+0x8de>
 800d3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3e8:	9a04      	ldr	r2, [sp, #16]
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	4659      	mov	r1, fp
 800d3ee:	b1c3      	cbz	r3, 800d422 <_strtod_l+0x93a>
 800d3f0:	f7ff fb5c 	bl	800caac <sulp>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	ec51 0b18 	vmov	r0, r1, d8
 800d3fc:	f7f2 ff4e 	bl	800029c <__adddf3>
 800d400:	4682      	mov	sl, r0
 800d402:	468b      	mov	fp, r1
 800d404:	e7df      	b.n	800d3c6 <_strtod_l+0x8de>
 800d406:	4013      	ands	r3, r2
 800d408:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d40c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d410:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d414:	f04f 3aff 	mov.w	sl, #4294967295
 800d418:	e7d5      	b.n	800d3c6 <_strtod_l+0x8de>
 800d41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d41c:	ea13 0f0a 	tst.w	r3, sl
 800d420:	e7e0      	b.n	800d3e4 <_strtod_l+0x8fc>
 800d422:	f7ff fb43 	bl	800caac <sulp>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	ec51 0b18 	vmov	r0, r1, d8
 800d42e:	f7f2 ff33 	bl	8000298 <__aeabi_dsub>
 800d432:	2200      	movs	r2, #0
 800d434:	2300      	movs	r3, #0
 800d436:	4682      	mov	sl, r0
 800d438:	468b      	mov	fp, r1
 800d43a:	f7f3 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0c1      	beq.n	800d3c6 <_strtod_l+0x8de>
 800d442:	e611      	b.n	800d068 <_strtod_l+0x580>
 800d444:	fffffc02 	.word	0xfffffc02
 800d448:	7ff00000 	.word	0x7ff00000
 800d44c:	39500000 	.word	0x39500000
 800d450:	000fffff 	.word	0x000fffff
 800d454:	7fefffff 	.word	0x7fefffff
 800d458:	08012db0 	.word	0x08012db0
 800d45c:	4631      	mov	r1, r6
 800d45e:	4628      	mov	r0, r5
 800d460:	f002 f824 	bl	800f4ac <__ratio>
 800d464:	ec59 8b10 	vmov	r8, r9, d0
 800d468:	ee10 0a10 	vmov	r0, s0
 800d46c:	2200      	movs	r2, #0
 800d46e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d472:	4649      	mov	r1, r9
 800d474:	f7f3 fb44 	bl	8000b00 <__aeabi_dcmple>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d07a      	beq.n	800d572 <_strtod_l+0xa8a>
 800d47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d04a      	beq.n	800d518 <_strtod_l+0xa30>
 800d482:	4b95      	ldr	r3, [pc, #596]	; (800d6d8 <_strtod_l+0xbf0>)
 800d484:	2200      	movs	r2, #0
 800d486:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d48a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d6d8 <_strtod_l+0xbf0>
 800d48e:	f04f 0800 	mov.w	r8, #0
 800d492:	4b92      	ldr	r3, [pc, #584]	; (800d6dc <_strtod_l+0xbf4>)
 800d494:	403b      	ands	r3, r7
 800d496:	930d      	str	r3, [sp, #52]	; 0x34
 800d498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d49a:	4b91      	ldr	r3, [pc, #580]	; (800d6e0 <_strtod_l+0xbf8>)
 800d49c:	429a      	cmp	r2, r3
 800d49e:	f040 80b0 	bne.w	800d602 <_strtod_l+0xb1a>
 800d4a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d4aa:	ec4b ab10 	vmov	d0, sl, fp
 800d4ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4b2:	f001 ff23 	bl	800f2fc <__ulp>
 800d4b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4ba:	ec53 2b10 	vmov	r2, r3, d0
 800d4be:	f7f3 f8a3 	bl	8000608 <__aeabi_dmul>
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	465b      	mov	r3, fp
 800d4c6:	f7f2 fee9 	bl	800029c <__adddf3>
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4983      	ldr	r1, [pc, #524]	; (800d6dc <_strtod_l+0xbf4>)
 800d4ce:	4a85      	ldr	r2, [pc, #532]	; (800d6e4 <_strtod_l+0xbfc>)
 800d4d0:	4019      	ands	r1, r3
 800d4d2:	4291      	cmp	r1, r2
 800d4d4:	4682      	mov	sl, r0
 800d4d6:	d960      	bls.n	800d59a <_strtod_l+0xab2>
 800d4d8:	ee18 3a90 	vmov	r3, s17
 800d4dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d104      	bne.n	800d4ee <_strtod_l+0xa06>
 800d4e4:	ee18 3a10 	vmov	r3, s16
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	f43f ad45 	beq.w	800cf78 <_strtod_l+0x490>
 800d4ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d6f0 <_strtod_l+0xc08>
 800d4f2:	f04f 3aff 	mov.w	sl, #4294967295
 800d4f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f001 fbcd 	bl	800ec98 <_Bfree>
 800d4fe:	9905      	ldr	r1, [sp, #20]
 800d500:	4620      	mov	r0, r4
 800d502:	f001 fbc9 	bl	800ec98 <_Bfree>
 800d506:	4631      	mov	r1, r6
 800d508:	4620      	mov	r0, r4
 800d50a:	f001 fbc5 	bl	800ec98 <_Bfree>
 800d50e:	4629      	mov	r1, r5
 800d510:	4620      	mov	r0, r4
 800d512:	f001 fbc1 	bl	800ec98 <_Bfree>
 800d516:	e61a      	b.n	800d14e <_strtod_l+0x666>
 800d518:	f1ba 0f00 	cmp.w	sl, #0
 800d51c:	d11b      	bne.n	800d556 <_strtod_l+0xa6e>
 800d51e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d522:	b9f3      	cbnz	r3, 800d562 <_strtod_l+0xa7a>
 800d524:	4b6c      	ldr	r3, [pc, #432]	; (800d6d8 <_strtod_l+0xbf0>)
 800d526:	2200      	movs	r2, #0
 800d528:	4640      	mov	r0, r8
 800d52a:	4649      	mov	r1, r9
 800d52c:	f7f3 fade 	bl	8000aec <__aeabi_dcmplt>
 800d530:	b9d0      	cbnz	r0, 800d568 <_strtod_l+0xa80>
 800d532:	4640      	mov	r0, r8
 800d534:	4649      	mov	r1, r9
 800d536:	4b6c      	ldr	r3, [pc, #432]	; (800d6e8 <_strtod_l+0xc00>)
 800d538:	2200      	movs	r2, #0
 800d53a:	f7f3 f865 	bl	8000608 <__aeabi_dmul>
 800d53e:	4680      	mov	r8, r0
 800d540:	4689      	mov	r9, r1
 800d542:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d546:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d54a:	9315      	str	r3, [sp, #84]	; 0x54
 800d54c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d554:	e79d      	b.n	800d492 <_strtod_l+0x9aa>
 800d556:	f1ba 0f01 	cmp.w	sl, #1
 800d55a:	d102      	bne.n	800d562 <_strtod_l+0xa7a>
 800d55c:	2f00      	cmp	r7, #0
 800d55e:	f43f ad83 	beq.w	800d068 <_strtod_l+0x580>
 800d562:	4b62      	ldr	r3, [pc, #392]	; (800d6ec <_strtod_l+0xc04>)
 800d564:	2200      	movs	r2, #0
 800d566:	e78e      	b.n	800d486 <_strtod_l+0x99e>
 800d568:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d6e8 <_strtod_l+0xc00>
 800d56c:	f04f 0800 	mov.w	r8, #0
 800d570:	e7e7      	b.n	800d542 <_strtod_l+0xa5a>
 800d572:	4b5d      	ldr	r3, [pc, #372]	; (800d6e8 <_strtod_l+0xc00>)
 800d574:	4640      	mov	r0, r8
 800d576:	4649      	mov	r1, r9
 800d578:	2200      	movs	r2, #0
 800d57a:	f7f3 f845 	bl	8000608 <__aeabi_dmul>
 800d57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d580:	4680      	mov	r8, r0
 800d582:	4689      	mov	r9, r1
 800d584:	b933      	cbnz	r3, 800d594 <_strtod_l+0xaac>
 800d586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d58a:	900e      	str	r0, [sp, #56]	; 0x38
 800d58c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d58e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d592:	e7dd      	b.n	800d550 <_strtod_l+0xa68>
 800d594:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d598:	e7f9      	b.n	800d58e <_strtod_l+0xaa6>
 800d59a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d59e:	9b04      	ldr	r3, [sp, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1a8      	bne.n	800d4f6 <_strtod_l+0xa0e>
 800d5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5aa:	0d1b      	lsrs	r3, r3, #20
 800d5ac:	051b      	lsls	r3, r3, #20
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d1a1      	bne.n	800d4f6 <_strtod_l+0xa0e>
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f3 fb87 	bl	8000cc8 <__aeabi_d2lz>
 800d5ba:	f7f2 fff7 	bl	80005ac <__aeabi_l2d>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	f7f2 fe67 	bl	8000298 <__aeabi_dsub>
 800d5ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5d0:	ea43 030a 	orr.w	r3, r3, sl
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	4680      	mov	r8, r0
 800d5d8:	4689      	mov	r9, r1
 800d5da:	d055      	beq.n	800d688 <_strtod_l+0xba0>
 800d5dc:	a336      	add	r3, pc, #216	; (adr r3, 800d6b8 <_strtod_l+0xbd0>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f3 fa83 	bl	8000aec <__aeabi_dcmplt>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	f47f acd0 	bne.w	800cf8c <_strtod_l+0x4a4>
 800d5ec:	a334      	add	r3, pc, #208	; (adr r3, 800d6c0 <_strtod_l+0xbd8>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	f7f3 fa97 	bl	8000b28 <__aeabi_dcmpgt>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	f43f af7b 	beq.w	800d4f6 <_strtod_l+0xa0e>
 800d600:	e4c4      	b.n	800cf8c <_strtod_l+0x4a4>
 800d602:	9b04      	ldr	r3, [sp, #16]
 800d604:	b333      	cbz	r3, 800d654 <_strtod_l+0xb6c>
 800d606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d608:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d60c:	d822      	bhi.n	800d654 <_strtod_l+0xb6c>
 800d60e:	a32e      	add	r3, pc, #184	; (adr r3, 800d6c8 <_strtod_l+0xbe0>)
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	4640      	mov	r0, r8
 800d616:	4649      	mov	r1, r9
 800d618:	f7f3 fa72 	bl	8000b00 <__aeabi_dcmple>
 800d61c:	b1a0      	cbz	r0, 800d648 <_strtod_l+0xb60>
 800d61e:	4649      	mov	r1, r9
 800d620:	4640      	mov	r0, r8
 800d622:	f7f3 fac9 	bl	8000bb8 <__aeabi_d2uiz>
 800d626:	2801      	cmp	r0, #1
 800d628:	bf38      	it	cc
 800d62a:	2001      	movcc	r0, #1
 800d62c:	f7f2 ff72 	bl	8000514 <__aeabi_ui2d>
 800d630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d632:	4680      	mov	r8, r0
 800d634:	4689      	mov	r9, r1
 800d636:	bb23      	cbnz	r3, 800d682 <_strtod_l+0xb9a>
 800d638:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d63c:	9010      	str	r0, [sp, #64]	; 0x40
 800d63e:	9311      	str	r3, [sp, #68]	; 0x44
 800d640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d644:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d64a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d64c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d650:	1a9b      	subs	r3, r3, r2
 800d652:	9309      	str	r3, [sp, #36]	; 0x24
 800d654:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d658:	eeb0 0a48 	vmov.f32	s0, s16
 800d65c:	eef0 0a68 	vmov.f32	s1, s17
 800d660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d664:	f001 fe4a 	bl	800f2fc <__ulp>
 800d668:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d66c:	ec53 2b10 	vmov	r2, r3, d0
 800d670:	f7f2 ffca 	bl	8000608 <__aeabi_dmul>
 800d674:	ec53 2b18 	vmov	r2, r3, d8
 800d678:	f7f2 fe10 	bl	800029c <__adddf3>
 800d67c:	4682      	mov	sl, r0
 800d67e:	468b      	mov	fp, r1
 800d680:	e78d      	b.n	800d59e <_strtod_l+0xab6>
 800d682:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d686:	e7db      	b.n	800d640 <_strtod_l+0xb58>
 800d688:	a311      	add	r3, pc, #68	; (adr r3, 800d6d0 <_strtod_l+0xbe8>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f3 fa2d 	bl	8000aec <__aeabi_dcmplt>
 800d692:	e7b2      	b.n	800d5fa <_strtod_l+0xb12>
 800d694:	2300      	movs	r3, #0
 800d696:	930a      	str	r3, [sp, #40]	; 0x28
 800d698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d69a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d69c:	6013      	str	r3, [r2, #0]
 800d69e:	f7ff ba6b 	b.w	800cb78 <_strtod_l+0x90>
 800d6a2:	2a65      	cmp	r2, #101	; 0x65
 800d6a4:	f43f ab5f 	beq.w	800cd66 <_strtod_l+0x27e>
 800d6a8:	2a45      	cmp	r2, #69	; 0x45
 800d6aa:	f43f ab5c 	beq.w	800cd66 <_strtod_l+0x27e>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	f7ff bb94 	b.w	800cddc <_strtod_l+0x2f4>
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	94a03595 	.word	0x94a03595
 800d6bc:	3fdfffff 	.word	0x3fdfffff
 800d6c0:	35afe535 	.word	0x35afe535
 800d6c4:	3fe00000 	.word	0x3fe00000
 800d6c8:	ffc00000 	.word	0xffc00000
 800d6cc:	41dfffff 	.word	0x41dfffff
 800d6d0:	94a03595 	.word	0x94a03595
 800d6d4:	3fcfffff 	.word	0x3fcfffff
 800d6d8:	3ff00000 	.word	0x3ff00000
 800d6dc:	7ff00000 	.word	0x7ff00000
 800d6e0:	7fe00000 	.word	0x7fe00000
 800d6e4:	7c9fffff 	.word	0x7c9fffff
 800d6e8:	3fe00000 	.word	0x3fe00000
 800d6ec:	bff00000 	.word	0xbff00000
 800d6f0:	7fefffff 	.word	0x7fefffff

0800d6f4 <_strtod_r>:
 800d6f4:	4b01      	ldr	r3, [pc, #4]	; (800d6fc <_strtod_r+0x8>)
 800d6f6:	f7ff b9f7 	b.w	800cae8 <_strtod_l>
 800d6fa:	bf00      	nop
 800d6fc:	200002a4 	.word	0x200002a4

0800d700 <_strtol_l.constprop.0>:
 800d700:	2b01      	cmp	r3, #1
 800d702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d706:	d001      	beq.n	800d70c <_strtol_l.constprop.0+0xc>
 800d708:	2b24      	cmp	r3, #36	; 0x24
 800d70a:	d906      	bls.n	800d71a <_strtol_l.constprop.0+0x1a>
 800d70c:	f7fe faee 	bl	800bcec <__errno>
 800d710:	2316      	movs	r3, #22
 800d712:	6003      	str	r3, [r0, #0]
 800d714:	2000      	movs	r0, #0
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d800 <_strtol_l.constprop.0+0x100>
 800d71e:	460d      	mov	r5, r1
 800d720:	462e      	mov	r6, r5
 800d722:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d726:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d72a:	f017 0708 	ands.w	r7, r7, #8
 800d72e:	d1f7      	bne.n	800d720 <_strtol_l.constprop.0+0x20>
 800d730:	2c2d      	cmp	r4, #45	; 0x2d
 800d732:	d132      	bne.n	800d79a <_strtol_l.constprop.0+0x9a>
 800d734:	782c      	ldrb	r4, [r5, #0]
 800d736:	2701      	movs	r7, #1
 800d738:	1cb5      	adds	r5, r6, #2
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d05b      	beq.n	800d7f6 <_strtol_l.constprop.0+0xf6>
 800d73e:	2b10      	cmp	r3, #16
 800d740:	d109      	bne.n	800d756 <_strtol_l.constprop.0+0x56>
 800d742:	2c30      	cmp	r4, #48	; 0x30
 800d744:	d107      	bne.n	800d756 <_strtol_l.constprop.0+0x56>
 800d746:	782c      	ldrb	r4, [r5, #0]
 800d748:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d74c:	2c58      	cmp	r4, #88	; 0x58
 800d74e:	d14d      	bne.n	800d7ec <_strtol_l.constprop.0+0xec>
 800d750:	786c      	ldrb	r4, [r5, #1]
 800d752:	2310      	movs	r3, #16
 800d754:	3502      	adds	r5, #2
 800d756:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d75a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d75e:	f04f 0c00 	mov.w	ip, #0
 800d762:	fbb8 f9f3 	udiv	r9, r8, r3
 800d766:	4666      	mov	r6, ip
 800d768:	fb03 8a19 	mls	sl, r3, r9, r8
 800d76c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d770:	f1be 0f09 	cmp.w	lr, #9
 800d774:	d816      	bhi.n	800d7a4 <_strtol_l.constprop.0+0xa4>
 800d776:	4674      	mov	r4, lr
 800d778:	42a3      	cmp	r3, r4
 800d77a:	dd24      	ble.n	800d7c6 <_strtol_l.constprop.0+0xc6>
 800d77c:	f1bc 0f00 	cmp.w	ip, #0
 800d780:	db1e      	blt.n	800d7c0 <_strtol_l.constprop.0+0xc0>
 800d782:	45b1      	cmp	r9, r6
 800d784:	d31c      	bcc.n	800d7c0 <_strtol_l.constprop.0+0xc0>
 800d786:	d101      	bne.n	800d78c <_strtol_l.constprop.0+0x8c>
 800d788:	45a2      	cmp	sl, r4
 800d78a:	db19      	blt.n	800d7c0 <_strtol_l.constprop.0+0xc0>
 800d78c:	fb06 4603 	mla	r6, r6, r3, r4
 800d790:	f04f 0c01 	mov.w	ip, #1
 800d794:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d798:	e7e8      	b.n	800d76c <_strtol_l.constprop.0+0x6c>
 800d79a:	2c2b      	cmp	r4, #43	; 0x2b
 800d79c:	bf04      	itt	eq
 800d79e:	782c      	ldrbeq	r4, [r5, #0]
 800d7a0:	1cb5      	addeq	r5, r6, #2
 800d7a2:	e7ca      	b.n	800d73a <_strtol_l.constprop.0+0x3a>
 800d7a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d7a8:	f1be 0f19 	cmp.w	lr, #25
 800d7ac:	d801      	bhi.n	800d7b2 <_strtol_l.constprop.0+0xb2>
 800d7ae:	3c37      	subs	r4, #55	; 0x37
 800d7b0:	e7e2      	b.n	800d778 <_strtol_l.constprop.0+0x78>
 800d7b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d7b6:	f1be 0f19 	cmp.w	lr, #25
 800d7ba:	d804      	bhi.n	800d7c6 <_strtol_l.constprop.0+0xc6>
 800d7bc:	3c57      	subs	r4, #87	; 0x57
 800d7be:	e7db      	b.n	800d778 <_strtol_l.constprop.0+0x78>
 800d7c0:	f04f 3cff 	mov.w	ip, #4294967295
 800d7c4:	e7e6      	b.n	800d794 <_strtol_l.constprop.0+0x94>
 800d7c6:	f1bc 0f00 	cmp.w	ip, #0
 800d7ca:	da05      	bge.n	800d7d8 <_strtol_l.constprop.0+0xd8>
 800d7cc:	2322      	movs	r3, #34	; 0x22
 800d7ce:	6003      	str	r3, [r0, #0]
 800d7d0:	4646      	mov	r6, r8
 800d7d2:	b942      	cbnz	r2, 800d7e6 <_strtol_l.constprop.0+0xe6>
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	e79e      	b.n	800d716 <_strtol_l.constprop.0+0x16>
 800d7d8:	b107      	cbz	r7, 800d7dc <_strtol_l.constprop.0+0xdc>
 800d7da:	4276      	negs	r6, r6
 800d7dc:	2a00      	cmp	r2, #0
 800d7de:	d0f9      	beq.n	800d7d4 <_strtol_l.constprop.0+0xd4>
 800d7e0:	f1bc 0f00 	cmp.w	ip, #0
 800d7e4:	d000      	beq.n	800d7e8 <_strtol_l.constprop.0+0xe8>
 800d7e6:	1e69      	subs	r1, r5, #1
 800d7e8:	6011      	str	r1, [r2, #0]
 800d7ea:	e7f3      	b.n	800d7d4 <_strtol_l.constprop.0+0xd4>
 800d7ec:	2430      	movs	r4, #48	; 0x30
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1b1      	bne.n	800d756 <_strtol_l.constprop.0+0x56>
 800d7f2:	2308      	movs	r3, #8
 800d7f4:	e7af      	b.n	800d756 <_strtol_l.constprop.0+0x56>
 800d7f6:	2c30      	cmp	r4, #48	; 0x30
 800d7f8:	d0a5      	beq.n	800d746 <_strtol_l.constprop.0+0x46>
 800d7fa:	230a      	movs	r3, #10
 800d7fc:	e7ab      	b.n	800d756 <_strtol_l.constprop.0+0x56>
 800d7fe:	bf00      	nop
 800d800:	08012dd9 	.word	0x08012dd9

0800d804 <_strtol_r>:
 800d804:	f7ff bf7c 	b.w	800d700 <_strtol_l.constprop.0>

0800d808 <quorem>:
 800d808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	6903      	ldr	r3, [r0, #16]
 800d80e:	690c      	ldr	r4, [r1, #16]
 800d810:	42a3      	cmp	r3, r4
 800d812:	4607      	mov	r7, r0
 800d814:	f2c0 8081 	blt.w	800d91a <quorem+0x112>
 800d818:	3c01      	subs	r4, #1
 800d81a:	f101 0814 	add.w	r8, r1, #20
 800d81e:	f100 0514 	add.w	r5, r0, #20
 800d822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d826:	9301      	str	r3, [sp, #4]
 800d828:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d82c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d830:	3301      	adds	r3, #1
 800d832:	429a      	cmp	r2, r3
 800d834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d83c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d840:	d331      	bcc.n	800d8a6 <quorem+0x9e>
 800d842:	f04f 0e00 	mov.w	lr, #0
 800d846:	4640      	mov	r0, r8
 800d848:	46ac      	mov	ip, r5
 800d84a:	46f2      	mov	sl, lr
 800d84c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d850:	b293      	uxth	r3, r2
 800d852:	fb06 e303 	mla	r3, r6, r3, lr
 800d856:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	ebaa 0303 	sub.w	r3, sl, r3
 800d860:	f8dc a000 	ldr.w	sl, [ip]
 800d864:	0c12      	lsrs	r2, r2, #16
 800d866:	fa13 f38a 	uxtah	r3, r3, sl
 800d86a:	fb06 e202 	mla	r2, r6, r2, lr
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	9b00      	ldr	r3, [sp, #0]
 800d872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d876:	b292      	uxth	r2, r2
 800d878:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d87c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d880:	f8bd 3000 	ldrh.w	r3, [sp]
 800d884:	4581      	cmp	r9, r0
 800d886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d88a:	f84c 3b04 	str.w	r3, [ip], #4
 800d88e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d892:	d2db      	bcs.n	800d84c <quorem+0x44>
 800d894:	f855 300b 	ldr.w	r3, [r5, fp]
 800d898:	b92b      	cbnz	r3, 800d8a6 <quorem+0x9e>
 800d89a:	9b01      	ldr	r3, [sp, #4]
 800d89c:	3b04      	subs	r3, #4
 800d89e:	429d      	cmp	r5, r3
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	d32e      	bcc.n	800d902 <quorem+0xfa>
 800d8a4:	613c      	str	r4, [r7, #16]
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	f001 fc82 	bl	800f1b0 <__mcmp>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	db24      	blt.n	800d8fa <quorem+0xf2>
 800d8b0:	3601      	adds	r6, #1
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	f04f 0c00 	mov.w	ip, #0
 800d8b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8bc:	f8d0 e000 	ldr.w	lr, [r0]
 800d8c0:	b293      	uxth	r3, r2
 800d8c2:	ebac 0303 	sub.w	r3, ip, r3
 800d8c6:	0c12      	lsrs	r2, r2, #16
 800d8c8:	fa13 f38e 	uxtah	r3, r3, lr
 800d8cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8da:	45c1      	cmp	r9, r8
 800d8dc:	f840 3b04 	str.w	r3, [r0], #4
 800d8e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d8e4:	d2e8      	bcs.n	800d8b8 <quorem+0xb0>
 800d8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8ee:	b922      	cbnz	r2, 800d8fa <quorem+0xf2>
 800d8f0:	3b04      	subs	r3, #4
 800d8f2:	429d      	cmp	r5, r3
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	d30a      	bcc.n	800d90e <quorem+0x106>
 800d8f8:	613c      	str	r4, [r7, #16]
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	b003      	add	sp, #12
 800d8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d902:	6812      	ldr	r2, [r2, #0]
 800d904:	3b04      	subs	r3, #4
 800d906:	2a00      	cmp	r2, #0
 800d908:	d1cc      	bne.n	800d8a4 <quorem+0x9c>
 800d90a:	3c01      	subs	r4, #1
 800d90c:	e7c7      	b.n	800d89e <quorem+0x96>
 800d90e:	6812      	ldr	r2, [r2, #0]
 800d910:	3b04      	subs	r3, #4
 800d912:	2a00      	cmp	r2, #0
 800d914:	d1f0      	bne.n	800d8f8 <quorem+0xf0>
 800d916:	3c01      	subs	r4, #1
 800d918:	e7eb      	b.n	800d8f2 <quorem+0xea>
 800d91a:	2000      	movs	r0, #0
 800d91c:	e7ee      	b.n	800d8fc <quorem+0xf4>
	...

0800d920 <_dtoa_r>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	ed2d 8b04 	vpush	{d8-d9}
 800d928:	ec57 6b10 	vmov	r6, r7, d0
 800d92c:	b093      	sub	sp, #76	; 0x4c
 800d92e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d934:	9106      	str	r1, [sp, #24]
 800d936:	ee10 aa10 	vmov	sl, s0
 800d93a:	4604      	mov	r4, r0
 800d93c:	9209      	str	r2, [sp, #36]	; 0x24
 800d93e:	930c      	str	r3, [sp, #48]	; 0x30
 800d940:	46bb      	mov	fp, r7
 800d942:	b975      	cbnz	r5, 800d962 <_dtoa_r+0x42>
 800d944:	2010      	movs	r0, #16
 800d946:	f001 f94d 	bl	800ebe4 <malloc>
 800d94a:	4602      	mov	r2, r0
 800d94c:	6260      	str	r0, [r4, #36]	; 0x24
 800d94e:	b920      	cbnz	r0, 800d95a <_dtoa_r+0x3a>
 800d950:	4ba7      	ldr	r3, [pc, #668]	; (800dbf0 <_dtoa_r+0x2d0>)
 800d952:	21ea      	movs	r1, #234	; 0xea
 800d954:	48a7      	ldr	r0, [pc, #668]	; (800dbf4 <_dtoa_r+0x2d4>)
 800d956:	f002 f8ad 	bl	800fab4 <__assert_func>
 800d95a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d95e:	6005      	str	r5, [r0, #0]
 800d960:	60c5      	str	r5, [r0, #12]
 800d962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d964:	6819      	ldr	r1, [r3, #0]
 800d966:	b151      	cbz	r1, 800d97e <_dtoa_r+0x5e>
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	604a      	str	r2, [r1, #4]
 800d96c:	2301      	movs	r3, #1
 800d96e:	4093      	lsls	r3, r2
 800d970:	608b      	str	r3, [r1, #8]
 800d972:	4620      	mov	r0, r4
 800d974:	f001 f990 	bl	800ec98 <_Bfree>
 800d978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d97a:	2200      	movs	r2, #0
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	1e3b      	subs	r3, r7, #0
 800d980:	bfaa      	itet	ge
 800d982:	2300      	movge	r3, #0
 800d984:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d988:	f8c8 3000 	strge.w	r3, [r8]
 800d98c:	4b9a      	ldr	r3, [pc, #616]	; (800dbf8 <_dtoa_r+0x2d8>)
 800d98e:	bfbc      	itt	lt
 800d990:	2201      	movlt	r2, #1
 800d992:	f8c8 2000 	strlt.w	r2, [r8]
 800d996:	ea33 030b 	bics.w	r3, r3, fp
 800d99a:	d11b      	bne.n	800d9d4 <_dtoa_r+0xb4>
 800d99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d99e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9a8:	4333      	orrs	r3, r6
 800d9aa:	f000 8592 	beq.w	800e4d2 <_dtoa_r+0xbb2>
 800d9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9b0:	b963      	cbnz	r3, 800d9cc <_dtoa_r+0xac>
 800d9b2:	4b92      	ldr	r3, [pc, #584]	; (800dbfc <_dtoa_r+0x2dc>)
 800d9b4:	e022      	b.n	800d9fc <_dtoa_r+0xdc>
 800d9b6:	4b92      	ldr	r3, [pc, #584]	; (800dc00 <_dtoa_r+0x2e0>)
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	3308      	adds	r3, #8
 800d9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	9801      	ldr	r0, [sp, #4]
 800d9c2:	b013      	add	sp, #76	; 0x4c
 800d9c4:	ecbd 8b04 	vpop	{d8-d9}
 800d9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9cc:	4b8b      	ldr	r3, [pc, #556]	; (800dbfc <_dtoa_r+0x2dc>)
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	3303      	adds	r3, #3
 800d9d2:	e7f3      	b.n	800d9bc <_dtoa_r+0x9c>
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	4650      	mov	r0, sl
 800d9da:	4659      	mov	r1, fp
 800d9dc:	f7f3 f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9e0:	ec4b ab19 	vmov	d9, sl, fp
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	b158      	cbz	r0, 800da00 <_dtoa_r+0xe0>
 800d9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	6013      	str	r3, [r2, #0]
 800d9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 856b 	beq.w	800e4cc <_dtoa_r+0xbac>
 800d9f6:	4883      	ldr	r0, [pc, #524]	; (800dc04 <_dtoa_r+0x2e4>)
 800d9f8:	6018      	str	r0, [r3, #0]
 800d9fa:	1e43      	subs	r3, r0, #1
 800d9fc:	9301      	str	r3, [sp, #4]
 800d9fe:	e7df      	b.n	800d9c0 <_dtoa_r+0xa0>
 800da00:	ec4b ab10 	vmov	d0, sl, fp
 800da04:	aa10      	add	r2, sp, #64	; 0x40
 800da06:	a911      	add	r1, sp, #68	; 0x44
 800da08:	4620      	mov	r0, r4
 800da0a:	f001 fcf3 	bl	800f3f4 <__d2b>
 800da0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800da12:	ee08 0a10 	vmov	s16, r0
 800da16:	2d00      	cmp	r5, #0
 800da18:	f000 8084 	beq.w	800db24 <_dtoa_r+0x204>
 800da1c:	ee19 3a90 	vmov	r3, s19
 800da20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800da28:	4656      	mov	r6, sl
 800da2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800da2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800da36:	4b74      	ldr	r3, [pc, #464]	; (800dc08 <_dtoa_r+0x2e8>)
 800da38:	2200      	movs	r2, #0
 800da3a:	4630      	mov	r0, r6
 800da3c:	4639      	mov	r1, r7
 800da3e:	f7f2 fc2b 	bl	8000298 <__aeabi_dsub>
 800da42:	a365      	add	r3, pc, #404	; (adr r3, 800dbd8 <_dtoa_r+0x2b8>)
 800da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da48:	f7f2 fdde 	bl	8000608 <__aeabi_dmul>
 800da4c:	a364      	add	r3, pc, #400	; (adr r3, 800dbe0 <_dtoa_r+0x2c0>)
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	f7f2 fc23 	bl	800029c <__adddf3>
 800da56:	4606      	mov	r6, r0
 800da58:	4628      	mov	r0, r5
 800da5a:	460f      	mov	r7, r1
 800da5c:	f7f2 fd6a 	bl	8000534 <__aeabi_i2d>
 800da60:	a361      	add	r3, pc, #388	; (adr r3, 800dbe8 <_dtoa_r+0x2c8>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	f7f2 fdcf 	bl	8000608 <__aeabi_dmul>
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	4630      	mov	r0, r6
 800da70:	4639      	mov	r1, r7
 800da72:	f7f2 fc13 	bl	800029c <__adddf3>
 800da76:	4606      	mov	r6, r0
 800da78:	460f      	mov	r7, r1
 800da7a:	f7f3 f875 	bl	8000b68 <__aeabi_d2iz>
 800da7e:	2200      	movs	r2, #0
 800da80:	9000      	str	r0, [sp, #0]
 800da82:	2300      	movs	r3, #0
 800da84:	4630      	mov	r0, r6
 800da86:	4639      	mov	r1, r7
 800da88:	f7f3 f830 	bl	8000aec <__aeabi_dcmplt>
 800da8c:	b150      	cbz	r0, 800daa4 <_dtoa_r+0x184>
 800da8e:	9800      	ldr	r0, [sp, #0]
 800da90:	f7f2 fd50 	bl	8000534 <__aeabi_i2d>
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	f7f3 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 800da9c:	b910      	cbnz	r0, 800daa4 <_dtoa_r+0x184>
 800da9e:	9b00      	ldr	r3, [sp, #0]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	9b00      	ldr	r3, [sp, #0]
 800daa6:	2b16      	cmp	r3, #22
 800daa8:	d85a      	bhi.n	800db60 <_dtoa_r+0x240>
 800daaa:	9a00      	ldr	r2, [sp, #0]
 800daac:	4b57      	ldr	r3, [pc, #348]	; (800dc0c <_dtoa_r+0x2ec>)
 800daae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	ec51 0b19 	vmov	r0, r1, d9
 800daba:	f7f3 f817 	bl	8000aec <__aeabi_dcmplt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d050      	beq.n	800db64 <_dtoa_r+0x244>
 800dac2:	9b00      	ldr	r3, [sp, #0]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	2300      	movs	r3, #0
 800daca:	930b      	str	r3, [sp, #44]	; 0x2c
 800dacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dace:	1b5d      	subs	r5, r3, r5
 800dad0:	1e6b      	subs	r3, r5, #1
 800dad2:	9305      	str	r3, [sp, #20]
 800dad4:	bf45      	ittet	mi
 800dad6:	f1c5 0301 	rsbmi	r3, r5, #1
 800dada:	9304      	strmi	r3, [sp, #16]
 800dadc:	2300      	movpl	r3, #0
 800dade:	2300      	movmi	r3, #0
 800dae0:	bf4c      	ite	mi
 800dae2:	9305      	strmi	r3, [sp, #20]
 800dae4:	9304      	strpl	r3, [sp, #16]
 800dae6:	9b00      	ldr	r3, [sp, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	db3d      	blt.n	800db68 <_dtoa_r+0x248>
 800daec:	9b05      	ldr	r3, [sp, #20]
 800daee:	9a00      	ldr	r2, [sp, #0]
 800daf0:	920a      	str	r2, [sp, #40]	; 0x28
 800daf2:	4413      	add	r3, r2
 800daf4:	9305      	str	r3, [sp, #20]
 800daf6:	2300      	movs	r3, #0
 800daf8:	9307      	str	r3, [sp, #28]
 800dafa:	9b06      	ldr	r3, [sp, #24]
 800dafc:	2b09      	cmp	r3, #9
 800dafe:	f200 8089 	bhi.w	800dc14 <_dtoa_r+0x2f4>
 800db02:	2b05      	cmp	r3, #5
 800db04:	bfc4      	itt	gt
 800db06:	3b04      	subgt	r3, #4
 800db08:	9306      	strgt	r3, [sp, #24]
 800db0a:	9b06      	ldr	r3, [sp, #24]
 800db0c:	f1a3 0302 	sub.w	r3, r3, #2
 800db10:	bfcc      	ite	gt
 800db12:	2500      	movgt	r5, #0
 800db14:	2501      	movle	r5, #1
 800db16:	2b03      	cmp	r3, #3
 800db18:	f200 8087 	bhi.w	800dc2a <_dtoa_r+0x30a>
 800db1c:	e8df f003 	tbb	[pc, r3]
 800db20:	59383a2d 	.word	0x59383a2d
 800db24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800db28:	441d      	add	r5, r3
 800db2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800db2e:	2b20      	cmp	r3, #32
 800db30:	bfc1      	itttt	gt
 800db32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800db36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800db3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800db3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800db42:	bfda      	itte	le
 800db44:	f1c3 0320 	rsble	r3, r3, #32
 800db48:	fa06 f003 	lslle.w	r0, r6, r3
 800db4c:	4318      	orrgt	r0, r3
 800db4e:	f7f2 fce1 	bl	8000514 <__aeabi_ui2d>
 800db52:	2301      	movs	r3, #1
 800db54:	4606      	mov	r6, r0
 800db56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800db5a:	3d01      	subs	r5, #1
 800db5c:	930e      	str	r3, [sp, #56]	; 0x38
 800db5e:	e76a      	b.n	800da36 <_dtoa_r+0x116>
 800db60:	2301      	movs	r3, #1
 800db62:	e7b2      	b.n	800daca <_dtoa_r+0x1aa>
 800db64:	900b      	str	r0, [sp, #44]	; 0x2c
 800db66:	e7b1      	b.n	800dacc <_dtoa_r+0x1ac>
 800db68:	9b04      	ldr	r3, [sp, #16]
 800db6a:	9a00      	ldr	r2, [sp, #0]
 800db6c:	1a9b      	subs	r3, r3, r2
 800db6e:	9304      	str	r3, [sp, #16]
 800db70:	4253      	negs	r3, r2
 800db72:	9307      	str	r3, [sp, #28]
 800db74:	2300      	movs	r3, #0
 800db76:	930a      	str	r3, [sp, #40]	; 0x28
 800db78:	e7bf      	b.n	800dafa <_dtoa_r+0x1da>
 800db7a:	2300      	movs	r3, #0
 800db7c:	9308      	str	r3, [sp, #32]
 800db7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db80:	2b00      	cmp	r3, #0
 800db82:	dc55      	bgt.n	800dc30 <_dtoa_r+0x310>
 800db84:	2301      	movs	r3, #1
 800db86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800db8a:	461a      	mov	r2, r3
 800db8c:	9209      	str	r2, [sp, #36]	; 0x24
 800db8e:	e00c      	b.n	800dbaa <_dtoa_r+0x28a>
 800db90:	2301      	movs	r3, #1
 800db92:	e7f3      	b.n	800db7c <_dtoa_r+0x25c>
 800db94:	2300      	movs	r3, #0
 800db96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db98:	9308      	str	r3, [sp, #32]
 800db9a:	9b00      	ldr	r3, [sp, #0]
 800db9c:	4413      	add	r3, r2
 800db9e:	9302      	str	r3, [sp, #8]
 800dba0:	3301      	adds	r3, #1
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	9303      	str	r3, [sp, #12]
 800dba6:	bfb8      	it	lt
 800dba8:	2301      	movlt	r3, #1
 800dbaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dbac:	2200      	movs	r2, #0
 800dbae:	6042      	str	r2, [r0, #4]
 800dbb0:	2204      	movs	r2, #4
 800dbb2:	f102 0614 	add.w	r6, r2, #20
 800dbb6:	429e      	cmp	r6, r3
 800dbb8:	6841      	ldr	r1, [r0, #4]
 800dbba:	d93d      	bls.n	800dc38 <_dtoa_r+0x318>
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f001 f82b 	bl	800ec18 <_Balloc>
 800dbc2:	9001      	str	r0, [sp, #4]
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d13b      	bne.n	800dc40 <_dtoa_r+0x320>
 800dbc8:	4b11      	ldr	r3, [pc, #68]	; (800dc10 <_dtoa_r+0x2f0>)
 800dbca:	4602      	mov	r2, r0
 800dbcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dbd0:	e6c0      	b.n	800d954 <_dtoa_r+0x34>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e7df      	b.n	800db96 <_dtoa_r+0x276>
 800dbd6:	bf00      	nop
 800dbd8:	636f4361 	.word	0x636f4361
 800dbdc:	3fd287a7 	.word	0x3fd287a7
 800dbe0:	8b60c8b3 	.word	0x8b60c8b3
 800dbe4:	3fc68a28 	.word	0x3fc68a28
 800dbe8:	509f79fb 	.word	0x509f79fb
 800dbec:	3fd34413 	.word	0x3fd34413
 800dbf0:	08012ee6 	.word	0x08012ee6
 800dbf4:	08012efd 	.word	0x08012efd
 800dbf8:	7ff00000 	.word	0x7ff00000
 800dbfc:	08012ee2 	.word	0x08012ee2
 800dc00:	08012ed9 	.word	0x08012ed9
 800dc04:	08012d59 	.word	0x08012d59
 800dc08:	3ff80000 	.word	0x3ff80000
 800dc0c:	08013068 	.word	0x08013068
 800dc10:	08012f58 	.word	0x08012f58
 800dc14:	2501      	movs	r5, #1
 800dc16:	2300      	movs	r3, #0
 800dc18:	9306      	str	r3, [sp, #24]
 800dc1a:	9508      	str	r5, [sp, #32]
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc24:	2200      	movs	r2, #0
 800dc26:	2312      	movs	r3, #18
 800dc28:	e7b0      	b.n	800db8c <_dtoa_r+0x26c>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	9308      	str	r3, [sp, #32]
 800dc2e:	e7f5      	b.n	800dc1c <_dtoa_r+0x2fc>
 800dc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc36:	e7b8      	b.n	800dbaa <_dtoa_r+0x28a>
 800dc38:	3101      	adds	r1, #1
 800dc3a:	6041      	str	r1, [r0, #4]
 800dc3c:	0052      	lsls	r2, r2, #1
 800dc3e:	e7b8      	b.n	800dbb2 <_dtoa_r+0x292>
 800dc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc42:	9a01      	ldr	r2, [sp, #4]
 800dc44:	601a      	str	r2, [r3, #0]
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	2b0e      	cmp	r3, #14
 800dc4a:	f200 809d 	bhi.w	800dd88 <_dtoa_r+0x468>
 800dc4e:	2d00      	cmp	r5, #0
 800dc50:	f000 809a 	beq.w	800dd88 <_dtoa_r+0x468>
 800dc54:	9b00      	ldr	r3, [sp, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	dd32      	ble.n	800dcc0 <_dtoa_r+0x3a0>
 800dc5a:	4ab7      	ldr	r2, [pc, #732]	; (800df38 <_dtoa_r+0x618>)
 800dc5c:	f003 030f 	and.w	r3, r3, #15
 800dc60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dc64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc68:	9b00      	ldr	r3, [sp, #0]
 800dc6a:	05d8      	lsls	r0, r3, #23
 800dc6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dc70:	d516      	bpl.n	800dca0 <_dtoa_r+0x380>
 800dc72:	4bb2      	ldr	r3, [pc, #712]	; (800df3c <_dtoa_r+0x61c>)
 800dc74:	ec51 0b19 	vmov	r0, r1, d9
 800dc78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc7c:	f7f2 fdee 	bl	800085c <__aeabi_ddiv>
 800dc80:	f007 070f 	and.w	r7, r7, #15
 800dc84:	4682      	mov	sl, r0
 800dc86:	468b      	mov	fp, r1
 800dc88:	2503      	movs	r5, #3
 800dc8a:	4eac      	ldr	r6, [pc, #688]	; (800df3c <_dtoa_r+0x61c>)
 800dc8c:	b957      	cbnz	r7, 800dca4 <_dtoa_r+0x384>
 800dc8e:	4642      	mov	r2, r8
 800dc90:	464b      	mov	r3, r9
 800dc92:	4650      	mov	r0, sl
 800dc94:	4659      	mov	r1, fp
 800dc96:	f7f2 fde1 	bl	800085c <__aeabi_ddiv>
 800dc9a:	4682      	mov	sl, r0
 800dc9c:	468b      	mov	fp, r1
 800dc9e:	e028      	b.n	800dcf2 <_dtoa_r+0x3d2>
 800dca0:	2502      	movs	r5, #2
 800dca2:	e7f2      	b.n	800dc8a <_dtoa_r+0x36a>
 800dca4:	07f9      	lsls	r1, r7, #31
 800dca6:	d508      	bpl.n	800dcba <_dtoa_r+0x39a>
 800dca8:	4640      	mov	r0, r8
 800dcaa:	4649      	mov	r1, r9
 800dcac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dcb0:	f7f2 fcaa 	bl	8000608 <__aeabi_dmul>
 800dcb4:	3501      	adds	r5, #1
 800dcb6:	4680      	mov	r8, r0
 800dcb8:	4689      	mov	r9, r1
 800dcba:	107f      	asrs	r7, r7, #1
 800dcbc:	3608      	adds	r6, #8
 800dcbe:	e7e5      	b.n	800dc8c <_dtoa_r+0x36c>
 800dcc0:	f000 809b 	beq.w	800ddfa <_dtoa_r+0x4da>
 800dcc4:	9b00      	ldr	r3, [sp, #0]
 800dcc6:	4f9d      	ldr	r7, [pc, #628]	; (800df3c <_dtoa_r+0x61c>)
 800dcc8:	425e      	negs	r6, r3
 800dcca:	4b9b      	ldr	r3, [pc, #620]	; (800df38 <_dtoa_r+0x618>)
 800dccc:	f006 020f 	and.w	r2, r6, #15
 800dcd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd8:	ec51 0b19 	vmov	r0, r1, d9
 800dcdc:	f7f2 fc94 	bl	8000608 <__aeabi_dmul>
 800dce0:	1136      	asrs	r6, r6, #4
 800dce2:	4682      	mov	sl, r0
 800dce4:	468b      	mov	fp, r1
 800dce6:	2300      	movs	r3, #0
 800dce8:	2502      	movs	r5, #2
 800dcea:	2e00      	cmp	r6, #0
 800dcec:	d17a      	bne.n	800dde4 <_dtoa_r+0x4c4>
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1d3      	bne.n	800dc9a <_dtoa_r+0x37a>
 800dcf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	f000 8082 	beq.w	800ddfe <_dtoa_r+0x4de>
 800dcfa:	4b91      	ldr	r3, [pc, #580]	; (800df40 <_dtoa_r+0x620>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4650      	mov	r0, sl
 800dd00:	4659      	mov	r1, fp
 800dd02:	f7f2 fef3 	bl	8000aec <__aeabi_dcmplt>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d079      	beq.n	800ddfe <_dtoa_r+0x4de>
 800dd0a:	9b03      	ldr	r3, [sp, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d076      	beq.n	800ddfe <_dtoa_r+0x4de>
 800dd10:	9b02      	ldr	r3, [sp, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	dd36      	ble.n	800dd84 <_dtoa_r+0x464>
 800dd16:	9b00      	ldr	r3, [sp, #0]
 800dd18:	4650      	mov	r0, sl
 800dd1a:	4659      	mov	r1, fp
 800dd1c:	1e5f      	subs	r7, r3, #1
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4b88      	ldr	r3, [pc, #544]	; (800df44 <_dtoa_r+0x624>)
 800dd22:	f7f2 fc71 	bl	8000608 <__aeabi_dmul>
 800dd26:	9e02      	ldr	r6, [sp, #8]
 800dd28:	4682      	mov	sl, r0
 800dd2a:	468b      	mov	fp, r1
 800dd2c:	3501      	adds	r5, #1
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f7f2 fc00 	bl	8000534 <__aeabi_i2d>
 800dd34:	4652      	mov	r2, sl
 800dd36:	465b      	mov	r3, fp
 800dd38:	f7f2 fc66 	bl	8000608 <__aeabi_dmul>
 800dd3c:	4b82      	ldr	r3, [pc, #520]	; (800df48 <_dtoa_r+0x628>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f7f2 faac 	bl	800029c <__adddf3>
 800dd44:	46d0      	mov	r8, sl
 800dd46:	46d9      	mov	r9, fp
 800dd48:	4682      	mov	sl, r0
 800dd4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dd4e:	2e00      	cmp	r6, #0
 800dd50:	d158      	bne.n	800de04 <_dtoa_r+0x4e4>
 800dd52:	4b7e      	ldr	r3, [pc, #504]	; (800df4c <_dtoa_r+0x62c>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	4640      	mov	r0, r8
 800dd58:	4649      	mov	r1, r9
 800dd5a:	f7f2 fa9d 	bl	8000298 <__aeabi_dsub>
 800dd5e:	4652      	mov	r2, sl
 800dd60:	465b      	mov	r3, fp
 800dd62:	4680      	mov	r8, r0
 800dd64:	4689      	mov	r9, r1
 800dd66:	f7f2 fedf 	bl	8000b28 <__aeabi_dcmpgt>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	f040 8295 	bne.w	800e29a <_dtoa_r+0x97a>
 800dd70:	4652      	mov	r2, sl
 800dd72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dd76:	4640      	mov	r0, r8
 800dd78:	4649      	mov	r1, r9
 800dd7a:	f7f2 feb7 	bl	8000aec <__aeabi_dcmplt>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f040 8289 	bne.w	800e296 <_dtoa_r+0x976>
 800dd84:	ec5b ab19 	vmov	sl, fp, d9
 800dd88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f2c0 8148 	blt.w	800e020 <_dtoa_r+0x700>
 800dd90:	9a00      	ldr	r2, [sp, #0]
 800dd92:	2a0e      	cmp	r2, #14
 800dd94:	f300 8144 	bgt.w	800e020 <_dtoa_r+0x700>
 800dd98:	4b67      	ldr	r3, [pc, #412]	; (800df38 <_dtoa_r+0x618>)
 800dd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f280 80d5 	bge.w	800df54 <_dtoa_r+0x634>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f300 80d1 	bgt.w	800df54 <_dtoa_r+0x634>
 800ddb2:	f040 826f 	bne.w	800e294 <_dtoa_r+0x974>
 800ddb6:	4b65      	ldr	r3, [pc, #404]	; (800df4c <_dtoa_r+0x62c>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	4640      	mov	r0, r8
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	f7f2 fc23 	bl	8000608 <__aeabi_dmul>
 800ddc2:	4652      	mov	r2, sl
 800ddc4:	465b      	mov	r3, fp
 800ddc6:	f7f2 fea5 	bl	8000b14 <__aeabi_dcmpge>
 800ddca:	9e03      	ldr	r6, [sp, #12]
 800ddcc:	4637      	mov	r7, r6
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f040 8245 	bne.w	800e25e <_dtoa_r+0x93e>
 800ddd4:	9d01      	ldr	r5, [sp, #4]
 800ddd6:	2331      	movs	r3, #49	; 0x31
 800ddd8:	f805 3b01 	strb.w	r3, [r5], #1
 800dddc:	9b00      	ldr	r3, [sp, #0]
 800ddde:	3301      	adds	r3, #1
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	e240      	b.n	800e266 <_dtoa_r+0x946>
 800dde4:	07f2      	lsls	r2, r6, #31
 800dde6:	d505      	bpl.n	800ddf4 <_dtoa_r+0x4d4>
 800dde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddec:	f7f2 fc0c 	bl	8000608 <__aeabi_dmul>
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	1076      	asrs	r6, r6, #1
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	e777      	b.n	800dcea <_dtoa_r+0x3ca>
 800ddfa:	2502      	movs	r5, #2
 800ddfc:	e779      	b.n	800dcf2 <_dtoa_r+0x3d2>
 800ddfe:	9f00      	ldr	r7, [sp, #0]
 800de00:	9e03      	ldr	r6, [sp, #12]
 800de02:	e794      	b.n	800dd2e <_dtoa_r+0x40e>
 800de04:	9901      	ldr	r1, [sp, #4]
 800de06:	4b4c      	ldr	r3, [pc, #304]	; (800df38 <_dtoa_r+0x618>)
 800de08:	4431      	add	r1, r6
 800de0a:	910d      	str	r1, [sp, #52]	; 0x34
 800de0c:	9908      	ldr	r1, [sp, #32]
 800de0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de16:	2900      	cmp	r1, #0
 800de18:	d043      	beq.n	800dea2 <_dtoa_r+0x582>
 800de1a:	494d      	ldr	r1, [pc, #308]	; (800df50 <_dtoa_r+0x630>)
 800de1c:	2000      	movs	r0, #0
 800de1e:	f7f2 fd1d 	bl	800085c <__aeabi_ddiv>
 800de22:	4652      	mov	r2, sl
 800de24:	465b      	mov	r3, fp
 800de26:	f7f2 fa37 	bl	8000298 <__aeabi_dsub>
 800de2a:	9d01      	ldr	r5, [sp, #4]
 800de2c:	4682      	mov	sl, r0
 800de2e:	468b      	mov	fp, r1
 800de30:	4649      	mov	r1, r9
 800de32:	4640      	mov	r0, r8
 800de34:	f7f2 fe98 	bl	8000b68 <__aeabi_d2iz>
 800de38:	4606      	mov	r6, r0
 800de3a:	f7f2 fb7b 	bl	8000534 <__aeabi_i2d>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4640      	mov	r0, r8
 800de44:	4649      	mov	r1, r9
 800de46:	f7f2 fa27 	bl	8000298 <__aeabi_dsub>
 800de4a:	3630      	adds	r6, #48	; 0x30
 800de4c:	f805 6b01 	strb.w	r6, [r5], #1
 800de50:	4652      	mov	r2, sl
 800de52:	465b      	mov	r3, fp
 800de54:	4680      	mov	r8, r0
 800de56:	4689      	mov	r9, r1
 800de58:	f7f2 fe48 	bl	8000aec <__aeabi_dcmplt>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d163      	bne.n	800df28 <_dtoa_r+0x608>
 800de60:	4642      	mov	r2, r8
 800de62:	464b      	mov	r3, r9
 800de64:	4936      	ldr	r1, [pc, #216]	; (800df40 <_dtoa_r+0x620>)
 800de66:	2000      	movs	r0, #0
 800de68:	f7f2 fa16 	bl	8000298 <__aeabi_dsub>
 800de6c:	4652      	mov	r2, sl
 800de6e:	465b      	mov	r3, fp
 800de70:	f7f2 fe3c 	bl	8000aec <__aeabi_dcmplt>
 800de74:	2800      	cmp	r0, #0
 800de76:	f040 80b5 	bne.w	800dfe4 <_dtoa_r+0x6c4>
 800de7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de7c:	429d      	cmp	r5, r3
 800de7e:	d081      	beq.n	800dd84 <_dtoa_r+0x464>
 800de80:	4b30      	ldr	r3, [pc, #192]	; (800df44 <_dtoa_r+0x624>)
 800de82:	2200      	movs	r2, #0
 800de84:	4650      	mov	r0, sl
 800de86:	4659      	mov	r1, fp
 800de88:	f7f2 fbbe 	bl	8000608 <__aeabi_dmul>
 800de8c:	4b2d      	ldr	r3, [pc, #180]	; (800df44 <_dtoa_r+0x624>)
 800de8e:	4682      	mov	sl, r0
 800de90:	468b      	mov	fp, r1
 800de92:	4640      	mov	r0, r8
 800de94:	4649      	mov	r1, r9
 800de96:	2200      	movs	r2, #0
 800de98:	f7f2 fbb6 	bl	8000608 <__aeabi_dmul>
 800de9c:	4680      	mov	r8, r0
 800de9e:	4689      	mov	r9, r1
 800dea0:	e7c6      	b.n	800de30 <_dtoa_r+0x510>
 800dea2:	4650      	mov	r0, sl
 800dea4:	4659      	mov	r1, fp
 800dea6:	f7f2 fbaf 	bl	8000608 <__aeabi_dmul>
 800deaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deac:	9d01      	ldr	r5, [sp, #4]
 800deae:	930f      	str	r3, [sp, #60]	; 0x3c
 800deb0:	4682      	mov	sl, r0
 800deb2:	468b      	mov	fp, r1
 800deb4:	4649      	mov	r1, r9
 800deb6:	4640      	mov	r0, r8
 800deb8:	f7f2 fe56 	bl	8000b68 <__aeabi_d2iz>
 800debc:	4606      	mov	r6, r0
 800debe:	f7f2 fb39 	bl	8000534 <__aeabi_i2d>
 800dec2:	3630      	adds	r6, #48	; 0x30
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4640      	mov	r0, r8
 800deca:	4649      	mov	r1, r9
 800decc:	f7f2 f9e4 	bl	8000298 <__aeabi_dsub>
 800ded0:	f805 6b01 	strb.w	r6, [r5], #1
 800ded4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ded6:	429d      	cmp	r5, r3
 800ded8:	4680      	mov	r8, r0
 800deda:	4689      	mov	r9, r1
 800dedc:	f04f 0200 	mov.w	r2, #0
 800dee0:	d124      	bne.n	800df2c <_dtoa_r+0x60c>
 800dee2:	4b1b      	ldr	r3, [pc, #108]	; (800df50 <_dtoa_r+0x630>)
 800dee4:	4650      	mov	r0, sl
 800dee6:	4659      	mov	r1, fp
 800dee8:	f7f2 f9d8 	bl	800029c <__adddf3>
 800deec:	4602      	mov	r2, r0
 800deee:	460b      	mov	r3, r1
 800def0:	4640      	mov	r0, r8
 800def2:	4649      	mov	r1, r9
 800def4:	f7f2 fe18 	bl	8000b28 <__aeabi_dcmpgt>
 800def8:	2800      	cmp	r0, #0
 800defa:	d173      	bne.n	800dfe4 <_dtoa_r+0x6c4>
 800defc:	4652      	mov	r2, sl
 800defe:	465b      	mov	r3, fp
 800df00:	4913      	ldr	r1, [pc, #76]	; (800df50 <_dtoa_r+0x630>)
 800df02:	2000      	movs	r0, #0
 800df04:	f7f2 f9c8 	bl	8000298 <__aeabi_dsub>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 fdec 	bl	8000aec <__aeabi_dcmplt>
 800df14:	2800      	cmp	r0, #0
 800df16:	f43f af35 	beq.w	800dd84 <_dtoa_r+0x464>
 800df1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df1c:	1e6b      	subs	r3, r5, #1
 800df1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df24:	2b30      	cmp	r3, #48	; 0x30
 800df26:	d0f8      	beq.n	800df1a <_dtoa_r+0x5fa>
 800df28:	9700      	str	r7, [sp, #0]
 800df2a:	e049      	b.n	800dfc0 <_dtoa_r+0x6a0>
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <_dtoa_r+0x624>)
 800df2e:	f7f2 fb6b 	bl	8000608 <__aeabi_dmul>
 800df32:	4680      	mov	r8, r0
 800df34:	4689      	mov	r9, r1
 800df36:	e7bd      	b.n	800deb4 <_dtoa_r+0x594>
 800df38:	08013068 	.word	0x08013068
 800df3c:	08013040 	.word	0x08013040
 800df40:	3ff00000 	.word	0x3ff00000
 800df44:	40240000 	.word	0x40240000
 800df48:	401c0000 	.word	0x401c0000
 800df4c:	40140000 	.word	0x40140000
 800df50:	3fe00000 	.word	0x3fe00000
 800df54:	9d01      	ldr	r5, [sp, #4]
 800df56:	4656      	mov	r6, sl
 800df58:	465f      	mov	r7, fp
 800df5a:	4642      	mov	r2, r8
 800df5c:	464b      	mov	r3, r9
 800df5e:	4630      	mov	r0, r6
 800df60:	4639      	mov	r1, r7
 800df62:	f7f2 fc7b 	bl	800085c <__aeabi_ddiv>
 800df66:	f7f2 fdff 	bl	8000b68 <__aeabi_d2iz>
 800df6a:	4682      	mov	sl, r0
 800df6c:	f7f2 fae2 	bl	8000534 <__aeabi_i2d>
 800df70:	4642      	mov	r2, r8
 800df72:	464b      	mov	r3, r9
 800df74:	f7f2 fb48 	bl	8000608 <__aeabi_dmul>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800df84:	f7f2 f988 	bl	8000298 <__aeabi_dsub>
 800df88:	f805 6b01 	strb.w	r6, [r5], #1
 800df8c:	9e01      	ldr	r6, [sp, #4]
 800df8e:	9f03      	ldr	r7, [sp, #12]
 800df90:	1bae      	subs	r6, r5, r6
 800df92:	42b7      	cmp	r7, r6
 800df94:	4602      	mov	r2, r0
 800df96:	460b      	mov	r3, r1
 800df98:	d135      	bne.n	800e006 <_dtoa_r+0x6e6>
 800df9a:	f7f2 f97f 	bl	800029c <__adddf3>
 800df9e:	4642      	mov	r2, r8
 800dfa0:	464b      	mov	r3, r9
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	460f      	mov	r7, r1
 800dfa6:	f7f2 fdbf 	bl	8000b28 <__aeabi_dcmpgt>
 800dfaa:	b9d0      	cbnz	r0, 800dfe2 <_dtoa_r+0x6c2>
 800dfac:	4642      	mov	r2, r8
 800dfae:	464b      	mov	r3, r9
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	f7f2 fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfb8:	b110      	cbz	r0, 800dfc0 <_dtoa_r+0x6a0>
 800dfba:	f01a 0f01 	tst.w	sl, #1
 800dfbe:	d110      	bne.n	800dfe2 <_dtoa_r+0x6c2>
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	ee18 1a10 	vmov	r1, s16
 800dfc6:	f000 fe67 	bl	800ec98 <_Bfree>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9800      	ldr	r0, [sp, #0]
 800dfce:	702b      	strb	r3, [r5, #0]
 800dfd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	6018      	str	r0, [r3, #0]
 800dfd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f43f acf1 	beq.w	800d9c0 <_dtoa_r+0xa0>
 800dfde:	601d      	str	r5, [r3, #0]
 800dfe0:	e4ee      	b.n	800d9c0 <_dtoa_r+0xa0>
 800dfe2:	9f00      	ldr	r7, [sp, #0]
 800dfe4:	462b      	mov	r3, r5
 800dfe6:	461d      	mov	r5, r3
 800dfe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfec:	2a39      	cmp	r2, #57	; 0x39
 800dfee:	d106      	bne.n	800dffe <_dtoa_r+0x6de>
 800dff0:	9a01      	ldr	r2, [sp, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d1f7      	bne.n	800dfe6 <_dtoa_r+0x6c6>
 800dff6:	9901      	ldr	r1, [sp, #4]
 800dff8:	2230      	movs	r2, #48	; 0x30
 800dffa:	3701      	adds	r7, #1
 800dffc:	700a      	strb	r2, [r1, #0]
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	3201      	adds	r2, #1
 800e002:	701a      	strb	r2, [r3, #0]
 800e004:	e790      	b.n	800df28 <_dtoa_r+0x608>
 800e006:	4ba6      	ldr	r3, [pc, #664]	; (800e2a0 <_dtoa_r+0x980>)
 800e008:	2200      	movs	r2, #0
 800e00a:	f7f2 fafd 	bl	8000608 <__aeabi_dmul>
 800e00e:	2200      	movs	r2, #0
 800e010:	2300      	movs	r3, #0
 800e012:	4606      	mov	r6, r0
 800e014:	460f      	mov	r7, r1
 800e016:	f7f2 fd5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d09d      	beq.n	800df5a <_dtoa_r+0x63a>
 800e01e:	e7cf      	b.n	800dfc0 <_dtoa_r+0x6a0>
 800e020:	9a08      	ldr	r2, [sp, #32]
 800e022:	2a00      	cmp	r2, #0
 800e024:	f000 80d7 	beq.w	800e1d6 <_dtoa_r+0x8b6>
 800e028:	9a06      	ldr	r2, [sp, #24]
 800e02a:	2a01      	cmp	r2, #1
 800e02c:	f300 80ba 	bgt.w	800e1a4 <_dtoa_r+0x884>
 800e030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e032:	2a00      	cmp	r2, #0
 800e034:	f000 80b2 	beq.w	800e19c <_dtoa_r+0x87c>
 800e038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e03c:	9e07      	ldr	r6, [sp, #28]
 800e03e:	9d04      	ldr	r5, [sp, #16]
 800e040:	9a04      	ldr	r2, [sp, #16]
 800e042:	441a      	add	r2, r3
 800e044:	9204      	str	r2, [sp, #16]
 800e046:	9a05      	ldr	r2, [sp, #20]
 800e048:	2101      	movs	r1, #1
 800e04a:	441a      	add	r2, r3
 800e04c:	4620      	mov	r0, r4
 800e04e:	9205      	str	r2, [sp, #20]
 800e050:	f000 ff24 	bl	800ee9c <__i2b>
 800e054:	4607      	mov	r7, r0
 800e056:	2d00      	cmp	r5, #0
 800e058:	dd0c      	ble.n	800e074 <_dtoa_r+0x754>
 800e05a:	9b05      	ldr	r3, [sp, #20]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	dd09      	ble.n	800e074 <_dtoa_r+0x754>
 800e060:	42ab      	cmp	r3, r5
 800e062:	9a04      	ldr	r2, [sp, #16]
 800e064:	bfa8      	it	ge
 800e066:	462b      	movge	r3, r5
 800e068:	1ad2      	subs	r2, r2, r3
 800e06a:	9204      	str	r2, [sp, #16]
 800e06c:	9a05      	ldr	r2, [sp, #20]
 800e06e:	1aed      	subs	r5, r5, r3
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	9305      	str	r3, [sp, #20]
 800e074:	9b07      	ldr	r3, [sp, #28]
 800e076:	b31b      	cbz	r3, 800e0c0 <_dtoa_r+0x7a0>
 800e078:	9b08      	ldr	r3, [sp, #32]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 80af 	beq.w	800e1de <_dtoa_r+0x8be>
 800e080:	2e00      	cmp	r6, #0
 800e082:	dd13      	ble.n	800e0ac <_dtoa_r+0x78c>
 800e084:	4639      	mov	r1, r7
 800e086:	4632      	mov	r2, r6
 800e088:	4620      	mov	r0, r4
 800e08a:	f000 ffc7 	bl	800f01c <__pow5mult>
 800e08e:	ee18 2a10 	vmov	r2, s16
 800e092:	4601      	mov	r1, r0
 800e094:	4607      	mov	r7, r0
 800e096:	4620      	mov	r0, r4
 800e098:	f000 ff16 	bl	800eec8 <__multiply>
 800e09c:	ee18 1a10 	vmov	r1, s16
 800e0a0:	4680      	mov	r8, r0
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f000 fdf8 	bl	800ec98 <_Bfree>
 800e0a8:	ee08 8a10 	vmov	s16, r8
 800e0ac:	9b07      	ldr	r3, [sp, #28]
 800e0ae:	1b9a      	subs	r2, r3, r6
 800e0b0:	d006      	beq.n	800e0c0 <_dtoa_r+0x7a0>
 800e0b2:	ee18 1a10 	vmov	r1, s16
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 ffb0 	bl	800f01c <__pow5mult>
 800e0bc:	ee08 0a10 	vmov	s16, r0
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f000 feea 	bl	800ee9c <__i2b>
 800e0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	f340 8088 	ble.w	800e1e2 <_dtoa_r+0x8c2>
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	4601      	mov	r1, r0
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 ffa0 	bl	800f01c <__pow5mult>
 800e0dc:	9b06      	ldr	r3, [sp, #24]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	f340 8081 	ble.w	800e1e8 <_dtoa_r+0x8c8>
 800e0e6:	f04f 0800 	mov.w	r8, #0
 800e0ea:	6933      	ldr	r3, [r6, #16]
 800e0ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e0f0:	6918      	ldr	r0, [r3, #16]
 800e0f2:	f000 fe83 	bl	800edfc <__hi0bits>
 800e0f6:	f1c0 0020 	rsb	r0, r0, #32
 800e0fa:	9b05      	ldr	r3, [sp, #20]
 800e0fc:	4418      	add	r0, r3
 800e0fe:	f010 001f 	ands.w	r0, r0, #31
 800e102:	f000 8092 	beq.w	800e22a <_dtoa_r+0x90a>
 800e106:	f1c0 0320 	rsb	r3, r0, #32
 800e10a:	2b04      	cmp	r3, #4
 800e10c:	f340 808a 	ble.w	800e224 <_dtoa_r+0x904>
 800e110:	f1c0 001c 	rsb	r0, r0, #28
 800e114:	9b04      	ldr	r3, [sp, #16]
 800e116:	4403      	add	r3, r0
 800e118:	9304      	str	r3, [sp, #16]
 800e11a:	9b05      	ldr	r3, [sp, #20]
 800e11c:	4403      	add	r3, r0
 800e11e:	4405      	add	r5, r0
 800e120:	9305      	str	r3, [sp, #20]
 800e122:	9b04      	ldr	r3, [sp, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	dd07      	ble.n	800e138 <_dtoa_r+0x818>
 800e128:	ee18 1a10 	vmov	r1, s16
 800e12c:	461a      	mov	r2, r3
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 ffce 	bl	800f0d0 <__lshift>
 800e134:	ee08 0a10 	vmov	s16, r0
 800e138:	9b05      	ldr	r3, [sp, #20]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	dd05      	ble.n	800e14a <_dtoa_r+0x82a>
 800e13e:	4631      	mov	r1, r6
 800e140:	461a      	mov	r2, r3
 800e142:	4620      	mov	r0, r4
 800e144:	f000 ffc4 	bl	800f0d0 <__lshift>
 800e148:	4606      	mov	r6, r0
 800e14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d06e      	beq.n	800e22e <_dtoa_r+0x90e>
 800e150:	ee18 0a10 	vmov	r0, s16
 800e154:	4631      	mov	r1, r6
 800e156:	f001 f82b 	bl	800f1b0 <__mcmp>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	da67      	bge.n	800e22e <_dtoa_r+0x90e>
 800e15e:	9b00      	ldr	r3, [sp, #0]
 800e160:	3b01      	subs	r3, #1
 800e162:	ee18 1a10 	vmov	r1, s16
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	220a      	movs	r2, #10
 800e16a:	2300      	movs	r3, #0
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 fdb5 	bl	800ecdc <__multadd>
 800e172:	9b08      	ldr	r3, [sp, #32]
 800e174:	ee08 0a10 	vmov	s16, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f000 81b1 	beq.w	800e4e0 <_dtoa_r+0xbc0>
 800e17e:	2300      	movs	r3, #0
 800e180:	4639      	mov	r1, r7
 800e182:	220a      	movs	r2, #10
 800e184:	4620      	mov	r0, r4
 800e186:	f000 fda9 	bl	800ecdc <__multadd>
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	4607      	mov	r7, r0
 800e190:	f300 808e 	bgt.w	800e2b0 <_dtoa_r+0x990>
 800e194:	9b06      	ldr	r3, [sp, #24]
 800e196:	2b02      	cmp	r3, #2
 800e198:	dc51      	bgt.n	800e23e <_dtoa_r+0x91e>
 800e19a:	e089      	b.n	800e2b0 <_dtoa_r+0x990>
 800e19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e19e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e1a2:	e74b      	b.n	800e03c <_dtoa_r+0x71c>
 800e1a4:	9b03      	ldr	r3, [sp, #12]
 800e1a6:	1e5e      	subs	r6, r3, #1
 800e1a8:	9b07      	ldr	r3, [sp, #28]
 800e1aa:	42b3      	cmp	r3, r6
 800e1ac:	bfbf      	itttt	lt
 800e1ae:	9b07      	ldrlt	r3, [sp, #28]
 800e1b0:	9607      	strlt	r6, [sp, #28]
 800e1b2:	1af2      	sublt	r2, r6, r3
 800e1b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e1b6:	bfb6      	itet	lt
 800e1b8:	189b      	addlt	r3, r3, r2
 800e1ba:	1b9e      	subge	r6, r3, r6
 800e1bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e1be:	9b03      	ldr	r3, [sp, #12]
 800e1c0:	bfb8      	it	lt
 800e1c2:	2600      	movlt	r6, #0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	bfb7      	itett	lt
 800e1c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e1cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e1d0:	1a9d      	sublt	r5, r3, r2
 800e1d2:	2300      	movlt	r3, #0
 800e1d4:	e734      	b.n	800e040 <_dtoa_r+0x720>
 800e1d6:	9e07      	ldr	r6, [sp, #28]
 800e1d8:	9d04      	ldr	r5, [sp, #16]
 800e1da:	9f08      	ldr	r7, [sp, #32]
 800e1dc:	e73b      	b.n	800e056 <_dtoa_r+0x736>
 800e1de:	9a07      	ldr	r2, [sp, #28]
 800e1e0:	e767      	b.n	800e0b2 <_dtoa_r+0x792>
 800e1e2:	9b06      	ldr	r3, [sp, #24]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	dc18      	bgt.n	800e21a <_dtoa_r+0x8fa>
 800e1e8:	f1ba 0f00 	cmp.w	sl, #0
 800e1ec:	d115      	bne.n	800e21a <_dtoa_r+0x8fa>
 800e1ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1f2:	b993      	cbnz	r3, 800e21a <_dtoa_r+0x8fa>
 800e1f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e1f8:	0d1b      	lsrs	r3, r3, #20
 800e1fa:	051b      	lsls	r3, r3, #20
 800e1fc:	b183      	cbz	r3, 800e220 <_dtoa_r+0x900>
 800e1fe:	9b04      	ldr	r3, [sp, #16]
 800e200:	3301      	adds	r3, #1
 800e202:	9304      	str	r3, [sp, #16]
 800e204:	9b05      	ldr	r3, [sp, #20]
 800e206:	3301      	adds	r3, #1
 800e208:	9305      	str	r3, [sp, #20]
 800e20a:	f04f 0801 	mov.w	r8, #1
 800e20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e210:	2b00      	cmp	r3, #0
 800e212:	f47f af6a 	bne.w	800e0ea <_dtoa_r+0x7ca>
 800e216:	2001      	movs	r0, #1
 800e218:	e76f      	b.n	800e0fa <_dtoa_r+0x7da>
 800e21a:	f04f 0800 	mov.w	r8, #0
 800e21e:	e7f6      	b.n	800e20e <_dtoa_r+0x8ee>
 800e220:	4698      	mov	r8, r3
 800e222:	e7f4      	b.n	800e20e <_dtoa_r+0x8ee>
 800e224:	f43f af7d 	beq.w	800e122 <_dtoa_r+0x802>
 800e228:	4618      	mov	r0, r3
 800e22a:	301c      	adds	r0, #28
 800e22c:	e772      	b.n	800e114 <_dtoa_r+0x7f4>
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	dc37      	bgt.n	800e2a4 <_dtoa_r+0x984>
 800e234:	9b06      	ldr	r3, [sp, #24]
 800e236:	2b02      	cmp	r3, #2
 800e238:	dd34      	ble.n	800e2a4 <_dtoa_r+0x984>
 800e23a:	9b03      	ldr	r3, [sp, #12]
 800e23c:	9302      	str	r3, [sp, #8]
 800e23e:	9b02      	ldr	r3, [sp, #8]
 800e240:	b96b      	cbnz	r3, 800e25e <_dtoa_r+0x93e>
 800e242:	4631      	mov	r1, r6
 800e244:	2205      	movs	r2, #5
 800e246:	4620      	mov	r0, r4
 800e248:	f000 fd48 	bl	800ecdc <__multadd>
 800e24c:	4601      	mov	r1, r0
 800e24e:	4606      	mov	r6, r0
 800e250:	ee18 0a10 	vmov	r0, s16
 800e254:	f000 ffac 	bl	800f1b0 <__mcmp>
 800e258:	2800      	cmp	r0, #0
 800e25a:	f73f adbb 	bgt.w	800ddd4 <_dtoa_r+0x4b4>
 800e25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e260:	9d01      	ldr	r5, [sp, #4]
 800e262:	43db      	mvns	r3, r3
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	f04f 0800 	mov.w	r8, #0
 800e26a:	4631      	mov	r1, r6
 800e26c:	4620      	mov	r0, r4
 800e26e:	f000 fd13 	bl	800ec98 <_Bfree>
 800e272:	2f00      	cmp	r7, #0
 800e274:	f43f aea4 	beq.w	800dfc0 <_dtoa_r+0x6a0>
 800e278:	f1b8 0f00 	cmp.w	r8, #0
 800e27c:	d005      	beq.n	800e28a <_dtoa_r+0x96a>
 800e27e:	45b8      	cmp	r8, r7
 800e280:	d003      	beq.n	800e28a <_dtoa_r+0x96a>
 800e282:	4641      	mov	r1, r8
 800e284:	4620      	mov	r0, r4
 800e286:	f000 fd07 	bl	800ec98 <_Bfree>
 800e28a:	4639      	mov	r1, r7
 800e28c:	4620      	mov	r0, r4
 800e28e:	f000 fd03 	bl	800ec98 <_Bfree>
 800e292:	e695      	b.n	800dfc0 <_dtoa_r+0x6a0>
 800e294:	2600      	movs	r6, #0
 800e296:	4637      	mov	r7, r6
 800e298:	e7e1      	b.n	800e25e <_dtoa_r+0x93e>
 800e29a:	9700      	str	r7, [sp, #0]
 800e29c:	4637      	mov	r7, r6
 800e29e:	e599      	b.n	800ddd4 <_dtoa_r+0x4b4>
 800e2a0:	40240000 	.word	0x40240000
 800e2a4:	9b08      	ldr	r3, [sp, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 80ca 	beq.w	800e440 <_dtoa_r+0xb20>
 800e2ac:	9b03      	ldr	r3, [sp, #12]
 800e2ae:	9302      	str	r3, [sp, #8]
 800e2b0:	2d00      	cmp	r5, #0
 800e2b2:	dd05      	ble.n	800e2c0 <_dtoa_r+0x9a0>
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	462a      	mov	r2, r5
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f000 ff09 	bl	800f0d0 <__lshift>
 800e2be:	4607      	mov	r7, r0
 800e2c0:	f1b8 0f00 	cmp.w	r8, #0
 800e2c4:	d05b      	beq.n	800e37e <_dtoa_r+0xa5e>
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f000 fca5 	bl	800ec18 <_Balloc>
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	b928      	cbnz	r0, 800e2de <_dtoa_r+0x9be>
 800e2d2:	4b87      	ldr	r3, [pc, #540]	; (800e4f0 <_dtoa_r+0xbd0>)
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e2da:	f7ff bb3b 	b.w	800d954 <_dtoa_r+0x34>
 800e2de:	693a      	ldr	r2, [r7, #16]
 800e2e0:	3202      	adds	r2, #2
 800e2e2:	0092      	lsls	r2, r2, #2
 800e2e4:	f107 010c 	add.w	r1, r7, #12
 800e2e8:	300c      	adds	r0, #12
 800e2ea:	f7fd fd29 	bl	800bd40 <memcpy>
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 feec 	bl	800f0d0 <__lshift>
 800e2f8:	9b01      	ldr	r3, [sp, #4]
 800e2fa:	f103 0901 	add.w	r9, r3, #1
 800e2fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e302:	4413      	add	r3, r2
 800e304:	9305      	str	r3, [sp, #20]
 800e306:	f00a 0301 	and.w	r3, sl, #1
 800e30a:	46b8      	mov	r8, r7
 800e30c:	9304      	str	r3, [sp, #16]
 800e30e:	4607      	mov	r7, r0
 800e310:	4631      	mov	r1, r6
 800e312:	ee18 0a10 	vmov	r0, s16
 800e316:	f7ff fa77 	bl	800d808 <quorem>
 800e31a:	4641      	mov	r1, r8
 800e31c:	9002      	str	r0, [sp, #8]
 800e31e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e322:	ee18 0a10 	vmov	r0, s16
 800e326:	f000 ff43 	bl	800f1b0 <__mcmp>
 800e32a:	463a      	mov	r2, r7
 800e32c:	9003      	str	r0, [sp, #12]
 800e32e:	4631      	mov	r1, r6
 800e330:	4620      	mov	r0, r4
 800e332:	f000 ff59 	bl	800f1e8 <__mdiff>
 800e336:	68c2      	ldr	r2, [r0, #12]
 800e338:	f109 3bff 	add.w	fp, r9, #4294967295
 800e33c:	4605      	mov	r5, r0
 800e33e:	bb02      	cbnz	r2, 800e382 <_dtoa_r+0xa62>
 800e340:	4601      	mov	r1, r0
 800e342:	ee18 0a10 	vmov	r0, s16
 800e346:	f000 ff33 	bl	800f1b0 <__mcmp>
 800e34a:	4602      	mov	r2, r0
 800e34c:	4629      	mov	r1, r5
 800e34e:	4620      	mov	r0, r4
 800e350:	9207      	str	r2, [sp, #28]
 800e352:	f000 fca1 	bl	800ec98 <_Bfree>
 800e356:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e35a:	ea43 0102 	orr.w	r1, r3, r2
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	430b      	orrs	r3, r1
 800e362:	464d      	mov	r5, r9
 800e364:	d10f      	bne.n	800e386 <_dtoa_r+0xa66>
 800e366:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e36a:	d02a      	beq.n	800e3c2 <_dtoa_r+0xaa2>
 800e36c:	9b03      	ldr	r3, [sp, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	dd02      	ble.n	800e378 <_dtoa_r+0xa58>
 800e372:	9b02      	ldr	r3, [sp, #8]
 800e374:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e378:	f88b a000 	strb.w	sl, [fp]
 800e37c:	e775      	b.n	800e26a <_dtoa_r+0x94a>
 800e37e:	4638      	mov	r0, r7
 800e380:	e7ba      	b.n	800e2f8 <_dtoa_r+0x9d8>
 800e382:	2201      	movs	r2, #1
 800e384:	e7e2      	b.n	800e34c <_dtoa_r+0xa2c>
 800e386:	9b03      	ldr	r3, [sp, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	db04      	blt.n	800e396 <_dtoa_r+0xa76>
 800e38c:	9906      	ldr	r1, [sp, #24]
 800e38e:	430b      	orrs	r3, r1
 800e390:	9904      	ldr	r1, [sp, #16]
 800e392:	430b      	orrs	r3, r1
 800e394:	d122      	bne.n	800e3dc <_dtoa_r+0xabc>
 800e396:	2a00      	cmp	r2, #0
 800e398:	ddee      	ble.n	800e378 <_dtoa_r+0xa58>
 800e39a:	ee18 1a10 	vmov	r1, s16
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 fe95 	bl	800f0d0 <__lshift>
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	ee08 0a10 	vmov	s16, r0
 800e3ac:	f000 ff00 	bl	800f1b0 <__mcmp>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	dc03      	bgt.n	800e3bc <_dtoa_r+0xa9c>
 800e3b4:	d1e0      	bne.n	800e378 <_dtoa_r+0xa58>
 800e3b6:	f01a 0f01 	tst.w	sl, #1
 800e3ba:	d0dd      	beq.n	800e378 <_dtoa_r+0xa58>
 800e3bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e3c0:	d1d7      	bne.n	800e372 <_dtoa_r+0xa52>
 800e3c2:	2339      	movs	r3, #57	; 0x39
 800e3c4:	f88b 3000 	strb.w	r3, [fp]
 800e3c8:	462b      	mov	r3, r5
 800e3ca:	461d      	mov	r5, r3
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e3d2:	2a39      	cmp	r2, #57	; 0x39
 800e3d4:	d071      	beq.n	800e4ba <_dtoa_r+0xb9a>
 800e3d6:	3201      	adds	r2, #1
 800e3d8:	701a      	strb	r2, [r3, #0]
 800e3da:	e746      	b.n	800e26a <_dtoa_r+0x94a>
 800e3dc:	2a00      	cmp	r2, #0
 800e3de:	dd07      	ble.n	800e3f0 <_dtoa_r+0xad0>
 800e3e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e3e4:	d0ed      	beq.n	800e3c2 <_dtoa_r+0xaa2>
 800e3e6:	f10a 0301 	add.w	r3, sl, #1
 800e3ea:	f88b 3000 	strb.w	r3, [fp]
 800e3ee:	e73c      	b.n	800e26a <_dtoa_r+0x94a>
 800e3f0:	9b05      	ldr	r3, [sp, #20]
 800e3f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e3f6:	4599      	cmp	r9, r3
 800e3f8:	d047      	beq.n	800e48a <_dtoa_r+0xb6a>
 800e3fa:	ee18 1a10 	vmov	r1, s16
 800e3fe:	2300      	movs	r3, #0
 800e400:	220a      	movs	r2, #10
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fc6a 	bl	800ecdc <__multadd>
 800e408:	45b8      	cmp	r8, r7
 800e40a:	ee08 0a10 	vmov	s16, r0
 800e40e:	f04f 0300 	mov.w	r3, #0
 800e412:	f04f 020a 	mov.w	r2, #10
 800e416:	4641      	mov	r1, r8
 800e418:	4620      	mov	r0, r4
 800e41a:	d106      	bne.n	800e42a <_dtoa_r+0xb0a>
 800e41c:	f000 fc5e 	bl	800ecdc <__multadd>
 800e420:	4680      	mov	r8, r0
 800e422:	4607      	mov	r7, r0
 800e424:	f109 0901 	add.w	r9, r9, #1
 800e428:	e772      	b.n	800e310 <_dtoa_r+0x9f0>
 800e42a:	f000 fc57 	bl	800ecdc <__multadd>
 800e42e:	4639      	mov	r1, r7
 800e430:	4680      	mov	r8, r0
 800e432:	2300      	movs	r3, #0
 800e434:	220a      	movs	r2, #10
 800e436:	4620      	mov	r0, r4
 800e438:	f000 fc50 	bl	800ecdc <__multadd>
 800e43c:	4607      	mov	r7, r0
 800e43e:	e7f1      	b.n	800e424 <_dtoa_r+0xb04>
 800e440:	9b03      	ldr	r3, [sp, #12]
 800e442:	9302      	str	r3, [sp, #8]
 800e444:	9d01      	ldr	r5, [sp, #4]
 800e446:	ee18 0a10 	vmov	r0, s16
 800e44a:	4631      	mov	r1, r6
 800e44c:	f7ff f9dc 	bl	800d808 <quorem>
 800e450:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e454:	9b01      	ldr	r3, [sp, #4]
 800e456:	f805 ab01 	strb.w	sl, [r5], #1
 800e45a:	1aea      	subs	r2, r5, r3
 800e45c:	9b02      	ldr	r3, [sp, #8]
 800e45e:	4293      	cmp	r3, r2
 800e460:	dd09      	ble.n	800e476 <_dtoa_r+0xb56>
 800e462:	ee18 1a10 	vmov	r1, s16
 800e466:	2300      	movs	r3, #0
 800e468:	220a      	movs	r2, #10
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 fc36 	bl	800ecdc <__multadd>
 800e470:	ee08 0a10 	vmov	s16, r0
 800e474:	e7e7      	b.n	800e446 <_dtoa_r+0xb26>
 800e476:	9b02      	ldr	r3, [sp, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	bfc8      	it	gt
 800e47c:	461d      	movgt	r5, r3
 800e47e:	9b01      	ldr	r3, [sp, #4]
 800e480:	bfd8      	it	le
 800e482:	2501      	movle	r5, #1
 800e484:	441d      	add	r5, r3
 800e486:	f04f 0800 	mov.w	r8, #0
 800e48a:	ee18 1a10 	vmov	r1, s16
 800e48e:	2201      	movs	r2, #1
 800e490:	4620      	mov	r0, r4
 800e492:	f000 fe1d 	bl	800f0d0 <__lshift>
 800e496:	4631      	mov	r1, r6
 800e498:	ee08 0a10 	vmov	s16, r0
 800e49c:	f000 fe88 	bl	800f1b0 <__mcmp>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	dc91      	bgt.n	800e3c8 <_dtoa_r+0xaa8>
 800e4a4:	d102      	bne.n	800e4ac <_dtoa_r+0xb8c>
 800e4a6:	f01a 0f01 	tst.w	sl, #1
 800e4aa:	d18d      	bne.n	800e3c8 <_dtoa_r+0xaa8>
 800e4ac:	462b      	mov	r3, r5
 800e4ae:	461d      	mov	r5, r3
 800e4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4b4:	2a30      	cmp	r2, #48	; 0x30
 800e4b6:	d0fa      	beq.n	800e4ae <_dtoa_r+0xb8e>
 800e4b8:	e6d7      	b.n	800e26a <_dtoa_r+0x94a>
 800e4ba:	9a01      	ldr	r2, [sp, #4]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d184      	bne.n	800e3ca <_dtoa_r+0xaaa>
 800e4c0:	9b00      	ldr	r3, [sp, #0]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	2331      	movs	r3, #49	; 0x31
 800e4c8:	7013      	strb	r3, [r2, #0]
 800e4ca:	e6ce      	b.n	800e26a <_dtoa_r+0x94a>
 800e4cc:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <_dtoa_r+0xbd4>)
 800e4ce:	f7ff ba95 	b.w	800d9fc <_dtoa_r+0xdc>
 800e4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f47f aa6e 	bne.w	800d9b6 <_dtoa_r+0x96>
 800e4da:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <_dtoa_r+0xbd8>)
 800e4dc:	f7ff ba8e 	b.w	800d9fc <_dtoa_r+0xdc>
 800e4e0:	9b02      	ldr	r3, [sp, #8]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	dcae      	bgt.n	800e444 <_dtoa_r+0xb24>
 800e4e6:	9b06      	ldr	r3, [sp, #24]
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	f73f aea8 	bgt.w	800e23e <_dtoa_r+0x91e>
 800e4ee:	e7a9      	b.n	800e444 <_dtoa_r+0xb24>
 800e4f0:	08012f58 	.word	0x08012f58
 800e4f4:	08012d58 	.word	0x08012d58
 800e4f8:	08012ed9 	.word	0x08012ed9

0800e4fc <rshift>:
 800e4fc:	6903      	ldr	r3, [r0, #16]
 800e4fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e506:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e50a:	f100 0414 	add.w	r4, r0, #20
 800e50e:	dd45      	ble.n	800e59c <rshift+0xa0>
 800e510:	f011 011f 	ands.w	r1, r1, #31
 800e514:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e518:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e51c:	d10c      	bne.n	800e538 <rshift+0x3c>
 800e51e:	f100 0710 	add.w	r7, r0, #16
 800e522:	4629      	mov	r1, r5
 800e524:	42b1      	cmp	r1, r6
 800e526:	d334      	bcc.n	800e592 <rshift+0x96>
 800e528:	1a9b      	subs	r3, r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	1eea      	subs	r2, r5, #3
 800e52e:	4296      	cmp	r6, r2
 800e530:	bf38      	it	cc
 800e532:	2300      	movcc	r3, #0
 800e534:	4423      	add	r3, r4
 800e536:	e015      	b.n	800e564 <rshift+0x68>
 800e538:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e53c:	f1c1 0820 	rsb	r8, r1, #32
 800e540:	40cf      	lsrs	r7, r1
 800e542:	f105 0e04 	add.w	lr, r5, #4
 800e546:	46a1      	mov	r9, r4
 800e548:	4576      	cmp	r6, lr
 800e54a:	46f4      	mov	ip, lr
 800e54c:	d815      	bhi.n	800e57a <rshift+0x7e>
 800e54e:	1a9a      	subs	r2, r3, r2
 800e550:	0092      	lsls	r2, r2, #2
 800e552:	3a04      	subs	r2, #4
 800e554:	3501      	adds	r5, #1
 800e556:	42ae      	cmp	r6, r5
 800e558:	bf38      	it	cc
 800e55a:	2200      	movcc	r2, #0
 800e55c:	18a3      	adds	r3, r4, r2
 800e55e:	50a7      	str	r7, [r4, r2]
 800e560:	b107      	cbz	r7, 800e564 <rshift+0x68>
 800e562:	3304      	adds	r3, #4
 800e564:	1b1a      	subs	r2, r3, r4
 800e566:	42a3      	cmp	r3, r4
 800e568:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e56c:	bf08      	it	eq
 800e56e:	2300      	moveq	r3, #0
 800e570:	6102      	str	r2, [r0, #16]
 800e572:	bf08      	it	eq
 800e574:	6143      	streq	r3, [r0, #20]
 800e576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e57a:	f8dc c000 	ldr.w	ip, [ip]
 800e57e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e582:	ea4c 0707 	orr.w	r7, ip, r7
 800e586:	f849 7b04 	str.w	r7, [r9], #4
 800e58a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e58e:	40cf      	lsrs	r7, r1
 800e590:	e7da      	b.n	800e548 <rshift+0x4c>
 800e592:	f851 cb04 	ldr.w	ip, [r1], #4
 800e596:	f847 cf04 	str.w	ip, [r7, #4]!
 800e59a:	e7c3      	b.n	800e524 <rshift+0x28>
 800e59c:	4623      	mov	r3, r4
 800e59e:	e7e1      	b.n	800e564 <rshift+0x68>

0800e5a0 <__hexdig_fun>:
 800e5a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e5a4:	2b09      	cmp	r3, #9
 800e5a6:	d802      	bhi.n	800e5ae <__hexdig_fun+0xe>
 800e5a8:	3820      	subs	r0, #32
 800e5aa:	b2c0      	uxtb	r0, r0
 800e5ac:	4770      	bx	lr
 800e5ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e5b2:	2b05      	cmp	r3, #5
 800e5b4:	d801      	bhi.n	800e5ba <__hexdig_fun+0x1a>
 800e5b6:	3847      	subs	r0, #71	; 0x47
 800e5b8:	e7f7      	b.n	800e5aa <__hexdig_fun+0xa>
 800e5ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d801      	bhi.n	800e5c6 <__hexdig_fun+0x26>
 800e5c2:	3827      	subs	r0, #39	; 0x27
 800e5c4:	e7f1      	b.n	800e5aa <__hexdig_fun+0xa>
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	4770      	bx	lr
	...

0800e5cc <__gethex>:
 800e5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d0:	ed2d 8b02 	vpush	{d8}
 800e5d4:	b089      	sub	sp, #36	; 0x24
 800e5d6:	ee08 0a10 	vmov	s16, r0
 800e5da:	9304      	str	r3, [sp, #16]
 800e5dc:	4bb4      	ldr	r3, [pc, #720]	; (800e8b0 <__gethex+0x2e4>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	468b      	mov	fp, r1
 800e5e6:	4690      	mov	r8, r2
 800e5e8:	f7f1 fdfa 	bl	80001e0 <strlen>
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	f8db 2000 	ldr.w	r2, [fp]
 800e5f2:	4403      	add	r3, r0
 800e5f4:	4682      	mov	sl, r0
 800e5f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	1c93      	adds	r3, r2, #2
 800e5fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e602:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e606:	32fe      	adds	r2, #254	; 0xfe
 800e608:	18d1      	adds	r1, r2, r3
 800e60a:	461f      	mov	r7, r3
 800e60c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e610:	9100      	str	r1, [sp, #0]
 800e612:	2830      	cmp	r0, #48	; 0x30
 800e614:	d0f8      	beq.n	800e608 <__gethex+0x3c>
 800e616:	f7ff ffc3 	bl	800e5a0 <__hexdig_fun>
 800e61a:	4604      	mov	r4, r0
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d13a      	bne.n	800e696 <__gethex+0xca>
 800e620:	9901      	ldr	r1, [sp, #4]
 800e622:	4652      	mov	r2, sl
 800e624:	4638      	mov	r0, r7
 800e626:	f001 fa23 	bl	800fa70 <strncmp>
 800e62a:	4605      	mov	r5, r0
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d168      	bne.n	800e702 <__gethex+0x136>
 800e630:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e634:	eb07 060a 	add.w	r6, r7, sl
 800e638:	f7ff ffb2 	bl	800e5a0 <__hexdig_fun>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d062      	beq.n	800e706 <__gethex+0x13a>
 800e640:	4633      	mov	r3, r6
 800e642:	7818      	ldrb	r0, [r3, #0]
 800e644:	2830      	cmp	r0, #48	; 0x30
 800e646:	461f      	mov	r7, r3
 800e648:	f103 0301 	add.w	r3, r3, #1
 800e64c:	d0f9      	beq.n	800e642 <__gethex+0x76>
 800e64e:	f7ff ffa7 	bl	800e5a0 <__hexdig_fun>
 800e652:	2301      	movs	r3, #1
 800e654:	fab0 f480 	clz	r4, r0
 800e658:	0964      	lsrs	r4, r4, #5
 800e65a:	4635      	mov	r5, r6
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	463a      	mov	r2, r7
 800e660:	4616      	mov	r6, r2
 800e662:	3201      	adds	r2, #1
 800e664:	7830      	ldrb	r0, [r6, #0]
 800e666:	f7ff ff9b 	bl	800e5a0 <__hexdig_fun>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d1f8      	bne.n	800e660 <__gethex+0x94>
 800e66e:	9901      	ldr	r1, [sp, #4]
 800e670:	4652      	mov	r2, sl
 800e672:	4630      	mov	r0, r6
 800e674:	f001 f9fc 	bl	800fa70 <strncmp>
 800e678:	b980      	cbnz	r0, 800e69c <__gethex+0xd0>
 800e67a:	b94d      	cbnz	r5, 800e690 <__gethex+0xc4>
 800e67c:	eb06 050a 	add.w	r5, r6, sl
 800e680:	462a      	mov	r2, r5
 800e682:	4616      	mov	r6, r2
 800e684:	3201      	adds	r2, #1
 800e686:	7830      	ldrb	r0, [r6, #0]
 800e688:	f7ff ff8a 	bl	800e5a0 <__hexdig_fun>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d1f8      	bne.n	800e682 <__gethex+0xb6>
 800e690:	1bad      	subs	r5, r5, r6
 800e692:	00ad      	lsls	r5, r5, #2
 800e694:	e004      	b.n	800e6a0 <__gethex+0xd4>
 800e696:	2400      	movs	r4, #0
 800e698:	4625      	mov	r5, r4
 800e69a:	e7e0      	b.n	800e65e <__gethex+0x92>
 800e69c:	2d00      	cmp	r5, #0
 800e69e:	d1f7      	bne.n	800e690 <__gethex+0xc4>
 800e6a0:	7833      	ldrb	r3, [r6, #0]
 800e6a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6a6:	2b50      	cmp	r3, #80	; 0x50
 800e6a8:	d13b      	bne.n	800e722 <__gethex+0x156>
 800e6aa:	7873      	ldrb	r3, [r6, #1]
 800e6ac:	2b2b      	cmp	r3, #43	; 0x2b
 800e6ae:	d02c      	beq.n	800e70a <__gethex+0x13e>
 800e6b0:	2b2d      	cmp	r3, #45	; 0x2d
 800e6b2:	d02e      	beq.n	800e712 <__gethex+0x146>
 800e6b4:	1c71      	adds	r1, r6, #1
 800e6b6:	f04f 0900 	mov.w	r9, #0
 800e6ba:	7808      	ldrb	r0, [r1, #0]
 800e6bc:	f7ff ff70 	bl	800e5a0 <__hexdig_fun>
 800e6c0:	1e43      	subs	r3, r0, #1
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b18      	cmp	r3, #24
 800e6c6:	d82c      	bhi.n	800e722 <__gethex+0x156>
 800e6c8:	f1a0 0210 	sub.w	r2, r0, #16
 800e6cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e6d0:	f7ff ff66 	bl	800e5a0 <__hexdig_fun>
 800e6d4:	1e43      	subs	r3, r0, #1
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	2b18      	cmp	r3, #24
 800e6da:	d91d      	bls.n	800e718 <__gethex+0x14c>
 800e6dc:	f1b9 0f00 	cmp.w	r9, #0
 800e6e0:	d000      	beq.n	800e6e4 <__gethex+0x118>
 800e6e2:	4252      	negs	r2, r2
 800e6e4:	4415      	add	r5, r2
 800e6e6:	f8cb 1000 	str.w	r1, [fp]
 800e6ea:	b1e4      	cbz	r4, 800e726 <__gethex+0x15a>
 800e6ec:	9b00      	ldr	r3, [sp, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	bf14      	ite	ne
 800e6f2:	2700      	movne	r7, #0
 800e6f4:	2706      	moveq	r7, #6
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	b009      	add	sp, #36	; 0x24
 800e6fa:	ecbd 8b02 	vpop	{d8}
 800e6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e702:	463e      	mov	r6, r7
 800e704:	4625      	mov	r5, r4
 800e706:	2401      	movs	r4, #1
 800e708:	e7ca      	b.n	800e6a0 <__gethex+0xd4>
 800e70a:	f04f 0900 	mov.w	r9, #0
 800e70e:	1cb1      	adds	r1, r6, #2
 800e710:	e7d3      	b.n	800e6ba <__gethex+0xee>
 800e712:	f04f 0901 	mov.w	r9, #1
 800e716:	e7fa      	b.n	800e70e <__gethex+0x142>
 800e718:	230a      	movs	r3, #10
 800e71a:	fb03 0202 	mla	r2, r3, r2, r0
 800e71e:	3a10      	subs	r2, #16
 800e720:	e7d4      	b.n	800e6cc <__gethex+0x100>
 800e722:	4631      	mov	r1, r6
 800e724:	e7df      	b.n	800e6e6 <__gethex+0x11a>
 800e726:	1bf3      	subs	r3, r6, r7
 800e728:	3b01      	subs	r3, #1
 800e72a:	4621      	mov	r1, r4
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	dc0b      	bgt.n	800e748 <__gethex+0x17c>
 800e730:	ee18 0a10 	vmov	r0, s16
 800e734:	f000 fa70 	bl	800ec18 <_Balloc>
 800e738:	4604      	mov	r4, r0
 800e73a:	b940      	cbnz	r0, 800e74e <__gethex+0x182>
 800e73c:	4b5d      	ldr	r3, [pc, #372]	; (800e8b4 <__gethex+0x2e8>)
 800e73e:	4602      	mov	r2, r0
 800e740:	21de      	movs	r1, #222	; 0xde
 800e742:	485d      	ldr	r0, [pc, #372]	; (800e8b8 <__gethex+0x2ec>)
 800e744:	f001 f9b6 	bl	800fab4 <__assert_func>
 800e748:	3101      	adds	r1, #1
 800e74a:	105b      	asrs	r3, r3, #1
 800e74c:	e7ee      	b.n	800e72c <__gethex+0x160>
 800e74e:	f100 0914 	add.w	r9, r0, #20
 800e752:	f04f 0b00 	mov.w	fp, #0
 800e756:	f1ca 0301 	rsb	r3, sl, #1
 800e75a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e75e:	f8cd b000 	str.w	fp, [sp]
 800e762:	9306      	str	r3, [sp, #24]
 800e764:	42b7      	cmp	r7, r6
 800e766:	d340      	bcc.n	800e7ea <__gethex+0x21e>
 800e768:	9802      	ldr	r0, [sp, #8]
 800e76a:	9b00      	ldr	r3, [sp, #0]
 800e76c:	f840 3b04 	str.w	r3, [r0], #4
 800e770:	eba0 0009 	sub.w	r0, r0, r9
 800e774:	1080      	asrs	r0, r0, #2
 800e776:	0146      	lsls	r6, r0, #5
 800e778:	6120      	str	r0, [r4, #16]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f000 fb3e 	bl	800edfc <__hi0bits>
 800e780:	1a30      	subs	r0, r6, r0
 800e782:	f8d8 6000 	ldr.w	r6, [r8]
 800e786:	42b0      	cmp	r0, r6
 800e788:	dd63      	ble.n	800e852 <__gethex+0x286>
 800e78a:	1b87      	subs	r7, r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	4620      	mov	r0, r4
 800e790:	f000 fee2 	bl	800f558 <__any_on>
 800e794:	4682      	mov	sl, r0
 800e796:	b1a8      	cbz	r0, 800e7c4 <__gethex+0x1f8>
 800e798:	1e7b      	subs	r3, r7, #1
 800e79a:	1159      	asrs	r1, r3, #5
 800e79c:	f003 021f 	and.w	r2, r3, #31
 800e7a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e7a4:	f04f 0a01 	mov.w	sl, #1
 800e7a8:	fa0a f202 	lsl.w	r2, sl, r2
 800e7ac:	420a      	tst	r2, r1
 800e7ae:	d009      	beq.n	800e7c4 <__gethex+0x1f8>
 800e7b0:	4553      	cmp	r3, sl
 800e7b2:	dd05      	ble.n	800e7c0 <__gethex+0x1f4>
 800e7b4:	1eb9      	subs	r1, r7, #2
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f000 fece 	bl	800f558 <__any_on>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d145      	bne.n	800e84c <__gethex+0x280>
 800e7c0:	f04f 0a02 	mov.w	sl, #2
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f7ff fe98 	bl	800e4fc <rshift>
 800e7cc:	443d      	add	r5, r7
 800e7ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7d2:	42ab      	cmp	r3, r5
 800e7d4:	da4c      	bge.n	800e870 <__gethex+0x2a4>
 800e7d6:	ee18 0a10 	vmov	r0, s16
 800e7da:	4621      	mov	r1, r4
 800e7dc:	f000 fa5c 	bl	800ec98 <_Bfree>
 800e7e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	6013      	str	r3, [r2, #0]
 800e7e6:	27a3      	movs	r7, #163	; 0xa3
 800e7e8:	e785      	b.n	800e6f6 <__gethex+0x12a>
 800e7ea:	1e73      	subs	r3, r6, #1
 800e7ec:	9a05      	ldr	r2, [sp, #20]
 800e7ee:	9303      	str	r3, [sp, #12]
 800e7f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d019      	beq.n	800e82c <__gethex+0x260>
 800e7f8:	f1bb 0f20 	cmp.w	fp, #32
 800e7fc:	d107      	bne.n	800e80e <__gethex+0x242>
 800e7fe:	9b02      	ldr	r3, [sp, #8]
 800e800:	9a00      	ldr	r2, [sp, #0]
 800e802:	f843 2b04 	str.w	r2, [r3], #4
 800e806:	9302      	str	r3, [sp, #8]
 800e808:	2300      	movs	r3, #0
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	469b      	mov	fp, r3
 800e80e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e812:	f7ff fec5 	bl	800e5a0 <__hexdig_fun>
 800e816:	9b00      	ldr	r3, [sp, #0]
 800e818:	f000 000f 	and.w	r0, r0, #15
 800e81c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e820:	4303      	orrs	r3, r0
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	f10b 0b04 	add.w	fp, fp, #4
 800e828:	9b03      	ldr	r3, [sp, #12]
 800e82a:	e00d      	b.n	800e848 <__gethex+0x27c>
 800e82c:	9b03      	ldr	r3, [sp, #12]
 800e82e:	9a06      	ldr	r2, [sp, #24]
 800e830:	4413      	add	r3, r2
 800e832:	42bb      	cmp	r3, r7
 800e834:	d3e0      	bcc.n	800e7f8 <__gethex+0x22c>
 800e836:	4618      	mov	r0, r3
 800e838:	9901      	ldr	r1, [sp, #4]
 800e83a:	9307      	str	r3, [sp, #28]
 800e83c:	4652      	mov	r2, sl
 800e83e:	f001 f917 	bl	800fa70 <strncmp>
 800e842:	9b07      	ldr	r3, [sp, #28]
 800e844:	2800      	cmp	r0, #0
 800e846:	d1d7      	bne.n	800e7f8 <__gethex+0x22c>
 800e848:	461e      	mov	r6, r3
 800e84a:	e78b      	b.n	800e764 <__gethex+0x198>
 800e84c:	f04f 0a03 	mov.w	sl, #3
 800e850:	e7b8      	b.n	800e7c4 <__gethex+0x1f8>
 800e852:	da0a      	bge.n	800e86a <__gethex+0x29e>
 800e854:	1a37      	subs	r7, r6, r0
 800e856:	4621      	mov	r1, r4
 800e858:	ee18 0a10 	vmov	r0, s16
 800e85c:	463a      	mov	r2, r7
 800e85e:	f000 fc37 	bl	800f0d0 <__lshift>
 800e862:	1bed      	subs	r5, r5, r7
 800e864:	4604      	mov	r4, r0
 800e866:	f100 0914 	add.w	r9, r0, #20
 800e86a:	f04f 0a00 	mov.w	sl, #0
 800e86e:	e7ae      	b.n	800e7ce <__gethex+0x202>
 800e870:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e874:	42a8      	cmp	r0, r5
 800e876:	dd72      	ble.n	800e95e <__gethex+0x392>
 800e878:	1b45      	subs	r5, r0, r5
 800e87a:	42ae      	cmp	r6, r5
 800e87c:	dc36      	bgt.n	800e8ec <__gethex+0x320>
 800e87e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e882:	2b02      	cmp	r3, #2
 800e884:	d02a      	beq.n	800e8dc <__gethex+0x310>
 800e886:	2b03      	cmp	r3, #3
 800e888:	d02c      	beq.n	800e8e4 <__gethex+0x318>
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d11c      	bne.n	800e8c8 <__gethex+0x2fc>
 800e88e:	42ae      	cmp	r6, r5
 800e890:	d11a      	bne.n	800e8c8 <__gethex+0x2fc>
 800e892:	2e01      	cmp	r6, #1
 800e894:	d112      	bne.n	800e8bc <__gethex+0x2f0>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e89c:	6013      	str	r3, [r2, #0]
 800e89e:	2301      	movs	r3, #1
 800e8a0:	6123      	str	r3, [r4, #16]
 800e8a2:	f8c9 3000 	str.w	r3, [r9]
 800e8a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8a8:	2762      	movs	r7, #98	; 0x62
 800e8aa:	601c      	str	r4, [r3, #0]
 800e8ac:	e723      	b.n	800e6f6 <__gethex+0x12a>
 800e8ae:	bf00      	nop
 800e8b0:	08012fd0 	.word	0x08012fd0
 800e8b4:	08012f58 	.word	0x08012f58
 800e8b8:	08012f69 	.word	0x08012f69
 800e8bc:	1e71      	subs	r1, r6, #1
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f000 fe4a 	bl	800f558 <__any_on>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d1e6      	bne.n	800e896 <__gethex+0x2ca>
 800e8c8:	ee18 0a10 	vmov	r0, s16
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	f000 f9e3 	bl	800ec98 <_Bfree>
 800e8d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	6013      	str	r3, [r2, #0]
 800e8d8:	2750      	movs	r7, #80	; 0x50
 800e8da:	e70c      	b.n	800e6f6 <__gethex+0x12a>
 800e8dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1f2      	bne.n	800e8c8 <__gethex+0x2fc>
 800e8e2:	e7d8      	b.n	800e896 <__gethex+0x2ca>
 800e8e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1d5      	bne.n	800e896 <__gethex+0x2ca>
 800e8ea:	e7ed      	b.n	800e8c8 <__gethex+0x2fc>
 800e8ec:	1e6f      	subs	r7, r5, #1
 800e8ee:	f1ba 0f00 	cmp.w	sl, #0
 800e8f2:	d131      	bne.n	800e958 <__gethex+0x38c>
 800e8f4:	b127      	cbz	r7, 800e900 <__gethex+0x334>
 800e8f6:	4639      	mov	r1, r7
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f000 fe2d 	bl	800f558 <__any_on>
 800e8fe:	4682      	mov	sl, r0
 800e900:	117b      	asrs	r3, r7, #5
 800e902:	2101      	movs	r1, #1
 800e904:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e908:	f007 071f 	and.w	r7, r7, #31
 800e90c:	fa01 f707 	lsl.w	r7, r1, r7
 800e910:	421f      	tst	r7, r3
 800e912:	4629      	mov	r1, r5
 800e914:	4620      	mov	r0, r4
 800e916:	bf18      	it	ne
 800e918:	f04a 0a02 	orrne.w	sl, sl, #2
 800e91c:	1b76      	subs	r6, r6, r5
 800e91e:	f7ff fded 	bl	800e4fc <rshift>
 800e922:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e926:	2702      	movs	r7, #2
 800e928:	f1ba 0f00 	cmp.w	sl, #0
 800e92c:	d048      	beq.n	800e9c0 <__gethex+0x3f4>
 800e92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e932:	2b02      	cmp	r3, #2
 800e934:	d015      	beq.n	800e962 <__gethex+0x396>
 800e936:	2b03      	cmp	r3, #3
 800e938:	d017      	beq.n	800e96a <__gethex+0x39e>
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d109      	bne.n	800e952 <__gethex+0x386>
 800e93e:	f01a 0f02 	tst.w	sl, #2
 800e942:	d006      	beq.n	800e952 <__gethex+0x386>
 800e944:	f8d9 0000 	ldr.w	r0, [r9]
 800e948:	ea4a 0a00 	orr.w	sl, sl, r0
 800e94c:	f01a 0f01 	tst.w	sl, #1
 800e950:	d10e      	bne.n	800e970 <__gethex+0x3a4>
 800e952:	f047 0710 	orr.w	r7, r7, #16
 800e956:	e033      	b.n	800e9c0 <__gethex+0x3f4>
 800e958:	f04f 0a01 	mov.w	sl, #1
 800e95c:	e7d0      	b.n	800e900 <__gethex+0x334>
 800e95e:	2701      	movs	r7, #1
 800e960:	e7e2      	b.n	800e928 <__gethex+0x35c>
 800e962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e964:	f1c3 0301 	rsb	r3, r3, #1
 800e968:	9315      	str	r3, [sp, #84]	; 0x54
 800e96a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0f0      	beq.n	800e952 <__gethex+0x386>
 800e970:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e974:	f104 0314 	add.w	r3, r4, #20
 800e978:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e97c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e980:	f04f 0c00 	mov.w	ip, #0
 800e984:	4618      	mov	r0, r3
 800e986:	f853 2b04 	ldr.w	r2, [r3], #4
 800e98a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e98e:	d01c      	beq.n	800e9ca <__gethex+0x3fe>
 800e990:	3201      	adds	r2, #1
 800e992:	6002      	str	r2, [r0, #0]
 800e994:	2f02      	cmp	r7, #2
 800e996:	f104 0314 	add.w	r3, r4, #20
 800e99a:	d13f      	bne.n	800ea1c <__gethex+0x450>
 800e99c:	f8d8 2000 	ldr.w	r2, [r8]
 800e9a0:	3a01      	subs	r2, #1
 800e9a2:	42b2      	cmp	r2, r6
 800e9a4:	d10a      	bne.n	800e9bc <__gethex+0x3f0>
 800e9a6:	1171      	asrs	r1, r6, #5
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9ae:	f006 061f 	and.w	r6, r6, #31
 800e9b2:	fa02 f606 	lsl.w	r6, r2, r6
 800e9b6:	421e      	tst	r6, r3
 800e9b8:	bf18      	it	ne
 800e9ba:	4617      	movne	r7, r2
 800e9bc:	f047 0720 	orr.w	r7, r7, #32
 800e9c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9c2:	601c      	str	r4, [r3, #0]
 800e9c4:	9b04      	ldr	r3, [sp, #16]
 800e9c6:	601d      	str	r5, [r3, #0]
 800e9c8:	e695      	b.n	800e6f6 <__gethex+0x12a>
 800e9ca:	4299      	cmp	r1, r3
 800e9cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9d0:	d8d8      	bhi.n	800e984 <__gethex+0x3b8>
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	459b      	cmp	fp, r3
 800e9d6:	db19      	blt.n	800ea0c <__gethex+0x440>
 800e9d8:	6861      	ldr	r1, [r4, #4]
 800e9da:	ee18 0a10 	vmov	r0, s16
 800e9de:	3101      	adds	r1, #1
 800e9e0:	f000 f91a 	bl	800ec18 <_Balloc>
 800e9e4:	4681      	mov	r9, r0
 800e9e6:	b918      	cbnz	r0, 800e9f0 <__gethex+0x424>
 800e9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ea54 <__gethex+0x488>)
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	2184      	movs	r1, #132	; 0x84
 800e9ee:	e6a8      	b.n	800e742 <__gethex+0x176>
 800e9f0:	6922      	ldr	r2, [r4, #16]
 800e9f2:	3202      	adds	r2, #2
 800e9f4:	f104 010c 	add.w	r1, r4, #12
 800e9f8:	0092      	lsls	r2, r2, #2
 800e9fa:	300c      	adds	r0, #12
 800e9fc:	f7fd f9a0 	bl	800bd40 <memcpy>
 800ea00:	4621      	mov	r1, r4
 800ea02:	ee18 0a10 	vmov	r0, s16
 800ea06:	f000 f947 	bl	800ec98 <_Bfree>
 800ea0a:	464c      	mov	r4, r9
 800ea0c:	6923      	ldr	r3, [r4, #16]
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea14:	6122      	str	r2, [r4, #16]
 800ea16:	2201      	movs	r2, #1
 800ea18:	615a      	str	r2, [r3, #20]
 800ea1a:	e7bb      	b.n	800e994 <__gethex+0x3c8>
 800ea1c:	6922      	ldr	r2, [r4, #16]
 800ea1e:	455a      	cmp	r2, fp
 800ea20:	dd0b      	ble.n	800ea3a <__gethex+0x46e>
 800ea22:	2101      	movs	r1, #1
 800ea24:	4620      	mov	r0, r4
 800ea26:	f7ff fd69 	bl	800e4fc <rshift>
 800ea2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea2e:	3501      	adds	r5, #1
 800ea30:	42ab      	cmp	r3, r5
 800ea32:	f6ff aed0 	blt.w	800e7d6 <__gethex+0x20a>
 800ea36:	2701      	movs	r7, #1
 800ea38:	e7c0      	b.n	800e9bc <__gethex+0x3f0>
 800ea3a:	f016 061f 	ands.w	r6, r6, #31
 800ea3e:	d0fa      	beq.n	800ea36 <__gethex+0x46a>
 800ea40:	4453      	add	r3, sl
 800ea42:	f1c6 0620 	rsb	r6, r6, #32
 800ea46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea4a:	f000 f9d7 	bl	800edfc <__hi0bits>
 800ea4e:	42b0      	cmp	r0, r6
 800ea50:	dbe7      	blt.n	800ea22 <__gethex+0x456>
 800ea52:	e7f0      	b.n	800ea36 <__gethex+0x46a>
 800ea54:	08012f58 	.word	0x08012f58

0800ea58 <L_shift>:
 800ea58:	f1c2 0208 	rsb	r2, r2, #8
 800ea5c:	0092      	lsls	r2, r2, #2
 800ea5e:	b570      	push	{r4, r5, r6, lr}
 800ea60:	f1c2 0620 	rsb	r6, r2, #32
 800ea64:	6843      	ldr	r3, [r0, #4]
 800ea66:	6804      	ldr	r4, [r0, #0]
 800ea68:	fa03 f506 	lsl.w	r5, r3, r6
 800ea6c:	432c      	orrs	r4, r5
 800ea6e:	40d3      	lsrs	r3, r2
 800ea70:	6004      	str	r4, [r0, #0]
 800ea72:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea76:	4288      	cmp	r0, r1
 800ea78:	d3f4      	bcc.n	800ea64 <L_shift+0xc>
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}

0800ea7c <__match>:
 800ea7c:	b530      	push	{r4, r5, lr}
 800ea7e:	6803      	ldr	r3, [r0, #0]
 800ea80:	3301      	adds	r3, #1
 800ea82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea86:	b914      	cbnz	r4, 800ea8e <__match+0x12>
 800ea88:	6003      	str	r3, [r0, #0]
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	bd30      	pop	{r4, r5, pc}
 800ea8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ea96:	2d19      	cmp	r5, #25
 800ea98:	bf98      	it	ls
 800ea9a:	3220      	addls	r2, #32
 800ea9c:	42a2      	cmp	r2, r4
 800ea9e:	d0f0      	beq.n	800ea82 <__match+0x6>
 800eaa0:	2000      	movs	r0, #0
 800eaa2:	e7f3      	b.n	800ea8c <__match+0x10>

0800eaa4 <__hexnan>:
 800eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa8:	680b      	ldr	r3, [r1, #0]
 800eaaa:	115e      	asrs	r6, r3, #5
 800eaac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eab0:	f013 031f 	ands.w	r3, r3, #31
 800eab4:	b087      	sub	sp, #28
 800eab6:	bf18      	it	ne
 800eab8:	3604      	addne	r6, #4
 800eaba:	2500      	movs	r5, #0
 800eabc:	1f37      	subs	r7, r6, #4
 800eabe:	4690      	mov	r8, r2
 800eac0:	6802      	ldr	r2, [r0, #0]
 800eac2:	9301      	str	r3, [sp, #4]
 800eac4:	4682      	mov	sl, r0
 800eac6:	f846 5c04 	str.w	r5, [r6, #-4]
 800eaca:	46b9      	mov	r9, r7
 800eacc:	463c      	mov	r4, r7
 800eace:	9502      	str	r5, [sp, #8]
 800ead0:	46ab      	mov	fp, r5
 800ead2:	7851      	ldrb	r1, [r2, #1]
 800ead4:	1c53      	adds	r3, r2, #1
 800ead6:	9303      	str	r3, [sp, #12]
 800ead8:	b341      	cbz	r1, 800eb2c <__hexnan+0x88>
 800eada:	4608      	mov	r0, r1
 800eadc:	9205      	str	r2, [sp, #20]
 800eade:	9104      	str	r1, [sp, #16]
 800eae0:	f7ff fd5e 	bl	800e5a0 <__hexdig_fun>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d14f      	bne.n	800eb88 <__hexnan+0xe4>
 800eae8:	9904      	ldr	r1, [sp, #16]
 800eaea:	9a05      	ldr	r2, [sp, #20]
 800eaec:	2920      	cmp	r1, #32
 800eaee:	d818      	bhi.n	800eb22 <__hexnan+0x7e>
 800eaf0:	9b02      	ldr	r3, [sp, #8]
 800eaf2:	459b      	cmp	fp, r3
 800eaf4:	dd13      	ble.n	800eb1e <__hexnan+0x7a>
 800eaf6:	454c      	cmp	r4, r9
 800eaf8:	d206      	bcs.n	800eb08 <__hexnan+0x64>
 800eafa:	2d07      	cmp	r5, #7
 800eafc:	dc04      	bgt.n	800eb08 <__hexnan+0x64>
 800eafe:	462a      	mov	r2, r5
 800eb00:	4649      	mov	r1, r9
 800eb02:	4620      	mov	r0, r4
 800eb04:	f7ff ffa8 	bl	800ea58 <L_shift>
 800eb08:	4544      	cmp	r4, r8
 800eb0a:	d950      	bls.n	800ebae <__hexnan+0x10a>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	f1a4 0904 	sub.w	r9, r4, #4
 800eb12:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb16:	f8cd b008 	str.w	fp, [sp, #8]
 800eb1a:	464c      	mov	r4, r9
 800eb1c:	461d      	mov	r5, r3
 800eb1e:	9a03      	ldr	r2, [sp, #12]
 800eb20:	e7d7      	b.n	800ead2 <__hexnan+0x2e>
 800eb22:	2929      	cmp	r1, #41	; 0x29
 800eb24:	d156      	bne.n	800ebd4 <__hexnan+0x130>
 800eb26:	3202      	adds	r2, #2
 800eb28:	f8ca 2000 	str.w	r2, [sl]
 800eb2c:	f1bb 0f00 	cmp.w	fp, #0
 800eb30:	d050      	beq.n	800ebd4 <__hexnan+0x130>
 800eb32:	454c      	cmp	r4, r9
 800eb34:	d206      	bcs.n	800eb44 <__hexnan+0xa0>
 800eb36:	2d07      	cmp	r5, #7
 800eb38:	dc04      	bgt.n	800eb44 <__hexnan+0xa0>
 800eb3a:	462a      	mov	r2, r5
 800eb3c:	4649      	mov	r1, r9
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7ff ff8a 	bl	800ea58 <L_shift>
 800eb44:	4544      	cmp	r4, r8
 800eb46:	d934      	bls.n	800ebb2 <__hexnan+0x10e>
 800eb48:	f1a8 0204 	sub.w	r2, r8, #4
 800eb4c:	4623      	mov	r3, r4
 800eb4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb52:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb56:	429f      	cmp	r7, r3
 800eb58:	d2f9      	bcs.n	800eb4e <__hexnan+0xaa>
 800eb5a:	1b3b      	subs	r3, r7, r4
 800eb5c:	f023 0303 	bic.w	r3, r3, #3
 800eb60:	3304      	adds	r3, #4
 800eb62:	3401      	adds	r4, #1
 800eb64:	3e03      	subs	r6, #3
 800eb66:	42b4      	cmp	r4, r6
 800eb68:	bf88      	it	hi
 800eb6a:	2304      	movhi	r3, #4
 800eb6c:	4443      	add	r3, r8
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f843 2b04 	str.w	r2, [r3], #4
 800eb74:	429f      	cmp	r7, r3
 800eb76:	d2fb      	bcs.n	800eb70 <__hexnan+0xcc>
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	b91b      	cbnz	r3, 800eb84 <__hexnan+0xe0>
 800eb7c:	4547      	cmp	r7, r8
 800eb7e:	d127      	bne.n	800ebd0 <__hexnan+0x12c>
 800eb80:	2301      	movs	r3, #1
 800eb82:	603b      	str	r3, [r7, #0]
 800eb84:	2005      	movs	r0, #5
 800eb86:	e026      	b.n	800ebd6 <__hexnan+0x132>
 800eb88:	3501      	adds	r5, #1
 800eb8a:	2d08      	cmp	r5, #8
 800eb8c:	f10b 0b01 	add.w	fp, fp, #1
 800eb90:	dd06      	ble.n	800eba0 <__hexnan+0xfc>
 800eb92:	4544      	cmp	r4, r8
 800eb94:	d9c3      	bls.n	800eb1e <__hexnan+0x7a>
 800eb96:	2300      	movs	r3, #0
 800eb98:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb9c:	2501      	movs	r5, #1
 800eb9e:	3c04      	subs	r4, #4
 800eba0:	6822      	ldr	r2, [r4, #0]
 800eba2:	f000 000f 	and.w	r0, r0, #15
 800eba6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ebaa:	6022      	str	r2, [r4, #0]
 800ebac:	e7b7      	b.n	800eb1e <__hexnan+0x7a>
 800ebae:	2508      	movs	r5, #8
 800ebb0:	e7b5      	b.n	800eb1e <__hexnan+0x7a>
 800ebb2:	9b01      	ldr	r3, [sp, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d0df      	beq.n	800eb78 <__hexnan+0xd4>
 800ebb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebbc:	f1c3 0320 	rsb	r3, r3, #32
 800ebc0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ebc8:	401a      	ands	r2, r3
 800ebca:	f846 2c04 	str.w	r2, [r6, #-4]
 800ebce:	e7d3      	b.n	800eb78 <__hexnan+0xd4>
 800ebd0:	3f04      	subs	r7, #4
 800ebd2:	e7d1      	b.n	800eb78 <__hexnan+0xd4>
 800ebd4:	2004      	movs	r0, #4
 800ebd6:	b007      	add	sp, #28
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebdc <_localeconv_r>:
 800ebdc:	4800      	ldr	r0, [pc, #0]	; (800ebe0 <_localeconv_r+0x4>)
 800ebde:	4770      	bx	lr
 800ebe0:	20000394 	.word	0x20000394

0800ebe4 <malloc>:
 800ebe4:	4b02      	ldr	r3, [pc, #8]	; (800ebf0 <malloc+0xc>)
 800ebe6:	4601      	mov	r1, r0
 800ebe8:	6818      	ldr	r0, [r3, #0]
 800ebea:	f000 bd59 	b.w	800f6a0 <_malloc_r>
 800ebee:	bf00      	nop
 800ebf0:	2000023c 	.word	0x2000023c

0800ebf4 <__ascii_mbtowc>:
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	b901      	cbnz	r1, 800ebfa <__ascii_mbtowc+0x6>
 800ebf8:	a901      	add	r1, sp, #4
 800ebfa:	b142      	cbz	r2, 800ec0e <__ascii_mbtowc+0x1a>
 800ebfc:	b14b      	cbz	r3, 800ec12 <__ascii_mbtowc+0x1e>
 800ebfe:	7813      	ldrb	r3, [r2, #0]
 800ec00:	600b      	str	r3, [r1, #0]
 800ec02:	7812      	ldrb	r2, [r2, #0]
 800ec04:	1e10      	subs	r0, r2, #0
 800ec06:	bf18      	it	ne
 800ec08:	2001      	movne	r0, #1
 800ec0a:	b002      	add	sp, #8
 800ec0c:	4770      	bx	lr
 800ec0e:	4610      	mov	r0, r2
 800ec10:	e7fb      	b.n	800ec0a <__ascii_mbtowc+0x16>
 800ec12:	f06f 0001 	mvn.w	r0, #1
 800ec16:	e7f8      	b.n	800ec0a <__ascii_mbtowc+0x16>

0800ec18 <_Balloc>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	460d      	mov	r5, r1
 800ec20:	b976      	cbnz	r6, 800ec40 <_Balloc+0x28>
 800ec22:	2010      	movs	r0, #16
 800ec24:	f7ff ffde 	bl	800ebe4 <malloc>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	6260      	str	r0, [r4, #36]	; 0x24
 800ec2c:	b920      	cbnz	r0, 800ec38 <_Balloc+0x20>
 800ec2e:	4b18      	ldr	r3, [pc, #96]	; (800ec90 <_Balloc+0x78>)
 800ec30:	4818      	ldr	r0, [pc, #96]	; (800ec94 <_Balloc+0x7c>)
 800ec32:	2166      	movs	r1, #102	; 0x66
 800ec34:	f000 ff3e 	bl	800fab4 <__assert_func>
 800ec38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec3c:	6006      	str	r6, [r0, #0]
 800ec3e:	60c6      	str	r6, [r0, #12]
 800ec40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec42:	68f3      	ldr	r3, [r6, #12]
 800ec44:	b183      	cbz	r3, 800ec68 <_Balloc+0x50>
 800ec46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec4e:	b9b8      	cbnz	r0, 800ec80 <_Balloc+0x68>
 800ec50:	2101      	movs	r1, #1
 800ec52:	fa01 f605 	lsl.w	r6, r1, r5
 800ec56:	1d72      	adds	r2, r6, #5
 800ec58:	0092      	lsls	r2, r2, #2
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f000 fc9d 	bl	800f59a <_calloc_r>
 800ec60:	b160      	cbz	r0, 800ec7c <_Balloc+0x64>
 800ec62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec66:	e00e      	b.n	800ec86 <_Balloc+0x6e>
 800ec68:	2221      	movs	r2, #33	; 0x21
 800ec6a:	2104      	movs	r1, #4
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 fc94 	bl	800f59a <_calloc_r>
 800ec72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec74:	60f0      	str	r0, [r6, #12]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1e4      	bne.n	800ec46 <_Balloc+0x2e>
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}
 800ec80:	6802      	ldr	r2, [r0, #0]
 800ec82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec86:	2300      	movs	r3, #0
 800ec88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec8c:	e7f7      	b.n	800ec7e <_Balloc+0x66>
 800ec8e:	bf00      	nop
 800ec90:	08012ee6 	.word	0x08012ee6
 800ec94:	08012fe4 	.word	0x08012fe4

0800ec98 <_Bfree>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	460c      	mov	r4, r1
 800eca0:	b976      	cbnz	r6, 800ecc0 <_Bfree+0x28>
 800eca2:	2010      	movs	r0, #16
 800eca4:	f7ff ff9e 	bl	800ebe4 <malloc>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	6268      	str	r0, [r5, #36]	; 0x24
 800ecac:	b920      	cbnz	r0, 800ecb8 <_Bfree+0x20>
 800ecae:	4b09      	ldr	r3, [pc, #36]	; (800ecd4 <_Bfree+0x3c>)
 800ecb0:	4809      	ldr	r0, [pc, #36]	; (800ecd8 <_Bfree+0x40>)
 800ecb2:	218a      	movs	r1, #138	; 0x8a
 800ecb4:	f000 fefe 	bl	800fab4 <__assert_func>
 800ecb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecbc:	6006      	str	r6, [r0, #0]
 800ecbe:	60c6      	str	r6, [r0, #12]
 800ecc0:	b13c      	cbz	r4, 800ecd2 <_Bfree+0x3a>
 800ecc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ecc4:	6862      	ldr	r2, [r4, #4]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eccc:	6021      	str	r1, [r4, #0]
 800ecce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
 800ecd4:	08012ee6 	.word	0x08012ee6
 800ecd8:	08012fe4 	.word	0x08012fe4

0800ecdc <__multadd>:
 800ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	690d      	ldr	r5, [r1, #16]
 800ece2:	4607      	mov	r7, r0
 800ece4:	460c      	mov	r4, r1
 800ece6:	461e      	mov	r6, r3
 800ece8:	f101 0c14 	add.w	ip, r1, #20
 800ecec:	2000      	movs	r0, #0
 800ecee:	f8dc 3000 	ldr.w	r3, [ip]
 800ecf2:	b299      	uxth	r1, r3
 800ecf4:	fb02 6101 	mla	r1, r2, r1, r6
 800ecf8:	0c1e      	lsrs	r6, r3, #16
 800ecfa:	0c0b      	lsrs	r3, r1, #16
 800ecfc:	fb02 3306 	mla	r3, r2, r6, r3
 800ed00:	b289      	uxth	r1, r1
 800ed02:	3001      	adds	r0, #1
 800ed04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed08:	4285      	cmp	r5, r0
 800ed0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ed0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed12:	dcec      	bgt.n	800ecee <__multadd+0x12>
 800ed14:	b30e      	cbz	r6, 800ed5a <__multadd+0x7e>
 800ed16:	68a3      	ldr	r3, [r4, #8]
 800ed18:	42ab      	cmp	r3, r5
 800ed1a:	dc19      	bgt.n	800ed50 <__multadd+0x74>
 800ed1c:	6861      	ldr	r1, [r4, #4]
 800ed1e:	4638      	mov	r0, r7
 800ed20:	3101      	adds	r1, #1
 800ed22:	f7ff ff79 	bl	800ec18 <_Balloc>
 800ed26:	4680      	mov	r8, r0
 800ed28:	b928      	cbnz	r0, 800ed36 <__multadd+0x5a>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	4b0c      	ldr	r3, [pc, #48]	; (800ed60 <__multadd+0x84>)
 800ed2e:	480d      	ldr	r0, [pc, #52]	; (800ed64 <__multadd+0x88>)
 800ed30:	21b5      	movs	r1, #181	; 0xb5
 800ed32:	f000 febf 	bl	800fab4 <__assert_func>
 800ed36:	6922      	ldr	r2, [r4, #16]
 800ed38:	3202      	adds	r2, #2
 800ed3a:	f104 010c 	add.w	r1, r4, #12
 800ed3e:	0092      	lsls	r2, r2, #2
 800ed40:	300c      	adds	r0, #12
 800ed42:	f7fc fffd 	bl	800bd40 <memcpy>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f7ff ffa5 	bl	800ec98 <_Bfree>
 800ed4e:	4644      	mov	r4, r8
 800ed50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed54:	3501      	adds	r5, #1
 800ed56:	615e      	str	r6, [r3, #20]
 800ed58:	6125      	str	r5, [r4, #16]
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed60:	08012f58 	.word	0x08012f58
 800ed64:	08012fe4 	.word	0x08012fe4

0800ed68 <__s2b>:
 800ed68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	4615      	mov	r5, r2
 800ed70:	461f      	mov	r7, r3
 800ed72:	2209      	movs	r2, #9
 800ed74:	3308      	adds	r3, #8
 800ed76:	4606      	mov	r6, r0
 800ed78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	2201      	movs	r2, #1
 800ed80:	429a      	cmp	r2, r3
 800ed82:	db09      	blt.n	800ed98 <__s2b+0x30>
 800ed84:	4630      	mov	r0, r6
 800ed86:	f7ff ff47 	bl	800ec18 <_Balloc>
 800ed8a:	b940      	cbnz	r0, 800ed9e <__s2b+0x36>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	4b19      	ldr	r3, [pc, #100]	; (800edf4 <__s2b+0x8c>)
 800ed90:	4819      	ldr	r0, [pc, #100]	; (800edf8 <__s2b+0x90>)
 800ed92:	21ce      	movs	r1, #206	; 0xce
 800ed94:	f000 fe8e 	bl	800fab4 <__assert_func>
 800ed98:	0052      	lsls	r2, r2, #1
 800ed9a:	3101      	adds	r1, #1
 800ed9c:	e7f0      	b.n	800ed80 <__s2b+0x18>
 800ed9e:	9b08      	ldr	r3, [sp, #32]
 800eda0:	6143      	str	r3, [r0, #20]
 800eda2:	2d09      	cmp	r5, #9
 800eda4:	f04f 0301 	mov.w	r3, #1
 800eda8:	6103      	str	r3, [r0, #16]
 800edaa:	dd16      	ble.n	800edda <__s2b+0x72>
 800edac:	f104 0909 	add.w	r9, r4, #9
 800edb0:	46c8      	mov	r8, r9
 800edb2:	442c      	add	r4, r5
 800edb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800edb8:	4601      	mov	r1, r0
 800edba:	3b30      	subs	r3, #48	; 0x30
 800edbc:	220a      	movs	r2, #10
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ff8c 	bl	800ecdc <__multadd>
 800edc4:	45a0      	cmp	r8, r4
 800edc6:	d1f5      	bne.n	800edb4 <__s2b+0x4c>
 800edc8:	f1a5 0408 	sub.w	r4, r5, #8
 800edcc:	444c      	add	r4, r9
 800edce:	1b2d      	subs	r5, r5, r4
 800edd0:	1963      	adds	r3, r4, r5
 800edd2:	42bb      	cmp	r3, r7
 800edd4:	db04      	blt.n	800ede0 <__s2b+0x78>
 800edd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edda:	340a      	adds	r4, #10
 800eddc:	2509      	movs	r5, #9
 800edde:	e7f6      	b.n	800edce <__s2b+0x66>
 800ede0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ede4:	4601      	mov	r1, r0
 800ede6:	3b30      	subs	r3, #48	; 0x30
 800ede8:	220a      	movs	r2, #10
 800edea:	4630      	mov	r0, r6
 800edec:	f7ff ff76 	bl	800ecdc <__multadd>
 800edf0:	e7ee      	b.n	800edd0 <__s2b+0x68>
 800edf2:	bf00      	nop
 800edf4:	08012f58 	.word	0x08012f58
 800edf8:	08012fe4 	.word	0x08012fe4

0800edfc <__hi0bits>:
 800edfc:	0c03      	lsrs	r3, r0, #16
 800edfe:	041b      	lsls	r3, r3, #16
 800ee00:	b9d3      	cbnz	r3, 800ee38 <__hi0bits+0x3c>
 800ee02:	0400      	lsls	r0, r0, #16
 800ee04:	2310      	movs	r3, #16
 800ee06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ee0a:	bf04      	itt	eq
 800ee0c:	0200      	lsleq	r0, r0, #8
 800ee0e:	3308      	addeq	r3, #8
 800ee10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ee14:	bf04      	itt	eq
 800ee16:	0100      	lsleq	r0, r0, #4
 800ee18:	3304      	addeq	r3, #4
 800ee1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ee1e:	bf04      	itt	eq
 800ee20:	0080      	lsleq	r0, r0, #2
 800ee22:	3302      	addeq	r3, #2
 800ee24:	2800      	cmp	r0, #0
 800ee26:	db05      	blt.n	800ee34 <__hi0bits+0x38>
 800ee28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ee2c:	f103 0301 	add.w	r3, r3, #1
 800ee30:	bf08      	it	eq
 800ee32:	2320      	moveq	r3, #32
 800ee34:	4618      	mov	r0, r3
 800ee36:	4770      	bx	lr
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e7e4      	b.n	800ee06 <__hi0bits+0xa>

0800ee3c <__lo0bits>:
 800ee3c:	6803      	ldr	r3, [r0, #0]
 800ee3e:	f013 0207 	ands.w	r2, r3, #7
 800ee42:	4601      	mov	r1, r0
 800ee44:	d00b      	beq.n	800ee5e <__lo0bits+0x22>
 800ee46:	07da      	lsls	r2, r3, #31
 800ee48:	d423      	bmi.n	800ee92 <__lo0bits+0x56>
 800ee4a:	0798      	lsls	r0, r3, #30
 800ee4c:	bf49      	itett	mi
 800ee4e:	085b      	lsrmi	r3, r3, #1
 800ee50:	089b      	lsrpl	r3, r3, #2
 800ee52:	2001      	movmi	r0, #1
 800ee54:	600b      	strmi	r3, [r1, #0]
 800ee56:	bf5c      	itt	pl
 800ee58:	600b      	strpl	r3, [r1, #0]
 800ee5a:	2002      	movpl	r0, #2
 800ee5c:	4770      	bx	lr
 800ee5e:	b298      	uxth	r0, r3
 800ee60:	b9a8      	cbnz	r0, 800ee8e <__lo0bits+0x52>
 800ee62:	0c1b      	lsrs	r3, r3, #16
 800ee64:	2010      	movs	r0, #16
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	b90a      	cbnz	r2, 800ee6e <__lo0bits+0x32>
 800ee6a:	3008      	adds	r0, #8
 800ee6c:	0a1b      	lsrs	r3, r3, #8
 800ee6e:	071a      	lsls	r2, r3, #28
 800ee70:	bf04      	itt	eq
 800ee72:	091b      	lsreq	r3, r3, #4
 800ee74:	3004      	addeq	r0, #4
 800ee76:	079a      	lsls	r2, r3, #30
 800ee78:	bf04      	itt	eq
 800ee7a:	089b      	lsreq	r3, r3, #2
 800ee7c:	3002      	addeq	r0, #2
 800ee7e:	07da      	lsls	r2, r3, #31
 800ee80:	d403      	bmi.n	800ee8a <__lo0bits+0x4e>
 800ee82:	085b      	lsrs	r3, r3, #1
 800ee84:	f100 0001 	add.w	r0, r0, #1
 800ee88:	d005      	beq.n	800ee96 <__lo0bits+0x5a>
 800ee8a:	600b      	str	r3, [r1, #0]
 800ee8c:	4770      	bx	lr
 800ee8e:	4610      	mov	r0, r2
 800ee90:	e7e9      	b.n	800ee66 <__lo0bits+0x2a>
 800ee92:	2000      	movs	r0, #0
 800ee94:	4770      	bx	lr
 800ee96:	2020      	movs	r0, #32
 800ee98:	4770      	bx	lr
	...

0800ee9c <__i2b>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	460c      	mov	r4, r1
 800eea0:	2101      	movs	r1, #1
 800eea2:	f7ff feb9 	bl	800ec18 <_Balloc>
 800eea6:	4602      	mov	r2, r0
 800eea8:	b928      	cbnz	r0, 800eeb6 <__i2b+0x1a>
 800eeaa:	4b05      	ldr	r3, [pc, #20]	; (800eec0 <__i2b+0x24>)
 800eeac:	4805      	ldr	r0, [pc, #20]	; (800eec4 <__i2b+0x28>)
 800eeae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eeb2:	f000 fdff 	bl	800fab4 <__assert_func>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	6144      	str	r4, [r0, #20]
 800eeba:	6103      	str	r3, [r0, #16]
 800eebc:	bd10      	pop	{r4, pc}
 800eebe:	bf00      	nop
 800eec0:	08012f58 	.word	0x08012f58
 800eec4:	08012fe4 	.word	0x08012fe4

0800eec8 <__multiply>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	4691      	mov	r9, r2
 800eece:	690a      	ldr	r2, [r1, #16]
 800eed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	bfb8      	it	lt
 800eed8:	460b      	movlt	r3, r1
 800eeda:	460c      	mov	r4, r1
 800eedc:	bfbc      	itt	lt
 800eede:	464c      	movlt	r4, r9
 800eee0:	4699      	movlt	r9, r3
 800eee2:	6927      	ldr	r7, [r4, #16]
 800eee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	6861      	ldr	r1, [r4, #4]
 800eeec:	eb07 060a 	add.w	r6, r7, sl
 800eef0:	42b3      	cmp	r3, r6
 800eef2:	b085      	sub	sp, #20
 800eef4:	bfb8      	it	lt
 800eef6:	3101      	addlt	r1, #1
 800eef8:	f7ff fe8e 	bl	800ec18 <_Balloc>
 800eefc:	b930      	cbnz	r0, 800ef0c <__multiply+0x44>
 800eefe:	4602      	mov	r2, r0
 800ef00:	4b44      	ldr	r3, [pc, #272]	; (800f014 <__multiply+0x14c>)
 800ef02:	4845      	ldr	r0, [pc, #276]	; (800f018 <__multiply+0x150>)
 800ef04:	f240 115d 	movw	r1, #349	; 0x15d
 800ef08:	f000 fdd4 	bl	800fab4 <__assert_func>
 800ef0c:	f100 0514 	add.w	r5, r0, #20
 800ef10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef14:	462b      	mov	r3, r5
 800ef16:	2200      	movs	r2, #0
 800ef18:	4543      	cmp	r3, r8
 800ef1a:	d321      	bcc.n	800ef60 <__multiply+0x98>
 800ef1c:	f104 0314 	add.w	r3, r4, #20
 800ef20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef24:	f109 0314 	add.w	r3, r9, #20
 800ef28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ef2c:	9202      	str	r2, [sp, #8]
 800ef2e:	1b3a      	subs	r2, r7, r4
 800ef30:	3a15      	subs	r2, #21
 800ef32:	f022 0203 	bic.w	r2, r2, #3
 800ef36:	3204      	adds	r2, #4
 800ef38:	f104 0115 	add.w	r1, r4, #21
 800ef3c:	428f      	cmp	r7, r1
 800ef3e:	bf38      	it	cc
 800ef40:	2204      	movcc	r2, #4
 800ef42:	9201      	str	r2, [sp, #4]
 800ef44:	9a02      	ldr	r2, [sp, #8]
 800ef46:	9303      	str	r3, [sp, #12]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d80c      	bhi.n	800ef66 <__multiply+0x9e>
 800ef4c:	2e00      	cmp	r6, #0
 800ef4e:	dd03      	ble.n	800ef58 <__multiply+0x90>
 800ef50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d05a      	beq.n	800f00e <__multiply+0x146>
 800ef58:	6106      	str	r6, [r0, #16]
 800ef5a:	b005      	add	sp, #20
 800ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef60:	f843 2b04 	str.w	r2, [r3], #4
 800ef64:	e7d8      	b.n	800ef18 <__multiply+0x50>
 800ef66:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef6a:	f1ba 0f00 	cmp.w	sl, #0
 800ef6e:	d024      	beq.n	800efba <__multiply+0xf2>
 800ef70:	f104 0e14 	add.w	lr, r4, #20
 800ef74:	46a9      	mov	r9, r5
 800ef76:	f04f 0c00 	mov.w	ip, #0
 800ef7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef7e:	f8d9 1000 	ldr.w	r1, [r9]
 800ef82:	fa1f fb82 	uxth.w	fp, r2
 800ef86:	b289      	uxth	r1, r1
 800ef88:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef90:	f8d9 2000 	ldr.w	r2, [r9]
 800ef94:	4461      	add	r1, ip
 800ef96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800efa2:	b289      	uxth	r1, r1
 800efa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800efa8:	4577      	cmp	r7, lr
 800efaa:	f849 1b04 	str.w	r1, [r9], #4
 800efae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800efb2:	d8e2      	bhi.n	800ef7a <__multiply+0xb2>
 800efb4:	9a01      	ldr	r2, [sp, #4]
 800efb6:	f845 c002 	str.w	ip, [r5, r2]
 800efba:	9a03      	ldr	r2, [sp, #12]
 800efbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800efc0:	3304      	adds	r3, #4
 800efc2:	f1b9 0f00 	cmp.w	r9, #0
 800efc6:	d020      	beq.n	800f00a <__multiply+0x142>
 800efc8:	6829      	ldr	r1, [r5, #0]
 800efca:	f104 0c14 	add.w	ip, r4, #20
 800efce:	46ae      	mov	lr, r5
 800efd0:	f04f 0a00 	mov.w	sl, #0
 800efd4:	f8bc b000 	ldrh.w	fp, [ip]
 800efd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800efdc:	fb09 220b 	mla	r2, r9, fp, r2
 800efe0:	4492      	add	sl, r2
 800efe2:	b289      	uxth	r1, r1
 800efe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800efe8:	f84e 1b04 	str.w	r1, [lr], #4
 800efec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eff0:	f8be 1000 	ldrh.w	r1, [lr]
 800eff4:	0c12      	lsrs	r2, r2, #16
 800eff6:	fb09 1102 	mla	r1, r9, r2, r1
 800effa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800effe:	4567      	cmp	r7, ip
 800f000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f004:	d8e6      	bhi.n	800efd4 <__multiply+0x10c>
 800f006:	9a01      	ldr	r2, [sp, #4]
 800f008:	50a9      	str	r1, [r5, r2]
 800f00a:	3504      	adds	r5, #4
 800f00c:	e79a      	b.n	800ef44 <__multiply+0x7c>
 800f00e:	3e01      	subs	r6, #1
 800f010:	e79c      	b.n	800ef4c <__multiply+0x84>
 800f012:	bf00      	nop
 800f014:	08012f58 	.word	0x08012f58
 800f018:	08012fe4 	.word	0x08012fe4

0800f01c <__pow5mult>:
 800f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f020:	4615      	mov	r5, r2
 800f022:	f012 0203 	ands.w	r2, r2, #3
 800f026:	4606      	mov	r6, r0
 800f028:	460f      	mov	r7, r1
 800f02a:	d007      	beq.n	800f03c <__pow5mult+0x20>
 800f02c:	4c25      	ldr	r4, [pc, #148]	; (800f0c4 <__pow5mult+0xa8>)
 800f02e:	3a01      	subs	r2, #1
 800f030:	2300      	movs	r3, #0
 800f032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f036:	f7ff fe51 	bl	800ecdc <__multadd>
 800f03a:	4607      	mov	r7, r0
 800f03c:	10ad      	asrs	r5, r5, #2
 800f03e:	d03d      	beq.n	800f0bc <__pow5mult+0xa0>
 800f040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f042:	b97c      	cbnz	r4, 800f064 <__pow5mult+0x48>
 800f044:	2010      	movs	r0, #16
 800f046:	f7ff fdcd 	bl	800ebe4 <malloc>
 800f04a:	4602      	mov	r2, r0
 800f04c:	6270      	str	r0, [r6, #36]	; 0x24
 800f04e:	b928      	cbnz	r0, 800f05c <__pow5mult+0x40>
 800f050:	4b1d      	ldr	r3, [pc, #116]	; (800f0c8 <__pow5mult+0xac>)
 800f052:	481e      	ldr	r0, [pc, #120]	; (800f0cc <__pow5mult+0xb0>)
 800f054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f058:	f000 fd2c 	bl	800fab4 <__assert_func>
 800f05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f060:	6004      	str	r4, [r0, #0]
 800f062:	60c4      	str	r4, [r0, #12]
 800f064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f06c:	b94c      	cbnz	r4, 800f082 <__pow5mult+0x66>
 800f06e:	f240 2171 	movw	r1, #625	; 0x271
 800f072:	4630      	mov	r0, r6
 800f074:	f7ff ff12 	bl	800ee9c <__i2b>
 800f078:	2300      	movs	r3, #0
 800f07a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f07e:	4604      	mov	r4, r0
 800f080:	6003      	str	r3, [r0, #0]
 800f082:	f04f 0900 	mov.w	r9, #0
 800f086:	07eb      	lsls	r3, r5, #31
 800f088:	d50a      	bpl.n	800f0a0 <__pow5mult+0x84>
 800f08a:	4639      	mov	r1, r7
 800f08c:	4622      	mov	r2, r4
 800f08e:	4630      	mov	r0, r6
 800f090:	f7ff ff1a 	bl	800eec8 <__multiply>
 800f094:	4639      	mov	r1, r7
 800f096:	4680      	mov	r8, r0
 800f098:	4630      	mov	r0, r6
 800f09a:	f7ff fdfd 	bl	800ec98 <_Bfree>
 800f09e:	4647      	mov	r7, r8
 800f0a0:	106d      	asrs	r5, r5, #1
 800f0a2:	d00b      	beq.n	800f0bc <__pow5mult+0xa0>
 800f0a4:	6820      	ldr	r0, [r4, #0]
 800f0a6:	b938      	cbnz	r0, 800f0b8 <__pow5mult+0x9c>
 800f0a8:	4622      	mov	r2, r4
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7ff ff0b 	bl	800eec8 <__multiply>
 800f0b2:	6020      	str	r0, [r4, #0]
 800f0b4:	f8c0 9000 	str.w	r9, [r0]
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	e7e4      	b.n	800f086 <__pow5mult+0x6a>
 800f0bc:	4638      	mov	r0, r7
 800f0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0c2:	bf00      	nop
 800f0c4:	08013130 	.word	0x08013130
 800f0c8:	08012ee6 	.word	0x08012ee6
 800f0cc:	08012fe4 	.word	0x08012fe4

0800f0d0 <__lshift>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	6849      	ldr	r1, [r1, #4]
 800f0d8:	6923      	ldr	r3, [r4, #16]
 800f0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0de:	68a3      	ldr	r3, [r4, #8]
 800f0e0:	4607      	mov	r7, r0
 800f0e2:	4691      	mov	r9, r2
 800f0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0e8:	f108 0601 	add.w	r6, r8, #1
 800f0ec:	42b3      	cmp	r3, r6
 800f0ee:	db0b      	blt.n	800f108 <__lshift+0x38>
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7ff fd91 	bl	800ec18 <_Balloc>
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	b948      	cbnz	r0, 800f10e <__lshift+0x3e>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	4b2a      	ldr	r3, [pc, #168]	; (800f1a8 <__lshift+0xd8>)
 800f0fe:	482b      	ldr	r0, [pc, #172]	; (800f1ac <__lshift+0xdc>)
 800f100:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f104:	f000 fcd6 	bl	800fab4 <__assert_func>
 800f108:	3101      	adds	r1, #1
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	e7ee      	b.n	800f0ec <__lshift+0x1c>
 800f10e:	2300      	movs	r3, #0
 800f110:	f100 0114 	add.w	r1, r0, #20
 800f114:	f100 0210 	add.w	r2, r0, #16
 800f118:	4618      	mov	r0, r3
 800f11a:	4553      	cmp	r3, sl
 800f11c:	db37      	blt.n	800f18e <__lshift+0xbe>
 800f11e:	6920      	ldr	r0, [r4, #16]
 800f120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f124:	f104 0314 	add.w	r3, r4, #20
 800f128:	f019 091f 	ands.w	r9, r9, #31
 800f12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f134:	d02f      	beq.n	800f196 <__lshift+0xc6>
 800f136:	f1c9 0e20 	rsb	lr, r9, #32
 800f13a:	468a      	mov	sl, r1
 800f13c:	f04f 0c00 	mov.w	ip, #0
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	fa02 f209 	lsl.w	r2, r2, r9
 800f146:	ea42 020c 	orr.w	r2, r2, ip
 800f14a:	f84a 2b04 	str.w	r2, [sl], #4
 800f14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f152:	4298      	cmp	r0, r3
 800f154:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f158:	d8f2      	bhi.n	800f140 <__lshift+0x70>
 800f15a:	1b03      	subs	r3, r0, r4
 800f15c:	3b15      	subs	r3, #21
 800f15e:	f023 0303 	bic.w	r3, r3, #3
 800f162:	3304      	adds	r3, #4
 800f164:	f104 0215 	add.w	r2, r4, #21
 800f168:	4290      	cmp	r0, r2
 800f16a:	bf38      	it	cc
 800f16c:	2304      	movcc	r3, #4
 800f16e:	f841 c003 	str.w	ip, [r1, r3]
 800f172:	f1bc 0f00 	cmp.w	ip, #0
 800f176:	d001      	beq.n	800f17c <__lshift+0xac>
 800f178:	f108 0602 	add.w	r6, r8, #2
 800f17c:	3e01      	subs	r6, #1
 800f17e:	4638      	mov	r0, r7
 800f180:	612e      	str	r6, [r5, #16]
 800f182:	4621      	mov	r1, r4
 800f184:	f7ff fd88 	bl	800ec98 <_Bfree>
 800f188:	4628      	mov	r0, r5
 800f18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f18e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f192:	3301      	adds	r3, #1
 800f194:	e7c1      	b.n	800f11a <__lshift+0x4a>
 800f196:	3904      	subs	r1, #4
 800f198:	f853 2b04 	ldr.w	r2, [r3], #4
 800f19c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1a0:	4298      	cmp	r0, r3
 800f1a2:	d8f9      	bhi.n	800f198 <__lshift+0xc8>
 800f1a4:	e7ea      	b.n	800f17c <__lshift+0xac>
 800f1a6:	bf00      	nop
 800f1a8:	08012f58 	.word	0x08012f58
 800f1ac:	08012fe4 	.word	0x08012fe4

0800f1b0 <__mcmp>:
 800f1b0:	b530      	push	{r4, r5, lr}
 800f1b2:	6902      	ldr	r2, [r0, #16]
 800f1b4:	690c      	ldr	r4, [r1, #16]
 800f1b6:	1b12      	subs	r2, r2, r4
 800f1b8:	d10e      	bne.n	800f1d8 <__mcmp+0x28>
 800f1ba:	f100 0314 	add.w	r3, r0, #20
 800f1be:	3114      	adds	r1, #20
 800f1c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f1c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f1cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f1d0:	42a5      	cmp	r5, r4
 800f1d2:	d003      	beq.n	800f1dc <__mcmp+0x2c>
 800f1d4:	d305      	bcc.n	800f1e2 <__mcmp+0x32>
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	4610      	mov	r0, r2
 800f1da:	bd30      	pop	{r4, r5, pc}
 800f1dc:	4283      	cmp	r3, r0
 800f1de:	d3f3      	bcc.n	800f1c8 <__mcmp+0x18>
 800f1e0:	e7fa      	b.n	800f1d8 <__mcmp+0x28>
 800f1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e6:	e7f7      	b.n	800f1d8 <__mcmp+0x28>

0800f1e8 <__mdiff>:
 800f1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	4611      	mov	r1, r2
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	4690      	mov	r8, r2
 800f1f6:	f7ff ffdb 	bl	800f1b0 <__mcmp>
 800f1fa:	1e05      	subs	r5, r0, #0
 800f1fc:	d110      	bne.n	800f220 <__mdiff+0x38>
 800f1fe:	4629      	mov	r1, r5
 800f200:	4630      	mov	r0, r6
 800f202:	f7ff fd09 	bl	800ec18 <_Balloc>
 800f206:	b930      	cbnz	r0, 800f216 <__mdiff+0x2e>
 800f208:	4b3a      	ldr	r3, [pc, #232]	; (800f2f4 <__mdiff+0x10c>)
 800f20a:	4602      	mov	r2, r0
 800f20c:	f240 2132 	movw	r1, #562	; 0x232
 800f210:	4839      	ldr	r0, [pc, #228]	; (800f2f8 <__mdiff+0x110>)
 800f212:	f000 fc4f 	bl	800fab4 <__assert_func>
 800f216:	2301      	movs	r3, #1
 800f218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f220:	bfa4      	itt	ge
 800f222:	4643      	movge	r3, r8
 800f224:	46a0      	movge	r8, r4
 800f226:	4630      	mov	r0, r6
 800f228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f22c:	bfa6      	itte	ge
 800f22e:	461c      	movge	r4, r3
 800f230:	2500      	movge	r5, #0
 800f232:	2501      	movlt	r5, #1
 800f234:	f7ff fcf0 	bl	800ec18 <_Balloc>
 800f238:	b920      	cbnz	r0, 800f244 <__mdiff+0x5c>
 800f23a:	4b2e      	ldr	r3, [pc, #184]	; (800f2f4 <__mdiff+0x10c>)
 800f23c:	4602      	mov	r2, r0
 800f23e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f242:	e7e5      	b.n	800f210 <__mdiff+0x28>
 800f244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f248:	6926      	ldr	r6, [r4, #16]
 800f24a:	60c5      	str	r5, [r0, #12]
 800f24c:	f104 0914 	add.w	r9, r4, #20
 800f250:	f108 0514 	add.w	r5, r8, #20
 800f254:	f100 0e14 	add.w	lr, r0, #20
 800f258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f25c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f260:	f108 0210 	add.w	r2, r8, #16
 800f264:	46f2      	mov	sl, lr
 800f266:	2100      	movs	r1, #0
 800f268:	f859 3b04 	ldr.w	r3, [r9], #4
 800f26c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f270:	fa1f f883 	uxth.w	r8, r3
 800f274:	fa11 f18b 	uxtah	r1, r1, fp
 800f278:	0c1b      	lsrs	r3, r3, #16
 800f27a:	eba1 0808 	sub.w	r8, r1, r8
 800f27e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f286:	fa1f f888 	uxth.w	r8, r8
 800f28a:	1419      	asrs	r1, r3, #16
 800f28c:	454e      	cmp	r6, r9
 800f28e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f292:	f84a 3b04 	str.w	r3, [sl], #4
 800f296:	d8e7      	bhi.n	800f268 <__mdiff+0x80>
 800f298:	1b33      	subs	r3, r6, r4
 800f29a:	3b15      	subs	r3, #21
 800f29c:	f023 0303 	bic.w	r3, r3, #3
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	3415      	adds	r4, #21
 800f2a4:	42a6      	cmp	r6, r4
 800f2a6:	bf38      	it	cc
 800f2a8:	2304      	movcc	r3, #4
 800f2aa:	441d      	add	r5, r3
 800f2ac:	4473      	add	r3, lr
 800f2ae:	469e      	mov	lr, r3
 800f2b0:	462e      	mov	r6, r5
 800f2b2:	4566      	cmp	r6, ip
 800f2b4:	d30e      	bcc.n	800f2d4 <__mdiff+0xec>
 800f2b6:	f10c 0203 	add.w	r2, ip, #3
 800f2ba:	1b52      	subs	r2, r2, r5
 800f2bc:	f022 0203 	bic.w	r2, r2, #3
 800f2c0:	3d03      	subs	r5, #3
 800f2c2:	45ac      	cmp	ip, r5
 800f2c4:	bf38      	it	cc
 800f2c6:	2200      	movcc	r2, #0
 800f2c8:	441a      	add	r2, r3
 800f2ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f2ce:	b17b      	cbz	r3, 800f2f0 <__mdiff+0x108>
 800f2d0:	6107      	str	r7, [r0, #16]
 800f2d2:	e7a3      	b.n	800f21c <__mdiff+0x34>
 800f2d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800f2d8:	fa11 f288 	uxtah	r2, r1, r8
 800f2dc:	1414      	asrs	r4, r2, #16
 800f2de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f2e2:	b292      	uxth	r2, r2
 800f2e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f2e8:	f84e 2b04 	str.w	r2, [lr], #4
 800f2ec:	1421      	asrs	r1, r4, #16
 800f2ee:	e7e0      	b.n	800f2b2 <__mdiff+0xca>
 800f2f0:	3f01      	subs	r7, #1
 800f2f2:	e7ea      	b.n	800f2ca <__mdiff+0xe2>
 800f2f4:	08012f58 	.word	0x08012f58
 800f2f8:	08012fe4 	.word	0x08012fe4

0800f2fc <__ulp>:
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	ed8d 0b00 	vstr	d0, [sp]
 800f302:	9b01      	ldr	r3, [sp, #4]
 800f304:	4912      	ldr	r1, [pc, #72]	; (800f350 <__ulp+0x54>)
 800f306:	4019      	ands	r1, r3
 800f308:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f30c:	2900      	cmp	r1, #0
 800f30e:	dd05      	ble.n	800f31c <__ulp+0x20>
 800f310:	2200      	movs	r2, #0
 800f312:	460b      	mov	r3, r1
 800f314:	ec43 2b10 	vmov	d0, r2, r3
 800f318:	b002      	add	sp, #8
 800f31a:	4770      	bx	lr
 800f31c:	4249      	negs	r1, r1
 800f31e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f322:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f326:	f04f 0200 	mov.w	r2, #0
 800f32a:	f04f 0300 	mov.w	r3, #0
 800f32e:	da04      	bge.n	800f33a <__ulp+0x3e>
 800f330:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f334:	fa41 f300 	asr.w	r3, r1, r0
 800f338:	e7ec      	b.n	800f314 <__ulp+0x18>
 800f33a:	f1a0 0114 	sub.w	r1, r0, #20
 800f33e:	291e      	cmp	r1, #30
 800f340:	bfda      	itte	le
 800f342:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f346:	fa20 f101 	lsrle.w	r1, r0, r1
 800f34a:	2101      	movgt	r1, #1
 800f34c:	460a      	mov	r2, r1
 800f34e:	e7e1      	b.n	800f314 <__ulp+0x18>
 800f350:	7ff00000 	.word	0x7ff00000

0800f354 <__b2d>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	6905      	ldr	r5, [r0, #16]
 800f358:	f100 0714 	add.w	r7, r0, #20
 800f35c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f360:	1f2e      	subs	r6, r5, #4
 800f362:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f366:	4620      	mov	r0, r4
 800f368:	f7ff fd48 	bl	800edfc <__hi0bits>
 800f36c:	f1c0 0320 	rsb	r3, r0, #32
 800f370:	280a      	cmp	r0, #10
 800f372:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f3f0 <__b2d+0x9c>
 800f376:	600b      	str	r3, [r1, #0]
 800f378:	dc14      	bgt.n	800f3a4 <__b2d+0x50>
 800f37a:	f1c0 0e0b 	rsb	lr, r0, #11
 800f37e:	fa24 f10e 	lsr.w	r1, r4, lr
 800f382:	42b7      	cmp	r7, r6
 800f384:	ea41 030c 	orr.w	r3, r1, ip
 800f388:	bf34      	ite	cc
 800f38a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f38e:	2100      	movcs	r1, #0
 800f390:	3015      	adds	r0, #21
 800f392:	fa04 f000 	lsl.w	r0, r4, r0
 800f396:	fa21 f10e 	lsr.w	r1, r1, lr
 800f39a:	ea40 0201 	orr.w	r2, r0, r1
 800f39e:	ec43 2b10 	vmov	d0, r2, r3
 800f3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3a4:	42b7      	cmp	r7, r6
 800f3a6:	bf3a      	itte	cc
 800f3a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f3ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800f3b0:	2100      	movcs	r1, #0
 800f3b2:	380b      	subs	r0, #11
 800f3b4:	d017      	beq.n	800f3e6 <__b2d+0x92>
 800f3b6:	f1c0 0c20 	rsb	ip, r0, #32
 800f3ba:	fa04 f500 	lsl.w	r5, r4, r0
 800f3be:	42be      	cmp	r6, r7
 800f3c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800f3c4:	ea45 0504 	orr.w	r5, r5, r4
 800f3c8:	bf8c      	ite	hi
 800f3ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f3ce:	2400      	movls	r4, #0
 800f3d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f3d4:	fa01 f000 	lsl.w	r0, r1, r0
 800f3d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800f3dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f3e0:	ea40 0204 	orr.w	r2, r0, r4
 800f3e4:	e7db      	b.n	800f39e <__b2d+0x4a>
 800f3e6:	ea44 030c 	orr.w	r3, r4, ip
 800f3ea:	460a      	mov	r2, r1
 800f3ec:	e7d7      	b.n	800f39e <__b2d+0x4a>
 800f3ee:	bf00      	nop
 800f3f0:	3ff00000 	.word	0x3ff00000

0800f3f4 <__d2b>:
 800f3f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3f8:	4689      	mov	r9, r1
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	ec57 6b10 	vmov	r6, r7, d0
 800f400:	4690      	mov	r8, r2
 800f402:	f7ff fc09 	bl	800ec18 <_Balloc>
 800f406:	4604      	mov	r4, r0
 800f408:	b930      	cbnz	r0, 800f418 <__d2b+0x24>
 800f40a:	4602      	mov	r2, r0
 800f40c:	4b25      	ldr	r3, [pc, #148]	; (800f4a4 <__d2b+0xb0>)
 800f40e:	4826      	ldr	r0, [pc, #152]	; (800f4a8 <__d2b+0xb4>)
 800f410:	f240 310a 	movw	r1, #778	; 0x30a
 800f414:	f000 fb4e 	bl	800fab4 <__assert_func>
 800f418:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f41c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f420:	bb35      	cbnz	r5, 800f470 <__d2b+0x7c>
 800f422:	2e00      	cmp	r6, #0
 800f424:	9301      	str	r3, [sp, #4]
 800f426:	d028      	beq.n	800f47a <__d2b+0x86>
 800f428:	4668      	mov	r0, sp
 800f42a:	9600      	str	r6, [sp, #0]
 800f42c:	f7ff fd06 	bl	800ee3c <__lo0bits>
 800f430:	9900      	ldr	r1, [sp, #0]
 800f432:	b300      	cbz	r0, 800f476 <__d2b+0x82>
 800f434:	9a01      	ldr	r2, [sp, #4]
 800f436:	f1c0 0320 	rsb	r3, r0, #32
 800f43a:	fa02 f303 	lsl.w	r3, r2, r3
 800f43e:	430b      	orrs	r3, r1
 800f440:	40c2      	lsrs	r2, r0
 800f442:	6163      	str	r3, [r4, #20]
 800f444:	9201      	str	r2, [sp, #4]
 800f446:	9b01      	ldr	r3, [sp, #4]
 800f448:	61a3      	str	r3, [r4, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	bf14      	ite	ne
 800f44e:	2202      	movne	r2, #2
 800f450:	2201      	moveq	r2, #1
 800f452:	6122      	str	r2, [r4, #16]
 800f454:	b1d5      	cbz	r5, 800f48c <__d2b+0x98>
 800f456:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f45a:	4405      	add	r5, r0
 800f45c:	f8c9 5000 	str.w	r5, [r9]
 800f460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f464:	f8c8 0000 	str.w	r0, [r8]
 800f468:	4620      	mov	r0, r4
 800f46a:	b003      	add	sp, #12
 800f46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f474:	e7d5      	b.n	800f422 <__d2b+0x2e>
 800f476:	6161      	str	r1, [r4, #20]
 800f478:	e7e5      	b.n	800f446 <__d2b+0x52>
 800f47a:	a801      	add	r0, sp, #4
 800f47c:	f7ff fcde 	bl	800ee3c <__lo0bits>
 800f480:	9b01      	ldr	r3, [sp, #4]
 800f482:	6163      	str	r3, [r4, #20]
 800f484:	2201      	movs	r2, #1
 800f486:	6122      	str	r2, [r4, #16]
 800f488:	3020      	adds	r0, #32
 800f48a:	e7e3      	b.n	800f454 <__d2b+0x60>
 800f48c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f494:	f8c9 0000 	str.w	r0, [r9]
 800f498:	6918      	ldr	r0, [r3, #16]
 800f49a:	f7ff fcaf 	bl	800edfc <__hi0bits>
 800f49e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f4a2:	e7df      	b.n	800f464 <__d2b+0x70>
 800f4a4:	08012f58 	.word	0x08012f58
 800f4a8:	08012fe4 	.word	0x08012fe4

0800f4ac <__ratio>:
 800f4ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b0:	4688      	mov	r8, r1
 800f4b2:	4669      	mov	r1, sp
 800f4b4:	4681      	mov	r9, r0
 800f4b6:	f7ff ff4d 	bl	800f354 <__b2d>
 800f4ba:	a901      	add	r1, sp, #4
 800f4bc:	4640      	mov	r0, r8
 800f4be:	ec55 4b10 	vmov	r4, r5, d0
 800f4c2:	f7ff ff47 	bl	800f354 <__b2d>
 800f4c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f4ce:	eba3 0c02 	sub.w	ip, r3, r2
 800f4d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f4dc:	ec51 0b10 	vmov	r0, r1, d0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	bfd6      	itet	le
 800f4e4:	460a      	movle	r2, r1
 800f4e6:	462a      	movgt	r2, r5
 800f4e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4ec:	468b      	mov	fp, r1
 800f4ee:	462f      	mov	r7, r5
 800f4f0:	bfd4      	ite	le
 800f4f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f4f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	ee10 2a10 	vmov	r2, s0
 800f500:	465b      	mov	r3, fp
 800f502:	4639      	mov	r1, r7
 800f504:	f7f1 f9aa 	bl	800085c <__aeabi_ddiv>
 800f508:	ec41 0b10 	vmov	d0, r0, r1
 800f50c:	b003      	add	sp, #12
 800f50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f512 <__copybits>:
 800f512:	3901      	subs	r1, #1
 800f514:	b570      	push	{r4, r5, r6, lr}
 800f516:	1149      	asrs	r1, r1, #5
 800f518:	6914      	ldr	r4, [r2, #16]
 800f51a:	3101      	adds	r1, #1
 800f51c:	f102 0314 	add.w	r3, r2, #20
 800f520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f524:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f528:	1f05      	subs	r5, r0, #4
 800f52a:	42a3      	cmp	r3, r4
 800f52c:	d30c      	bcc.n	800f548 <__copybits+0x36>
 800f52e:	1aa3      	subs	r3, r4, r2
 800f530:	3b11      	subs	r3, #17
 800f532:	f023 0303 	bic.w	r3, r3, #3
 800f536:	3211      	adds	r2, #17
 800f538:	42a2      	cmp	r2, r4
 800f53a:	bf88      	it	hi
 800f53c:	2300      	movhi	r3, #0
 800f53e:	4418      	add	r0, r3
 800f540:	2300      	movs	r3, #0
 800f542:	4288      	cmp	r0, r1
 800f544:	d305      	bcc.n	800f552 <__copybits+0x40>
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	f853 6b04 	ldr.w	r6, [r3], #4
 800f54c:	f845 6f04 	str.w	r6, [r5, #4]!
 800f550:	e7eb      	b.n	800f52a <__copybits+0x18>
 800f552:	f840 3b04 	str.w	r3, [r0], #4
 800f556:	e7f4      	b.n	800f542 <__copybits+0x30>

0800f558 <__any_on>:
 800f558:	f100 0214 	add.w	r2, r0, #20
 800f55c:	6900      	ldr	r0, [r0, #16]
 800f55e:	114b      	asrs	r3, r1, #5
 800f560:	4298      	cmp	r0, r3
 800f562:	b510      	push	{r4, lr}
 800f564:	db11      	blt.n	800f58a <__any_on+0x32>
 800f566:	dd0a      	ble.n	800f57e <__any_on+0x26>
 800f568:	f011 011f 	ands.w	r1, r1, #31
 800f56c:	d007      	beq.n	800f57e <__any_on+0x26>
 800f56e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f572:	fa24 f001 	lsr.w	r0, r4, r1
 800f576:	fa00 f101 	lsl.w	r1, r0, r1
 800f57a:	428c      	cmp	r4, r1
 800f57c:	d10b      	bne.n	800f596 <__any_on+0x3e>
 800f57e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f582:	4293      	cmp	r3, r2
 800f584:	d803      	bhi.n	800f58e <__any_on+0x36>
 800f586:	2000      	movs	r0, #0
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	4603      	mov	r3, r0
 800f58c:	e7f7      	b.n	800f57e <__any_on+0x26>
 800f58e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f592:	2900      	cmp	r1, #0
 800f594:	d0f5      	beq.n	800f582 <__any_on+0x2a>
 800f596:	2001      	movs	r0, #1
 800f598:	e7f6      	b.n	800f588 <__any_on+0x30>

0800f59a <_calloc_r>:
 800f59a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f59c:	fba1 2402 	umull	r2, r4, r1, r2
 800f5a0:	b94c      	cbnz	r4, 800f5b6 <_calloc_r+0x1c>
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	9201      	str	r2, [sp, #4]
 800f5a6:	f000 f87b 	bl	800f6a0 <_malloc_r>
 800f5aa:	9a01      	ldr	r2, [sp, #4]
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	b930      	cbnz	r0, 800f5be <_calloc_r+0x24>
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	b003      	add	sp, #12
 800f5b4:	bd30      	pop	{r4, r5, pc}
 800f5b6:	220c      	movs	r2, #12
 800f5b8:	6002      	str	r2, [r0, #0]
 800f5ba:	2500      	movs	r5, #0
 800f5bc:	e7f8      	b.n	800f5b0 <_calloc_r+0x16>
 800f5be:	4621      	mov	r1, r4
 800f5c0:	f7fc fbcc 	bl	800bd5c <memset>
 800f5c4:	e7f4      	b.n	800f5b0 <_calloc_r+0x16>
	...

0800f5c8 <_free_r>:
 800f5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ca:	2900      	cmp	r1, #0
 800f5cc:	d044      	beq.n	800f658 <_free_r+0x90>
 800f5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5d2:	9001      	str	r0, [sp, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f5da:	bfb8      	it	lt
 800f5dc:	18e4      	addlt	r4, r4, r3
 800f5de:	f000 fab3 	bl	800fb48 <__malloc_lock>
 800f5e2:	4a1e      	ldr	r2, [pc, #120]	; (800f65c <_free_r+0x94>)
 800f5e4:	9801      	ldr	r0, [sp, #4]
 800f5e6:	6813      	ldr	r3, [r2, #0]
 800f5e8:	b933      	cbnz	r3, 800f5f8 <_free_r+0x30>
 800f5ea:	6063      	str	r3, [r4, #4]
 800f5ec:	6014      	str	r4, [r2, #0]
 800f5ee:	b003      	add	sp, #12
 800f5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5f4:	f000 baae 	b.w	800fb54 <__malloc_unlock>
 800f5f8:	42a3      	cmp	r3, r4
 800f5fa:	d908      	bls.n	800f60e <_free_r+0x46>
 800f5fc:	6825      	ldr	r5, [r4, #0]
 800f5fe:	1961      	adds	r1, r4, r5
 800f600:	428b      	cmp	r3, r1
 800f602:	bf01      	itttt	eq
 800f604:	6819      	ldreq	r1, [r3, #0]
 800f606:	685b      	ldreq	r3, [r3, #4]
 800f608:	1949      	addeq	r1, r1, r5
 800f60a:	6021      	streq	r1, [r4, #0]
 800f60c:	e7ed      	b.n	800f5ea <_free_r+0x22>
 800f60e:	461a      	mov	r2, r3
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	b10b      	cbz	r3, 800f618 <_free_r+0x50>
 800f614:	42a3      	cmp	r3, r4
 800f616:	d9fa      	bls.n	800f60e <_free_r+0x46>
 800f618:	6811      	ldr	r1, [r2, #0]
 800f61a:	1855      	adds	r5, r2, r1
 800f61c:	42a5      	cmp	r5, r4
 800f61e:	d10b      	bne.n	800f638 <_free_r+0x70>
 800f620:	6824      	ldr	r4, [r4, #0]
 800f622:	4421      	add	r1, r4
 800f624:	1854      	adds	r4, r2, r1
 800f626:	42a3      	cmp	r3, r4
 800f628:	6011      	str	r1, [r2, #0]
 800f62a:	d1e0      	bne.n	800f5ee <_free_r+0x26>
 800f62c:	681c      	ldr	r4, [r3, #0]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	6053      	str	r3, [r2, #4]
 800f632:	4421      	add	r1, r4
 800f634:	6011      	str	r1, [r2, #0]
 800f636:	e7da      	b.n	800f5ee <_free_r+0x26>
 800f638:	d902      	bls.n	800f640 <_free_r+0x78>
 800f63a:	230c      	movs	r3, #12
 800f63c:	6003      	str	r3, [r0, #0]
 800f63e:	e7d6      	b.n	800f5ee <_free_r+0x26>
 800f640:	6825      	ldr	r5, [r4, #0]
 800f642:	1961      	adds	r1, r4, r5
 800f644:	428b      	cmp	r3, r1
 800f646:	bf04      	itt	eq
 800f648:	6819      	ldreq	r1, [r3, #0]
 800f64a:	685b      	ldreq	r3, [r3, #4]
 800f64c:	6063      	str	r3, [r4, #4]
 800f64e:	bf04      	itt	eq
 800f650:	1949      	addeq	r1, r1, r5
 800f652:	6021      	streq	r1, [r4, #0]
 800f654:	6054      	str	r4, [r2, #4]
 800f656:	e7ca      	b.n	800f5ee <_free_r+0x26>
 800f658:	b003      	add	sp, #12
 800f65a:	bd30      	pop	{r4, r5, pc}
 800f65c:	20001fc4 	.word	0x20001fc4

0800f660 <sbrk_aligned>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	4e0e      	ldr	r6, [pc, #56]	; (800f69c <sbrk_aligned+0x3c>)
 800f664:	460c      	mov	r4, r1
 800f666:	6831      	ldr	r1, [r6, #0]
 800f668:	4605      	mov	r5, r0
 800f66a:	b911      	cbnz	r1, 800f672 <sbrk_aligned+0x12>
 800f66c:	f000 f9f0 	bl	800fa50 <_sbrk_r>
 800f670:	6030      	str	r0, [r6, #0]
 800f672:	4621      	mov	r1, r4
 800f674:	4628      	mov	r0, r5
 800f676:	f000 f9eb 	bl	800fa50 <_sbrk_r>
 800f67a:	1c43      	adds	r3, r0, #1
 800f67c:	d00a      	beq.n	800f694 <sbrk_aligned+0x34>
 800f67e:	1cc4      	adds	r4, r0, #3
 800f680:	f024 0403 	bic.w	r4, r4, #3
 800f684:	42a0      	cmp	r0, r4
 800f686:	d007      	beq.n	800f698 <sbrk_aligned+0x38>
 800f688:	1a21      	subs	r1, r4, r0
 800f68a:	4628      	mov	r0, r5
 800f68c:	f000 f9e0 	bl	800fa50 <_sbrk_r>
 800f690:	3001      	adds	r0, #1
 800f692:	d101      	bne.n	800f698 <sbrk_aligned+0x38>
 800f694:	f04f 34ff 	mov.w	r4, #4294967295
 800f698:	4620      	mov	r0, r4
 800f69a:	bd70      	pop	{r4, r5, r6, pc}
 800f69c:	20001fc8 	.word	0x20001fc8

0800f6a0 <_malloc_r>:
 800f6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a4:	1ccd      	adds	r5, r1, #3
 800f6a6:	f025 0503 	bic.w	r5, r5, #3
 800f6aa:	3508      	adds	r5, #8
 800f6ac:	2d0c      	cmp	r5, #12
 800f6ae:	bf38      	it	cc
 800f6b0:	250c      	movcc	r5, #12
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	db01      	blt.n	800f6bc <_malloc_r+0x1c>
 800f6b8:	42a9      	cmp	r1, r5
 800f6ba:	d905      	bls.n	800f6c8 <_malloc_r+0x28>
 800f6bc:	230c      	movs	r3, #12
 800f6be:	603b      	str	r3, [r7, #0]
 800f6c0:	2600      	movs	r6, #0
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c8:	4e2e      	ldr	r6, [pc, #184]	; (800f784 <_malloc_r+0xe4>)
 800f6ca:	f000 fa3d 	bl	800fb48 <__malloc_lock>
 800f6ce:	6833      	ldr	r3, [r6, #0]
 800f6d0:	461c      	mov	r4, r3
 800f6d2:	bb34      	cbnz	r4, 800f722 <_malloc_r+0x82>
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f7ff ffc2 	bl	800f660 <sbrk_aligned>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	4604      	mov	r4, r0
 800f6e0:	d14d      	bne.n	800f77e <_malloc_r+0xde>
 800f6e2:	6834      	ldr	r4, [r6, #0]
 800f6e4:	4626      	mov	r6, r4
 800f6e6:	2e00      	cmp	r6, #0
 800f6e8:	d140      	bne.n	800f76c <_malloc_r+0xcc>
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4638      	mov	r0, r7
 800f6f0:	eb04 0803 	add.w	r8, r4, r3
 800f6f4:	f000 f9ac 	bl	800fa50 <_sbrk_r>
 800f6f8:	4580      	cmp	r8, r0
 800f6fa:	d13a      	bne.n	800f772 <_malloc_r+0xd2>
 800f6fc:	6821      	ldr	r1, [r4, #0]
 800f6fe:	3503      	adds	r5, #3
 800f700:	1a6d      	subs	r5, r5, r1
 800f702:	f025 0503 	bic.w	r5, r5, #3
 800f706:	3508      	adds	r5, #8
 800f708:	2d0c      	cmp	r5, #12
 800f70a:	bf38      	it	cc
 800f70c:	250c      	movcc	r5, #12
 800f70e:	4629      	mov	r1, r5
 800f710:	4638      	mov	r0, r7
 800f712:	f7ff ffa5 	bl	800f660 <sbrk_aligned>
 800f716:	3001      	adds	r0, #1
 800f718:	d02b      	beq.n	800f772 <_malloc_r+0xd2>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	442b      	add	r3, r5
 800f71e:	6023      	str	r3, [r4, #0]
 800f720:	e00e      	b.n	800f740 <_malloc_r+0xa0>
 800f722:	6822      	ldr	r2, [r4, #0]
 800f724:	1b52      	subs	r2, r2, r5
 800f726:	d41e      	bmi.n	800f766 <_malloc_r+0xc6>
 800f728:	2a0b      	cmp	r2, #11
 800f72a:	d916      	bls.n	800f75a <_malloc_r+0xba>
 800f72c:	1961      	adds	r1, r4, r5
 800f72e:	42a3      	cmp	r3, r4
 800f730:	6025      	str	r5, [r4, #0]
 800f732:	bf18      	it	ne
 800f734:	6059      	strne	r1, [r3, #4]
 800f736:	6863      	ldr	r3, [r4, #4]
 800f738:	bf08      	it	eq
 800f73a:	6031      	streq	r1, [r6, #0]
 800f73c:	5162      	str	r2, [r4, r5]
 800f73e:	604b      	str	r3, [r1, #4]
 800f740:	4638      	mov	r0, r7
 800f742:	f104 060b 	add.w	r6, r4, #11
 800f746:	f000 fa05 	bl	800fb54 <__malloc_unlock>
 800f74a:	f026 0607 	bic.w	r6, r6, #7
 800f74e:	1d23      	adds	r3, r4, #4
 800f750:	1af2      	subs	r2, r6, r3
 800f752:	d0b6      	beq.n	800f6c2 <_malloc_r+0x22>
 800f754:	1b9b      	subs	r3, r3, r6
 800f756:	50a3      	str	r3, [r4, r2]
 800f758:	e7b3      	b.n	800f6c2 <_malloc_r+0x22>
 800f75a:	6862      	ldr	r2, [r4, #4]
 800f75c:	42a3      	cmp	r3, r4
 800f75e:	bf0c      	ite	eq
 800f760:	6032      	streq	r2, [r6, #0]
 800f762:	605a      	strne	r2, [r3, #4]
 800f764:	e7ec      	b.n	800f740 <_malloc_r+0xa0>
 800f766:	4623      	mov	r3, r4
 800f768:	6864      	ldr	r4, [r4, #4]
 800f76a:	e7b2      	b.n	800f6d2 <_malloc_r+0x32>
 800f76c:	4634      	mov	r4, r6
 800f76e:	6876      	ldr	r6, [r6, #4]
 800f770:	e7b9      	b.n	800f6e6 <_malloc_r+0x46>
 800f772:	230c      	movs	r3, #12
 800f774:	603b      	str	r3, [r7, #0]
 800f776:	4638      	mov	r0, r7
 800f778:	f000 f9ec 	bl	800fb54 <__malloc_unlock>
 800f77c:	e7a1      	b.n	800f6c2 <_malloc_r+0x22>
 800f77e:	6025      	str	r5, [r4, #0]
 800f780:	e7de      	b.n	800f740 <_malloc_r+0xa0>
 800f782:	bf00      	nop
 800f784:	20001fc4 	.word	0x20001fc4

0800f788 <__ssputs_r>:
 800f788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f78c:	688e      	ldr	r6, [r1, #8]
 800f78e:	429e      	cmp	r6, r3
 800f790:	4682      	mov	sl, r0
 800f792:	460c      	mov	r4, r1
 800f794:	4690      	mov	r8, r2
 800f796:	461f      	mov	r7, r3
 800f798:	d838      	bhi.n	800f80c <__ssputs_r+0x84>
 800f79a:	898a      	ldrh	r2, [r1, #12]
 800f79c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7a0:	d032      	beq.n	800f808 <__ssputs_r+0x80>
 800f7a2:	6825      	ldr	r5, [r4, #0]
 800f7a4:	6909      	ldr	r1, [r1, #16]
 800f7a6:	eba5 0901 	sub.w	r9, r5, r1
 800f7aa:	6965      	ldr	r5, [r4, #20]
 800f7ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	444b      	add	r3, r9
 800f7b8:	106d      	asrs	r5, r5, #1
 800f7ba:	429d      	cmp	r5, r3
 800f7bc:	bf38      	it	cc
 800f7be:	461d      	movcc	r5, r3
 800f7c0:	0553      	lsls	r3, r2, #21
 800f7c2:	d531      	bpl.n	800f828 <__ssputs_r+0xa0>
 800f7c4:	4629      	mov	r1, r5
 800f7c6:	f7ff ff6b 	bl	800f6a0 <_malloc_r>
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	b950      	cbnz	r0, 800f7e4 <__ssputs_r+0x5c>
 800f7ce:	230c      	movs	r3, #12
 800f7d0:	f8ca 3000 	str.w	r3, [sl]
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7da:	81a3      	strh	r3, [r4, #12]
 800f7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e4:	6921      	ldr	r1, [r4, #16]
 800f7e6:	464a      	mov	r2, r9
 800f7e8:	f7fc faaa 	bl	800bd40 <memcpy>
 800f7ec:	89a3      	ldrh	r3, [r4, #12]
 800f7ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7f6:	81a3      	strh	r3, [r4, #12]
 800f7f8:	6126      	str	r6, [r4, #16]
 800f7fa:	6165      	str	r5, [r4, #20]
 800f7fc:	444e      	add	r6, r9
 800f7fe:	eba5 0509 	sub.w	r5, r5, r9
 800f802:	6026      	str	r6, [r4, #0]
 800f804:	60a5      	str	r5, [r4, #8]
 800f806:	463e      	mov	r6, r7
 800f808:	42be      	cmp	r6, r7
 800f80a:	d900      	bls.n	800f80e <__ssputs_r+0x86>
 800f80c:	463e      	mov	r6, r7
 800f80e:	6820      	ldr	r0, [r4, #0]
 800f810:	4632      	mov	r2, r6
 800f812:	4641      	mov	r1, r8
 800f814:	f000 f97e 	bl	800fb14 <memmove>
 800f818:	68a3      	ldr	r3, [r4, #8]
 800f81a:	1b9b      	subs	r3, r3, r6
 800f81c:	60a3      	str	r3, [r4, #8]
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	4433      	add	r3, r6
 800f822:	6023      	str	r3, [r4, #0]
 800f824:	2000      	movs	r0, #0
 800f826:	e7db      	b.n	800f7e0 <__ssputs_r+0x58>
 800f828:	462a      	mov	r2, r5
 800f82a:	f000 f999 	bl	800fb60 <_realloc_r>
 800f82e:	4606      	mov	r6, r0
 800f830:	2800      	cmp	r0, #0
 800f832:	d1e1      	bne.n	800f7f8 <__ssputs_r+0x70>
 800f834:	6921      	ldr	r1, [r4, #16]
 800f836:	4650      	mov	r0, sl
 800f838:	f7ff fec6 	bl	800f5c8 <_free_r>
 800f83c:	e7c7      	b.n	800f7ce <__ssputs_r+0x46>
	...

0800f840 <_svfiprintf_r>:
 800f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f844:	4698      	mov	r8, r3
 800f846:	898b      	ldrh	r3, [r1, #12]
 800f848:	061b      	lsls	r3, r3, #24
 800f84a:	b09d      	sub	sp, #116	; 0x74
 800f84c:	4607      	mov	r7, r0
 800f84e:	460d      	mov	r5, r1
 800f850:	4614      	mov	r4, r2
 800f852:	d50e      	bpl.n	800f872 <_svfiprintf_r+0x32>
 800f854:	690b      	ldr	r3, [r1, #16]
 800f856:	b963      	cbnz	r3, 800f872 <_svfiprintf_r+0x32>
 800f858:	2140      	movs	r1, #64	; 0x40
 800f85a:	f7ff ff21 	bl	800f6a0 <_malloc_r>
 800f85e:	6028      	str	r0, [r5, #0]
 800f860:	6128      	str	r0, [r5, #16]
 800f862:	b920      	cbnz	r0, 800f86e <_svfiprintf_r+0x2e>
 800f864:	230c      	movs	r3, #12
 800f866:	603b      	str	r3, [r7, #0]
 800f868:	f04f 30ff 	mov.w	r0, #4294967295
 800f86c:	e0d1      	b.n	800fa12 <_svfiprintf_r+0x1d2>
 800f86e:	2340      	movs	r3, #64	; 0x40
 800f870:	616b      	str	r3, [r5, #20]
 800f872:	2300      	movs	r3, #0
 800f874:	9309      	str	r3, [sp, #36]	; 0x24
 800f876:	2320      	movs	r3, #32
 800f878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f880:	2330      	movs	r3, #48	; 0x30
 800f882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa2c <_svfiprintf_r+0x1ec>
 800f886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f88a:	f04f 0901 	mov.w	r9, #1
 800f88e:	4623      	mov	r3, r4
 800f890:	469a      	mov	sl, r3
 800f892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f896:	b10a      	cbz	r2, 800f89c <_svfiprintf_r+0x5c>
 800f898:	2a25      	cmp	r2, #37	; 0x25
 800f89a:	d1f9      	bne.n	800f890 <_svfiprintf_r+0x50>
 800f89c:	ebba 0b04 	subs.w	fp, sl, r4
 800f8a0:	d00b      	beq.n	800f8ba <_svfiprintf_r+0x7a>
 800f8a2:	465b      	mov	r3, fp
 800f8a4:	4622      	mov	r2, r4
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f7ff ff6d 	bl	800f788 <__ssputs_r>
 800f8ae:	3001      	adds	r0, #1
 800f8b0:	f000 80aa 	beq.w	800fa08 <_svfiprintf_r+0x1c8>
 800f8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8b6:	445a      	add	r2, fp
 800f8b8:	9209      	str	r2, [sp, #36]	; 0x24
 800f8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 80a2 	beq.w	800fa08 <_svfiprintf_r+0x1c8>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8ce:	f10a 0a01 	add.w	sl, sl, #1
 800f8d2:	9304      	str	r3, [sp, #16]
 800f8d4:	9307      	str	r3, [sp, #28]
 800f8d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8da:	931a      	str	r3, [sp, #104]	; 0x68
 800f8dc:	4654      	mov	r4, sl
 800f8de:	2205      	movs	r2, #5
 800f8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e4:	4851      	ldr	r0, [pc, #324]	; (800fa2c <_svfiprintf_r+0x1ec>)
 800f8e6:	f7f0 fc83 	bl	80001f0 <memchr>
 800f8ea:	9a04      	ldr	r2, [sp, #16]
 800f8ec:	b9d8      	cbnz	r0, 800f926 <_svfiprintf_r+0xe6>
 800f8ee:	06d0      	lsls	r0, r2, #27
 800f8f0:	bf44      	itt	mi
 800f8f2:	2320      	movmi	r3, #32
 800f8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8f8:	0711      	lsls	r1, r2, #28
 800f8fa:	bf44      	itt	mi
 800f8fc:	232b      	movmi	r3, #43	; 0x2b
 800f8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f902:	f89a 3000 	ldrb.w	r3, [sl]
 800f906:	2b2a      	cmp	r3, #42	; 0x2a
 800f908:	d015      	beq.n	800f936 <_svfiprintf_r+0xf6>
 800f90a:	9a07      	ldr	r2, [sp, #28]
 800f90c:	4654      	mov	r4, sl
 800f90e:	2000      	movs	r0, #0
 800f910:	f04f 0c0a 	mov.w	ip, #10
 800f914:	4621      	mov	r1, r4
 800f916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f91a:	3b30      	subs	r3, #48	; 0x30
 800f91c:	2b09      	cmp	r3, #9
 800f91e:	d94e      	bls.n	800f9be <_svfiprintf_r+0x17e>
 800f920:	b1b0      	cbz	r0, 800f950 <_svfiprintf_r+0x110>
 800f922:	9207      	str	r2, [sp, #28]
 800f924:	e014      	b.n	800f950 <_svfiprintf_r+0x110>
 800f926:	eba0 0308 	sub.w	r3, r0, r8
 800f92a:	fa09 f303 	lsl.w	r3, r9, r3
 800f92e:	4313      	orrs	r3, r2
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	46a2      	mov	sl, r4
 800f934:	e7d2      	b.n	800f8dc <_svfiprintf_r+0x9c>
 800f936:	9b03      	ldr	r3, [sp, #12]
 800f938:	1d19      	adds	r1, r3, #4
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	9103      	str	r1, [sp, #12]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	bfbb      	ittet	lt
 800f942:	425b      	neglt	r3, r3
 800f944:	f042 0202 	orrlt.w	r2, r2, #2
 800f948:	9307      	strge	r3, [sp, #28]
 800f94a:	9307      	strlt	r3, [sp, #28]
 800f94c:	bfb8      	it	lt
 800f94e:	9204      	strlt	r2, [sp, #16]
 800f950:	7823      	ldrb	r3, [r4, #0]
 800f952:	2b2e      	cmp	r3, #46	; 0x2e
 800f954:	d10c      	bne.n	800f970 <_svfiprintf_r+0x130>
 800f956:	7863      	ldrb	r3, [r4, #1]
 800f958:	2b2a      	cmp	r3, #42	; 0x2a
 800f95a:	d135      	bne.n	800f9c8 <_svfiprintf_r+0x188>
 800f95c:	9b03      	ldr	r3, [sp, #12]
 800f95e:	1d1a      	adds	r2, r3, #4
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	9203      	str	r2, [sp, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	bfb8      	it	lt
 800f968:	f04f 33ff 	movlt.w	r3, #4294967295
 800f96c:	3402      	adds	r4, #2
 800f96e:	9305      	str	r3, [sp, #20]
 800f970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa3c <_svfiprintf_r+0x1fc>
 800f974:	7821      	ldrb	r1, [r4, #0]
 800f976:	2203      	movs	r2, #3
 800f978:	4650      	mov	r0, sl
 800f97a:	f7f0 fc39 	bl	80001f0 <memchr>
 800f97e:	b140      	cbz	r0, 800f992 <_svfiprintf_r+0x152>
 800f980:	2340      	movs	r3, #64	; 0x40
 800f982:	eba0 000a 	sub.w	r0, r0, sl
 800f986:	fa03 f000 	lsl.w	r0, r3, r0
 800f98a:	9b04      	ldr	r3, [sp, #16]
 800f98c:	4303      	orrs	r3, r0
 800f98e:	3401      	adds	r4, #1
 800f990:	9304      	str	r3, [sp, #16]
 800f992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f996:	4826      	ldr	r0, [pc, #152]	; (800fa30 <_svfiprintf_r+0x1f0>)
 800f998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f99c:	2206      	movs	r2, #6
 800f99e:	f7f0 fc27 	bl	80001f0 <memchr>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d038      	beq.n	800fa18 <_svfiprintf_r+0x1d8>
 800f9a6:	4b23      	ldr	r3, [pc, #140]	; (800fa34 <_svfiprintf_r+0x1f4>)
 800f9a8:	bb1b      	cbnz	r3, 800f9f2 <_svfiprintf_r+0x1b2>
 800f9aa:	9b03      	ldr	r3, [sp, #12]
 800f9ac:	3307      	adds	r3, #7
 800f9ae:	f023 0307 	bic.w	r3, r3, #7
 800f9b2:	3308      	adds	r3, #8
 800f9b4:	9303      	str	r3, [sp, #12]
 800f9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9b8:	4433      	add	r3, r6
 800f9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f9bc:	e767      	b.n	800f88e <_svfiprintf_r+0x4e>
 800f9be:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	2001      	movs	r0, #1
 800f9c6:	e7a5      	b.n	800f914 <_svfiprintf_r+0xd4>
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	3401      	adds	r4, #1
 800f9cc:	9305      	str	r3, [sp, #20]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	f04f 0c0a 	mov.w	ip, #10
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9da:	3a30      	subs	r2, #48	; 0x30
 800f9dc:	2a09      	cmp	r2, #9
 800f9de:	d903      	bls.n	800f9e8 <_svfiprintf_r+0x1a8>
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d0c5      	beq.n	800f970 <_svfiprintf_r+0x130>
 800f9e4:	9105      	str	r1, [sp, #20]
 800f9e6:	e7c3      	b.n	800f970 <_svfiprintf_r+0x130>
 800f9e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e7f0      	b.n	800f9d4 <_svfiprintf_r+0x194>
 800f9f2:	ab03      	add	r3, sp, #12
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	462a      	mov	r2, r5
 800f9f8:	4b0f      	ldr	r3, [pc, #60]	; (800fa38 <_svfiprintf_r+0x1f8>)
 800f9fa:	a904      	add	r1, sp, #16
 800f9fc:	4638      	mov	r0, r7
 800f9fe:	f7fc fa55 	bl	800beac <_printf_float>
 800fa02:	1c42      	adds	r2, r0, #1
 800fa04:	4606      	mov	r6, r0
 800fa06:	d1d6      	bne.n	800f9b6 <_svfiprintf_r+0x176>
 800fa08:	89ab      	ldrh	r3, [r5, #12]
 800fa0a:	065b      	lsls	r3, r3, #25
 800fa0c:	f53f af2c 	bmi.w	800f868 <_svfiprintf_r+0x28>
 800fa10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa12:	b01d      	add	sp, #116	; 0x74
 800fa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa18:	ab03      	add	r3, sp, #12
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	462a      	mov	r2, r5
 800fa1e:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <_svfiprintf_r+0x1f8>)
 800fa20:	a904      	add	r1, sp, #16
 800fa22:	4638      	mov	r0, r7
 800fa24:	f7fc fce6 	bl	800c3f4 <_printf_i>
 800fa28:	e7eb      	b.n	800fa02 <_svfiprintf_r+0x1c2>
 800fa2a:	bf00      	nop
 800fa2c:	0801313c 	.word	0x0801313c
 800fa30:	08013146 	.word	0x08013146
 800fa34:	0800bead 	.word	0x0800bead
 800fa38:	0800f789 	.word	0x0800f789
 800fa3c:	08013142 	.word	0x08013142

0800fa40 <nan>:
 800fa40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa48 <nan+0x8>
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	00000000 	.word	0x00000000
 800fa4c:	7ff80000 	.word	0x7ff80000

0800fa50 <_sbrk_r>:
 800fa50:	b538      	push	{r3, r4, r5, lr}
 800fa52:	4d06      	ldr	r5, [pc, #24]	; (800fa6c <_sbrk_r+0x1c>)
 800fa54:	2300      	movs	r3, #0
 800fa56:	4604      	mov	r4, r0
 800fa58:	4608      	mov	r0, r1
 800fa5a:	602b      	str	r3, [r5, #0]
 800fa5c:	f7f5 fa0e 	bl	8004e7c <_sbrk>
 800fa60:	1c43      	adds	r3, r0, #1
 800fa62:	d102      	bne.n	800fa6a <_sbrk_r+0x1a>
 800fa64:	682b      	ldr	r3, [r5, #0]
 800fa66:	b103      	cbz	r3, 800fa6a <_sbrk_r+0x1a>
 800fa68:	6023      	str	r3, [r4, #0]
 800fa6a:	bd38      	pop	{r3, r4, r5, pc}
 800fa6c:	20001fcc 	.word	0x20001fcc

0800fa70 <strncmp>:
 800fa70:	b510      	push	{r4, lr}
 800fa72:	b17a      	cbz	r2, 800fa94 <strncmp+0x24>
 800fa74:	4603      	mov	r3, r0
 800fa76:	3901      	subs	r1, #1
 800fa78:	1884      	adds	r4, r0, r2
 800fa7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa82:	4290      	cmp	r0, r2
 800fa84:	d101      	bne.n	800fa8a <strncmp+0x1a>
 800fa86:	42a3      	cmp	r3, r4
 800fa88:	d101      	bne.n	800fa8e <strncmp+0x1e>
 800fa8a:	1a80      	subs	r0, r0, r2
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d1f3      	bne.n	800fa7a <strncmp+0xa>
 800fa92:	e7fa      	b.n	800fa8a <strncmp+0x1a>
 800fa94:	4610      	mov	r0, r2
 800fa96:	e7f9      	b.n	800fa8c <strncmp+0x1c>

0800fa98 <__ascii_wctomb>:
 800fa98:	b149      	cbz	r1, 800faae <__ascii_wctomb+0x16>
 800fa9a:	2aff      	cmp	r2, #255	; 0xff
 800fa9c:	bf85      	ittet	hi
 800fa9e:	238a      	movhi	r3, #138	; 0x8a
 800faa0:	6003      	strhi	r3, [r0, #0]
 800faa2:	700a      	strbls	r2, [r1, #0]
 800faa4:	f04f 30ff 	movhi.w	r0, #4294967295
 800faa8:	bf98      	it	ls
 800faaa:	2001      	movls	r0, #1
 800faac:	4770      	bx	lr
 800faae:	4608      	mov	r0, r1
 800fab0:	4770      	bx	lr
	...

0800fab4 <__assert_func>:
 800fab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fab6:	4614      	mov	r4, r2
 800fab8:	461a      	mov	r2, r3
 800faba:	4b09      	ldr	r3, [pc, #36]	; (800fae0 <__assert_func+0x2c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4605      	mov	r5, r0
 800fac0:	68d8      	ldr	r0, [r3, #12]
 800fac2:	b14c      	cbz	r4, 800fad8 <__assert_func+0x24>
 800fac4:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <__assert_func+0x30>)
 800fac6:	9100      	str	r1, [sp, #0]
 800fac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800facc:	4906      	ldr	r1, [pc, #24]	; (800fae8 <__assert_func+0x34>)
 800face:	462b      	mov	r3, r5
 800fad0:	f000 f80e 	bl	800faf0 <fiprintf>
 800fad4:	f000 fa8c 	bl	800fff0 <abort>
 800fad8:	4b04      	ldr	r3, [pc, #16]	; (800faec <__assert_func+0x38>)
 800fada:	461c      	mov	r4, r3
 800fadc:	e7f3      	b.n	800fac6 <__assert_func+0x12>
 800fade:	bf00      	nop
 800fae0:	2000023c 	.word	0x2000023c
 800fae4:	0801314d 	.word	0x0801314d
 800fae8:	0801315a 	.word	0x0801315a
 800faec:	08013188 	.word	0x08013188

0800faf0 <fiprintf>:
 800faf0:	b40e      	push	{r1, r2, r3}
 800faf2:	b503      	push	{r0, r1, lr}
 800faf4:	4601      	mov	r1, r0
 800faf6:	ab03      	add	r3, sp, #12
 800faf8:	4805      	ldr	r0, [pc, #20]	; (800fb10 <fiprintf+0x20>)
 800fafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fafe:	6800      	ldr	r0, [r0, #0]
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	f000 f885 	bl	800fc10 <_vfiprintf_r>
 800fb06:	b002      	add	sp, #8
 800fb08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb0c:	b003      	add	sp, #12
 800fb0e:	4770      	bx	lr
 800fb10:	2000023c 	.word	0x2000023c

0800fb14 <memmove>:
 800fb14:	4288      	cmp	r0, r1
 800fb16:	b510      	push	{r4, lr}
 800fb18:	eb01 0402 	add.w	r4, r1, r2
 800fb1c:	d902      	bls.n	800fb24 <memmove+0x10>
 800fb1e:	4284      	cmp	r4, r0
 800fb20:	4623      	mov	r3, r4
 800fb22:	d807      	bhi.n	800fb34 <memmove+0x20>
 800fb24:	1e43      	subs	r3, r0, #1
 800fb26:	42a1      	cmp	r1, r4
 800fb28:	d008      	beq.n	800fb3c <memmove+0x28>
 800fb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb32:	e7f8      	b.n	800fb26 <memmove+0x12>
 800fb34:	4402      	add	r2, r0
 800fb36:	4601      	mov	r1, r0
 800fb38:	428a      	cmp	r2, r1
 800fb3a:	d100      	bne.n	800fb3e <memmove+0x2a>
 800fb3c:	bd10      	pop	{r4, pc}
 800fb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb46:	e7f7      	b.n	800fb38 <memmove+0x24>

0800fb48 <__malloc_lock>:
 800fb48:	4801      	ldr	r0, [pc, #4]	; (800fb50 <__malloc_lock+0x8>)
 800fb4a:	f000 bc11 	b.w	8010370 <__retarget_lock_acquire_recursive>
 800fb4e:	bf00      	nop
 800fb50:	20001fd0 	.word	0x20001fd0

0800fb54 <__malloc_unlock>:
 800fb54:	4801      	ldr	r0, [pc, #4]	; (800fb5c <__malloc_unlock+0x8>)
 800fb56:	f000 bc0c 	b.w	8010372 <__retarget_lock_release_recursive>
 800fb5a:	bf00      	nop
 800fb5c:	20001fd0 	.word	0x20001fd0

0800fb60 <_realloc_r>:
 800fb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb64:	4680      	mov	r8, r0
 800fb66:	4614      	mov	r4, r2
 800fb68:	460e      	mov	r6, r1
 800fb6a:	b921      	cbnz	r1, 800fb76 <_realloc_r+0x16>
 800fb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb70:	4611      	mov	r1, r2
 800fb72:	f7ff bd95 	b.w	800f6a0 <_malloc_r>
 800fb76:	b92a      	cbnz	r2, 800fb84 <_realloc_r+0x24>
 800fb78:	f7ff fd26 	bl	800f5c8 <_free_r>
 800fb7c:	4625      	mov	r5, r4
 800fb7e:	4628      	mov	r0, r5
 800fb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb84:	f000 fc5c 	bl	8010440 <_malloc_usable_size_r>
 800fb88:	4284      	cmp	r4, r0
 800fb8a:	4607      	mov	r7, r0
 800fb8c:	d802      	bhi.n	800fb94 <_realloc_r+0x34>
 800fb8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb92:	d812      	bhi.n	800fbba <_realloc_r+0x5a>
 800fb94:	4621      	mov	r1, r4
 800fb96:	4640      	mov	r0, r8
 800fb98:	f7ff fd82 	bl	800f6a0 <_malloc_r>
 800fb9c:	4605      	mov	r5, r0
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d0ed      	beq.n	800fb7e <_realloc_r+0x1e>
 800fba2:	42bc      	cmp	r4, r7
 800fba4:	4622      	mov	r2, r4
 800fba6:	4631      	mov	r1, r6
 800fba8:	bf28      	it	cs
 800fbaa:	463a      	movcs	r2, r7
 800fbac:	f7fc f8c8 	bl	800bd40 <memcpy>
 800fbb0:	4631      	mov	r1, r6
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	f7ff fd08 	bl	800f5c8 <_free_r>
 800fbb8:	e7e1      	b.n	800fb7e <_realloc_r+0x1e>
 800fbba:	4635      	mov	r5, r6
 800fbbc:	e7df      	b.n	800fb7e <_realloc_r+0x1e>

0800fbbe <__sfputc_r>:
 800fbbe:	6893      	ldr	r3, [r2, #8]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	b410      	push	{r4}
 800fbc6:	6093      	str	r3, [r2, #8]
 800fbc8:	da08      	bge.n	800fbdc <__sfputc_r+0x1e>
 800fbca:	6994      	ldr	r4, [r2, #24]
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	db01      	blt.n	800fbd4 <__sfputc_r+0x16>
 800fbd0:	290a      	cmp	r1, #10
 800fbd2:	d103      	bne.n	800fbdc <__sfputc_r+0x1e>
 800fbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbd8:	f000 b94a 	b.w	800fe70 <__swbuf_r>
 800fbdc:	6813      	ldr	r3, [r2, #0]
 800fbde:	1c58      	adds	r0, r3, #1
 800fbe0:	6010      	str	r0, [r2, #0]
 800fbe2:	7019      	strb	r1, [r3, #0]
 800fbe4:	4608      	mov	r0, r1
 800fbe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <__sfputs_r>:
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	4606      	mov	r6, r0
 800fbf0:	460f      	mov	r7, r1
 800fbf2:	4614      	mov	r4, r2
 800fbf4:	18d5      	adds	r5, r2, r3
 800fbf6:	42ac      	cmp	r4, r5
 800fbf8:	d101      	bne.n	800fbfe <__sfputs_r+0x12>
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	e007      	b.n	800fc0e <__sfputs_r+0x22>
 800fbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc02:	463a      	mov	r2, r7
 800fc04:	4630      	mov	r0, r6
 800fc06:	f7ff ffda 	bl	800fbbe <__sfputc_r>
 800fc0a:	1c43      	adds	r3, r0, #1
 800fc0c:	d1f3      	bne.n	800fbf6 <__sfputs_r+0xa>
 800fc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc10 <_vfiprintf_r>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	460d      	mov	r5, r1
 800fc16:	b09d      	sub	sp, #116	; 0x74
 800fc18:	4614      	mov	r4, r2
 800fc1a:	4698      	mov	r8, r3
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	b118      	cbz	r0, 800fc28 <_vfiprintf_r+0x18>
 800fc20:	6983      	ldr	r3, [r0, #24]
 800fc22:	b90b      	cbnz	r3, 800fc28 <_vfiprintf_r+0x18>
 800fc24:	f000 fb06 	bl	8010234 <__sinit>
 800fc28:	4b89      	ldr	r3, [pc, #548]	; (800fe50 <_vfiprintf_r+0x240>)
 800fc2a:	429d      	cmp	r5, r3
 800fc2c:	d11b      	bne.n	800fc66 <_vfiprintf_r+0x56>
 800fc2e:	6875      	ldr	r5, [r6, #4]
 800fc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc32:	07d9      	lsls	r1, r3, #31
 800fc34:	d405      	bmi.n	800fc42 <_vfiprintf_r+0x32>
 800fc36:	89ab      	ldrh	r3, [r5, #12]
 800fc38:	059a      	lsls	r2, r3, #22
 800fc3a:	d402      	bmi.n	800fc42 <_vfiprintf_r+0x32>
 800fc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc3e:	f000 fb97 	bl	8010370 <__retarget_lock_acquire_recursive>
 800fc42:	89ab      	ldrh	r3, [r5, #12]
 800fc44:	071b      	lsls	r3, r3, #28
 800fc46:	d501      	bpl.n	800fc4c <_vfiprintf_r+0x3c>
 800fc48:	692b      	ldr	r3, [r5, #16]
 800fc4a:	b9eb      	cbnz	r3, 800fc88 <_vfiprintf_r+0x78>
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f000 f960 	bl	800ff14 <__swsetup_r>
 800fc54:	b1c0      	cbz	r0, 800fc88 <_vfiprintf_r+0x78>
 800fc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc58:	07dc      	lsls	r4, r3, #31
 800fc5a:	d50e      	bpl.n	800fc7a <_vfiprintf_r+0x6a>
 800fc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc60:	b01d      	add	sp, #116	; 0x74
 800fc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc66:	4b7b      	ldr	r3, [pc, #492]	; (800fe54 <_vfiprintf_r+0x244>)
 800fc68:	429d      	cmp	r5, r3
 800fc6a:	d101      	bne.n	800fc70 <_vfiprintf_r+0x60>
 800fc6c:	68b5      	ldr	r5, [r6, #8]
 800fc6e:	e7df      	b.n	800fc30 <_vfiprintf_r+0x20>
 800fc70:	4b79      	ldr	r3, [pc, #484]	; (800fe58 <_vfiprintf_r+0x248>)
 800fc72:	429d      	cmp	r5, r3
 800fc74:	bf08      	it	eq
 800fc76:	68f5      	ldreq	r5, [r6, #12]
 800fc78:	e7da      	b.n	800fc30 <_vfiprintf_r+0x20>
 800fc7a:	89ab      	ldrh	r3, [r5, #12]
 800fc7c:	0598      	lsls	r0, r3, #22
 800fc7e:	d4ed      	bmi.n	800fc5c <_vfiprintf_r+0x4c>
 800fc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc82:	f000 fb76 	bl	8010372 <__retarget_lock_release_recursive>
 800fc86:	e7e9      	b.n	800fc5c <_vfiprintf_r+0x4c>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc8c:	2320      	movs	r3, #32
 800fc8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc92:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc96:	2330      	movs	r3, #48	; 0x30
 800fc98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe5c <_vfiprintf_r+0x24c>
 800fc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fca0:	f04f 0901 	mov.w	r9, #1
 800fca4:	4623      	mov	r3, r4
 800fca6:	469a      	mov	sl, r3
 800fca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcac:	b10a      	cbz	r2, 800fcb2 <_vfiprintf_r+0xa2>
 800fcae:	2a25      	cmp	r2, #37	; 0x25
 800fcb0:	d1f9      	bne.n	800fca6 <_vfiprintf_r+0x96>
 800fcb2:	ebba 0b04 	subs.w	fp, sl, r4
 800fcb6:	d00b      	beq.n	800fcd0 <_vfiprintf_r+0xc0>
 800fcb8:	465b      	mov	r3, fp
 800fcba:	4622      	mov	r2, r4
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f7ff ff94 	bl	800fbec <__sfputs_r>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	f000 80aa 	beq.w	800fe1e <_vfiprintf_r+0x20e>
 800fcca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fccc:	445a      	add	r2, fp
 800fcce:	9209      	str	r2, [sp, #36]	; 0x24
 800fcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f000 80a2 	beq.w	800fe1e <_vfiprintf_r+0x20e>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800fce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fce4:	f10a 0a01 	add.w	sl, sl, #1
 800fce8:	9304      	str	r3, [sp, #16]
 800fcea:	9307      	str	r3, [sp, #28]
 800fcec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcf0:	931a      	str	r3, [sp, #104]	; 0x68
 800fcf2:	4654      	mov	r4, sl
 800fcf4:	2205      	movs	r2, #5
 800fcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcfa:	4858      	ldr	r0, [pc, #352]	; (800fe5c <_vfiprintf_r+0x24c>)
 800fcfc:	f7f0 fa78 	bl	80001f0 <memchr>
 800fd00:	9a04      	ldr	r2, [sp, #16]
 800fd02:	b9d8      	cbnz	r0, 800fd3c <_vfiprintf_r+0x12c>
 800fd04:	06d1      	lsls	r1, r2, #27
 800fd06:	bf44      	itt	mi
 800fd08:	2320      	movmi	r3, #32
 800fd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd0e:	0713      	lsls	r3, r2, #28
 800fd10:	bf44      	itt	mi
 800fd12:	232b      	movmi	r3, #43	; 0x2b
 800fd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd18:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800fd1e:	d015      	beq.n	800fd4c <_vfiprintf_r+0x13c>
 800fd20:	9a07      	ldr	r2, [sp, #28]
 800fd22:	4654      	mov	r4, sl
 800fd24:	2000      	movs	r0, #0
 800fd26:	f04f 0c0a 	mov.w	ip, #10
 800fd2a:	4621      	mov	r1, r4
 800fd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd30:	3b30      	subs	r3, #48	; 0x30
 800fd32:	2b09      	cmp	r3, #9
 800fd34:	d94e      	bls.n	800fdd4 <_vfiprintf_r+0x1c4>
 800fd36:	b1b0      	cbz	r0, 800fd66 <_vfiprintf_r+0x156>
 800fd38:	9207      	str	r2, [sp, #28]
 800fd3a:	e014      	b.n	800fd66 <_vfiprintf_r+0x156>
 800fd3c:	eba0 0308 	sub.w	r3, r0, r8
 800fd40:	fa09 f303 	lsl.w	r3, r9, r3
 800fd44:	4313      	orrs	r3, r2
 800fd46:	9304      	str	r3, [sp, #16]
 800fd48:	46a2      	mov	sl, r4
 800fd4a:	e7d2      	b.n	800fcf2 <_vfiprintf_r+0xe2>
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	1d19      	adds	r1, r3, #4
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	9103      	str	r1, [sp, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	bfbb      	ittet	lt
 800fd58:	425b      	neglt	r3, r3
 800fd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd5e:	9307      	strge	r3, [sp, #28]
 800fd60:	9307      	strlt	r3, [sp, #28]
 800fd62:	bfb8      	it	lt
 800fd64:	9204      	strlt	r2, [sp, #16]
 800fd66:	7823      	ldrb	r3, [r4, #0]
 800fd68:	2b2e      	cmp	r3, #46	; 0x2e
 800fd6a:	d10c      	bne.n	800fd86 <_vfiprintf_r+0x176>
 800fd6c:	7863      	ldrb	r3, [r4, #1]
 800fd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd70:	d135      	bne.n	800fdde <_vfiprintf_r+0x1ce>
 800fd72:	9b03      	ldr	r3, [sp, #12]
 800fd74:	1d1a      	adds	r2, r3, #4
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	9203      	str	r2, [sp, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	bfb8      	it	lt
 800fd7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd82:	3402      	adds	r4, #2
 800fd84:	9305      	str	r3, [sp, #20]
 800fd86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe6c <_vfiprintf_r+0x25c>
 800fd8a:	7821      	ldrb	r1, [r4, #0]
 800fd8c:	2203      	movs	r2, #3
 800fd8e:	4650      	mov	r0, sl
 800fd90:	f7f0 fa2e 	bl	80001f0 <memchr>
 800fd94:	b140      	cbz	r0, 800fda8 <_vfiprintf_r+0x198>
 800fd96:	2340      	movs	r3, #64	; 0x40
 800fd98:	eba0 000a 	sub.w	r0, r0, sl
 800fd9c:	fa03 f000 	lsl.w	r0, r3, r0
 800fda0:	9b04      	ldr	r3, [sp, #16]
 800fda2:	4303      	orrs	r3, r0
 800fda4:	3401      	adds	r4, #1
 800fda6:	9304      	str	r3, [sp, #16]
 800fda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdac:	482c      	ldr	r0, [pc, #176]	; (800fe60 <_vfiprintf_r+0x250>)
 800fdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdb2:	2206      	movs	r2, #6
 800fdb4:	f7f0 fa1c 	bl	80001f0 <memchr>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d03f      	beq.n	800fe3c <_vfiprintf_r+0x22c>
 800fdbc:	4b29      	ldr	r3, [pc, #164]	; (800fe64 <_vfiprintf_r+0x254>)
 800fdbe:	bb1b      	cbnz	r3, 800fe08 <_vfiprintf_r+0x1f8>
 800fdc0:	9b03      	ldr	r3, [sp, #12]
 800fdc2:	3307      	adds	r3, #7
 800fdc4:	f023 0307 	bic.w	r3, r3, #7
 800fdc8:	3308      	adds	r3, #8
 800fdca:	9303      	str	r3, [sp, #12]
 800fdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdce:	443b      	add	r3, r7
 800fdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd2:	e767      	b.n	800fca4 <_vfiprintf_r+0x94>
 800fdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdd8:	460c      	mov	r4, r1
 800fdda:	2001      	movs	r0, #1
 800fddc:	e7a5      	b.n	800fd2a <_vfiprintf_r+0x11a>
 800fdde:	2300      	movs	r3, #0
 800fde0:	3401      	adds	r4, #1
 800fde2:	9305      	str	r3, [sp, #20]
 800fde4:	4619      	mov	r1, r3
 800fde6:	f04f 0c0a 	mov.w	ip, #10
 800fdea:	4620      	mov	r0, r4
 800fdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf0:	3a30      	subs	r2, #48	; 0x30
 800fdf2:	2a09      	cmp	r2, #9
 800fdf4:	d903      	bls.n	800fdfe <_vfiprintf_r+0x1ee>
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d0c5      	beq.n	800fd86 <_vfiprintf_r+0x176>
 800fdfa:	9105      	str	r1, [sp, #20]
 800fdfc:	e7c3      	b.n	800fd86 <_vfiprintf_r+0x176>
 800fdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe02:	4604      	mov	r4, r0
 800fe04:	2301      	movs	r3, #1
 800fe06:	e7f0      	b.n	800fdea <_vfiprintf_r+0x1da>
 800fe08:	ab03      	add	r3, sp, #12
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	462a      	mov	r2, r5
 800fe0e:	4b16      	ldr	r3, [pc, #88]	; (800fe68 <_vfiprintf_r+0x258>)
 800fe10:	a904      	add	r1, sp, #16
 800fe12:	4630      	mov	r0, r6
 800fe14:	f7fc f84a 	bl	800beac <_printf_float>
 800fe18:	4607      	mov	r7, r0
 800fe1a:	1c78      	adds	r0, r7, #1
 800fe1c:	d1d6      	bne.n	800fdcc <_vfiprintf_r+0x1bc>
 800fe1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe20:	07d9      	lsls	r1, r3, #31
 800fe22:	d405      	bmi.n	800fe30 <_vfiprintf_r+0x220>
 800fe24:	89ab      	ldrh	r3, [r5, #12]
 800fe26:	059a      	lsls	r2, r3, #22
 800fe28:	d402      	bmi.n	800fe30 <_vfiprintf_r+0x220>
 800fe2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe2c:	f000 faa1 	bl	8010372 <__retarget_lock_release_recursive>
 800fe30:	89ab      	ldrh	r3, [r5, #12]
 800fe32:	065b      	lsls	r3, r3, #25
 800fe34:	f53f af12 	bmi.w	800fc5c <_vfiprintf_r+0x4c>
 800fe38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe3a:	e711      	b.n	800fc60 <_vfiprintf_r+0x50>
 800fe3c:	ab03      	add	r3, sp, #12
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	462a      	mov	r2, r5
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <_vfiprintf_r+0x258>)
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7fc fad4 	bl	800c3f4 <_printf_i>
 800fe4c:	e7e4      	b.n	800fe18 <_vfiprintf_r+0x208>
 800fe4e:	bf00      	nop
 800fe50:	080131ac 	.word	0x080131ac
 800fe54:	080131cc 	.word	0x080131cc
 800fe58:	0801318c 	.word	0x0801318c
 800fe5c:	0801313c 	.word	0x0801313c
 800fe60:	08013146 	.word	0x08013146
 800fe64:	0800bead 	.word	0x0800bead
 800fe68:	0800fbed 	.word	0x0800fbed
 800fe6c:	08013142 	.word	0x08013142

0800fe70 <__swbuf_r>:
 800fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe72:	460e      	mov	r6, r1
 800fe74:	4614      	mov	r4, r2
 800fe76:	4605      	mov	r5, r0
 800fe78:	b118      	cbz	r0, 800fe82 <__swbuf_r+0x12>
 800fe7a:	6983      	ldr	r3, [r0, #24]
 800fe7c:	b90b      	cbnz	r3, 800fe82 <__swbuf_r+0x12>
 800fe7e:	f000 f9d9 	bl	8010234 <__sinit>
 800fe82:	4b21      	ldr	r3, [pc, #132]	; (800ff08 <__swbuf_r+0x98>)
 800fe84:	429c      	cmp	r4, r3
 800fe86:	d12b      	bne.n	800fee0 <__swbuf_r+0x70>
 800fe88:	686c      	ldr	r4, [r5, #4]
 800fe8a:	69a3      	ldr	r3, [r4, #24]
 800fe8c:	60a3      	str	r3, [r4, #8]
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	071a      	lsls	r2, r3, #28
 800fe92:	d52f      	bpl.n	800fef4 <__swbuf_r+0x84>
 800fe94:	6923      	ldr	r3, [r4, #16]
 800fe96:	b36b      	cbz	r3, 800fef4 <__swbuf_r+0x84>
 800fe98:	6923      	ldr	r3, [r4, #16]
 800fe9a:	6820      	ldr	r0, [r4, #0]
 800fe9c:	1ac0      	subs	r0, r0, r3
 800fe9e:	6963      	ldr	r3, [r4, #20]
 800fea0:	b2f6      	uxtb	r6, r6
 800fea2:	4283      	cmp	r3, r0
 800fea4:	4637      	mov	r7, r6
 800fea6:	dc04      	bgt.n	800feb2 <__swbuf_r+0x42>
 800fea8:	4621      	mov	r1, r4
 800feaa:	4628      	mov	r0, r5
 800feac:	f000 f92e 	bl	801010c <_fflush_r>
 800feb0:	bb30      	cbnz	r0, 800ff00 <__swbuf_r+0x90>
 800feb2:	68a3      	ldr	r3, [r4, #8]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	60a3      	str	r3, [r4, #8]
 800feb8:	6823      	ldr	r3, [r4, #0]
 800feba:	1c5a      	adds	r2, r3, #1
 800febc:	6022      	str	r2, [r4, #0]
 800febe:	701e      	strb	r6, [r3, #0]
 800fec0:	6963      	ldr	r3, [r4, #20]
 800fec2:	3001      	adds	r0, #1
 800fec4:	4283      	cmp	r3, r0
 800fec6:	d004      	beq.n	800fed2 <__swbuf_r+0x62>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	07db      	lsls	r3, r3, #31
 800fecc:	d506      	bpl.n	800fedc <__swbuf_r+0x6c>
 800fece:	2e0a      	cmp	r6, #10
 800fed0:	d104      	bne.n	800fedc <__swbuf_r+0x6c>
 800fed2:	4621      	mov	r1, r4
 800fed4:	4628      	mov	r0, r5
 800fed6:	f000 f919 	bl	801010c <_fflush_r>
 800feda:	b988      	cbnz	r0, 800ff00 <__swbuf_r+0x90>
 800fedc:	4638      	mov	r0, r7
 800fede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fee0:	4b0a      	ldr	r3, [pc, #40]	; (800ff0c <__swbuf_r+0x9c>)
 800fee2:	429c      	cmp	r4, r3
 800fee4:	d101      	bne.n	800feea <__swbuf_r+0x7a>
 800fee6:	68ac      	ldr	r4, [r5, #8]
 800fee8:	e7cf      	b.n	800fe8a <__swbuf_r+0x1a>
 800feea:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <__swbuf_r+0xa0>)
 800feec:	429c      	cmp	r4, r3
 800feee:	bf08      	it	eq
 800fef0:	68ec      	ldreq	r4, [r5, #12]
 800fef2:	e7ca      	b.n	800fe8a <__swbuf_r+0x1a>
 800fef4:	4621      	mov	r1, r4
 800fef6:	4628      	mov	r0, r5
 800fef8:	f000 f80c 	bl	800ff14 <__swsetup_r>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d0cb      	beq.n	800fe98 <__swbuf_r+0x28>
 800ff00:	f04f 37ff 	mov.w	r7, #4294967295
 800ff04:	e7ea      	b.n	800fedc <__swbuf_r+0x6c>
 800ff06:	bf00      	nop
 800ff08:	080131ac 	.word	0x080131ac
 800ff0c:	080131cc 	.word	0x080131cc
 800ff10:	0801318c 	.word	0x0801318c

0800ff14 <__swsetup_r>:
 800ff14:	4b32      	ldr	r3, [pc, #200]	; (800ffe0 <__swsetup_r+0xcc>)
 800ff16:	b570      	push	{r4, r5, r6, lr}
 800ff18:	681d      	ldr	r5, [r3, #0]
 800ff1a:	4606      	mov	r6, r0
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	b125      	cbz	r5, 800ff2a <__swsetup_r+0x16>
 800ff20:	69ab      	ldr	r3, [r5, #24]
 800ff22:	b913      	cbnz	r3, 800ff2a <__swsetup_r+0x16>
 800ff24:	4628      	mov	r0, r5
 800ff26:	f000 f985 	bl	8010234 <__sinit>
 800ff2a:	4b2e      	ldr	r3, [pc, #184]	; (800ffe4 <__swsetup_r+0xd0>)
 800ff2c:	429c      	cmp	r4, r3
 800ff2e:	d10f      	bne.n	800ff50 <__swsetup_r+0x3c>
 800ff30:	686c      	ldr	r4, [r5, #4]
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff38:	0719      	lsls	r1, r3, #28
 800ff3a:	d42c      	bmi.n	800ff96 <__swsetup_r+0x82>
 800ff3c:	06dd      	lsls	r5, r3, #27
 800ff3e:	d411      	bmi.n	800ff64 <__swsetup_r+0x50>
 800ff40:	2309      	movs	r3, #9
 800ff42:	6033      	str	r3, [r6, #0]
 800ff44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff48:	81a3      	strh	r3, [r4, #12]
 800ff4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4e:	e03e      	b.n	800ffce <__swsetup_r+0xba>
 800ff50:	4b25      	ldr	r3, [pc, #148]	; (800ffe8 <__swsetup_r+0xd4>)
 800ff52:	429c      	cmp	r4, r3
 800ff54:	d101      	bne.n	800ff5a <__swsetup_r+0x46>
 800ff56:	68ac      	ldr	r4, [r5, #8]
 800ff58:	e7eb      	b.n	800ff32 <__swsetup_r+0x1e>
 800ff5a:	4b24      	ldr	r3, [pc, #144]	; (800ffec <__swsetup_r+0xd8>)
 800ff5c:	429c      	cmp	r4, r3
 800ff5e:	bf08      	it	eq
 800ff60:	68ec      	ldreq	r4, [r5, #12]
 800ff62:	e7e6      	b.n	800ff32 <__swsetup_r+0x1e>
 800ff64:	0758      	lsls	r0, r3, #29
 800ff66:	d512      	bpl.n	800ff8e <__swsetup_r+0x7a>
 800ff68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff6a:	b141      	cbz	r1, 800ff7e <__swsetup_r+0x6a>
 800ff6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff70:	4299      	cmp	r1, r3
 800ff72:	d002      	beq.n	800ff7a <__swsetup_r+0x66>
 800ff74:	4630      	mov	r0, r6
 800ff76:	f7ff fb27 	bl	800f5c8 <_free_r>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff84:	81a3      	strh	r3, [r4, #12]
 800ff86:	2300      	movs	r3, #0
 800ff88:	6063      	str	r3, [r4, #4]
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	6023      	str	r3, [r4, #0]
 800ff8e:	89a3      	ldrh	r3, [r4, #12]
 800ff90:	f043 0308 	orr.w	r3, r3, #8
 800ff94:	81a3      	strh	r3, [r4, #12]
 800ff96:	6923      	ldr	r3, [r4, #16]
 800ff98:	b94b      	cbnz	r3, 800ffae <__swsetup_r+0x9a>
 800ff9a:	89a3      	ldrh	r3, [r4, #12]
 800ff9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ffa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffa4:	d003      	beq.n	800ffae <__swsetup_r+0x9a>
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f000 fa09 	bl	80103c0 <__smakebuf_r>
 800ffae:	89a0      	ldrh	r0, [r4, #12]
 800ffb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffb4:	f010 0301 	ands.w	r3, r0, #1
 800ffb8:	d00a      	beq.n	800ffd0 <__swsetup_r+0xbc>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	60a3      	str	r3, [r4, #8]
 800ffbe:	6963      	ldr	r3, [r4, #20]
 800ffc0:	425b      	negs	r3, r3
 800ffc2:	61a3      	str	r3, [r4, #24]
 800ffc4:	6923      	ldr	r3, [r4, #16]
 800ffc6:	b943      	cbnz	r3, 800ffda <__swsetup_r+0xc6>
 800ffc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ffcc:	d1ba      	bne.n	800ff44 <__swsetup_r+0x30>
 800ffce:	bd70      	pop	{r4, r5, r6, pc}
 800ffd0:	0781      	lsls	r1, r0, #30
 800ffd2:	bf58      	it	pl
 800ffd4:	6963      	ldrpl	r3, [r4, #20]
 800ffd6:	60a3      	str	r3, [r4, #8]
 800ffd8:	e7f4      	b.n	800ffc4 <__swsetup_r+0xb0>
 800ffda:	2000      	movs	r0, #0
 800ffdc:	e7f7      	b.n	800ffce <__swsetup_r+0xba>
 800ffde:	bf00      	nop
 800ffe0:	2000023c 	.word	0x2000023c
 800ffe4:	080131ac 	.word	0x080131ac
 800ffe8:	080131cc 	.word	0x080131cc
 800ffec:	0801318c 	.word	0x0801318c

0800fff0 <abort>:
 800fff0:	b508      	push	{r3, lr}
 800fff2:	2006      	movs	r0, #6
 800fff4:	f000 fa54 	bl	80104a0 <raise>
 800fff8:	2001      	movs	r0, #1
 800fffa:	f7f4 fec7 	bl	8004d8c <_exit>
	...

08010000 <__sflush_r>:
 8010000:	898a      	ldrh	r2, [r1, #12]
 8010002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010006:	4605      	mov	r5, r0
 8010008:	0710      	lsls	r0, r2, #28
 801000a:	460c      	mov	r4, r1
 801000c:	d458      	bmi.n	80100c0 <__sflush_r+0xc0>
 801000e:	684b      	ldr	r3, [r1, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	dc05      	bgt.n	8010020 <__sflush_r+0x20>
 8010014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010016:	2b00      	cmp	r3, #0
 8010018:	dc02      	bgt.n	8010020 <__sflush_r+0x20>
 801001a:	2000      	movs	r0, #0
 801001c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010022:	2e00      	cmp	r6, #0
 8010024:	d0f9      	beq.n	801001a <__sflush_r+0x1a>
 8010026:	2300      	movs	r3, #0
 8010028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801002c:	682f      	ldr	r7, [r5, #0]
 801002e:	602b      	str	r3, [r5, #0]
 8010030:	d032      	beq.n	8010098 <__sflush_r+0x98>
 8010032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	075a      	lsls	r2, r3, #29
 8010038:	d505      	bpl.n	8010046 <__sflush_r+0x46>
 801003a:	6863      	ldr	r3, [r4, #4]
 801003c:	1ac0      	subs	r0, r0, r3
 801003e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010040:	b10b      	cbz	r3, 8010046 <__sflush_r+0x46>
 8010042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010044:	1ac0      	subs	r0, r0, r3
 8010046:	2300      	movs	r3, #0
 8010048:	4602      	mov	r2, r0
 801004a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801004c:	6a21      	ldr	r1, [r4, #32]
 801004e:	4628      	mov	r0, r5
 8010050:	47b0      	blx	r6
 8010052:	1c43      	adds	r3, r0, #1
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	d106      	bne.n	8010066 <__sflush_r+0x66>
 8010058:	6829      	ldr	r1, [r5, #0]
 801005a:	291d      	cmp	r1, #29
 801005c:	d82c      	bhi.n	80100b8 <__sflush_r+0xb8>
 801005e:	4a2a      	ldr	r2, [pc, #168]	; (8010108 <__sflush_r+0x108>)
 8010060:	40ca      	lsrs	r2, r1
 8010062:	07d6      	lsls	r6, r2, #31
 8010064:	d528      	bpl.n	80100b8 <__sflush_r+0xb8>
 8010066:	2200      	movs	r2, #0
 8010068:	6062      	str	r2, [r4, #4]
 801006a:	04d9      	lsls	r1, r3, #19
 801006c:	6922      	ldr	r2, [r4, #16]
 801006e:	6022      	str	r2, [r4, #0]
 8010070:	d504      	bpl.n	801007c <__sflush_r+0x7c>
 8010072:	1c42      	adds	r2, r0, #1
 8010074:	d101      	bne.n	801007a <__sflush_r+0x7a>
 8010076:	682b      	ldr	r3, [r5, #0]
 8010078:	b903      	cbnz	r3, 801007c <__sflush_r+0x7c>
 801007a:	6560      	str	r0, [r4, #84]	; 0x54
 801007c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801007e:	602f      	str	r7, [r5, #0]
 8010080:	2900      	cmp	r1, #0
 8010082:	d0ca      	beq.n	801001a <__sflush_r+0x1a>
 8010084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010088:	4299      	cmp	r1, r3
 801008a:	d002      	beq.n	8010092 <__sflush_r+0x92>
 801008c:	4628      	mov	r0, r5
 801008e:	f7ff fa9b 	bl	800f5c8 <_free_r>
 8010092:	2000      	movs	r0, #0
 8010094:	6360      	str	r0, [r4, #52]	; 0x34
 8010096:	e7c1      	b.n	801001c <__sflush_r+0x1c>
 8010098:	6a21      	ldr	r1, [r4, #32]
 801009a:	2301      	movs	r3, #1
 801009c:	4628      	mov	r0, r5
 801009e:	47b0      	blx	r6
 80100a0:	1c41      	adds	r1, r0, #1
 80100a2:	d1c7      	bne.n	8010034 <__sflush_r+0x34>
 80100a4:	682b      	ldr	r3, [r5, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d0c4      	beq.n	8010034 <__sflush_r+0x34>
 80100aa:	2b1d      	cmp	r3, #29
 80100ac:	d001      	beq.n	80100b2 <__sflush_r+0xb2>
 80100ae:	2b16      	cmp	r3, #22
 80100b0:	d101      	bne.n	80100b6 <__sflush_r+0xb6>
 80100b2:	602f      	str	r7, [r5, #0]
 80100b4:	e7b1      	b.n	801001a <__sflush_r+0x1a>
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100bc:	81a3      	strh	r3, [r4, #12]
 80100be:	e7ad      	b.n	801001c <__sflush_r+0x1c>
 80100c0:	690f      	ldr	r7, [r1, #16]
 80100c2:	2f00      	cmp	r7, #0
 80100c4:	d0a9      	beq.n	801001a <__sflush_r+0x1a>
 80100c6:	0793      	lsls	r3, r2, #30
 80100c8:	680e      	ldr	r6, [r1, #0]
 80100ca:	bf08      	it	eq
 80100cc:	694b      	ldreq	r3, [r1, #20]
 80100ce:	600f      	str	r7, [r1, #0]
 80100d0:	bf18      	it	ne
 80100d2:	2300      	movne	r3, #0
 80100d4:	eba6 0807 	sub.w	r8, r6, r7
 80100d8:	608b      	str	r3, [r1, #8]
 80100da:	f1b8 0f00 	cmp.w	r8, #0
 80100de:	dd9c      	ble.n	801001a <__sflush_r+0x1a>
 80100e0:	6a21      	ldr	r1, [r4, #32]
 80100e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100e4:	4643      	mov	r3, r8
 80100e6:	463a      	mov	r2, r7
 80100e8:	4628      	mov	r0, r5
 80100ea:	47b0      	blx	r6
 80100ec:	2800      	cmp	r0, #0
 80100ee:	dc06      	bgt.n	80100fe <__sflush_r+0xfe>
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100f6:	81a3      	strh	r3, [r4, #12]
 80100f8:	f04f 30ff 	mov.w	r0, #4294967295
 80100fc:	e78e      	b.n	801001c <__sflush_r+0x1c>
 80100fe:	4407      	add	r7, r0
 8010100:	eba8 0800 	sub.w	r8, r8, r0
 8010104:	e7e9      	b.n	80100da <__sflush_r+0xda>
 8010106:	bf00      	nop
 8010108:	20400001 	.word	0x20400001

0801010c <_fflush_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	690b      	ldr	r3, [r1, #16]
 8010110:	4605      	mov	r5, r0
 8010112:	460c      	mov	r4, r1
 8010114:	b913      	cbnz	r3, 801011c <_fflush_r+0x10>
 8010116:	2500      	movs	r5, #0
 8010118:	4628      	mov	r0, r5
 801011a:	bd38      	pop	{r3, r4, r5, pc}
 801011c:	b118      	cbz	r0, 8010126 <_fflush_r+0x1a>
 801011e:	6983      	ldr	r3, [r0, #24]
 8010120:	b90b      	cbnz	r3, 8010126 <_fflush_r+0x1a>
 8010122:	f000 f887 	bl	8010234 <__sinit>
 8010126:	4b14      	ldr	r3, [pc, #80]	; (8010178 <_fflush_r+0x6c>)
 8010128:	429c      	cmp	r4, r3
 801012a:	d11b      	bne.n	8010164 <_fflush_r+0x58>
 801012c:	686c      	ldr	r4, [r5, #4]
 801012e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0ef      	beq.n	8010116 <_fflush_r+0xa>
 8010136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010138:	07d0      	lsls	r0, r2, #31
 801013a:	d404      	bmi.n	8010146 <_fflush_r+0x3a>
 801013c:	0599      	lsls	r1, r3, #22
 801013e:	d402      	bmi.n	8010146 <_fflush_r+0x3a>
 8010140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010142:	f000 f915 	bl	8010370 <__retarget_lock_acquire_recursive>
 8010146:	4628      	mov	r0, r5
 8010148:	4621      	mov	r1, r4
 801014a:	f7ff ff59 	bl	8010000 <__sflush_r>
 801014e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010150:	07da      	lsls	r2, r3, #31
 8010152:	4605      	mov	r5, r0
 8010154:	d4e0      	bmi.n	8010118 <_fflush_r+0xc>
 8010156:	89a3      	ldrh	r3, [r4, #12]
 8010158:	059b      	lsls	r3, r3, #22
 801015a:	d4dd      	bmi.n	8010118 <_fflush_r+0xc>
 801015c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801015e:	f000 f908 	bl	8010372 <__retarget_lock_release_recursive>
 8010162:	e7d9      	b.n	8010118 <_fflush_r+0xc>
 8010164:	4b05      	ldr	r3, [pc, #20]	; (801017c <_fflush_r+0x70>)
 8010166:	429c      	cmp	r4, r3
 8010168:	d101      	bne.n	801016e <_fflush_r+0x62>
 801016a:	68ac      	ldr	r4, [r5, #8]
 801016c:	e7df      	b.n	801012e <_fflush_r+0x22>
 801016e:	4b04      	ldr	r3, [pc, #16]	; (8010180 <_fflush_r+0x74>)
 8010170:	429c      	cmp	r4, r3
 8010172:	bf08      	it	eq
 8010174:	68ec      	ldreq	r4, [r5, #12]
 8010176:	e7da      	b.n	801012e <_fflush_r+0x22>
 8010178:	080131ac 	.word	0x080131ac
 801017c:	080131cc 	.word	0x080131cc
 8010180:	0801318c 	.word	0x0801318c

08010184 <std>:
 8010184:	2300      	movs	r3, #0
 8010186:	b510      	push	{r4, lr}
 8010188:	4604      	mov	r4, r0
 801018a:	e9c0 3300 	strd	r3, r3, [r0]
 801018e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010192:	6083      	str	r3, [r0, #8]
 8010194:	8181      	strh	r1, [r0, #12]
 8010196:	6643      	str	r3, [r0, #100]	; 0x64
 8010198:	81c2      	strh	r2, [r0, #14]
 801019a:	6183      	str	r3, [r0, #24]
 801019c:	4619      	mov	r1, r3
 801019e:	2208      	movs	r2, #8
 80101a0:	305c      	adds	r0, #92	; 0x5c
 80101a2:	f7fb fddb 	bl	800bd5c <memset>
 80101a6:	4b05      	ldr	r3, [pc, #20]	; (80101bc <std+0x38>)
 80101a8:	6263      	str	r3, [r4, #36]	; 0x24
 80101aa:	4b05      	ldr	r3, [pc, #20]	; (80101c0 <std+0x3c>)
 80101ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80101ae:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <std+0x40>)
 80101b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <std+0x44>)
 80101b4:	6224      	str	r4, [r4, #32]
 80101b6:	6323      	str	r3, [r4, #48]	; 0x30
 80101b8:	bd10      	pop	{r4, pc}
 80101ba:	bf00      	nop
 80101bc:	080104d9 	.word	0x080104d9
 80101c0:	080104fb 	.word	0x080104fb
 80101c4:	08010533 	.word	0x08010533
 80101c8:	08010557 	.word	0x08010557

080101cc <_cleanup_r>:
 80101cc:	4901      	ldr	r1, [pc, #4]	; (80101d4 <_cleanup_r+0x8>)
 80101ce:	f000 b8af 	b.w	8010330 <_fwalk_reent>
 80101d2:	bf00      	nop
 80101d4:	0801010d 	.word	0x0801010d

080101d8 <__sfmoreglue>:
 80101d8:	b570      	push	{r4, r5, r6, lr}
 80101da:	2268      	movs	r2, #104	; 0x68
 80101dc:	1e4d      	subs	r5, r1, #1
 80101de:	4355      	muls	r5, r2
 80101e0:	460e      	mov	r6, r1
 80101e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80101e6:	f7ff fa5b 	bl	800f6a0 <_malloc_r>
 80101ea:	4604      	mov	r4, r0
 80101ec:	b140      	cbz	r0, 8010200 <__sfmoreglue+0x28>
 80101ee:	2100      	movs	r1, #0
 80101f0:	e9c0 1600 	strd	r1, r6, [r0]
 80101f4:	300c      	adds	r0, #12
 80101f6:	60a0      	str	r0, [r4, #8]
 80101f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80101fc:	f7fb fdae 	bl	800bd5c <memset>
 8010200:	4620      	mov	r0, r4
 8010202:	bd70      	pop	{r4, r5, r6, pc}

08010204 <__sfp_lock_acquire>:
 8010204:	4801      	ldr	r0, [pc, #4]	; (801020c <__sfp_lock_acquire+0x8>)
 8010206:	f000 b8b3 	b.w	8010370 <__retarget_lock_acquire_recursive>
 801020a:	bf00      	nop
 801020c:	20001fd1 	.word	0x20001fd1

08010210 <__sfp_lock_release>:
 8010210:	4801      	ldr	r0, [pc, #4]	; (8010218 <__sfp_lock_release+0x8>)
 8010212:	f000 b8ae 	b.w	8010372 <__retarget_lock_release_recursive>
 8010216:	bf00      	nop
 8010218:	20001fd1 	.word	0x20001fd1

0801021c <__sinit_lock_acquire>:
 801021c:	4801      	ldr	r0, [pc, #4]	; (8010224 <__sinit_lock_acquire+0x8>)
 801021e:	f000 b8a7 	b.w	8010370 <__retarget_lock_acquire_recursive>
 8010222:	bf00      	nop
 8010224:	20001fd2 	.word	0x20001fd2

08010228 <__sinit_lock_release>:
 8010228:	4801      	ldr	r0, [pc, #4]	; (8010230 <__sinit_lock_release+0x8>)
 801022a:	f000 b8a2 	b.w	8010372 <__retarget_lock_release_recursive>
 801022e:	bf00      	nop
 8010230:	20001fd2 	.word	0x20001fd2

08010234 <__sinit>:
 8010234:	b510      	push	{r4, lr}
 8010236:	4604      	mov	r4, r0
 8010238:	f7ff fff0 	bl	801021c <__sinit_lock_acquire>
 801023c:	69a3      	ldr	r3, [r4, #24]
 801023e:	b11b      	cbz	r3, 8010248 <__sinit+0x14>
 8010240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010244:	f7ff bff0 	b.w	8010228 <__sinit_lock_release>
 8010248:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801024c:	6523      	str	r3, [r4, #80]	; 0x50
 801024e:	4b13      	ldr	r3, [pc, #76]	; (801029c <__sinit+0x68>)
 8010250:	4a13      	ldr	r2, [pc, #76]	; (80102a0 <__sinit+0x6c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	62a2      	str	r2, [r4, #40]	; 0x28
 8010256:	42a3      	cmp	r3, r4
 8010258:	bf04      	itt	eq
 801025a:	2301      	moveq	r3, #1
 801025c:	61a3      	streq	r3, [r4, #24]
 801025e:	4620      	mov	r0, r4
 8010260:	f000 f820 	bl	80102a4 <__sfp>
 8010264:	6060      	str	r0, [r4, #4]
 8010266:	4620      	mov	r0, r4
 8010268:	f000 f81c 	bl	80102a4 <__sfp>
 801026c:	60a0      	str	r0, [r4, #8]
 801026e:	4620      	mov	r0, r4
 8010270:	f000 f818 	bl	80102a4 <__sfp>
 8010274:	2200      	movs	r2, #0
 8010276:	60e0      	str	r0, [r4, #12]
 8010278:	2104      	movs	r1, #4
 801027a:	6860      	ldr	r0, [r4, #4]
 801027c:	f7ff ff82 	bl	8010184 <std>
 8010280:	68a0      	ldr	r0, [r4, #8]
 8010282:	2201      	movs	r2, #1
 8010284:	2109      	movs	r1, #9
 8010286:	f7ff ff7d 	bl	8010184 <std>
 801028a:	68e0      	ldr	r0, [r4, #12]
 801028c:	2202      	movs	r2, #2
 801028e:	2112      	movs	r1, #18
 8010290:	f7ff ff78 	bl	8010184 <std>
 8010294:	2301      	movs	r3, #1
 8010296:	61a3      	str	r3, [r4, #24]
 8010298:	e7d2      	b.n	8010240 <__sinit+0xc>
 801029a:	bf00      	nop
 801029c:	08012d44 	.word	0x08012d44
 80102a0:	080101cd 	.word	0x080101cd

080102a4 <__sfp>:
 80102a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a6:	4607      	mov	r7, r0
 80102a8:	f7ff ffac 	bl	8010204 <__sfp_lock_acquire>
 80102ac:	4b1e      	ldr	r3, [pc, #120]	; (8010328 <__sfp+0x84>)
 80102ae:	681e      	ldr	r6, [r3, #0]
 80102b0:	69b3      	ldr	r3, [r6, #24]
 80102b2:	b913      	cbnz	r3, 80102ba <__sfp+0x16>
 80102b4:	4630      	mov	r0, r6
 80102b6:	f7ff ffbd 	bl	8010234 <__sinit>
 80102ba:	3648      	adds	r6, #72	; 0x48
 80102bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102c0:	3b01      	subs	r3, #1
 80102c2:	d503      	bpl.n	80102cc <__sfp+0x28>
 80102c4:	6833      	ldr	r3, [r6, #0]
 80102c6:	b30b      	cbz	r3, 801030c <__sfp+0x68>
 80102c8:	6836      	ldr	r6, [r6, #0]
 80102ca:	e7f7      	b.n	80102bc <__sfp+0x18>
 80102cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102d0:	b9d5      	cbnz	r5, 8010308 <__sfp+0x64>
 80102d2:	4b16      	ldr	r3, [pc, #88]	; (801032c <__sfp+0x88>)
 80102d4:	60e3      	str	r3, [r4, #12]
 80102d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102da:	6665      	str	r5, [r4, #100]	; 0x64
 80102dc:	f000 f847 	bl	801036e <__retarget_lock_init_recursive>
 80102e0:	f7ff ff96 	bl	8010210 <__sfp_lock_release>
 80102e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80102e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80102ec:	6025      	str	r5, [r4, #0]
 80102ee:	61a5      	str	r5, [r4, #24]
 80102f0:	2208      	movs	r2, #8
 80102f2:	4629      	mov	r1, r5
 80102f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80102f8:	f7fb fd30 	bl	800bd5c <memset>
 80102fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010300:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010304:	4620      	mov	r0, r4
 8010306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010308:	3468      	adds	r4, #104	; 0x68
 801030a:	e7d9      	b.n	80102c0 <__sfp+0x1c>
 801030c:	2104      	movs	r1, #4
 801030e:	4638      	mov	r0, r7
 8010310:	f7ff ff62 	bl	80101d8 <__sfmoreglue>
 8010314:	4604      	mov	r4, r0
 8010316:	6030      	str	r0, [r6, #0]
 8010318:	2800      	cmp	r0, #0
 801031a:	d1d5      	bne.n	80102c8 <__sfp+0x24>
 801031c:	f7ff ff78 	bl	8010210 <__sfp_lock_release>
 8010320:	230c      	movs	r3, #12
 8010322:	603b      	str	r3, [r7, #0]
 8010324:	e7ee      	b.n	8010304 <__sfp+0x60>
 8010326:	bf00      	nop
 8010328:	08012d44 	.word	0x08012d44
 801032c:	ffff0001 	.word	0xffff0001

08010330 <_fwalk_reent>:
 8010330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010334:	4606      	mov	r6, r0
 8010336:	4688      	mov	r8, r1
 8010338:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801033c:	2700      	movs	r7, #0
 801033e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010342:	f1b9 0901 	subs.w	r9, r9, #1
 8010346:	d505      	bpl.n	8010354 <_fwalk_reent+0x24>
 8010348:	6824      	ldr	r4, [r4, #0]
 801034a:	2c00      	cmp	r4, #0
 801034c:	d1f7      	bne.n	801033e <_fwalk_reent+0xe>
 801034e:	4638      	mov	r0, r7
 8010350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010354:	89ab      	ldrh	r3, [r5, #12]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d907      	bls.n	801036a <_fwalk_reent+0x3a>
 801035a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801035e:	3301      	adds	r3, #1
 8010360:	d003      	beq.n	801036a <_fwalk_reent+0x3a>
 8010362:	4629      	mov	r1, r5
 8010364:	4630      	mov	r0, r6
 8010366:	47c0      	blx	r8
 8010368:	4307      	orrs	r7, r0
 801036a:	3568      	adds	r5, #104	; 0x68
 801036c:	e7e9      	b.n	8010342 <_fwalk_reent+0x12>

0801036e <__retarget_lock_init_recursive>:
 801036e:	4770      	bx	lr

08010370 <__retarget_lock_acquire_recursive>:
 8010370:	4770      	bx	lr

08010372 <__retarget_lock_release_recursive>:
 8010372:	4770      	bx	lr

08010374 <__swhatbuf_r>:
 8010374:	b570      	push	{r4, r5, r6, lr}
 8010376:	460e      	mov	r6, r1
 8010378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801037c:	2900      	cmp	r1, #0
 801037e:	b096      	sub	sp, #88	; 0x58
 8010380:	4614      	mov	r4, r2
 8010382:	461d      	mov	r5, r3
 8010384:	da08      	bge.n	8010398 <__swhatbuf_r+0x24>
 8010386:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801038a:	2200      	movs	r2, #0
 801038c:	602a      	str	r2, [r5, #0]
 801038e:	061a      	lsls	r2, r3, #24
 8010390:	d410      	bmi.n	80103b4 <__swhatbuf_r+0x40>
 8010392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010396:	e00e      	b.n	80103b6 <__swhatbuf_r+0x42>
 8010398:	466a      	mov	r2, sp
 801039a:	f000 f903 	bl	80105a4 <_fstat_r>
 801039e:	2800      	cmp	r0, #0
 80103a0:	dbf1      	blt.n	8010386 <__swhatbuf_r+0x12>
 80103a2:	9a01      	ldr	r2, [sp, #4]
 80103a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103ac:	425a      	negs	r2, r3
 80103ae:	415a      	adcs	r2, r3
 80103b0:	602a      	str	r2, [r5, #0]
 80103b2:	e7ee      	b.n	8010392 <__swhatbuf_r+0x1e>
 80103b4:	2340      	movs	r3, #64	; 0x40
 80103b6:	2000      	movs	r0, #0
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	b016      	add	sp, #88	; 0x58
 80103bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080103c0 <__smakebuf_r>:
 80103c0:	898b      	ldrh	r3, [r1, #12]
 80103c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103c4:	079d      	lsls	r5, r3, #30
 80103c6:	4606      	mov	r6, r0
 80103c8:	460c      	mov	r4, r1
 80103ca:	d507      	bpl.n	80103dc <__smakebuf_r+0x1c>
 80103cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	6123      	str	r3, [r4, #16]
 80103d4:	2301      	movs	r3, #1
 80103d6:	6163      	str	r3, [r4, #20]
 80103d8:	b002      	add	sp, #8
 80103da:	bd70      	pop	{r4, r5, r6, pc}
 80103dc:	ab01      	add	r3, sp, #4
 80103de:	466a      	mov	r2, sp
 80103e0:	f7ff ffc8 	bl	8010374 <__swhatbuf_r>
 80103e4:	9900      	ldr	r1, [sp, #0]
 80103e6:	4605      	mov	r5, r0
 80103e8:	4630      	mov	r0, r6
 80103ea:	f7ff f959 	bl	800f6a0 <_malloc_r>
 80103ee:	b948      	cbnz	r0, 8010404 <__smakebuf_r+0x44>
 80103f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103f4:	059a      	lsls	r2, r3, #22
 80103f6:	d4ef      	bmi.n	80103d8 <__smakebuf_r+0x18>
 80103f8:	f023 0303 	bic.w	r3, r3, #3
 80103fc:	f043 0302 	orr.w	r3, r3, #2
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	e7e3      	b.n	80103cc <__smakebuf_r+0xc>
 8010404:	4b0d      	ldr	r3, [pc, #52]	; (801043c <__smakebuf_r+0x7c>)
 8010406:	62b3      	str	r3, [r6, #40]	; 0x28
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	6020      	str	r0, [r4, #0]
 801040c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	9b00      	ldr	r3, [sp, #0]
 8010414:	6163      	str	r3, [r4, #20]
 8010416:	9b01      	ldr	r3, [sp, #4]
 8010418:	6120      	str	r0, [r4, #16]
 801041a:	b15b      	cbz	r3, 8010434 <__smakebuf_r+0x74>
 801041c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010420:	4630      	mov	r0, r6
 8010422:	f000 f8d1 	bl	80105c8 <_isatty_r>
 8010426:	b128      	cbz	r0, 8010434 <__smakebuf_r+0x74>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f023 0303 	bic.w	r3, r3, #3
 801042e:	f043 0301 	orr.w	r3, r3, #1
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	89a0      	ldrh	r0, [r4, #12]
 8010436:	4305      	orrs	r5, r0
 8010438:	81a5      	strh	r5, [r4, #12]
 801043a:	e7cd      	b.n	80103d8 <__smakebuf_r+0x18>
 801043c:	080101cd 	.word	0x080101cd

08010440 <_malloc_usable_size_r>:
 8010440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010444:	1f18      	subs	r0, r3, #4
 8010446:	2b00      	cmp	r3, #0
 8010448:	bfbc      	itt	lt
 801044a:	580b      	ldrlt	r3, [r1, r0]
 801044c:	18c0      	addlt	r0, r0, r3
 801044e:	4770      	bx	lr

08010450 <_raise_r>:
 8010450:	291f      	cmp	r1, #31
 8010452:	b538      	push	{r3, r4, r5, lr}
 8010454:	4604      	mov	r4, r0
 8010456:	460d      	mov	r5, r1
 8010458:	d904      	bls.n	8010464 <_raise_r+0x14>
 801045a:	2316      	movs	r3, #22
 801045c:	6003      	str	r3, [r0, #0]
 801045e:	f04f 30ff 	mov.w	r0, #4294967295
 8010462:	bd38      	pop	{r3, r4, r5, pc}
 8010464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010466:	b112      	cbz	r2, 801046e <_raise_r+0x1e>
 8010468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801046c:	b94b      	cbnz	r3, 8010482 <_raise_r+0x32>
 801046e:	4620      	mov	r0, r4
 8010470:	f000 f830 	bl	80104d4 <_getpid_r>
 8010474:	462a      	mov	r2, r5
 8010476:	4601      	mov	r1, r0
 8010478:	4620      	mov	r0, r4
 801047a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801047e:	f000 b817 	b.w	80104b0 <_kill_r>
 8010482:	2b01      	cmp	r3, #1
 8010484:	d00a      	beq.n	801049c <_raise_r+0x4c>
 8010486:	1c59      	adds	r1, r3, #1
 8010488:	d103      	bne.n	8010492 <_raise_r+0x42>
 801048a:	2316      	movs	r3, #22
 801048c:	6003      	str	r3, [r0, #0]
 801048e:	2001      	movs	r0, #1
 8010490:	e7e7      	b.n	8010462 <_raise_r+0x12>
 8010492:	2400      	movs	r4, #0
 8010494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010498:	4628      	mov	r0, r5
 801049a:	4798      	blx	r3
 801049c:	2000      	movs	r0, #0
 801049e:	e7e0      	b.n	8010462 <_raise_r+0x12>

080104a0 <raise>:
 80104a0:	4b02      	ldr	r3, [pc, #8]	; (80104ac <raise+0xc>)
 80104a2:	4601      	mov	r1, r0
 80104a4:	6818      	ldr	r0, [r3, #0]
 80104a6:	f7ff bfd3 	b.w	8010450 <_raise_r>
 80104aa:	bf00      	nop
 80104ac:	2000023c 	.word	0x2000023c

080104b0 <_kill_r>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	4d07      	ldr	r5, [pc, #28]	; (80104d0 <_kill_r+0x20>)
 80104b4:	2300      	movs	r3, #0
 80104b6:	4604      	mov	r4, r0
 80104b8:	4608      	mov	r0, r1
 80104ba:	4611      	mov	r1, r2
 80104bc:	602b      	str	r3, [r5, #0]
 80104be:	f7f4 fc55 	bl	8004d6c <_kill>
 80104c2:	1c43      	adds	r3, r0, #1
 80104c4:	d102      	bne.n	80104cc <_kill_r+0x1c>
 80104c6:	682b      	ldr	r3, [r5, #0]
 80104c8:	b103      	cbz	r3, 80104cc <_kill_r+0x1c>
 80104ca:	6023      	str	r3, [r4, #0]
 80104cc:	bd38      	pop	{r3, r4, r5, pc}
 80104ce:	bf00      	nop
 80104d0:	20001fcc 	.word	0x20001fcc

080104d4 <_getpid_r>:
 80104d4:	f7f4 bc42 	b.w	8004d5c <_getpid>

080104d8 <__sread>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	460c      	mov	r4, r1
 80104dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104e0:	f000 f894 	bl	801060c <_read_r>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	bfab      	itete	ge
 80104e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80104ea:	89a3      	ldrhlt	r3, [r4, #12]
 80104ec:	181b      	addge	r3, r3, r0
 80104ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104f2:	bfac      	ite	ge
 80104f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80104f6:	81a3      	strhlt	r3, [r4, #12]
 80104f8:	bd10      	pop	{r4, pc}

080104fa <__swrite>:
 80104fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104fe:	461f      	mov	r7, r3
 8010500:	898b      	ldrh	r3, [r1, #12]
 8010502:	05db      	lsls	r3, r3, #23
 8010504:	4605      	mov	r5, r0
 8010506:	460c      	mov	r4, r1
 8010508:	4616      	mov	r6, r2
 801050a:	d505      	bpl.n	8010518 <__swrite+0x1e>
 801050c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010510:	2302      	movs	r3, #2
 8010512:	2200      	movs	r2, #0
 8010514:	f000 f868 	bl	80105e8 <_lseek_r>
 8010518:	89a3      	ldrh	r3, [r4, #12]
 801051a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801051e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	4632      	mov	r2, r6
 8010526:	463b      	mov	r3, r7
 8010528:	4628      	mov	r0, r5
 801052a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801052e:	f000 b817 	b.w	8010560 <_write_r>

08010532 <__sseek>:
 8010532:	b510      	push	{r4, lr}
 8010534:	460c      	mov	r4, r1
 8010536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053a:	f000 f855 	bl	80105e8 <_lseek_r>
 801053e:	1c43      	adds	r3, r0, #1
 8010540:	89a3      	ldrh	r3, [r4, #12]
 8010542:	bf15      	itete	ne
 8010544:	6560      	strne	r0, [r4, #84]	; 0x54
 8010546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801054a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801054e:	81a3      	strheq	r3, [r4, #12]
 8010550:	bf18      	it	ne
 8010552:	81a3      	strhne	r3, [r4, #12]
 8010554:	bd10      	pop	{r4, pc}

08010556 <__sclose>:
 8010556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801055a:	f000 b813 	b.w	8010584 <_close_r>
	...

08010560 <_write_r>:
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4d07      	ldr	r5, [pc, #28]	; (8010580 <_write_r+0x20>)
 8010564:	4604      	mov	r4, r0
 8010566:	4608      	mov	r0, r1
 8010568:	4611      	mov	r1, r2
 801056a:	2200      	movs	r2, #0
 801056c:	602a      	str	r2, [r5, #0]
 801056e:	461a      	mov	r2, r3
 8010570:	f7f4 fc33 	bl	8004dda <_write>
 8010574:	1c43      	adds	r3, r0, #1
 8010576:	d102      	bne.n	801057e <_write_r+0x1e>
 8010578:	682b      	ldr	r3, [r5, #0]
 801057a:	b103      	cbz	r3, 801057e <_write_r+0x1e>
 801057c:	6023      	str	r3, [r4, #0]
 801057e:	bd38      	pop	{r3, r4, r5, pc}
 8010580:	20001fcc 	.word	0x20001fcc

08010584 <_close_r>:
 8010584:	b538      	push	{r3, r4, r5, lr}
 8010586:	4d06      	ldr	r5, [pc, #24]	; (80105a0 <_close_r+0x1c>)
 8010588:	2300      	movs	r3, #0
 801058a:	4604      	mov	r4, r0
 801058c:	4608      	mov	r0, r1
 801058e:	602b      	str	r3, [r5, #0]
 8010590:	f7f4 fc3f 	bl	8004e12 <_close>
 8010594:	1c43      	adds	r3, r0, #1
 8010596:	d102      	bne.n	801059e <_close_r+0x1a>
 8010598:	682b      	ldr	r3, [r5, #0]
 801059a:	b103      	cbz	r3, 801059e <_close_r+0x1a>
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	bd38      	pop	{r3, r4, r5, pc}
 80105a0:	20001fcc 	.word	0x20001fcc

080105a4 <_fstat_r>:
 80105a4:	b538      	push	{r3, r4, r5, lr}
 80105a6:	4d07      	ldr	r5, [pc, #28]	; (80105c4 <_fstat_r+0x20>)
 80105a8:	2300      	movs	r3, #0
 80105aa:	4604      	mov	r4, r0
 80105ac:	4608      	mov	r0, r1
 80105ae:	4611      	mov	r1, r2
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	f7f4 fc3a 	bl	8004e2a <_fstat>
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	d102      	bne.n	80105c0 <_fstat_r+0x1c>
 80105ba:	682b      	ldr	r3, [r5, #0]
 80105bc:	b103      	cbz	r3, 80105c0 <_fstat_r+0x1c>
 80105be:	6023      	str	r3, [r4, #0]
 80105c0:	bd38      	pop	{r3, r4, r5, pc}
 80105c2:	bf00      	nop
 80105c4:	20001fcc 	.word	0x20001fcc

080105c8 <_isatty_r>:
 80105c8:	b538      	push	{r3, r4, r5, lr}
 80105ca:	4d06      	ldr	r5, [pc, #24]	; (80105e4 <_isatty_r+0x1c>)
 80105cc:	2300      	movs	r3, #0
 80105ce:	4604      	mov	r4, r0
 80105d0:	4608      	mov	r0, r1
 80105d2:	602b      	str	r3, [r5, #0]
 80105d4:	f7f4 fc39 	bl	8004e4a <_isatty>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d102      	bne.n	80105e2 <_isatty_r+0x1a>
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	b103      	cbz	r3, 80105e2 <_isatty_r+0x1a>
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	20001fcc 	.word	0x20001fcc

080105e8 <_lseek_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d07      	ldr	r5, [pc, #28]	; (8010608 <_lseek_r+0x20>)
 80105ec:	4604      	mov	r4, r0
 80105ee:	4608      	mov	r0, r1
 80105f0:	4611      	mov	r1, r2
 80105f2:	2200      	movs	r2, #0
 80105f4:	602a      	str	r2, [r5, #0]
 80105f6:	461a      	mov	r2, r3
 80105f8:	f7f4 fc32 	bl	8004e60 <_lseek>
 80105fc:	1c43      	adds	r3, r0, #1
 80105fe:	d102      	bne.n	8010606 <_lseek_r+0x1e>
 8010600:	682b      	ldr	r3, [r5, #0]
 8010602:	b103      	cbz	r3, 8010606 <_lseek_r+0x1e>
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	bd38      	pop	{r3, r4, r5, pc}
 8010608:	20001fcc 	.word	0x20001fcc

0801060c <_read_r>:
 801060c:	b538      	push	{r3, r4, r5, lr}
 801060e:	4d07      	ldr	r5, [pc, #28]	; (801062c <_read_r+0x20>)
 8010610:	4604      	mov	r4, r0
 8010612:	4608      	mov	r0, r1
 8010614:	4611      	mov	r1, r2
 8010616:	2200      	movs	r2, #0
 8010618:	602a      	str	r2, [r5, #0]
 801061a:	461a      	mov	r2, r3
 801061c:	f7f4 fbc0 	bl	8004da0 <_read>
 8010620:	1c43      	adds	r3, r0, #1
 8010622:	d102      	bne.n	801062a <_read_r+0x1e>
 8010624:	682b      	ldr	r3, [r5, #0]
 8010626:	b103      	cbz	r3, 801062a <_read_r+0x1e>
 8010628:	6023      	str	r3, [r4, #0]
 801062a:	bd38      	pop	{r3, r4, r5, pc}
 801062c:	20001fcc 	.word	0x20001fcc

08010630 <atan>:
 8010630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	ec55 4b10 	vmov	r4, r5, d0
 8010638:	4bc3      	ldr	r3, [pc, #780]	; (8010948 <atan+0x318>)
 801063a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801063e:	429e      	cmp	r6, r3
 8010640:	46ab      	mov	fp, r5
 8010642:	dd18      	ble.n	8010676 <atan+0x46>
 8010644:	4bc1      	ldr	r3, [pc, #772]	; (801094c <atan+0x31c>)
 8010646:	429e      	cmp	r6, r3
 8010648:	dc01      	bgt.n	801064e <atan+0x1e>
 801064a:	d109      	bne.n	8010660 <atan+0x30>
 801064c:	b144      	cbz	r4, 8010660 <atan+0x30>
 801064e:	4622      	mov	r2, r4
 8010650:	462b      	mov	r3, r5
 8010652:	4620      	mov	r0, r4
 8010654:	4629      	mov	r1, r5
 8010656:	f7ef fe21 	bl	800029c <__adddf3>
 801065a:	4604      	mov	r4, r0
 801065c:	460d      	mov	r5, r1
 801065e:	e006      	b.n	801066e <atan+0x3e>
 8010660:	f1bb 0f00 	cmp.w	fp, #0
 8010664:	f300 8131 	bgt.w	80108ca <atan+0x29a>
 8010668:	a59b      	add	r5, pc, #620	; (adr r5, 80108d8 <atan+0x2a8>)
 801066a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801066e:	ec45 4b10 	vmov	d0, r4, r5
 8010672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010676:	4bb6      	ldr	r3, [pc, #728]	; (8010950 <atan+0x320>)
 8010678:	429e      	cmp	r6, r3
 801067a:	dc14      	bgt.n	80106a6 <atan+0x76>
 801067c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010680:	429e      	cmp	r6, r3
 8010682:	dc0d      	bgt.n	80106a0 <atan+0x70>
 8010684:	a396      	add	r3, pc, #600	; (adr r3, 80108e0 <atan+0x2b0>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	ee10 0a10 	vmov	r0, s0
 801068e:	4629      	mov	r1, r5
 8010690:	f7ef fe04 	bl	800029c <__adddf3>
 8010694:	4baf      	ldr	r3, [pc, #700]	; (8010954 <atan+0x324>)
 8010696:	2200      	movs	r2, #0
 8010698:	f7f0 fa46 	bl	8000b28 <__aeabi_dcmpgt>
 801069c:	2800      	cmp	r0, #0
 801069e:	d1e6      	bne.n	801066e <atan+0x3e>
 80106a0:	f04f 3aff 	mov.w	sl, #4294967295
 80106a4:	e02b      	b.n	80106fe <atan+0xce>
 80106a6:	f000 f9b7 	bl	8010a18 <fabs>
 80106aa:	4bab      	ldr	r3, [pc, #684]	; (8010958 <atan+0x328>)
 80106ac:	429e      	cmp	r6, r3
 80106ae:	ec55 4b10 	vmov	r4, r5, d0
 80106b2:	f300 80bf 	bgt.w	8010834 <atan+0x204>
 80106b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80106ba:	429e      	cmp	r6, r3
 80106bc:	f300 80a0 	bgt.w	8010800 <atan+0x1d0>
 80106c0:	ee10 2a10 	vmov	r2, s0
 80106c4:	ee10 0a10 	vmov	r0, s0
 80106c8:	462b      	mov	r3, r5
 80106ca:	4629      	mov	r1, r5
 80106cc:	f7ef fde6 	bl	800029c <__adddf3>
 80106d0:	4ba0      	ldr	r3, [pc, #640]	; (8010954 <atan+0x324>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	f7ef fde0 	bl	8000298 <__aeabi_dsub>
 80106d8:	2200      	movs	r2, #0
 80106da:	4606      	mov	r6, r0
 80106dc:	460f      	mov	r7, r1
 80106de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80106e2:	4620      	mov	r0, r4
 80106e4:	4629      	mov	r1, r5
 80106e6:	f7ef fdd9 	bl	800029c <__adddf3>
 80106ea:	4602      	mov	r2, r0
 80106ec:	460b      	mov	r3, r1
 80106ee:	4630      	mov	r0, r6
 80106f0:	4639      	mov	r1, r7
 80106f2:	f7f0 f8b3 	bl	800085c <__aeabi_ddiv>
 80106f6:	f04f 0a00 	mov.w	sl, #0
 80106fa:	4604      	mov	r4, r0
 80106fc:	460d      	mov	r5, r1
 80106fe:	4622      	mov	r2, r4
 8010700:	462b      	mov	r3, r5
 8010702:	4620      	mov	r0, r4
 8010704:	4629      	mov	r1, r5
 8010706:	f7ef ff7f 	bl	8000608 <__aeabi_dmul>
 801070a:	4602      	mov	r2, r0
 801070c:	460b      	mov	r3, r1
 801070e:	4680      	mov	r8, r0
 8010710:	4689      	mov	r9, r1
 8010712:	f7ef ff79 	bl	8000608 <__aeabi_dmul>
 8010716:	a374      	add	r3, pc, #464	; (adr r3, 80108e8 <atan+0x2b8>)
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	4606      	mov	r6, r0
 801071e:	460f      	mov	r7, r1
 8010720:	f7ef ff72 	bl	8000608 <__aeabi_dmul>
 8010724:	a372      	add	r3, pc, #456	; (adr r3, 80108f0 <atan+0x2c0>)
 8010726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072a:	f7ef fdb7 	bl	800029c <__adddf3>
 801072e:	4632      	mov	r2, r6
 8010730:	463b      	mov	r3, r7
 8010732:	f7ef ff69 	bl	8000608 <__aeabi_dmul>
 8010736:	a370      	add	r3, pc, #448	; (adr r3, 80108f8 <atan+0x2c8>)
 8010738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073c:	f7ef fdae 	bl	800029c <__adddf3>
 8010740:	4632      	mov	r2, r6
 8010742:	463b      	mov	r3, r7
 8010744:	f7ef ff60 	bl	8000608 <__aeabi_dmul>
 8010748:	a36d      	add	r3, pc, #436	; (adr r3, 8010900 <atan+0x2d0>)
 801074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074e:	f7ef fda5 	bl	800029c <__adddf3>
 8010752:	4632      	mov	r2, r6
 8010754:	463b      	mov	r3, r7
 8010756:	f7ef ff57 	bl	8000608 <__aeabi_dmul>
 801075a:	a36b      	add	r3, pc, #428	; (adr r3, 8010908 <atan+0x2d8>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	f7ef fd9c 	bl	800029c <__adddf3>
 8010764:	4632      	mov	r2, r6
 8010766:	463b      	mov	r3, r7
 8010768:	f7ef ff4e 	bl	8000608 <__aeabi_dmul>
 801076c:	a368      	add	r3, pc, #416	; (adr r3, 8010910 <atan+0x2e0>)
 801076e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010772:	f7ef fd93 	bl	800029c <__adddf3>
 8010776:	4642      	mov	r2, r8
 8010778:	464b      	mov	r3, r9
 801077a:	f7ef ff45 	bl	8000608 <__aeabi_dmul>
 801077e:	a366      	add	r3, pc, #408	; (adr r3, 8010918 <atan+0x2e8>)
 8010780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010784:	4680      	mov	r8, r0
 8010786:	4689      	mov	r9, r1
 8010788:	4630      	mov	r0, r6
 801078a:	4639      	mov	r1, r7
 801078c:	f7ef ff3c 	bl	8000608 <__aeabi_dmul>
 8010790:	a363      	add	r3, pc, #396	; (adr r3, 8010920 <atan+0x2f0>)
 8010792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010796:	f7ef fd7f 	bl	8000298 <__aeabi_dsub>
 801079a:	4632      	mov	r2, r6
 801079c:	463b      	mov	r3, r7
 801079e:	f7ef ff33 	bl	8000608 <__aeabi_dmul>
 80107a2:	a361      	add	r3, pc, #388	; (adr r3, 8010928 <atan+0x2f8>)
 80107a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a8:	f7ef fd76 	bl	8000298 <__aeabi_dsub>
 80107ac:	4632      	mov	r2, r6
 80107ae:	463b      	mov	r3, r7
 80107b0:	f7ef ff2a 	bl	8000608 <__aeabi_dmul>
 80107b4:	a35e      	add	r3, pc, #376	; (adr r3, 8010930 <atan+0x300>)
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f7ef fd6d 	bl	8000298 <__aeabi_dsub>
 80107be:	4632      	mov	r2, r6
 80107c0:	463b      	mov	r3, r7
 80107c2:	f7ef ff21 	bl	8000608 <__aeabi_dmul>
 80107c6:	a35c      	add	r3, pc, #368	; (adr r3, 8010938 <atan+0x308>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	f7ef fd64 	bl	8000298 <__aeabi_dsub>
 80107d0:	4632      	mov	r2, r6
 80107d2:	463b      	mov	r3, r7
 80107d4:	f7ef ff18 	bl	8000608 <__aeabi_dmul>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4640      	mov	r0, r8
 80107de:	4649      	mov	r1, r9
 80107e0:	f7ef fd5c 	bl	800029c <__adddf3>
 80107e4:	4622      	mov	r2, r4
 80107e6:	462b      	mov	r3, r5
 80107e8:	f7ef ff0e 	bl	8000608 <__aeabi_dmul>
 80107ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80107f0:	4602      	mov	r2, r0
 80107f2:	460b      	mov	r3, r1
 80107f4:	d14b      	bne.n	801088e <atan+0x25e>
 80107f6:	4620      	mov	r0, r4
 80107f8:	4629      	mov	r1, r5
 80107fa:	f7ef fd4d 	bl	8000298 <__aeabi_dsub>
 80107fe:	e72c      	b.n	801065a <atan+0x2a>
 8010800:	ee10 0a10 	vmov	r0, s0
 8010804:	4b53      	ldr	r3, [pc, #332]	; (8010954 <atan+0x324>)
 8010806:	2200      	movs	r2, #0
 8010808:	4629      	mov	r1, r5
 801080a:	f7ef fd45 	bl	8000298 <__aeabi_dsub>
 801080e:	4b51      	ldr	r3, [pc, #324]	; (8010954 <atan+0x324>)
 8010810:	4606      	mov	r6, r0
 8010812:	460f      	mov	r7, r1
 8010814:	2200      	movs	r2, #0
 8010816:	4620      	mov	r0, r4
 8010818:	4629      	mov	r1, r5
 801081a:	f7ef fd3f 	bl	800029c <__adddf3>
 801081e:	4602      	mov	r2, r0
 8010820:	460b      	mov	r3, r1
 8010822:	4630      	mov	r0, r6
 8010824:	4639      	mov	r1, r7
 8010826:	f7f0 f819 	bl	800085c <__aeabi_ddiv>
 801082a:	f04f 0a01 	mov.w	sl, #1
 801082e:	4604      	mov	r4, r0
 8010830:	460d      	mov	r5, r1
 8010832:	e764      	b.n	80106fe <atan+0xce>
 8010834:	4b49      	ldr	r3, [pc, #292]	; (801095c <atan+0x32c>)
 8010836:	429e      	cmp	r6, r3
 8010838:	da1d      	bge.n	8010876 <atan+0x246>
 801083a:	ee10 0a10 	vmov	r0, s0
 801083e:	4b48      	ldr	r3, [pc, #288]	; (8010960 <atan+0x330>)
 8010840:	2200      	movs	r2, #0
 8010842:	4629      	mov	r1, r5
 8010844:	f7ef fd28 	bl	8000298 <__aeabi_dsub>
 8010848:	4b45      	ldr	r3, [pc, #276]	; (8010960 <atan+0x330>)
 801084a:	4606      	mov	r6, r0
 801084c:	460f      	mov	r7, r1
 801084e:	2200      	movs	r2, #0
 8010850:	4620      	mov	r0, r4
 8010852:	4629      	mov	r1, r5
 8010854:	f7ef fed8 	bl	8000608 <__aeabi_dmul>
 8010858:	4b3e      	ldr	r3, [pc, #248]	; (8010954 <atan+0x324>)
 801085a:	2200      	movs	r2, #0
 801085c:	f7ef fd1e 	bl	800029c <__adddf3>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	4630      	mov	r0, r6
 8010866:	4639      	mov	r1, r7
 8010868:	f7ef fff8 	bl	800085c <__aeabi_ddiv>
 801086c:	f04f 0a02 	mov.w	sl, #2
 8010870:	4604      	mov	r4, r0
 8010872:	460d      	mov	r5, r1
 8010874:	e743      	b.n	80106fe <atan+0xce>
 8010876:	462b      	mov	r3, r5
 8010878:	ee10 2a10 	vmov	r2, s0
 801087c:	4939      	ldr	r1, [pc, #228]	; (8010964 <atan+0x334>)
 801087e:	2000      	movs	r0, #0
 8010880:	f7ef ffec 	bl	800085c <__aeabi_ddiv>
 8010884:	f04f 0a03 	mov.w	sl, #3
 8010888:	4604      	mov	r4, r0
 801088a:	460d      	mov	r5, r1
 801088c:	e737      	b.n	80106fe <atan+0xce>
 801088e:	4b36      	ldr	r3, [pc, #216]	; (8010968 <atan+0x338>)
 8010890:	4e36      	ldr	r6, [pc, #216]	; (801096c <atan+0x33c>)
 8010892:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010896:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801089a:	e9da 2300 	ldrd	r2, r3, [sl]
 801089e:	f7ef fcfb 	bl	8000298 <__aeabi_dsub>
 80108a2:	4622      	mov	r2, r4
 80108a4:	462b      	mov	r3, r5
 80108a6:	f7ef fcf7 	bl	8000298 <__aeabi_dsub>
 80108aa:	4602      	mov	r2, r0
 80108ac:	460b      	mov	r3, r1
 80108ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80108b2:	f7ef fcf1 	bl	8000298 <__aeabi_dsub>
 80108b6:	f1bb 0f00 	cmp.w	fp, #0
 80108ba:	4604      	mov	r4, r0
 80108bc:	460d      	mov	r5, r1
 80108be:	f6bf aed6 	bge.w	801066e <atan+0x3e>
 80108c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108c6:	461d      	mov	r5, r3
 80108c8:	e6d1      	b.n	801066e <atan+0x3e>
 80108ca:	a51d      	add	r5, pc, #116	; (adr r5, 8010940 <atan+0x310>)
 80108cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80108d0:	e6cd      	b.n	801066e <atan+0x3e>
 80108d2:	bf00      	nop
 80108d4:	f3af 8000 	nop.w
 80108d8:	54442d18 	.word	0x54442d18
 80108dc:	bff921fb 	.word	0xbff921fb
 80108e0:	8800759c 	.word	0x8800759c
 80108e4:	7e37e43c 	.word	0x7e37e43c
 80108e8:	e322da11 	.word	0xe322da11
 80108ec:	3f90ad3a 	.word	0x3f90ad3a
 80108f0:	24760deb 	.word	0x24760deb
 80108f4:	3fa97b4b 	.word	0x3fa97b4b
 80108f8:	a0d03d51 	.word	0xa0d03d51
 80108fc:	3fb10d66 	.word	0x3fb10d66
 8010900:	c54c206e 	.word	0xc54c206e
 8010904:	3fb745cd 	.word	0x3fb745cd
 8010908:	920083ff 	.word	0x920083ff
 801090c:	3fc24924 	.word	0x3fc24924
 8010910:	5555550d 	.word	0x5555550d
 8010914:	3fd55555 	.word	0x3fd55555
 8010918:	2c6a6c2f 	.word	0x2c6a6c2f
 801091c:	bfa2b444 	.word	0xbfa2b444
 8010920:	52defd9a 	.word	0x52defd9a
 8010924:	3fadde2d 	.word	0x3fadde2d
 8010928:	af749a6d 	.word	0xaf749a6d
 801092c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010930:	fe231671 	.word	0xfe231671
 8010934:	3fbc71c6 	.word	0x3fbc71c6
 8010938:	9998ebc4 	.word	0x9998ebc4
 801093c:	3fc99999 	.word	0x3fc99999
 8010940:	54442d18 	.word	0x54442d18
 8010944:	3ff921fb 	.word	0x3ff921fb
 8010948:	440fffff 	.word	0x440fffff
 801094c:	7ff00000 	.word	0x7ff00000
 8010950:	3fdbffff 	.word	0x3fdbffff
 8010954:	3ff00000 	.word	0x3ff00000
 8010958:	3ff2ffff 	.word	0x3ff2ffff
 801095c:	40038000 	.word	0x40038000
 8010960:	3ff80000 	.word	0x3ff80000
 8010964:	bff00000 	.word	0xbff00000
 8010968:	08013210 	.word	0x08013210
 801096c:	080131f0 	.word	0x080131f0

08010970 <cos>:
 8010970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010972:	ec53 2b10 	vmov	r2, r3, d0
 8010976:	4826      	ldr	r0, [pc, #152]	; (8010a10 <cos+0xa0>)
 8010978:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801097c:	4281      	cmp	r1, r0
 801097e:	dc06      	bgt.n	801098e <cos+0x1e>
 8010980:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010a08 <cos+0x98>
 8010984:	b005      	add	sp, #20
 8010986:	f85d eb04 	ldr.w	lr, [sp], #4
 801098a:	f000 bded 	b.w	8011568 <__kernel_cos>
 801098e:	4821      	ldr	r0, [pc, #132]	; (8010a14 <cos+0xa4>)
 8010990:	4281      	cmp	r1, r0
 8010992:	dd09      	ble.n	80109a8 <cos+0x38>
 8010994:	ee10 0a10 	vmov	r0, s0
 8010998:	4619      	mov	r1, r3
 801099a:	f7ef fc7d 	bl	8000298 <__aeabi_dsub>
 801099e:	ec41 0b10 	vmov	d0, r0, r1
 80109a2:	b005      	add	sp, #20
 80109a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80109a8:	4668      	mov	r0, sp
 80109aa:	f000 f961 	bl	8010c70 <__ieee754_rem_pio2>
 80109ae:	f000 0003 	and.w	r0, r0, #3
 80109b2:	2801      	cmp	r0, #1
 80109b4:	d00b      	beq.n	80109ce <cos+0x5e>
 80109b6:	2802      	cmp	r0, #2
 80109b8:	d016      	beq.n	80109e8 <cos+0x78>
 80109ba:	b9e0      	cbnz	r0, 80109f6 <cos+0x86>
 80109bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109c0:	ed9d 0b00 	vldr	d0, [sp]
 80109c4:	f000 fdd0 	bl	8011568 <__kernel_cos>
 80109c8:	ec51 0b10 	vmov	r0, r1, d0
 80109cc:	e7e7      	b.n	801099e <cos+0x2e>
 80109ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109d2:	ed9d 0b00 	vldr	d0, [sp]
 80109d6:	f001 f9df 	bl	8011d98 <__kernel_sin>
 80109da:	ec53 2b10 	vmov	r2, r3, d0
 80109de:	ee10 0a10 	vmov	r0, s0
 80109e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80109e6:	e7da      	b.n	801099e <cos+0x2e>
 80109e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109ec:	ed9d 0b00 	vldr	d0, [sp]
 80109f0:	f000 fdba 	bl	8011568 <__kernel_cos>
 80109f4:	e7f1      	b.n	80109da <cos+0x6a>
 80109f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109fa:	ed9d 0b00 	vldr	d0, [sp]
 80109fe:	2001      	movs	r0, #1
 8010a00:	f001 f9ca 	bl	8011d98 <__kernel_sin>
 8010a04:	e7e0      	b.n	80109c8 <cos+0x58>
 8010a06:	bf00      	nop
	...
 8010a10:	3fe921fb 	.word	0x3fe921fb
 8010a14:	7fefffff 	.word	0x7fefffff

08010a18 <fabs>:
 8010a18:	ec51 0b10 	vmov	r0, r1, d0
 8010a1c:	ee10 2a10 	vmov	r2, s0
 8010a20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a24:	ec43 2b10 	vmov	d0, r2, r3
 8010a28:	4770      	bx	lr
 8010a2a:	0000      	movs	r0, r0
 8010a2c:	0000      	movs	r0, r0
	...

08010a30 <sin>:
 8010a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a32:	ec53 2b10 	vmov	r2, r3, d0
 8010a36:	4828      	ldr	r0, [pc, #160]	; (8010ad8 <sin+0xa8>)
 8010a38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a3c:	4281      	cmp	r1, r0
 8010a3e:	dc07      	bgt.n	8010a50 <sin+0x20>
 8010a40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010ad0 <sin+0xa0>
 8010a44:	2000      	movs	r0, #0
 8010a46:	b005      	add	sp, #20
 8010a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a4c:	f001 b9a4 	b.w	8011d98 <__kernel_sin>
 8010a50:	4822      	ldr	r0, [pc, #136]	; (8010adc <sin+0xac>)
 8010a52:	4281      	cmp	r1, r0
 8010a54:	dd09      	ble.n	8010a6a <sin+0x3a>
 8010a56:	ee10 0a10 	vmov	r0, s0
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	f7ef fc1c 	bl	8000298 <__aeabi_dsub>
 8010a60:	ec41 0b10 	vmov	d0, r0, r1
 8010a64:	b005      	add	sp, #20
 8010a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a6a:	4668      	mov	r0, sp
 8010a6c:	f000 f900 	bl	8010c70 <__ieee754_rem_pio2>
 8010a70:	f000 0003 	and.w	r0, r0, #3
 8010a74:	2801      	cmp	r0, #1
 8010a76:	d00c      	beq.n	8010a92 <sin+0x62>
 8010a78:	2802      	cmp	r0, #2
 8010a7a:	d011      	beq.n	8010aa0 <sin+0x70>
 8010a7c:	b9f0      	cbnz	r0, 8010abc <sin+0x8c>
 8010a7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a82:	ed9d 0b00 	vldr	d0, [sp]
 8010a86:	2001      	movs	r0, #1
 8010a88:	f001 f986 	bl	8011d98 <__kernel_sin>
 8010a8c:	ec51 0b10 	vmov	r0, r1, d0
 8010a90:	e7e6      	b.n	8010a60 <sin+0x30>
 8010a92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a96:	ed9d 0b00 	vldr	d0, [sp]
 8010a9a:	f000 fd65 	bl	8011568 <__kernel_cos>
 8010a9e:	e7f5      	b.n	8010a8c <sin+0x5c>
 8010aa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010aa4:	ed9d 0b00 	vldr	d0, [sp]
 8010aa8:	2001      	movs	r0, #1
 8010aaa:	f001 f975 	bl	8011d98 <__kernel_sin>
 8010aae:	ec53 2b10 	vmov	r2, r3, d0
 8010ab2:	ee10 0a10 	vmov	r0, s0
 8010ab6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010aba:	e7d1      	b.n	8010a60 <sin+0x30>
 8010abc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ac0:	ed9d 0b00 	vldr	d0, [sp]
 8010ac4:	f000 fd50 	bl	8011568 <__kernel_cos>
 8010ac8:	e7f1      	b.n	8010aae <sin+0x7e>
 8010aca:	bf00      	nop
 8010acc:	f3af 8000 	nop.w
	...
 8010ad8:	3fe921fb 	.word	0x3fe921fb
 8010adc:	7fefffff 	.word	0x7fefffff

08010ae0 <tan>:
 8010ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ae2:	ec53 2b10 	vmov	r2, r3, d0
 8010ae6:	4816      	ldr	r0, [pc, #88]	; (8010b40 <tan+0x60>)
 8010ae8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010aec:	4281      	cmp	r1, r0
 8010aee:	dc07      	bgt.n	8010b00 <tan+0x20>
 8010af0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010b38 <tan+0x58>
 8010af4:	2001      	movs	r0, #1
 8010af6:	b005      	add	sp, #20
 8010af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010afc:	f001 ba0c 	b.w	8011f18 <__kernel_tan>
 8010b00:	4810      	ldr	r0, [pc, #64]	; (8010b44 <tan+0x64>)
 8010b02:	4281      	cmp	r1, r0
 8010b04:	dd09      	ble.n	8010b1a <tan+0x3a>
 8010b06:	ee10 0a10 	vmov	r0, s0
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	f7ef fbc4 	bl	8000298 <__aeabi_dsub>
 8010b10:	ec41 0b10 	vmov	d0, r0, r1
 8010b14:	b005      	add	sp, #20
 8010b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b1a:	4668      	mov	r0, sp
 8010b1c:	f000 f8a8 	bl	8010c70 <__ieee754_rem_pio2>
 8010b20:	0040      	lsls	r0, r0, #1
 8010b22:	f000 0002 	and.w	r0, r0, #2
 8010b26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b2a:	ed9d 0b00 	vldr	d0, [sp]
 8010b2e:	f1c0 0001 	rsb	r0, r0, #1
 8010b32:	f001 f9f1 	bl	8011f18 <__kernel_tan>
 8010b36:	e7ed      	b.n	8010b14 <tan+0x34>
	...
 8010b40:	3fe921fb 	.word	0x3fe921fb
 8010b44:	7fefffff 	.word	0x7fefffff

08010b48 <sinf>:
 8010b48:	ee10 3a10 	vmov	r3, s0
 8010b4c:	b507      	push	{r0, r1, r2, lr}
 8010b4e:	4a1f      	ldr	r2, [pc, #124]	; (8010bcc <sinf+0x84>)
 8010b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b54:	4293      	cmp	r3, r2
 8010b56:	dc07      	bgt.n	8010b68 <sinf+0x20>
 8010b58:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010bd0 <sinf+0x88>
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	b003      	add	sp, #12
 8010b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b64:	f001 beb8 	b.w	80128d8 <__kernel_sinf>
 8010b68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010b6c:	db04      	blt.n	8010b78 <sinf+0x30>
 8010b6e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010b72:	b003      	add	sp, #12
 8010b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b78:	4668      	mov	r0, sp
 8010b7a:	f000 fbb9 	bl	80112f0 <__ieee754_rem_pio2f>
 8010b7e:	f000 0003 	and.w	r0, r0, #3
 8010b82:	2801      	cmp	r0, #1
 8010b84:	d00a      	beq.n	8010b9c <sinf+0x54>
 8010b86:	2802      	cmp	r0, #2
 8010b88:	d00f      	beq.n	8010baa <sinf+0x62>
 8010b8a:	b9c0      	cbnz	r0, 8010bbe <sinf+0x76>
 8010b8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010b90:	ed9d 0a00 	vldr	s0, [sp]
 8010b94:	2001      	movs	r0, #1
 8010b96:	f001 fe9f 	bl	80128d8 <__kernel_sinf>
 8010b9a:	e7ea      	b.n	8010b72 <sinf+0x2a>
 8010b9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ba0:	ed9d 0a00 	vldr	s0, [sp]
 8010ba4:	f001 fbc2 	bl	801232c <__kernel_cosf>
 8010ba8:	e7e3      	b.n	8010b72 <sinf+0x2a>
 8010baa:	eddd 0a01 	vldr	s1, [sp, #4]
 8010bae:	ed9d 0a00 	vldr	s0, [sp]
 8010bb2:	2001      	movs	r0, #1
 8010bb4:	f001 fe90 	bl	80128d8 <__kernel_sinf>
 8010bb8:	eeb1 0a40 	vneg.f32	s0, s0
 8010bbc:	e7d9      	b.n	8010b72 <sinf+0x2a>
 8010bbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8010bc2:	ed9d 0a00 	vldr	s0, [sp]
 8010bc6:	f001 fbb1 	bl	801232c <__kernel_cosf>
 8010bca:	e7f5      	b.n	8010bb8 <sinf+0x70>
 8010bcc:	3f490fd8 	.word	0x3f490fd8
 8010bd0:	00000000 	.word	0x00000000

08010bd4 <sqrt>:
 8010bd4:	b538      	push	{r3, r4, r5, lr}
 8010bd6:	ed2d 8b02 	vpush	{d8}
 8010bda:	ec55 4b10 	vmov	r4, r5, d0
 8010bde:	f000 fa53 	bl	8011088 <__ieee754_sqrt>
 8010be2:	4622      	mov	r2, r4
 8010be4:	462b      	mov	r3, r5
 8010be6:	4620      	mov	r0, r4
 8010be8:	4629      	mov	r1, r5
 8010bea:	eeb0 8a40 	vmov.f32	s16, s0
 8010bee:	eef0 8a60 	vmov.f32	s17, s1
 8010bf2:	f7ef ffa3 	bl	8000b3c <__aeabi_dcmpun>
 8010bf6:	b990      	cbnz	r0, 8010c1e <sqrt+0x4a>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	4629      	mov	r1, r5
 8010c00:	f7ef ff74 	bl	8000aec <__aeabi_dcmplt>
 8010c04:	b158      	cbz	r0, 8010c1e <sqrt+0x4a>
 8010c06:	f7fb f871 	bl	800bcec <__errno>
 8010c0a:	2321      	movs	r3, #33	; 0x21
 8010c0c:	6003      	str	r3, [r0, #0]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	2300      	movs	r3, #0
 8010c12:	4610      	mov	r0, r2
 8010c14:	4619      	mov	r1, r3
 8010c16:	f7ef fe21 	bl	800085c <__aeabi_ddiv>
 8010c1a:	ec41 0b18 	vmov	d8, r0, r1
 8010c1e:	eeb0 0a48 	vmov.f32	s0, s16
 8010c22:	eef0 0a68 	vmov.f32	s1, s17
 8010c26:	ecbd 8b02 	vpop	{d8}
 8010c2a:	bd38      	pop	{r3, r4, r5, pc}

08010c2c <fmodf>:
 8010c2c:	b508      	push	{r3, lr}
 8010c2e:	ed2d 8b02 	vpush	{d8}
 8010c32:	eef0 8a40 	vmov.f32	s17, s0
 8010c36:	eeb0 8a60 	vmov.f32	s16, s1
 8010c3a:	f000 fad7 	bl	80111ec <__ieee754_fmodf>
 8010c3e:	eef4 8a48 	vcmp.f32	s17, s16
 8010c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c46:	d60c      	bvs.n	8010c62 <fmodf+0x36>
 8010c48:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010c68 <fmodf+0x3c>
 8010c4c:	eeb4 8a68 	vcmp.f32	s16, s17
 8010c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c54:	d105      	bne.n	8010c62 <fmodf+0x36>
 8010c56:	f7fb f849 	bl	800bcec <__errno>
 8010c5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010c5e:	2321      	movs	r3, #33	; 0x21
 8010c60:	6003      	str	r3, [r0, #0]
 8010c62:	ecbd 8b02 	vpop	{d8}
 8010c66:	bd08      	pop	{r3, pc}
	...

08010c70 <__ieee754_rem_pio2>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	ed2d 8b02 	vpush	{d8}
 8010c78:	ec55 4b10 	vmov	r4, r5, d0
 8010c7c:	4bca      	ldr	r3, [pc, #808]	; (8010fa8 <__ieee754_rem_pio2+0x338>)
 8010c7e:	b08b      	sub	sp, #44	; 0x2c
 8010c80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010c84:	4598      	cmp	r8, r3
 8010c86:	4682      	mov	sl, r0
 8010c88:	9502      	str	r5, [sp, #8]
 8010c8a:	dc08      	bgt.n	8010c9e <__ieee754_rem_pio2+0x2e>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2300      	movs	r3, #0
 8010c90:	ed80 0b00 	vstr	d0, [r0]
 8010c94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010c98:	f04f 0b00 	mov.w	fp, #0
 8010c9c:	e028      	b.n	8010cf0 <__ieee754_rem_pio2+0x80>
 8010c9e:	4bc3      	ldr	r3, [pc, #780]	; (8010fac <__ieee754_rem_pio2+0x33c>)
 8010ca0:	4598      	cmp	r8, r3
 8010ca2:	dc78      	bgt.n	8010d96 <__ieee754_rem_pio2+0x126>
 8010ca4:	9b02      	ldr	r3, [sp, #8]
 8010ca6:	4ec2      	ldr	r6, [pc, #776]	; (8010fb0 <__ieee754_rem_pio2+0x340>)
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	ee10 0a10 	vmov	r0, s0
 8010cae:	a3b0      	add	r3, pc, #704	; (adr r3, 8010f70 <__ieee754_rem_pio2+0x300>)
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	dd39      	ble.n	8010d2c <__ieee754_rem_pio2+0xbc>
 8010cb8:	f7ef faee 	bl	8000298 <__aeabi_dsub>
 8010cbc:	45b0      	cmp	r8, r6
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	460d      	mov	r5, r1
 8010cc2:	d01b      	beq.n	8010cfc <__ieee754_rem_pio2+0x8c>
 8010cc4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x308>)
 8010cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cca:	f7ef fae5 	bl	8000298 <__aeabi_dsub>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	e9ca 2300 	strd	r2, r3, [sl]
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	4629      	mov	r1, r5
 8010cda:	f7ef fadd 	bl	8000298 <__aeabi_dsub>
 8010cde:	a3a6      	add	r3, pc, #664	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x308>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef fad8 	bl	8000298 <__aeabi_dsub>
 8010ce8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010cec:	f04f 0b01 	mov.w	fp, #1
 8010cf0:	4658      	mov	r0, fp
 8010cf2:	b00b      	add	sp, #44	; 0x2c
 8010cf4:	ecbd 8b02 	vpop	{d8}
 8010cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfc:	a3a0      	add	r3, pc, #640	; (adr r3, 8010f80 <__ieee754_rem_pio2+0x310>)
 8010cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d02:	f7ef fac9 	bl	8000298 <__aeabi_dsub>
 8010d06:	a3a0      	add	r3, pc, #640	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x318>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	460d      	mov	r5, r1
 8010d10:	f7ef fac2 	bl	8000298 <__aeabi_dsub>
 8010d14:	4602      	mov	r2, r0
 8010d16:	460b      	mov	r3, r1
 8010d18:	e9ca 2300 	strd	r2, r3, [sl]
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	4629      	mov	r1, r5
 8010d20:	f7ef faba 	bl	8000298 <__aeabi_dsub>
 8010d24:	a398      	add	r3, pc, #608	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x318>)
 8010d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2a:	e7db      	b.n	8010ce4 <__ieee754_rem_pio2+0x74>
 8010d2c:	f7ef fab6 	bl	800029c <__adddf3>
 8010d30:	45b0      	cmp	r8, r6
 8010d32:	4604      	mov	r4, r0
 8010d34:	460d      	mov	r5, r1
 8010d36:	d016      	beq.n	8010d66 <__ieee754_rem_pio2+0xf6>
 8010d38:	a38f      	add	r3, pc, #572	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x308>)
 8010d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3e:	f7ef faad 	bl	800029c <__adddf3>
 8010d42:	4602      	mov	r2, r0
 8010d44:	460b      	mov	r3, r1
 8010d46:	e9ca 2300 	strd	r2, r3, [sl]
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	f7ef faa3 	bl	8000298 <__aeabi_dsub>
 8010d52:	a389      	add	r3, pc, #548	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x308>)
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	f7ef faa0 	bl	800029c <__adddf3>
 8010d5c:	f04f 3bff 	mov.w	fp, #4294967295
 8010d60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d64:	e7c4      	b.n	8010cf0 <__ieee754_rem_pio2+0x80>
 8010d66:	a386      	add	r3, pc, #536	; (adr r3, 8010f80 <__ieee754_rem_pio2+0x310>)
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	f7ef fa96 	bl	800029c <__adddf3>
 8010d70:	a385      	add	r3, pc, #532	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x318>)
 8010d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d76:	4604      	mov	r4, r0
 8010d78:	460d      	mov	r5, r1
 8010d7a:	f7ef fa8f 	bl	800029c <__adddf3>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	460b      	mov	r3, r1
 8010d82:	e9ca 2300 	strd	r2, r3, [sl]
 8010d86:	4620      	mov	r0, r4
 8010d88:	4629      	mov	r1, r5
 8010d8a:	f7ef fa85 	bl	8000298 <__aeabi_dsub>
 8010d8e:	a37e      	add	r3, pc, #504	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x318>)
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	e7e0      	b.n	8010d58 <__ieee754_rem_pio2+0xe8>
 8010d96:	4b87      	ldr	r3, [pc, #540]	; (8010fb4 <__ieee754_rem_pio2+0x344>)
 8010d98:	4598      	cmp	r8, r3
 8010d9a:	f300 80d9 	bgt.w	8010f50 <__ieee754_rem_pio2+0x2e0>
 8010d9e:	f7ff fe3b 	bl	8010a18 <fabs>
 8010da2:	ec55 4b10 	vmov	r4, r5, d0
 8010da6:	ee10 0a10 	vmov	r0, s0
 8010daa:	a379      	add	r3, pc, #484	; (adr r3, 8010f90 <__ieee754_rem_pio2+0x320>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	4629      	mov	r1, r5
 8010db2:	f7ef fc29 	bl	8000608 <__aeabi_dmul>
 8010db6:	4b80      	ldr	r3, [pc, #512]	; (8010fb8 <__ieee754_rem_pio2+0x348>)
 8010db8:	2200      	movs	r2, #0
 8010dba:	f7ef fa6f 	bl	800029c <__adddf3>
 8010dbe:	f7ef fed3 	bl	8000b68 <__aeabi_d2iz>
 8010dc2:	4683      	mov	fp, r0
 8010dc4:	f7ef fbb6 	bl	8000534 <__aeabi_i2d>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	460b      	mov	r3, r1
 8010dcc:	ec43 2b18 	vmov	d8, r2, r3
 8010dd0:	a367      	add	r3, pc, #412	; (adr r3, 8010f70 <__ieee754_rem_pio2+0x300>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fc17 	bl	8000608 <__aeabi_dmul>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	4620      	mov	r0, r4
 8010de0:	4629      	mov	r1, r5
 8010de2:	f7ef fa59 	bl	8000298 <__aeabi_dsub>
 8010de6:	a364      	add	r3, pc, #400	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x308>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	4606      	mov	r6, r0
 8010dee:	460f      	mov	r7, r1
 8010df0:	ec51 0b18 	vmov	r0, r1, d8
 8010df4:	f7ef fc08 	bl	8000608 <__aeabi_dmul>
 8010df8:	f1bb 0f1f 	cmp.w	fp, #31
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	460d      	mov	r5, r1
 8010e00:	dc0d      	bgt.n	8010e1e <__ieee754_rem_pio2+0x1ae>
 8010e02:	4b6e      	ldr	r3, [pc, #440]	; (8010fbc <__ieee754_rem_pio2+0x34c>)
 8010e04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0c:	4543      	cmp	r3, r8
 8010e0e:	d006      	beq.n	8010e1e <__ieee754_rem_pio2+0x1ae>
 8010e10:	4622      	mov	r2, r4
 8010e12:	462b      	mov	r3, r5
 8010e14:	4630      	mov	r0, r6
 8010e16:	4639      	mov	r1, r7
 8010e18:	f7ef fa3e 	bl	8000298 <__aeabi_dsub>
 8010e1c:	e00f      	b.n	8010e3e <__ieee754_rem_pio2+0x1ce>
 8010e1e:	462b      	mov	r3, r5
 8010e20:	4622      	mov	r2, r4
 8010e22:	4630      	mov	r0, r6
 8010e24:	4639      	mov	r1, r7
 8010e26:	f7ef fa37 	bl	8000298 <__aeabi_dsub>
 8010e2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010e2e:	9303      	str	r3, [sp, #12]
 8010e30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010e38:	f1b8 0f10 	cmp.w	r8, #16
 8010e3c:	dc02      	bgt.n	8010e44 <__ieee754_rem_pio2+0x1d4>
 8010e3e:	e9ca 0100 	strd	r0, r1, [sl]
 8010e42:	e039      	b.n	8010eb8 <__ieee754_rem_pio2+0x248>
 8010e44:	a34e      	add	r3, pc, #312	; (adr r3, 8010f80 <__ieee754_rem_pio2+0x310>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	ec51 0b18 	vmov	r0, r1, d8
 8010e4e:	f7ef fbdb 	bl	8000608 <__aeabi_dmul>
 8010e52:	4604      	mov	r4, r0
 8010e54:	460d      	mov	r5, r1
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	f7ef fa1b 	bl	8000298 <__aeabi_dsub>
 8010e62:	4602      	mov	r2, r0
 8010e64:	460b      	mov	r3, r1
 8010e66:	4680      	mov	r8, r0
 8010e68:	4689      	mov	r9, r1
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	f7ef fa13 	bl	8000298 <__aeabi_dsub>
 8010e72:	4622      	mov	r2, r4
 8010e74:	462b      	mov	r3, r5
 8010e76:	f7ef fa0f 	bl	8000298 <__aeabi_dsub>
 8010e7a:	a343      	add	r3, pc, #268	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x318>)
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	4604      	mov	r4, r0
 8010e82:	460d      	mov	r5, r1
 8010e84:	ec51 0b18 	vmov	r0, r1, d8
 8010e88:	f7ef fbbe 	bl	8000608 <__aeabi_dmul>
 8010e8c:	4622      	mov	r2, r4
 8010e8e:	462b      	mov	r3, r5
 8010e90:	f7ef fa02 	bl	8000298 <__aeabi_dsub>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	4604      	mov	r4, r0
 8010e9a:	460d      	mov	r5, r1
 8010e9c:	4640      	mov	r0, r8
 8010e9e:	4649      	mov	r1, r9
 8010ea0:	f7ef f9fa 	bl	8000298 <__aeabi_dsub>
 8010ea4:	9a03      	ldr	r2, [sp, #12]
 8010ea6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	2b31      	cmp	r3, #49	; 0x31
 8010eae:	dc24      	bgt.n	8010efa <__ieee754_rem_pio2+0x28a>
 8010eb0:	e9ca 0100 	strd	r0, r1, [sl]
 8010eb4:	4646      	mov	r6, r8
 8010eb6:	464f      	mov	r7, r9
 8010eb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	4642      	mov	r2, r8
 8010ec0:	464b      	mov	r3, r9
 8010ec2:	4639      	mov	r1, r7
 8010ec4:	f7ef f9e8 	bl	8000298 <__aeabi_dsub>
 8010ec8:	462b      	mov	r3, r5
 8010eca:	4622      	mov	r2, r4
 8010ecc:	f7ef f9e4 	bl	8000298 <__aeabi_dsub>
 8010ed0:	9b02      	ldr	r3, [sp, #8]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010ed8:	f6bf af0a 	bge.w	8010cf0 <__ieee754_rem_pio2+0x80>
 8010edc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010ee0:	f8ca 3004 	str.w	r3, [sl, #4]
 8010ee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ee8:	f8ca 8000 	str.w	r8, [sl]
 8010eec:	f8ca 0008 	str.w	r0, [sl, #8]
 8010ef0:	f8ca 300c 	str.w	r3, [sl, #12]
 8010ef4:	f1cb 0b00 	rsb	fp, fp, #0
 8010ef8:	e6fa      	b.n	8010cf0 <__ieee754_rem_pio2+0x80>
 8010efa:	a327      	add	r3, pc, #156	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x328>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	ec51 0b18 	vmov	r0, r1, d8
 8010f04:	f7ef fb80 	bl	8000608 <__aeabi_dmul>
 8010f08:	4604      	mov	r4, r0
 8010f0a:	460d      	mov	r5, r1
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	4640      	mov	r0, r8
 8010f12:	4649      	mov	r1, r9
 8010f14:	f7ef f9c0 	bl	8000298 <__aeabi_dsub>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	460f      	mov	r7, r1
 8010f20:	4640      	mov	r0, r8
 8010f22:	4649      	mov	r1, r9
 8010f24:	f7ef f9b8 	bl	8000298 <__aeabi_dsub>
 8010f28:	4622      	mov	r2, r4
 8010f2a:	462b      	mov	r3, r5
 8010f2c:	f7ef f9b4 	bl	8000298 <__aeabi_dsub>
 8010f30:	a31b      	add	r3, pc, #108	; (adr r3, 8010fa0 <__ieee754_rem_pio2+0x330>)
 8010f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f36:	4604      	mov	r4, r0
 8010f38:	460d      	mov	r5, r1
 8010f3a:	ec51 0b18 	vmov	r0, r1, d8
 8010f3e:	f7ef fb63 	bl	8000608 <__aeabi_dmul>
 8010f42:	4622      	mov	r2, r4
 8010f44:	462b      	mov	r3, r5
 8010f46:	f7ef f9a7 	bl	8000298 <__aeabi_dsub>
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	460d      	mov	r5, r1
 8010f4e:	e75f      	b.n	8010e10 <__ieee754_rem_pio2+0x1a0>
 8010f50:	4b1b      	ldr	r3, [pc, #108]	; (8010fc0 <__ieee754_rem_pio2+0x350>)
 8010f52:	4598      	cmp	r8, r3
 8010f54:	dd36      	ble.n	8010fc4 <__ieee754_rem_pio2+0x354>
 8010f56:	ee10 2a10 	vmov	r2, s0
 8010f5a:	462b      	mov	r3, r5
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	4629      	mov	r1, r5
 8010f60:	f7ef f99a 	bl	8000298 <__aeabi_dsub>
 8010f64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f68:	e9ca 0100 	strd	r0, r1, [sl]
 8010f6c:	e694      	b.n	8010c98 <__ieee754_rem_pio2+0x28>
 8010f6e:	bf00      	nop
 8010f70:	54400000 	.word	0x54400000
 8010f74:	3ff921fb 	.word	0x3ff921fb
 8010f78:	1a626331 	.word	0x1a626331
 8010f7c:	3dd0b461 	.word	0x3dd0b461
 8010f80:	1a600000 	.word	0x1a600000
 8010f84:	3dd0b461 	.word	0x3dd0b461
 8010f88:	2e037073 	.word	0x2e037073
 8010f8c:	3ba3198a 	.word	0x3ba3198a
 8010f90:	6dc9c883 	.word	0x6dc9c883
 8010f94:	3fe45f30 	.word	0x3fe45f30
 8010f98:	2e000000 	.word	0x2e000000
 8010f9c:	3ba3198a 	.word	0x3ba3198a
 8010fa0:	252049c1 	.word	0x252049c1
 8010fa4:	397b839a 	.word	0x397b839a
 8010fa8:	3fe921fb 	.word	0x3fe921fb
 8010fac:	4002d97b 	.word	0x4002d97b
 8010fb0:	3ff921fb 	.word	0x3ff921fb
 8010fb4:	413921fb 	.word	0x413921fb
 8010fb8:	3fe00000 	.word	0x3fe00000
 8010fbc:	08013230 	.word	0x08013230
 8010fc0:	7fefffff 	.word	0x7fefffff
 8010fc4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010fc8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010fcc:	ee10 0a10 	vmov	r0, s0
 8010fd0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8010fd4:	ee10 6a10 	vmov	r6, s0
 8010fd8:	460f      	mov	r7, r1
 8010fda:	f7ef fdc5 	bl	8000b68 <__aeabi_d2iz>
 8010fde:	f7ef faa9 	bl	8000534 <__aeabi_i2d>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	4639      	mov	r1, r7
 8010fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010fee:	f7ef f953 	bl	8000298 <__aeabi_dsub>
 8010ff2:	4b23      	ldr	r3, [pc, #140]	; (8011080 <__ieee754_rem_pio2+0x410>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f7ef fb07 	bl	8000608 <__aeabi_dmul>
 8010ffa:	460f      	mov	r7, r1
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	f7ef fdb3 	bl	8000b68 <__aeabi_d2iz>
 8011002:	f7ef fa97 	bl	8000534 <__aeabi_i2d>
 8011006:	4602      	mov	r2, r0
 8011008:	460b      	mov	r3, r1
 801100a:	4630      	mov	r0, r6
 801100c:	4639      	mov	r1, r7
 801100e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011012:	f7ef f941 	bl	8000298 <__aeabi_dsub>
 8011016:	4b1a      	ldr	r3, [pc, #104]	; (8011080 <__ieee754_rem_pio2+0x410>)
 8011018:	2200      	movs	r2, #0
 801101a:	f7ef faf5 	bl	8000608 <__aeabi_dmul>
 801101e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011022:	ad04      	add	r5, sp, #16
 8011024:	f04f 0803 	mov.w	r8, #3
 8011028:	46a9      	mov	r9, r5
 801102a:	2600      	movs	r6, #0
 801102c:	2700      	movs	r7, #0
 801102e:	4632      	mov	r2, r6
 8011030:	463b      	mov	r3, r7
 8011032:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011036:	46c3      	mov	fp, r8
 8011038:	3d08      	subs	r5, #8
 801103a:	f108 38ff 	add.w	r8, r8, #4294967295
 801103e:	f7ef fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8011042:	2800      	cmp	r0, #0
 8011044:	d1f3      	bne.n	801102e <__ieee754_rem_pio2+0x3be>
 8011046:	4b0f      	ldr	r3, [pc, #60]	; (8011084 <__ieee754_rem_pio2+0x414>)
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	2302      	movs	r3, #2
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	4622      	mov	r2, r4
 8011050:	465b      	mov	r3, fp
 8011052:	4651      	mov	r1, sl
 8011054:	4648      	mov	r0, r9
 8011056:	f000 fb4f 	bl	80116f8 <__kernel_rem_pio2>
 801105a:	9b02      	ldr	r3, [sp, #8]
 801105c:	2b00      	cmp	r3, #0
 801105e:	4683      	mov	fp, r0
 8011060:	f6bf ae46 	bge.w	8010cf0 <__ieee754_rem_pio2+0x80>
 8011064:	e9da 2100 	ldrd	r2, r1, [sl]
 8011068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801106c:	e9ca 2300 	strd	r2, r3, [sl]
 8011070:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011078:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801107c:	e73a      	b.n	8010ef4 <__ieee754_rem_pio2+0x284>
 801107e:	bf00      	nop
 8011080:	41700000 	.word	0x41700000
 8011084:	080132b0 	.word	0x080132b0

08011088 <__ieee754_sqrt>:
 8011088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108c:	ec55 4b10 	vmov	r4, r5, d0
 8011090:	4e55      	ldr	r6, [pc, #340]	; (80111e8 <__ieee754_sqrt+0x160>)
 8011092:	43ae      	bics	r6, r5
 8011094:	ee10 0a10 	vmov	r0, s0
 8011098:	ee10 3a10 	vmov	r3, s0
 801109c:	462a      	mov	r2, r5
 801109e:	4629      	mov	r1, r5
 80110a0:	d110      	bne.n	80110c4 <__ieee754_sqrt+0x3c>
 80110a2:	ee10 2a10 	vmov	r2, s0
 80110a6:	462b      	mov	r3, r5
 80110a8:	f7ef faae 	bl	8000608 <__aeabi_dmul>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4620      	mov	r0, r4
 80110b2:	4629      	mov	r1, r5
 80110b4:	f7ef f8f2 	bl	800029c <__adddf3>
 80110b8:	4604      	mov	r4, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	ec45 4b10 	vmov	d0, r4, r5
 80110c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c4:	2d00      	cmp	r5, #0
 80110c6:	dc10      	bgt.n	80110ea <__ieee754_sqrt+0x62>
 80110c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110cc:	4330      	orrs	r0, r6
 80110ce:	d0f5      	beq.n	80110bc <__ieee754_sqrt+0x34>
 80110d0:	b15d      	cbz	r5, 80110ea <__ieee754_sqrt+0x62>
 80110d2:	ee10 2a10 	vmov	r2, s0
 80110d6:	462b      	mov	r3, r5
 80110d8:	ee10 0a10 	vmov	r0, s0
 80110dc:	f7ef f8dc 	bl	8000298 <__aeabi_dsub>
 80110e0:	4602      	mov	r2, r0
 80110e2:	460b      	mov	r3, r1
 80110e4:	f7ef fbba 	bl	800085c <__aeabi_ddiv>
 80110e8:	e7e6      	b.n	80110b8 <__ieee754_sqrt+0x30>
 80110ea:	1512      	asrs	r2, r2, #20
 80110ec:	d074      	beq.n	80111d8 <__ieee754_sqrt+0x150>
 80110ee:	07d4      	lsls	r4, r2, #31
 80110f0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80110f4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80110f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80110fc:	bf5e      	ittt	pl
 80110fe:	0fda      	lsrpl	r2, r3, #31
 8011100:	005b      	lslpl	r3, r3, #1
 8011102:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011106:	2400      	movs	r4, #0
 8011108:	0fda      	lsrs	r2, r3, #31
 801110a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801110e:	107f      	asrs	r7, r7, #1
 8011110:	005b      	lsls	r3, r3, #1
 8011112:	2516      	movs	r5, #22
 8011114:	4620      	mov	r0, r4
 8011116:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801111a:	1886      	adds	r6, r0, r2
 801111c:	428e      	cmp	r6, r1
 801111e:	bfde      	ittt	le
 8011120:	1b89      	suble	r1, r1, r6
 8011122:	18b0      	addle	r0, r6, r2
 8011124:	18a4      	addle	r4, r4, r2
 8011126:	0049      	lsls	r1, r1, #1
 8011128:	3d01      	subs	r5, #1
 801112a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801112e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011132:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011136:	d1f0      	bne.n	801111a <__ieee754_sqrt+0x92>
 8011138:	462a      	mov	r2, r5
 801113a:	f04f 0e20 	mov.w	lr, #32
 801113e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011142:	4281      	cmp	r1, r0
 8011144:	eb06 0c05 	add.w	ip, r6, r5
 8011148:	dc02      	bgt.n	8011150 <__ieee754_sqrt+0xc8>
 801114a:	d113      	bne.n	8011174 <__ieee754_sqrt+0xec>
 801114c:	459c      	cmp	ip, r3
 801114e:	d811      	bhi.n	8011174 <__ieee754_sqrt+0xec>
 8011150:	f1bc 0f00 	cmp.w	ip, #0
 8011154:	eb0c 0506 	add.w	r5, ip, r6
 8011158:	da43      	bge.n	80111e2 <__ieee754_sqrt+0x15a>
 801115a:	2d00      	cmp	r5, #0
 801115c:	db41      	blt.n	80111e2 <__ieee754_sqrt+0x15a>
 801115e:	f100 0801 	add.w	r8, r0, #1
 8011162:	1a09      	subs	r1, r1, r0
 8011164:	459c      	cmp	ip, r3
 8011166:	bf88      	it	hi
 8011168:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801116c:	eba3 030c 	sub.w	r3, r3, ip
 8011170:	4432      	add	r2, r6
 8011172:	4640      	mov	r0, r8
 8011174:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011178:	f1be 0e01 	subs.w	lr, lr, #1
 801117c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011180:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011184:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011188:	d1db      	bne.n	8011142 <__ieee754_sqrt+0xba>
 801118a:	430b      	orrs	r3, r1
 801118c:	d006      	beq.n	801119c <__ieee754_sqrt+0x114>
 801118e:	1c50      	adds	r0, r2, #1
 8011190:	bf13      	iteet	ne
 8011192:	3201      	addne	r2, #1
 8011194:	3401      	addeq	r4, #1
 8011196:	4672      	moveq	r2, lr
 8011198:	f022 0201 	bicne.w	r2, r2, #1
 801119c:	1063      	asrs	r3, r4, #1
 801119e:	0852      	lsrs	r2, r2, #1
 80111a0:	07e1      	lsls	r1, r4, #31
 80111a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80111a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80111aa:	bf48      	it	mi
 80111ac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80111b0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80111b4:	4614      	mov	r4, r2
 80111b6:	e781      	b.n	80110bc <__ieee754_sqrt+0x34>
 80111b8:	0ad9      	lsrs	r1, r3, #11
 80111ba:	3815      	subs	r0, #21
 80111bc:	055b      	lsls	r3, r3, #21
 80111be:	2900      	cmp	r1, #0
 80111c0:	d0fa      	beq.n	80111b8 <__ieee754_sqrt+0x130>
 80111c2:	02cd      	lsls	r5, r1, #11
 80111c4:	d50a      	bpl.n	80111dc <__ieee754_sqrt+0x154>
 80111c6:	f1c2 0420 	rsb	r4, r2, #32
 80111ca:	fa23 f404 	lsr.w	r4, r3, r4
 80111ce:	1e55      	subs	r5, r2, #1
 80111d0:	4093      	lsls	r3, r2
 80111d2:	4321      	orrs	r1, r4
 80111d4:	1b42      	subs	r2, r0, r5
 80111d6:	e78a      	b.n	80110ee <__ieee754_sqrt+0x66>
 80111d8:	4610      	mov	r0, r2
 80111da:	e7f0      	b.n	80111be <__ieee754_sqrt+0x136>
 80111dc:	0049      	lsls	r1, r1, #1
 80111de:	3201      	adds	r2, #1
 80111e0:	e7ef      	b.n	80111c2 <__ieee754_sqrt+0x13a>
 80111e2:	4680      	mov	r8, r0
 80111e4:	e7bd      	b.n	8011162 <__ieee754_sqrt+0xda>
 80111e6:	bf00      	nop
 80111e8:	7ff00000 	.word	0x7ff00000

080111ec <__ieee754_fmodf>:
 80111ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ee:	ee10 5a90 	vmov	r5, s1
 80111f2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80111f6:	d009      	beq.n	801120c <__ieee754_fmodf+0x20>
 80111f8:	ee10 2a10 	vmov	r2, s0
 80111fc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011200:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011204:	da02      	bge.n	801120c <__ieee754_fmodf+0x20>
 8011206:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801120a:	dd04      	ble.n	8011216 <__ieee754_fmodf+0x2a>
 801120c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011210:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011216:	42a3      	cmp	r3, r4
 8011218:	dbfc      	blt.n	8011214 <__ieee754_fmodf+0x28>
 801121a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801121e:	d105      	bne.n	801122c <__ieee754_fmodf+0x40>
 8011220:	4b32      	ldr	r3, [pc, #200]	; (80112ec <__ieee754_fmodf+0x100>)
 8011222:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8011226:	ed93 0a00 	vldr	s0, [r3]
 801122a:	e7f3      	b.n	8011214 <__ieee754_fmodf+0x28>
 801122c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011230:	d13f      	bne.n	80112b2 <__ieee754_fmodf+0xc6>
 8011232:	0219      	lsls	r1, r3, #8
 8011234:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011238:	2900      	cmp	r1, #0
 801123a:	dc37      	bgt.n	80112ac <__ieee754_fmodf+0xc0>
 801123c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8011240:	d13d      	bne.n	80112be <__ieee754_fmodf+0xd2>
 8011242:	0227      	lsls	r7, r4, #8
 8011244:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011248:	2f00      	cmp	r7, #0
 801124a:	da35      	bge.n	80112b8 <__ieee754_fmodf+0xcc>
 801124c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011250:	bfbb      	ittet	lt
 8011252:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011256:	1a12      	sublt	r2, r2, r0
 8011258:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801125c:	4093      	lsllt	r3, r2
 801125e:	bfa8      	it	ge
 8011260:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8011264:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011268:	bfb5      	itete	lt
 801126a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801126e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8011272:	1a52      	sublt	r2, r2, r1
 8011274:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8011278:	bfb8      	it	lt
 801127a:	4094      	lsllt	r4, r2
 801127c:	1a40      	subs	r0, r0, r1
 801127e:	1b1a      	subs	r2, r3, r4
 8011280:	bb00      	cbnz	r0, 80112c4 <__ieee754_fmodf+0xd8>
 8011282:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8011286:	bf38      	it	cc
 8011288:	4613      	movcc	r3, r2
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0c8      	beq.n	8011220 <__ieee754_fmodf+0x34>
 801128e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011292:	db1f      	blt.n	80112d4 <__ieee754_fmodf+0xe8>
 8011294:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011298:	db1f      	blt.n	80112da <__ieee754_fmodf+0xee>
 801129a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801129e:	317f      	adds	r1, #127	; 0x7f
 80112a0:	4333      	orrs	r3, r6
 80112a2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80112a6:	ee00 3a10 	vmov	s0, r3
 80112aa:	e7b3      	b.n	8011214 <__ieee754_fmodf+0x28>
 80112ac:	3801      	subs	r0, #1
 80112ae:	0049      	lsls	r1, r1, #1
 80112b0:	e7c2      	b.n	8011238 <__ieee754_fmodf+0x4c>
 80112b2:	15d8      	asrs	r0, r3, #23
 80112b4:	387f      	subs	r0, #127	; 0x7f
 80112b6:	e7c1      	b.n	801123c <__ieee754_fmodf+0x50>
 80112b8:	3901      	subs	r1, #1
 80112ba:	007f      	lsls	r7, r7, #1
 80112bc:	e7c4      	b.n	8011248 <__ieee754_fmodf+0x5c>
 80112be:	15e1      	asrs	r1, r4, #23
 80112c0:	397f      	subs	r1, #127	; 0x7f
 80112c2:	e7c3      	b.n	801124c <__ieee754_fmodf+0x60>
 80112c4:	2a00      	cmp	r2, #0
 80112c6:	da02      	bge.n	80112ce <__ieee754_fmodf+0xe2>
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	3801      	subs	r0, #1
 80112cc:	e7d7      	b.n	801127e <__ieee754_fmodf+0x92>
 80112ce:	d0a7      	beq.n	8011220 <__ieee754_fmodf+0x34>
 80112d0:	0053      	lsls	r3, r2, #1
 80112d2:	e7fa      	b.n	80112ca <__ieee754_fmodf+0xde>
 80112d4:	005b      	lsls	r3, r3, #1
 80112d6:	3901      	subs	r1, #1
 80112d8:	e7d9      	b.n	801128e <__ieee754_fmodf+0xa2>
 80112da:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80112de:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80112e2:	3182      	adds	r1, #130	; 0x82
 80112e4:	410b      	asrs	r3, r1
 80112e6:	4333      	orrs	r3, r6
 80112e8:	e7dd      	b.n	80112a6 <__ieee754_fmodf+0xba>
 80112ea:	bf00      	nop
 80112ec:	080133b8 	.word	0x080133b8

080112f0 <__ieee754_rem_pio2f>:
 80112f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f2:	ee10 6a10 	vmov	r6, s0
 80112f6:	4b8e      	ldr	r3, [pc, #568]	; (8011530 <__ieee754_rem_pio2f+0x240>)
 80112f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80112fc:	429d      	cmp	r5, r3
 80112fe:	b087      	sub	sp, #28
 8011300:	eef0 7a40 	vmov.f32	s15, s0
 8011304:	4604      	mov	r4, r0
 8011306:	dc05      	bgt.n	8011314 <__ieee754_rem_pio2f+0x24>
 8011308:	2300      	movs	r3, #0
 801130a:	ed80 0a00 	vstr	s0, [r0]
 801130e:	6043      	str	r3, [r0, #4]
 8011310:	2000      	movs	r0, #0
 8011312:	e01a      	b.n	801134a <__ieee754_rem_pio2f+0x5a>
 8011314:	4b87      	ldr	r3, [pc, #540]	; (8011534 <__ieee754_rem_pio2f+0x244>)
 8011316:	429d      	cmp	r5, r3
 8011318:	dc46      	bgt.n	80113a8 <__ieee754_rem_pio2f+0xb8>
 801131a:	2e00      	cmp	r6, #0
 801131c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8011538 <__ieee754_rem_pio2f+0x248>
 8011320:	4b86      	ldr	r3, [pc, #536]	; (801153c <__ieee754_rem_pio2f+0x24c>)
 8011322:	f025 050f 	bic.w	r5, r5, #15
 8011326:	dd1f      	ble.n	8011368 <__ieee754_rem_pio2f+0x78>
 8011328:	429d      	cmp	r5, r3
 801132a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801132e:	d00e      	beq.n	801134e <__ieee754_rem_pio2f+0x5e>
 8011330:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8011540 <__ieee754_rem_pio2f+0x250>
 8011334:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011338:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801133c:	ed80 0a00 	vstr	s0, [r0]
 8011340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011344:	2001      	movs	r0, #1
 8011346:	edc4 7a01 	vstr	s15, [r4, #4]
 801134a:	b007      	add	sp, #28
 801134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801134e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8011544 <__ieee754_rem_pio2f+0x254>
 8011352:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8011548 <__ieee754_rem_pio2f+0x258>
 8011356:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801135a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801135e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011362:	edc0 6a00 	vstr	s13, [r0]
 8011366:	e7eb      	b.n	8011340 <__ieee754_rem_pio2f+0x50>
 8011368:	429d      	cmp	r5, r3
 801136a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801136e:	d00e      	beq.n	801138e <__ieee754_rem_pio2f+0x9e>
 8011370:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011540 <__ieee754_rem_pio2f+0x250>
 8011374:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011378:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801137c:	ed80 0a00 	vstr	s0, [r0]
 8011380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	edc4 7a01 	vstr	s15, [r4, #4]
 801138c:	e7dd      	b.n	801134a <__ieee754_rem_pio2f+0x5a>
 801138e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8011544 <__ieee754_rem_pio2f+0x254>
 8011392:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011548 <__ieee754_rem_pio2f+0x258>
 8011396:	ee77 7a80 	vadd.f32	s15, s15, s0
 801139a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801139e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80113a2:	edc0 6a00 	vstr	s13, [r0]
 80113a6:	e7eb      	b.n	8011380 <__ieee754_rem_pio2f+0x90>
 80113a8:	4b68      	ldr	r3, [pc, #416]	; (801154c <__ieee754_rem_pio2f+0x25c>)
 80113aa:	429d      	cmp	r5, r3
 80113ac:	dc72      	bgt.n	8011494 <__ieee754_rem_pio2f+0x1a4>
 80113ae:	f001 fbe1 	bl	8012b74 <fabsf>
 80113b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011550 <__ieee754_rem_pio2f+0x260>
 80113b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80113ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80113be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80113c6:	ee17 0a90 	vmov	r0, s15
 80113ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011538 <__ieee754_rem_pio2f+0x248>
 80113ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80113d2:	281f      	cmp	r0, #31
 80113d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011540 <__ieee754_rem_pio2f+0x250>
 80113d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113dc:	eeb1 6a47 	vneg.f32	s12, s14
 80113e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80113e4:	ee16 2a90 	vmov	r2, s13
 80113e8:	dc1c      	bgt.n	8011424 <__ieee754_rem_pio2f+0x134>
 80113ea:	495a      	ldr	r1, [pc, #360]	; (8011554 <__ieee754_rem_pio2f+0x264>)
 80113ec:	1e47      	subs	r7, r0, #1
 80113ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80113f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80113f6:	428b      	cmp	r3, r1
 80113f8:	d014      	beq.n	8011424 <__ieee754_rem_pio2f+0x134>
 80113fa:	6022      	str	r2, [r4, #0]
 80113fc:	ed94 7a00 	vldr	s14, [r4]
 8011400:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011404:	2e00      	cmp	r6, #0
 8011406:	ee30 0a67 	vsub.f32	s0, s0, s15
 801140a:	ed84 0a01 	vstr	s0, [r4, #4]
 801140e:	da9c      	bge.n	801134a <__ieee754_rem_pio2f+0x5a>
 8011410:	eeb1 7a47 	vneg.f32	s14, s14
 8011414:	eeb1 0a40 	vneg.f32	s0, s0
 8011418:	ed84 7a00 	vstr	s14, [r4]
 801141c:	ed84 0a01 	vstr	s0, [r4, #4]
 8011420:	4240      	negs	r0, r0
 8011422:	e792      	b.n	801134a <__ieee754_rem_pio2f+0x5a>
 8011424:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011428:	15eb      	asrs	r3, r5, #23
 801142a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801142e:	2d08      	cmp	r5, #8
 8011430:	dde3      	ble.n	80113fa <__ieee754_rem_pio2f+0x10a>
 8011432:	eddf 7a44 	vldr	s15, [pc, #272]	; 8011544 <__ieee754_rem_pio2f+0x254>
 8011436:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011548 <__ieee754_rem_pio2f+0x258>
 801143a:	eef0 6a40 	vmov.f32	s13, s0
 801143e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011442:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011446:	eea6 0a27 	vfma.f32	s0, s12, s15
 801144a:	eef0 7a40 	vmov.f32	s15, s0
 801144e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011452:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011456:	ee15 2a90 	vmov	r2, s11
 801145a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801145e:	1a5b      	subs	r3, r3, r1
 8011460:	2b19      	cmp	r3, #25
 8011462:	dc04      	bgt.n	801146e <__ieee754_rem_pio2f+0x17e>
 8011464:	edc4 5a00 	vstr	s11, [r4]
 8011468:	eeb0 0a66 	vmov.f32	s0, s13
 801146c:	e7c6      	b.n	80113fc <__ieee754_rem_pio2f+0x10c>
 801146e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011558 <__ieee754_rem_pio2f+0x268>
 8011472:	eeb0 0a66 	vmov.f32	s0, s13
 8011476:	eea6 0a25 	vfma.f32	s0, s12, s11
 801147a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801147e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801155c <__ieee754_rem_pio2f+0x26c>
 8011482:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011486:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801148a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801148e:	ed84 7a00 	vstr	s14, [r4]
 8011492:	e7b3      	b.n	80113fc <__ieee754_rem_pio2f+0x10c>
 8011494:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011498:	db06      	blt.n	80114a8 <__ieee754_rem_pio2f+0x1b8>
 801149a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801149e:	edc0 7a01 	vstr	s15, [r0, #4]
 80114a2:	edc0 7a00 	vstr	s15, [r0]
 80114a6:	e733      	b.n	8011310 <__ieee754_rem_pio2f+0x20>
 80114a8:	15ea      	asrs	r2, r5, #23
 80114aa:	3a86      	subs	r2, #134	; 0x86
 80114ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80114b0:	ee07 3a90 	vmov	s15, r3
 80114b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80114b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011560 <__ieee754_rem_pio2f+0x270>
 80114bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80114c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114c4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80114c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80114d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80114d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114d8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80114dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80114e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e8:	edcd 7a05 	vstr	s15, [sp, #20]
 80114ec:	d11e      	bne.n	801152c <__ieee754_rem_pio2f+0x23c>
 80114ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f6:	bf14      	ite	ne
 80114f8:	2302      	movne	r3, #2
 80114fa:	2301      	moveq	r3, #1
 80114fc:	4919      	ldr	r1, [pc, #100]	; (8011564 <__ieee754_rem_pio2f+0x274>)
 80114fe:	9101      	str	r1, [sp, #4]
 8011500:	2102      	movs	r1, #2
 8011502:	9100      	str	r1, [sp, #0]
 8011504:	a803      	add	r0, sp, #12
 8011506:	4621      	mov	r1, r4
 8011508:	f000 ff70 	bl	80123ec <__kernel_rem_pio2f>
 801150c:	2e00      	cmp	r6, #0
 801150e:	f6bf af1c 	bge.w	801134a <__ieee754_rem_pio2f+0x5a>
 8011512:	edd4 7a00 	vldr	s15, [r4]
 8011516:	eef1 7a67 	vneg.f32	s15, s15
 801151a:	edc4 7a00 	vstr	s15, [r4]
 801151e:	edd4 7a01 	vldr	s15, [r4, #4]
 8011522:	eef1 7a67 	vneg.f32	s15, s15
 8011526:	edc4 7a01 	vstr	s15, [r4, #4]
 801152a:	e779      	b.n	8011420 <__ieee754_rem_pio2f+0x130>
 801152c:	2303      	movs	r3, #3
 801152e:	e7e5      	b.n	80114fc <__ieee754_rem_pio2f+0x20c>
 8011530:	3f490fd8 	.word	0x3f490fd8
 8011534:	4016cbe3 	.word	0x4016cbe3
 8011538:	3fc90f80 	.word	0x3fc90f80
 801153c:	3fc90fd0 	.word	0x3fc90fd0
 8011540:	37354443 	.word	0x37354443
 8011544:	37354400 	.word	0x37354400
 8011548:	2e85a308 	.word	0x2e85a308
 801154c:	43490f80 	.word	0x43490f80
 8011550:	3f22f984 	.word	0x3f22f984
 8011554:	080133c0 	.word	0x080133c0
 8011558:	2e85a300 	.word	0x2e85a300
 801155c:	248d3132 	.word	0x248d3132
 8011560:	43800000 	.word	0x43800000
 8011564:	08013440 	.word	0x08013440

08011568 <__kernel_cos>:
 8011568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156c:	ec57 6b10 	vmov	r6, r7, d0
 8011570:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011574:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011578:	ed8d 1b00 	vstr	d1, [sp]
 801157c:	da07      	bge.n	801158e <__kernel_cos+0x26>
 801157e:	ee10 0a10 	vmov	r0, s0
 8011582:	4639      	mov	r1, r7
 8011584:	f7ef faf0 	bl	8000b68 <__aeabi_d2iz>
 8011588:	2800      	cmp	r0, #0
 801158a:	f000 8088 	beq.w	801169e <__kernel_cos+0x136>
 801158e:	4632      	mov	r2, r6
 8011590:	463b      	mov	r3, r7
 8011592:	4630      	mov	r0, r6
 8011594:	4639      	mov	r1, r7
 8011596:	f7ef f837 	bl	8000608 <__aeabi_dmul>
 801159a:	4b51      	ldr	r3, [pc, #324]	; (80116e0 <__kernel_cos+0x178>)
 801159c:	2200      	movs	r2, #0
 801159e:	4604      	mov	r4, r0
 80115a0:	460d      	mov	r5, r1
 80115a2:	f7ef f831 	bl	8000608 <__aeabi_dmul>
 80115a6:	a340      	add	r3, pc, #256	; (adr r3, 80116a8 <__kernel_cos+0x140>)
 80115a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ac:	4682      	mov	sl, r0
 80115ae:	468b      	mov	fp, r1
 80115b0:	4620      	mov	r0, r4
 80115b2:	4629      	mov	r1, r5
 80115b4:	f7ef f828 	bl	8000608 <__aeabi_dmul>
 80115b8:	a33d      	add	r3, pc, #244	; (adr r3, 80116b0 <__kernel_cos+0x148>)
 80115ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115be:	f7ee fe6d 	bl	800029c <__adddf3>
 80115c2:	4622      	mov	r2, r4
 80115c4:	462b      	mov	r3, r5
 80115c6:	f7ef f81f 	bl	8000608 <__aeabi_dmul>
 80115ca:	a33b      	add	r3, pc, #236	; (adr r3, 80116b8 <__kernel_cos+0x150>)
 80115cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d0:	f7ee fe62 	bl	8000298 <__aeabi_dsub>
 80115d4:	4622      	mov	r2, r4
 80115d6:	462b      	mov	r3, r5
 80115d8:	f7ef f816 	bl	8000608 <__aeabi_dmul>
 80115dc:	a338      	add	r3, pc, #224	; (adr r3, 80116c0 <__kernel_cos+0x158>)
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	f7ee fe5b 	bl	800029c <__adddf3>
 80115e6:	4622      	mov	r2, r4
 80115e8:	462b      	mov	r3, r5
 80115ea:	f7ef f80d 	bl	8000608 <__aeabi_dmul>
 80115ee:	a336      	add	r3, pc, #216	; (adr r3, 80116c8 <__kernel_cos+0x160>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	f7ee fe50 	bl	8000298 <__aeabi_dsub>
 80115f8:	4622      	mov	r2, r4
 80115fa:	462b      	mov	r3, r5
 80115fc:	f7ef f804 	bl	8000608 <__aeabi_dmul>
 8011600:	a333      	add	r3, pc, #204	; (adr r3, 80116d0 <__kernel_cos+0x168>)
 8011602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011606:	f7ee fe49 	bl	800029c <__adddf3>
 801160a:	4622      	mov	r2, r4
 801160c:	462b      	mov	r3, r5
 801160e:	f7ee fffb 	bl	8000608 <__aeabi_dmul>
 8011612:	4622      	mov	r2, r4
 8011614:	462b      	mov	r3, r5
 8011616:	f7ee fff7 	bl	8000608 <__aeabi_dmul>
 801161a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801161e:	4604      	mov	r4, r0
 8011620:	460d      	mov	r5, r1
 8011622:	4630      	mov	r0, r6
 8011624:	4639      	mov	r1, r7
 8011626:	f7ee ffef 	bl	8000608 <__aeabi_dmul>
 801162a:	460b      	mov	r3, r1
 801162c:	4602      	mov	r2, r0
 801162e:	4629      	mov	r1, r5
 8011630:	4620      	mov	r0, r4
 8011632:	f7ee fe31 	bl	8000298 <__aeabi_dsub>
 8011636:	4b2b      	ldr	r3, [pc, #172]	; (80116e4 <__kernel_cos+0x17c>)
 8011638:	4598      	cmp	r8, r3
 801163a:	4606      	mov	r6, r0
 801163c:	460f      	mov	r7, r1
 801163e:	dc10      	bgt.n	8011662 <__kernel_cos+0xfa>
 8011640:	4602      	mov	r2, r0
 8011642:	460b      	mov	r3, r1
 8011644:	4650      	mov	r0, sl
 8011646:	4659      	mov	r1, fp
 8011648:	f7ee fe26 	bl	8000298 <__aeabi_dsub>
 801164c:	460b      	mov	r3, r1
 801164e:	4926      	ldr	r1, [pc, #152]	; (80116e8 <__kernel_cos+0x180>)
 8011650:	4602      	mov	r2, r0
 8011652:	2000      	movs	r0, #0
 8011654:	f7ee fe20 	bl	8000298 <__aeabi_dsub>
 8011658:	ec41 0b10 	vmov	d0, r0, r1
 801165c:	b003      	add	sp, #12
 801165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011662:	4b22      	ldr	r3, [pc, #136]	; (80116ec <__kernel_cos+0x184>)
 8011664:	4920      	ldr	r1, [pc, #128]	; (80116e8 <__kernel_cos+0x180>)
 8011666:	4598      	cmp	r8, r3
 8011668:	bfcc      	ite	gt
 801166a:	4d21      	ldrgt	r5, [pc, #132]	; (80116f0 <__kernel_cos+0x188>)
 801166c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011670:	2400      	movs	r4, #0
 8011672:	4622      	mov	r2, r4
 8011674:	462b      	mov	r3, r5
 8011676:	2000      	movs	r0, #0
 8011678:	f7ee fe0e 	bl	8000298 <__aeabi_dsub>
 801167c:	4622      	mov	r2, r4
 801167e:	4680      	mov	r8, r0
 8011680:	4689      	mov	r9, r1
 8011682:	462b      	mov	r3, r5
 8011684:	4650      	mov	r0, sl
 8011686:	4659      	mov	r1, fp
 8011688:	f7ee fe06 	bl	8000298 <__aeabi_dsub>
 801168c:	4632      	mov	r2, r6
 801168e:	463b      	mov	r3, r7
 8011690:	f7ee fe02 	bl	8000298 <__aeabi_dsub>
 8011694:	4602      	mov	r2, r0
 8011696:	460b      	mov	r3, r1
 8011698:	4640      	mov	r0, r8
 801169a:	4649      	mov	r1, r9
 801169c:	e7da      	b.n	8011654 <__kernel_cos+0xec>
 801169e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80116d8 <__kernel_cos+0x170>
 80116a2:	e7db      	b.n	801165c <__kernel_cos+0xf4>
 80116a4:	f3af 8000 	nop.w
 80116a8:	be8838d4 	.word	0xbe8838d4
 80116ac:	bda8fae9 	.word	0xbda8fae9
 80116b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80116b4:	3e21ee9e 	.word	0x3e21ee9e
 80116b8:	809c52ad 	.word	0x809c52ad
 80116bc:	3e927e4f 	.word	0x3e927e4f
 80116c0:	19cb1590 	.word	0x19cb1590
 80116c4:	3efa01a0 	.word	0x3efa01a0
 80116c8:	16c15177 	.word	0x16c15177
 80116cc:	3f56c16c 	.word	0x3f56c16c
 80116d0:	5555554c 	.word	0x5555554c
 80116d4:	3fa55555 	.word	0x3fa55555
 80116d8:	00000000 	.word	0x00000000
 80116dc:	3ff00000 	.word	0x3ff00000
 80116e0:	3fe00000 	.word	0x3fe00000
 80116e4:	3fd33332 	.word	0x3fd33332
 80116e8:	3ff00000 	.word	0x3ff00000
 80116ec:	3fe90000 	.word	0x3fe90000
 80116f0:	3fd20000 	.word	0x3fd20000
 80116f4:	00000000 	.word	0x00000000

080116f8 <__kernel_rem_pio2>:
 80116f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fc:	ed2d 8b02 	vpush	{d8}
 8011700:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011704:	f112 0f14 	cmn.w	r2, #20
 8011708:	9308      	str	r3, [sp, #32]
 801170a:	9101      	str	r1, [sp, #4]
 801170c:	4bc4      	ldr	r3, [pc, #784]	; (8011a20 <__kernel_rem_pio2+0x328>)
 801170e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011710:	900b      	str	r0, [sp, #44]	; 0x2c
 8011712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011716:	9302      	str	r3, [sp, #8]
 8011718:	9b08      	ldr	r3, [sp, #32]
 801171a:	f103 33ff 	add.w	r3, r3, #4294967295
 801171e:	bfa8      	it	ge
 8011720:	1ed4      	subge	r4, r2, #3
 8011722:	9306      	str	r3, [sp, #24]
 8011724:	bfb2      	itee	lt
 8011726:	2400      	movlt	r4, #0
 8011728:	2318      	movge	r3, #24
 801172a:	fb94 f4f3 	sdivge	r4, r4, r3
 801172e:	f06f 0317 	mvn.w	r3, #23
 8011732:	fb04 3303 	mla	r3, r4, r3, r3
 8011736:	eb03 0a02 	add.w	sl, r3, r2
 801173a:	9b02      	ldr	r3, [sp, #8]
 801173c:	9a06      	ldr	r2, [sp, #24]
 801173e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011a10 <__kernel_rem_pio2+0x318>
 8011742:	eb03 0802 	add.w	r8, r3, r2
 8011746:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011748:	1aa7      	subs	r7, r4, r2
 801174a:	ae22      	add	r6, sp, #136	; 0x88
 801174c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011750:	2500      	movs	r5, #0
 8011752:	4545      	cmp	r5, r8
 8011754:	dd13      	ble.n	801177e <__kernel_rem_pio2+0x86>
 8011756:	9b08      	ldr	r3, [sp, #32]
 8011758:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011a10 <__kernel_rem_pio2+0x318>
 801175c:	aa22      	add	r2, sp, #136	; 0x88
 801175e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011762:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011766:	f04f 0800 	mov.w	r8, #0
 801176a:	9b02      	ldr	r3, [sp, #8]
 801176c:	4598      	cmp	r8, r3
 801176e:	dc2f      	bgt.n	80117d0 <__kernel_rem_pio2+0xd8>
 8011770:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011774:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011778:	462f      	mov	r7, r5
 801177a:	2600      	movs	r6, #0
 801177c:	e01b      	b.n	80117b6 <__kernel_rem_pio2+0xbe>
 801177e:	42ef      	cmn	r7, r5
 8011780:	d407      	bmi.n	8011792 <__kernel_rem_pio2+0x9a>
 8011782:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011786:	f7ee fed5 	bl	8000534 <__aeabi_i2d>
 801178a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801178e:	3501      	adds	r5, #1
 8011790:	e7df      	b.n	8011752 <__kernel_rem_pio2+0x5a>
 8011792:	ec51 0b18 	vmov	r0, r1, d8
 8011796:	e7f8      	b.n	801178a <__kernel_rem_pio2+0x92>
 8011798:	e9d7 2300 	ldrd	r2, r3, [r7]
 801179c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80117a0:	f7ee ff32 	bl	8000608 <__aeabi_dmul>
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117ac:	f7ee fd76 	bl	800029c <__adddf3>
 80117b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117b4:	3601      	adds	r6, #1
 80117b6:	9b06      	ldr	r3, [sp, #24]
 80117b8:	429e      	cmp	r6, r3
 80117ba:	f1a7 0708 	sub.w	r7, r7, #8
 80117be:	ddeb      	ble.n	8011798 <__kernel_rem_pio2+0xa0>
 80117c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80117c4:	f108 0801 	add.w	r8, r8, #1
 80117c8:	ecab 7b02 	vstmia	fp!, {d7}
 80117cc:	3508      	adds	r5, #8
 80117ce:	e7cc      	b.n	801176a <__kernel_rem_pio2+0x72>
 80117d0:	9b02      	ldr	r3, [sp, #8]
 80117d2:	aa0e      	add	r2, sp, #56	; 0x38
 80117d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117d8:	930d      	str	r3, [sp, #52]	; 0x34
 80117da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80117dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80117e0:	9c02      	ldr	r4, [sp, #8]
 80117e2:	930c      	str	r3, [sp, #48]	; 0x30
 80117e4:	00e3      	lsls	r3, r4, #3
 80117e6:	930a      	str	r3, [sp, #40]	; 0x28
 80117e8:	ab9a      	add	r3, sp, #616	; 0x268
 80117ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80117ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80117f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80117f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80117f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80117fc:	46c3      	mov	fp, r8
 80117fe:	46a1      	mov	r9, r4
 8011800:	f1b9 0f00 	cmp.w	r9, #0
 8011804:	f1a5 0508 	sub.w	r5, r5, #8
 8011808:	dc77      	bgt.n	80118fa <__kernel_rem_pio2+0x202>
 801180a:	ec47 6b10 	vmov	d0, r6, r7
 801180e:	4650      	mov	r0, sl
 8011810:	f001 f92a 	bl	8012a68 <scalbn>
 8011814:	ec57 6b10 	vmov	r6, r7, d0
 8011818:	2200      	movs	r2, #0
 801181a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801181e:	ee10 0a10 	vmov	r0, s0
 8011822:	4639      	mov	r1, r7
 8011824:	f7ee fef0 	bl	8000608 <__aeabi_dmul>
 8011828:	ec41 0b10 	vmov	d0, r0, r1
 801182c:	f001 f89c 	bl	8012968 <floor>
 8011830:	4b7c      	ldr	r3, [pc, #496]	; (8011a24 <__kernel_rem_pio2+0x32c>)
 8011832:	ec51 0b10 	vmov	r0, r1, d0
 8011836:	2200      	movs	r2, #0
 8011838:	f7ee fee6 	bl	8000608 <__aeabi_dmul>
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	4630      	mov	r0, r6
 8011842:	4639      	mov	r1, r7
 8011844:	f7ee fd28 	bl	8000298 <__aeabi_dsub>
 8011848:	460f      	mov	r7, r1
 801184a:	4606      	mov	r6, r0
 801184c:	f7ef f98c 	bl	8000b68 <__aeabi_d2iz>
 8011850:	9004      	str	r0, [sp, #16]
 8011852:	f7ee fe6f 	bl	8000534 <__aeabi_i2d>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	4630      	mov	r0, r6
 801185c:	4639      	mov	r1, r7
 801185e:	f7ee fd1b 	bl	8000298 <__aeabi_dsub>
 8011862:	f1ba 0f00 	cmp.w	sl, #0
 8011866:	4606      	mov	r6, r0
 8011868:	460f      	mov	r7, r1
 801186a:	dd6d      	ble.n	8011948 <__kernel_rem_pio2+0x250>
 801186c:	1e62      	subs	r2, r4, #1
 801186e:	ab0e      	add	r3, sp, #56	; 0x38
 8011870:	9d04      	ldr	r5, [sp, #16]
 8011872:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011876:	f1ca 0118 	rsb	r1, sl, #24
 801187a:	fa40 f301 	asr.w	r3, r0, r1
 801187e:	441d      	add	r5, r3
 8011880:	408b      	lsls	r3, r1
 8011882:	1ac0      	subs	r0, r0, r3
 8011884:	ab0e      	add	r3, sp, #56	; 0x38
 8011886:	9504      	str	r5, [sp, #16]
 8011888:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801188c:	f1ca 0317 	rsb	r3, sl, #23
 8011890:	fa40 fb03 	asr.w	fp, r0, r3
 8011894:	f1bb 0f00 	cmp.w	fp, #0
 8011898:	dd65      	ble.n	8011966 <__kernel_rem_pio2+0x26e>
 801189a:	9b04      	ldr	r3, [sp, #16]
 801189c:	2200      	movs	r2, #0
 801189e:	3301      	adds	r3, #1
 80118a0:	9304      	str	r3, [sp, #16]
 80118a2:	4615      	mov	r5, r2
 80118a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80118a8:	4294      	cmp	r4, r2
 80118aa:	f300 809c 	bgt.w	80119e6 <__kernel_rem_pio2+0x2ee>
 80118ae:	f1ba 0f00 	cmp.w	sl, #0
 80118b2:	dd07      	ble.n	80118c4 <__kernel_rem_pio2+0x1cc>
 80118b4:	f1ba 0f01 	cmp.w	sl, #1
 80118b8:	f000 80c0 	beq.w	8011a3c <__kernel_rem_pio2+0x344>
 80118bc:	f1ba 0f02 	cmp.w	sl, #2
 80118c0:	f000 80c6 	beq.w	8011a50 <__kernel_rem_pio2+0x358>
 80118c4:	f1bb 0f02 	cmp.w	fp, #2
 80118c8:	d14d      	bne.n	8011966 <__kernel_rem_pio2+0x26e>
 80118ca:	4632      	mov	r2, r6
 80118cc:	463b      	mov	r3, r7
 80118ce:	4956      	ldr	r1, [pc, #344]	; (8011a28 <__kernel_rem_pio2+0x330>)
 80118d0:	2000      	movs	r0, #0
 80118d2:	f7ee fce1 	bl	8000298 <__aeabi_dsub>
 80118d6:	4606      	mov	r6, r0
 80118d8:	460f      	mov	r7, r1
 80118da:	2d00      	cmp	r5, #0
 80118dc:	d043      	beq.n	8011966 <__kernel_rem_pio2+0x26e>
 80118de:	4650      	mov	r0, sl
 80118e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011a18 <__kernel_rem_pio2+0x320>
 80118e4:	f001 f8c0 	bl	8012a68 <scalbn>
 80118e8:	4630      	mov	r0, r6
 80118ea:	4639      	mov	r1, r7
 80118ec:	ec53 2b10 	vmov	r2, r3, d0
 80118f0:	f7ee fcd2 	bl	8000298 <__aeabi_dsub>
 80118f4:	4606      	mov	r6, r0
 80118f6:	460f      	mov	r7, r1
 80118f8:	e035      	b.n	8011966 <__kernel_rem_pio2+0x26e>
 80118fa:	4b4c      	ldr	r3, [pc, #304]	; (8011a2c <__kernel_rem_pio2+0x334>)
 80118fc:	2200      	movs	r2, #0
 80118fe:	4630      	mov	r0, r6
 8011900:	4639      	mov	r1, r7
 8011902:	f7ee fe81 	bl	8000608 <__aeabi_dmul>
 8011906:	f7ef f92f 	bl	8000b68 <__aeabi_d2iz>
 801190a:	f7ee fe13 	bl	8000534 <__aeabi_i2d>
 801190e:	4602      	mov	r2, r0
 8011910:	460b      	mov	r3, r1
 8011912:	ec43 2b18 	vmov	d8, r2, r3
 8011916:	4b46      	ldr	r3, [pc, #280]	; (8011a30 <__kernel_rem_pio2+0x338>)
 8011918:	2200      	movs	r2, #0
 801191a:	f7ee fe75 	bl	8000608 <__aeabi_dmul>
 801191e:	4602      	mov	r2, r0
 8011920:	460b      	mov	r3, r1
 8011922:	4630      	mov	r0, r6
 8011924:	4639      	mov	r1, r7
 8011926:	f7ee fcb7 	bl	8000298 <__aeabi_dsub>
 801192a:	f7ef f91d 	bl	8000b68 <__aeabi_d2iz>
 801192e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011932:	f84b 0b04 	str.w	r0, [fp], #4
 8011936:	ec51 0b18 	vmov	r0, r1, d8
 801193a:	f7ee fcaf 	bl	800029c <__adddf3>
 801193e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011942:	4606      	mov	r6, r0
 8011944:	460f      	mov	r7, r1
 8011946:	e75b      	b.n	8011800 <__kernel_rem_pio2+0x108>
 8011948:	d106      	bne.n	8011958 <__kernel_rem_pio2+0x260>
 801194a:	1e63      	subs	r3, r4, #1
 801194c:	aa0e      	add	r2, sp, #56	; 0x38
 801194e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011952:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011956:	e79d      	b.n	8011894 <__kernel_rem_pio2+0x19c>
 8011958:	4b36      	ldr	r3, [pc, #216]	; (8011a34 <__kernel_rem_pio2+0x33c>)
 801195a:	2200      	movs	r2, #0
 801195c:	f7ef f8da 	bl	8000b14 <__aeabi_dcmpge>
 8011960:	2800      	cmp	r0, #0
 8011962:	d13d      	bne.n	80119e0 <__kernel_rem_pio2+0x2e8>
 8011964:	4683      	mov	fp, r0
 8011966:	2200      	movs	r2, #0
 8011968:	2300      	movs	r3, #0
 801196a:	4630      	mov	r0, r6
 801196c:	4639      	mov	r1, r7
 801196e:	f7ef f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8011972:	2800      	cmp	r0, #0
 8011974:	f000 80c0 	beq.w	8011af8 <__kernel_rem_pio2+0x400>
 8011978:	1e65      	subs	r5, r4, #1
 801197a:	462b      	mov	r3, r5
 801197c:	2200      	movs	r2, #0
 801197e:	9902      	ldr	r1, [sp, #8]
 8011980:	428b      	cmp	r3, r1
 8011982:	da6c      	bge.n	8011a5e <__kernel_rem_pio2+0x366>
 8011984:	2a00      	cmp	r2, #0
 8011986:	f000 8089 	beq.w	8011a9c <__kernel_rem_pio2+0x3a4>
 801198a:	ab0e      	add	r3, sp, #56	; 0x38
 801198c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011990:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011994:	2b00      	cmp	r3, #0
 8011996:	f000 80ad 	beq.w	8011af4 <__kernel_rem_pio2+0x3fc>
 801199a:	4650      	mov	r0, sl
 801199c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011a18 <__kernel_rem_pio2+0x320>
 80119a0:	f001 f862 	bl	8012a68 <scalbn>
 80119a4:	ab9a      	add	r3, sp, #616	; 0x268
 80119a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80119aa:	ec57 6b10 	vmov	r6, r7, d0
 80119ae:	00ec      	lsls	r4, r5, #3
 80119b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80119b4:	46aa      	mov	sl, r5
 80119b6:	f1ba 0f00 	cmp.w	sl, #0
 80119ba:	f280 80d6 	bge.w	8011b6a <__kernel_rem_pio2+0x472>
 80119be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011a10 <__kernel_rem_pio2+0x318>
 80119c2:	462e      	mov	r6, r5
 80119c4:	2e00      	cmp	r6, #0
 80119c6:	f2c0 8104 	blt.w	8011bd2 <__kernel_rem_pio2+0x4da>
 80119ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80119cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80119d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011a38 <__kernel_rem_pio2+0x340>
 80119d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80119d8:	f04f 0800 	mov.w	r8, #0
 80119dc:	1baf      	subs	r7, r5, r6
 80119de:	e0ea      	b.n	8011bb6 <__kernel_rem_pio2+0x4be>
 80119e0:	f04f 0b02 	mov.w	fp, #2
 80119e4:	e759      	b.n	801189a <__kernel_rem_pio2+0x1a2>
 80119e6:	f8d8 3000 	ldr.w	r3, [r8]
 80119ea:	b955      	cbnz	r5, 8011a02 <__kernel_rem_pio2+0x30a>
 80119ec:	b123      	cbz	r3, 80119f8 <__kernel_rem_pio2+0x300>
 80119ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80119f2:	f8c8 3000 	str.w	r3, [r8]
 80119f6:	2301      	movs	r3, #1
 80119f8:	3201      	adds	r2, #1
 80119fa:	f108 0804 	add.w	r8, r8, #4
 80119fe:	461d      	mov	r5, r3
 8011a00:	e752      	b.n	80118a8 <__kernel_rem_pio2+0x1b0>
 8011a02:	1acb      	subs	r3, r1, r3
 8011a04:	f8c8 3000 	str.w	r3, [r8]
 8011a08:	462b      	mov	r3, r5
 8011a0a:	e7f5      	b.n	80119f8 <__kernel_rem_pio2+0x300>
 8011a0c:	f3af 8000 	nop.w
	...
 8011a1c:	3ff00000 	.word	0x3ff00000
 8011a20:	08013798 	.word	0x08013798
 8011a24:	40200000 	.word	0x40200000
 8011a28:	3ff00000 	.word	0x3ff00000
 8011a2c:	3e700000 	.word	0x3e700000
 8011a30:	41700000 	.word	0x41700000
 8011a34:	3fe00000 	.word	0x3fe00000
 8011a38:	08013758 	.word	0x08013758
 8011a3c:	1e62      	subs	r2, r4, #1
 8011a3e:	ab0e      	add	r3, sp, #56	; 0x38
 8011a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a48:	a90e      	add	r1, sp, #56	; 0x38
 8011a4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011a4e:	e739      	b.n	80118c4 <__kernel_rem_pio2+0x1cc>
 8011a50:	1e62      	subs	r2, r4, #1
 8011a52:	ab0e      	add	r3, sp, #56	; 0x38
 8011a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011a5c:	e7f4      	b.n	8011a48 <__kernel_rem_pio2+0x350>
 8011a5e:	a90e      	add	r1, sp, #56	; 0x38
 8011a60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	430a      	orrs	r2, r1
 8011a68:	e789      	b.n	801197e <__kernel_rem_pio2+0x286>
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011a70:	2900      	cmp	r1, #0
 8011a72:	d0fa      	beq.n	8011a6a <__kernel_rem_pio2+0x372>
 8011a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011a7a:	446a      	add	r2, sp
 8011a7c:	3a98      	subs	r2, #152	; 0x98
 8011a7e:	920a      	str	r2, [sp, #40]	; 0x28
 8011a80:	9a08      	ldr	r2, [sp, #32]
 8011a82:	18e3      	adds	r3, r4, r3
 8011a84:	18a5      	adds	r5, r4, r2
 8011a86:	aa22      	add	r2, sp, #136	; 0x88
 8011a88:	f104 0801 	add.w	r8, r4, #1
 8011a8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011a90:	9304      	str	r3, [sp, #16]
 8011a92:	9b04      	ldr	r3, [sp, #16]
 8011a94:	4543      	cmp	r3, r8
 8011a96:	da04      	bge.n	8011aa2 <__kernel_rem_pio2+0x3aa>
 8011a98:	461c      	mov	r4, r3
 8011a9a:	e6a3      	b.n	80117e4 <__kernel_rem_pio2+0xec>
 8011a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e7e4      	b.n	8011a6c <__kernel_rem_pio2+0x374>
 8011aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011aa4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011aa8:	f7ee fd44 	bl	8000534 <__aeabi_i2d>
 8011aac:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ab2:	46ab      	mov	fp, r5
 8011ab4:	461c      	mov	r4, r3
 8011ab6:	f04f 0900 	mov.w	r9, #0
 8011aba:	2600      	movs	r6, #0
 8011abc:	2700      	movs	r7, #0
 8011abe:	9b06      	ldr	r3, [sp, #24]
 8011ac0:	4599      	cmp	r9, r3
 8011ac2:	dd06      	ble.n	8011ad2 <__kernel_rem_pio2+0x3da>
 8011ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ac6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011aca:	f108 0801 	add.w	r8, r8, #1
 8011ace:	930a      	str	r3, [sp, #40]	; 0x28
 8011ad0:	e7df      	b.n	8011a92 <__kernel_rem_pio2+0x39a>
 8011ad2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011ad6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011ada:	f7ee fd95 	bl	8000608 <__aeabi_dmul>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	4639      	mov	r1, r7
 8011ae6:	f7ee fbd9 	bl	800029c <__adddf3>
 8011aea:	f109 0901 	add.w	r9, r9, #1
 8011aee:	4606      	mov	r6, r0
 8011af0:	460f      	mov	r7, r1
 8011af2:	e7e4      	b.n	8011abe <__kernel_rem_pio2+0x3c6>
 8011af4:	3d01      	subs	r5, #1
 8011af6:	e748      	b.n	801198a <__kernel_rem_pio2+0x292>
 8011af8:	ec47 6b10 	vmov	d0, r6, r7
 8011afc:	f1ca 0000 	rsb	r0, sl, #0
 8011b00:	f000 ffb2 	bl	8012a68 <scalbn>
 8011b04:	ec57 6b10 	vmov	r6, r7, d0
 8011b08:	4ba0      	ldr	r3, [pc, #640]	; (8011d8c <__kernel_rem_pio2+0x694>)
 8011b0a:	ee10 0a10 	vmov	r0, s0
 8011b0e:	2200      	movs	r2, #0
 8011b10:	4639      	mov	r1, r7
 8011b12:	f7ee ffff 	bl	8000b14 <__aeabi_dcmpge>
 8011b16:	b1f8      	cbz	r0, 8011b58 <__kernel_rem_pio2+0x460>
 8011b18:	4b9d      	ldr	r3, [pc, #628]	; (8011d90 <__kernel_rem_pio2+0x698>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	4639      	mov	r1, r7
 8011b20:	f7ee fd72 	bl	8000608 <__aeabi_dmul>
 8011b24:	f7ef f820 	bl	8000b68 <__aeabi_d2iz>
 8011b28:	4680      	mov	r8, r0
 8011b2a:	f7ee fd03 	bl	8000534 <__aeabi_i2d>
 8011b2e:	4b97      	ldr	r3, [pc, #604]	; (8011d8c <__kernel_rem_pio2+0x694>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	f7ee fd69 	bl	8000608 <__aeabi_dmul>
 8011b36:	460b      	mov	r3, r1
 8011b38:	4602      	mov	r2, r0
 8011b3a:	4639      	mov	r1, r7
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	f7ee fbab 	bl	8000298 <__aeabi_dsub>
 8011b42:	f7ef f811 	bl	8000b68 <__aeabi_d2iz>
 8011b46:	1c65      	adds	r5, r4, #1
 8011b48:	ab0e      	add	r3, sp, #56	; 0x38
 8011b4a:	f10a 0a18 	add.w	sl, sl, #24
 8011b4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011b52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011b56:	e720      	b.n	801199a <__kernel_rem_pio2+0x2a2>
 8011b58:	4630      	mov	r0, r6
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	f7ef f804 	bl	8000b68 <__aeabi_d2iz>
 8011b60:	ab0e      	add	r3, sp, #56	; 0x38
 8011b62:	4625      	mov	r5, r4
 8011b64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011b68:	e717      	b.n	801199a <__kernel_rem_pio2+0x2a2>
 8011b6a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011b70:	f7ee fce0 	bl	8000534 <__aeabi_i2d>
 8011b74:	4632      	mov	r2, r6
 8011b76:	463b      	mov	r3, r7
 8011b78:	f7ee fd46 	bl	8000608 <__aeabi_dmul>
 8011b7c:	4b84      	ldr	r3, [pc, #528]	; (8011d90 <__kernel_rem_pio2+0x698>)
 8011b7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011b82:	2200      	movs	r2, #0
 8011b84:	4630      	mov	r0, r6
 8011b86:	4639      	mov	r1, r7
 8011b88:	f7ee fd3e 	bl	8000608 <__aeabi_dmul>
 8011b8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b90:	4606      	mov	r6, r0
 8011b92:	460f      	mov	r7, r1
 8011b94:	e70f      	b.n	80119b6 <__kernel_rem_pio2+0x2be>
 8011b96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011b9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011b9e:	f7ee fd33 	bl	8000608 <__aeabi_dmul>
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011baa:	f7ee fb77 	bl	800029c <__adddf3>
 8011bae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011bb2:	f108 0801 	add.w	r8, r8, #1
 8011bb6:	9b02      	ldr	r3, [sp, #8]
 8011bb8:	4598      	cmp	r8, r3
 8011bba:	dc01      	bgt.n	8011bc0 <__kernel_rem_pio2+0x4c8>
 8011bbc:	45b8      	cmp	r8, r7
 8011bbe:	ddea      	ble.n	8011b96 <__kernel_rem_pio2+0x49e>
 8011bc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011bc4:	ab4a      	add	r3, sp, #296	; 0x128
 8011bc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011bca:	ed87 7b00 	vstr	d7, [r7]
 8011bce:	3e01      	subs	r6, #1
 8011bd0:	e6f8      	b.n	80119c4 <__kernel_rem_pio2+0x2cc>
 8011bd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011bd4:	2b02      	cmp	r3, #2
 8011bd6:	dc0b      	bgt.n	8011bf0 <__kernel_rem_pio2+0x4f8>
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	dc35      	bgt.n	8011c48 <__kernel_rem_pio2+0x550>
 8011bdc:	d059      	beq.n	8011c92 <__kernel_rem_pio2+0x59a>
 8011bde:	9b04      	ldr	r3, [sp, #16]
 8011be0:	f003 0007 	and.w	r0, r3, #7
 8011be4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011be8:	ecbd 8b02 	vpop	{d8}
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011bf2:	2b03      	cmp	r3, #3
 8011bf4:	d1f3      	bne.n	8011bde <__kernel_rem_pio2+0x4e6>
 8011bf6:	ab4a      	add	r3, sp, #296	; 0x128
 8011bf8:	4423      	add	r3, r4
 8011bfa:	9306      	str	r3, [sp, #24]
 8011bfc:	461c      	mov	r4, r3
 8011bfe:	469a      	mov	sl, r3
 8011c00:	9502      	str	r5, [sp, #8]
 8011c02:	9b02      	ldr	r3, [sp, #8]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f1aa 0a08 	sub.w	sl, sl, #8
 8011c0a:	dc6b      	bgt.n	8011ce4 <__kernel_rem_pio2+0x5ec>
 8011c0c:	46aa      	mov	sl, r5
 8011c0e:	f1ba 0f01 	cmp.w	sl, #1
 8011c12:	f1a4 0408 	sub.w	r4, r4, #8
 8011c16:	f300 8085 	bgt.w	8011d24 <__kernel_rem_pio2+0x62c>
 8011c1a:	9c06      	ldr	r4, [sp, #24]
 8011c1c:	2000      	movs	r0, #0
 8011c1e:	3408      	adds	r4, #8
 8011c20:	2100      	movs	r1, #0
 8011c22:	2d01      	cmp	r5, #1
 8011c24:	f300 809d 	bgt.w	8011d62 <__kernel_rem_pio2+0x66a>
 8011c28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011c2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011c30:	f1bb 0f00 	cmp.w	fp, #0
 8011c34:	f040 809b 	bne.w	8011d6e <__kernel_rem_pio2+0x676>
 8011c38:	9b01      	ldr	r3, [sp, #4]
 8011c3a:	e9c3 5600 	strd	r5, r6, [r3]
 8011c3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011c42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011c46:	e7ca      	b.n	8011bde <__kernel_rem_pio2+0x4e6>
 8011c48:	3408      	adds	r4, #8
 8011c4a:	ab4a      	add	r3, sp, #296	; 0x128
 8011c4c:	441c      	add	r4, r3
 8011c4e:	462e      	mov	r6, r5
 8011c50:	2000      	movs	r0, #0
 8011c52:	2100      	movs	r1, #0
 8011c54:	2e00      	cmp	r6, #0
 8011c56:	da36      	bge.n	8011cc6 <__kernel_rem_pio2+0x5ce>
 8011c58:	f1bb 0f00 	cmp.w	fp, #0
 8011c5c:	d039      	beq.n	8011cd2 <__kernel_rem_pio2+0x5da>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c64:	9c01      	ldr	r4, [sp, #4]
 8011c66:	e9c4 2300 	strd	r2, r3, [r4]
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011c72:	f7ee fb11 	bl	8000298 <__aeabi_dsub>
 8011c76:	ae4c      	add	r6, sp, #304	; 0x130
 8011c78:	2401      	movs	r4, #1
 8011c7a:	42a5      	cmp	r5, r4
 8011c7c:	da2c      	bge.n	8011cd8 <__kernel_rem_pio2+0x5e0>
 8011c7e:	f1bb 0f00 	cmp.w	fp, #0
 8011c82:	d002      	beq.n	8011c8a <__kernel_rem_pio2+0x592>
 8011c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c88:	4619      	mov	r1, r3
 8011c8a:	9b01      	ldr	r3, [sp, #4]
 8011c8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011c90:	e7a5      	b.n	8011bde <__kernel_rem_pio2+0x4e6>
 8011c92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011c96:	eb0d 0403 	add.w	r4, sp, r3
 8011c9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	2d00      	cmp	r5, #0
 8011ca4:	da09      	bge.n	8011cba <__kernel_rem_pio2+0x5c2>
 8011ca6:	f1bb 0f00 	cmp.w	fp, #0
 8011caa:	d002      	beq.n	8011cb2 <__kernel_rem_pio2+0x5ba>
 8011cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	9b01      	ldr	r3, [sp, #4]
 8011cb4:	e9c3 0100 	strd	r0, r1, [r3]
 8011cb8:	e791      	b.n	8011bde <__kernel_rem_pio2+0x4e6>
 8011cba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011cbe:	f7ee faed 	bl	800029c <__adddf3>
 8011cc2:	3d01      	subs	r5, #1
 8011cc4:	e7ed      	b.n	8011ca2 <__kernel_rem_pio2+0x5aa>
 8011cc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011cca:	f7ee fae7 	bl	800029c <__adddf3>
 8011cce:	3e01      	subs	r6, #1
 8011cd0:	e7c0      	b.n	8011c54 <__kernel_rem_pio2+0x55c>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	e7c5      	b.n	8011c64 <__kernel_rem_pio2+0x56c>
 8011cd8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011cdc:	f7ee fade 	bl	800029c <__adddf3>
 8011ce0:	3401      	adds	r4, #1
 8011ce2:	e7ca      	b.n	8011c7a <__kernel_rem_pio2+0x582>
 8011ce4:	e9da 8900 	ldrd	r8, r9, [sl]
 8011ce8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011cec:	9b02      	ldr	r3, [sp, #8]
 8011cee:	3b01      	subs	r3, #1
 8011cf0:	9302      	str	r3, [sp, #8]
 8011cf2:	4632      	mov	r2, r6
 8011cf4:	463b      	mov	r3, r7
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	4649      	mov	r1, r9
 8011cfa:	f7ee facf 	bl	800029c <__adddf3>
 8011cfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d02:	4602      	mov	r2, r0
 8011d04:	460b      	mov	r3, r1
 8011d06:	4640      	mov	r0, r8
 8011d08:	4649      	mov	r1, r9
 8011d0a:	f7ee fac5 	bl	8000298 <__aeabi_dsub>
 8011d0e:	4632      	mov	r2, r6
 8011d10:	463b      	mov	r3, r7
 8011d12:	f7ee fac3 	bl	800029c <__adddf3>
 8011d16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011d1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011d1e:	ed8a 7b00 	vstr	d7, [sl]
 8011d22:	e76e      	b.n	8011c02 <__kernel_rem_pio2+0x50a>
 8011d24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011d28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	4632      	mov	r2, r6
 8011d30:	463b      	mov	r3, r7
 8011d32:	4649      	mov	r1, r9
 8011d34:	f7ee fab2 	bl	800029c <__adddf3>
 8011d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	460b      	mov	r3, r1
 8011d40:	4640      	mov	r0, r8
 8011d42:	4649      	mov	r1, r9
 8011d44:	f7ee faa8 	bl	8000298 <__aeabi_dsub>
 8011d48:	4632      	mov	r2, r6
 8011d4a:	463b      	mov	r3, r7
 8011d4c:	f7ee faa6 	bl	800029c <__adddf3>
 8011d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d58:	ed84 7b00 	vstr	d7, [r4]
 8011d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d60:	e755      	b.n	8011c0e <__kernel_rem_pio2+0x516>
 8011d62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d66:	f7ee fa99 	bl	800029c <__adddf3>
 8011d6a:	3d01      	subs	r5, #1
 8011d6c:	e759      	b.n	8011c22 <__kernel_rem_pio2+0x52a>
 8011d6e:	9b01      	ldr	r3, [sp, #4]
 8011d70:	9a01      	ldr	r2, [sp, #4]
 8011d72:	601d      	str	r5, [r3, #0]
 8011d74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011d78:	605c      	str	r4, [r3, #4]
 8011d7a:	609f      	str	r7, [r3, #8]
 8011d7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011d80:	60d3      	str	r3, [r2, #12]
 8011d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d86:	6110      	str	r0, [r2, #16]
 8011d88:	6153      	str	r3, [r2, #20]
 8011d8a:	e728      	b.n	8011bde <__kernel_rem_pio2+0x4e6>
 8011d8c:	41700000 	.word	0x41700000
 8011d90:	3e700000 	.word	0x3e700000
 8011d94:	00000000 	.word	0x00000000

08011d98 <__kernel_sin>:
 8011d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d9c:	ed2d 8b04 	vpush	{d8-d9}
 8011da0:	eeb0 8a41 	vmov.f32	s16, s2
 8011da4:	eef0 8a61 	vmov.f32	s17, s3
 8011da8:	ec55 4b10 	vmov	r4, r5, d0
 8011dac:	b083      	sub	sp, #12
 8011dae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011db2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011db6:	9001      	str	r0, [sp, #4]
 8011db8:	da06      	bge.n	8011dc8 <__kernel_sin+0x30>
 8011dba:	ee10 0a10 	vmov	r0, s0
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	f7ee fed2 	bl	8000b68 <__aeabi_d2iz>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d051      	beq.n	8011e6c <__kernel_sin+0xd4>
 8011dc8:	4622      	mov	r2, r4
 8011dca:	462b      	mov	r3, r5
 8011dcc:	4620      	mov	r0, r4
 8011dce:	4629      	mov	r1, r5
 8011dd0:	f7ee fc1a 	bl	8000608 <__aeabi_dmul>
 8011dd4:	4682      	mov	sl, r0
 8011dd6:	468b      	mov	fp, r1
 8011dd8:	4602      	mov	r2, r0
 8011dda:	460b      	mov	r3, r1
 8011ddc:	4620      	mov	r0, r4
 8011dde:	4629      	mov	r1, r5
 8011de0:	f7ee fc12 	bl	8000608 <__aeabi_dmul>
 8011de4:	a341      	add	r3, pc, #260	; (adr r3, 8011eec <__kernel_sin+0x154>)
 8011de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dea:	4680      	mov	r8, r0
 8011dec:	4689      	mov	r9, r1
 8011dee:	4650      	mov	r0, sl
 8011df0:	4659      	mov	r1, fp
 8011df2:	f7ee fc09 	bl	8000608 <__aeabi_dmul>
 8011df6:	a33f      	add	r3, pc, #252	; (adr r3, 8011ef4 <__kernel_sin+0x15c>)
 8011df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfc:	f7ee fa4c 	bl	8000298 <__aeabi_dsub>
 8011e00:	4652      	mov	r2, sl
 8011e02:	465b      	mov	r3, fp
 8011e04:	f7ee fc00 	bl	8000608 <__aeabi_dmul>
 8011e08:	a33c      	add	r3, pc, #240	; (adr r3, 8011efc <__kernel_sin+0x164>)
 8011e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0e:	f7ee fa45 	bl	800029c <__adddf3>
 8011e12:	4652      	mov	r2, sl
 8011e14:	465b      	mov	r3, fp
 8011e16:	f7ee fbf7 	bl	8000608 <__aeabi_dmul>
 8011e1a:	a33a      	add	r3, pc, #232	; (adr r3, 8011f04 <__kernel_sin+0x16c>)
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	f7ee fa3a 	bl	8000298 <__aeabi_dsub>
 8011e24:	4652      	mov	r2, sl
 8011e26:	465b      	mov	r3, fp
 8011e28:	f7ee fbee 	bl	8000608 <__aeabi_dmul>
 8011e2c:	a337      	add	r3, pc, #220	; (adr r3, 8011f0c <__kernel_sin+0x174>)
 8011e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e32:	f7ee fa33 	bl	800029c <__adddf3>
 8011e36:	9b01      	ldr	r3, [sp, #4]
 8011e38:	4606      	mov	r6, r0
 8011e3a:	460f      	mov	r7, r1
 8011e3c:	b9eb      	cbnz	r3, 8011e7a <__kernel_sin+0xe2>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	460b      	mov	r3, r1
 8011e42:	4650      	mov	r0, sl
 8011e44:	4659      	mov	r1, fp
 8011e46:	f7ee fbdf 	bl	8000608 <__aeabi_dmul>
 8011e4a:	a325      	add	r3, pc, #148	; (adr r3, 8011ee0 <__kernel_sin+0x148>)
 8011e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e50:	f7ee fa22 	bl	8000298 <__aeabi_dsub>
 8011e54:	4642      	mov	r2, r8
 8011e56:	464b      	mov	r3, r9
 8011e58:	f7ee fbd6 	bl	8000608 <__aeabi_dmul>
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	460b      	mov	r3, r1
 8011e60:	4620      	mov	r0, r4
 8011e62:	4629      	mov	r1, r5
 8011e64:	f7ee fa1a 	bl	800029c <__adddf3>
 8011e68:	4604      	mov	r4, r0
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	ec45 4b10 	vmov	d0, r4, r5
 8011e70:	b003      	add	sp, #12
 8011e72:	ecbd 8b04 	vpop	{d8-d9}
 8011e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e7a:	4b1b      	ldr	r3, [pc, #108]	; (8011ee8 <__kernel_sin+0x150>)
 8011e7c:	ec51 0b18 	vmov	r0, r1, d8
 8011e80:	2200      	movs	r2, #0
 8011e82:	f7ee fbc1 	bl	8000608 <__aeabi_dmul>
 8011e86:	4632      	mov	r2, r6
 8011e88:	ec41 0b19 	vmov	d9, r0, r1
 8011e8c:	463b      	mov	r3, r7
 8011e8e:	4640      	mov	r0, r8
 8011e90:	4649      	mov	r1, r9
 8011e92:	f7ee fbb9 	bl	8000608 <__aeabi_dmul>
 8011e96:	4602      	mov	r2, r0
 8011e98:	460b      	mov	r3, r1
 8011e9a:	ec51 0b19 	vmov	r0, r1, d9
 8011e9e:	f7ee f9fb 	bl	8000298 <__aeabi_dsub>
 8011ea2:	4652      	mov	r2, sl
 8011ea4:	465b      	mov	r3, fp
 8011ea6:	f7ee fbaf 	bl	8000608 <__aeabi_dmul>
 8011eaa:	ec53 2b18 	vmov	r2, r3, d8
 8011eae:	f7ee f9f3 	bl	8000298 <__aeabi_dsub>
 8011eb2:	a30b      	add	r3, pc, #44	; (adr r3, 8011ee0 <__kernel_sin+0x148>)
 8011eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb8:	4606      	mov	r6, r0
 8011eba:	460f      	mov	r7, r1
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	4649      	mov	r1, r9
 8011ec0:	f7ee fba2 	bl	8000608 <__aeabi_dmul>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	4630      	mov	r0, r6
 8011eca:	4639      	mov	r1, r7
 8011ecc:	f7ee f9e6 	bl	800029c <__adddf3>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	4629      	mov	r1, r5
 8011ed8:	f7ee f9de 	bl	8000298 <__aeabi_dsub>
 8011edc:	e7c4      	b.n	8011e68 <__kernel_sin+0xd0>
 8011ede:	bf00      	nop
 8011ee0:	55555549 	.word	0x55555549
 8011ee4:	3fc55555 	.word	0x3fc55555
 8011ee8:	3fe00000 	.word	0x3fe00000
 8011eec:	5acfd57c 	.word	0x5acfd57c
 8011ef0:	3de5d93a 	.word	0x3de5d93a
 8011ef4:	8a2b9ceb 	.word	0x8a2b9ceb
 8011ef8:	3e5ae5e6 	.word	0x3e5ae5e6
 8011efc:	57b1fe7d 	.word	0x57b1fe7d
 8011f00:	3ec71de3 	.word	0x3ec71de3
 8011f04:	19c161d5 	.word	0x19c161d5
 8011f08:	3f2a01a0 	.word	0x3f2a01a0
 8011f0c:	1110f8a6 	.word	0x1110f8a6
 8011f10:	3f811111 	.word	0x3f811111
 8011f14:	00000000 	.word	0x00000000

08011f18 <__kernel_tan>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	ed2d 8b06 	vpush	{d8-d10}
 8011f20:	ec5b ab10 	vmov	sl, fp, d0
 8011f24:	4be0      	ldr	r3, [pc, #896]	; (80122a8 <__kernel_tan+0x390>)
 8011f26:	b083      	sub	sp, #12
 8011f28:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8011f2c:	429f      	cmp	r7, r3
 8011f2e:	ec59 8b11 	vmov	r8, r9, d1
 8011f32:	4606      	mov	r6, r0
 8011f34:	f8cd b000 	str.w	fp, [sp]
 8011f38:	dc61      	bgt.n	8011ffe <__kernel_tan+0xe6>
 8011f3a:	ee10 0a10 	vmov	r0, s0
 8011f3e:	4659      	mov	r1, fp
 8011f40:	f7ee fe12 	bl	8000b68 <__aeabi_d2iz>
 8011f44:	4605      	mov	r5, r0
 8011f46:	2800      	cmp	r0, #0
 8011f48:	f040 8083 	bne.w	8012052 <__kernel_tan+0x13a>
 8011f4c:	1c73      	adds	r3, r6, #1
 8011f4e:	4652      	mov	r2, sl
 8011f50:	4313      	orrs	r3, r2
 8011f52:	433b      	orrs	r3, r7
 8011f54:	d112      	bne.n	8011f7c <__kernel_tan+0x64>
 8011f56:	ec4b ab10 	vmov	d0, sl, fp
 8011f5a:	f7fe fd5d 	bl	8010a18 <fabs>
 8011f5e:	49d3      	ldr	r1, [pc, #844]	; (80122ac <__kernel_tan+0x394>)
 8011f60:	ec53 2b10 	vmov	r2, r3, d0
 8011f64:	2000      	movs	r0, #0
 8011f66:	f7ee fc79 	bl	800085c <__aeabi_ddiv>
 8011f6a:	4682      	mov	sl, r0
 8011f6c:	468b      	mov	fp, r1
 8011f6e:	ec4b ab10 	vmov	d0, sl, fp
 8011f72:	b003      	add	sp, #12
 8011f74:	ecbd 8b06 	vpop	{d8-d10}
 8011f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7c:	2e01      	cmp	r6, #1
 8011f7e:	d0f6      	beq.n	8011f6e <__kernel_tan+0x56>
 8011f80:	4642      	mov	r2, r8
 8011f82:	464b      	mov	r3, r9
 8011f84:	4650      	mov	r0, sl
 8011f86:	4659      	mov	r1, fp
 8011f88:	f7ee f988 	bl	800029c <__adddf3>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	460b      	mov	r3, r1
 8011f90:	460f      	mov	r7, r1
 8011f92:	2000      	movs	r0, #0
 8011f94:	49c6      	ldr	r1, [pc, #792]	; (80122b0 <__kernel_tan+0x398>)
 8011f96:	f7ee fc61 	bl	800085c <__aeabi_ddiv>
 8011f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8011f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fa2:	462e      	mov	r6, r5
 8011fa4:	4652      	mov	r2, sl
 8011fa6:	462c      	mov	r4, r5
 8011fa8:	4630      	mov	r0, r6
 8011faa:	461d      	mov	r5, r3
 8011fac:	4639      	mov	r1, r7
 8011fae:	465b      	mov	r3, fp
 8011fb0:	f7ee f972 	bl	8000298 <__aeabi_dsub>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	4640      	mov	r0, r8
 8011fba:	4649      	mov	r1, r9
 8011fbc:	f7ee f96c 	bl	8000298 <__aeabi_dsub>
 8011fc0:	4632      	mov	r2, r6
 8011fc2:	462b      	mov	r3, r5
 8011fc4:	f7ee fb20 	bl	8000608 <__aeabi_dmul>
 8011fc8:	4632      	mov	r2, r6
 8011fca:	4680      	mov	r8, r0
 8011fcc:	4689      	mov	r9, r1
 8011fce:	462b      	mov	r3, r5
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	4639      	mov	r1, r7
 8011fd4:	f7ee fb18 	bl	8000608 <__aeabi_dmul>
 8011fd8:	4bb4      	ldr	r3, [pc, #720]	; (80122ac <__kernel_tan+0x394>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f7ee f95e 	bl	800029c <__adddf3>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	4649      	mov	r1, r9
 8011fe8:	f7ee f958 	bl	800029c <__adddf3>
 8011fec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ff0:	f7ee fb0a 	bl	8000608 <__aeabi_dmul>
 8011ff4:	4622      	mov	r2, r4
 8011ff6:	462b      	mov	r3, r5
 8011ff8:	f7ee f950 	bl	800029c <__adddf3>
 8011ffc:	e7b5      	b.n	8011f6a <__kernel_tan+0x52>
 8011ffe:	4bad      	ldr	r3, [pc, #692]	; (80122b4 <__kernel_tan+0x39c>)
 8012000:	429f      	cmp	r7, r3
 8012002:	dd26      	ble.n	8012052 <__kernel_tan+0x13a>
 8012004:	9b00      	ldr	r3, [sp, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	da09      	bge.n	801201e <__kernel_tan+0x106>
 801200a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801200e:	469b      	mov	fp, r3
 8012010:	ee10 aa10 	vmov	sl, s0
 8012014:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012018:	ee11 8a10 	vmov	r8, s2
 801201c:	4699      	mov	r9, r3
 801201e:	4652      	mov	r2, sl
 8012020:	465b      	mov	r3, fp
 8012022:	a183      	add	r1, pc, #524	; (adr r1, 8012230 <__kernel_tan+0x318>)
 8012024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012028:	f7ee f936 	bl	8000298 <__aeabi_dsub>
 801202c:	4642      	mov	r2, r8
 801202e:	464b      	mov	r3, r9
 8012030:	4604      	mov	r4, r0
 8012032:	460d      	mov	r5, r1
 8012034:	a180      	add	r1, pc, #512	; (adr r1, 8012238 <__kernel_tan+0x320>)
 8012036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801203a:	f7ee f92d 	bl	8000298 <__aeabi_dsub>
 801203e:	4622      	mov	r2, r4
 8012040:	462b      	mov	r3, r5
 8012042:	f7ee f92b 	bl	800029c <__adddf3>
 8012046:	f04f 0800 	mov.w	r8, #0
 801204a:	4682      	mov	sl, r0
 801204c:	468b      	mov	fp, r1
 801204e:	f04f 0900 	mov.w	r9, #0
 8012052:	4652      	mov	r2, sl
 8012054:	465b      	mov	r3, fp
 8012056:	4650      	mov	r0, sl
 8012058:	4659      	mov	r1, fp
 801205a:	f7ee fad5 	bl	8000608 <__aeabi_dmul>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	ec43 2b18 	vmov	d8, r2, r3
 8012066:	f7ee facf 	bl	8000608 <__aeabi_dmul>
 801206a:	ec53 2b18 	vmov	r2, r3, d8
 801206e:	4604      	mov	r4, r0
 8012070:	460d      	mov	r5, r1
 8012072:	4650      	mov	r0, sl
 8012074:	4659      	mov	r1, fp
 8012076:	f7ee fac7 	bl	8000608 <__aeabi_dmul>
 801207a:	a371      	add	r3, pc, #452	; (adr r3, 8012240 <__kernel_tan+0x328>)
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	ec41 0b19 	vmov	d9, r0, r1
 8012084:	4620      	mov	r0, r4
 8012086:	4629      	mov	r1, r5
 8012088:	f7ee fabe 	bl	8000608 <__aeabi_dmul>
 801208c:	a36e      	add	r3, pc, #440	; (adr r3, 8012248 <__kernel_tan+0x330>)
 801208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012092:	f7ee f903 	bl	800029c <__adddf3>
 8012096:	4622      	mov	r2, r4
 8012098:	462b      	mov	r3, r5
 801209a:	f7ee fab5 	bl	8000608 <__aeabi_dmul>
 801209e:	a36c      	add	r3, pc, #432	; (adr r3, 8012250 <__kernel_tan+0x338>)
 80120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a4:	f7ee f8fa 	bl	800029c <__adddf3>
 80120a8:	4622      	mov	r2, r4
 80120aa:	462b      	mov	r3, r5
 80120ac:	f7ee faac 	bl	8000608 <__aeabi_dmul>
 80120b0:	a369      	add	r3, pc, #420	; (adr r3, 8012258 <__kernel_tan+0x340>)
 80120b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b6:	f7ee f8f1 	bl	800029c <__adddf3>
 80120ba:	4622      	mov	r2, r4
 80120bc:	462b      	mov	r3, r5
 80120be:	f7ee faa3 	bl	8000608 <__aeabi_dmul>
 80120c2:	a367      	add	r3, pc, #412	; (adr r3, 8012260 <__kernel_tan+0x348>)
 80120c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c8:	f7ee f8e8 	bl	800029c <__adddf3>
 80120cc:	4622      	mov	r2, r4
 80120ce:	462b      	mov	r3, r5
 80120d0:	f7ee fa9a 	bl	8000608 <__aeabi_dmul>
 80120d4:	a364      	add	r3, pc, #400	; (adr r3, 8012268 <__kernel_tan+0x350>)
 80120d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120da:	f7ee f8df 	bl	800029c <__adddf3>
 80120de:	ec53 2b18 	vmov	r2, r3, d8
 80120e2:	f7ee fa91 	bl	8000608 <__aeabi_dmul>
 80120e6:	a362      	add	r3, pc, #392	; (adr r3, 8012270 <__kernel_tan+0x358>)
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	ec41 0b1a 	vmov	d10, r0, r1
 80120f0:	4620      	mov	r0, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	f7ee fa88 	bl	8000608 <__aeabi_dmul>
 80120f8:	a35f      	add	r3, pc, #380	; (adr r3, 8012278 <__kernel_tan+0x360>)
 80120fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fe:	f7ee f8cd 	bl	800029c <__adddf3>
 8012102:	4622      	mov	r2, r4
 8012104:	462b      	mov	r3, r5
 8012106:	f7ee fa7f 	bl	8000608 <__aeabi_dmul>
 801210a:	a35d      	add	r3, pc, #372	; (adr r3, 8012280 <__kernel_tan+0x368>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7ee f8c4 	bl	800029c <__adddf3>
 8012114:	4622      	mov	r2, r4
 8012116:	462b      	mov	r3, r5
 8012118:	f7ee fa76 	bl	8000608 <__aeabi_dmul>
 801211c:	a35a      	add	r3, pc, #360	; (adr r3, 8012288 <__kernel_tan+0x370>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	f7ee f8bb 	bl	800029c <__adddf3>
 8012126:	4622      	mov	r2, r4
 8012128:	462b      	mov	r3, r5
 801212a:	f7ee fa6d 	bl	8000608 <__aeabi_dmul>
 801212e:	a358      	add	r3, pc, #352	; (adr r3, 8012290 <__kernel_tan+0x378>)
 8012130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012134:	f7ee f8b2 	bl	800029c <__adddf3>
 8012138:	4622      	mov	r2, r4
 801213a:	462b      	mov	r3, r5
 801213c:	f7ee fa64 	bl	8000608 <__aeabi_dmul>
 8012140:	a355      	add	r3, pc, #340	; (adr r3, 8012298 <__kernel_tan+0x380>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	f7ee f8a9 	bl	800029c <__adddf3>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	ec51 0b1a 	vmov	r0, r1, d10
 8012152:	f7ee f8a3 	bl	800029c <__adddf3>
 8012156:	ec53 2b19 	vmov	r2, r3, d9
 801215a:	f7ee fa55 	bl	8000608 <__aeabi_dmul>
 801215e:	4642      	mov	r2, r8
 8012160:	464b      	mov	r3, r9
 8012162:	f7ee f89b 	bl	800029c <__adddf3>
 8012166:	ec53 2b18 	vmov	r2, r3, d8
 801216a:	f7ee fa4d 	bl	8000608 <__aeabi_dmul>
 801216e:	4642      	mov	r2, r8
 8012170:	464b      	mov	r3, r9
 8012172:	f7ee f893 	bl	800029c <__adddf3>
 8012176:	a34a      	add	r3, pc, #296	; (adr r3, 80122a0 <__kernel_tan+0x388>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	4604      	mov	r4, r0
 801217e:	460d      	mov	r5, r1
 8012180:	ec51 0b19 	vmov	r0, r1, d9
 8012184:	f7ee fa40 	bl	8000608 <__aeabi_dmul>
 8012188:	4622      	mov	r2, r4
 801218a:	462b      	mov	r3, r5
 801218c:	f7ee f886 	bl	800029c <__adddf3>
 8012190:	460b      	mov	r3, r1
 8012192:	ec41 0b18 	vmov	d8, r0, r1
 8012196:	4602      	mov	r2, r0
 8012198:	4659      	mov	r1, fp
 801219a:	4650      	mov	r0, sl
 801219c:	f7ee f87e 	bl	800029c <__adddf3>
 80121a0:	4b44      	ldr	r3, [pc, #272]	; (80122b4 <__kernel_tan+0x39c>)
 80121a2:	429f      	cmp	r7, r3
 80121a4:	4604      	mov	r4, r0
 80121a6:	460d      	mov	r5, r1
 80121a8:	f340 8086 	ble.w	80122b8 <__kernel_tan+0x3a0>
 80121ac:	4630      	mov	r0, r6
 80121ae:	f7ee f9c1 	bl	8000534 <__aeabi_i2d>
 80121b2:	4622      	mov	r2, r4
 80121b4:	4680      	mov	r8, r0
 80121b6:	4689      	mov	r9, r1
 80121b8:	462b      	mov	r3, r5
 80121ba:	4620      	mov	r0, r4
 80121bc:	4629      	mov	r1, r5
 80121be:	f7ee fa23 	bl	8000608 <__aeabi_dmul>
 80121c2:	4642      	mov	r2, r8
 80121c4:	4606      	mov	r6, r0
 80121c6:	460f      	mov	r7, r1
 80121c8:	464b      	mov	r3, r9
 80121ca:	4620      	mov	r0, r4
 80121cc:	4629      	mov	r1, r5
 80121ce:	f7ee f865 	bl	800029c <__adddf3>
 80121d2:	4602      	mov	r2, r0
 80121d4:	460b      	mov	r3, r1
 80121d6:	4630      	mov	r0, r6
 80121d8:	4639      	mov	r1, r7
 80121da:	f7ee fb3f 	bl	800085c <__aeabi_ddiv>
 80121de:	ec53 2b18 	vmov	r2, r3, d8
 80121e2:	f7ee f859 	bl	8000298 <__aeabi_dsub>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	4650      	mov	r0, sl
 80121ec:	4659      	mov	r1, fp
 80121ee:	f7ee f853 	bl	8000298 <__aeabi_dsub>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	f7ee f851 	bl	800029c <__adddf3>
 80121fa:	4602      	mov	r2, r0
 80121fc:	460b      	mov	r3, r1
 80121fe:	4640      	mov	r0, r8
 8012200:	4649      	mov	r1, r9
 8012202:	f7ee f849 	bl	8000298 <__aeabi_dsub>
 8012206:	9b00      	ldr	r3, [sp, #0]
 8012208:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801220c:	f00a 0a02 	and.w	sl, sl, #2
 8012210:	4604      	mov	r4, r0
 8012212:	f1ca 0001 	rsb	r0, sl, #1
 8012216:	460d      	mov	r5, r1
 8012218:	f7ee f98c 	bl	8000534 <__aeabi_i2d>
 801221c:	4602      	mov	r2, r0
 801221e:	460b      	mov	r3, r1
 8012220:	4620      	mov	r0, r4
 8012222:	4629      	mov	r1, r5
 8012224:	f7ee f9f0 	bl	8000608 <__aeabi_dmul>
 8012228:	e69f      	b.n	8011f6a <__kernel_tan+0x52>
 801222a:	bf00      	nop
 801222c:	f3af 8000 	nop.w
 8012230:	54442d18 	.word	0x54442d18
 8012234:	3fe921fb 	.word	0x3fe921fb
 8012238:	33145c07 	.word	0x33145c07
 801223c:	3c81a626 	.word	0x3c81a626
 8012240:	74bf7ad4 	.word	0x74bf7ad4
 8012244:	3efb2a70 	.word	0x3efb2a70
 8012248:	32f0a7e9 	.word	0x32f0a7e9
 801224c:	3f12b80f 	.word	0x3f12b80f
 8012250:	1a8d1068 	.word	0x1a8d1068
 8012254:	3f3026f7 	.word	0x3f3026f7
 8012258:	fee08315 	.word	0xfee08315
 801225c:	3f57dbc8 	.word	0x3f57dbc8
 8012260:	e96e8493 	.word	0xe96e8493
 8012264:	3f8226e3 	.word	0x3f8226e3
 8012268:	1bb341fe 	.word	0x1bb341fe
 801226c:	3faba1ba 	.word	0x3faba1ba
 8012270:	db605373 	.word	0xdb605373
 8012274:	bef375cb 	.word	0xbef375cb
 8012278:	a03792a6 	.word	0xa03792a6
 801227c:	3f147e88 	.word	0x3f147e88
 8012280:	f2f26501 	.word	0xf2f26501
 8012284:	3f4344d8 	.word	0x3f4344d8
 8012288:	c9560328 	.word	0xc9560328
 801228c:	3f6d6d22 	.word	0x3f6d6d22
 8012290:	8406d637 	.word	0x8406d637
 8012294:	3f9664f4 	.word	0x3f9664f4
 8012298:	1110fe7a 	.word	0x1110fe7a
 801229c:	3fc11111 	.word	0x3fc11111
 80122a0:	55555563 	.word	0x55555563
 80122a4:	3fd55555 	.word	0x3fd55555
 80122a8:	3e2fffff 	.word	0x3e2fffff
 80122ac:	3ff00000 	.word	0x3ff00000
 80122b0:	bff00000 	.word	0xbff00000
 80122b4:	3fe59427 	.word	0x3fe59427
 80122b8:	2e01      	cmp	r6, #1
 80122ba:	d02f      	beq.n	801231c <__kernel_tan+0x404>
 80122bc:	460f      	mov	r7, r1
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4689      	mov	r9, r1
 80122c4:	2000      	movs	r0, #0
 80122c6:	4917      	ldr	r1, [pc, #92]	; (8012324 <__kernel_tan+0x40c>)
 80122c8:	f7ee fac8 	bl	800085c <__aeabi_ddiv>
 80122cc:	2600      	movs	r6, #0
 80122ce:	e9cd 0100 	strd	r0, r1, [sp]
 80122d2:	4652      	mov	r2, sl
 80122d4:	465b      	mov	r3, fp
 80122d6:	4630      	mov	r0, r6
 80122d8:	4639      	mov	r1, r7
 80122da:	f7ed ffdd 	bl	8000298 <__aeabi_dsub>
 80122de:	e9dd 4500 	ldrd	r4, r5, [sp]
 80122e2:	4602      	mov	r2, r0
 80122e4:	460b      	mov	r3, r1
 80122e6:	ec51 0b18 	vmov	r0, r1, d8
 80122ea:	f7ed ffd5 	bl	8000298 <__aeabi_dsub>
 80122ee:	4632      	mov	r2, r6
 80122f0:	462b      	mov	r3, r5
 80122f2:	f7ee f989 	bl	8000608 <__aeabi_dmul>
 80122f6:	46b0      	mov	r8, r6
 80122f8:	460f      	mov	r7, r1
 80122fa:	4642      	mov	r2, r8
 80122fc:	462b      	mov	r3, r5
 80122fe:	4634      	mov	r4, r6
 8012300:	4649      	mov	r1, r9
 8012302:	4606      	mov	r6, r0
 8012304:	4640      	mov	r0, r8
 8012306:	f7ee f97f 	bl	8000608 <__aeabi_dmul>
 801230a:	4b07      	ldr	r3, [pc, #28]	; (8012328 <__kernel_tan+0x410>)
 801230c:	2200      	movs	r2, #0
 801230e:	f7ed ffc5 	bl	800029c <__adddf3>
 8012312:	4602      	mov	r2, r0
 8012314:	460b      	mov	r3, r1
 8012316:	4630      	mov	r0, r6
 8012318:	4639      	mov	r1, r7
 801231a:	e665      	b.n	8011fe8 <__kernel_tan+0xd0>
 801231c:	4682      	mov	sl, r0
 801231e:	468b      	mov	fp, r1
 8012320:	e625      	b.n	8011f6e <__kernel_tan+0x56>
 8012322:	bf00      	nop
 8012324:	bff00000 	.word	0xbff00000
 8012328:	3ff00000 	.word	0x3ff00000

0801232c <__kernel_cosf>:
 801232c:	ee10 3a10 	vmov	r3, s0
 8012330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012334:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012338:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801233c:	da05      	bge.n	801234a <__kernel_cosf+0x1e>
 801233e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012342:	ee17 2a90 	vmov	r2, s15
 8012346:	2a00      	cmp	r2, #0
 8012348:	d03d      	beq.n	80123c6 <__kernel_cosf+0x9a>
 801234a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801234e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80123cc <__kernel_cosf+0xa0>
 8012352:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80123d0 <__kernel_cosf+0xa4>
 8012356:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80123d4 <__kernel_cosf+0xa8>
 801235a:	4a1f      	ldr	r2, [pc, #124]	; (80123d8 <__kernel_cosf+0xac>)
 801235c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012360:	4293      	cmp	r3, r2
 8012362:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80123dc <__kernel_cosf+0xb0>
 8012366:	eee7 7a25 	vfma.f32	s15, s14, s11
 801236a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80123e0 <__kernel_cosf+0xb4>
 801236e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012372:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80123e4 <__kernel_cosf+0xb8>
 8012376:	eee7 7a25 	vfma.f32	s15, s14, s11
 801237a:	eeb0 7a66 	vmov.f32	s14, s13
 801237e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012382:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012386:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801238a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801238e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8012392:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012396:	dc04      	bgt.n	80123a2 <__kernel_cosf+0x76>
 8012398:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801239c:	ee36 0a47 	vsub.f32	s0, s12, s14
 80123a0:	4770      	bx	lr
 80123a2:	4a11      	ldr	r2, [pc, #68]	; (80123e8 <__kernel_cosf+0xbc>)
 80123a4:	4293      	cmp	r3, r2
 80123a6:	bfda      	itte	le
 80123a8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80123ac:	ee06 3a90 	vmovle	s13, r3
 80123b0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80123b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80123b8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80123bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80123c4:	4770      	bx	lr
 80123c6:	eeb0 0a46 	vmov.f32	s0, s12
 80123ca:	4770      	bx	lr
 80123cc:	ad47d74e 	.word	0xad47d74e
 80123d0:	310f74f6 	.word	0x310f74f6
 80123d4:	3d2aaaab 	.word	0x3d2aaaab
 80123d8:	3e999999 	.word	0x3e999999
 80123dc:	b493f27c 	.word	0xb493f27c
 80123e0:	37d00d01 	.word	0x37d00d01
 80123e4:	bab60b61 	.word	0xbab60b61
 80123e8:	3f480000 	.word	0x3f480000

080123ec <__kernel_rem_pio2f>:
 80123ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f0:	ed2d 8b04 	vpush	{d8-d9}
 80123f4:	b0d9      	sub	sp, #356	; 0x164
 80123f6:	4688      	mov	r8, r1
 80123f8:	9002      	str	r0, [sp, #8]
 80123fa:	49bb      	ldr	r1, [pc, #748]	; (80126e8 <__kernel_rem_pio2f+0x2fc>)
 80123fc:	9866      	ldr	r0, [sp, #408]	; 0x198
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8012404:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8012408:	1e59      	subs	r1, r3, #1
 801240a:	1d13      	adds	r3, r2, #4
 801240c:	db27      	blt.n	801245e <__kernel_rem_pio2f+0x72>
 801240e:	f1b2 0b03 	subs.w	fp, r2, #3
 8012412:	bf48      	it	mi
 8012414:	f102 0b04 	addmi.w	fp, r2, #4
 8012418:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801241c:	1c45      	adds	r5, r0, #1
 801241e:	00ec      	lsls	r4, r5, #3
 8012420:	1a47      	subs	r7, r0, r1
 8012422:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 8012426:	9403      	str	r4, [sp, #12]
 8012428:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801242c:	eb0a 0c01 	add.w	ip, sl, r1
 8012430:	ae1c      	add	r6, sp, #112	; 0x70
 8012432:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8012436:	2400      	movs	r4, #0
 8012438:	4564      	cmp	r4, ip
 801243a:	dd12      	ble.n	8012462 <__kernel_rem_pio2f+0x76>
 801243c:	9b01      	ldr	r3, [sp, #4]
 801243e:	ac1c      	add	r4, sp, #112	; 0x70
 8012440:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012444:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8012448:	f04f 0c00 	mov.w	ip, #0
 801244c:	45d4      	cmp	ip, sl
 801244e:	dc27      	bgt.n	80124a0 <__kernel_rem_pio2f+0xb4>
 8012450:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8012454:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 8012458:	4627      	mov	r7, r4
 801245a:	2600      	movs	r6, #0
 801245c:	e016      	b.n	801248c <__kernel_rem_pio2f+0xa0>
 801245e:	2000      	movs	r0, #0
 8012460:	e7dc      	b.n	801241c <__kernel_rem_pio2f+0x30>
 8012462:	42e7      	cmn	r7, r4
 8012464:	bf5d      	ittte	pl
 8012466:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801246a:	ee07 3a90 	vmovpl	s15, r3
 801246e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012472:	eef0 7a47 	vmovmi.f32	s15, s14
 8012476:	ece6 7a01 	vstmia	r6!, {s15}
 801247a:	3401      	adds	r4, #1
 801247c:	e7dc      	b.n	8012438 <__kernel_rem_pio2f+0x4c>
 801247e:	ecf9 6a01 	vldmia	r9!, {s13}
 8012482:	ed97 7a00 	vldr	s14, [r7]
 8012486:	eee6 7a87 	vfma.f32	s15, s13, s14
 801248a:	3601      	adds	r6, #1
 801248c:	428e      	cmp	r6, r1
 801248e:	f1a7 0704 	sub.w	r7, r7, #4
 8012492:	ddf4      	ble.n	801247e <__kernel_rem_pio2f+0x92>
 8012494:	eceb 7a01 	vstmia	fp!, {s15}
 8012498:	f10c 0c01 	add.w	ip, ip, #1
 801249c:	3404      	adds	r4, #4
 801249e:	e7d5      	b.n	801244c <__kernel_rem_pio2f+0x60>
 80124a0:	ab08      	add	r3, sp, #32
 80124a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80124a6:	eddf 8a93 	vldr	s17, [pc, #588]	; 80126f4 <__kernel_rem_pio2f+0x308>
 80124aa:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80126f0 <__kernel_rem_pio2f+0x304>
 80124ae:	9304      	str	r3, [sp, #16]
 80124b0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80124b4:	4656      	mov	r6, sl
 80124b6:	00b3      	lsls	r3, r6, #2
 80124b8:	9305      	str	r3, [sp, #20]
 80124ba:	ab58      	add	r3, sp, #352	; 0x160
 80124bc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80124c0:	ac08      	add	r4, sp, #32
 80124c2:	ab44      	add	r3, sp, #272	; 0x110
 80124c4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80124c8:	46a4      	mov	ip, r4
 80124ca:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80124ce:	4637      	mov	r7, r6
 80124d0:	2f00      	cmp	r7, #0
 80124d2:	f1a0 0004 	sub.w	r0, r0, #4
 80124d6:	dc4f      	bgt.n	8012578 <__kernel_rem_pio2f+0x18c>
 80124d8:	4628      	mov	r0, r5
 80124da:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80124de:	f000 fb93 	bl	8012c08 <scalbnf>
 80124e2:	eeb0 8a40 	vmov.f32	s16, s0
 80124e6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80124ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80124ee:	f000 fb49 	bl	8012b84 <floorf>
 80124f2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80124f6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80124fa:	2d00      	cmp	r5, #0
 80124fc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012500:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012504:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8012508:	ee17 9a90 	vmov	r9, s15
 801250c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012510:	dd44      	ble.n	801259c <__kernel_rem_pio2f+0x1b0>
 8012512:	f106 3cff 	add.w	ip, r6, #4294967295
 8012516:	ab08      	add	r3, sp, #32
 8012518:	f1c5 0e08 	rsb	lr, r5, #8
 801251c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8012520:	fa47 f00e 	asr.w	r0, r7, lr
 8012524:	4481      	add	r9, r0
 8012526:	fa00 f00e 	lsl.w	r0, r0, lr
 801252a:	1a3f      	subs	r7, r7, r0
 801252c:	f1c5 0007 	rsb	r0, r5, #7
 8012530:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8012534:	4107      	asrs	r7, r0
 8012536:	2f00      	cmp	r7, #0
 8012538:	dd3f      	ble.n	80125ba <__kernel_rem_pio2f+0x1ce>
 801253a:	f04f 0e00 	mov.w	lr, #0
 801253e:	f109 0901 	add.w	r9, r9, #1
 8012542:	4673      	mov	r3, lr
 8012544:	4576      	cmp	r6, lr
 8012546:	dc6b      	bgt.n	8012620 <__kernel_rem_pio2f+0x234>
 8012548:	2d00      	cmp	r5, #0
 801254a:	dd04      	ble.n	8012556 <__kernel_rem_pio2f+0x16a>
 801254c:	2d01      	cmp	r5, #1
 801254e:	d078      	beq.n	8012642 <__kernel_rem_pio2f+0x256>
 8012550:	2d02      	cmp	r5, #2
 8012552:	f000 8081 	beq.w	8012658 <__kernel_rem_pio2f+0x26c>
 8012556:	2f02      	cmp	r7, #2
 8012558:	d12f      	bne.n	80125ba <__kernel_rem_pio2f+0x1ce>
 801255a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801255e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012562:	b353      	cbz	r3, 80125ba <__kernel_rem_pio2f+0x1ce>
 8012564:	4628      	mov	r0, r5
 8012566:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801256a:	f000 fb4d 	bl	8012c08 <scalbnf>
 801256e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012572:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012576:	e020      	b.n	80125ba <__kernel_rem_pio2f+0x1ce>
 8012578:	ee60 7a28 	vmul.f32	s15, s0, s17
 801257c:	3f01      	subs	r7, #1
 801257e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012586:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801258a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801258e:	ecac 0a01 	vstmia	ip!, {s0}
 8012592:	ed90 0a00 	vldr	s0, [r0]
 8012596:	ee37 0a80 	vadd.f32	s0, s15, s0
 801259a:	e799      	b.n	80124d0 <__kernel_rem_pio2f+0xe4>
 801259c:	d105      	bne.n	80125aa <__kernel_rem_pio2f+0x1be>
 801259e:	1e70      	subs	r0, r6, #1
 80125a0:	ab08      	add	r3, sp, #32
 80125a2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80125a6:	11ff      	asrs	r7, r7, #7
 80125a8:	e7c5      	b.n	8012536 <__kernel_rem_pio2f+0x14a>
 80125aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80125ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80125b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b6:	da31      	bge.n	801261c <__kernel_rem_pio2f+0x230>
 80125b8:	2700      	movs	r7, #0
 80125ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	f040 809b 	bne.w	80126fc <__kernel_rem_pio2f+0x310>
 80125c6:	1e74      	subs	r4, r6, #1
 80125c8:	46a4      	mov	ip, r4
 80125ca:	2000      	movs	r0, #0
 80125cc:	45d4      	cmp	ip, sl
 80125ce:	da4a      	bge.n	8012666 <__kernel_rem_pio2f+0x27a>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d07a      	beq.n	80126ca <__kernel_rem_pio2f+0x2de>
 80125d4:	ab08      	add	r3, sp, #32
 80125d6:	3d08      	subs	r5, #8
 80125d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f000 8081 	beq.w	80126e4 <__kernel_rem_pio2f+0x2f8>
 80125e2:	4628      	mov	r0, r5
 80125e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80125e8:	00a5      	lsls	r5, r4, #2
 80125ea:	f000 fb0d 	bl	8012c08 <scalbnf>
 80125ee:	aa44      	add	r2, sp, #272	; 0x110
 80125f0:	1d2b      	adds	r3, r5, #4
 80125f2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80126f4 <__kernel_rem_pio2f+0x308>
 80125f6:	18d1      	adds	r1, r2, r3
 80125f8:	4622      	mov	r2, r4
 80125fa:	2a00      	cmp	r2, #0
 80125fc:	f280 80ae 	bge.w	801275c <__kernel_rem_pio2f+0x370>
 8012600:	4622      	mov	r2, r4
 8012602:	2a00      	cmp	r2, #0
 8012604:	f2c0 80cc 	blt.w	80127a0 <__kernel_rem_pio2f+0x3b4>
 8012608:	a944      	add	r1, sp, #272	; 0x110
 801260a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801260e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80126ec <__kernel_rem_pio2f+0x300>
 8012612:	eddf 7a39 	vldr	s15, [pc, #228]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 8012616:	2000      	movs	r0, #0
 8012618:	1aa1      	subs	r1, r4, r2
 801261a:	e0b6      	b.n	801278a <__kernel_rem_pio2f+0x39e>
 801261c:	2702      	movs	r7, #2
 801261e:	e78c      	b.n	801253a <__kernel_rem_pio2f+0x14e>
 8012620:	6820      	ldr	r0, [r4, #0]
 8012622:	b94b      	cbnz	r3, 8012638 <__kernel_rem_pio2f+0x24c>
 8012624:	b118      	cbz	r0, 801262e <__kernel_rem_pio2f+0x242>
 8012626:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801262a:	6020      	str	r0, [r4, #0]
 801262c:	2001      	movs	r0, #1
 801262e:	f10e 0e01 	add.w	lr, lr, #1
 8012632:	3404      	adds	r4, #4
 8012634:	4603      	mov	r3, r0
 8012636:	e785      	b.n	8012544 <__kernel_rem_pio2f+0x158>
 8012638:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801263c:	6020      	str	r0, [r4, #0]
 801263e:	4618      	mov	r0, r3
 8012640:	e7f5      	b.n	801262e <__kernel_rem_pio2f+0x242>
 8012642:	1e74      	subs	r4, r6, #1
 8012644:	a808      	add	r0, sp, #32
 8012646:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801264a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801264e:	f10d 0c20 	add.w	ip, sp, #32
 8012652:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8012656:	e77e      	b.n	8012556 <__kernel_rem_pio2f+0x16a>
 8012658:	1e74      	subs	r4, r6, #1
 801265a:	a808      	add	r0, sp, #32
 801265c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012660:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8012664:	e7f3      	b.n	801264e <__kernel_rem_pio2f+0x262>
 8012666:	ab08      	add	r3, sp, #32
 8012668:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801266c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012670:	4318      	orrs	r0, r3
 8012672:	e7ab      	b.n	80125cc <__kernel_rem_pio2f+0x1e0>
 8012674:	f10c 0c01 	add.w	ip, ip, #1
 8012678:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801267c:	2c00      	cmp	r4, #0
 801267e:	d0f9      	beq.n	8012674 <__kernel_rem_pio2f+0x288>
 8012680:	9b05      	ldr	r3, [sp, #20]
 8012682:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012686:	eb0d 0003 	add.w	r0, sp, r3
 801268a:	9b01      	ldr	r3, [sp, #4]
 801268c:	18f4      	adds	r4, r6, r3
 801268e:	ab1c      	add	r3, sp, #112	; 0x70
 8012690:	1c77      	adds	r7, r6, #1
 8012692:	384c      	subs	r0, #76	; 0x4c
 8012694:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012698:	4466      	add	r6, ip
 801269a:	42be      	cmp	r6, r7
 801269c:	f6ff af0b 	blt.w	80124b6 <__kernel_rem_pio2f+0xca>
 80126a0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80126a4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80126a8:	ee07 3a90 	vmov	s15, r3
 80126ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126b0:	f04f 0c00 	mov.w	ip, #0
 80126b4:	ece4 7a01 	vstmia	r4!, {s15}
 80126b8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 80126bc:	46a1      	mov	r9, r4
 80126be:	458c      	cmp	ip, r1
 80126c0:	dd07      	ble.n	80126d2 <__kernel_rem_pio2f+0x2e6>
 80126c2:	ece0 7a01 	vstmia	r0!, {s15}
 80126c6:	3701      	adds	r7, #1
 80126c8:	e7e7      	b.n	801269a <__kernel_rem_pio2f+0x2ae>
 80126ca:	9804      	ldr	r0, [sp, #16]
 80126cc:	f04f 0c01 	mov.w	ip, #1
 80126d0:	e7d2      	b.n	8012678 <__kernel_rem_pio2f+0x28c>
 80126d2:	ecfe 6a01 	vldmia	lr!, {s13}
 80126d6:	ed39 7a01 	vldmdb	r9!, {s14}
 80126da:	f10c 0c01 	add.w	ip, ip, #1
 80126de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80126e2:	e7ec      	b.n	80126be <__kernel_rem_pio2f+0x2d2>
 80126e4:	3c01      	subs	r4, #1
 80126e6:	e775      	b.n	80125d4 <__kernel_rem_pio2f+0x1e8>
 80126e8:	080137d4 	.word	0x080137d4
 80126ec:	080137a8 	.word	0x080137a8
 80126f0:	43800000 	.word	0x43800000
 80126f4:	3b800000 	.word	0x3b800000
 80126f8:	00000000 	.word	0x00000000
 80126fc:	9b03      	ldr	r3, [sp, #12]
 80126fe:	eeb0 0a48 	vmov.f32	s0, s16
 8012702:	1a98      	subs	r0, r3, r2
 8012704:	f000 fa80 	bl	8012c08 <scalbnf>
 8012708:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80126f0 <__kernel_rem_pio2f+0x304>
 801270c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	db19      	blt.n	801274a <__kernel_rem_pio2f+0x35e>
 8012716:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80126f4 <__kernel_rem_pio2f+0x308>
 801271a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801271e:	aa08      	add	r2, sp, #32
 8012720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012724:	1c74      	adds	r4, r6, #1
 8012726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801272a:	3508      	adds	r5, #8
 801272c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012734:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012738:	ee10 3a10 	vmov	r3, s0
 801273c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012740:	ee17 3a90 	vmov	r3, s15
 8012744:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012748:	e74b      	b.n	80125e2 <__kernel_rem_pio2f+0x1f6>
 801274a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801274e:	aa08      	add	r2, sp, #32
 8012750:	ee10 3a10 	vmov	r3, s0
 8012754:	4634      	mov	r4, r6
 8012756:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801275a:	e742      	b.n	80125e2 <__kernel_rem_pio2f+0x1f6>
 801275c:	a808      	add	r0, sp, #32
 801275e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012762:	9001      	str	r0, [sp, #4]
 8012764:	ee07 0a90 	vmov	s15, r0
 8012768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801276c:	3a01      	subs	r2, #1
 801276e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012772:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012776:	ed61 7a01 	vstmdb	r1!, {s15}
 801277a:	e73e      	b.n	80125fa <__kernel_rem_pio2f+0x20e>
 801277c:	ecfc 6a01 	vldmia	ip!, {s13}
 8012780:	ecb6 7a01 	vldmia	r6!, {s14}
 8012784:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012788:	3001      	adds	r0, #1
 801278a:	4550      	cmp	r0, sl
 801278c:	dc01      	bgt.n	8012792 <__kernel_rem_pio2f+0x3a6>
 801278e:	4288      	cmp	r0, r1
 8012790:	ddf4      	ble.n	801277c <__kernel_rem_pio2f+0x390>
 8012792:	a858      	add	r0, sp, #352	; 0x160
 8012794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012798:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801279c:	3a01      	subs	r2, #1
 801279e:	e730      	b.n	8012602 <__kernel_rem_pio2f+0x216>
 80127a0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80127a2:	2a02      	cmp	r2, #2
 80127a4:	dc09      	bgt.n	80127ba <__kernel_rem_pio2f+0x3ce>
 80127a6:	2a00      	cmp	r2, #0
 80127a8:	dc2a      	bgt.n	8012800 <__kernel_rem_pio2f+0x414>
 80127aa:	d043      	beq.n	8012834 <__kernel_rem_pio2f+0x448>
 80127ac:	f009 0007 	and.w	r0, r9, #7
 80127b0:	b059      	add	sp, #356	; 0x164
 80127b2:	ecbd 8b04 	vpop	{d8-d9}
 80127b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ba:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80127bc:	2b03      	cmp	r3, #3
 80127be:	d1f5      	bne.n	80127ac <__kernel_rem_pio2f+0x3c0>
 80127c0:	ab30      	add	r3, sp, #192	; 0xc0
 80127c2:	442b      	add	r3, r5
 80127c4:	461a      	mov	r2, r3
 80127c6:	4619      	mov	r1, r3
 80127c8:	4620      	mov	r0, r4
 80127ca:	2800      	cmp	r0, #0
 80127cc:	f1a1 0104 	sub.w	r1, r1, #4
 80127d0:	dc51      	bgt.n	8012876 <__kernel_rem_pio2f+0x48a>
 80127d2:	4621      	mov	r1, r4
 80127d4:	2901      	cmp	r1, #1
 80127d6:	f1a2 0204 	sub.w	r2, r2, #4
 80127da:	dc5c      	bgt.n	8012896 <__kernel_rem_pio2f+0x4aa>
 80127dc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 80127e0:	3304      	adds	r3, #4
 80127e2:	2c01      	cmp	r4, #1
 80127e4:	dc67      	bgt.n	80128b6 <__kernel_rem_pio2f+0x4ca>
 80127e6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80127ea:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80127ee:	2f00      	cmp	r7, #0
 80127f0:	d167      	bne.n	80128c2 <__kernel_rem_pio2f+0x4d6>
 80127f2:	edc8 6a00 	vstr	s13, [r8]
 80127f6:	ed88 7a01 	vstr	s14, [r8, #4]
 80127fa:	edc8 7a02 	vstr	s15, [r8, #8]
 80127fe:	e7d5      	b.n	80127ac <__kernel_rem_pio2f+0x3c0>
 8012800:	aa30      	add	r2, sp, #192	; 0xc0
 8012802:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 8012806:	4413      	add	r3, r2
 8012808:	4622      	mov	r2, r4
 801280a:	2a00      	cmp	r2, #0
 801280c:	da24      	bge.n	8012858 <__kernel_rem_pio2f+0x46c>
 801280e:	b34f      	cbz	r7, 8012864 <__kernel_rem_pio2f+0x478>
 8012810:	eef1 7a47 	vneg.f32	s15, s14
 8012814:	edc8 7a00 	vstr	s15, [r8]
 8012818:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801281c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012820:	aa31      	add	r2, sp, #196	; 0xc4
 8012822:	2301      	movs	r3, #1
 8012824:	429c      	cmp	r4, r3
 8012826:	da20      	bge.n	801286a <__kernel_rem_pio2f+0x47e>
 8012828:	b10f      	cbz	r7, 801282e <__kernel_rem_pio2f+0x442>
 801282a:	eef1 7a67 	vneg.f32	s15, s15
 801282e:	edc8 7a01 	vstr	s15, [r8, #4]
 8012832:	e7bb      	b.n	80127ac <__kernel_rem_pio2f+0x3c0>
 8012834:	aa30      	add	r2, sp, #192	; 0xc0
 8012836:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80126f8 <__kernel_rem_pio2f+0x30c>
 801283a:	4413      	add	r3, r2
 801283c:	2c00      	cmp	r4, #0
 801283e:	da05      	bge.n	801284c <__kernel_rem_pio2f+0x460>
 8012840:	b10f      	cbz	r7, 8012846 <__kernel_rem_pio2f+0x45a>
 8012842:	eef1 7a67 	vneg.f32	s15, s15
 8012846:	edc8 7a00 	vstr	s15, [r8]
 801284a:	e7af      	b.n	80127ac <__kernel_rem_pio2f+0x3c0>
 801284c:	ed33 7a01 	vldmdb	r3!, {s14}
 8012850:	3c01      	subs	r4, #1
 8012852:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012856:	e7f1      	b.n	801283c <__kernel_rem_pio2f+0x450>
 8012858:	ed73 7a01 	vldmdb	r3!, {s15}
 801285c:	3a01      	subs	r2, #1
 801285e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012862:	e7d2      	b.n	801280a <__kernel_rem_pio2f+0x41e>
 8012864:	eef0 7a47 	vmov.f32	s15, s14
 8012868:	e7d4      	b.n	8012814 <__kernel_rem_pio2f+0x428>
 801286a:	ecb2 7a01 	vldmia	r2!, {s14}
 801286e:	3301      	adds	r3, #1
 8012870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012874:	e7d6      	b.n	8012824 <__kernel_rem_pio2f+0x438>
 8012876:	edd1 7a00 	vldr	s15, [r1]
 801287a:	edd1 6a01 	vldr	s13, [r1, #4]
 801287e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012882:	3801      	subs	r0, #1
 8012884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012888:	ed81 7a00 	vstr	s14, [r1]
 801288c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012890:	edc1 7a01 	vstr	s15, [r1, #4]
 8012894:	e799      	b.n	80127ca <__kernel_rem_pio2f+0x3de>
 8012896:	edd2 7a00 	vldr	s15, [r2]
 801289a:	edd2 6a01 	vldr	s13, [r2, #4]
 801289e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80128a2:	3901      	subs	r1, #1
 80128a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128a8:	ed82 7a00 	vstr	s14, [r2]
 80128ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128b0:	edc2 7a01 	vstr	s15, [r2, #4]
 80128b4:	e78e      	b.n	80127d4 <__kernel_rem_pio2f+0x3e8>
 80128b6:	ed33 7a01 	vldmdb	r3!, {s14}
 80128ba:	3c01      	subs	r4, #1
 80128bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80128c0:	e78f      	b.n	80127e2 <__kernel_rem_pio2f+0x3f6>
 80128c2:	eef1 6a66 	vneg.f32	s13, s13
 80128c6:	eeb1 7a47 	vneg.f32	s14, s14
 80128ca:	edc8 6a00 	vstr	s13, [r8]
 80128ce:	ed88 7a01 	vstr	s14, [r8, #4]
 80128d2:	eef1 7a67 	vneg.f32	s15, s15
 80128d6:	e790      	b.n	80127fa <__kernel_rem_pio2f+0x40e>

080128d8 <__kernel_sinf>:
 80128d8:	ee10 3a10 	vmov	r3, s0
 80128dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80128e4:	da04      	bge.n	80128f0 <__kernel_sinf+0x18>
 80128e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80128ea:	ee17 3a90 	vmov	r3, s15
 80128ee:	b35b      	cbz	r3, 8012948 <__kernel_sinf+0x70>
 80128f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80128f4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801294c <__kernel_sinf+0x74>
 80128f8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012950 <__kernel_sinf+0x78>
 80128fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012900:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012954 <__kernel_sinf+0x7c>
 8012904:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012908:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012958 <__kernel_sinf+0x80>
 801290c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012910:	eddf 7a12 	vldr	s15, [pc, #72]	; 801295c <__kernel_sinf+0x84>
 8012914:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012918:	eee6 7a07 	vfma.f32	s15, s12, s14
 801291c:	b930      	cbnz	r0, 801292c <__kernel_sinf+0x54>
 801291e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012960 <__kernel_sinf+0x88>
 8012922:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012926:	eea6 0a26 	vfma.f32	s0, s12, s13
 801292a:	4770      	bx	lr
 801292c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012930:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012934:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012938:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801293c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012964 <__kernel_sinf+0x8c>
 8012940:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012944:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop
 801294c:	2f2ec9d3 	.word	0x2f2ec9d3
 8012950:	b2d72f34 	.word	0xb2d72f34
 8012954:	3638ef1b 	.word	0x3638ef1b
 8012958:	b9500d01 	.word	0xb9500d01
 801295c:	3c088889 	.word	0x3c088889
 8012960:	be2aaaab 	.word	0xbe2aaaab
 8012964:	3e2aaaab 	.word	0x3e2aaaab

08012968 <floor>:
 8012968:	ec51 0b10 	vmov	r0, r1, d0
 801296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012978:	2e13      	cmp	r6, #19
 801297a:	ee10 5a10 	vmov	r5, s0
 801297e:	ee10 8a10 	vmov	r8, s0
 8012982:	460c      	mov	r4, r1
 8012984:	dc32      	bgt.n	80129ec <floor+0x84>
 8012986:	2e00      	cmp	r6, #0
 8012988:	da14      	bge.n	80129b4 <floor+0x4c>
 801298a:	a333      	add	r3, pc, #204	; (adr r3, 8012a58 <floor+0xf0>)
 801298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012990:	f7ed fc84 	bl	800029c <__adddf3>
 8012994:	2200      	movs	r2, #0
 8012996:	2300      	movs	r3, #0
 8012998:	f7ee f8c6 	bl	8000b28 <__aeabi_dcmpgt>
 801299c:	b138      	cbz	r0, 80129ae <floor+0x46>
 801299e:	2c00      	cmp	r4, #0
 80129a0:	da57      	bge.n	8012a52 <floor+0xea>
 80129a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129a6:	431d      	orrs	r5, r3
 80129a8:	d001      	beq.n	80129ae <floor+0x46>
 80129aa:	4c2d      	ldr	r4, [pc, #180]	; (8012a60 <floor+0xf8>)
 80129ac:	2500      	movs	r5, #0
 80129ae:	4621      	mov	r1, r4
 80129b0:	4628      	mov	r0, r5
 80129b2:	e025      	b.n	8012a00 <floor+0x98>
 80129b4:	4f2b      	ldr	r7, [pc, #172]	; (8012a64 <floor+0xfc>)
 80129b6:	4137      	asrs	r7, r6
 80129b8:	ea01 0307 	and.w	r3, r1, r7
 80129bc:	4303      	orrs	r3, r0
 80129be:	d01f      	beq.n	8012a00 <floor+0x98>
 80129c0:	a325      	add	r3, pc, #148	; (adr r3, 8012a58 <floor+0xf0>)
 80129c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c6:	f7ed fc69 	bl	800029c <__adddf3>
 80129ca:	2200      	movs	r2, #0
 80129cc:	2300      	movs	r3, #0
 80129ce:	f7ee f8ab 	bl	8000b28 <__aeabi_dcmpgt>
 80129d2:	2800      	cmp	r0, #0
 80129d4:	d0eb      	beq.n	80129ae <floor+0x46>
 80129d6:	2c00      	cmp	r4, #0
 80129d8:	bfbe      	ittt	lt
 80129da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80129de:	fa43 f606 	asrlt.w	r6, r3, r6
 80129e2:	19a4      	addlt	r4, r4, r6
 80129e4:	ea24 0407 	bic.w	r4, r4, r7
 80129e8:	2500      	movs	r5, #0
 80129ea:	e7e0      	b.n	80129ae <floor+0x46>
 80129ec:	2e33      	cmp	r6, #51	; 0x33
 80129ee:	dd0b      	ble.n	8012a08 <floor+0xa0>
 80129f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80129f4:	d104      	bne.n	8012a00 <floor+0x98>
 80129f6:	ee10 2a10 	vmov	r2, s0
 80129fa:	460b      	mov	r3, r1
 80129fc:	f7ed fc4e 	bl	800029c <__adddf3>
 8012a00:	ec41 0b10 	vmov	d0, r0, r1
 8012a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a08:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a10:	fa23 f707 	lsr.w	r7, r3, r7
 8012a14:	4207      	tst	r7, r0
 8012a16:	d0f3      	beq.n	8012a00 <floor+0x98>
 8012a18:	a30f      	add	r3, pc, #60	; (adr r3, 8012a58 <floor+0xf0>)
 8012a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1e:	f7ed fc3d 	bl	800029c <__adddf3>
 8012a22:	2200      	movs	r2, #0
 8012a24:	2300      	movs	r3, #0
 8012a26:	f7ee f87f 	bl	8000b28 <__aeabi_dcmpgt>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d0bf      	beq.n	80129ae <floor+0x46>
 8012a2e:	2c00      	cmp	r4, #0
 8012a30:	da02      	bge.n	8012a38 <floor+0xd0>
 8012a32:	2e14      	cmp	r6, #20
 8012a34:	d103      	bne.n	8012a3e <floor+0xd6>
 8012a36:	3401      	adds	r4, #1
 8012a38:	ea25 0507 	bic.w	r5, r5, r7
 8012a3c:	e7b7      	b.n	80129ae <floor+0x46>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a44:	fa03 f606 	lsl.w	r6, r3, r6
 8012a48:	4435      	add	r5, r6
 8012a4a:	4545      	cmp	r5, r8
 8012a4c:	bf38      	it	cc
 8012a4e:	18e4      	addcc	r4, r4, r3
 8012a50:	e7f2      	b.n	8012a38 <floor+0xd0>
 8012a52:	2500      	movs	r5, #0
 8012a54:	462c      	mov	r4, r5
 8012a56:	e7aa      	b.n	80129ae <floor+0x46>
 8012a58:	8800759c 	.word	0x8800759c
 8012a5c:	7e37e43c 	.word	0x7e37e43c
 8012a60:	bff00000 	.word	0xbff00000
 8012a64:	000fffff 	.word	0x000fffff

08012a68 <scalbn>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	ec55 4b10 	vmov	r4, r5, d0
 8012a6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a72:	4606      	mov	r6, r0
 8012a74:	462b      	mov	r3, r5
 8012a76:	b99a      	cbnz	r2, 8012aa0 <scalbn+0x38>
 8012a78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a7c:	4323      	orrs	r3, r4
 8012a7e:	d036      	beq.n	8012aee <scalbn+0x86>
 8012a80:	4b39      	ldr	r3, [pc, #228]	; (8012b68 <scalbn+0x100>)
 8012a82:	4629      	mov	r1, r5
 8012a84:	ee10 0a10 	vmov	r0, s0
 8012a88:	2200      	movs	r2, #0
 8012a8a:	f7ed fdbd 	bl	8000608 <__aeabi_dmul>
 8012a8e:	4b37      	ldr	r3, [pc, #220]	; (8012b6c <scalbn+0x104>)
 8012a90:	429e      	cmp	r6, r3
 8012a92:	4604      	mov	r4, r0
 8012a94:	460d      	mov	r5, r1
 8012a96:	da10      	bge.n	8012aba <scalbn+0x52>
 8012a98:	a32b      	add	r3, pc, #172	; (adr r3, 8012b48 <scalbn+0xe0>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	e03a      	b.n	8012b16 <scalbn+0xae>
 8012aa0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012aa4:	428a      	cmp	r2, r1
 8012aa6:	d10c      	bne.n	8012ac2 <scalbn+0x5a>
 8012aa8:	ee10 2a10 	vmov	r2, s0
 8012aac:	4620      	mov	r0, r4
 8012aae:	4629      	mov	r1, r5
 8012ab0:	f7ed fbf4 	bl	800029c <__adddf3>
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	460d      	mov	r5, r1
 8012ab8:	e019      	b.n	8012aee <scalbn+0x86>
 8012aba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012abe:	460b      	mov	r3, r1
 8012ac0:	3a36      	subs	r2, #54	; 0x36
 8012ac2:	4432      	add	r2, r6
 8012ac4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012ac8:	428a      	cmp	r2, r1
 8012aca:	dd08      	ble.n	8012ade <scalbn+0x76>
 8012acc:	2d00      	cmp	r5, #0
 8012ace:	a120      	add	r1, pc, #128	; (adr r1, 8012b50 <scalbn+0xe8>)
 8012ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ad4:	da1c      	bge.n	8012b10 <scalbn+0xa8>
 8012ad6:	a120      	add	r1, pc, #128	; (adr r1, 8012b58 <scalbn+0xf0>)
 8012ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012adc:	e018      	b.n	8012b10 <scalbn+0xa8>
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	dd08      	ble.n	8012af4 <scalbn+0x8c>
 8012ae2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ae6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012aea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012aee:	ec45 4b10 	vmov	d0, r4, r5
 8012af2:	bd70      	pop	{r4, r5, r6, pc}
 8012af4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012af8:	da19      	bge.n	8012b2e <scalbn+0xc6>
 8012afa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012afe:	429e      	cmp	r6, r3
 8012b00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012b04:	dd0a      	ble.n	8012b1c <scalbn+0xb4>
 8012b06:	a112      	add	r1, pc, #72	; (adr r1, 8012b50 <scalbn+0xe8>)
 8012b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d1e2      	bne.n	8012ad6 <scalbn+0x6e>
 8012b10:	a30f      	add	r3, pc, #60	; (adr r3, 8012b50 <scalbn+0xe8>)
 8012b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b16:	f7ed fd77 	bl	8000608 <__aeabi_dmul>
 8012b1a:	e7cb      	b.n	8012ab4 <scalbn+0x4c>
 8012b1c:	a10a      	add	r1, pc, #40	; (adr r1, 8012b48 <scalbn+0xe0>)
 8012b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d0b8      	beq.n	8012a98 <scalbn+0x30>
 8012b26:	a10e      	add	r1, pc, #56	; (adr r1, 8012b60 <scalbn+0xf8>)
 8012b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b2c:	e7b4      	b.n	8012a98 <scalbn+0x30>
 8012b2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b32:	3236      	adds	r2, #54	; 0x36
 8012b34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	4b0c      	ldr	r3, [pc, #48]	; (8012b70 <scalbn+0x108>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	e7e8      	b.n	8012b16 <scalbn+0xae>
 8012b44:	f3af 8000 	nop.w
 8012b48:	c2f8f359 	.word	0xc2f8f359
 8012b4c:	01a56e1f 	.word	0x01a56e1f
 8012b50:	8800759c 	.word	0x8800759c
 8012b54:	7e37e43c 	.word	0x7e37e43c
 8012b58:	8800759c 	.word	0x8800759c
 8012b5c:	fe37e43c 	.word	0xfe37e43c
 8012b60:	c2f8f359 	.word	0xc2f8f359
 8012b64:	81a56e1f 	.word	0x81a56e1f
 8012b68:	43500000 	.word	0x43500000
 8012b6c:	ffff3cb0 	.word	0xffff3cb0
 8012b70:	3c900000 	.word	0x3c900000

08012b74 <fabsf>:
 8012b74:	ee10 3a10 	vmov	r3, s0
 8012b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b7c:	ee00 3a10 	vmov	s0, r3
 8012b80:	4770      	bx	lr
	...

08012b84 <floorf>:
 8012b84:	ee10 3a10 	vmov	r3, s0
 8012b88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012b8c:	3a7f      	subs	r2, #127	; 0x7f
 8012b8e:	2a16      	cmp	r2, #22
 8012b90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012b94:	dc2a      	bgt.n	8012bec <floorf+0x68>
 8012b96:	2a00      	cmp	r2, #0
 8012b98:	da11      	bge.n	8012bbe <floorf+0x3a>
 8012b9a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012bfc <floorf+0x78>
 8012b9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ba2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012baa:	dd05      	ble.n	8012bb8 <floorf+0x34>
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	da23      	bge.n	8012bf8 <floorf+0x74>
 8012bb0:	4a13      	ldr	r2, [pc, #76]	; (8012c00 <floorf+0x7c>)
 8012bb2:	2900      	cmp	r1, #0
 8012bb4:	bf18      	it	ne
 8012bb6:	4613      	movne	r3, r2
 8012bb8:	ee00 3a10 	vmov	s0, r3
 8012bbc:	4770      	bx	lr
 8012bbe:	4911      	ldr	r1, [pc, #68]	; (8012c04 <floorf+0x80>)
 8012bc0:	4111      	asrs	r1, r2
 8012bc2:	420b      	tst	r3, r1
 8012bc4:	d0fa      	beq.n	8012bbc <floorf+0x38>
 8012bc6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012bfc <floorf+0x78>
 8012bca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012bce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd6:	ddef      	ble.n	8012bb8 <floorf+0x34>
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	bfbe      	ittt	lt
 8012bdc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012be0:	fa40 f202 	asrlt.w	r2, r0, r2
 8012be4:	189b      	addlt	r3, r3, r2
 8012be6:	ea23 0301 	bic.w	r3, r3, r1
 8012bea:	e7e5      	b.n	8012bb8 <floorf+0x34>
 8012bec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012bf0:	d3e4      	bcc.n	8012bbc <floorf+0x38>
 8012bf2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012bf6:	4770      	bx	lr
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	e7dd      	b.n	8012bb8 <floorf+0x34>
 8012bfc:	7149f2ca 	.word	0x7149f2ca
 8012c00:	bf800000 	.word	0xbf800000
 8012c04:	007fffff 	.word	0x007fffff

08012c08 <scalbnf>:
 8012c08:	ee10 3a10 	vmov	r3, s0
 8012c0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012c10:	d025      	beq.n	8012c5e <scalbnf+0x56>
 8012c12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012c16:	d302      	bcc.n	8012c1e <scalbnf+0x16>
 8012c18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c1c:	4770      	bx	lr
 8012c1e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012c22:	d122      	bne.n	8012c6a <scalbnf+0x62>
 8012c24:	4b2a      	ldr	r3, [pc, #168]	; (8012cd0 <scalbnf+0xc8>)
 8012c26:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012cd4 <scalbnf+0xcc>
 8012c2a:	4298      	cmp	r0, r3
 8012c2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c30:	db16      	blt.n	8012c60 <scalbnf+0x58>
 8012c32:	ee10 3a10 	vmov	r3, s0
 8012c36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c3a:	3a19      	subs	r2, #25
 8012c3c:	4402      	add	r2, r0
 8012c3e:	2afe      	cmp	r2, #254	; 0xfe
 8012c40:	dd15      	ble.n	8012c6e <scalbnf+0x66>
 8012c42:	ee10 3a10 	vmov	r3, s0
 8012c46:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012cd8 <scalbnf+0xd0>
 8012c4a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012cdc <scalbnf+0xd4>
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	eeb0 7a67 	vmov.f32	s14, s15
 8012c54:	bfb8      	it	lt
 8012c56:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c5a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012c5e:	4770      	bx	lr
 8012c60:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012ce0 <scalbnf+0xd8>
 8012c64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c68:	4770      	bx	lr
 8012c6a:	0dd2      	lsrs	r2, r2, #23
 8012c6c:	e7e6      	b.n	8012c3c <scalbnf+0x34>
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	dd06      	ble.n	8012c80 <scalbnf+0x78>
 8012c72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c76:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012c7a:	ee00 3a10 	vmov	s0, r3
 8012c7e:	4770      	bx	lr
 8012c80:	f112 0f16 	cmn.w	r2, #22
 8012c84:	da1a      	bge.n	8012cbc <scalbnf+0xb4>
 8012c86:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012c8a:	4298      	cmp	r0, r3
 8012c8c:	ee10 3a10 	vmov	r3, s0
 8012c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c94:	dd0a      	ble.n	8012cac <scalbnf+0xa4>
 8012c96:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012cd8 <scalbnf+0xd0>
 8012c9a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012cdc <scalbnf+0xd4>
 8012c9e:	eef0 7a40 	vmov.f32	s15, s0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	bf18      	it	ne
 8012ca6:	eeb0 0a47 	vmovne.f32	s0, s14
 8012caa:	e7db      	b.n	8012c64 <scalbnf+0x5c>
 8012cac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012ce0 <scalbnf+0xd8>
 8012cb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012ce4 <scalbnf+0xdc>
 8012cb4:	eef0 7a40 	vmov.f32	s15, s0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	e7f3      	b.n	8012ca4 <scalbnf+0x9c>
 8012cbc:	3219      	adds	r2, #25
 8012cbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012cc2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012cc6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012ce8 <scalbnf+0xe0>
 8012cca:	ee07 3a10 	vmov	s14, r3
 8012cce:	e7c4      	b.n	8012c5a <scalbnf+0x52>
 8012cd0:	ffff3cb0 	.word	0xffff3cb0
 8012cd4:	4c000000 	.word	0x4c000000
 8012cd8:	7149f2ca 	.word	0x7149f2ca
 8012cdc:	f149f2ca 	.word	0xf149f2ca
 8012ce0:	0da24260 	.word	0x0da24260
 8012ce4:	8da24260 	.word	0x8da24260
 8012ce8:	33000000 	.word	0x33000000

08012cec <_init>:
 8012cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cee:	bf00      	nop
 8012cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cf2:	bc08      	pop	{r3}
 8012cf4:	469e      	mov	lr, r3
 8012cf6:	4770      	bx	lr

08012cf8 <_fini>:
 8012cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cfa:	bf00      	nop
 8012cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cfe:	bc08      	pop	{r3}
 8012d00:	469e      	mov	lr, r3
 8012d02:	4770      	bx	lr
