
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007160  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007318  08007318  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007320  08007320  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08007328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  2000020c  08007534  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d7c  08007534  00020d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c62  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d9  00000000  00000000  00034e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00038650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001819a  00000000  00000000  00039668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001425b  00000000  00000000  00051802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd3e  00000000  00000000  00065a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0010379b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ac  00000000  00000000  00103860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000020c 	.word	0x2000020c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080072e0 	.word	0x080072e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000210 	.word	0x20000210
 80001d4:	080072e0 	.word	0x080072e0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <modbus_1t5_Timeout+0x1c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	751a      	strb	r2, [r3, #20]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000228 	.word	0x20000228

08000d78 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <modbus_3t5_Timeout+0x1c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2201      	movs	r2, #1
 8000d86:	755a      	strb	r2, [r3, #21]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000228 	.word	0x20000228

08000d98 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <modbus_UART_Recived+0x60>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <modbus_UART_Recived+0x60>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000db2:	1c59      	adds	r1, r3, #1
 8000db4:	b289      	uxth	r1, r1
 8000db6:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000dba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000dbe:	d210      	bcs.n	8000de2 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <modbus_UART_Recived+0x60>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68d8      	ldr	r0, [r3, #12]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <modbus_UART_Recived+0x60>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <modbus_UART_Recived+0x60>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000dd2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f005 f88f 	bl	8005f00 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <modbus_UART_Recived+0x60>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000228 	.word	0x20000228

08000dfc <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000e06:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <Modbus_init+0x9c>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <Modbus_init+0x9c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <Modbus_init+0x9c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <Modbus_init+0xa0>)
 8000e1c:	2114      	movs	r1, #20
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 fa20 	bl	8005264 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <Modbus_init+0x9c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <Modbus_init+0xa4>)
 8000e2c:	210e      	movs	r1, #14
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 fa18 	bl	8005264 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <Modbus_init+0x9c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <Modbus_init+0xa8>)
 8000e3c:	2103      	movs	r1, #3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f004 ffb6 	bl	8005db0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <Modbus_init+0x9c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68d8      	ldr	r0, [r3, #12]
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <Modbus_init+0x9c>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <Modbus_init+0x9c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000e56:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4619      	mov	r1, r3
 8000e62:	f005 f84d 	bl	8005f00 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <Modbus_init+0x9c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10c      	bne.n	8000e90 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <Modbus_init+0x9c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fa91 	bl	80043a4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <Modbus_init+0x9c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fcd0 	bl	8004830 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000228 	.word	0x20000228
 8000e9c:	08000d59 	.word	0x08000d59
 8000ea0:	08000d79 	.word	0x08000d79
 8000ea4:	08000d99 	.word	0x08000d99

08000ea8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000eb4:	23ff      	movs	r3, #255	; 0xff
 8000eb6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000eb8:	23ff      	movs	r3, #255	; 0xff
 8000eba:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000ebc:	e013      	b.n	8000ee6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <CRC16+0x64>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	4053      	eors	r3, r2
 8000eda:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <CRC16+0x68>)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ee6:	883b      	ldrh	r3, [r7, #0]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	803a      	strh	r2, [r7, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e6      	bne.n	8000ebe <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b29b      	uxth	r3, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000100 	.word	0x20000100
 8000f10:	20000000 	.word	0x20000000

08000f14 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000f1a:	4b81      	ldr	r3, [pc, #516]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	7e1b      	ldrb	r3, [r3, #24]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d80a      	bhi.n	8000f3c <Modbus_Protocal_Worker+0x28>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <Modbus_Protocal_Worker+0x18>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000f47 	.word	0x08000f47
 8000f30:	080010e7 	.word	0x080010e7
 8000f34:	08000fd3 	.word	0x08000fd3
 8000f38:	08000ff9 	.word	0x08000ff9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000f3c:	4b78      	ldr	r3, [pc, #480]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	761a      	strb	r2, [r3, #24]
		break;
 8000f44:	e0e8      	b.n	8001118 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000f46:	4b76      	ldr	r3, [pc, #472]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000f52:	f000 f9dd 	bl	8001310 <Modbus_Emission>
 8000f56:	e01c      	b.n	8000f92 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000f58:	4b71      	ldr	r3, [pc, #452]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	7d9b      	ldrb	r3, [r3, #22]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d017      	beq.n	8000f92 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000f62:	4b6f      	ldr	r3, [pc, #444]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000f72:	4b6b      	ldr	r3, [pc, #428]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b68      	ldr	r3, [pc, #416]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f8a:	4b65      	ldr	r3, [pc, #404]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	f040 80b3 	bne.w	800110a <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000fa4:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000fae:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68d8      	ldr	r0, [r3, #12]
 8000fb4:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b59      	ldr	r3, [pc, #356]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fc0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f004 ff98 	bl	8005f00 <HAL_UART_Receive_IT>
		}
		break;
 8000fd0:	e09b      	b.n	800110a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000fd2:	4b53      	ldr	r3, [pc, #332]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	7d1b      	ldrb	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 8098 	beq.w	800110e <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	22fe      	movs	r2, #254	; 0xfe
 8000fec:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000fee:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000ff6:	e08a      	b.n	800110e <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000ff8:	4b49      	ldr	r3, [pc, #292]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	7d9b      	ldrb	r3, [r3, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d009      	beq.n	8001016 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	22ff      	movs	r2, #255	; 0xff
 8001014:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800101e:	f113 0f02 	cmn.w	r3, #2
 8001022:	d150      	bne.n	80010c6 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800103c:	3b02      	subs	r3, #2
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f7ff ff31 	bl	8000ea8 <CRC16>
 8001046:	4603      	mov	r3, r0
 8001048:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800104a:	793a      	ldrb	r2, [r7, #4]
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001058:	3b02      	subs	r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001060:	429a      	cmp	r2, r3
 8001062:	d10c      	bne.n	800107e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001064:	797a      	ldrb	r2, [r7, #5]
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001072:	3b01      	subs	r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800107a:	429a      	cmp	r2, r3
 800107c:	d004      	beq.n	8001088 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	75da      	strb	r2, [r3, #23]
				break;
 8001086:	e047      	b.n	8001118 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d113      	bne.n	80010c2 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80010aa:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80010b4:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80010b6:	461a      	mov	r2, r3
 80010b8:	f006 f8fc 	bl	80072b4 <memcpy>

			//execute command
			Modbus_frame_response();
 80010bc:	f000 f910 	bl	80012e0 <Modbus_frame_response>
 80010c0:	e001      	b.n	80010c6 <Modbus_Protocal_Worker+0x1b2>
				break;
 80010c2:	bf00      	nop
					}
		break;


	}
}
 80010c4:	e028      	b.n	8001118 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	7d5b      	ldrb	r3, [r3, #21]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 ffbc 	bl	800605c <HAL_UART_AbortReceive>
		break;
 80010e4:	e015      	b.n	8001112 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d10f      	bne.n	8001116 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <Modbus_Protocal_Worker+0x20c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	761a      	strb	r2, [r3, #24]
		break;
 8001108:	e005      	b.n	8001116 <Modbus_Protocal_Worker+0x202>
		break;
 800110a:	bf00      	nop
 800110c:	e004      	b.n	8001118 <Modbus_Protocal_Worker+0x204>
		break;
 800110e:	bf00      	nop
 8001110:	e002      	b.n	8001118 <Modbus_Protocal_Worker+0x204>
		break;
 8001112:	bf00      	nop
 8001114:	e000      	b.n	8001118 <Modbus_Protocal_Worker+0x204>
		break;
 8001116:	bf00      	nop
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000228 	.word	0x20000228

08001124 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <modbusWrite1Register+0x80>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	b29b      	uxth	r3, r3
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <modbusWrite1Register+0x80>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	7edb      	ldrb	r3, [r3, #27]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001142:	88fa      	ldrh	r2, [r7, #6]
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <modbusWrite1Register+0x80>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	d903      	bls.n	8001156 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800114e:	2002      	movs	r0, #2
 8001150:	f000 f8a4 	bl	800129c <ModbusErrorReply>
			 return;
 8001154:	e023      	b.n	800119e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <modbusWrite1Register+0x80>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <modbusWrite1Register+0x80>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	7f12      	ldrb	r2, [r2, #28]
 8001168:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <modbusWrite1Register+0x80>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <modbusWrite1Register+0x80>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	440b      	add	r3, r1
 800117a:	7f52      	ldrb	r2, [r2, #29]
 800117c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <modbusWrite1Register+0x80>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <modbusWrite1Register+0x80>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800118c:	2208      	movs	r2, #8
 800118e:	4619      	mov	r1, r3
 8001190:	f006 f890 	bl	80072b4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <modbusWrite1Register+0x80>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2205      	movs	r2, #5
 800119a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000228 	.word	0x20000228

080011a8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <modbusRead1Register+0xf0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	7f1b      	ldrb	r3, [r3, #28]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <modbusRead1Register+0xf0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	7f5b      	ldrb	r3, [r3, #29]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <modbusRead1Register+0xf0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7e9b      	ldrb	r3, [r3, #26]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <modbusRead1Register+0xf0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7edb      	ldrb	r3, [r3, #27]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4413      	add	r3, r2
 80011dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <modbusRead1Register+0x42>
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	2b7d      	cmp	r3, #125	; 0x7d
 80011e8:	d903      	bls.n	80011f2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80011ea:	2003      	movs	r0, #3
 80011ec:	f000 f856 	bl	800129c <ModbusErrorReply>
		 return;
 80011f0:	e04e      	b.n	8001290 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <modbusRead1Register+0xf0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d808      	bhi.n	8001210 <modbusRead1Register+0x68>
 80011fe:	88ba      	ldrh	r2, [r7, #4]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4413      	add	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <modbusRead1Register+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	429a      	cmp	r2, r3
 800120e:	d903      	bls.n	8001218 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001210:	2002      	movs	r0, #2
 8001212:	f000 f843 	bl	800129c <ModbusErrorReply>
		 return;
 8001216:	e03b      	b.n	8001290 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <modbusRead1Register+0xf0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2203      	movs	r2, #3
 800121e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <modbusRead1Register+0xf0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	0052      	lsls	r2, r2, #1
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001232:	2400      	movs	r4, #0
 8001234:	e020      	b.n	8001278 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <modbusRead1Register+0xf0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	4423      	add	r3, r4
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	18d1      	adds	r1, r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <modbusRead1Register+0xf0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	1c63      	adds	r3, r4, #1
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	7849      	ldrb	r1, [r1, #1]
 800124e:	4413      	add	r3, r2
 8001250:	460a      	mov	r2, r1
 8001252:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <modbusRead1Register+0xf0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	4423      	add	r3, r4
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	18d1      	adds	r1, r2, r3
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <modbusRead1Register+0xf0>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	0063      	lsls	r3, r4, #1
 800126a:	3303      	adds	r3, #3
 800126c:	7809      	ldrb	r1, [r1, #0]
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001276:	3401      	adds	r4, #1
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	429c      	cmp	r4, r3
 800127c:	dbdb      	blt.n	8001236 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <modbusRead1Register+0xf0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000228 	.word	0x20000228

0800129c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <ModbusErrorReply+0x40>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	7e5a      	ldrb	r2, [r3, #25]
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <ModbusErrorReply+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <ModbusErrorReply+0x40>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	79fa      	ldrb	r2, [r7, #7]
 80012c0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <ModbusErrorReply+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2202      	movs	r2, #2
 80012ca:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000228 	.word	0x20000228

080012e0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <Modbus_frame_response+0x2c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	7e5b      	ldrb	r3, [r3, #25]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d004      	beq.n	80012f8 <Modbus_frame_response+0x18>
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d105      	bne.n	80012fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80012f2:	f7ff ff17 	bl	8001124 <modbusWrite1Register>
		break;
 80012f6:	e006      	b.n	8001306 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80012f8:	f7ff ff56 	bl	80011a8 <modbusRead1Register>
		break;
 80012fc:	e003      	b.n	8001306 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff ffcc 	bl	800129c <ModbusErrorReply>
		break;
 8001304:	bf00      	nop

	}
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000228 	.word	0x20000228

08001310 <Modbus_Emission>:

void Modbus_Emission()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <Modbus_Emission+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b20      	cmp	r3, #32
 8001324:	d15e      	bne.n	80013e4 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <Modbus_Emission+0xfc>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <Modbus_Emission+0xfc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <Modbus_Emission+0xfc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 800133c:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <Modbus_Emission+0xfc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <Modbus_Emission+0xfc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800134e:	461a      	mov	r2, r3
 8001350:	f005 ffb0 	bl	80072b4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <Modbus_Emission+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <Modbus_Emission+0xfc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3203      	adds	r2, #3
 8001364:	b292      	uxth	r2, r2
 8001366:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <Modbus_Emission+0xfc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <Modbus_Emission+0xfc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800137a:	3b02      	subs	r3, #2
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f7ff fd92 	bl	8000ea8 <CRC16>
 8001384:	4603      	mov	r3, r0
 8001386:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <Modbus_Emission+0xfc>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <Modbus_Emission+0xfc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001394:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001396:	7939      	ldrb	r1, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	460a      	mov	r2, r1
 800139c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <Modbus_Emission+0xfc>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <Modbus_Emission+0xfc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80013ac:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80013ae:	7979      	ldrb	r1, [r7, #5]
 80013b0:	4413      	add	r3, r2
 80013b2:	460a      	mov	r2, r1
 80013b4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <Modbus_Emission+0xfc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b20      	cmp	r3, #32
 80013c6:	d10d      	bne.n	80013e4 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <Modbus_Emission+0xfc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <Modbus_Emission+0xfc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <Modbus_Emission+0xfc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80013da:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80013de:	461a      	mov	r2, r3
 80013e0:	f004 fdbe 	bl	8005f60 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <Modbus_Emission+0xfc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2200      	movs	r2, #0
 80013ea:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <Modbus_Emission+0xfc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <Modbus_Emission+0xfc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <Modbus_Emission+0xfc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000228 	.word	0x20000228

08001410 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001416:	f000 ff91 	bl	800233c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800141a:	f000 f8bd 	bl	8001598 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800141e:	f000 fb9b 	bl	8001b58 <MX_GPIO_Init>
	MX_DMA_Init();
 8001422:	f000 fb79 	bl	8001b18 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001426:	f000 fb4b 	bl	8001ac0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800142a:	f000 f96f 	bl	800170c <MX_I2C1_Init>
	MX_TIM1_Init();
 800142e:	f000 f99b 	bl	8001768 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001432:	f000 fa39 	bl	80018a8 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001436:	f000 fb19 	bl	8001a6c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800143a:	f000 f915 	bl	8001668 <MX_ADC1_Init>
	MX_TIM9_Init();
 800143e:	f000 fa87 	bl	8001950 <MX_TIM9_Init>
	MX_TIM11_Init();
 8001442:	f000 fabf 	bl	80019c4 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8001446:	4848      	ldr	r0, [pc, #288]	; (8001568 <main+0x158>)
 8001448:	f002 ff52 	bl	80042f0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800144c:	2100      	movs	r1, #0
 800144e:	4846      	ldr	r0, [pc, #280]	; (8001568 <main+0x158>)
 8001450:	f003 f8d6 	bl	8004600 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001454:	2104      	movs	r1, #4
 8001456:	4845      	ldr	r0, [pc, #276]	; (800156c <main+0x15c>)
 8001458:	f003 fb04 	bl	8004a64 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 800145c:	4844      	ldr	r0, [pc, #272]	; (8001570 <main+0x160>)
 800145e:	f002 ffa1 	bl	80043a4 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	hmodbus.huart = &huart2;
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <main+0x164>)
 8001464:	4a44      	ldr	r2, [pc, #272]	; (8001578 <main+0x168>)
 8001466:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <main+0x164>)
 800146a:	4a44      	ldr	r2, [pc, #272]	; (800157c <main+0x16c>)
 800146c:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <main+0x164>)
 8001470:	2215      	movs	r2, #21
 8001472:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <main+0x164>)
 8001476:	22c8      	movs	r2, #200	; 0xc8
 8001478:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800147a:	4941      	ldr	r1, [pc, #260]	; (8001580 <main+0x170>)
 800147c:	483d      	ldr	r0, [pc, #244]	; (8001574 <main+0x164>)
 800147e:	f7ff fcbd 	bl	8000dfc <Modbus_init>

	// setup PID
	PID.Kp = 0.02;
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <main+0x174>)
 8001484:	4a40      	ldr	r2, [pc, #256]	; (8001588 <main+0x178>)
 8001486:	619a      	str	r2, [r3, #24]
	PID.Ki = 0;
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <main+0x174>)
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
	PID.Kd = 0;
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <main+0x174>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&PID, 0);
 8001498:	2100      	movs	r1, #0
 800149a:	483a      	ldr	r0, [pc, #232]	; (8001584 <main+0x174>)
 800149c:	f005 fec8 	bl	8007230 <arm_pid_init_f32>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 80014a0:	f7ff fd38 	bl	8000f14 <Modbus_Protocal_Worker>
		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <main+0x15c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <main+0x17c>)
 80014ae:	601a      	str	r2, [r3, #0]

		if (abs(setpoint - QEIReadRaw) < 1) {
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <main+0x180>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <main+0x17c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <main+0xc6>
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <main+0x180>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <main+0x17c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dc04      	bgt.n	80014d6 <main+0xc6>
			arm_pid_init_f32(&PID, 1);
 80014cc:	2101      	movs	r1, #1
 80014ce:	482d      	ldr	r0, [pc, #180]	; (8001584 <main+0x174>)
 80014d0:	f005 feae 	bl	8007230 <arm_pid_init_f32>
 80014d4:	e003      	b.n	80014de <main+0xce>
		} else {
			arm_pid_init_f32(&PID, 0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	482a      	ldr	r0, [pc, #168]	; (8001584 <main+0x174>)
 80014da:	f005 fea9 	bl	8007230 <arm_pid_init_f32>
		}
		voltage = arm_pid_f32(&PID, setpoint - QEIReadRaw);
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <main+0x180>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <main+0x17c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <main+0x174>)
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001502:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	edd3 6a01 	vldr	s13, [r3, #4]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001516:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	edd3 7a04 	vldr	s15, [r3, #16]
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <main+0x184>)
 8001554:	6013      	str	r3, [r2, #0]
		motor(voltage);
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <main+0x184>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f000 fb86 	bl	8001c70 <motor>
		Modbus_Protocal_Worker();
 8001564:	e79c      	b.n	80014a0 <main+0x90>
 8001566:	bf00      	nop
 8001568:	200002c8 	.word	0x200002c8
 800156c:	2000037c 	.word	0x2000037c
 8001570:	20000430 	.word	0x20000430
 8001574:	20000710 	.word	0x20000710
 8001578:	2000060c 	.word	0x2000060c
 800157c:	200004e4 	.word	0x200004e4
 8001580:	20000be8 	.word	0x20000be8
 8001584:	200006ec 	.word	0x200006ec
 8001588:	3ca3d70a 	.word	0x3ca3d70a
 800158c:	200006e0 	.word	0x200006e0
 8001590:	200006e8 	.word	0x200006e8
 8001594:	200006e4 	.word	0x200006e4

08001598 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	; 0x50
 800159c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f005 fe92 	bl	80072d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <SystemClock_Config+0xc8>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <SystemClock_Config+0xc8>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <SystemClock_Config+0xc8>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <SystemClock_Config+0xcc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <SystemClock_Config+0xcc>)
 80015e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <SystemClock_Config+0xcc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fc:	2310      	movs	r3, #16
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001608:	2308      	movs	r3, #8
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f002 f973 	bl	8003908 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x94>
		Error_Handler();
 8001628:	f000 fb96 	bl	8001d58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800162c:	230f      	movs	r3, #15
 800162e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2103      	movs	r1, #3
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fbd5 	bl	8003df8 <HAL_RCC_ClockConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0xc0>
		Error_Handler();
 8001654:	f000 fb80 	bl	8001d58 <Error_Handler>
	}
}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	; 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_ADC1_Init+0x98>)
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <MX_ADC1_Init+0x9c>)
 800167e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_ADC1_Init+0x98>)
 8001682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001686:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_ADC1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_ADC1_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_ADC1_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_ADC1_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_ADC1_Init+0x98>)
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <MX_ADC1_Init+0xa0>)
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_ADC1_Init+0x98>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_ADC1_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_ADC1_Init+0x98>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_ADC1_Init+0x98>)
 80016ca:	f000 fea9 	bl	8002420 <HAL_ADC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80016d4:	f000 fb40 	bl	8001d58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80016d8:	230a      	movs	r3, #10
 80016da:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_ADC1_Init+0x98>)
 80016ea:	f000 fedd 	bl	80024a8 <HAL_ADC_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80016f4:	f000 fb30 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000022c 	.word	0x2000022c
 8001704:	40012000 	.word	0x40012000
 8001708:	0f000001 	.word	0x0f000001

0800170c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C1_Init+0x50>)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <MX_I2C1_Init+0x54>)
 8001714:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C1_Init+0x50>)
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_I2C1_Init+0x58>)
 800171a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_I2C1_Init+0x50>)
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_I2C1_Init+0x50>)
 800174a:	f001 ff99 	bl	8003680 <HAL_I2C_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001754:	f000 fb00 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000274 	.word	0x20000274
 8001760:	40005400 	.word	0x40005400
 8001764:	000186a0 	.word	0x000186a0

08001768 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	; 0x58
 800176c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800176e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800177c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2220      	movs	r2, #32
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 fd95 	bl	80072d0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017a8:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <MX_TIM1_Init+0x13c>)
 80017aa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 125 - 1;
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017ae:	227c      	movs	r2, #124	; 0x7c
 80017b0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017be:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80017d2:	4833      	ldr	r0, [pc, #204]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017d4:	f002 fd30 	bl	8004238 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80017de:	f000 fabb 	bl	8001d58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80017e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ec:	4619      	mov	r1, r3
 80017ee:	482c      	ldr	r0, [pc, #176]	; (80018a0 <MX_TIM1_Init+0x138>)
 80017f0:	f003 fc0c 	bl	800500c <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x96>
		Error_Handler();
 80017fa:	f000 faad 	bl	8001d58 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80017fe:	4828      	ldr	r0, [pc, #160]	; (80018a0 <MX_TIM1_Init+0x138>)
 8001800:	f002 fe98 	bl	8004534 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0xa6>
		Error_Handler();
 800180a:	f000 faa5 	bl	8001d58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181a:	4619      	mov	r1, r3
 800181c:	4820      	ldr	r0, [pc, #128]	; (80018a0 <MX_TIM1_Init+0x138>)
 800181e:	f004 f98f 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0xc4>
		Error_Handler();
 8001828:	f000 fa96 	bl	8001d58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	4813      	ldr	r0, [pc, #76]	; (80018a0 <MX_TIM1_Init+0x138>)
 8001852:	f003 fb19 	bl	8004e88 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xf8>
		Error_Handler();
 800185c:	f000 fa7c 	bl	8001d58 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_TIM1_Init+0x138>)
 8001884:	f004 f9ca 	bl	8005c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0x12a>
		Error_Handler();
 800188e:	f000 fa63 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001892:	4803      	ldr	r0, [pc, #12]	; (80018a0 <MX_TIM1_Init+0x138>)
 8001894:	f000 fbcc 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001898:	bf00      	nop
 800189a:	3758      	adds	r7, #88	; 0x58
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200002c8 	.word	0x200002c8
 80018a4:	40010000 	.word	0x40010000

080018a8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2224      	movs	r2, #36	; 0x24
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f005 fd0a 	bl	80072d0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_TIM2_Init+0xa4>)
 80018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <MX_TIM2_Init+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <MX_TIM2_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_TIM2_Init+0xa4>)
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_TIM2_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_TIM2_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018ec:	2303      	movs	r3, #3
 80018ee:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018f4:	2301      	movs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM2_Init+0xa4>)
 8001918:	f002 fff0 	bl	80048fc <HAL_TIM_Encoder_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001922:	f000 fa19 	bl	8001d58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_TIM2_Init+0xa4>)
 8001934:	f004 f904 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0x9a>
		Error_Handler();
 800193e:	f000 fa0b 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000037c 	.word	0x2000037c

08001950 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001964:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <MX_TIM9_Init+0x70>)
 8001966:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 100 - 1;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_TIM9_Init+0x6c>)
 800196a:	2263      	movs	r2, #99	; 0x63
 800196c:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 1000 - 1;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197a:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_TIM9_Init+0x6c>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_TIM9_Init+0x6c>)
 800198a:	f002 fc55 	bl	8004238 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM9_Init+0x48>
		Error_Handler();
 8001994:	f000 f9e0 	bl	8001d58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <MX_TIM9_Init+0x6c>)
 80019a4:	f003 fb32 	bl	800500c <HAL_TIM_ConfigClockSource>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM9_Init+0x62>
		Error_Handler();
 80019ae:	f000 f9d3 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000430 	.word	0x20000430
 80019c0:	40014000 	.word	0x40014000

080019c4 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_TIM11_Init+0xa0>)
 80019de:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <MX_TIM11_Init+0xa4>)
 80019e0:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_TIM11_Init+0xa0>)
 80019e4:	2263      	movs	r2, #99	; 0x63
 80019e6:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_TIM11_Init+0xa0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM11_Init+0xa0>)
 80019f0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80019f4:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_TIM11_Init+0xa0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_TIM11_Init+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001a02:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_TIM11_Init+0xa0>)
 8001a04:	f002 fc18 	bl	8004238 <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM11_Init+0x4e>
		Error_Handler();
 8001a0e:	f000 f9a3 	bl	8001d58 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8001a12:	4814      	ldr	r0, [pc, #80]	; (8001a64 <MX_TIM11_Init+0xa0>)
 8001a14:	f002 fd28 	bl	8004468 <HAL_TIM_OC_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM11_Init+0x5e>
		Error_Handler();
 8001a1e:	f000 f99b 	bl	8001d58 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001a22:	2108      	movs	r1, #8
 8001a24:	480f      	ldr	r0, [pc, #60]	; (8001a64 <MX_TIM11_Init+0xa0>)
 8001a26:	f002 fe9b 	bl	8004760 <HAL_TIM_OnePulse_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM11_Init+0x70>
		Error_Handler();
 8001a30:	f000 f992 	bl	8001d58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001a34:	2310      	movs	r3, #16
 8001a36:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8001a38:	f240 5399 	movw	r3, #1433	; 0x599
 8001a3c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM11_Init+0xa0>)
 8001a4e:	f003 f9bf 	bl	8004dd0 <HAL_TIM_OC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM11_Init+0x98>
		Error_Handler();
 8001a58:	f000 f97e 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200004e4 	.word	0x200004e4
 8001a68:	40014800 	.word	0x40014800

08001a6c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_USART1_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	f004 f92a 	bl	8005cfc <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001aae:	f000 f953 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000598 	.word	0x20000598
 8001abc:	40011000 	.word	0x40011000

08001ac0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <MX_USART2_UART_Init+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001acc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001ad0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_USART2_UART_Init+0x50>)
 8001afc:	f004 f8fe 	bl	8005cfc <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8001b06:	f000 f927 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000060c 	.word	0x2000060c
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_DMA_Init+0x3c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <MX_DMA_Init+0x3c>)
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_DMA_Init+0x3c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2011      	movs	r0, #17
 8001b40:	f000 ffbb 	bl	8002aba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b44:	2011      	movs	r0, #17
 8001b46:	f000 ffd4 	bl	8002af2 <HAL_NVIC_EnableIRQ>

}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_11, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001be4:	481f      	ldr	r0, [pc, #124]	; (8001c64 <MX_GPIO_Init+0x10c>)
 8001be6:	f001 fd31 	bl	800364c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bf4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <MX_GPIO_Init+0x110>)
 8001c02:	f001 fb9f 	bl	8003344 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001c06:	230c      	movs	r3, #12
 8001c08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_GPIO_Init+0x110>)
 8001c1c:	f001 fb92 	bl	8003344 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA11 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_11;
 8001c20:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001c24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480a      	ldr	r0, [pc, #40]	; (8001c64 <MX_GPIO_Init+0x10c>)
 8001c3a:	f001 fb83 	bl	8003344 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <MX_GPIO_Init+0x114>)
 8001c54:	f001 fb76 	bl	8003344 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <motor>:

/* USER CODE BEGIN 4 */

void motor(float voltage) {
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 8001c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	dd11      	ble.n	8001cac <motor+0x3c>
		// forward
		if (voltage > 12.0) {
 8001c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	dd01      	ble.n	8001c9e <motor+0x2e>
			voltage = 12.0;
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <motor+0xd4>)
 8001c9c:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca4:	4828      	ldr	r0, [pc, #160]	; (8001d48 <motor+0xd8>)
 8001ca6:	f001 fcd1 	bl	800364c <HAL_GPIO_WritePin>
 8001caa:	e02b      	b.n	8001d04 <motor+0x94>
	} else if (voltage < 0) {
 8001cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	d521      	bpl.n	8001cfe <motor+0x8e>
		// backward
		voltage *= -1.0;
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fbf0 	bl	80004a0 <__aeabi_f2d>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fe74 	bl	80009b4 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef1 7a67 	vneg.f32	s15, s15
 8001cd6:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 12.0) {
 8001cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cde:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	dd01      	ble.n	8001cf0 <motor+0x80>
			voltage = 12.0;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <motor+0xd4>)
 8001cee:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <motor+0xd8>)
 8001cf8:	f001 fca8 	bl	800364c <HAL_GPIO_WritePin>
 8001cfc:	e002      	b.n	8001d04 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage * 1000.0 / 12.0);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7fe fbcb 	bl	80004a0 <__aeabi_f2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <motor+0xdc>)
 8001d10:	f7fe fc1e 	bl	8000550 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <motor+0xe0>)
 8001d22:	f7fe fd3f 	bl	80007a4 <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <motor+0xe4>)
 8001d2c:	680c      	ldr	r4, [r1, #0]
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fe1f 	bl	8000974 <__aeabi_d2uiz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	41400000 	.word	0x41400000
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	408f4000 	.word	0x408f4000
 8001d50:	40280000 	.word	0x40280000
 8001d54:	200002c8 	.word	0x200002c8

08001d58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d60:	e7fe      	b.n	8001d60 <Error_Handler+0x8>
	...

08001d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001da2:	2007      	movs	r0, #7
 8001da4:	f000 fe7e 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_ADC_MspInit+0x7c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d127      	bne.n	8001e26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_ADC_MspInit+0x80>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_ADC_MspInit+0x80>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_ADC_MspInit+0x80>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_ADC_MspInit+0x80>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_ADC_MspInit+0x80>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_ADC_MspInit+0x80>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e12:	2303      	movs	r3, #3
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_ADC_MspInit+0x84>)
 8001e22:	f001 fa8f 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012000 	.word	0x40012000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020800 	.word	0x40020800

08001e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_I2C_MspInit+0x84>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12b      	bne.n	8001eb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7e:	2312      	movs	r3, #18
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <HAL_I2C_MspInit+0x8c>)
 8001e96:	f001 fa55 	bl	8003344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <HAL_TIM_Base_MspInit+0xc8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11e      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2018      	movs	r0, #24
 8001f00:	f000 fddb 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f04:	2018      	movs	r0, #24
 8001f06:	f000 fdf4 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	201a      	movs	r0, #26
 8001f10:	f000 fdd3 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f14:	201a      	movs	r0, #26
 8001f16:	f000 fdec 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f1a:	e036      	b.n	8001f8a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM9)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <HAL_TIM_Base_MspInit+0xd0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d116      	bne.n	8001f54 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2018      	movs	r0, #24
 8001f48:	f000 fdb7 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f4c:	2018      	movs	r0, #24
 8001f4e:	f000 fdd0 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8001f52:	e01a      	b.n	8001f8a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM11)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_TIM_Base_MspInit+0xd4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d115      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_TIM_Base_MspInit+0xcc>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201a      	movs	r0, #26
 8001f80:	f000 fd9b 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f84:	201a      	movs	r0, #26
 8001f86:	f000 fdb4 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40014800 	.word	0x40014800

08001fa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d12b      	bne.n	800201e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ffe:	2303      	movs	r3, #3
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800200e:	2301      	movs	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <HAL_TIM_Encoder_MspInit+0x88>)
 800201a:	f001 f993 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_TIM_MspPostInit+0x68>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11e      	bne.n	8002090 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002080:	2301      	movs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <HAL_TIM_MspPostInit+0x70>)
 800208c:	f001 f95a 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40010000 	.word	0x40010000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_UART_MspInit+0x154>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d12d      	bne.n	8002122 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_UART_MspInit+0x158>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_UART_MspInit+0x158>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_UART_MspInit+0x158>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b45      	ldr	r3, [pc, #276]	; (80021fc <HAL_UART_MspInit+0x158>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a44      	ldr	r2, [pc, #272]	; (80021fc <HAL_UART_MspInit+0x158>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_UART_MspInit+0x158>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002110:	2307      	movs	r3, #7
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4619      	mov	r1, r3
 800211a:	4839      	ldr	r0, [pc, #228]	; (8002200 <HAL_UART_MspInit+0x15c>)
 800211c:	f001 f912 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002120:	e066      	b.n	80021f0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a37      	ldr	r2, [pc, #220]	; (8002204 <HAL_UART_MspInit+0x160>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d161      	bne.n	80021f0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_UART_MspInit+0x158>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a31      	ldr	r2, [pc, #196]	; (80021fc <HAL_UART_MspInit+0x158>)
 8002136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_UART_MspInit+0x158>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_UART_MspInit+0x158>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <HAL_UART_MspInit+0x158>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_UART_MspInit+0x158>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002164:	230c      	movs	r3, #12
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002174:	2307      	movs	r3, #7
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	4820      	ldr	r0, [pc, #128]	; (8002200 <HAL_UART_MspInit+0x15c>)
 8002180:	f001 f8e0 	bl	8003344 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_UART_MspInit+0x164>)
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <HAL_UART_MspInit+0x168>)
 8002188:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_UART_MspInit+0x164>)
 800218c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002190:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_UART_MspInit+0x164>)
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_MspInit+0x164>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021c4:	4810      	ldr	r0, [pc, #64]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021c6:	f000 fcaf 	bl	8002b28 <HAL_DMA_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80021d0:	f7ff fdc2 	bl	8001d58 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_UART_MspInit+0x164>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2026      	movs	r0, #38	; 0x26
 80021e6:	f000 fc68 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ea:	2026      	movs	r0, #38	; 0x26
 80021ec:	f000 fc81 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 80021f0:	bf00      	nop
 80021f2:	3730      	adds	r7, #48	; 0x30
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40011000 	.word	0x40011000
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000
 8002204:	40004400 	.word	0x40004400
 8002208:	20000680 	.word	0x20000680
 800220c:	400260a0 	.word	0x400260a0

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <NMI_Handler+0x4>

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225c:	f000 f8c0 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <DMA1_Stream6_IRQHandler+0x10>)
 800226a:	f000 fdf5 	bl	8002e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000680 	.word	0x20000680

08002278 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800227e:	f002 fc7f 	bl	8004b80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002284:	f002 fc7c 	bl	8004b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200002c8 	.word	0x200002c8
 8002290:	20000430 	.word	0x20000430

08002294 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800229a:	f002 fc71 	bl	8004b80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80022a0:	f002 fc6e 	bl	8004b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200002c8 	.word	0x200002c8
 80022ac:	200004e4 	.word	0x200004e4

080022b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <USART2_IRQHandler+0x10>)
 80022b6:	f003 ff75 	bl	80061a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000060c 	.word	0x2000060c

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002304:	4c0b      	ldr	r4, [pc, #44]	; (8002334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002312:	f7ff ffd7 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f004 ffa9 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff f879 	bl	8001410 <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800232c:	08007328 	.word	0x08007328
  ldr r2, =_sbss
 8002330:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002334:	20000d7c 	.word	0x20000d7c

08002338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_Init+0x40>)
 8002346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_Init+0x40>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_Init+0x40>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 fb9d 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	2000      	movs	r0, #0
 800236c:	f000 f808 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fcf8 	bl	8001d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x54>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x58>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fbb3 f3f1 	udiv	r3, r3, r1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fbb5 	bl	8002b0e <HAL_SYSTICK_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00e      	b.n	80023cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80a      	bhi.n	80023ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f000 fb7d 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <HAL_InitTick+0x5c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000200 	.word	0x20000200
 80023d8:	20000208 	.word	0x20000208
 80023dc:	20000204 	.word	0x20000204

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000208 	.word	0x20000208
 8002404:	20000d78 	.word	0x20000d78

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000d78 	.word	0x20000d78

08002420 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e033      	b.n	800249e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fcb8 	bl	8001db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002466:	f023 0302 	bic.w	r3, r3, #2
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f94a 	bl	800270c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
 800248e:	e001      	b.n	8002494 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e113      	b.n	80026ec <HAL_ADC_ConfigChannel+0x244>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b09      	cmp	r3, #9
 80024d2:	d925      	bls.n	8002520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	3b1e      	subs	r3, #30
 80024ea:	2207      	movs	r2, #7
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43da      	mvns	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	400a      	ands	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68d9      	ldr	r1, [r3, #12]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	4603      	mov	r3, r0
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4403      	add	r3, r0
 8002512:	3b1e      	subs	r3, #30
 8002514:	409a      	lsls	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	e022      	b.n	8002566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	2207      	movs	r2, #7
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	4603      	mov	r3, r0
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4403      	add	r3, r0
 800255c:	409a      	lsls	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b06      	cmp	r3, #6
 800256c:	d824      	bhi.n	80025b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b05      	subs	r3, #5
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b05      	subs	r3, #5
 80025aa:	fa00 f203 	lsl.w	r2, r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
 80025b6:	e04c      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d824      	bhi.n	800260a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b23      	subs	r3, #35	; 0x23
 80025d2:	221f      	movs	r2, #31
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43da      	mvns	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	400a      	ands	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b23      	subs	r3, #35	; 0x23
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
 8002608:	e023      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b41      	subs	r3, #65	; 0x41
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	400a      	ands	r2, r1
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b41      	subs	r3, #65	; 0x41
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_ADC_ConfigChannel+0x250>)
 8002654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_ADC_ConfigChannel+0x254>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10f      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d8>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b12      	cmp	r3, #18
 8002666:	d10b      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_ADC_ConfigChannel+0x254>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12b      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x23a>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_ADC_ConfigChannel+0x258>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <HAL_ADC_ConfigChannel+0x1f4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b11      	cmp	r3, #17
 800269a:	d122      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_ADC_ConfigChannel+0x258>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_ADC_ConfigChannel+0x25c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_ADC_ConfigChannel+0x260>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9a      	lsrs	r2, r3, #18
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026d4:	e002      	b.n	80026dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f9      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012300 	.word	0x40012300
 80026fc:	40012000 	.word	0x40012000
 8002700:	10000012 	.word	0x10000012
 8002704:	20000200 	.word	0x20000200
 8002708:	431bde83 	.word	0x431bde83

0800270c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002714:	4b79      	ldr	r3, [pc, #484]	; (80028fc <ADC_Init+0x1f0>)
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	4a58      	ldr	r2, [pc, #352]	; (8002900 <ADC_Init+0x1f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	e00f      	b.n	800280a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0202 	bic.w	r2, r2, #2
 8002818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7e1b      	ldrb	r3, [r3, #24]
 8002824:	005a      	lsls	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	3b01      	subs	r3, #1
 8002864:	035a      	lsls	r2, r3, #13
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	e007      	b.n	8002880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	3b01      	subs	r3, #1
 800289c:	051a      	lsls	r2, r3, #20
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028c2:	025a      	lsls	r2, r3, #9
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	029a      	lsls	r2, r3, #10
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40012300 	.word	0x40012300
 8002900:	0f000001 	.word	0x0f000001

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff29 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff3e 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff8e 	bl	80029f8 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5d 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff31 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffa2 	bl	8002a60 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fc68 	bl	8002408 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e099      	b.n	8002c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b64:	e00f      	b.n	8002b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b66:	f7ff fc4f 	bl	8002408 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d908      	bls.n	8002b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e078      	b.n	8002c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e8      	bne.n	8002b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_DMA_Init+0x158>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d117      	bne.n	8002c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fb0d 	bl	800324c <DMA_CheckFifoParam>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2240      	movs	r2, #64	; 0x40
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c46:	2301      	movs	r3, #1
 8002c48:	e016      	b.n	8002c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fac4 	bl	80031e0 <DMA_CalcBaseAndBitshift>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	f010803f 	.word	0xf010803f

08002c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_DMA_Start_IT+0x26>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e040      	b.n	8002d2c <HAL_DMA_Start_IT+0xa8>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d12f      	bne.n	8002d1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fa56 	bl	8003184 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	223f      	movs	r2, #63	; 0x3f
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0216 	orr.w	r2, r2, #22
 8002cf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e005      	b.n	8002d2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d42:	f7ff fb61 	bl	8002408 <HAL_GetTick>
 8002d46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d008      	beq.n	8002d66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e052      	b.n	8002e0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0216 	bic.w	r2, r2, #22
 8002d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_DMA_Abort+0x62>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0208 	bic.w	r2, r2, #8
 8002da4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db6:	e013      	b.n	8002de0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db8:	f7ff fb26 	bl	8002408 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d90c      	bls.n	8002de0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e015      	b.n	8002e0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e4      	bne.n	8002db8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	223f      	movs	r2, #63	; 0x3f
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d004      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00c      	b.n	8002e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2205      	movs	r2, #5
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e64:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <HAL_DMA_IRQHandler+0x248>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a8e      	ldr	r2, [pc, #568]	; (80030a4 <HAL_DMA_IRQHandler+0x24c>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0a9b      	lsrs	r3, r3, #10
 8002e70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2208      	movs	r2, #8
 8002e84:	409a      	lsls	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01a      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0202 	orr.w	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2204      	movs	r2, #4
 8002f00:	409a      	lsls	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d012      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f043 0204 	orr.w	r2, r3, #4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	2210      	movs	r2, #16
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d043      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d03c      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	2210      	movs	r2, #16
 8002f54:	409a      	lsls	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d018      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d024      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	e01f      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
 8002f98:	e016      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0208 	bic.w	r2, r2, #8
 8002fb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2220      	movs	r2, #32
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 808f 	beq.w	80030f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8087 	beq.w	80030f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	2220      	movs	r2, #32
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d136      	bne.n	8003070 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0216 	bic.w	r2, r2, #22
 8003010:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003020:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <HAL_DMA_IRQHandler+0x1da>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0208 	bic.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	223f      	movs	r2, #63	; 0x3f
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	2b00      	cmp	r3, #0
 8003064:	d07e      	beq.n	8003164 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
        }
        return;
 800306e:	e079      	b.n	8003164 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01d      	beq.n	80030ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	2b00      	cmp	r3, #0
 8003092:	d031      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e02c      	b.n	80030f8 <HAL_DMA_IRQHandler+0x2a0>
 800309e:	bf00      	nop
 80030a0:	20000200 	.word	0x20000200
 80030a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d023      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
 80030b8:	e01e      	b.n	80030f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10f      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0210 	bic.w	r2, r2, #16
 80030d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d032      	beq.n	8003166 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d022      	beq.n	8003152 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2205      	movs	r2, #5
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3301      	adds	r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	429a      	cmp	r2, r3
 800312e:	d307      	bcc.n	8003140 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f2      	bne.n	8003124 <HAL_DMA_IRQHandler+0x2cc>
 800313e:	e000      	b.n	8003142 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003140:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
 8003162:	e000      	b.n	8003166 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003164:	bf00      	nop
    }
  }
}
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d108      	bne.n	80031c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031c2:	e007      	b.n	80031d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	3b10      	subs	r3, #16
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <DMA_CalcBaseAndBitshift+0x64>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <DMA_CalcBaseAndBitshift+0x68>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d909      	bls.n	8003222 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	659a      	str	r2, [r3, #88]	; 0x58
 8003220:	e007      	b.n	8003232 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	aaaaaaab 	.word	0xaaaaaaab
 8003248:	08007310 	.word	0x08007310

0800324c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11f      	bne.n	80032a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d856      	bhi.n	800331a <DMA_CheckFifoParam+0xce>
 800326c:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <DMA_CheckFifoParam+0x28>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003285 	.word	0x08003285
 8003278:	08003297 	.word	0x08003297
 800327c:	08003285 	.word	0x08003285
 8003280:	0800331b 	.word	0x0800331b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d046      	beq.n	800331e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003294:	e043      	b.n	800331e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800329e:	d140      	bne.n	8003322 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a4:	e03d      	b.n	8003322 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ae:	d121      	bne.n	80032f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d837      	bhi.n	8003326 <DMA_CheckFifoParam+0xda>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <DMA_CheckFifoParam+0x70>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032d3 	.word	0x080032d3
 80032c4:	080032cd 	.word	0x080032cd
 80032c8:	080032e5 	.word	0x080032e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      break;
 80032d0:	e030      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d025      	beq.n	800332a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e2:	e022      	b.n	800332a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ec:	d11f      	bne.n	800332e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032f2:	e01c      	b.n	800332e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d903      	bls.n	8003302 <DMA_CheckFifoParam+0xb6>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d003      	beq.n	8003308 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003300:	e018      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
      break;
 8003306:	e015      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00e      	beq.n	8003332 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e00b      	b.n	8003332 <DMA_CheckFifoParam+0xe6>
      break;
 800331a:	bf00      	nop
 800331c:	e00a      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      break;
 800331e:	bf00      	nop
 8003320:	e008      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      break;
 8003322:	bf00      	nop
 8003324:	e006      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      break;
 8003326:	bf00      	nop
 8003328:	e004      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      break;   
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
    }
  } 
  
  return status; 
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e159      	b.n	8003614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	f040 8148 	bne.w	800360e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d005      	beq.n	8003396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	2b02      	cmp	r3, #2
 8003394:	d130      	bne.n	80033f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 0201 	and.w	r2, r3, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b03      	cmp	r3, #3
 8003402:	d017      	beq.n	8003434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d123      	bne.n	8003488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	08da      	lsrs	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3208      	adds	r2, #8
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0203 	and.w	r2, r3, #3
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a2 	beq.w	800360e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b57      	ldr	r3, [pc, #348]	; (800362c <HAL_GPIO_Init+0x2e8>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4a56      	ldr	r2, [pc, #344]	; (800362c <HAL_GPIO_Init+0x2e8>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	; 0x44
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <HAL_GPIO_Init+0x2e8>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e6:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_GPIO_Init+0x2ec>)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	220f      	movs	r2, #15
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a49      	ldr	r2, [pc, #292]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_Init+0x202>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a48      	ldr	r2, [pc, #288]	; (8003638 <HAL_GPIO_Init+0x2f4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_Init+0x1fe>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a47      	ldr	r2, [pc, #284]	; (800363c <HAL_GPIO_Init+0x2f8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_Init+0x1fa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a46      	ldr	r2, [pc, #280]	; (8003640 <HAL_GPIO_Init+0x2fc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_Init+0x1f6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a45      	ldr	r2, [pc, #276]	; (8003644 <HAL_GPIO_Init+0x300>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_Init+0x1f2>
 8003532:	2304      	movs	r3, #4
 8003534:	e008      	b.n	8003548 <HAL_GPIO_Init+0x204>
 8003536:	2307      	movs	r3, #7
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x204>
 800353a:	2303      	movs	r3, #3
 800353c:	e004      	b.n	8003548 <HAL_GPIO_Init+0x204>
 800353e:	2302      	movs	r3, #2
 8003540:	e002      	b.n	8003548 <HAL_GPIO_Init+0x204>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x204>
 8003546:	2300      	movs	r3, #0
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	f002 0203 	and.w	r2, r2, #3
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	4093      	lsls	r3, r2
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003558:	4935      	ldr	r1, [pc, #212]	; (8003630 <HAL_GPIO_Init+0x2ec>)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_GPIO_Init+0x304>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358a:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_GPIO_Init+0x304>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003590:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_GPIO_Init+0x304>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b4:	4a24      	ldr	r2, [pc, #144]	; (8003648 <HAL_GPIO_Init+0x304>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_GPIO_Init+0x304>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035de:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <HAL_GPIO_Init+0x304>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_GPIO_Init+0x304>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003608:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <HAL_GPIO_Init+0x304>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3301      	adds	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b0f      	cmp	r3, #15
 8003618:	f67f aea2 	bls.w	8003360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40013800 	.word	0x40013800
 8003634:	40020000 	.word	0x40020000
 8003638:	40020400 	.word	0x40020400
 800363c:	40020800 	.word	0x40020800
 8003640:	40020c00 	.word	0x40020c00
 8003644:	40021000 	.word	0x40021000
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e12b      	b.n	80038ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe fbc8 	bl	8001e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e4:	f000 fd80 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 80036e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a81      	ldr	r2, [pc, #516]	; (80038f4 <HAL_I2C_Init+0x274>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d807      	bhi.n	8003704 <HAL_I2C_Init+0x84>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a80      	ldr	r2, [pc, #512]	; (80038f8 <HAL_I2C_Init+0x278>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e006      	b.n	8003712 <HAL_I2C_Init+0x92>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a7d      	ldr	r2, [pc, #500]	; (80038fc <HAL_I2C_Init+0x27c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	bf94      	ite	ls
 800370c:	2301      	movls	r3, #1
 800370e:	2300      	movhi	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0e7      	b.n	80038ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a78      	ldr	r2, [pc, #480]	; (8003900 <HAL_I2C_Init+0x280>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0c9b      	lsrs	r3, r3, #18
 8003724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a6a      	ldr	r2, [pc, #424]	; (80038f4 <HAL_I2C_Init+0x274>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <HAL_I2C_Init+0xd4>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3301      	adds	r3, #1
 8003752:	e009      	b.n	8003768 <HAL_I2C_Init+0xe8>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	4a69      	ldr	r2, [pc, #420]	; (8003904 <HAL_I2C_Init+0x284>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	3301      	adds	r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800377a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	495c      	ldr	r1, [pc, #368]	; (80038f4 <HAL_I2C_Init+0x274>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d819      	bhi.n	80037bc <HAL_I2C_Init+0x13c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e59      	subs	r1, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fbb1 f3f3 	udiv	r3, r1, r3
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	f640 73fc 	movw	r3, #4092	; 0xffc
 800379c:	400b      	ands	r3, r1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_I2C_Init+0x138>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e59      	subs	r1, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b6:	e051      	b.n	800385c <HAL_I2C_Init+0x1dc>
 80037b8:	2304      	movs	r3, #4
 80037ba:	e04f      	b.n	800385c <HAL_I2C_Init+0x1dc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d111      	bne.n	80037e8 <HAL_I2C_Init+0x168>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	440b      	add	r3, r1
 80037d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e012      	b.n	800380e <HAL_I2C_Init+0x18e>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	0099      	lsls	r1, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Init+0x196>
 8003812:	2301      	movs	r3, #1
 8003814:	e022      	b.n	800385c <HAL_I2C_Init+0x1dc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <HAL_I2C_Init+0x1bc>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e58      	subs	r0, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	440b      	add	r3, r1
 800382c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003830:	3301      	adds	r3, #1
 8003832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383a:	e00f      	b.n	800385c <HAL_I2C_Init+0x1dc>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	0099      	lsls	r1, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	6809      	ldr	r1, [r1, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800388a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6911      	ldr	r1, [r2, #16]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68d2      	ldr	r2, [r2, #12]
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	000186a0 	.word	0x000186a0
 80038f8:	001e847f 	.word	0x001e847f
 80038fc:	003d08ff 	.word	0x003d08ff
 8003900:	431bde83 	.word	0x431bde83
 8003904:	10624dd3 	.word	0x10624dd3

08003908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e267      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003932:	4b85      	ldr	r3, [pc, #532]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d112      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b7e      	ldr	r3, [pc, #504]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e242      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6f      	ldr	r2, [pc, #444]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6c      	ldr	r2, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b69      	ldr	r3, [pc, #420]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a68      	ldr	r2, [pc, #416]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fd22 	bl	8002408 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe fd1e 	bl	8002408 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e207      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fd0e 	bl	8002408 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fd0a 	bl	8002408 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1f3      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d063      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1c7      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4937      	ldr	r1, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x244>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fcc3 	bl	8002408 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fe fcbf 	bl	8002408 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1a8      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4925      	ldr	r1, [pc, #148]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_OscConfig+0x244>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fca2 	bl	8002408 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fe fc9e 	bl	8002408 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e187      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_RCC_OscConfig+0x248>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe fc82 	bl	8002408 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fe fc7e 	bl	8002408 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e167      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
 8003b26:	e01b      	b.n	8003b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_OscConfig+0x248>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fc6b 	bl	8002408 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e00e      	b.n	8003b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe fc67 	bl	8002408 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d907      	bls.n	8003b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e150      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470000 	.word	0x42470000
 8003b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8097 	beq.w	8003c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b72:	4b81      	ldr	r3, [pc, #516]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d118      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003baa:	4b74      	ldr	r3, [pc, #464]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a73      	ldr	r2, [pc, #460]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fc27 	bl	8002408 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbe:	f7fe fc23 	bl	8002408 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e10c      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2ea>
 8003be4:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	4a63      	ldr	r2, [pc, #396]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x324>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x30c>
 8003bfa:	4b5f      	ldr	r3, [pc, #380]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a5e      	ldr	r2, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a5b      	ldr	r2, [pc, #364]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x324>
 8003c14:	4b58      	ldr	r3, [pc, #352]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a57      	ldr	r2, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c20:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a54      	ldr	r2, [pc, #336]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fe fbe8 	bl	8002408 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fe fbe4 	bl	8002408 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0cb      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCC_OscConfig+0x334>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c60:	f7fe fbd2 	bl	8002408 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fe fbce 	bl	8002408 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0b5      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a1 	beq.w	8003de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca6:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d05c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d141      	bne.n	8003d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fba2 	bl	8002408 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fb9e 	bl	8002408 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e087      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fe fb77 	bl	8002408 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fe fb73 	bl	8002408 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e05c      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x416>
 8003d3c:	e054      	b.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fb60 	bl	8002408 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fe fb5c 	bl	8002408 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e045      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x444>
 8003d6a:	e03d      	b.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e038      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x4ec>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d028      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d121      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d11a      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d111      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b68      	ldr	r3, [pc, #416]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d90c      	bls.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b65      	ldr	r3, [pc, #404]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b63      	ldr	r3, [pc, #396]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0b8      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e4c:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	494d      	ldr	r1, [pc, #308]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d044      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e06f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e067      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed6:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4934      	ldr	r1, [pc, #208]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fe fa8e 	bl	8002408 <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef0:	f7fe fa8a 	bl	8002408 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e04f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 020c 	and.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1eb      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d20c      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e032      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4916      	ldr	r1, [pc, #88]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7e:	f000 f821 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	490a      	ldr	r1, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe f9ee 	bl	8002380 <HAL_InitTick>

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	080072f8 	.word	0x080072f8
 8003fbc:	20000200 	.word	0x20000200
 8003fc0:	20000204 	.word	0x20000204

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc8:	b094      	sub	sp, #80	; 0x50
 8003fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fdc:	4b79      	ldr	r3, [pc, #484]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d00d      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	f200 80e1 	bhi.w	80041b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ff6:	e0db      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ffc:	e0db      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffe:	4b73      	ldr	r3, [pc, #460]	; (80041cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004002:	e0d8      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004004:	4b6f      	ldr	r3, [pc, #444]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400e:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
 8004024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
 800402e:	2300      	movs	r3, #0
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	0159      	lsls	r1, r3, #5
 8004044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004048:	0150      	lsls	r0, r2, #5
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4621      	mov	r1, r4
 8004050:	1a51      	subs	r1, r2, r1
 8004052:	6139      	str	r1, [r7, #16]
 8004054:	4629      	mov	r1, r5
 8004056:	eb63 0301 	sbc.w	r3, r3, r1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004068:	4659      	mov	r1, fp
 800406a:	018b      	lsls	r3, r1, #6
 800406c:	4651      	mov	r1, sl
 800406e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004072:	4651      	mov	r1, sl
 8004074:	018a      	lsls	r2, r1, #6
 8004076:	4651      	mov	r1, sl
 8004078:	ebb2 0801 	subs.w	r8, r2, r1
 800407c:	4659      	mov	r1, fp
 800407e:	eb63 0901 	sbc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	462b      	mov	r3, r5
 80040a4:	eb49 0303 	adc.w	r3, r9, r3
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040b6:	4629      	mov	r1, r5
 80040b8:	024b      	lsls	r3, r1, #9
 80040ba:	4621      	mov	r1, r4
 80040bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c0:	4621      	mov	r1, r4
 80040c2:	024a      	lsls	r2, r1, #9
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ca:	2200      	movs	r2, #0
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040d4:	f7fc fcbe 	bl	8000a54 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4613      	mov	r3, r2
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	e058      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e2:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	2200      	movs	r2, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	4611      	mov	r1, r2
 80040ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040f2:	623b      	str	r3, [r7, #32]
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	f04f 0000 	mov.w	r0, #0
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	0159      	lsls	r1, r3, #5
 800410a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410e:	0150      	lsls	r0, r2, #5
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4641      	mov	r1, r8
 8004116:	ebb2 0a01 	subs.w	sl, r2, r1
 800411a:	4649      	mov	r1, r9
 800411c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800412c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004134:	ebb2 040a 	subs.w	r4, r2, sl
 8004138:	eb63 050b 	sbc.w	r5, r3, fp
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	00eb      	lsls	r3, r5, #3
 8004146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414a:	00e2      	lsls	r2, r4, #3
 800414c:	4614      	mov	r4, r2
 800414e:	461d      	mov	r5, r3
 8004150:	4643      	mov	r3, r8
 8004152:	18e3      	adds	r3, r4, r3
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	464b      	mov	r3, r9
 8004158:	eb45 0303 	adc.w	r3, r5, r3
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416a:	4629      	mov	r1, r5
 800416c:	028b      	lsls	r3, r1, #10
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004174:	4621      	mov	r1, r4
 8004176:	028a      	lsls	r2, r1, #10
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417e:	2200      	movs	r2, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	61fa      	str	r2, [r7, #28]
 8004184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004188:	f7fc fc64 	bl	8000a54 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4613      	mov	r3, r2
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	3301      	adds	r3, #1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ae:	e002      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3750      	adds	r7, #80	; 0x50
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200

080041d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000200 	.word	0x20000200

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041ec:	f7ff fff0 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0a9b      	lsrs	r3, r3, #10
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4903      	ldr	r1, [pc, #12]	; (800420c <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	08007308 	.word	0x08007308

08004210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004214:	f7ff ffdc 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0b5b      	lsrs	r3, r3, #13
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	08007308 	.word	0x08007308

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e04c      	b.n	80042e4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d111      	bne.n	800427a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f001 fc16 	bl	8005a90 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <HAL_TIM_Base_Init+0xb4>)
 8004270:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f001 f933 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08001ecd 	.word	0x08001ecd

080042f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e03c      	b.n	8004382 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_TIM_Base_Start+0xa0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d018      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d013      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_TIM_Base_Start+0xa4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_TIM_Base_Start+0xa8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_TIM_Base_Start+0xac>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_TIM_Base_Start+0xb0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d010      	beq.n	8004380 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	e007      	b.n	8004380 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40014000 	.word	0x40014000

080043a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d001      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e044      	b.n	8004446 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_TIM_Base_Start_IT+0xb0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d018      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x6c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d013      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x6c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_TIM_Base_Start_IT+0xb4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x6c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_TIM_Base_Start_IT+0xb8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x6c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_TIM_Base_Start_IT+0xbc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x6c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_TIM_Base_Start_IT+0xc0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d111      	bne.n	8004434 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b06      	cmp	r3, #6
 8004420:	d010      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	e007      	b.n	8004444 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40014000 	.word	0x40014000

08004468 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e04c      	b.n	8004514 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d111      	bne.n	80044aa <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fafe 	bl	8005a90 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_TIM_OC_Init+0xb4>)
 80044a0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f001 f81b 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08004521 	.word	0x08004521

08004520 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e04c      	b.n	80045e0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d111      	bne.n	8004576 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f001 fa98 	bl	8005a90 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <HAL_TIM_PWM_Init+0xb4>)
 800456c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f000 ffb5 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	080045ed 	.word	0x080045ed

080045ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_TIM_PWM_Start+0x24>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e022      	b.n	800466a <HAL_TIM_PWM_Start+0x6a>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d109      	bne.n	800463e <HAL_TIM_PWM_Start+0x3e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e015      	b.n	800466a <HAL_TIM_PWM_Start+0x6a>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d109      	bne.n	8004658 <HAL_TIM_PWM_Start+0x58>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e008      	b.n	800466a <HAL_TIM_PWM_Start+0x6a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e068      	b.n	8004744 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0x82>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	e013      	b.n	80046aa <HAL_TIM_PWM_Start+0xaa>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0x92>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	e00b      	b.n	80046aa <HAL_TIM_PWM_Start+0xaa>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a0:	e003      	b.n	80046aa <HAL_TIM_PWM_Start+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2201      	movs	r2, #1
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f9c6 	bl	8005a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_TIM_PWM_Start+0x14c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d107      	bne.n	80046d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_TIM_PWM_Start+0x14c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d018      	beq.n	800470e <HAL_TIM_PWM_Start+0x10e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d013      	beq.n	800470e <HAL_TIM_PWM_Start+0x10e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_TIM_PWM_Start+0x150>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_TIM_PWM_Start+0x10e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a17      	ldr	r2, [pc, #92]	; (8004754 <HAL_TIM_PWM_Start+0x154>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_TIM_PWM_Start+0x10e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIM_PWM_Start+0x158>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIM_PWM_Start+0x10e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_TIM_PWM_Start+0x15c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d111      	bne.n	8004732 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b06      	cmp	r3, #6
 800471e:	d010      	beq.n	8004742 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	e007      	b.n	8004742 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40014000 	.word	0x40014000

08004760 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e04c      	b.n	800480e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f001 f981 	bl	8005a90 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_TIM_OnePulse_Init+0xb8>)
 800479a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 fe9e 	bl	80054f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0208 	bic.w	r2, r2, #8
 80047ca:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	0800481d 	.word	0x0800481d

0800481c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004840:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004848:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004850:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004858:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d108      	bne.n	8004872 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004866:	7b7b      	ldrb	r3, [r7, #13]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d102      	bne.n	8004872 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800486c:	7b3b      	ldrb	r3, [r7, #12]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d001      	beq.n	8004876 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e03b      	b.n	80048ee <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0202 	orr.w	r2, r2, #2
 80048a4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0204 	orr.w	r2, r2, #4
 80048b4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2201      	movs	r2, #1
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f8c0 	bl	8005a44 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	2104      	movs	r1, #4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 f8b9 	bl	8005a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d107      	bne.n	80048ec <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40010000 	.word	0x40010000

080048fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0a2      	b.n	8004a56 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d111      	bne.n	8004940 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f001 f8b3 	bl	8005a90 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a4a      	ldr	r2, [pc, #296]	; (8004a60 <HAL_TIM_Encoder_Init+0x164>)
 8004936:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 fdc6 	bl	80054f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	4313      	orrs	r3, r2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049b2:	f023 030c 	bic.w	r3, r3, #12
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	4313      	orrs	r3, r2
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	011a      	lsls	r2, r3, #4
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	031b      	lsls	r3, r3, #12
 80049e2:	4313      	orrs	r3, r2
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4313      	orrs	r3, r2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08001fa5 	.word	0x08001fa5

08004a64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a9a:	7b7b      	ldrb	r3, [r7, #13]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e069      	b.n	8004b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	e031      	b.n	8004b1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d110      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004abc:	7bbb      	ldrb	r3, [r7, #14]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d102      	bne.n	8004ac8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ac2:	7b3b      	ldrb	r3, [r7, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e055      	b.n	8004b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	e01d      	b.n	8004b1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d108      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aea:	7b7b      	ldrb	r3, [r7, #13]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004af0:	7b3b      	ldrb	r3, [r7, #12]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d001      	beq.n	8004afa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e03e      	b.n	8004b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_TIM_Encoder_Start+0xc4>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d008      	beq.n	8004b38 <HAL_TIM_Encoder_Start+0xd4>
 8004b26:	e00f      	b.n	8004b48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 ff87 	bl	8005a44 <TIM_CCxChannelCmd>
      break;
 8004b36:	e016      	b.n	8004b66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2104      	movs	r1, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 ff7f 	bl	8005a44 <TIM_CCxChannelCmd>
      break;
 8004b46:	e00e      	b.n	8004b66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 ff77 	bl	8005a44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 ff70 	bl	8005a44 <TIM_CCxChannelCmd>
      break;
 8004b64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d128      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d121      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0202 	mvn.w	r2, #2
 8004bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
 8004bcc:	e009      	b.n	8004be2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d128      	bne.n	8004c48 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d121      	bne.n	8004c48 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0204 	mvn.w	r2, #4
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
 8004c2c:	e009      	b.n	8004c42 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d128      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d121      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0208 	mvn.w	r2, #8
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
 8004c8c:	e009      	b.n	8004ca2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d128      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d121      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	e009      	b.n	8004d02 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d110      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d109      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0201 	mvn.w	r2, #1
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d110      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d109      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	d110      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d110      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0220 	mvn.w	r2, #32
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_OC_ConfigChannel+0x1e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e048      	b.n	8004e80 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d839      	bhi.n	8004e70 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e71 	.word	0x08004e71
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004e71 	.word	0x08004e71
 8004e14:	08004e47 	.word	0x08004e47
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e71 	.word	0x08004e71
 8004e2c:	08004e71 	.word	0x08004e71
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004e63 	.word	0x08004e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fbda 	bl	80055f8 <TIM_OC1_SetConfig>
      break;
 8004e44:	e017      	b.n	8004e76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fc39 	bl	80056c4 <TIM_OC2_SetConfig>
      break;
 8004e52:	e010      	b.n	8004e76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fc9e 	bl	800579c <TIM_OC3_SetConfig>
      break;
 8004e60:	e009      	b.n	8004e76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fd01 	bl	8005870 <TIM_OC4_SetConfig>
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	75fb      	strb	r3, [r7, #23]
      break;
 8004e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0ae      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	f200 809f 	bhi.w	8004ff4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004ff5 	.word	0x08004ff5
 8004ec4:	08004ff5 	.word	0x08004ff5
 8004ec8:	08004ff5 	.word	0x08004ff5
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004ff5 	.word	0x08004ff5
 8004ed4:	08004ff5 	.word	0x08004ff5
 8004ed8:	08004ff5 	.word	0x08004ff5
 8004edc:	08004f73 	.word	0x08004f73
 8004ee0:	08004ff5 	.word	0x08004ff5
 8004ee4:	08004ff5 	.word	0x08004ff5
 8004ee8:	08004ff5 	.word	0x08004ff5
 8004eec:	08004fb3 	.word	0x08004fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fb7e 	bl	80055f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0204 	bic.w	r2, r2, #4
 8004f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	619a      	str	r2, [r3, #24]
      break;
 8004f2e:	e064      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fbc4 	bl	80056c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6999      	ldr	r1, [r3, #24]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	619a      	str	r2, [r3, #24]
      break;
 8004f70:	e043      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fc0f 	bl	800579c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0208 	orr.w	r2, r2, #8
 8004f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0204 	bic.w	r2, r2, #4
 8004f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69d9      	ldr	r1, [r3, #28]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	61da      	str	r2, [r3, #28]
      break;
 8004fb0:	e023      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fc59 	bl	8005870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69d9      	ldr	r1, [r3, #28]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	021a      	lsls	r2, r3, #8
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	61da      	str	r2, [r3, #28]
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIM_ConfigClockSource+0x1c>
 8005024:	2302      	movs	r3, #2
 8005026:	e0b4      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x186>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800504e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005060:	d03e      	beq.n	80050e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	f200 8087 	bhi.w	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	f000 8086 	beq.w	800517e <HAL_TIM_ConfigClockSource+0x172>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d87f      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b70      	cmp	r3, #112	; 0x70
 800507a:	d01a      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0xa6>
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d87b      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b60      	cmp	r3, #96	; 0x60
 8005082:	d050      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x11a>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d877      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b50      	cmp	r3, #80	; 0x50
 800508a:	d03c      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0xfa>
 800508c:	2b50      	cmp	r3, #80	; 0x50
 800508e:	d873      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d058      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0x13a>
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d86f      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b30      	cmp	r3, #48	; 0x30
 800509a:	d064      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d86b      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d060      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d867      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05c      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d05a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	e062      	b.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6899      	ldr	r1, [r3, #8]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f000 fc9f 	bl	8005a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
      break;
 80050de:	e04f      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f000 fc88 	bl	8005a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005102:	609a      	str	r2, [r3, #8]
      break;
 8005104:	e03c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fbfc 	bl	8005910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2150      	movs	r1, #80	; 0x50
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fc55 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005124:	e02c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	461a      	mov	r2, r3
 8005134:	f000 fc1b 	bl	800596e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2160      	movs	r1, #96	; 0x60
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fc45 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005144:	e01c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 fbdc 	bl	8005910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2140      	movs	r1, #64	; 0x40
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fc35 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005164:	e00c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f000 fc2c 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005176:	e003      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      break;
 800517c:	e000      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800517e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	460b      	mov	r3, r1
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e135      	b.n	80054ec <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_TIM_RegisterCallback+0x2a>
 800528a:	2302      	movs	r3, #2
 800528c:	e12e      	b.n	80054ec <HAL_TIM_RegisterCallback+0x288>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f040 80ba 	bne.w	8005418 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80052a4:	7afb      	ldrb	r3, [r7, #11]
 80052a6:	2b1a      	cmp	r3, #26
 80052a8:	f200 80b3 	bhi.w	8005412 <HAL_TIM_RegisterCallback+0x1ae>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <HAL_TIM_RegisterCallback+0x50>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	08005321 	.word	0x08005321
 80052b8:	08005329 	.word	0x08005329
 80052bc:	08005331 	.word	0x08005331
 80052c0:	08005339 	.word	0x08005339
 80052c4:	08005341 	.word	0x08005341
 80052c8:	08005349 	.word	0x08005349
 80052cc:	08005351 	.word	0x08005351
 80052d0:	08005359 	.word	0x08005359
 80052d4:	08005361 	.word	0x08005361
 80052d8:	08005369 	.word	0x08005369
 80052dc:	08005371 	.word	0x08005371
 80052e0:	08005379 	.word	0x08005379
 80052e4:	08005381 	.word	0x08005381
 80052e8:	08005389 	.word	0x08005389
 80052ec:	08005391 	.word	0x08005391
 80052f0:	0800539b 	.word	0x0800539b
 80052f4:	080053a5 	.word	0x080053a5
 80052f8:	080053af 	.word	0x080053af
 80052fc:	080053b9 	.word	0x080053b9
 8005300:	080053c3 	.word	0x080053c3
 8005304:	080053cd 	.word	0x080053cd
 8005308:	080053d7 	.word	0x080053d7
 800530c:	080053e1 	.word	0x080053e1
 8005310:	080053eb 	.word	0x080053eb
 8005314:	080053f5 	.word	0x080053f5
 8005318:	080053ff 	.word	0x080053ff
 800531c:	08005409 	.word	0x08005409
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005326:	e0dc      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800532e:	e0d8      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005336:	e0d4      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800533e:	e0d0      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005346:	e0cc      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800534e:	e0c8      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005356:	e0c4      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800535e:	e0c0      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005366:	e0bc      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800536e:	e0b8      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005376:	e0b4      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800537e:	e0b0      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005386:	e0ac      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800538e:	e0a8      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005398:	e0a3      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80053a2:	e09e      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80053ac:	e099      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80053b6:	e094      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80053c0:	e08f      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80053ca:	e08a      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80053d4:	e085      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80053de:	e080      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80053e8:	e07b      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80053f2:	e076      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80053fc:	e071      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8005406:	e06c      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8005410:	e067      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
        break;
 8005416:	e064      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d15c      	bne.n	80054de <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	2b0d      	cmp	r3, #13
 8005428:	d856      	bhi.n	80054d8 <HAL_TIM_RegisterCallback+0x274>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <HAL_TIM_RegisterCallback+0x1cc>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005469 	.word	0x08005469
 8005434:	08005471 	.word	0x08005471
 8005438:	08005479 	.word	0x08005479
 800543c:	08005481 	.word	0x08005481
 8005440:	08005489 	.word	0x08005489
 8005444:	08005491 	.word	0x08005491
 8005448:	08005499 	.word	0x08005499
 800544c:	080054a1 	.word	0x080054a1
 8005450:	080054a9 	.word	0x080054a9
 8005454:	080054b1 	.word	0x080054b1
 8005458:	080054b9 	.word	0x080054b9
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080054c9 	.word	0x080054c9
 8005464:	080054d1 	.word	0x080054d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800546e:	e038      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005476:	e034      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800547e:	e030      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005486:	e02c      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800548e:	e028      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005496:	e024      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800549e:	e020      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80054a6:	e01c      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80054ae:	e018      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80054b6:	e014      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80054be:	e010      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80054c6:	e00c      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80054ce:	e008      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80054d6:	e004      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
        break;
 80054dc:	e001      	b.n	80054e2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a34      	ldr	r2, [pc, #208]	; (80055dc <TIM_Base_SetConfig+0xe4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00f      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d00b      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a31      	ldr	r2, [pc, #196]	; (80055e0 <TIM_Base_SetConfig+0xe8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a30      	ldr	r2, [pc, #192]	; (80055e4 <TIM_Base_SetConfig+0xec>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a2f      	ldr	r2, [pc, #188]	; (80055e8 <TIM_Base_SetConfig+0xf0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d108      	bne.n	8005542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a25      	ldr	r2, [pc, #148]	; (80055dc <TIM_Base_SetConfig+0xe4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01b      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d017      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <TIM_Base_SetConfig+0xe8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <TIM_Base_SetConfig+0xec>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00f      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <TIM_Base_SetConfig+0xf0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <TIM_Base_SetConfig+0xf4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <TIM_Base_SetConfig+0xf8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <TIM_Base_SetConfig+0xfc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a08      	ldr	r2, [pc, #32]	; (80055dc <TIM_Base_SetConfig+0xe4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800

080055f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0201 	bic.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 0302 	bic.w	r3, r3, #2
 8005640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <TIM_OC1_SetConfig+0xc8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10c      	bne.n	800566e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0308 	bic.w	r3, r3, #8
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0304 	bic.w	r3, r3, #4
 800566c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <TIM_OC1_SetConfig+0xc8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d111      	bne.n	800569a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40010000 	.word	0x40010000

080056c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0210 	bic.w	r2, r3, #16
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0320 	bic.w	r3, r3, #32
 800570e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <TIM_OC2_SetConfig+0xd4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10d      	bne.n	8005740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a15      	ldr	r2, [pc, #84]	; (8005798 <TIM_OC2_SetConfig+0xd4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d113      	bne.n	8005770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000

0800579c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <TIM_OC3_SetConfig+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10d      	bne.n	8005816 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a14      	ldr	r2, [pc, #80]	; (800586c <TIM_OC3_SetConfig+0xd0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d113      	bne.n	8005846 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	621a      	str	r2, [r3, #32]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40010000 	.word	0x40010000

08005870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	031b      	lsls	r3, r3, #12
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <TIM_OC4_SetConfig+0x9c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d109      	bne.n	80058e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000

08005910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800593a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 030a 	bic.w	r3, r3, #10
 800594c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800596e:	b480      	push	{r7}
 8005970:	b087      	sub	sp, #28
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0210 	bic.w	r2, r3, #16
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	031b      	lsls	r3, r3, #12
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f043 0307 	orr.w	r3, r3, #7
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2201      	movs	r2, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1a      	ldr	r2, [r3, #32]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	401a      	ands	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1a      	ldr	r2, [r3, #32]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <TIM_ResetCallback+0x7c>)
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <TIM_ResetCallback+0x80>)
 8005aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <TIM_ResetCallback+0x84>)
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a19      	ldr	r2, [pc, #100]	; (8005b18 <TIM_ResetCallback+0x88>)
 8005ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <TIM_ResetCallback+0x8c>)
 8005abc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <TIM_ResetCallback+0x90>)
 8005ac4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_ResetCallback+0x94>)
 8005acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_ResetCallback+0x98>)
 8005ad4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <TIM_ResetCallback+0x9c>)
 8005adc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <TIM_ResetCallback+0xa0>)
 8005ae4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <TIM_ResetCallback+0xa4>)
 8005aec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <TIM_ResetCallback+0xa8>)
 8005af4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a10      	ldr	r2, [pc, #64]	; (8005b3c <TIM_ResetCallback+0xac>)
 8005afc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	0800519b 	.word	0x0800519b
 8005b10:	080051af 	.word	0x080051af
 8005b14:	08005227 	.word	0x08005227
 8005b18:	0800523b 	.word	0x0800523b
 8005b1c:	080051d7 	.word	0x080051d7
 8005b20:	080051eb 	.word	0x080051eb
 8005b24:	080051c3 	.word	0x080051c3
 8005b28:	080051ff 	.word	0x080051ff
 8005b2c:	08005213 	.word	0x08005213
 8005b30:	0800524f 	.word	0x0800524f
 8005b34:	08005cc1 	.word	0x08005cc1
 8005b38:	08005cd5 	.word	0x08005cd5
 8005b3c:	08005ce9 	.word	0x08005ce9

08005b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e050      	b.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d013      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10c      	bne.n	8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40014000 	.word	0x40014000

08005c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e03d      	b.n	8005cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e04a      	b.n	8005da4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d111      	bne.n	8005d3e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fd2c 	bl	8006780 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <HAL_UART_Init+0xb0>)
 8005d34:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2224      	movs	r2, #36	; 0x24
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fff6 	bl	8006d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	080020a5 	.word	0x080020a5

08005db0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	460b      	mov	r3, r1
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e08c      	b.n	8005ef2 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_UART_RegisterCallback+0x36>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e085      	b.n	8005ef2 <HAL_UART_RegisterCallback+0x142>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d151      	bne.n	8005e9e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d845      	bhi.n	8005e8c <HAL_UART_RegisterCallback+0xdc>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_UART_RegisterCallback+0x58>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005e45 	.word	0x08005e45
 8005e10:	08005e4d 	.word	0x08005e4d
 8005e14:	08005e55 	.word	0x08005e55
 8005e18:	08005e5d 	.word	0x08005e5d
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e6d 	.word	0x08005e6d
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e8d 	.word	0x08005e8d
 8005e2c:	08005e8d 	.word	0x08005e8d
 8005e30:	08005e8d 	.word	0x08005e8d
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e85 	.word	0x08005e85
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8005e42:	e051      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005e4a:	e04d      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005e52:	e049      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005e5a:	e045      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005e62:	e041      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005e6a:	e03d      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005e72:	e039      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005e7a:	e035      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005e82:	e031      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005e8a:	e02d      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	75fb      	strb	r3, [r7, #23]
        break;
 8005e9c:	e024      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d116      	bne.n	8005ed8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	2b0b      	cmp	r3, #11
 8005eae:	d002      	beq.n	8005eb6 <HAL_UART_RegisterCallback+0x106>
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d004      	beq.n	8005ebe <HAL_UART_RegisterCallback+0x10e>
 8005eb4:	e007      	b.n	8005ec6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005ebc:	e014      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005ec4:	e010      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
        break;
 8005ed6:	e007      	b.n	8005ee8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d11d      	bne.n	8005f56 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_UART_Receive_IT+0x26>
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e016      	b.n	8005f58 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Receive_IT+0x38>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e00f      	b.n	8005f58 <HAL_UART_Receive_IT+0x58>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fcf7 	bl	8006940 <UART_Start_Receive_IT>
 8005f52:	4603      	mov	r3, r0
 8005f54:	e000      	b.n	8005f58 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f56:	2302      	movs	r3, #2
  }
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d165      	bne.n	8006046 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_UART_Transmit_DMA+0x26>
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e05e      	b.n	8006048 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Transmit_DMA+0x38>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e057      	b.n	8006048 <HAL_UART_Transmit_DMA+0xe8>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	88fa      	ldrh	r2, [r7, #6]
 8005faa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2221      	movs	r2, #33	; 0x21
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <HAL_UART_Transmit_DMA+0xf0>)
 8005fc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	4a21      	ldr	r2, [pc, #132]	; (8006054 <HAL_UART_Transmit_DMA+0xf4>)
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd4:	4a20      	ldr	r2, [pc, #128]	; (8006058 <HAL_UART_Transmit_DMA+0xf8>)
 8005fd6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	2200      	movs	r2, #0
 8005fde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005fe0:	f107 0308 	add.w	r3, r7, #8
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	6819      	ldr	r1, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	f7fc fe44 	bl	8002c84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006004:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3314      	adds	r3, #20
 8006014:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	617b      	str	r3, [r7, #20]
   return(result);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602e:	627a      	str	r2, [r7, #36]	; 0x24
 8006030:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6a39      	ldr	r1, [r7, #32]
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	61fb      	str	r3, [r7, #28]
   return(result);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e000      	b.n	8006048 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
  }
}
 8006048:	4618      	mov	r0, r3
 800604a:	3730      	adds	r7, #48	; 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	080067f1 	.word	0x080067f1
 8006054:	0800688d 	.word	0x0800688d
 8006058:	080068ab 	.word	0x080068ab

0800605c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b09a      	sub	sp, #104	; 0x68
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800607a:	667b      	str	r3, [r7, #100]	; 0x64
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006084:	657a      	str	r2, [r7, #84]	; 0x54
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800608a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	663b      	str	r3, [r7, #96]	; 0x60
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060b8:	643a      	str	r2, [r7, #64]	; 0x40
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d119      	bne.n	8006108 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d136      	bne.n	8006184 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	60bb      	str	r3, [r7, #8]
   return(result);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612c:	65bb      	str	r3, [r7, #88]	; 0x58
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006136:	61ba      	str	r2, [r7, #24]
 8006138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	613b      	str	r3, [r7, #16]
   return(result);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e5      	bne.n	8006116 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	2b00      	cmp	r3, #0
 8006150:	d018      	beq.n	8006184 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	2200      	movs	r2, #0
 8006158:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	4618      	mov	r0, r3
 8006160:	f7fc fde8 	bl	8002d34 <HAL_DMA_Abort>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc fffc 	bl	800316c <HAL_DMA_GetError>
 8006174:	4603      	mov	r3, r0
 8006176:	2b20      	cmp	r3, #32
 8006178:	d104      	bne.n	8006184 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2210      	movs	r2, #16
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e00a      	b.n	800619a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3768      	adds	r7, #104	; 0x68
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b0ba      	sub	sp, #232	; 0xe8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10f      	bne.n	800620a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_UART_IRQHandler+0x66>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fce3 	bl	8006bce <UART_Receive_IT>
      return;
 8006208:	e25b      	b.n	80066c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800620a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80e1 	beq.w	80063d6 <HAL_UART_IRQHandler+0x232>
 8006214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006224:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80d4 	beq.w	80063d6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <HAL_UART_IRQHandler+0xae>
 800623a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f043 0201 	orr.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00b      	beq.n	8006276 <HAL_UART_IRQHandler+0xd2>
 800625e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f043 0202 	orr.w	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <HAL_UART_IRQHandler+0xf6>
 8006282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0204 	orr.w	r2, r3, #4
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d011      	beq.n	80062ca <HAL_UART_IRQHandler+0x126>
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d105      	bne.n	80062be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f043 0208 	orr.w	r2, r3, #8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 81f2 	beq.w	80066b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_UART_IRQHandler+0x14e>
 80062e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fc6e 	bl	8006bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <HAL_UART_IRQHandler+0x17a>
 8006316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d051      	beq.n	80063c2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fb74 	bl	8006a0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d142      	bne.n	80063b8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3314      	adds	r3, #20
 8006338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800634c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3314      	adds	r3, #20
 800635a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800635e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800636a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1d9      	bne.n	8006332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	4a7f      	ldr	r2, [pc, #508]	; (8006588 <HAL_UART_IRQHandler+0x3e4>)
 800638c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	4618      	mov	r0, r3
 8006394:	f7fc fd3e 	bl	8002e14 <HAL_DMA_Abort_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d019      	beq.n	80063d2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	e011      	b.n	80063d2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b6:	e00c      	b.n	80063d2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e007      	b.n	80063d2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063d0:	e172      	b.n	80066b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d2:	bf00      	nop
    return;
 80063d4:	e170      	b.n	80066b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	2b01      	cmp	r3, #1
 80063dc:	f040 814c 	bne.w	8006678 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8145 	beq.w	8006678 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 813e 	beq.w	8006678 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063fc:	2300      	movs	r3, #0
 80063fe:	60bb      	str	r3, [r7, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	f040 80b5 	bne.w	800658c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800642e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8142 	beq.w	80066bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800643c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006440:	429a      	cmp	r2, r3
 8006442:	f080 813b 	bcs.w	80066bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006458:	f000 8088 	beq.w	800656c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006488:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800648c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006494:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1d9      	bne.n	800645c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e1      	bne.n	80064a8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006508:	66fa      	str	r2, [r7, #108]	; 0x6c
 800650a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800650e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e3      	bne.n	80064e4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800653a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800654e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006550:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e3      	bne.n	800652a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	4618      	mov	r0, r3
 8006568:	f7fc fbe4 	bl	8002d34 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006578:	b292      	uxth	r2, r2
 800657a:	1a8a      	subs	r2, r1, r2
 800657c:	b292      	uxth	r2, r2
 800657e:	4611      	mov	r1, r2
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006584:	e09a      	b.n	80066bc <HAL_UART_IRQHandler+0x518>
 8006586:	bf00      	nop
 8006588:	08006ad3 	.word	0x08006ad3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006594:	b29b      	uxth	r3, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 808c 	beq.w	80066c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80065a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8087 	beq.w	80066c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065d6:	647a      	str	r2, [r7, #68]	; 0x44
 80065d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e3      	bne.n	80065b2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	623b      	str	r3, [r7, #32]
   return(result);
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3314      	adds	r3, #20
 800660a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800660e:	633a      	str	r2, [r7, #48]	; 0x30
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e3      	bne.n	80065ea <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006654:	61fa      	str	r2, [r7, #28]
 8006656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	69b9      	ldr	r1, [r7, #24]
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	617b      	str	r3, [r7, #20]
   return(result);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e3      	bne.n	8006630 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006670:	4611      	mov	r1, r2
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006676:	e023      	b.n	80066c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	d009      	beq.n	8006698 <HAL_UART_IRQHandler+0x4f4>
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa33 	bl	8006afc <UART_Transmit_IT>
    return;
 8006696:	e014      	b.n	80066c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00e      	beq.n	80066c2 <HAL_UART_IRQHandler+0x51e>
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa73 	bl	8006b9c <UART_EndTransmit_IT>
    return;
 80066b6:	e004      	b.n	80066c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80066b8:	bf00      	nop
 80066ba:	e002      	b.n	80066c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80066bc:	bf00      	nop
 80066be:	e000      	b.n	80066c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80066c0:	bf00      	nop
  }
}
 80066c2:	37e8      	adds	r7, #232	; 0xe8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a10      	ldr	r2, [pc, #64]	; (80067cc <UART_InitCallbacksToDefault+0x4c>)
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <UART_InitCallbacksToDefault+0x50>)
 8006792:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a0f      	ldr	r2, [pc, #60]	; (80067d4 <UART_InitCallbacksToDefault+0x54>)
 8006798:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a0e      	ldr	r2, [pc, #56]	; (80067d8 <UART_InitCallbacksToDefault+0x58>)
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a0e      	ldr	r2, [pc, #56]	; (80067dc <UART_InitCallbacksToDefault+0x5c>)
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <UART_InitCallbacksToDefault+0x60>)
 80067aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a0d      	ldr	r2, [pc, #52]	; (80067e4 <UART_InitCallbacksToDefault+0x64>)
 80067b0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a0c      	ldr	r2, [pc, #48]	; (80067e8 <UART_InitCallbacksToDefault+0x68>)
 80067b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0c      	ldr	r2, [pc, #48]	; (80067ec <UART_InitCallbacksToDefault+0x6c>)
 80067bc:	669a      	str	r2, [r3, #104]	; 0x68

}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	080066dd 	.word	0x080066dd
 80067d0:	080066c9 	.word	0x080066c9
 80067d4:	08006705 	.word	0x08006705
 80067d8:	080066f1 	.word	0x080066f1
 80067dc:	08006719 	.word	0x08006719
 80067e0:	0800672d 	.word	0x0800672d
 80067e4:	08006741 	.word	0x08006741
 80067e8:	08006755 	.word	0x08006755
 80067ec:	08006769 	.word	0x08006769

080067f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b090      	sub	sp, #64	; 0x40
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d137      	bne.n	800687c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680e:	2200      	movs	r2, #0
 8006810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	623b      	str	r3, [r7, #32]
   return(result);
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006828:	63bb      	str	r3, [r7, #56]	; 0x38
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006832:	633a      	str	r2, [r7, #48]	; 0x30
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	60fb      	str	r3, [r7, #12]
   return(result);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006866:	61fa      	str	r2, [r7, #28]
 8006868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	69b9      	ldr	r1, [r7, #24]
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	617b      	str	r3, [r7, #20]
   return(result);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800687a:	e003      	b.n	8006884 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006880:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006882:	4798      	blx	r3
}
 8006884:	bf00      	nop
 8006886:	3740      	adds	r7, #64	; 0x40
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	bf0c      	ite	eq
 80068ca:	2301      	moveq	r3, #1
 80068cc:	2300      	movne	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b21      	cmp	r3, #33	; 0x21
 80068dc:	d108      	bne.n	80068f0 <UART_DMAError+0x46>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068ea:	68b8      	ldr	r0, [r7, #8]
 80068ec:	f000 f866 	bl	80069bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	bf0c      	ite	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	2300      	movne	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b22      	cmp	r3, #34	; 0x22
 8006910:	d108      	bne.n	8006924 <UART_DMAError+0x7a>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2200      	movs	r2, #0
 800691c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800691e:	68b8      	ldr	r0, [r7, #8]
 8006920:	f000 f874 	bl	8006a0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	f043 0210 	orr.w	r2, r3, #16
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	68b8      	ldr	r0, [r7, #8]
 8006936:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2222      	movs	r2, #34	; 0x22
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800698c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0220 	orr.w	r2, r2, #32
 80069ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	; 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	61ba      	str	r2, [r7, #24]
 80069e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6979      	ldr	r1, [r7, #20]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	613b      	str	r3, [r7, #16]
   return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e5      	bne.n	80069c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a00:	bf00      	nop
 8006a02:	3724      	adds	r7, #36	; 0x24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b095      	sub	sp, #84	; 0x54
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a34:	643a      	str	r2, [r7, #64]	; 0x40
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f023 0301 	bic.w	r3, r3, #1
 8006a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3314      	adds	r3, #20
 8006a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e5      	bne.n	8006a48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d119      	bne.n	8006ab8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa4:	61ba      	str	r2, [r7, #24]
 8006aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ac6:	bf00      	nop
 8006ac8:	3754      	adds	r7, #84	; 0x54
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b21      	cmp	r3, #33	; 0x21
 8006b0e:	d13e      	bne.n	8006b8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b18:	d114      	bne.n	8006b44 <UART_Transmit_IT+0x48>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d110      	bne.n	8006b44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	1c9a      	adds	r2, r3, #2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]
 8006b42:	e008      	b.n	8006b56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	1c59      	adds	r1, r3, #1
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6211      	str	r1, [r2, #32]
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	4619      	mov	r1, r3
 8006b64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e000      	b.n	8006b90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
  }
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08c      	sub	sp, #48	; 0x30
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b22      	cmp	r3, #34	; 0x22
 8006be0:	f040 80ad 	bne.w	8006d3e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bec:	d117      	bne.n	8006c1e <UART_Receive_IT+0x50>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d113      	bne.n	8006c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	1c9a      	adds	r2, r3, #2
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c1c:	e026      	b.n	8006c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d007      	beq.n	8006c42 <UART_Receive_IT+0x74>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <UART_Receive_IT+0x82>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e008      	b.n	8006c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d15c      	bne.n	8006d3a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0220 	bic.w	r2, r2, #32
 8006c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d136      	bne.n	8006d2e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f023 0310 	bic.w	r3, r3, #16
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	623a      	str	r2, [r7, #32]
 8006ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	69f9      	ldr	r1, [r7, #28]
 8006cec:	6a3a      	ldr	r2, [r7, #32]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d10a      	bne.n	8006d1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006d26:	4611      	mov	r1, r2
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
 8006d2c:	e003      	b.n	8006d36 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e002      	b.n	8006d40 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d4c:	b0c0      	sub	sp, #256	; 0x100
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	ea40 0301 	orr.w	r3, r0, r1
 8006d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006da0:	f021 010c 	bic.w	r1, r1, #12
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dae:	430b      	orrs	r3, r1
 8006db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc2:	6999      	ldr	r1, [r3, #24]
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	ea40 0301 	orr.w	r3, r0, r1
 8006dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b8f      	ldr	r3, [pc, #572]	; (8007014 <UART_SetConfig+0x2cc>)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d005      	beq.n	8006de8 <UART_SetConfig+0xa0>
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <UART_SetConfig+0x2d0>)
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d104      	bne.n	8006df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006de8:	f7fd fa12 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8006dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006df0:	e003      	b.n	8006dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006df2:	f7fd f9f9 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8006df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e04:	f040 810c 	bne.w	8007020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	1891      	adds	r1, r2, r2
 8006e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e22:	415b      	adcs	r3, r3
 8006e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	eb12 0801 	adds.w	r8, r2, r1
 8006e30:	4629      	mov	r1, r5
 8006e32:	eb43 0901 	adc.w	r9, r3, r1
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	eb18 0303 	adds.w	r3, r8, r3
 8006e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e58:	462b      	mov	r3, r5
 8006e5a:	eb49 0303 	adc.w	r3, r9, r3
 8006e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e76:	460b      	mov	r3, r1
 8006e78:	18db      	adds	r3, r3, r3
 8006e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	eb42 0303 	adc.w	r3, r2, r3
 8006e82:	657b      	str	r3, [r7, #84]	; 0x54
 8006e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e8c:	f7f9 fde2 	bl	8000a54 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4b61      	ldr	r3, [pc, #388]	; (800701c <UART_SetConfig+0x2d4>)
 8006e96:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	011c      	lsls	r4, r3, #4
 8006e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	1891      	adds	r1, r2, r2
 8006eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006eb8:	415b      	adcs	r3, r3
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee0:	4692      	mov	sl, r2
 8006ee2:	469b      	mov	fp, r3
 8006ee4:	4643      	mov	r3, r8
 8006ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8006eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	18db      	adds	r3, r3, r3
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
 8006f12:	4613      	mov	r3, r2
 8006f14:	eb42 0303 	adc.w	r3, r2, r3
 8006f18:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f22:	f7f9 fd97 	bl	8000a54 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4b3b      	ldr	r3, [pc, #236]	; (800701c <UART_SetConfig+0x2d4>)
 8006f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	2264      	movs	r2, #100	; 0x64
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	1acb      	subs	r3, r1, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f42:	4b36      	ldr	r3, [pc, #216]	; (800701c <UART_SetConfig+0x2d4>)
 8006f44:	fba3 2302 	umull	r2, r3, r3, r2
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f50:	441c      	add	r4, r3
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f74:	4641      	mov	r1, r8
 8006f76:	1851      	adds	r1, r2, r1
 8006f78:	6339      	str	r1, [r7, #48]	; 0x30
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	414b      	adcs	r3, r1
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	00cb      	lsls	r3, r1, #3
 8006f90:	4651      	mov	r1, sl
 8006f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f96:	4651      	mov	r1, sl
 8006f98:	00ca      	lsls	r2, r1, #3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa8:	464b      	mov	r3, r9
 8006faa:	460a      	mov	r2, r1
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fc8:	460b      	mov	r3, r1
 8006fca:	18db      	adds	r3, r3, r3
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fce:	4613      	mov	r3, r2
 8006fd0:	eb42 0303 	adc.w	r3, r2, r3
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fde:	f7f9 fd39 	bl	8000a54 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <UART_SetConfig+0x2d4>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <UART_SetConfig+0x2d4>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f003 0207 	and.w	r2, r3, #7
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4422      	add	r2, r4
 800700e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007010:	e105      	b.n	800721e <UART_SetConfig+0x4d6>
 8007012:	bf00      	nop
 8007014:	40011000 	.word	0x40011000
 8007018:	40011400 	.word	0x40011400
 800701c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800702a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800702e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	1891      	adds	r1, r2, r2
 8007038:	6239      	str	r1, [r7, #32]
 800703a:	415b      	adcs	r3, r3
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
 800703e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007042:	4641      	mov	r1, r8
 8007044:	1854      	adds	r4, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0501 	adc.w	r5, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	00eb      	lsls	r3, r5, #3
 8007056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800705a:	00e2      	lsls	r2, r4, #3
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	4643      	mov	r3, r8
 8007062:	18e3      	adds	r3, r4, r3
 8007064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007068:	464b      	mov	r3, r9
 800706a:	eb45 0303 	adc.w	r3, r5, r3
 800706e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800707e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800708e:	4629      	mov	r1, r5
 8007090:	008b      	lsls	r3, r1, #2
 8007092:	4621      	mov	r1, r4
 8007094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007098:	4621      	mov	r1, r4
 800709a:	008a      	lsls	r2, r1, #2
 800709c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070a0:	f7f9 fcd8 	bl	8000a54 <__aeabi_uldivmod>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4b60      	ldr	r3, [pc, #384]	; (800722c <UART_SetConfig+0x4e4>)
 80070aa:	fba3 2302 	umull	r2, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	011c      	lsls	r4, r3, #4
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	1891      	adds	r1, r2, r2
 80070ca:	61b9      	str	r1, [r7, #24]
 80070cc:	415b      	adcs	r3, r3
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d4:	4641      	mov	r1, r8
 80070d6:	1851      	adds	r1, r2, r1
 80070d8:	6139      	str	r1, [r7, #16]
 80070da:	4649      	mov	r1, r9
 80070dc:	414b      	adcs	r3, r1
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070ec:	4659      	mov	r1, fp
 80070ee:	00cb      	lsls	r3, r1, #3
 80070f0:	4651      	mov	r1, sl
 80070f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f6:	4651      	mov	r1, sl
 80070f8:	00ca      	lsls	r2, r1, #3
 80070fa:	4610      	mov	r0, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	4642      	mov	r2, r8
 8007102:	189b      	adds	r3, r3, r2
 8007104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007108:	464b      	mov	r3, r9
 800710a:	460a      	mov	r2, r1
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	67bb      	str	r3, [r7, #120]	; 0x78
 800711e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800712c:	4649      	mov	r1, r9
 800712e:	008b      	lsls	r3, r1, #2
 8007130:	4641      	mov	r1, r8
 8007132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007136:	4641      	mov	r1, r8
 8007138:	008a      	lsls	r2, r1, #2
 800713a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800713e:	f7f9 fc89 	bl	8000a54 <__aeabi_uldivmod>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <UART_SetConfig+0x4e4>)
 8007148:	fba3 1302 	umull	r1, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2164      	movs	r1, #100	; 0x64
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	3332      	adds	r3, #50	; 0x32
 800715a:	4a34      	ldr	r2, [pc, #208]	; (800722c <UART_SetConfig+0x4e4>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007166:	441c      	add	r4, r3
 8007168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716c:	2200      	movs	r2, #0
 800716e:	673b      	str	r3, [r7, #112]	; 0x70
 8007170:	677a      	str	r2, [r7, #116]	; 0x74
 8007172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	1891      	adds	r1, r2, r2
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	415b      	adcs	r3, r3
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007186:	4641      	mov	r1, r8
 8007188:	1851      	adds	r1, r2, r1
 800718a:	6039      	str	r1, [r7, #0]
 800718c:	4649      	mov	r1, r9
 800718e:	414b      	adcs	r3, r1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800719e:	4659      	mov	r1, fp
 80071a0:	00cb      	lsls	r3, r1, #3
 80071a2:	4651      	mov	r1, sl
 80071a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071a8:	4651      	mov	r1, sl
 80071aa:	00ca      	lsls	r2, r1, #3
 80071ac:	4610      	mov	r0, r2
 80071ae:	4619      	mov	r1, r3
 80071b0:	4603      	mov	r3, r0
 80071b2:	4642      	mov	r2, r8
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b8:	464b      	mov	r3, r9
 80071ba:	460a      	mov	r2, r1
 80071bc:	eb42 0303 	adc.w	r3, r2, r3
 80071c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	663b      	str	r3, [r7, #96]	; 0x60
 80071cc:	667a      	str	r2, [r7, #100]	; 0x64
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071da:	4649      	mov	r1, r9
 80071dc:	008b      	lsls	r3, r1, #2
 80071de:	4641      	mov	r1, r8
 80071e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e4:	4641      	mov	r1, r8
 80071e6:	008a      	lsls	r2, r1, #2
 80071e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071ec:	f7f9 fc32 	bl	8000a54 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <UART_SetConfig+0x4e4>)
 80071f6:	fba3 1302 	umull	r1, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2164      	movs	r1, #100	; 0x64
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	3332      	adds	r3, #50	; 0x32
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <UART_SetConfig+0x4e4>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f003 020f 	and.w	r2, r3, #15
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4422      	add	r2, r4
 800721c:	609a      	str	r2, [r3, #8]
}
 800721e:	bf00      	nop
 8007220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	51eb851f 	.word	0x51eb851f

08007230 <arm_pid_init_f32>:
 8007230:	edd0 6a08 	vldr	s13, [r0, #32]
 8007234:	edd0 7a06 	vldr	s15, [r0, #24]
 8007238:	ed90 7a07 	vldr	s14, [r0, #28]
 800723c:	edc0 6a02 	vstr	s13, [r0, #8]
 8007240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007244:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8007248:	eef1 7a67 	vneg.f32	s15, s15
 800724c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007250:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007254:	ed80 7a00 	vstr	s14, [r0]
 8007258:	edc0 7a01 	vstr	s15, [r0, #4]
 800725c:	b901      	cbnz	r1, 8007260 <arm_pid_init_f32+0x30>
 800725e:	4770      	bx	lr
 8007260:	2300      	movs	r3, #0
 8007262:	60c3      	str	r3, [r0, #12]
 8007264:	6103      	str	r3, [r0, #16]
 8007266:	6143      	str	r3, [r0, #20]
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4d0d      	ldr	r5, [pc, #52]	; (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	; (80072a8 <__libc_init_array+0x3c>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2600      	movs	r6, #0
 8007278:	42a6      	cmp	r6, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4d0b      	ldr	r5, [pc, #44]	; (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	; (80072b0 <__libc_init_array+0x44>)
 8007280:	f000 f82e 	bl	80072e0 <_init>
 8007284:	1b64      	subs	r4, r4, r5
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2600      	movs	r6, #0
 800728a:	42a6      	cmp	r6, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f855 3b04 	ldr.w	r3, [r5], #4
 8007294:	4798      	blx	r3
 8007296:	3601      	adds	r6, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f855 3b04 	ldr.w	r3, [r5], #4
 800729e:	4798      	blx	r3
 80072a0:	3601      	adds	r6, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	08007320 	.word	0x08007320
 80072a8:	08007320 	.word	0x08007320
 80072ac:	08007320 	.word	0x08007320
 80072b0:	08007324 	.word	0x08007324

080072b4 <memcpy>:
 80072b4:	440a      	add	r2, r1
 80072b6:	4291      	cmp	r1, r2
 80072b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072bc:	d100      	bne.n	80072c0 <memcpy+0xc>
 80072be:	4770      	bx	lr
 80072c0:	b510      	push	{r4, lr}
 80072c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ca:	4291      	cmp	r1, r2
 80072cc:	d1f9      	bne.n	80072c2 <memcpy+0xe>
 80072ce:	bd10      	pop	{r4, pc}

080072d0 <memset>:
 80072d0:	4402      	add	r2, r0
 80072d2:	4603      	mov	r3, r0
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d100      	bne.n	80072da <memset+0xa>
 80072d8:	4770      	bx	lr
 80072da:	f803 1b01 	strb.w	r1, [r3], #1
 80072de:	e7f9      	b.n	80072d4 <memset+0x4>

080072e0 <_init>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr

080072ec <_fini>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr
