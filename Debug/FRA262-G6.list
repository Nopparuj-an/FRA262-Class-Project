
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  08012eb0  08012eb0  00022eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013988  08013988  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  08013988  08013988  00023988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013990  08013990  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013990  08013990  00023990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013994  08013994  00023994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08013998  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  20000410  08013da8  00030410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000201c  08013da8  0003201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190d7  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370c  00000000  00000000  00049517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0004cc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0004e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac43  00000000  00000000  0004f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b527  00000000  00000000  00069fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d40  00000000  00000000  000854ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012622a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f10  00000000  00000000  0012627c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000410 	.word	0x20000410
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012e94 	.word	0x08012e94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000414 	.word	0x20000414
 80001dc:	08012e94 	.word	0x08012e94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_EMERGENCY>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_EMERGENCY(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[1] = { 0xF0 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f005 f9ba 	bl	8006388 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_EMERGENCY+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 1, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_EMERGENCY+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f006 fc67 	bl	8007900 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f005 f9a9 	bl	8006388 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_EMERGENCY+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}

}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000042c 	.word	0x2000042c
 8001050:	20000000 	.word	0x20000000
 8001054:	20000430 	.word	0x20000430

08001058 <ENDEFF_EMERGENCY_QUIT>:
void ENDEFF_EMERGENCY_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0xE5, 0x7A, 0xFF, 0x81 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f005 f992 	bl	8006388 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_EMERGENCY_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2304      	movs	r3, #4
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_EMERGENCY_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f006 fc3f 	bl	8007900 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f005 f981 	bl	8006388 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_EMERGENCY_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000042c 	.word	0x2000042c
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000430 	.word	0x20000430

080010a8 <ENDEFF_TEST_MODE>:
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f005 f96a 	bl	8006388 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_TEST_MODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f006 fc17 	bl	8007900 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f005 f959 	bl	8006388 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_TEST_MODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000042c 	.word	0x2000042c
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000430 	.word	0x20000430

080010f8 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f005 f942 	bl	8006388 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f006 fbef 	bl	8007900 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f005 f931 	bl	8006388 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000042c 	.word	0x2000042c
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000430 	.word	0x20000430

08001148 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001150:	f005 f91a 	bl	8006388 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b09      	cmp	r3, #9
 800115e:	d911      	bls.n	8001184 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 800116a:	212a      	movs	r1, #42	; 0x2a
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 fbc7 	bl	8007900 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001172:	f005 f909 	bl	8006388 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 800117a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
		return;
 8001182:	bf00      	nop
	}
}
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000042c 	.word	0x2000042c
 8001190:	20000010 	.word	0x20000010
 8001194:	20000430 	.word	0x20000430

08001198 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 80011a0:	f005 f8f2 	bl	8006388 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d911      	bls.n	80011d4 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_IDLE+0x48>)
 80011ba:	212a      	movs	r1, #42	; 0x2a
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 fb9f 	bl	8007900 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c2:	f005 f8e1 	bl	8006388 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011ca:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_IDLE+0x4c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
		return;
 80011d2:	bf00      	nop
	}
}
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000042c 	.word	0x2000042c
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000430 	.word	0x20000430

080011e8 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011f0:	f005 f8ca 	bl	8006388 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001200:	d311      	bcc.n	8001226 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <ENDEFF_GRIPPER_PICK+0x48>)
 800120c:	212a      	movs	r1, #42	; 0x2a
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f006 fb76 	bl	8007900 <HAL_I2C_Master_Transmit>
//		speaker_play(51, 6);
		timestamp = HAL_GetTick();
 8001214:	f005 f8b8 	bl	8006388 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 800121c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
		return;
 8001224:	bf00      	nop
	}
}
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000042c 	.word	0x2000042c
 8001230:	20000018 	.word	0x20000018
 8001234:	20000430 	.word	0x20000430

08001238 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001240:	f005 f8a2 	bl	8006388 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001250:	d311      	bcc.n	8001276 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2302      	movs	r3, #2
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <ENDEFF_GRIPPER_PLACE+0x48>)
 800125c:	212a      	movs	r1, #42	; 0x2a
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f006 fb4e 	bl	8007900 <HAL_I2C_Master_Transmit>
//		speaker_play(51, 7);
		timestamp = HAL_GetTick();
 8001264:	f005 f890 	bl	8006388 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 800126c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <ENDEFF_GRIPPER_PLACE+0x4c>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
		return;
 8001274:	bf00      	nop
	}
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000042c 	.word	0x2000042c
 8001280:	2000001c 	.word	0x2000001c
 8001284:	20000430 	.word	0x20000430

08001288 <ENE_I2C_UPDATE>:

void ENE_I2C_UPDATE(int16_t *DataFrame, I2C_HandleTypeDef *hi2c, uint8_t reinit) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]
	static uint8_t feedback_flag;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;

	if (reinit) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <ENE_I2C_UPDATE+0x20>
		END_EFFECTOR_STATE = INIT;
 800129c:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		feedback_flag = 0;
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	}

	if (feedback_flag && (HAL_GetTick() - feedback_delay > 2200)) {
 80012a8:	4ba4      	ldr	r3, [pc, #656]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <ENE_I2C_UPDATE+0x48>
 80012b0:	f005 f86a 	bl	8006388 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f640 0298 	movw	r2, #2200	; 0x898
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d905      	bls.n	80012d0 <ENE_I2C_UPDATE+0x48>
		feedback_flag = 0;
 80012c4:	4b9d      	ldr	r3, [pc, #628]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		*DataFrame = 0b0010;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2202      	movs	r2, #2
 80012ce:	801a      	strh	r2, [r3, #0]
	}

	switch (END_EFFECTOR_STATE) {
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f200 813c 	bhi.w	8001552 <ENE_I2C_UPDATE+0x2ca>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <ENE_I2C_UPDATE+0x58>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	0800134f 	.word	0x0800134f
 80012e8:	080013b3 	.word	0x080013b3
 80012ec:	08001497 	.word	0x08001497
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00e      	beq.n	800131e <ENE_I2C_UPDATE+0x96>
			ENDEFF_TEST_MODE(hi2c);
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff fed1 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	f040 8110 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = TEST;
 8001310:	4b89      	ldr	r3, [pc, #548]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800131c:	e108      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8100 	beq.w	8001530 <ENE_I2C_UPDATE+0x2a8>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f7ff ff09 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	f040 80f8 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = RUNMODE;
 8001340:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001342:	2202      	movs	r2, #2
 8001344:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
		break;
 800134c:	e0f0      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <ENE_I2C_UPDATE+0xf4>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff feca 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80e3 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = INIT;
 800136e:	4b72      	ldr	r3, [pc, #456]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800137a:	e0db      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80d3 	beq.w	8001534 <ENE_I2C_UPDATE+0x2ac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff feb2 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fed7 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f040 80c8 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = RUNMODE;
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		break;
 80013b0:	e0c0      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10e      	bne.n	80013e0 <ENE_I2C_UPDATE+0x158>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fee8 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 80bd 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = INIT;
 80013d2:	4b59      	ldr	r3, [pc, #356]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 80013de:	e0b5      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <ENE_I2C_UPDATE+0x186>
			ENDEFF_TEST_MODE(hi2c);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff fe59 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 80a6 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = TEST;
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001406:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
		break;
 800140c:	e09e      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <ENE_I2C_UPDATE+0x1ca>
			ENDEFF_GRIPPER_PICK(hi2c);
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fee2 	bl	80011e8 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 808f 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				feedback_flag = 1;
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001434:	f004 ffa8 	bl	8006388 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800143c:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = PICKED;
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
				picked = 1;
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
		break;
 8001450:	e07c      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	b29b      	uxth	r3, r3
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d074      	beq.n	800154c <ENE_I2C_UPDATE+0x2c4>
			if (picked == 1) {
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d170      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
				ENDEFF_GRIPPER_PLACE(hi2c);
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fee4 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d169      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
					feedback_flag = 1;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
					feedback_delay = HAL_GetTick();
 800147e:	f004 ff83 	bl	8006388 <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 8001486:	6013      	str	r3, [r2, #0]
					complete = 0;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
					picked = 0;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		break;
 8001494:	e05a      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <ENE_I2C_UPDATE+0x23a>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fe76 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d14d      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = INIT;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80014c0:	e046      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b0001) == 1) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <ENE_I2C_UPDATE+0x266>
			ENDEFF_TEST_MODE(hi2c);
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fde8 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d137      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = TEST;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		break;
 80014ec:	e030      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d028      	beq.n	8001550 <ENE_I2C_UPDATE+0x2c8>
			ENDEFF_GRIPPER_PLACE(hi2c);
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7ff fe9a 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d121      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				feedback_flag = 1;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001512:	f004 ff39 	bl	8006388 <HAL_GetTick>
 8001516:	4603      	mov	r3, r0
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800151a:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = RUNMODE;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
				picked = 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		break;
 800152e:	e00f      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		break;
 8001530:	bf00      	nop
 8001532:	e00e      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001534:	bf00      	nop
 8001536:	e00c      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
 8001538:	20000434 	.word	0x20000434
 800153c:	20000435 	.word	0x20000435
 8001540:	20000438 	.word	0x20000438
 8001544:	20000430 	.word	0x20000430
 8001548:	2000043c 	.word	0x2000043c
		break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop

0800155c <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4903      	ldr	r1, [pc, #12]	; (8001570 <UARTInterruptConfig+0x14>)
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <UARTInterruptConfig+0x18>)
 8001566:	f009 fb09 	bl	800ab7c <HAL_UART_Receive_IT>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000440 	.word	0x20000440
 8001574:	20001e60 	.word	0x20001e60

08001578 <Joystick_Transmit>:

void Joystick_Transmit(int16_t Position_x, int16_t Position_y, uint8_t PicknPlace) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	70fb      	strb	r3, [r7, #3]
	static int LastPos_x;
	static int LastPos_y;
	static int LastState;
	static uint8_t data[5];

	data[0] = Position_x >> 8;
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	121b      	asrs	r3, r3, #8
 8001590:	b21b      	sxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <Joystick_Transmit+0xac>)
 8001596:	701a      	strb	r2, [r3, #0]
	data[1] = Position_x & 0xFF;
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <Joystick_Transmit+0xac>)
 800159e:	705a      	strb	r2, [r3, #1]
	data[2] = Position_y >> 8;
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	121b      	asrs	r3, r3, #8
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <Joystick_Transmit+0xac>)
 80015ac:	709a      	strb	r2, [r3, #2]
	data[3] = Position_y & 0xFF;
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <Joystick_Transmit+0xac>)
 80015b4:	70da      	strb	r2, [r3, #3]
	data[4] = PicknPlace;
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <Joystick_Transmit+0xac>)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	7113      	strb	r3, [r2, #4]

	if (Position_x != LastPos_x || Position_y != LastPos_y || PicknPlace != LastState) {
 80015bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <Joystick_Transmit+0xb0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10a      	bne.n	80015de <Joystick_Transmit+0x66>
 80015c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <Joystick_Transmit+0xb4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d104      	bne.n	80015de <Joystick_Transmit+0x66>
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <Joystick_Transmit+0xb8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d012      	beq.n	8001604 <Joystick_Transmit+0x8c>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() - timestamp > 50) {
 80015de:	f004 fed3 	bl	8006388 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <Joystick_Transmit+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b32      	cmp	r3, #50	; 0x32
 80015ec:	d916      	bls.n	800161c <Joystick_Transmit+0xa4>
			timestamp = HAL_GetTick() + 50;
 80015ee:	f004 fecb 	bl	8006388 <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <Joystick_Transmit+0xbc>)
 80015f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, data, sizeof(data));
 80015fa:	2205      	movs	r2, #5
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <Joystick_Transmit+0xac>)
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <Joystick_Transmit+0xc0>)
 8001600:	f009 faec 	bl	800abdc <HAL_UART_Transmit_DMA>
		} else {
			return;
		}
	}

	LastPos_x = Position_x;
 8001604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <Joystick_Transmit+0xb0>)
 800160a:	6013      	str	r3, [r2, #0]
	LastPos_y = Position_y;
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <Joystick_Transmit+0xb4>)
 8001612:	6013      	str	r3, [r2, #0]
	LastState = PicknPlace;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <Joystick_Transmit+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e000      	b.n	800161e <Joystick_Transmit+0xa6>
			return;
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000444 	.word	0x20000444
 8001628:	2000044c 	.word	0x2000044c
 800162c:	20000450 	.word	0x20000450
 8001630:	20000454 	.word	0x20000454
 8001634:	20000458 	.word	0x20000458
 8001638:	20001e60 	.word	0x20001e60

0800163c <Joystick_Received>:

void Joystick_Received(int *receivedByte) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	static int count;
	static uint8_t tempData[6];
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <Joystick_Received+0x144>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Joystick_Received+0x16>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d009      	beq.n	8001664 <Joystick_Received+0x28>
 8001650:	e08d      	b.n	800176e <Joystick_Received+0x132>
	case (START):
		if (RxBuffer[0] == 69) {
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <Joystick_Received+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b45      	cmp	r3, #69	; 0x45
 8001658:	f040 8088 	bne.w	800176c <Joystick_Received+0x130>
			Joy_State = COUNT;
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <Joystick_Received+0x144>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001662:	e083      	b.n	800176c <Joystick_Received+0x130>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <Joystick_Received+0x148>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b45      	cmp	r3, #69	; 0x45
 800166a:	d111      	bne.n	8001690 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(tempData); i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e007      	b.n	8001682 <Joystick_Received+0x46>
				tempData[i] = 0;
 8001672:	4a45      	ldr	r2, [pc, #276]	; (8001788 <Joystick_Received+0x14c>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d9f4      	bls.n	8001672 <Joystick_Received+0x36>
			}
			count = 0;
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <Joystick_Received+0x150>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			joystick_callback();
		} else {
			tempData[count] = RxBuffer[0];
			count++;
		}
		break;
 800168e:	e06e      	b.n	800176e <Joystick_Received+0x132>
		} else if (RxBuffer[0] == 71 && count < sizeof(tempData)) {
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <Joystick_Received+0x148>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	d115      	bne.n	80016c4 <Joystick_Received+0x88>
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <Joystick_Received+0x150>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d811      	bhi.n	80016c4 <Joystick_Received+0x88>
			for (int i = 0; i < sizeof(tempData); i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	e007      	b.n	80016b6 <Joystick_Received+0x7a>
				tempData[i] = 0;
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <Joystick_Received+0x14c>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d9f4      	bls.n	80016a6 <Joystick_Received+0x6a>
			count = 0;
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <Joystick_Received+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e052      	b.n	800176a <Joystick_Received+0x12e>
		} else if (RxBuffer[0] == 71 && count == 6) {
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <Joystick_Received+0x148>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b47      	cmp	r3, #71	; 0x47
 80016ca:	d142      	bne.n	8001752 <Joystick_Received+0x116>
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <Joystick_Received+0x150>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d13e      	bne.n	8001752 <Joystick_Received+0x116>
			count = 0;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <Joystick_Received+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			receivedByte[0] = (tempData[1] << 8) | tempData[0];
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <Joystick_Received+0x14c>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <Joystick_Received+0x14c>)
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
			receivedByte[1] = (tempData[3] << 8) | tempData[2];
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <Joystick_Received+0x14c>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	021a      	lsls	r2, r3, #8
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <Joystick_Received+0x14c>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	4619      	mov	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
			receivedByte[2] = tempData[4];
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <Joystick_Received+0x14c>)
 8001700:	791a      	ldrb	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3308      	adds	r3, #8
 8001706:	601a      	str	r2, [r3, #0]
			receivedByte[3] = tempData[5];
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <Joystick_Received+0x14c>)
 800170a:	795a      	ldrb	r2, [r3, #5]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330c      	adds	r3, #12
 8001710:	601a      	str	r2, [r3, #0]
			if (receivedByte[0] > UINT16_MAX / 2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800171a:	db06      	blt.n	800172a <Joystick_Received+0xee>
				receivedByte[0] -= UINT16_MAX + 1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00d      	b.n	8001746 <Joystick_Received+0x10a>
			else if (receivedByte[1] > UINT16_MAX / 2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001734:	db07      	blt.n	8001746 <Joystick_Received+0x10a>
				receivedByte[1] -= UINT16_MAX + 1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001744:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <Joystick_Received+0x144>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			joystick_callback();
 800174c:	f002 faf8 	bl	8003d40 <joystick_callback>
		} else if (RxBuffer[0] == 71 && count == 6) {
 8001750:	e00b      	b.n	800176a <Joystick_Received+0x12e>
			tempData[count] = RxBuffer[0];
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <Joystick_Received+0x150>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <Joystick_Received+0x148>)
 8001758:	7811      	ldrb	r1, [r2, #0]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <Joystick_Received+0x14c>)
 800175c:	54d1      	strb	r1, [r2, r3]
			count++;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <Joystick_Received+0x150>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <Joystick_Received+0x150>)
 8001766:	6013      	str	r3, [r2, #0]
		break;
 8001768:	e001      	b.n	800176e <Joystick_Received+0x132>
 800176a:	e000      	b.n	800176e <Joystick_Received+0x132>
		break;
 800176c:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <Joystick_Received+0x148>)
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <Joystick_Received+0x154>)
 8001774:	f009 fa02 	bl	800ab7c <HAL_UART_Receive_IT>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000045c 	.word	0x2000045c
 8001784:	20000440 	.word	0x20000440
 8001788:	20000460 	.word	0x20000460
 800178c:	20000468 	.word	0x20000468
 8001790:	20001e60 	.word	0x20001e60

08001794 <lowpass_filter>:
}

//float C1 = ComputeLowpassConstant(20, 10000);
//float C2 = ComputeLowpassConstant(10, 10000);

void lowpass_filter(int QEIReadRaw_now, float *velocity_measure_filter_now, float *acceleration_measure_filter_now){
 8001794:	b480      	push	{r7}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    static int QEIReadRaw_past = 0;
    static float velocity_measure_filter_past = 0;
    float dt = 0.0001;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <lowpass_filter+0xc4>)
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

    float C1 = 20.0 / (20.0 + 10000.0);
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <lowpass_filter+0xc8>)
 80017a6:	623b      	str	r3, [r7, #32]
    float C2 = 10.0 / (10.0 + 10000.0);
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <lowpass_filter+0xcc>)
 80017aa:	61fb      	str	r3, [r7, #28]

    float velocity_measure = (QEIReadRaw_now - QEIReadRaw_past) / dt;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <lowpass_filter+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	edc7 7a06 	vstr	s15, [r7, #24]
    *velocity_measure_filter_now = (C1 * velocity_measure) + ((1 - C1) * (*velocity_measure_filter_now));
 80017c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80017cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80017dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	edc3 7a00 	vstr	s15, [r3]

    float acceleration_measure = (*velocity_measure_filter_now - velocity_measure_filter_past) / dt;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <lowpass_filter+0xd4>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001804:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a05 	vstr	s15, [r7, #20]
    *acceleration_measure_filter_now = (C2 * acceleration_measure) + ((1 - C2) * (*acceleration_measure_filter_now));
 8001810:	ed97 7a07 	vldr	s14, [r7, #28]
 8001814:	edd7 7a05 	vldr	s15, [r7, #20]
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001820:	edd7 7a07 	vldr	s15, [r7, #28]
 8001824:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edc3 7a00 	vstr	s15, [r3]

    velocity_measure_filter_past = *velocity_measure_filter_now;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a09      	ldr	r2, [pc, #36]	; (8001868 <lowpass_filter+0xd4>)
 8001842:	6013      	str	r3, [r2, #0]

    QEIReadRaw_past = QEIReadRaw_now;
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <lowpass_filter+0xd0>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	38d1b717 	.word	0x38d1b717
 800185c:	3b02cf75 	.word	0x3b02cf75
 8001860:	3a82f0e9 	.word	0x3a82f0e9
 8001864:	2000046c 	.word	0x2000046c
 8001868:	20000470 	.word	0x20000470

0800186c <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <modbus_1t5_Timeout+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	751a      	strb	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000474 	.word	0x20000474

0800188c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <modbus_3t5_Timeout+0x1c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	755a      	strb	r2, [r3, #21]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000474 	.word	0x20000474

080018ac <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <modbus_UART_Recived+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <modbus_UART_Recived+0x60>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	b289      	uxth	r1, r1
 80018ca:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80018ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018d2:	d210      	bcs.n	80018f6 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <modbus_UART_Recived+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d8      	ldr	r0, [r3, #12]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <modbus_UART_Recived+0x60>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <modbus_UART_Recived+0x60>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018e6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80018ea:	4413      	add	r3, r2
 80018ec:	3302      	adds	r3, #2
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f009 f943 	bl	800ab7c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <modbus_UART_Recived+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000474 	.word	0x20000474

08001910 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <Modbus_init+0x9c>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <Modbus_init+0x9c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <Modbus_init+0x9c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <Modbus_init+0xa0>)
 8001930:	2114      	movs	r1, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f008 f9fc 	bl	8009d30 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <Modbus_init+0x9c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Modbus_init+0xa4>)
 8001940:	210e      	movs	r1, #14
 8001942:	4618      	mov	r0, r3
 8001944:	f008 f9f4 	bl	8009d30 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <Modbus_init+0x9c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <Modbus_init+0xa8>)
 8001950:	2103      	movs	r1, #3
 8001952:	4618      	mov	r0, r3
 8001954:	f009 f86a 	bl	800aa2c <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Modbus_init+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d8      	ldr	r0, [r3, #12]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <Modbus_init+0x9c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <Modbus_init+0x9c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800196a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800196e:	4413      	add	r3, r2
 8001970:	3302      	adds	r3, #2
 8001972:	2201      	movs	r2, #1
 8001974:	4619      	mov	r1, r3
 8001976:	f009 f901 	bl	800ab7c <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Modbus_init+0x9c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d10c      	bne.n	80019a4 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <Modbus_init+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4618      	mov	r0, r3
 8001992:	f007 f80b 	bl	80089ac <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <Modbus_init+0x9c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fcc0 	bl	8009324 <HAL_TIM_OnePulse_Start_IT>
	}

}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000474 	.word	0x20000474
 80019b0:	0800186d 	.word	0x0800186d
 80019b4:	0800188d 	.word	0x0800188d
 80019b8:	080018ad 	.word	0x080018ad

080019bc <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80019c8:	23ff      	movs	r3, #255	; 0xff
 80019ca:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80019d0:	e013      	b.n	80019fa <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	4053      	eors	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <CRC16+0x64>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4053      	eors	r3, r2
 80019ee:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <CRC16+0x68>)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80019fa:	883b      	ldrh	r3, [r7, #0]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	803a      	strh	r2, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e6      	bne.n	80019d2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	b29b      	uxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000120 	.word	0x20000120
 8001a24:	20000020 	.word	0x20000020

08001a28 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7e1b      	ldrb	r3, [r3, #24]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d80a      	bhi.n	8001a50 <Modbus_Protocal_Worker+0x28>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <Modbus_Protocal_Worker+0x18>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a5b 	.word	0x08001a5b
 8001a44:	08001bfb 	.word	0x08001bfb
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001b0d 	.word	0x08001b0d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001a50:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]
		break;
 8001a58:	e0e8      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001a66:	f000 f9dd 	bl	8001e24 <Modbus_Emission>
 8001a6a:	e01c      	b.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 8001a6c:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	7d9b      	ldrb	r3, [r3, #22]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001a86:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	f040 80b3 	bne.w	8001c1e <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68d8      	ldr	r0, [r3, #12]
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ad4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f009 f84c 	bl	800ab7c <HAL_UART_Receive_IT>
		}
		break;
 8001ae4:	e09b      	b.n	8001c1e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	7d1b      	ldrb	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8098 	beq.w	8001c22 <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	22fe      	movs	r2, #254	; 0xfe
 8001b00:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001b0a:	e08a      	b.n	8001c22 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	7d9b      	ldrb	r3, [r3, #22]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b32:	f113 0f02 	cmn.w	r3, #2
 8001b36:	d150      	bne.n	8001bda <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b50:	3b02      	subs	r3, #2
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff ff31 	bl	80019bc <CRC16>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b5e:	793a      	ldrb	r2, [r7, #4]
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10c      	bne.n	8001b92 <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001b78:	797a      	ldrb	r2, [r7, #5]
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b86:	3b01      	subs	r3, #1
 8001b88:	440b      	add	r3, r1
 8001b8a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d004      	beq.n	8001b9c <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	75da      	strb	r2, [r3, #23]
				break;
 8001b9a:	e047      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d113      	bne.n	8001bd6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f103 0019 	add.w	r0, r3, #25
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f203 2372 	addw	r3, r3, #626	; 0x272
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f00a f98e 	bl	800beec <memcpy>

			//execute command
			Modbus_frame_response();
 8001bd0:	f000 f910 	bl	8001df4 <Modbus_frame_response>
 8001bd4:	e001      	b.n	8001bda <Modbus_Protocal_Worker+0x1b2>
				break;
 8001bd6:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001bd8:	e028      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	7d5b      	ldrb	r3, [r3, #21]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 f870 	bl	800acd8 <HAL_UART_AbortReceive>
		break;
 8001bf8:	e015      	b.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d10f      	bne.n	8001c2a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	761a      	strb	r2, [r3, #24]
		break;
 8001c1c:	e005      	b.n	8001c2a <Modbus_Protocal_Worker+0x202>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e004      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c2a:	bf00      	nop
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000474 	.word	0x20000474

08001c38 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	7e9b      	ldrb	r3, [r3, #26]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	7edb      	ldrb	r3, [r3, #27]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d903      	bls.n	8001c6a <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f8a4 	bl	8001db0 <ModbusErrorReply>
		return;
 8001c68:	e023      	b.n	8001cb2 <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	7f12      	ldrb	r2, [r2, #28]
 8001c7c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	7f52      	ldrb	r2, [r2, #29]
 8001c90:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f203 1045 	addw	r0, r3, #325	; 0x145
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3319      	adds	r3, #25
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f00a f922 	bl	800beec <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2205      	movs	r2, #5
 8001cae:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000474 	.word	0x20000474

08001cbc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <modbusRead1Register+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <modbusRead1Register+0xf0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	7f5b      	ldrb	r3, [r3, #29]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <modbusRead1Register+0xf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <modbusRead1Register+0xf0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7edb      	ldrb	r3, [r3, #27]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <modbusRead1Register+0x42>
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	2b7d      	cmp	r3, #125	; 0x7d
 8001cfc:	d903      	bls.n	8001d06 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f856 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d04:	e04e      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001d06:	88ba      	ldrh	r2, [r7, #4]
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <modbusRead1Register+0xf0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d808      	bhi.n	8001d24 <modbusRead1Register+0x68>
 8001d12:	88ba      	ldrh	r2, [r7, #4]
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <modbusRead1Register+0xf0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d903      	bls.n	8001d2c <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001d24:	2002      	movs	r0, #2
 8001d26:	f000 f843 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d2a:	e03b      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <modbusRead1Register+0xf0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <modbusRead1Register+0xf0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0052      	lsls	r2, r2, #1
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d46:	2400      	movs	r4, #0
 8001d48:	e020      	b.n	8001d8c <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <modbusRead1Register+0xf0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	4423      	add	r3, r4
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	18d1      	adds	r1, r2, r3
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <modbusRead1Register+0xf0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	1c63      	adds	r3, r4, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	7849      	ldrb	r1, [r1, #1]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <modbusRead1Register+0xf0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	4423      	add	r3, r4
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <modbusRead1Register+0xf0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	0063      	lsls	r3, r4, #1
 8001d7e:	3303      	adds	r3, #3
 8001d80:	7809      	ldrb	r1, [r1, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d8a:	3401      	adds	r4, #1
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	dbdb      	blt.n	8001d4a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <modbusRead1Register+0xf0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000474 	.word	0x20000474

08001db0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	7e5a      	ldrb	r2, [r3, #25]
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000474 	.word	0x20000474

08001df4 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <Modbus_frame_response+0x2c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d004      	beq.n	8001e0c <Modbus_frame_response+0x18>
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d105      	bne.n	8001e12 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001e06:	f7ff ff17 	bl	8001c38 <modbusWrite1Register>
		break;
 8001e0a:	e006      	b.n	8001e1a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001e0c:	f7ff ff56 	bl	8001cbc <modbusRead1Register>
		break;
 8001e10:	e003      	b.n	8001e1a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff ffcc 	bl	8001db0 <ModbusErrorReply>
		break;
 8001e18:	bf00      	nop

	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000474 	.word	0x20000474

08001e24 <Modbus_Emission>:

void Modbus_Emission() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d15e      	bne.n	8001ef8 <Modbus_Emission+0xd4>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e62:	461a      	mov	r2, r3
 8001e64:	f00a f842 	bl	800beec <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3203      	adds	r2, #3
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e8e:	3b02      	subs	r3, #2
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd92 	bl	80019bc <CRC16>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	7939      	ldrb	r1, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	7979      	ldrb	r1, [r7, #5]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d10d      	bne.n	8001ef8 <Modbus_Emission+0xd4>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68d8      	ldr	r0, [r3, #12]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f008 fe72 	bl	800abdc <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <Modbus_Emission+0xfc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000474 	.word	0x20000474

08001f24 <PositionControlPID>:

// PRIVATE TYPEDEF ================================================================================

// USER CODE ======================================================================================

void PositionControlPID(float trajectory_setpoint, float final_setpoint, float position_now, float Kp, float Ki, float Kd, float *PID_out, int reset) {
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f2e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001f32:	ed87 1a05 	vstr	s2, [r7, #20]
 8001f36:	edc7 1a04 	vstr	s3, [r7, #16]
 8001f3a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001f3e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	static float error_third = 0;
	static float first = 0;
	static float second = 0;
	static float third = 0;

	if(reset){
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <PositionControlPID+0x3a>
		error_second = 0;
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <PositionControlPID+0x118>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
		error_third = 0;
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <PositionControlPID+0x11c>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
		return;
 8001f5c:	e068      	b.n	8002030 <PositionControlPID+0x10c>
	}

	// error position
	error_first = trajectory_setpoint - position_now;
 8001f5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <PositionControlPID+0x120>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
	//Position.error[0] = PID_position - QEIReadRaw_now;

	// first error
	first = (Kp + Ki + Kd) * error_first;
 8001f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <PositionControlPID+0x120>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <PositionControlPID+0x124>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second = (Kp + (2 * Kd)) * error_second;
 8001f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <PositionControlPID+0x118>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <PositionControlPID+0x128>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third = Kd * error_third;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <PositionControlPID+0x11c>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <PositionControlPID+0x12c>)
 8001fc4:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	*PID_out += first - second + third;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <PositionControlPID+0x124>)
 8001fd0:	edd3 6a00 	vldr	s13, [r3]
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <PositionControlPID+0x128>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <PositionControlPID+0x12c>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	edc3 7a00 	vstr	s15, [r3]

	if (error_first == 0 && (final_setpoint - trajectory_setpoint) == 0) {
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <PositionControlPID+0x120>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d10e      	bne.n	8002020 <PositionControlPID+0xfc>
 8002002:	ed97 7a06 	vldr	s14, [r7, #24]
 8002006:	edd7 7a07 	vldr	s15, [r7, #28]
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d103      	bne.n	8002020 <PositionControlPID+0xfc>
		*PID_out = 0; // Reset voltage to 0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
	}

	// set present to past
	error_third = error_second;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <PositionControlPID+0x118>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <PositionControlPID+0x11c>)
 8002026:	6013      	str	r3, [r2, #0]
	error_second = error_first;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <PositionControlPID+0x120>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <PositionControlPID+0x118>)
 800202e:	6013      	str	r3, [r2, #0]

}
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000478 	.word	0x20000478
 8002040:	2000047c 	.word	0x2000047c
 8002044:	20000480 	.word	0x20000480
 8002048:	20000484 	.word	0x20000484
 800204c:	20000488 	.word	0x20000488
 8002050:	2000048c 	.word	0x2000048c

08002054 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <MX_ADC1_Init+0x98>)
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <MX_ADC1_Init+0x9c>)
 800206a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <MX_ADC1_Init+0x98>)
 800206e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002072:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <MX_ADC1_Init+0x98>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <MX_ADC1_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <MX_ADC1_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <MX_ADC1_Init+0x98>)
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <MX_ADC1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_ADC1_Init+0x98>)
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <MX_ADC1_Init+0xa0>)
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_ADC1_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_ADC1_Init+0x98>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_ADC1_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_ADC1_Init+0x98>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <MX_ADC1_Init+0x98>)
 80020b6:	f004 f997 	bl	80063e8 <HAL_ADC_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020c0:	f002 ff06 	bl	8004ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020c4:	230a      	movs	r3, #10
 80020c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_ADC1_Init+0x98>)
 80020d6:	f004 f9cb 	bl	8006470 <HAL_ADC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020e0:	f002 fef6 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000490 	.word	0x20000490
 80020f0:	40012000 	.word	0x40012000
 80020f4:	0f000001 	.word	0x0f000001

080020f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_ADC_MspInit+0x7c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d127      	bne.n	800216a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_ADC_MspInit+0x80>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_ADC_MspInit+0x80>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002152:	2303      	movs	r3, #3
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002156:	2303      	movs	r3, #3
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_ADC_MspInit+0x84>)
 8002166:	f005 f8d1 	bl	800730c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40012000 	.word	0x40012000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020800 	.word	0x40020800

08002180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_DMA_Init+0x78>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <MX_DMA_Init+0x78>)
 8002190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_DMA_Init+0x78>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_DMA_Init+0x78>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <MX_DMA_Init+0x78>)
 80021ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_DMA_Init+0x78>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	200f      	movs	r0, #15
 80021c4:	f004 fc5d 	bl	8006a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021c8:	200f      	movs	r0, #15
 80021ca:	f004 fc76 	bl	8006aba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2011      	movs	r0, #17
 80021d4:	f004 fc55 	bl	8006a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021d8:	2011      	movs	r0, #17
 80021da:	f004 fc6e 	bl	8006aba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2046      	movs	r0, #70	; 0x46
 80021e4:	f004 fc4d 	bl	8006a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021e8:	2046      	movs	r0, #70	; 0x46
 80021ea:	f004 fc66 	bl	8006aba <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC6   ------> USART6_TX
*/
void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b45      	ldr	r3, [pc, #276]	; (800232c <MX_GPIO_Init+0x130>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a44      	ldr	r2, [pc, #272]	; (800232c <MX_GPIO_Init+0x130>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b42      	ldr	r3, [pc, #264]	; (800232c <MX_GPIO_Init+0x130>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <MX_GPIO_Init+0x130>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a3d      	ldr	r2, [pc, #244]	; (800232c <MX_GPIO_Init+0x130>)
 8002238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <MX_GPIO_Init+0x130>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <MX_GPIO_Init+0x130>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a36      	ldr	r2, [pc, #216]	; (800232c <MX_GPIO_Init+0x130>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <MX_GPIO_Init+0x130>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <MX_GPIO_Init+0x130>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <MX_GPIO_Init+0x130>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <MX_GPIO_Init+0x130>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	2110      	movs	r1, #16
 8002286:	482a      	ldr	r0, [pc, #168]	; (8002330 <MX_GPIO_Init+0x134>)
 8002288:	f005 f9dc 	bl	8007644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002292:	4827      	ldr	r0, [pc, #156]	; (8002330 <MX_GPIO_Init+0x134>)
 8002294:	f005 f9d6 	bl	8007644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800229e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4821      	ldr	r0, [pc, #132]	; (8002334 <MX_GPIO_Init+0x138>)
 80022b0:	f005 f82c 	bl	800730c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022b4:	230c      	movs	r3, #12
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	481b      	ldr	r0, [pc, #108]	; (8002334 <MX_GPIO_Init+0x138>)
 80022c8:	f005 f820 	bl	800730c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_11;
 80022cc:	f44f 6303 	mov.w	r3, #2096	; 0x830
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4812      	ldr	r0, [pc, #72]	; (8002330 <MX_GPIO_Init+0x134>)
 80022e6:	f005 f811 	bl	800730c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	480e      	ldr	r0, [pc, #56]	; (8002338 <MX_GPIO_Init+0x13c>)
 8002300:	f005 f804 	bl	800730c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002314:	2308      	movs	r3, #8
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_GPIO_Init+0x138>)
 8002320:	f004 fff4 	bl	800730c <HAL_GPIO_Init>

}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020800 	.word	0x40020800
 8002338:	40020400 	.word	0x40020400

0800233c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <MX_I2C1_Init+0x50>)
 8002342:	4a13      	ldr	r2, [pc, #76]	; (8002390 <MX_I2C1_Init+0x54>)
 8002344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_I2C1_Init+0x50>)
 8002348:	4a12      	ldr	r2, [pc, #72]	; (8002394 <MX_I2C1_Init+0x58>)
 800234a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_I2C1_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_I2C1_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_I2C1_Init+0x50>)
 800235a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800235e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <MX_I2C1_Init+0x50>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_I2C1_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MX_I2C1_Init+0x50>)
 800237a:	f005 f97d 	bl	8007678 <HAL_I2C_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002384:	f002 fda4 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200004d8 	.word	0x200004d8
 8002390:	40005400 	.word	0x40005400
 8002394:	000186a0 	.word	0x000186a0

08002398 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_I2C_MspInit+0x84>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023da:	2312      	movs	r3, #18
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e6:	2304      	movs	r3, #4
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <HAL_I2C_MspInit+0x8c>)
 80023f2:	f004 ff8b 	bl	800730c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_I2C_MspInit+0x88>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_I2C_MspInit+0x88>)
 8002400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_I2C_MspInit+0x88>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40005400 	.word	0x40005400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020400 	.word	0x40020400

08002428 <motor>:
int32_t getLocalPosition();
int32_t getRawPosition();

// USER CODE ======================================================================================

void motor(float voltage) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 8002432:	edd7 7a01 	vldr	s15, [r7, #4]
 8002436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	dd11      	ble.n	8002464 <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8002440:	edd7 7a01 	vldr	s15, [r7, #4]
 8002444:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80024d8 <motor+0xb0>
 8002448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002450:	dd01      	ble.n	8002456 <motor+0x2e>
			voltage = 25000;
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <motor+0xb4>)
 8002454:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245c:	4820      	ldr	r0, [pc, #128]	; (80024e0 <motor+0xb8>)
 800245e:	f005 f8f1 	bl	8007644 <HAL_GPIO_WritePin>
 8002462:	e02b      	b.n	80024bc <motor+0x94>
	} else if (voltage < 0) {
 8002464:	edd7 7a01 	vldr	s15, [r7, #4]
 8002468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d521      	bpl.n	80024b6 <motor+0x8e>
		// backward
		voltage *= -1.0;
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe f870 	bl	8000558 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe fbba 	bl	8000bf8 <__aeabi_d2f>
 8002484:	4603      	mov	r3, r0
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef1 7a67 	vneg.f32	s15, s15
 800248e:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 8002492:	edd7 7a01 	vldr	s15, [r7, #4]
 8002496:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024d8 <motor+0xb0>
 800249a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a2:	dd01      	ble.n	80024a8 <motor+0x80>
			voltage = 25000;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <motor+0xb4>)
 80024a6:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <motor+0xb8>)
 80024b0:	f005 f8c8 	bl	8007644 <HAL_GPIO_WritePin>
 80024b4:	e002      	b.n	80024bc <motor+0x94>
	} else {
		// stop
		voltage = 0;
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <motor+0xbc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 2a90 	vmov	r2, s15
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	46c35000 	.word	0x46c35000
 80024dc:	46c35000 	.word	0x46c35000
 80024e0:	40020000 	.word	0x40020000
 80024e4:	20001984 	.word	0x20001984

080024e8 <getLocalPosition>:

int32_t getLocalPosition() {
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2) - homeoffset;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <getLocalPosition+0x1c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <getLocalPosition+0x20>)
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	1a9b      	subs	r3, r3, r2
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20001a38 	.word	0x20001a38
 8002508:	20001918 	.word	0x20001918

0800250c <getRawPosition>:

int32_t getRawPosition() {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <getRawPosition+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	20001a38 	.word	0x20001a38
 8002524:	00000000 	.word	0x00000000

08002528 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8002528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800252c:	b0a2      	sub	sp, #136	; 0x88
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800253e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002542:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800254c:	3208      	adds	r2, #8
 800254e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002552:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800255c:	3210      	adds	r2, #16
 800255e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002562:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 8002566:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800256a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800256e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002572:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002576:	eeb0 1a46 	vmov.f32	s2, s12
 800257a:	eef0 1a66 	vmov.f32	s3, s13
 800257e:	eeb0 0a47 	vmov.f32	s0, s14
 8002582:	eef0 0a67 	vmov.f32	s1, s15
 8002586:	f000 fba7 	bl	8002cd8 <subtractCoordinates>
 800258a:	eeb0 7a40 	vmov.f32	s14, s0
 800258e:	eef0 7a60 	vmov.f32	s15, s1
 8002592:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8002596:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 800259a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800259e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80025a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025aa:	eeb0 1a46 	vmov.f32	s2, s12
 80025ae:	eef0 1a66 	vmov.f32	s3, s13
 80025b2:	eeb0 0a47 	vmov.f32	s0, s14
 80025b6:	eef0 0a67 	vmov.f32	s1, s15
 80025ba:	f000 fb8d 	bl	8002cd8 <subtractCoordinates>
 80025be:	eeb0 7a40 	vmov.f32	s14, s0
 80025c2:	eef0 7a60 	vmov.f32	s15, s1
 80025c6:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80025ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 80025ce:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80025d2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80025d6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025de:	eeb0 1a46 	vmov.f32	s2, s12
 80025e2:	eef0 1a66 	vmov.f32	s3, s13
 80025e6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ea:	eef0 0a67 	vmov.f32	s1, s15
 80025ee:	f000 fb73 	bl	8002cd8 <subtractCoordinates>
 80025f2:	eeb0 7a40 	vmov.f32	s14, s0
 80025f6:	eef0 7a60 	vmov.f32	s15, s1
 80025fa:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80025fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 8002602:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002606:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800260a:	eeb0 0a47 	vmov.f32	s0, s14
 800260e:	eef0 0a67 	vmov.f32	s1, s15
 8002612:	f000 fb9b 	bl	8002d4c <calculateNorm>
 8002616:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 800261a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800261e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	f000 fb8f 	bl	8002d4c <calculateNorm>
 800262e:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 8002632:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002636:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800263a:	eeb0 0a47 	vmov.f32	s0, s14
 800263e:	eef0 0a67 	vmov.f32	s1, s15
 8002642:	f000 fb83 	bl	8002d4c <calculateNorm>
 8002646:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 800264a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800264e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	d534      	bpl.n	80026c6 <localize+0x19e>
 800265c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002660:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d52b      	bpl.n	80026c6 <localize+0x19e>
 800266e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002672:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	d522      	bpl.n	80026c6 <localize+0x19e>
		// CASE 1
		*origin = point2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002688:	e893 0003 	ldmia.w	r3, {r0, r1}
 800268c:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 8002690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002694:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269c:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 80026a0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026a4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80026a8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ac:	eef0 0a67 	vmov.f32	s1, s15
 80026b0:	f000 fb7f 	bl	8002db2 <negateCoordinate>
 80026b4:	eeb0 7a40 	vmov.f32	s14, s0
 80026b8:	eef0 7a60 	vmov.f32	s15, s1
 80026bc:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80026c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80026c4:	e134      	b.n	8002930 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80026c6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026ca:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d6:	d53e      	bpl.n	8002756 <localize+0x22e>
 80026d8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80026dc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	d535      	bpl.n	8002756 <localize+0x22e>
 80026ea:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026ee:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	d52c      	bpl.n	8002756 <localize+0x22e>
		// CASE 2
		*origin = point3;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002708:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 800270c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002710:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002714:	eeb0 0a47 	vmov.f32	s0, s14
 8002718:	eef0 0a67 	vmov.f32	s1, s15
 800271c:	f000 fb49 	bl	8002db2 <negateCoordinate>
 8002720:	eeb0 7a40 	vmov.f32	s14, s0
 8002724:	eef0 7a60 	vmov.f32	s15, s1
 8002728:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800272c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8002730:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002734:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002738:	eeb0 0a47 	vmov.f32	s0, s14
 800273c:	eef0 0a67 	vmov.f32	s1, s15
 8002740:	f000 fb37 	bl	8002db2 <negateCoordinate>
 8002744:	eeb0 7a40 	vmov.f32	s14, s0
 8002748:	eef0 7a60 	vmov.f32	s15, s1
 800274c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002750:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002754:	e0ec      	b.n	8002930 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 8002756:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800275a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800275e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d52a      	bpl.n	80027be <localize+0x296>
 8002768:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800276c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	d521      	bpl.n	80027be <localize+0x296>
 800277a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800277e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	d518      	bpl.n	80027be <localize+0x296>
		// CASE 3
		*origin = point1;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002794:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002798:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 800279c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a8:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 80027ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80027bc:	e0b8      	b.n	8002930 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80027be:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027c2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	d52a      	bpl.n	8002826 <localize+0x2fe>
 80027d0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80027d4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	d521      	bpl.n	8002826 <localize+0x2fe>
 80027e2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027e6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	d518      	bpl.n	8002826 <localize+0x2fe>
		// CASE 4
		*origin = point1;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002800:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 8002804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002808:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800280c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002810:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 8002814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002818:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800281c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002820:	e883 0003 	stmia.w	r3, {r0, r1}
 8002824:	e084      	b.n	8002930 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 8002826:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800282a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800282e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	d53e      	bpl.n	80028b6 <localize+0x38e>
 8002838:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800283c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	d535      	bpl.n	80028b6 <localize+0x38e>
 800284a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800284e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	d52c      	bpl.n	80028b6 <localize+0x38e>
		// CASE 5
		*origin = point3;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002864:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002868:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 800286c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002870:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002874:	eeb0 0a47 	vmov.f32	s0, s14
 8002878:	eef0 0a67 	vmov.f32	s1, s15
 800287c:	f000 fa99 	bl	8002db2 <negateCoordinate>
 8002880:	eeb0 7a40 	vmov.f32	s14, s0
 8002884:	eef0 7a60 	vmov.f32	s15, s1
 8002888:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800288c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 8002890:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002894:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002898:	eeb0 0a47 	vmov.f32	s0, s14
 800289c:	eef0 0a67 	vmov.f32	s1, s15
 80028a0:	f000 fa87 	bl	8002db2 <negateCoordinate>
 80028a4:	eeb0 7a40 	vmov.f32	s14, s0
 80028a8:	eef0 7a60 	vmov.f32	s15, s1
 80028ac:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80028b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80028b4:	e03c      	b.n	8002930 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 80028b6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028ba:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d533      	bpl.n	8002930 <localize+0x408>
 80028c8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80028cc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d52a      	bpl.n	8002930 <localize+0x408>
 80028da:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028de:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	d521      	bpl.n	8002930 <localize+0x408>
		// CASE 6
		*origin = point2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028f8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 80028fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002900:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002904:	eeb0 0a47 	vmov.f32	s0, s14
 8002908:	eef0 0a67 	vmov.f32	s1, s15
 800290c:	f000 fa51 	bl	8002db2 <negateCoordinate>
 8002910:	eeb0 7a40 	vmov.f32	s14, s0
 8002914:	eef0 7a60 	vmov.f32	s15, s1
 8002918:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800291c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8002920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002924:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800292c:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8002930:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d10e      	bne.n	800295c <localize+0x434>
		if (vector1.y > 0) {
 800293e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294a:	dd03      	ble.n	8002954 <localize+0x42c>
			*angle = M_PI / 2.0;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4a72      	ldr	r2, [pc, #456]	; (8002b18 <localize+0x5f0>)
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e092      	b.n	8002a7a <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4a71      	ldr	r2, [pc, #452]	; (8002b1c <localize+0x5f4>)
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e08e      	b.n	8002a7a <localize+0x552>
		}
	} else if (vector1.y == 0) {
 800295c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002960:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	d10f      	bne.n	800298a <localize+0x462>
		if (vector1.x >= 0) {
 800296a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800296e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	db04      	blt.n	8002982 <localize+0x45a>
			*angle = 0;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e07b      	b.n	8002a7a <localize+0x552>
		} else {
			*angle = M_PI;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <localize+0x5f8>)
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e077      	b.n	8002a7a <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 800298a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800298e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002996:	ee16 0a90 	vmov	r0, s13
 800299a:	f7fd fddd 	bl	8000558 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	ec43 2b10 	vmov	d0, r2, r3
 80029a6:	f00d ff17 	bl	80107d8 <atan>
 80029aa:	ec53 2b10 	vmov	r2, r3, d0
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe f921 	bl	8000bf8 <__aeabi_d2f>
 80029b6:	ee07 0a90 	vmov	s15, r0
 80029ba:	eef0 7ae7 	vabs.f32	s15, s15
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 80029c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d51a      	bpl.n	8002a08 <localize+0x4e0>
 80029d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	d513      	bpl.n	8002a08 <localize+0x4e0>
			*angle = M_PI + *angle;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdb7 	bl	8000558 <__aeabi_f2d>
 80029ea:	a347      	add	r3, pc, #284	; (adr r3, 8002b08 <localize+0x5e0>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fc54 	bl	800029c <__adddf3>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f8fc 	bl	8000bf8 <__aeabi_d2f>
 8002a00:	4602      	mov	r2, r0
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e038      	b.n	8002a7a <localize+0x552>
		} else if (vector1.x < 0) {
 8002a08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	d515      	bpl.n	8002a42 <localize+0x51a>
			*angle = M_PI - *angle;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd9c 	bl	8000558 <__aeabi_f2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	a138      	add	r1, pc, #224	; (adr r1, 8002b08 <localize+0x5e0>)
 8002a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a2a:	f7fd fc35 	bl	8000298 <__aeabi_dsub>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8df 	bl	8000bf8 <__aeabi_d2f>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e01b      	b.n	8002a7a <localize+0x552>
		} else if (vector1.y < 0) {
 8002a42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	d514      	bpl.n	8002a7a <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd7f 	bl	8000558 <__aeabi_f2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	a12c      	add	r1, pc, #176	; (adr r1, 8002b10 <localize+0x5e8>)
 8002a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a64:	f7fd fc18 	bl	8000298 <__aeabi_dsub>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fe f8c2 	bl	8000bf8 <__aeabi_d2f>
 8002a74:	4602      	mov	r2, r0
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8002a7a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a86:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002a8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a96:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8002a9a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	d516      	bpl.n	8002ad6 <localize+0x5ae>
		*angle = *angle + M_PI;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd53 	bl	8000558 <__aeabi_f2d>
 8002ab2:	a315      	add	r3, pc, #84	; (adr r3, 8002b08 <localize+0x5e0>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fd fbf0 	bl	800029c <__adddf3>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7fe f898 	bl	8000bf8 <__aeabi_d2f>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <localize+0x5fc>)
 8002ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ad4:	e003      	b.n	8002ade <localize+0x5b6>
	} else {
		dir = 1.0;
 8002ad6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <localize+0x600>)
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <localize+0x604>)
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002af2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002afc:	e0e1      	b.n	8002cc2 <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8002afe:	2300      	movs	r3, #0
 8002b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b02:	e0d5      	b.n	8002cb0 <localize+0x788>
 8002b04:	f3af 8000 	nop.w
 8002b08:	54442d18 	.word	0x54442d18
 8002b0c:	400921fb 	.word	0x400921fb
 8002b10:	54442d18 	.word	0x54442d18
 8002b14:	401921fb 	.word	0x401921fb
 8002b18:	3fc90fdb 	.word	0x3fc90fdb
 8002b1c:	4096cbe4 	.word	0x4096cbe4
 8002b20:	40490fdb 	.word	0x40490fdb
 8002b24:	bf800000 	.word	0xbf800000
 8002b28:	08012eb0 	.word	0x08012eb0
 8002b2c:	08012ebc 	.word	0x08012ebc
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd0f 	bl	8000558 <__aeabi_f2d>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fd06 	bl	8000558 <__aeabi_f2d>
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	460d      	mov	r5, r1
 8002b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	3388      	adds	r3, #136	; 0x88
 8002b58:	443b      	add	r3, r7
 8002b5a:	3b6c      	subs	r3, #108	; 0x6c
 8002b5c:	ed93 7a00 	vldr	s14, [r3]
 8002b60:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b68:	ee17 0a90 	vmov	r0, s15
 8002b6c:	f7fd fcf4 	bl	8000558 <__aeabi_f2d>
 8002b70:	4680      	mov	r8, r0
 8002b72:	4689      	mov	r9, r1
 8002b74:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002b78:	f00d ffce 	bl	8010b18 <cos>
 8002b7c:	ec53 2b10 	vmov	r2, r3, d0
 8002b80:	4640      	mov	r0, r8
 8002b82:	4649      	mov	r1, r9
 8002b84:	f7fd fd40 	bl	8000608 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd fb84 	bl	800029c <__adddf3>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4690      	mov	r8, r2
 8002b9a:	4699      	mov	r9, r3
 8002b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3388      	adds	r3, #136	; 0x88
 8002ba2:	443b      	add	r3, r7
 8002ba4:	3b78      	subs	r3, #120	; 0x78
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fcd5 	bl	8000558 <__aeabi_f2d>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	460d      	mov	r5, r1
 8002bb2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002bb6:	f00e f80f 	bl	8010bd8 <sin>
 8002bba:	ec53 2b10 	vmov	r2, r3, d0
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd fd21 	bl	8000608 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4640      	mov	r0, r8
 8002bcc:	4649      	mov	r1, r9
 8002bce:	f7fd fb63 	bl	8000298 <__aeabi_dsub>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	441a      	add	r2, r3
 8002be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	18d4      	adds	r4, r2, r3
 8002bee:	f7fe f803 	bl	8000bf8 <__aeabi_d2f>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fcac 	bl	8000558 <__aeabi_f2d>
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	3388      	adds	r3, #136	; 0x88
 8002c0c:	443b      	add	r3, r7
 8002c0e:	3b6c      	subs	r3, #108	; 0x6c
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1c:	ee17 0a90 	vmov	r0, s15
 8002c20:	f7fd fc9a 	bl	8000558 <__aeabi_f2d>
 8002c24:	4680      	mov	r8, r0
 8002c26:	4689      	mov	r9, r1
 8002c28:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c2c:	f00d ffd4 	bl	8010bd8 <sin>
 8002c30:	ec53 2b10 	vmov	r2, r3, d0
 8002c34:	4640      	mov	r0, r8
 8002c36:	4649      	mov	r1, r9
 8002c38:	f7fd fce6 	bl	8000608 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fb2a 	bl	800029c <__adddf3>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4690      	mov	r8, r2
 8002c4e:	4699      	mov	r9, r3
 8002c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	3388      	adds	r3, #136	; 0x88
 8002c56:	443b      	add	r3, r7
 8002c58:	3b78      	subs	r3, #120	; 0x78
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc7b 	bl	8000558 <__aeabi_f2d>
 8002c62:	4604      	mov	r4, r0
 8002c64:	460d      	mov	r5, r1
 8002c66:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c6a:	f00d ff55 	bl	8010b18 <cos>
 8002c6e:	ec53 2b10 	vmov	r2, r3, d0
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	f7fd fcc7 	bl	8000608 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4640      	mov	r0, r8
 8002c80:	4649      	mov	r1, r9
 8002c82:	f7fd fb0b 	bl	800029c <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	441a      	add	r2, r3
 8002c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	18d4      	adds	r4, r2, r3
 8002ca2:	f7fd ffa9 	bl	8000bf8 <__aeabi_d2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 8002caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cac:	3301      	adds	r3, #1
 8002cae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	f77f af3c 	ble.w	8002b30 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 8002cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	f77f af19 	ble.w	8002afe <localize+0x5d6>

	// dirty fix for angle error
//	if (dir < 0){
//		*angle = *angle - M_PI;
//	}
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3788      	adds	r7, #136	; 0x88
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002cd8 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002cd8:	b480      	push	{r7}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	eeb0 6a40 	vmov.f32	s12, s0
 8002ce2:	eef0 6a60 	vmov.f32	s13, s1
 8002ce6:	eeb0 7a41 	vmov.f32	s14, s2
 8002cea:	eef0 7a61 	vmov.f32	s15, s3
 8002cee:	ed87 6a04 	vstr	s12, [r7, #16]
 8002cf2:	edc7 6a05 	vstr	s13, [r7, #20]
 8002cf6:	ed87 7a02 	vstr	s14, [r7, #8]
 8002cfa:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002cfe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0a:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1a:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	f107 0218 	add.w	r2, r7, #24
 8002d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d2e:	6a3a      	ldr	r2, [r7, #32]
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	ee07 2a10 	vmov	s14, r2
 8002d36:	ee07 3a90 	vmov	s15, r3
}
 8002d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d3e:	eef0 0a67 	vmov.f32	s1, s15
 8002d42:	372c      	adds	r7, #44	; 0x2c
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	eeb0 7a40 	vmov.f32	s14, s0
 8002d56:	eef0 7a60 	vmov.f32	s15, s1
 8002d5a:	ed87 7a00 	vstr	s14, [r7]
 8002d5e:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8002d62:	ed97 7a00 	vldr	s14, [r7]
 8002d66:	edd7 7a00 	vldr	s15, [r7]
 8002d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	ee17 0a90 	vmov	r0, s15
 8002d82:	f7fd fbe9 	bl	8000558 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	ec43 2b10 	vmov	d0, r2, r3
 8002d8e:	f00d fff5 	bl	8010d7c <sqrt>
 8002d92:	ec53 2b10 	vmov	r2, r3, d0
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff2d 	bl	8000bf8 <__aeabi_d2f>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	60fb      	str	r3, [r7, #12]
	return norm;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	ee07 3a90 	vmov	s15, r3
}
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002db2:	b480      	push	{r7}
 8002db4:	b089      	sub	sp, #36	; 0x24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dbc:	eef0 7a60 	vmov.f32	s15, s1
 8002dc0:	ed87 7a02 	vstr	s14, [r7, #8]
 8002dc4:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dcc:	eef1 7a67 	vneg.f32	s15, s15
 8002dd0:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd8:	eef1 7a67 	vneg.f32	s15, s15
 8002ddc:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002de0:	f107 0318 	add.w	r3, r7, #24
 8002de4:	f107 0210 	add.w	r2, r7, #16
 8002de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	ee07 2a10 	vmov	s14, r2
 8002df8:	ee07 3a90 	vmov	s15, r3
}
 8002dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002e00:	eef0 0a67 	vmov.f32	s1, s15
 8002e04:	3724      	adds	r7, #36	; 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init() {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <modbus_init+0x28>)
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <modbus_init+0x2c>)
 8002e18:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <modbus_init+0x28>)
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <modbus_init+0x30>)
 8002e1e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <modbus_init+0x28>)
 8002e22:	2215      	movs	r2, #21
 8002e24:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <modbus_init+0x28>)
 8002e28:	2246      	movs	r2, #70	; 0x46
 8002e2a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002e2c:	4905      	ldr	r1, [pc, #20]	; (8002e44 <modbus_init+0x34>)
 8002e2e:	4802      	ldr	r0, [pc, #8]	; (8002e38 <modbus_init+0x28>)
 8002e30:	f7fe fd6e 	bl	8001910 <Modbus_init>
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	2000052c 	.word	0x2000052c
 8002e3c:	20001ed4 	.word	0x20001ed4
 8002e40:	20001d08 	.word	0x20001d08
 8002e44:	20000a04 	.word	0x20000a04

08002e48 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002e50:	f003 fa9a 	bl	8006388 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <modbus_heartbeat_handler+0x78>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d32c      	bcc.n	8002eb8 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 8002e5e:	f003 fa93 	bl	8006388 <HAL_GetTick>
 8002e62:	4603      	mov	r3, r0
 8002e64:	33c8      	adds	r3, #200	; 0xc8
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <modbus_heartbeat_handler+0x78>)
 8002e68:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <modbus_heartbeat_handler+0x7c>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	f644 0269 	movw	r2, #18537	; 0x4869
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d106      	bne.n	8002e84 <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <modbus_heartbeat_handler+0x80>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e015      	b.n	8002eb0 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <modbus_heartbeat_handler+0x80>)
 8002e86:	f993 3000 	ldrsb.w	r3, [r3]
 8002e8a:	2b7d      	cmp	r3, #125	; 0x7d
 8002e8c:	dc08      	bgt.n	8002ea0 <modbus_heartbeat_handler+0x58>
				fail++;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <modbus_heartbeat_handler+0x80>)
 8002e90:	f993 3000 	ldrsb.w	r3, [r3]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	b25a      	sxtb	r2, r3
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <modbus_heartbeat_handler+0x80>)
 8002e9e:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 17) {
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <modbus_heartbeat_handler+0x80>)
 8002ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ea6:	2b11      	cmp	r3, #17
 8002ea8:	dd02      	ble.n	8002eb0 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <modbus_heartbeat_handler+0x7c>)
 8002eb2:	f645 1261 	movw	r2, #22881	; 0x5961
 8002eb6:	801a      	strh	r2, [r3, #0]
	}
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20001958 	.word	0x20001958
 8002ec4:	20000a04 	.word	0x20000a04
 8002ec8:	2000195c 	.word	0x2000195c

08002ecc <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <modbus_data_sync+0x218>)
 8002ede:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	; (80030e4 <modbus_data_sync+0x218>)
 8002eea:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b7b      	ldr	r3, [pc, #492]	; (80030e4 <modbus_data_sync+0x218>)
 8002ef6:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <modbus_data_sync+0x218>)
 8002f02:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <modbus_data_sync+0x218>)
 8002f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <modbus_data_sync+0x218>)
 8002f1c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b6e      	ldr	r3, [pc, #440]	; (80030e4 <modbus_data_sync+0x218>)
 8002f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <modbus_data_sync+0x218>)
 8002f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <modbus_data_sync+0x218>)
 8002f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	4b64      	ldr	r3, [pc, #400]	; (80030e4 <modbus_data_sync+0x218>)
 8002f54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	4b60      	ldr	r3, [pc, #384]	; (80030e4 <modbus_data_sync+0x218>)
 8002f62:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <modbus_data_sync+0x218>)
 8002f70:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <modbus_data_sync+0x218>)
 8002f7e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 8002f82:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <modbus_data_sync+0x218>)
 8002f84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002f8e:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <modbus_data_sync+0x218>)
 8002f90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002f9a:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <modbus_data_sync+0x218>)
 8002f9c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <modbus_data_sync+0x218>)
 8002fa8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_slave_temp;
	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002fb2:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <modbus_data_sync+0x21c>)
 8002fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <modbus_data_sync+0x218>)
 8002fbc:	885b      	ldrh	r3, [r3, #2]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d00f      	beq.n	8002fe2 <modbus_data_sync+0x116>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002fc2:	4b48      	ldr	r3, [pc, #288]	; (80030e4 <modbus_data_sync+0x218>)
 8002fc4:	885b      	ldrh	r3, [r3, #2]
 8002fc6:	b21a      	sxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <modbus_data_sync+0x21c>)
 8002fd4:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fdc:	4b43      	ldr	r3, [pc, #268]	; (80030ec <modbus_data_sync+0x220>)
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	e017      	b.n	8003012 <modbus_data_sync+0x146>
	} else if (base_system_status_slave_temp != variables->base_system_status) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fe8:	4b40      	ldr	r3, [pc, #256]	; (80030ec <modbus_data_sync+0x220>)
 8002fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d00f      	beq.n	8003012 <modbus_data_sync+0x146>
		MBregisterFrame[0x01].U16 = variables->base_system_status;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <modbus_data_sync+0x218>)
 8002ffc:	805a      	strh	r2, [r3, #2]
		base_system_status_master_temp = variables->base_system_status;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003004:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <modbus_data_sync+0x21c>)
 8003006:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <modbus_data_sync+0x220>)
 8003010:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <modbus_data_sync+0x224>)
 8003014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003018:	461a      	mov	r2, r3
 800301a:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <modbus_data_sync+0x218>)
 800301c:	889b      	ldrh	r3, [r3, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d00f      	beq.n	8003042 <modbus_data_sync+0x176>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <modbus_data_sync+0x218>)
 8003024:	889b      	ldrh	r3, [r3, #4]
 8003026:	b21a      	sxth	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <modbus_data_sync+0x224>)
 8003034:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <modbus_data_sync+0x228>)
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e017      	b.n	8003072 <modbus_data_sync+0x1a6>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <modbus_data_sync+0x228>)
 800304a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304e:	429a      	cmp	r2, r3
 8003050:	d00f      	beq.n	8003072 <modbus_data_sync+0x1a6>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003058:	b29a      	uxth	r2, r3
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <modbus_data_sync+0x218>)
 800305c:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <modbus_data_sync+0x228>)
 8003066:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <modbus_data_sync+0x224>)
 8003070:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <modbus_data_sync+0x22c>)
 8003074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003078:	461a      	mov	r2, r3
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <modbus_data_sync+0x218>)
 800307c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003080:	429a      	cmp	r2, r3
 8003082:	d010      	beq.n	80030a6 <modbus_data_sync+0x1da>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <modbus_data_sync+0x218>)
 8003086:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800308a:	b21a      	sxth	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <modbus_data_sync+0x22c>)
 8003098:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <modbus_data_sync+0x230>)
 80030a2:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 80030a4:	e018      	b.n	80030d8 <modbus_data_sync+0x20c>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <modbus_data_sync+0x230>)
 80030ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d010      	beq.n	80030d8 <modbus_data_sync+0x20c>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <modbus_data_sync+0x218>)
 80030c0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <modbus_data_sync+0x230>)
 80030cc:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <modbus_data_sync+0x22c>)
 80030d6:	801a      	strh	r2, [r3, #0]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20000a04 	.word	0x20000a04
 80030e8:	2000195e 	.word	0x2000195e
 80030ec:	20001960 	.word	0x20001960
 80030f0:	20001962 	.word	0x20001962
 80030f4:	20001964 	.word	0x20001964
 80030f8:	20001966 	.word	0x20001966
 80030fc:	20001968 	.word	0x20001968

08003100 <Set_LED>:
void Set_LED(int LEDnum, int Red, int Green, int Blue);
void Set_Brightness(int brightness);
void WS2812_Send(void);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	b2d9      	uxtb	r1, r3
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <Set_LED+0x58>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <Set_LED+0x58>)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	460a      	mov	r2, r1
 8003128:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	b2d9      	uxtb	r1, r3
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <Set_LED+0x58>)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	460a      	mov	r2, r1
 8003138:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2d9      	uxtb	r1, r3
 800313e:	4a06      	ldr	r2, [pc, #24]	; (8003158 <Set_LED+0x58>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	460a      	mov	r2, r1
 8003148:	70da      	strb	r2, [r3, #3]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000a90 	.word	0x20000a90
 800315c:	00000000 	.word	0x00000000

08003160 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b2d      	cmp	r3, #45	; 0x2d
 800316c:	dd01      	ble.n	8003172 <Set_Brightness+0x12>
		brightness = 45;
 800316e:	232d      	movs	r3, #45	; 0x2d
 8003170:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e060      	b.n	800323a <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8003178:	4a37      	ldr	r2, [pc, #220]	; (8003258 <Set_Brightness+0xf8>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003180:	4a36      	ldr	r2, [pc, #216]	; (800325c <Set_Brightness+0xfc>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e04f      	b.n	800322e <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * 3.14159265 / 180;  // in rad
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7fd f9d9 	bl	8000558 <__aeabi_f2d>
 80031a6:	a32a      	add	r3, pc, #168	; (adr r3, 8003250 <Set_Brightness+0xf0>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd fa2c 	bl	8000608 <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <Set_Brightness+0x100>)
 80031be:	f7fd fb4d 	bl	800085c <__aeabi_ddiv>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7fd fd15 	bl	8000bf8 <__aeabi_d2f>
 80031ce:	4603      	mov	r3, r0
 80031d0:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / tan(angle);
 80031d2:	4a21      	ldr	r2, [pc, #132]	; (8003258 <Set_Brightness+0xf8>)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9a7 	bl	8000534 <__aeabi_i2d>
 80031e6:	4604      	mov	r4, r0
 80031e8:	460d      	mov	r5, r1
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f7fd f9b4 	bl	8000558 <__aeabi_f2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	ec43 2b10 	vmov	d0, r2, r3
 80031f8:	f00d fd46 	bl	8010c88 <tan>
 80031fc:	ec53 2b10 	vmov	r2, r3, d0
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f7fd fb2a 	bl	800085c <__aeabi_ddiv>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f7fd fcd2 	bl	8000bb8 <__aeabi_d2uiz>
 8003214:	4603      	mov	r3, r0
 8003216:	b2d9      	uxtb	r1, r3
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <Set_Brightness+0xfc>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	460a      	mov	r2, r1
 8003226:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3301      	adds	r3, #1
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b03      	cmp	r3, #3
 8003232:	ddac      	ble.n	800318e <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b3b      	cmp	r3, #59	; 0x3b
 800323e:	dd9b      	ble.n	8003178 <Set_Brightness+0x18>
		}
	}
#endif
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bdb0      	pop	{r4, r5, r7, pc}
 800324a:	bf00      	nop
 800324c:	f3af 8000 	nop.w
 8003250:	53c8d4f1 	.word	0x53c8d4f1
 8003254:	400921fb 	.word	0x400921fb
 8003258:	20000a90 	.word	0x20000a90
 800325c:	20000b80 	.word	0x20000b80
 8003260:	40668000 	.word	0x40668000

08003264 <WS2812_Send>:

void WS2812_Send(void) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
	if (!datasentflag) {
 800326a:	4b32      	ldr	r3, [pc, #200]	; (8003334 <WS2812_Send+0xd0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05a      	beq.n	800332a <WS2812_Send+0xc6>
		return;
	}
	uint32_t indx = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	e036      	b.n	80032ec <WS2812_Send+0x88>
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 800327e:	4a2e      	ldr	r2, [pc, #184]	; (8003338 <WS2812_Send+0xd4>)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	492b      	ldr	r1, [pc, #172]	; (8003338 <WS2812_Send+0xd4>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	431a      	orrs	r2, r3
 8003298:	4927      	ldr	r1, [pc, #156]	; (8003338 <WS2812_Send+0xd4>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	78db      	ldrb	r3, [r3, #3]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 80032a6:	2317      	movs	r3, #23
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e019      	b.n	80032e0 <WS2812_Send+0x7c>
			if (color & (1 << i)) {
 80032ac:	2201      	movs	r2, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <WS2812_Send+0x66>
				pwmData[indx] = 83;  // 2/3 of 125
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <WS2812_Send+0xd8>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2153      	movs	r1, #83	; 0x53
 80032c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80032c8:	e004      	b.n	80032d4 <WS2812_Send+0x70>
			} else {
				pwmData[indx] = 42;  // 1/3 of 125
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <WS2812_Send+0xd8>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	212a      	movs	r1, #42	; 0x2a
 80032d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3b01      	subs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dae2      	bge.n	80032ac <WS2812_Send+0x48>
	for (int i = 0; i < MAX_LED; i++) {
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	3301      	adds	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b3b      	cmp	r3, #59	; 0x3b
 80032f0:	ddc5      	ble.n	800327e <WS2812_Send+0x1a>
		}
	}

	for (int i = 0; i < 50; i++) {
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	e00a      	b.n	800330e <WS2812_Send+0xaa>
		pwmData[indx] = 0;
 80032f8:	4a10      	ldr	r2, [pc, #64]	; (800333c <WS2812_Send+0xd8>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2100      	movs	r1, #0
 80032fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3301      	adds	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b31      	cmp	r3, #49	; 0x31
 8003312:	ddf1      	ble.n	80032f8 <WS2812_Send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	b29b      	uxth	r3, r3
 8003318:	4a08      	ldr	r2, [pc, #32]	; (800333c <WS2812_Send+0xd8>)
 800331a:	2100      	movs	r1, #0
 800331c:	4808      	ldr	r0, [pc, #32]	; (8003340 <WS2812_Send+0xdc>)
 800331e:	f005 fd23 	bl	8008d68 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <WS2812_Send+0xd0>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e000      	b.n	800332c <WS2812_Send+0xc8>
		return;
 800332a:	bf00      	nop
}
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000220 	.word	0x20000220
 8003338:	20000b80 	.word	0x20000b80
 800333c:	20000c70 	.word	0x20000c70
 8003340:	20001aec 	.word	0x20001aec

08003344 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d106      	bne.n	8003362 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8003354:	2100      	movs	r1, #0
 8003356:	4805      	ldr	r0, [pc, #20]	; (800336c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003358:	f005 feb6 	bl	80090c8 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
	}
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20001aec 	.word	0x20001aec
 8003370:	20000220 	.word	0x20000220

08003374 <speaker_logic>:
void speaker_logic();
uint8_t lastmodbusstate = 0;

// USER CODE ======================================================================================

void speaker_logic() {
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
	if (lastmodbusstate && !MBvariables.heartbeat) {
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <speaker_logic+0x30>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <speaker_logic+0x1e>
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <speaker_logic+0x34>)
 8003382:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <speaker_logic+0x1e>
		speaker_play(51, 8);
 800338a:	2108      	movs	r1, #8
 800338c:	2033      	movs	r0, #51	; 0x33
 800338e:	f000 f865 	bl	800345c <speaker_play>
	}
	lastmodbusstate = MBvariables.heartbeat;
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <speaker_logic+0x34>)
 8003394:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b02      	ldr	r3, [pc, #8]	; (80033a4 <speaker_logic+0x30>)
 800339c:	701a      	strb	r2, [r3, #0]
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20001820 	.word	0x20001820
 80033a8:	2000191c 	.word	0x2000191c

080033ac <speaker_UART_bitbang>:

void speaker_UART_bitbang() {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
	if (!speaker_queue) {
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <speaker_UART_bitbang+0x9c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d045      	beq.n	8003444 <speaker_UART_bitbang+0x98>
		return;
	}
	static uint8_t byte_n = 0;
	static uint8_t bit_n = 0;

	if (bit_n == 0) {
 80033b8:	4b24      	ldr	r3, [pc, #144]	; (800344c <speaker_UART_bitbang+0xa0>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <speaker_UART_bitbang+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2110      	movs	r1, #16
 80033c4:	4822      	ldr	r0, [pc, #136]	; (8003450 <speaker_UART_bitbang+0xa4>)
 80033c6:	f004 f93d 	bl	8007644 <HAL_GPIO_WritePin>
 80033ca:	e01d      	b.n	8003408 <speaker_UART_bitbang+0x5c>
	} else if (bit_n == 9) {
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <speaker_UART_bitbang+0xa0>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d105      	bne.n	80033e0 <speaker_UART_bitbang+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80033d4:	2201      	movs	r2, #1
 80033d6:	2110      	movs	r1, #16
 80033d8:	481d      	ldr	r0, [pc, #116]	; (8003450 <speaker_UART_bitbang+0xa4>)
 80033da:	f004 f933 	bl	8007644 <HAL_GPIO_WritePin>
 80033de:	e013      	b.n	8003408 <speaker_UART_bitbang+0x5c>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ((speaker_data[byte_n] >> (bit_n - 1)) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <speaker_UART_bitbang+0xa8>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <speaker_UART_bitbang+0xac>)
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <speaker_UART_bitbang+0xa0>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	fa42 f303 	asr.w	r3, r2, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	2110      	movs	r1, #16
 8003402:	4813      	ldr	r0, [pc, #76]	; (8003450 <speaker_UART_bitbang+0xa4>)
 8003404:	f004 f91e 	bl	8007644 <HAL_GPIO_WritePin>
	}

	bit_n++;
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <speaker_UART_bitbang+0xa0>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <speaker_UART_bitbang+0xa0>)
 8003412:	701a      	strb	r2, [r3, #0]
	if (bit_n >= 10) {
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <speaker_UART_bitbang+0xa0>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b09      	cmp	r3, #9
 800341a:	d908      	bls.n	800342e <speaker_UART_bitbang+0x82>
		bit_n = 0;
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <speaker_UART_bitbang+0xa0>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		byte_n++;
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <speaker_UART_bitbang+0xa8>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <speaker_UART_bitbang+0xa8>)
 800342c:	701a      	strb	r2, [r3, #0]
	}

	if (byte_n >= 8) {
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <speaker_UART_bitbang+0xa8>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b07      	cmp	r3, #7
 8003434:	d907      	bls.n	8003446 <speaker_UART_bitbang+0x9a>
		byte_n = 0;
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <speaker_UART_bitbang+0xa8>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
		speaker_queue = 0;
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <speaker_UART_bitbang+0x9c>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e000      	b.n	8003446 <speaker_UART_bitbang+0x9a>
		return;
 8003444:	bf00      	nop
	}
}
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20001814 	.word	0x20001814
 800344c:	2000196a 	.word	0x2000196a
 8003450:	40020000 	.word	0x40020000
 8003454:	2000196b 	.word	0x2000196b
 8003458:	20001818 	.word	0x20001818

0800345c <speaker_play>:

void speaker_play(uint8_t folder, uint8_t track) {
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	460a      	mov	r2, r1
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	4613      	mov	r3, r2
 800346a:	71bb      	strb	r3, [r7, #6]
	if (speaker_queue) {
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <speaker_play+0x5c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11b      	bne.n	80034ac <speaker_play+0x50>
		return;
	}
	speaker_data[0] = 0x7E;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <speaker_play+0x60>)
 8003476:	227e      	movs	r2, #126	; 0x7e
 8003478:	701a      	strb	r2, [r3, #0]
	speaker_data[1] = 0xFF;
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <speaker_play+0x60>)
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	705a      	strb	r2, [r3, #1]
	speaker_data[2] = 0x06;
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <speaker_play+0x60>)
 8003482:	2206      	movs	r2, #6
 8003484:	709a      	strb	r2, [r3, #2]
	speaker_data[3] = 0x0F;
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <speaker_play+0x60>)
 8003488:	220f      	movs	r2, #15
 800348a:	70da      	strb	r2, [r3, #3]
	speaker_data[4] = 0x00;
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <speaker_play+0x60>)
 800348e:	2200      	movs	r2, #0
 8003490:	711a      	strb	r2, [r3, #4]
	speaker_data[5] = folder;
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <speaker_play+0x60>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	7153      	strb	r3, [r2, #5]
	speaker_data[6] = track;
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <speaker_play+0x60>)
 800349a:	79bb      	ldrb	r3, [r7, #6]
 800349c:	7193      	strb	r3, [r2, #6]
	speaker_data[7] = 0xEF;
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <speaker_play+0x60>)
 80034a0:	22ef      	movs	r2, #239	; 0xef
 80034a2:	71da      	strb	r2, [r3, #7]

	speaker_queue = 1;
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <speaker_play+0x5c>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e000      	b.n	80034ae <speaker_play+0x52>
		return;
 80034ac:	bf00      	nop
}
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	20001814 	.word	0x20001814
 80034bc:	20001818 	.word	0x20001818

080034c0 <main_logic>:
void preset_data_xy();
void emergency_handler();

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	ENE_I2C_UPDATE(&variables->end_effector_status, &hi2c1, 0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3326      	adds	r3, #38	; 0x26
 80034cc:	2200      	movs	r2, #0
 80034ce:	49b2      	ldr	r1, [pc, #712]	; (8003798 <main_logic+0x2d8>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fed9 	bl	8001288 <ENE_I2C_UPDATE>
	RGB_logic(state, tray_point_n, emergency);
 80034d6:	4bb1      	ldr	r3, [pc, #708]	; (800379c <main_logic+0x2dc>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	4bb0      	ldr	r3, [pc, #704]	; (80037a0 <main_logic+0x2e0>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	4bb0      	ldr	r3, [pc, #704]	; (80037a4 <main_logic+0x2e4>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 ff90 	bl	800440c <RGB_logic>
	data_report(variables);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fbab 	bl	8003c48 <data_report>
	Joystick_Transmit(variables->x_target_position, setpoint_y * 0.3, jog_enable + jog_point_n);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f9b3 401e 	ldrsh.w	r4, [r3, #30]
 80034f8:	4bab      	ldr	r3, [pc, #684]	; (80037a8 <main_logic+0x2e8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f819 	bl	8000534 <__aeabi_i2d>
 8003502:	a3a1      	add	r3, pc, #644	; (adr r3, 8003788 <main_logic+0x2c8>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fd f87e 	bl	8000608 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	f7fd fb28 	bl	8000b68 <__aeabi_d2iz>
 8003518:	4603      	mov	r3, r0
 800351a:	b219      	sxth	r1, r3
 800351c:	4ba3      	ldr	r3, [pc, #652]	; (80037ac <main_logic+0x2ec>)
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <main_logic+0x2f0>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4413      	add	r3, r2
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	4620      	mov	r0, r4
 800352c:	f7fe f824 	bl	8001578 <Joystick_Transmit>
	speaker_logic();
 8003530:	f7ff ff20 	bl	8003374 <speaker_logic>

	emergency_handler();
 8003534:	f000 ff06 	bl	8004344 <emergency_handler>
	if (emergency) {
 8003538:	4b9a      	ldr	r3, [pc, #616]	; (80037a4 <main_logic+0x2e4>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8214 	bne.w	800396a <main_logic+0x4aa>
		return;
	}

	x_spam_position(variables);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fbe0 	bl	8003d08 <x_spam_position>

	static uint32_t wait_timer;
	switch (state) {
 8003548:	4b94      	ldr	r3, [pc, #592]	; (800379c <main_logic+0x2dc>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	f200 8217 	bhi.w	8003980 <main_logic+0x4c0>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <main_logic+0x98>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	0800357d 	.word	0x0800357d
 800355c:	080035a3 	.word	0x080035a3
 8003560:	0800369f 	.word	0x0800369f
 8003564:	0800369f 	.word	0x0800369f
 8003568:	080036b1 	.word	0x080036b1
 800356c:	080036e9 	.word	0x080036e9
 8003570:	080038fd 	.word	0x080038fd
 8003574:	08003953 	.word	0x08003953
 8003578:	0800395f 	.word	0x0800395f
	case MSwait:
		if (HAL_GetTick() - wait_timer > 1500) {
 800357c:	f002 ff04 	bl	8006388 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	4b8c      	ldr	r3, [pc, #560]	; (80037b4 <main_logic+0x2f4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800358c:	4293      	cmp	r3, r2
 800358e:	f240 81ee 	bls.w	800396e <main_logic+0x4ae>
			speaker_play(51, 13);
 8003592:	210d      	movs	r1, #13
 8003594:	2033      	movs	r0, #51	; 0x33
 8003596:	f7ff ff61 	bl	800345c <speaker_play>
			state = MSidle;
 800359a:	4b80      	ldr	r3, [pc, #512]	; (800379c <main_logic+0x2dc>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
		}
		break;
 80035a0:	e1e5      	b.n	800396e <main_logic+0x4ae>
	case MSidle:
		wait_timer = HAL_GetTick();
 80035a2:	f002 fef1 	bl	8006388 <HAL_GetTick>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4a82      	ldr	r2, [pc, #520]	; (80037b4 <main_logic+0x2f4>)
 80035aa:	6013      	str	r3, [r2, #0]
		variables->y_moving_status = 0;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	815a      	strh	r2, [r3, #10]
		jog_enable = 0;
 80035b2:	4b7e      	ldr	r3, [pc, #504]	; (80037ac <main_logic+0x2ec>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]

		if (variables->base_system_status & 0b1) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00f      	beq.n	80035e8 <main_logic+0x128>
			// pick mode
			variables->base_system_status = 0;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	801a      	strh	r2, [r3, #0]
			state = MSpick;
 80035ce:	4b73      	ldr	r3, [pc, #460]	; (800379c <main_logic+0x2dc>)
 80035d0:	2202      	movs	r2, #2
 80035d2:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 80035da:	4b74      	ldr	r3, [pc, #464]	; (80037ac <main_logic+0x2ec>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
			speaker_play(51, 9);
 80035e0:	2109      	movs	r1, #9
 80035e2:	2033      	movs	r0, #51	; 0x33
 80035e4:	f7ff ff3a 	bl	800345c <speaker_play>
		}

		if (variables->base_system_status & 0b10) {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <main_logic+0x158>
			// place mode
			variables->base_system_status = 0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	801a      	strh	r2, [r3, #0]
			state = MSplace;
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <main_logic+0x2dc>)
 8003600:	2203      	movs	r2, #3
 8003602:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 800360a:	4b68      	ldr	r3, [pc, #416]	; (80037ac <main_logic+0x2ec>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
			speaker_play(51, 9);
 8003610:	2109      	movs	r1, #9
 8003612:	2033      	movs	r0, #51	; 0x33
 8003614:	f7ff ff22 	bl	800345c <speaker_play>
		}

		if (variables->base_system_status & 0b100) {
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <main_logic+0x186>
			// home mode
			variables->base_system_status = 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	801a      	strh	r2, [r3, #0]
			state = MShome;
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <main_logic+0x2dc>)
 8003630:	2204      	movs	r2, #4
 8003632:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 4;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2204      	movs	r2, #4
 8003638:	815a      	strh	r2, [r3, #10]
			variables->x_target_position = 0;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
			//variables->x_moving_status = 1;
		}

		if (variables->base_system_status & 0b1000) {
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <main_logic+0x1b8>
			// start tray mode
			variables->base_system_status = 0;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	801a      	strh	r2, [r3, #0]
			state = MStray;
 800365c:	4b4f      	ldr	r3, [pc, #316]	; (800379c <main_logic+0x2dc>)
 800365e:	2205      	movs	r2, #5
 8003660:	701a      	strb	r2, [r3, #0]
			tray_wait_mode = 0;
 8003662:	4b55      	ldr	r3, [pc, #340]	; (80037b8 <main_logic+0x2f8>)
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
			tray_point_n = 0;
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <main_logic+0x2e0>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
			tray_delay = HAL_GetTick();
 800366e:	f002 fe8b 	bl	8006388 <HAL_GetTick>
 8003672:	4603      	mov	r3, r0
 8003674:	4a51      	ldr	r2, [pc, #324]	; (80037bc <main_logic+0x2fc>)
 8003676:	6013      	str	r3, [r2, #0]
		}

		if (variables->base_system_status & 0b10000) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8174 	beq.w	8003972 <main_logic+0x4b2>
			// point mode
			variables->base_system_status = 0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	801a      	strh	r2, [r3, #0]
			state = MSpoint;
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <main_logic+0x2dc>)
 8003692:	2206      	movs	r2, #6
 8003694:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 32;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	815a      	strh	r2, [r3, #10]
		}
		break;
 800369c:	e169      	b.n	8003972 <main_logic+0x4b2>
	case MSpick: // MSpick or MSplace
	case MSplace:
		variables->x_target_position = setpoint_x;
 800369e:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <main_logic+0x300>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb2d 	bl	8003d08 <x_spam_position>
		break;
 80036ae:	e167      	b.n	8003980 <main_logic+0x4c0>
	case MShome:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET) {
 80036b0:	2108      	movs	r1, #8
 80036b2:	4844      	ldr	r0, [pc, #272]	; (80037c4 <main_logic+0x304>)
 80036b4:	f003 ffae 	bl	8007614 <HAL_GPIO_ReadPin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <main_logic+0x20a>
			home_status = 1;
 80036be:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <main_logic+0x308>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
			home_handler();
 80036c4:	f000 fa26 	bl	8003b14 <home_handler>
		} else if (!home_status) {
			home_status = 1;
			PID_enable = 0;
			voltage = -8000;
		}
		break;
 80036c8:	e155      	b.n	8003976 <main_logic+0x4b6>
		} else if (!home_status) {
 80036ca:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <main_logic+0x308>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 8151 	bne.w	8003976 <main_logic+0x4b6>
			home_status = 1;
 80036d4:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <main_logic+0x308>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
			PID_enable = 0;
 80036da:	4b3c      	ldr	r3, [pc, #240]	; (80037cc <main_logic+0x30c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
			voltage = -8000;
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <main_logic+0x310>)
 80036e2:	4a3c      	ldr	r2, [pc, #240]	; (80037d4 <main_logic+0x314>)
 80036e4:	601a      	str	r2, [r3, #0]
		break;
 80036e6:	e146      	b.n	8003976 <main_logic+0x4b6>
	case MStray:
		variables->x_target_position = setpoint_x;
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <main_logic+0x300>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b21a      	sxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb08 	bl	8003d08 <x_spam_position>
		switch (tray_wait_mode) {
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <main_logic+0x2f8>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	f200 80e9 	bhi.w	80038d4 <main_logic+0x414>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <main_logic+0x248>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	0800371d 	.word	0x0800371d
 800370c:	080037dd 	.word	0x080037dd
 8003710:	08003807 	.word	0x08003807
 8003714:	0800387b 	.word	0x0800387b
 8003718:	080038a5 	.word	0x080038a5
		case 0:
			// move to pick
			variables->y_moving_status = 8;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2208      	movs	r2, #8
 8003720:	815a      	strh	r2, [r3, #10]
			setpoint_x = pick[tray_point_n].x * 10;
 8003722:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <main_logic+0x2e0>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <main_logic+0x318>)
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373c:	ee17 2a90 	vmov	r2, s15
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <main_logic+0x300>)
 8003742:	601a      	str	r2, [r3, #0]
			setpoint_y = pick[tray_point_n].y / 0.03;
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <main_logic+0x2e0>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <main_logic+0x318>)
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc ff00 	bl	8000558 <__aeabi_f2d>
 8003758:	a30d      	add	r3, pc, #52	; (adr r3, 8003790 <main_logic+0x2d0>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fd f87d 	bl	800085c <__aeabi_ddiv>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	f7fd f9fd 	bl	8000b68 <__aeabi_d2iz>
 800376e:	4603      	mov	r3, r0
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <main_logic+0x2e8>)
 8003772:	6013      	str	r3, [r2, #0]
			variables->x_moving_status = 2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
			tray_wait_mode = 1;
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <main_logic+0x2f8>)
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
			break;
 8003780:	e0a8      	b.n	80038d4 <main_logic+0x414>
 8003782:	bf00      	nop
 8003784:	f3af 8000 	nop.w
 8003788:	33333333 	.word	0x33333333
 800378c:	3fd33333 	.word	0x3fd33333
 8003790:	eb851eb8 	.word	0xeb851eb8
 8003794:	3f9eb851 	.word	0x3f9eb851
 8003798:	200004d8 	.word	0x200004d8
 800379c:	20000221 	.word	0x20000221
 80037a0:	20001825 	.word	0x20001825
 80037a4:	20001821 	.word	0x20001821
 80037a8:	20001910 	.word	0x20001910
 80037ac:	20001823 	.word	0x20001823
 80037b0:	20001824 	.word	0x20001824
 80037b4:	2000196c 	.word	0x2000196c
 80037b8:	20001826 	.word	0x20001826
 80037bc:	20001828 	.word	0x20001828
 80037c0:	20001914 	.word	0x20001914
 80037c4:	40020800 	.word	0x40020800
 80037c8:	20001822 	.word	0x20001822
 80037cc:	20000222 	.word	0x20000222
 80037d0:	2000182c 	.word	0x2000182c
 80037d4:	c5fa0000 	.word	0xc5fa0000
 80037d8:	2000185c 	.word	0x2000185c
		case 1:
			// wait for move to finish then pick
			if (move_finished(10)) {
 80037dc:	200a      	movs	r0, #10
 80037de:	f000 fc33 	bl	8004048 <move_finished>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d06e      	beq.n	80038c6 <main_logic+0x406>
				end_effector_gripper(variables, 0);
 80037e8:	2100      	movs	r1, #0
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f968 	bl	8003ac0 <end_effector_gripper>
				tray_wait_mode = 2;
 80037f0:	4b69      	ldr	r3, [pc, #420]	; (8003998 <main_logic+0x4d8>)
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 80037f6:	f002 fdc7 	bl	8006388 <HAL_GetTick>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8003800:	4a66      	ldr	r2, [pc, #408]	; (800399c <main_logic+0x4dc>)
 8003802:	6013      	str	r3, [r2, #0]
			}
			break;
 8003804:	e05f      	b.n	80038c6 <main_logic+0x406>
		case 2:
			// wait for pick to finish then move to place
			if (HAL_GetTick() >= tray_delay) {
 8003806:	f002 fdbf 	bl	8006388 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	4b63      	ldr	r3, [pc, #396]	; (800399c <main_logic+0x4dc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d35a      	bcc.n	80038ca <main_logic+0x40a>
				variables->y_moving_status = 16;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2210      	movs	r2, #16
 8003818:	815a      	strh	r2, [r3, #10]
				setpoint_x = place[tray_point_n].x * 10;
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <main_logic+0x4e0>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	4a61      	ldr	r2, [pc, #388]	; (80039a4 <main_logic+0x4e4>)
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800382c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003834:	ee17 2a90 	vmov	r2, s15
 8003838:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <main_logic+0x4e8>)
 800383a:	601a      	str	r2, [r3, #0]
				setpoint_y = place[tray_point_n].y / 0.03;
 800383c:	4b58      	ldr	r3, [pc, #352]	; (80039a0 <main_logic+0x4e0>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <main_logic+0x4e4>)
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fe84 	bl	8000558 <__aeabi_f2d>
 8003850:	a34d      	add	r3, pc, #308	; (adr r3, 8003988 <main_logic+0x4c8>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f7fd f801 	bl	800085c <__aeabi_ddiv>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f7fd f981 	bl	8000b68 <__aeabi_d2iz>
 8003866:	4603      	mov	r3, r0
 8003868:	4a50      	ldr	r2, [pc, #320]	; (80039ac <main_logic+0x4ec>)
 800386a:	6013      	str	r3, [r2, #0]
				variables->x_moving_status = 2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
				tray_wait_mode = 3;
 8003872:	4b49      	ldr	r3, [pc, #292]	; (8003998 <main_logic+0x4d8>)
 8003874:	2203      	movs	r2, #3
 8003876:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003878:	e027      	b.n	80038ca <main_logic+0x40a>
		case 3:
			// wait for move to place then place
			if (move_finished(10)) {
 800387a:	200a      	movs	r0, #10
 800387c:	f000 fbe4 	bl	8004048 <move_finished>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d023      	beq.n	80038ce <main_logic+0x40e>
				end_effector_gripper(variables, 1);
 8003886:	2101      	movs	r1, #1
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f919 	bl	8003ac0 <end_effector_gripper>
				tray_wait_mode = 4;
 800388e:	4b42      	ldr	r3, [pc, #264]	; (8003998 <main_logic+0x4d8>)
 8003890:	2204      	movs	r2, #4
 8003892:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 8003894:	f002 fd78 	bl	8006388 <HAL_GetTick>
 8003898:	4603      	mov	r3, r0
 800389a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800389e:	4a3f      	ldr	r2, [pc, #252]	; (800399c <main_logic+0x4dc>)
 80038a0:	6013      	str	r3, [r2, #0]
			}
			break;
 80038a2:	e014      	b.n	80038ce <main_logic+0x40e>
		case 4:
			// wait for place to finish then reset to state 0
			if (HAL_GetTick() >= tray_delay) {
 80038a4:	f002 fd70 	bl	8006388 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b3c      	ldr	r3, [pc, #240]	; (800399c <main_logic+0x4dc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d30f      	bcc.n	80038d2 <main_logic+0x412>
				tray_wait_mode = 0;
 80038b2:	4b39      	ldr	r3, [pc, #228]	; (8003998 <main_logic+0x4d8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
				tray_point_n++;
 80038b8:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <main_logic+0x4e0>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <main_logic+0x4e0>)
 80038c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038c4:	e005      	b.n	80038d2 <main_logic+0x412>
			break;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <main_logic+0x414>
			break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <main_logic+0x414>
			break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <main_logic+0x414>
			break;
 80038d2:	bf00      	nop
		}
		if (tray_point_n >= 9) {
 80038d4:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <main_logic+0x4e0>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d94e      	bls.n	800397a <main_logic+0x4ba>
			setpoint_y = 0;
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <main_logic+0x4ec>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
			tray_point_n = 0;
 80038e2:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <main_logic+0x4e0>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
			variables->x_target_position = 0;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
			state = MSidle;
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <main_logic+0x4f0>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80038fa:	e03e      	b.n	800397a <main_logic+0x4ba>
	case MSpoint:
		setpoint_y = variables->goal_point_y / 0.3;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe16 	bl	8000534 <__aeabi_i2d>
 8003908:	a321      	add	r3, pc, #132	; (adr r3, 8003990 <main_logic+0x4d0>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc ffa5 	bl	800085c <__aeabi_ddiv>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f925 	bl	8000b68 <__aeabi_d2iz>
 800391e:	4603      	mov	r3, r0
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <main_logic+0x4ec>)
 8003922:	6013      	str	r3, [r2, #0]
		variables->x_target_position = variables->goal_point_x;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	83da      	strh	r2, [r3, #30]
		variables->x_moving_status = 2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28

		if (abs(setpoint_y - getLocalPosition()) < 10) {
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <main_logic+0x4ec>)
 8003936:	681c      	ldr	r4, [r3, #0]
 8003938:	f7fe fdd6 	bl	80024e8 <getLocalPosition>
 800393c:	4603      	mov	r3, r0
 800393e:	1ae3      	subs	r3, r4, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	bfb8      	it	lt
 8003944:	425b      	neglt	r3, r3
 8003946:	2b09      	cmp	r3, #9
 8003948:	dc19      	bgt.n	800397e <main_logic+0x4be>
			state = MSwait;
 800394a:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <main_logic+0x4f0>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003950:	e015      	b.n	800397e <main_logic+0x4be>
	case MStestY:
		preset_data_y_only();
 8003952:	f000 fba5 	bl	80040a0 <preset_data_y_only>
		state = MSidle;
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <main_logic+0x4f0>)
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
		break;
 800395c:	e010      	b.n	8003980 <main_logic+0x4c0>
	case MStestXY:
		preset_data_xy();
 800395e:	f000 fbf7 	bl	8004150 <preset_data_xy>
		state = MSidle;
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <main_logic+0x4f0>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
		break;
 8003968:	e00a      	b.n	8003980 <main_logic+0x4c0>
		return;
 800396a:	bf00      	nop
 800396c:	e008      	b.n	8003980 <main_logic+0x4c0>
		break;
 800396e:	bf00      	nop
 8003970:	e006      	b.n	8003980 <main_logic+0x4c0>
		break;
 8003972:	bf00      	nop
 8003974:	e004      	b.n	8003980 <main_logic+0x4c0>
		break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <main_logic+0x4c0>
		break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <main_logic+0x4c0>
		break;
 800397e:	bf00      	nop
	}
}
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	bf00      	nop
 8003988:	eb851eb8 	.word	0xeb851eb8
 800398c:	3f9eb851 	.word	0x3f9eb851
 8003990:	33333333 	.word	0x33333333
 8003994:	3fd33333 	.word	0x3fd33333
 8003998:	20001826 	.word	0x20001826
 800399c:	20001828 	.word	0x20001828
 80039a0:	20001825 	.word	0x20001825
 80039a4:	200018a4 	.word	0x200018a4
 80039a8:	20001914 	.word	0x20001914
 80039ac:	20001910 	.word	0x20001910
 80039b0:	20000221 	.word	0x20000221

080039b4 <interrupt_logic>:

void interrupt_logic() {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	ed2d 8b02 	vpush	{d8}
 80039ba:	af00      	add	r7, sp, #0
	// Call trajectory function
	Trajectory(setpoint_y, 34000, 60000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 0);
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <interrupt_logic+0xd4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c8:	2300      	movs	r3, #0
 80039ca:	4a30      	ldr	r2, [pc, #192]	; (8003a8c <interrupt_logic+0xd8>)
 80039cc:	4930      	ldr	r1, [pc, #192]	; (8003a90 <interrupt_logic+0xdc>)
 80039ce:	4831      	ldr	r0, [pc, #196]	; (8003a94 <interrupt_logic+0xe0>)
 80039d0:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8003a98 <interrupt_logic+0xe4>
 80039d4:	eddf 0a31 	vldr	s1, [pc, #196]	; 8003a9c <interrupt_logic+0xe8>
 80039d8:	eeb0 0a67 	vmov.f32	s0, s15
 80039dc:	f001 ffa8 	bl	8005930 <Trajectory>

	lowpass_filter(getRawPosition(), &actual_velocity, &actual_acceleration);
 80039e0:	f7fe fd94 	bl	800250c <getRawPosition>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <interrupt_logic+0xec>)
 80039e8:	492e      	ldr	r1, [pc, #184]	; (8003aa4 <interrupt_logic+0xf0>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fed2 	bl	8001794 <lowpass_filter>

	// Call PID function
	if (PID_enable) {
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <interrupt_logic+0xf4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d036      	beq.n	8003a66 <interrupt_logic+0xb2>
		static int count = 0;
		count++;
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <interrupt_logic+0xf8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <interrupt_logic+0xf8>)
 8003a00:	6013      	str	r3, [r2, #0]
		if (count >= 5) {
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <interrupt_logic+0xf8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	dd2d      	ble.n	8003a66 <interrupt_logic+0xb2>
			PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage, 0);
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <interrupt_logic+0xe0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <interrupt_logic+0xd4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8003a22:	f7fe fd61 	bl	80024e8 <getLocalPosition>
 8003a26:	ee07 0a90 	vmov	s15, r0
 8003a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <interrupt_logic+0xfc>)
 8003a30:	ed93 7a00 	vldr	s14, [r3]
 8003a34:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <interrupt_logic+0x100>)
 8003a36:	edd3 6a00 	vldr	s13, [r3]
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <interrupt_logic+0x104>)
 8003a3c:	ed93 6a00 	vldr	s12, [r3]
 8003a40:	2100      	movs	r1, #0
 8003a42:	481e      	ldr	r0, [pc, #120]	; (8003abc <interrupt_logic+0x108>)
 8003a44:	eef0 2a46 	vmov.f32	s5, s12
 8003a48:	eeb0 2a66 	vmov.f32	s4, s13
 8003a4c:	eef0 1a47 	vmov.f32	s3, s14
 8003a50:	eeb0 1a67 	vmov.f32	s2, s15
 8003a54:	eef0 0a68 	vmov.f32	s1, s17
 8003a58:	eeb0 0a48 	vmov.f32	s0, s16
 8003a5c:	f7fe fa62 	bl	8001f24 <PositionControlPID>
			count = 0;
 8003a60:	4b12      	ldr	r3, [pc, #72]	; (8003aac <interrupt_logic+0xf8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
		}
	}

	// Call motor function
	motor(voltage);
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <interrupt_logic+0x108>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a70:	f7fe fcda 	bl	8002428 <motor>

	Modbus_Protocal_Worker();
 8003a74:	f7fd ffd8 	bl	8001a28 <Modbus_Protocal_Worker>

	home_handler();
 8003a78:	f000 f84c 	bl	8003b14 <home_handler>
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	ecbd 8b02 	vpop	{d8}
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20001910 	.word	0x20001910
 8003a8c:	20001838 	.word	0x20001838
 8003a90:	20001834 	.word	0x20001834
 8003a94:	20001830 	.word	0x20001830
 8003a98:	476a6000 	.word	0x476a6000
 8003a9c:	4704d000 	.word	0x4704d000
 8003aa0:	20001840 	.word	0x20001840
 8003aa4:	2000183c 	.word	0x2000183c
 8003aa8:	20000222 	.word	0x20000222
 8003aac:	20001970 	.word	0x20001970
 8003ab0:	20000224 	.word	0x20000224
 8003ab4:	20000228 	.word	0x20000228
 8003ab8:	2000022c 	.word	0x2000022c
 8003abc:	2000182c 	.word	0x2000182c

08003ac0 <end_effector_gripper>:

void end_effector_gripper(MB *variables, uint8_t mode) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
	if ((variables->end_effector_status & 0b0010) == 0) {
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d014      	beq.n	8003b06 <end_effector_gripper+0x46>
		return;
	}

	if (!mode) {
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <end_effector_gripper+0x34>
		// pick
		variables->end_effector_status |= 0b0100;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	b21a      	sxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	84da      	strh	r2, [r3, #38]	; 0x26
 8003af2:	e009      	b.n	8003b08 <end_effector_gripper+0x48>
	} else {
		// place
		variables->end_effector_status |= 0b1000;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	b21a      	sxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	84da      	strh	r2, [r3, #38]	; 0x26
 8003b04:	e000      	b.n	8003b08 <end_effector_gripper+0x48>
		return;
 8003b06:	bf00      	nop
	}
}
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <home_handler>:
		// on
		variables->end_effector_status |= 0b0001;
	}
}

void home_handler() {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	ed2d 8b02 	vpush	{d8}
 8003b1a:	af00      	add	r7, sp, #0
	if (!home_status) {
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <home_handler+0xec>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d066      	beq.n	8003bf2 <home_handler+0xde>
		return;
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 8003b24:	2108      	movs	r1, #8
 8003b26:	4837      	ldr	r0, [pc, #220]	; (8003c04 <home_handler+0xf0>)
 8003b28:	f003 fd74 	bl	8007614 <HAL_GPIO_ReadPin>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d061      	beq.n	8003bf6 <home_handler+0xe2>
		return;
	}
	motor(0);
 8003b32:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003c08 <home_handler+0xf4>
 8003b36:	f7fe fc77 	bl	8002428 <motor>
	voltage = 0;
 8003b3a:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <home_handler+0xf8>)
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
	homeoffset = getRawPosition() + 11500;
 8003b42:	f7fe fce3 	bl	800250c <getRawPosition>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 8003b4c:	332c      	adds	r3, #44	; 0x2c
 8003b4e:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <home_handler+0xfc>)
 8003b50:	6013      	str	r3, [r2, #0]
	setpointtraj_y = -11500;
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <home_handler+0x100>)
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <home_handler+0x104>)
 8003b56:	601a      	str	r2, [r3, #0]
	setpoint_y = -11500;
 8003b58:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <home_handler+0x108>)
 8003b5a:	4a2f      	ldr	r2, [pc, #188]	; (8003c18 <home_handler+0x104>)
 8003b5c:	601a      	str	r2, [r3, #0]
	Trajectory(setpoint_y, 34000, 80000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 1);
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <home_handler+0x108>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <home_handler+0x10c>)
 8003b6e:	492d      	ldr	r1, [pc, #180]	; (8003c24 <home_handler+0x110>)
 8003b70:	4828      	ldr	r0, [pc, #160]	; (8003c14 <home_handler+0x100>)
 8003b72:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8003c28 <home_handler+0x114>
 8003b76:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8003c2c <home_handler+0x118>
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	f001 fed7 	bl	8005930 <Trajectory>
	PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage, 1); // reset PID
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <home_handler+0x100>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <home_handler+0x108>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8003b9a:	f7fe fca5 	bl	80024e8 <getLocalPosition>
 8003b9e:	ee07 0a90 	vmov	s15, r0
 8003ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <home_handler+0x11c>)
 8003ba8:	ed93 7a00 	vldr	s14, [r3]
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <home_handler+0x120>)
 8003bae:	edd3 6a00 	vldr	s13, [r3]
 8003bb2:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <home_handler+0x124>)
 8003bb4:	ed93 6a00 	vldr	s12, [r3]
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4814      	ldr	r0, [pc, #80]	; (8003c0c <home_handler+0xf8>)
 8003bbc:	eef0 2a46 	vmov.f32	s5, s12
 8003bc0:	eeb0 2a66 	vmov.f32	s4, s13
 8003bc4:	eef0 1a47 	vmov.f32	s3, s14
 8003bc8:	eeb0 1a67 	vmov.f32	s2, s15
 8003bcc:	eef0 0a68 	vmov.f32	s1, s17
 8003bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8003bd4:	f7fe f9a6 	bl	8001f24 <PositionControlPID>
	home_status = 0;
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <home_handler+0xec>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
	PID_enable = 1;
 8003bde:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <home_handler+0x128>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
	state = MSwait;
 8003be4:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <home_handler+0x12c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
	setpoint_y = 0;
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <home_handler+0x108>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e002      	b.n	8003bf8 <home_handler+0xe4>
		return;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <home_handler+0xe4>
		return;
 8003bf6:	bf00      	nop
}
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	ecbd 8b02 	vpop	{d8}
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20001822 	.word	0x20001822
 8003c04:	40020800 	.word	0x40020800
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	2000182c 	.word	0x2000182c
 8003c10:	20001918 	.word	0x20001918
 8003c14:	20001830 	.word	0x20001830
 8003c18:	ffffd314 	.word	0xffffd314
 8003c1c:	20001910 	.word	0x20001910
 8003c20:	20001838 	.word	0x20001838
 8003c24:	20001834 	.word	0x20001834
 8003c28:	479c4000 	.word	0x479c4000
 8003c2c:	4704d000 	.word	0x4704d000
 8003c30:	20000224 	.word	0x20000224
 8003c34:	20000228 	.word	0x20000228
 8003c38:	2000022c 	.word	0x2000022c
 8003c3c:	20000222 	.word	0x20000222
 8003c40:	20000221 	.word	0x20000221
 8003c44:	00000000 	.word	0x00000000

08003c48 <data_report>:

void data_report(MB *variables) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	variables->y_actual_position = getLocalPosition() * 0.3;
 8003c50:	f7fe fc4a 	bl	80024e8 <getLocalPosition>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fc6c 	bl	8000534 <__aeabi_i2d>
 8003c5c:	a326      	add	r3, pc, #152	; (adr r3, 8003cf8 <data_report+0xb0>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f7fc fcd1 	bl	8000608 <__aeabi_dmul>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fc ff7b 	bl	8000b68 <__aeabi_d2iz>
 8003c72:	4603      	mov	r3, r0
 8003c74:	b21a      	sxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	819a      	strh	r2, [r3, #12]
	variables->y_actual_speed = abs(actual_velocity) * 0.3;
 8003c7a:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <data_report+0xb8>)
 8003c7c:	edd3 7a00 	vldr	s15, [r3]
 8003c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c84:	ee17 3a90 	vmov	r3, s15
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bfb8      	it	lt
 8003c8c:	425b      	neglt	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc50 	bl	8000534 <__aeabi_i2d>
 8003c94:	a318      	add	r3, pc, #96	; (adr r3, 8003cf8 <data_report+0xb0>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fcb5 	bl	8000608 <__aeabi_dmul>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f7fc ff5f 	bl	8000b68 <__aeabi_d2iz>
 8003caa:	4603      	mov	r3, r0
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	81da      	strh	r2, [r3, #14]
	variables->y_actual_acceleration = abs(actual_acceleration) * 0.3;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <data_report+0xbc>)
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cbc:	ee17 3a90 	vmov	r3, s15
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bfb8      	it	lt
 8003cc4:	425b      	neglt	r3, r3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fc34 	bl	8000534 <__aeabi_i2d>
 8003ccc:	a30a      	add	r3, pc, #40	; (adr r3, 8003cf8 <data_report+0xb0>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f7fc fc99 	bl	8000608 <__aeabi_dmul>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f7fc ff43 	bl	8000b68 <__aeabi_d2iz>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	b21a      	sxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	821a      	strh	r2, [r3, #16]
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	33333333 	.word	0x33333333
 8003cfc:	3fd33333 	.word	0x3fd33333
 8003d00:	2000183c 	.word	0x2000183c
 8003d04:	20001840 	.word	0x20001840

08003d08 <x_spam_position>:

void x_spam_position(MB *variables) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	if ((variables->x_actual_position - variables->x_target_position) != 0 && variables->x_moving_status == 0) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d007      	beq.n	8003d30 <x_spam_position+0x28>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <x_spam_position+0x28>
		variables->x_moving_status = 2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
	}
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	0000      	movs	r0, r0
	...

08003d40 <joystick_callback>:

void joystick_callback() {
 8003d40:	b598      	push	{r3, r4, r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	if (!jog_enable) {
 8003d44:	4bac      	ldr	r3, [pc, #688]	; (8003ff8 <joystick_callback+0x2b8>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d117      	bne.n	8003d7c <joystick_callback+0x3c>
		if (receivedByte[2]) {
 8003d4c:	4bab      	ldr	r3, [pc, #684]	; (8003ffc <joystick_callback+0x2bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <joystick_callback+0x22>
			state = MStestXY;
 8003d54:	4baa      	ldr	r3, [pc, #680]	; (8004000 <joystick_callback+0x2c0>)
 8003d56:	2208      	movs	r2, #8
 8003d58:	701a      	strb	r2, [r3, #0]
			speaker_play(50, 12);
 8003d5a:	210c      	movs	r1, #12
 8003d5c:	2032      	movs	r0, #50	; 0x32
 8003d5e:	f7ff fb7d 	bl	800345c <speaker_play>
		}
		if (receivedByte[3]) {
 8003d62:	4ba6      	ldr	r3, [pc, #664]	; (8003ffc <joystick_callback+0x2bc>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 813c 	beq.w	8003fe4 <joystick_callback+0x2a4>
			state = MSidle;
 8003d6c:	4ba4      	ldr	r3, [pc, #656]	; (8004000 <joystick_callback+0x2c0>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
			speaker_play(50, 12);
 8003d72:	210c      	movs	r1, #12
 8003d74:	2032      	movs	r0, #50	; 0x32
 8003d76:	f7ff fb71 	bl	800345c <speaker_play>
		}
		return;
 8003d7a:	e133      	b.n	8003fe4 <joystick_callback+0x2a4>
	}

	if (receivedByte[3]) {
 8003d7c:	4b9f      	ldr	r3, [pc, #636]	; (8003ffc <joystick_callback+0x2bc>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <joystick_callback+0x52>
		state = MSidle;
 8003d84:	4b9e      	ldr	r3, [pc, #632]	; (8004000 <joystick_callback+0x2c0>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
		speaker_play(50, 12);
 8003d8a:	210c      	movs	r1, #12
 8003d8c:	2032      	movs	r0, #50	; 0x32
 8003d8e:	f7ff fb65 	bl	800345c <speaker_play>
	}

	setpoint_x += receivedByte[0];
 8003d92:	4b9a      	ldr	r3, [pc, #616]	; (8003ffc <joystick_callback+0x2bc>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b9b      	ldr	r3, [pc, #620]	; (8004004 <joystick_callback+0x2c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4a99      	ldr	r2, [pc, #612]	; (8004004 <joystick_callback+0x2c4>)
 8003d9e:	6013      	str	r3, [r2, #0]
	setpoint_y += receivedByte[1];
 8003da0:	4b96      	ldr	r3, [pc, #600]	; (8003ffc <joystick_callback+0x2bc>)
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	4b98      	ldr	r3, [pc, #608]	; (8004008 <joystick_callback+0x2c8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	4a97      	ldr	r2, [pc, #604]	; (8004008 <joystick_callback+0x2c8>)
 8003dac:	6013      	str	r3, [r2, #0]

	if (setpoint_x > 1400) {
 8003dae:	4b95      	ldr	r3, [pc, #596]	; (8004004 <joystick_callback+0x2c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003db6:	dd04      	ble.n	8003dc2 <joystick_callback+0x82>
		setpoint_x = 1400;
 8003db8:	4b92      	ldr	r3, [pc, #584]	; (8004004 <joystick_callback+0x2c4>)
 8003dba:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e007      	b.n	8003dd2 <joystick_callback+0x92>
	} else if (setpoint_x < -1400) {
 8003dc2:	4b90      	ldr	r3, [pc, #576]	; (8004004 <joystick_callback+0x2c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f513 6faf 	cmn.w	r3, #1400	; 0x578
 8003dca:	da02      	bge.n	8003dd2 <joystick_callback+0x92>
		setpoint_x = -1400;
 8003dcc:	4b8d      	ldr	r3, [pc, #564]	; (8004004 <joystick_callback+0x2c4>)
 8003dce:	4a8f      	ldr	r2, [pc, #572]	; (800400c <joystick_callback+0x2cc>)
 8003dd0:	601a      	str	r2, [r3, #0]
	}

	if (setpoint_y > 11667) {
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	; (8004008 <joystick_callback+0x2c8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	dd04      	ble.n	8003de8 <joystick_callback+0xa8>
		setpoint_y = 11667;
 8003dde:	4b8a      	ldr	r3, [pc, #552]	; (8004008 <joystick_callback+0x2c8>)
 8003de0:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <joystick_callback+0xb8>
	} else if (setpoint_y < -11667) {
 8003de8:	4b87      	ldr	r3, [pc, #540]	; (8004008 <joystick_callback+0x2c8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a88      	ldr	r2, [pc, #544]	; (8004010 <joystick_callback+0x2d0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	da02      	bge.n	8003df8 <joystick_callback+0xb8>
		setpoint_y = -11667;
 8003df2:	4b85      	ldr	r3, [pc, #532]	; (8004008 <joystick_callback+0x2c8>)
 8003df4:	4a86      	ldr	r2, [pc, #536]	; (8004010 <joystick_callback+0x2d0>)
 8003df6:	601a      	str	r2, [r3, #0]
	}

	if (receivedByte[2]) {
 8003df8:	4b80      	ldr	r3, [pc, #512]	; (8003ffc <joystick_callback+0x2bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d03e      	beq.n	8003e7e <joystick_callback+0x13e>
		speaker_play(51, 10 + jog_point_n);
 8003e00:	4b84      	ldr	r3, [pc, #528]	; (8004014 <joystick_callback+0x2d4>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	330a      	adds	r3, #10
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	2033      	movs	r0, #51	; 0x33
 8003e0c:	f7ff fb26 	bl	800345c <speaker_play>
		corners[jog_point_n].x = setpoint_x / 10.0;
 8003e10:	4b7c      	ldr	r3, [pc, #496]	; (8004004 <joystick_callback+0x2c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc fb8d 	bl	8000534 <__aeabi_i2d>
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	4b7e      	ldr	r3, [pc, #504]	; (8004018 <joystick_callback+0x2d8>)
 8003e20:	f7fc fd1c 	bl	800085c <__aeabi_ddiv>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	497a      	ldr	r1, [pc, #488]	; (8004014 <joystick_callback+0x2d4>)
 8003e2a:	7809      	ldrb	r1, [r1, #0]
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f7fc fee1 	bl	8000bf8 <__aeabi_d2f>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4978      	ldr	r1, [pc, #480]	; (800401c <joystick_callback+0x2dc>)
 8003e3a:	00e3      	lsls	r3, r4, #3
 8003e3c:	440b      	add	r3, r1
 8003e3e:	601a      	str	r2, [r3, #0]
		corners[jog_point_n].y = setpoint_y * 0.03;
 8003e40:	4b71      	ldr	r3, [pc, #452]	; (8004008 <joystick_callback+0x2c8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fb75 	bl	8000534 <__aeabi_i2d>
 8003e4a:	a367      	add	r3, pc, #412	; (adr r3, 8003fe8 <joystick_callback+0x2a8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fbda 	bl	8000608 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	496e      	ldr	r1, [pc, #440]	; (8004014 <joystick_callback+0x2d4>)
 8003e5a:	7809      	ldrb	r1, [r1, #0]
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	f7fc fec9 	bl	8000bf8 <__aeabi_d2f>
 8003e66:	4602      	mov	r2, r0
 8003e68:	496c      	ldr	r1, [pc, #432]	; (800401c <joystick_callback+0x2dc>)
 8003e6a:	00e3      	lsls	r3, r4, #3
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3304      	adds	r3, #4
 8003e70:	601a      	str	r2, [r3, #0]
		jog_point_n++;
 8003e72:	4b68      	ldr	r3, [pc, #416]	; (8004014 <joystick_callback+0x2d4>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b66      	ldr	r3, [pc, #408]	; (8004014 <joystick_callback+0x2d4>)
 8003e7c:	701a      	strb	r2, [r3, #0]
	}
	if (jog_point_n >= 3) {
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <joystick_callback+0x2d4>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	f240 80af 	bls.w	8003fe6 <joystick_callback+0x2a6>
		speaker_play(51, 12);
 8003e88:	210c      	movs	r1, #12
 8003e8a:	2033      	movs	r0, #51	; 0x33
 8003e8c:	f7ff fae6 	bl	800345c <speaker_play>
		if (state == MSpick) {
 8003e90:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <joystick_callback+0x2c0>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d14f      	bne.n	8003f38 <joystick_callback+0x1f8>
			localize(corners, pick, &origin_pick, &angle_pick);
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <joystick_callback+0x2e0>)
 8003e9a:	4a62      	ldr	r2, [pc, #392]	; (8004024 <joystick_callback+0x2e4>)
 8003e9c:	4962      	ldr	r1, [pc, #392]	; (8004028 <joystick_callback+0x2e8>)
 8003e9e:	485f      	ldr	r0, [pc, #380]	; (800401c <joystick_callback+0x2dc>)
 8003ea0:	f7fe fb42 	bl	8002528 <localize>
			MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003ea4:	4b5e      	ldr	r3, [pc, #376]	; (8004020 <joystick_callback+0x2e0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc fb55 	bl	8000558 <__aeabi_f2d>
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	4b5e      	ldr	r3, [pc, #376]	; (800402c <joystick_callback+0x2ec>)
 8003eb4:	f7fc fba8 	bl	8000608 <__aeabi_dmul>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	a34b      	add	r3, pc, #300	; (adr r3, 8003ff0 <joystick_callback+0x2b0>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc fcc9 	bl	800085c <__aeabi_ddiv>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	4957      	ldr	r1, [pc, #348]	; (8004030 <joystick_callback+0x2f0>)
 8003ed4:	f7fc f9e0 	bl	8000298 <__aeabi_dsub>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	4b53      	ldr	r3, [pc, #332]	; (8004034 <joystick_callback+0x2f4>)
 8003ee6:	f7fc fb8f 	bl	8000608 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fc fe39 	bl	8000b68 <__aeabi_d2iz>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	b21a      	sxth	r2, r3
 8003efa:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <joystick_callback+0x2f8>)
 8003efc:	82da      	strh	r2, [r3, #22]
			MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <joystick_callback+0x2e4>)
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f10:	ee17 3a90 	vmov	r3, s15
 8003f14:	b21a      	sxth	r2, r3
 8003f16:	4b48      	ldr	r3, [pc, #288]	; (8004038 <joystick_callback+0x2f8>)
 8003f18:	825a      	strh	r2, [r3, #18]
			MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 8003f1a:	4b42      	ldr	r3, [pc, #264]	; (8004024 <joystick_callback+0x2e4>)
 8003f1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f2c:	ee17 3a90 	vmov	r3, s15
 8003f30:	b21a      	sxth	r2, r3
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <joystick_callback+0x2f8>)
 8003f34:	829a      	strh	r2, [r3, #20]
 8003f36:	e04e      	b.n	8003fd6 <joystick_callback+0x296>
		} else {
			localize(corners, place, &origin_place, &angle_place);
 8003f38:	4b40      	ldr	r3, [pc, #256]	; (800403c <joystick_callback+0x2fc>)
 8003f3a:	4a41      	ldr	r2, [pc, #260]	; (8004040 <joystick_callback+0x300>)
 8003f3c:	4941      	ldr	r1, [pc, #260]	; (8004044 <joystick_callback+0x304>)
 8003f3e:	4837      	ldr	r0, [pc, #220]	; (800401c <joystick_callback+0x2dc>)
 8003f40:	f7fe faf2 	bl	8002528 <localize>
			MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8003f44:	4b3d      	ldr	r3, [pc, #244]	; (800403c <joystick_callback+0x2fc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc fb05 	bl	8000558 <__aeabi_f2d>
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b36      	ldr	r3, [pc, #216]	; (800402c <joystick_callback+0x2ec>)
 8003f54:	f7fc fb58 	bl	8000608 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	a323      	add	r3, pc, #140	; (adr r3, 8003ff0 <joystick_callback+0x2b0>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f7fc fc79 	bl	800085c <__aeabi_ddiv>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	492f      	ldr	r1, [pc, #188]	; (8004030 <joystick_callback+0x2f0>)
 8003f74:	f7fc f990 	bl	8000298 <__aeabi_dsub>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <joystick_callback+0x2f4>)
 8003f86:	f7fc fb3f 	bl	8000608 <__aeabi_dmul>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7fc fde9 	bl	8000b68 <__aeabi_d2iz>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b21a      	sxth	r2, r3
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <joystick_callback+0x2f8>)
 8003f9c:	839a      	strh	r2, [r3, #28]
			MBvariables.place_tray_origin_x = origin_place.x * 10;
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <joystick_callback+0x300>)
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb0:	ee17 3a90 	vmov	r3, s15
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <joystick_callback+0x2f8>)
 8003fb8:	831a      	strh	r2, [r3, #24]
			MBvariables.place_tray_origin_y = origin_place.y * 10;
 8003fba:	4b21      	ldr	r3, [pc, #132]	; (8004040 <joystick_callback+0x300>)
 8003fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fcc:	ee17 3a90 	vmov	r3, s15
 8003fd0:	b21a      	sxth	r2, r3
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <joystick_callback+0x2f8>)
 8003fd4:	835a      	strh	r2, [r3, #26]
		}
		state = MSwait;
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <joystick_callback+0x2c0>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
		jog_point_n = 0;
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <joystick_callback+0x2d4>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e000      	b.n	8003fe6 <joystick_callback+0x2a6>
		return;
 8003fe4:	bf00      	nop
	}
}
 8003fe6:	bd98      	pop	{r3, r4, r7, pc}
 8003fe8:	eb851eb8 	.word	0xeb851eb8
 8003fec:	3f9eb851 	.word	0x3f9eb851
 8003ff0:	54442d18 	.word	0x54442d18
 8003ff4:	400921fb 	.word	0x400921fb
 8003ff8:	20001823 	.word	0x20001823
 8003ffc:	20001948 	.word	0x20001948
 8004000:	20000221 	.word	0x20000221
 8004004:	20001914 	.word	0x20001914
 8004008:	20001910 	.word	0x20001910
 800400c:	fffffa88 	.word	0xfffffa88
 8004010:	ffffd26d 	.word	0xffffd26d
 8004014:	20001824 	.word	0x20001824
 8004018:	40240000 	.word	0x40240000
 800401c:	20001844 	.word	0x20001844
 8004020:	200018f4 	.word	0x200018f4
 8004024:	200018ec 	.word	0x200018ec
 8004028:	2000185c 	.word	0x2000185c
 800402c:	40668000 	.word	0x40668000
 8004030:	40768000 	.word	0x40768000
 8004034:	40590000 	.word	0x40590000
 8004038:	2000191c 	.word	0x2000191c
 800403c:	20001900 	.word	0x20001900
 8004040:	200018f8 	.word	0x200018f8
 8004044:	200018a4 	.word	0x200018a4

08004048 <move_finished>:

uint8_t move_finished(uint32_t tolerance) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	if (abs(getLocalPosition() - setpoint_y) < tolerance && abs(MBvariables.x_actual_position - setpoint_x) < tolerance) {
 8004050:	f7fe fa4a 	bl	80024e8 <getLocalPosition>
 8004054:	4602      	mov	r2, r0
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <move_finished+0x4c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	bfb8      	it	lt
 8004060:	425b      	neglt	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4293      	cmp	r3, r2
 8004068:	d90f      	bls.n	800408a <move_finished+0x42>
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <move_finished+0x50>)
 800406c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004070:	461a      	mov	r2, r3
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <move_finished+0x54>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfb8      	it	lt
 800407c:	425b      	neglt	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <move_finished+0x42>
		return 1;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <move_finished+0x44>
	}
	return 0;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20001910 	.word	0x20001910
 8004098:	2000191c 	.word	0x2000191c
 800409c:	20001914 	.word	0x20001914

080040a0 <preset_data_y_only>:

void preset_data_y_only() {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 9; i++) {
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	e043      	b.n	8004134 <preset_data_y_only+0x94>
		pick[i].y = 38.0 + 38.0 * i;
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fc fa41 	bl	8000534 <__aeabi_i2d>
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <preset_data_y_only+0xa4>)
 80040b8:	f7fc faa6 	bl	8000608 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4610      	mov	r0, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <preset_data_y_only+0xa4>)
 80040ca:	f7fc f8e7 	bl	800029c <__adddf3>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f7fc fd8f 	bl	8000bf8 <__aeabi_d2f>
 80040da:	4602      	mov	r2, r0
 80040dc:	491a      	ldr	r1, [pc, #104]	; (8004148 <preset_data_y_only+0xa8>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	440b      	add	r3, r1
 80040e4:	3304      	adds	r3, #4
 80040e6:	601a      	str	r2, [r3, #0]
		place[i].y = -(38.0 + 38.0 * i);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fc fa23 	bl	8000534 <__aeabi_i2d>
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <preset_data_y_only+0xa4>)
 80040f4:	f7fc fa88 	bl	8000608 <__aeabi_dmul>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <preset_data_y_only+0xa4>)
 8004106:	f7fc f8c9 	bl	800029c <__adddf3>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	f7fc fd71 	bl	8000bf8 <__aeabi_d2f>
 8004116:	4603      	mov	r3, r0
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef1 7a67 	vneg.f32	s15, s15
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <preset_data_y_only+0xac>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	3304      	adds	r3, #4
 800412a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3301      	adds	r3, #1
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b08      	cmp	r3, #8
 8004138:	ddb8      	ble.n	80040ac <preset_data_y_only+0xc>
	}
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40430000 	.word	0x40430000
 8004148:	2000185c 	.word	0x2000185c
 800414c:	200018a4 	.word	0x200018a4

08004150 <preset_data_xy>:

void preset_data_xy() {
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	corners[0].x = 79;
 8004154:	4b64      	ldr	r3, [pc, #400]	; (80042e8 <preset_data_xy+0x198>)
 8004156:	4a65      	ldr	r2, [pc, #404]	; (80042ec <preset_data_xy+0x19c>)
 8004158:	601a      	str	r2, [r3, #0]
	corners[0].y = -297.9;
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <preset_data_xy+0x198>)
 800415c:	4a64      	ldr	r2, [pc, #400]	; (80042f0 <preset_data_xy+0x1a0>)
 800415e:	605a      	str	r2, [r3, #4]
	corners[1].x = 30;
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <preset_data_xy+0x198>)
 8004162:	4a64      	ldr	r2, [pc, #400]	; (80042f4 <preset_data_xy+0x1a4>)
 8004164:	609a      	str	r2, [r3, #8]
	corners[1].y = -278.4;
 8004166:	4b60      	ldr	r3, [pc, #384]	; (80042e8 <preset_data_xy+0x198>)
 8004168:	4a63      	ldr	r2, [pc, #396]	; (80042f8 <preset_data_xy+0x1a8>)
 800416a:	60da      	str	r2, [r3, #12]
	corners[2].x = 103;
 800416c:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <preset_data_xy+0x198>)
 800416e:	4a63      	ldr	r2, [pc, #396]	; (80042fc <preset_data_xy+0x1ac>)
 8004170:	611a      	str	r2, [r3, #16]
	corners[2].y = -242.7;
 8004172:	4b5d      	ldr	r3, [pc, #372]	; (80042e8 <preset_data_xy+0x198>)
 8004174:	4a62      	ldr	r2, [pc, #392]	; (8004300 <preset_data_xy+0x1b0>)
 8004176:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin_pick, &angle_pick);
 8004178:	4b62      	ldr	r3, [pc, #392]	; (8004304 <preset_data_xy+0x1b4>)
 800417a:	4a63      	ldr	r2, [pc, #396]	; (8004308 <preset_data_xy+0x1b8>)
 800417c:	4963      	ldr	r1, [pc, #396]	; (800430c <preset_data_xy+0x1bc>)
 800417e:	485a      	ldr	r0, [pc, #360]	; (80042e8 <preset_data_xy+0x198>)
 8004180:	f7fe f9d2 	bl	8002528 <localize>
	MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8004184:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <preset_data_xy+0x1b4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f9e5 	bl	8000558 <__aeabi_f2d>
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b5f      	ldr	r3, [pc, #380]	; (8004310 <preset_data_xy+0x1c0>)
 8004194:	f7fc fa38 	bl	8000608 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	a34f      	add	r3, pc, #316	; (adr r3, 80042e0 <preset_data_xy+0x190>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc fb59 	bl	800085c <__aeabi_ddiv>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	f04f 0000 	mov.w	r0, #0
 80041b2:	4958      	ldr	r1, [pc, #352]	; (8004314 <preset_data_xy+0x1c4>)
 80041b4:	f7fc f870 	bl	8000298 <__aeabi_dsub>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b54      	ldr	r3, [pc, #336]	; (8004318 <preset_data_xy+0x1c8>)
 80041c6:	f7fc fa1f 	bl	8000608 <__aeabi_dmul>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7fc fcc9 	bl	8000b68 <__aeabi_d2iz>
 80041d6:	4603      	mov	r3, r0
 80041d8:	b21a      	sxth	r2, r3
 80041da:	4b50      	ldr	r3, [pc, #320]	; (800431c <preset_data_xy+0x1cc>)
 80041dc:	82da      	strh	r2, [r3, #22]
	MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <preset_data_xy+0x1b8>)
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041f0:	ee17 3a90 	vmov	r3, s15
 80041f4:	b21a      	sxth	r2, r3
 80041f6:	4b49      	ldr	r3, [pc, #292]	; (800431c <preset_data_xy+0x1cc>)
 80041f8:	825a      	strh	r2, [r3, #18]
	MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <preset_data_xy+0x1b8>)
 80041fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004200:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420c:	ee17 3a90 	vmov	r3, s15
 8004210:	b21a      	sxth	r2, r3
 8004212:	4b42      	ldr	r3, [pc, #264]	; (800431c <preset_data_xy+0x1cc>)
 8004214:	829a      	strh	r2, [r3, #20]

	corners[0].x = -90;
 8004216:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <preset_data_xy+0x198>)
 8004218:	4a41      	ldr	r2, [pc, #260]	; (8004320 <preset_data_xy+0x1d0>)
 800421a:	601a      	str	r2, [r3, #0]
	corners[0].y = 228.6;
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <preset_data_xy+0x198>)
 800421e:	4a41      	ldr	r2, [pc, #260]	; (8004324 <preset_data_xy+0x1d4>)
 8004220:	605a      	str	r2, [r3, #4]
	corners[1].x = -45;
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <preset_data_xy+0x198>)
 8004224:	4a40      	ldr	r2, [pc, #256]	; (8004328 <preset_data_xy+0x1d8>)
 8004226:	609a      	str	r2, [r3, #8]
	corners[1].y = 247.2;
 8004228:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <preset_data_xy+0x198>)
 800422a:	4a40      	ldr	r2, [pc, #256]	; (800432c <preset_data_xy+0x1dc>)
 800422c:	60da      	str	r2, [r3, #12]
	corners[2].x = -69;
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <preset_data_xy+0x198>)
 8004230:	4a3f      	ldr	r2, [pc, #252]	; (8004330 <preset_data_xy+0x1e0>)
 8004232:	611a      	str	r2, [r3, #16]
	corners[2].y = 302.4;
 8004234:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <preset_data_xy+0x198>)
 8004236:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <preset_data_xy+0x1e4>)
 8004238:	615a      	str	r2, [r3, #20]
	localize(corners, place, &origin_place, &angle_place);
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <preset_data_xy+0x1e8>)
 800423c:	4a3f      	ldr	r2, [pc, #252]	; (800433c <preset_data_xy+0x1ec>)
 800423e:	4940      	ldr	r1, [pc, #256]	; (8004340 <preset_data_xy+0x1f0>)
 8004240:	4829      	ldr	r0, [pc, #164]	; (80042e8 <preset_data_xy+0x198>)
 8004242:	f7fe f971 	bl	8002528 <localize>
	MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8004246:	4b3c      	ldr	r3, [pc, #240]	; (8004338 <preset_data_xy+0x1e8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc f984 	bl	8000558 <__aeabi_f2d>
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <preset_data_xy+0x1c0>)
 8004256:	f7fc f9d7 	bl	8000608 <__aeabi_dmul>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	a31f      	add	r3, pc, #124	; (adr r3, 80042e0 <preset_data_xy+0x190>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fc faf8 	bl	800085c <__aeabi_ddiv>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	f04f 0000 	mov.w	r0, #0
 8004274:	4927      	ldr	r1, [pc, #156]	; (8004314 <preset_data_xy+0x1c4>)
 8004276:	f7fc f80f 	bl	8000298 <__aeabi_dsub>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <preset_data_xy+0x1c8>)
 8004288:	f7fc f9be 	bl	8000608 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f7fc fc68 	bl	8000b68 <__aeabi_d2iz>
 8004298:	4603      	mov	r3, r0
 800429a:	b21a      	sxth	r2, r3
 800429c:	4b1f      	ldr	r3, [pc, #124]	; (800431c <preset_data_xy+0x1cc>)
 800429e:	839a      	strh	r2, [r3, #28]
	MBvariables.place_tray_origin_x = origin_place.x * 10;
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <preset_data_xy+0x1ec>)
 80042a2:	edd3 7a00 	vldr	s15, [r3]
 80042a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042b2:	ee17 3a90 	vmov	r3, s15
 80042b6:	b21a      	sxth	r2, r3
 80042b8:	4b18      	ldr	r3, [pc, #96]	; (800431c <preset_data_xy+0x1cc>)
 80042ba:	831a      	strh	r2, [r3, #24]
	MBvariables.place_tray_origin_y = origin_place.y * 10;
 80042bc:	4b1f      	ldr	r3, [pc, #124]	; (800433c <preset_data_xy+0x1ec>)
 80042be:	edd3 7a01 	vldr	s15, [r3, #4]
 80042c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ce:	ee17 3a90 	vmov	r3, s15
 80042d2:	b21a      	sxth	r2, r3
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <preset_data_xy+0x1cc>)
 80042d6:	835a      	strh	r2, [r3, #26]
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	f3af 8000 	nop.w
 80042e0:	54442d18 	.word	0x54442d18
 80042e4:	400921fb 	.word	0x400921fb
 80042e8:	20001844 	.word	0x20001844
 80042ec:	429e0000 	.word	0x429e0000
 80042f0:	c394f333 	.word	0xc394f333
 80042f4:	41f00000 	.word	0x41f00000
 80042f8:	c38b3333 	.word	0xc38b3333
 80042fc:	42ce0000 	.word	0x42ce0000
 8004300:	c372b333 	.word	0xc372b333
 8004304:	200018f4 	.word	0x200018f4
 8004308:	200018ec 	.word	0x200018ec
 800430c:	2000185c 	.word	0x2000185c
 8004310:	40668000 	.word	0x40668000
 8004314:	40768000 	.word	0x40768000
 8004318:	40590000 	.word	0x40590000
 800431c:	2000191c 	.word	0x2000191c
 8004320:	c2b40000 	.word	0xc2b40000
 8004324:	4364999a 	.word	0x4364999a
 8004328:	c2340000 	.word	0xc2340000
 800432c:	43773333 	.word	0x43773333
 8004330:	c28a0000 	.word	0xc28a0000
 8004334:	43973333 	.word	0x43973333
 8004338:	20001900 	.word	0x20001900
 800433c:	200018f8 	.word	0x200018f8
 8004340:	200018a4 	.word	0x200018a4

08004344 <emergency_handler>:

void emergency_handler() {
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
	static uint8_t prev_state;
	emergency = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8004348:	2104      	movs	r1, #4
 800434a:	4826      	ldr	r0, [pc, #152]	; (80043e4 <emergency_handler+0xa0>)
 800434c:	f003 f962 	bl	8007614 <HAL_GPIO_ReadPin>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <emergency_handler+0xa4>)
 8004360:	701a      	strb	r2, [r3, #0]

	// going into emergency
	if (!prev_state && emergency) {
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <emergency_handler+0xa8>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <emergency_handler+0x3c>
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <emergency_handler+0xa4>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <emergency_handler+0x3c>
		ENDEFF_EMERGENCY(&hi2c1);
 8004372:	481f      	ldr	r0, [pc, #124]	; (80043f0 <emergency_handler+0xac>)
 8004374:	f7fc fe48 	bl	8001008 <ENDEFF_EMERGENCY>
		speaker_play(50, 5);
 8004378:	2105      	movs	r1, #5
 800437a:	2032      	movs	r0, #50	; 0x32
 800437c:	f7ff f86e 	bl	800345c <speaker_play>
	}

	// leaving emergency
	if (prev_state && !emergency) {
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <emergency_handler+0xa8>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <emergency_handler+0x6a>
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <emergency_handler+0xa4>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10e      	bne.n	80043ae <emergency_handler+0x6a>
		ENDEFF_EMERGENCY_QUIT(&hi2c1);
 8004390:	4817      	ldr	r0, [pc, #92]	; (80043f0 <emergency_handler+0xac>)
 8004392:	f7fc fe61 	bl	8001058 <ENDEFF_EMERGENCY_QUIT>
		HAL_Delay(11);
 8004396:	200b      	movs	r0, #11
 8004398:	f002 f802 	bl	80063a0 <HAL_Delay>
		ENE_I2C_UPDATE(&MBvariables.end_effector_status, &hi2c1, 1);
 800439c:	2201      	movs	r2, #1
 800439e:	4914      	ldr	r1, [pc, #80]	; (80043f0 <emergency_handler+0xac>)
 80043a0:	4814      	ldr	r0, [pc, #80]	; (80043f4 <emergency_handler+0xb0>)
 80043a2:	f7fc ff71 	bl	8001288 <ENE_I2C_UPDATE>
		speaker_play(50, 8);
 80043a6:	2108      	movs	r1, #8
 80043a8:	2032      	movs	r0, #50	; 0x32
 80043aa:	f7ff f857 	bl	800345c <speaker_play>
	}

	if (emergency) {
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <emergency_handler+0xa4>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00f      	beq.n	80043d6 <emergency_handler+0x92>
		PID_enable = 0;
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <emergency_handler+0xb4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
		state = MSidle;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <emergency_handler+0xb8>)
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
		voltage = 0;
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <emergency_handler+0xbc>)
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
		home_status = 0;
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <emergency_handler+0xc0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
		MBvariables.base_system_status = 0;
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <emergency_handler+0xc4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	801a      	strh	r2, [r3, #0]
	}

	prev_state = emergency;
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <emergency_handler+0xa4>)
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <emergency_handler+0xa8>)
 80043dc:	701a      	strb	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40020800 	.word	0x40020800
 80043e8:	20001821 	.word	0x20001821
 80043ec:	20001974 	.word	0x20001974
 80043f0:	200004d8 	.word	0x200004d8
 80043f4:	20001942 	.word	0x20001942
 80043f8:	20000222 	.word	0x20000222
 80043fc:	20000221 	.word	0x20000221
 8004400:	2000182c 	.word	0x2000182c
 8004404:	20001822 	.word	0x20001822
 8004408:	2000191c 	.word	0x2000191c

0800440c <RGB_logic>:
uint32_t LEDtime = 0;
MachineState laststate = MSidle;

// USER CODE ======================================================================================

void RGB_logic(MachineState state, uint8_t point, uint8_t emergency) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
 8004416:	460b      	mov	r3, r1
 8004418:	71bb      	strb	r3, [r7, #6]
 800441a:	4613      	mov	r3, r2
 800441c:	717b      	strb	r3, [r7, #5]
	// Run on 200 Hz
	static uint32_t timestamp;
	if (HAL_GetTick() - timestamp < 5) {
 800441e:	f001 ffb3 	bl	8006388 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	4b4a      	ldr	r3, [pc, #296]	; (8004550 <RGB_logic+0x144>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b04      	cmp	r3, #4
 800442c:	f240 808c 	bls.w	8004548 <RGB_logic+0x13c>
		return;
	}
	timestamp = HAL_GetTick() + 5;
 8004430:	f001 ffaa 	bl	8006388 <HAL_GetTick>
 8004434:	4603      	mov	r3, r0
 8004436:	3305      	adds	r3, #5
 8004438:	4a45      	ldr	r2, [pc, #276]	; (8004550 <RGB_logic+0x144>)
 800443a:	6013      	str	r3, [r2, #0]

	// Main logic here
	if (emergency) {
 800443c:	797b      	ldrb	r3, [r7, #5]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00f      	beq.n	8004462 <RGB_logic+0x56>
		laststate = MSwait;
 8004442:	4b44      	ldr	r3, [pc, #272]	; (8004554 <RGB_logic+0x148>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
		RGB_BreathingPattern(500, 255, 0, 0);
 8004448:	2300      	movs	r3, #0
 800444a:	2200      	movs	r2, #0
 800444c:	21ff      	movs	r1, #255	; 0xff
 800444e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004452:	f000 fb11 	bl	8004a78 <RGB_BreathingPattern>
		Set_Brightness(45);
 8004456:	202d      	movs	r0, #45	; 0x2d
 8004458:	f7fe fe82 	bl	8003160 <Set_Brightness>
		WS2812_Send();
 800445c:	f7fe ff02 	bl	8003264 <WS2812_Send>
		return;
 8004460:	e073      	b.n	800454a <RGB_logic+0x13e>
	} else {
		switch (state) {
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b06      	cmp	r3, #6
 8004466:	d868      	bhi.n	800453a <RGB_logic+0x12e>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <RGB_logic+0x64>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	0800448d 	.word	0x0800448d
 8004474:	080044b1 	.word	0x080044b1
 8004478:	080044dd 	.word	0x080044dd
 800447c:	080044dd 	.word	0x080044dd
 8004480:	080044f3 	.word	0x080044f3
 8004484:	08004509 	.word	0x08004509
 8004488:	08004525 	.word	0x08004525
		case MSwait:
			if (laststate != MSwait) {
 800448c:	4b31      	ldr	r3, [pc, #196]	; (8004554 <RGB_logic+0x148>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <RGB_logic+0x8e>
				LEDtime = 0;
 8004494:	4b30      	ldr	r3, [pc, #192]	; (8004558 <RGB_logic+0x14c>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
			}
			RGB_BreathingPattern(500, 0, 255, 0);
 800449a:	2300      	movs	r3, #0
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	2100      	movs	r1, #0
 80044a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044a4:	f000 fae8 	bl	8004a78 <RGB_BreathingPattern>
			laststate = MSwait;
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <RGB_logic+0x148>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
			break;
 80044ae:	e045      	b.n	800453c <RGB_logic+0x130>
		case MSidle:
			if (laststate != MSidle) {
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <RGB_logic+0x148>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d002      	beq.n	80044be <RGB_logic+0xb2>
				LEDtime = 0;
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <RGB_logic+0x14c>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
			}
			RGB_Rainbow(!MBvariables.heartbeat);
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <RGB_logic+0x150>)
 80044c0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f85e 	bl	8004590 <RGB_Rainbow>
			laststate = MSidle;
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <RGB_logic+0x148>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
			break;
 80044da:	e02f      	b.n	800453c <RGB_logic+0x130>
		case MSpick:
		case MSplace:
			RGB_BreathingPattern(500, 255, 255, 255);
 80044dc:	23ff      	movs	r3, #255	; 0xff
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	21ff      	movs	r1, #255	; 0xff
 80044e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044e6:	f000 fac7 	bl	8004a78 <RGB_BreathingPattern>
			laststate = MSpick;
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <RGB_logic+0x148>)
 80044ec:	2202      	movs	r2, #2
 80044ee:	701a      	strb	r2, [r3, #0]
			break;
 80044f0:	e024      	b.n	800453c <RGB_logic+0x130>
		case MShome:
			RGB_BreathingPattern(500, 0, 0, 255);
 80044f2:	23ff      	movs	r3, #255	; 0xff
 80044f4:	2200      	movs	r2, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044fc:	f000 fabc 	bl	8004a78 <RGB_BreathingPattern>
			laststate = MShome;
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <RGB_logic+0x148>)
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]
			break;
 8004506:	e019      	b.n	800453c <RGB_logic+0x130>
		case MStray:
			if (laststate != MStray) {
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <RGB_logic+0x148>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d001      	beq.n	8004514 <RGB_logic+0x108>
				RGB_off();
 8004510:	f000 f826 	bl	8004560 <RGB_off>
			}
			RGB_TrayProgress(point);
 8004514:	79bb      	ldrb	r3, [r7, #6]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fb96 	bl	8004c48 <RGB_TrayProgress>
			laststate = MStray;
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <RGB_logic+0x148>)
 800451e:	2205      	movs	r2, #5
 8004520:	701a      	strb	r2, [r3, #0]
			break;
 8004522:	e00b      	b.n	800453c <RGB_logic+0x130>
		case MSpoint:
			laststate = MSpoint;
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <RGB_logic+0x148>)
 8004526:	2206      	movs	r2, #6
 8004528:	701a      	strb	r2, [r3, #0]
			RGB_BreathingPattern(500, 255, 165, 0);
 800452a:	2300      	movs	r3, #0
 800452c:	22a5      	movs	r2, #165	; 0xa5
 800452e:	21ff      	movs	r1, #255	; 0xff
 8004530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004534:	f000 faa0 	bl	8004a78 <RGB_BreathingPattern>
			break;
 8004538:	e000      	b.n	800453c <RGB_logic+0x130>
		default:
			break;
 800453a:	bf00      	nop

//	for (int i = 16; i < 24; i++) {
//		Set_LED(i, 0, 0, 0);
//	}

	Set_Brightness(45);
 800453c:	202d      	movs	r0, #45	; 0x2d
 800453e:	f7fe fe0f 	bl	8003160 <Set_Brightness>
	WS2812_Send();
 8004542:	f7fe fe8f 	bl	8003264 <WS2812_Send>
 8004546:	e000      	b.n	800454a <RGB_logic+0x13e>
		return;
 8004548:	bf00      	nop
}
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20001978 	.word	0x20001978
 8004554:	20000223 	.word	0x20000223
 8004558:	20001904 	.word	0x20001904
 800455c:	2000191c 	.word	0x2000191c

08004560 <RGB_off>:

void RGB_off() {
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; i++) {
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e008      	b.n	800457e <RGB_off+0x1e>
		Set_LED(i, 0, 0, 0);
 800456c:	2300      	movs	r3, #0
 800456e:	2200      	movs	r2, #0
 8004570:	2100      	movs	r1, #0
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fe fdc4 	bl	8003100 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b3b      	cmp	r3, #59	; 0x3b
 8004582:	ddf3      	ble.n	800456c <RGB_off+0xc>
	}
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <RGB_Rainbow>:

void RGB_Rainbow(uint8_t dobreathing) {
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b090      	sub	sp, #64	; 0x40
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
	static uint32_t startTime = 0;
	static const uint32_t transitionDuration = 5000; // Transition duration in milliseconds

	if (HAL_GetTick() - startTime >= transitionDuration) {
 800459a:	f001 fef5 	bl	8006388 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	4bc1      	ldr	r3, [pc, #772]	; (80048a8 <RGB_Rainbow+0x318>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	4bc1      	ldr	r3, [pc, #772]	; (80048ac <RGB_Rainbow+0x31c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d304      	bcc.n	80045b8 <RGB_Rainbow+0x28>
		startTime = HAL_GetTick();
 80045ae:	f001 feeb 	bl	8006388 <HAL_GetTick>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4abc      	ldr	r2, [pc, #752]	; (80048a8 <RGB_Rainbow+0x318>)
 80045b6:	6013      	str	r3, [r2, #0]
	}

	// Calculate time elapsed in the current transition
	uint32_t elapsed = HAL_GetTick() - startTime;
 80045b8:	f001 fee6 	bl	8006388 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	4bba      	ldr	r3, [pc, #744]	; (80048a8 <RGB_Rainbow+0x318>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate the normalized progress (0.0 to 1.0) within the transition
	float progress = (float) elapsed / transitionDuration;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d0:	4bb6      	ldr	r3, [pc, #728]	; (80048ac <RGB_Rainbow+0x31c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e0:	edc7 7a08 	vstr	s15, [r7, #32]

	// Calculate the hue angle based on the progress
	float hueAngle = 360.0f * progress;
 80045e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80045e8:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80048b0 <RGB_Rainbow+0x320>
 80045ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f0:	edc7 7a07 	vstr	s15, [r7, #28]

	// Set LED colors based on the hue angle
	for (int i = 0; i < MAX_LED; i++) {
 80045f4:	2300      	movs	r3, #0
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f8:	e1f2      	b.n	80049e0 <RGB_Rainbow+0x450>
		// Calculate the hue value for the current LED
		float ledHue = hueAngle + (i * (360.0f / MAX_LED));
 80045fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004604:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800460c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004614:	edc7 7a06 	vstr	s15, [r7, #24]

		// Convert hue to RGB using HSV color model
		float huePrime = fmodf(ledHue / 60.0f, 6.0f);
 8004618:	edd7 7a06 	vldr	s15, [r7, #24]
 800461c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80048b4 <RGB_Rainbow+0x324>
 8004620:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004624:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004628:	eeb0 0a47 	vmov.f32	s0, s14
 800462c:	f00c fbd2 	bl	8010dd4 <fmodf>
 8004630:	ed87 0a05 	vstr	s0, [r7, #20]
		float chroma = 1.0f;
 8004634:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004638:	613b      	str	r3, [r7, #16]
		float x = chroma * (1.0f - fabsf(fmodf(huePrime, 2.0f) - 1.0f));
 800463a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800463e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004642:	f00c fbc7 	bl	8010dd4 <fmodf>
 8004646:	eef0 7a40 	vmov.f32	s15, s0
 800464a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800464e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004652:	eef0 7ae7 	vabs.f32	s15, s15
 8004656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800465a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a03 	vstr	s15, [r7, #12]

		float red, green, blue;

		if (huePrime >= 0.0f && huePrime < 1.0f) {
 800466a:	edd7 7a05 	vldr	s15, [r7, #20]
 800466e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	db10      	blt.n	800469a <RGB_Rainbow+0x10a>
 8004678:	edd7 7a05 	vldr	s15, [r7, #20]
 800467c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	d507      	bpl.n	800469a <RGB_Rainbow+0x10a>
			red = chroma;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
 8004698:	e06e      	b.n	8004778 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 1.0f && huePrime < 2.0f) {
 800469a:	edd7 7a05 	vldr	s15, [r7, #20]
 800469e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	db10      	blt.n	80046ce <RGB_Rainbow+0x13e>
 80046ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80046b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80046b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	d507      	bpl.n	80046ce <RGB_Rainbow+0x13e>
			red = x;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
 80046cc:	e054      	b.n	8004778 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 2.0f && huePrime < 3.0f) {
 80046ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80046d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80046d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	db10      	blt.n	8004702 <RGB_Rainbow+0x172>
 80046e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80046e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80046e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	d507      	bpl.n	8004702 <RGB_Rainbow+0x172>
			red = 0.0f;
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004700:	e03a      	b.n	8004778 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 3.0f && huePrime < 4.0f) {
 8004702:	edd7 7a05 	vldr	s15, [r7, #20]
 8004706:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800470a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	db10      	blt.n	8004736 <RGB_Rainbow+0x1a6>
 8004714:	edd7 7a05 	vldr	s15, [r7, #20]
 8004718:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800471c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004724:	d507      	bpl.n	8004736 <RGB_Rainbow+0x1a6>
			red = 0.0f;
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
 8004734:	e020      	b.n	8004778 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 4.0f && huePrime < 5.0f) {
 8004736:	edd7 7a05 	vldr	s15, [r7, #20]
 800473a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	db10      	blt.n	800476a <RGB_Rainbow+0x1da>
 8004748:	edd7 7a05 	vldr	s15, [r7, #20]
 800474c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	d507      	bpl.n	800476a <RGB_Rainbow+0x1da>
			red = x;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
 8004768:	e006      	b.n	8004778 <RGB_Rainbow+0x1e8>
		} else {
			red = chroma;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// slow fade in
		if (LEDtime == 0) {
 8004778:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <RGB_Rainbow+0x328>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <RGB_Rainbow+0x1fa>
			LEDtime = HAL_GetTick();
 8004780:	f001 fe02 	bl	8006388 <HAL_GetTick>
 8004784:	4603      	mov	r3, r0
 8004786:	4a4c      	ldr	r2, [pc, #304]	; (80048b8 <RGB_Rainbow+0x328>)
 8004788:	6013      	str	r3, [r2, #0]
		}

		float intensity;
		if (HAL_GetTick() - LEDtime < 4000) {
 800478a:	f001 fdfd 	bl	8006388 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <RGB_Rainbow+0x328>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800479a:	d216      	bcs.n	80047ca <RGB_Rainbow+0x23a>
			intensity = (HAL_GetTick() - LEDtime) / 4000.0;
 800479c:	f001 fdf4 	bl	8006388 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b45      	ldr	r3, [pc, #276]	; (80048b8 <RGB_Rainbow+0x328>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fb feb3 	bl	8000514 <__aeabi_ui2d>
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	4b42      	ldr	r3, [pc, #264]	; (80048bc <RGB_Rainbow+0x32c>)
 80047b4:	f7fc f852 	bl	800085c <__aeabi_ddiv>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	f7fc fa1a 	bl	8000bf8 <__aeabi_d2f>
 80047c4:	4603      	mov	r3, r0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	e002      	b.n	80047d0 <RGB_Rainbow+0x240>
		} else {
			intensity = 1;
 80047ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		intensity = sqrt(intensity);
 80047d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047d2:	f7fb fec1 	bl	8000558 <__aeabi_f2d>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	ec43 2b10 	vmov	d0, r2, r3
 80047de:	f00c facd 	bl	8010d7c <sqrt>
 80047e2:	ec53 2b10 	vmov	r2, r3, d0
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7fc fa05 	bl	8000bf8 <__aeabi_d2f>
 80047ee:	4603      	mov	r3, r0
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		// breathing pattern
		float intensity2;
		if (dobreathing) {
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d069      	beq.n	80048cc <RGB_Rainbow+0x33c>
			intensity2 = 0.1 + 0.9 * (0.5 * (1.0 + sinf((2.0 * PI * elapsed) / 2000)));
 80047f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047fa:	f7fb fe8b 	bl	8000514 <__aeabi_ui2d>
 80047fe:	a324      	add	r3, pc, #144	; (adr r3, 8004890 <RGB_Rainbow+0x300>)
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f7fb ff00 	bl	8000608 <__aeabi_dmul>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <RGB_Rainbow+0x330>)
 8004816:	f7fc f821 	bl	800085c <__aeabi_ddiv>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	f7fc f9e9 	bl	8000bf8 <__aeabi_d2f>
 8004826:	4603      	mov	r3, r0
 8004828:	ee00 3a10 	vmov	s0, r3
 800482c:	f00c fa60 	bl	8010cf0 <sinf>
 8004830:	ee10 3a10 	vmov	r3, s0
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fe8f 	bl	8000558 <__aeabi_f2d>
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <RGB_Rainbow+0x334>)
 8004840:	f7fb fd2c 	bl	800029c <__adddf3>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <RGB_Rainbow+0x338>)
 8004852:	f7fb fed9 	bl	8000608 <__aeabi_dmul>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	a30e      	add	r3, pc, #56	; (adr r3, 8004898 <RGB_Rainbow+0x308>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fed0 	bl	8000608 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	a30b      	add	r3, pc, #44	; (adr r3, 80048a0 <RGB_Rainbow+0x310>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fd11 	bl	800029c <__adddf3>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	f7fc f9b9 	bl	8000bf8 <__aeabi_d2f>
 8004886:	4603      	mov	r3, r0
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	e022      	b.n	80048d2 <RGB_Rainbow+0x342>
 800488c:	f3af 8000 	nop.w
 8004890:	60000000 	.word	0x60000000
 8004894:	401921fb 	.word	0x401921fb
 8004898:	cccccccd 	.word	0xcccccccd
 800489c:	3feccccc 	.word	0x3feccccc
 80048a0:	9999999a 	.word	0x9999999a
 80048a4:	3fb99999 	.word	0x3fb99999
 80048a8:	2000197c 	.word	0x2000197c
 80048ac:	08012ec8 	.word	0x08012ec8
 80048b0:	43b40000 	.word	0x43b40000
 80048b4:	42700000 	.word	0x42700000
 80048b8:	20001904 	.word	0x20001904
 80048bc:	40af4000 	.word	0x40af4000
 80048c0:	409f4000 	.word	0x409f4000
 80048c4:	3ff00000 	.word	0x3ff00000
 80048c8:	3fe00000 	.word	0x3fe00000
		} else {
			intensity2 = 1.0;
 80048cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Scale RGB values to 0-255 range
		uint8_t r = (uint8_t) (red * 255.0 * intensity * intensity2);
 80048d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048d4:	f7fb fe40 	bl	8000558 <__aeabi_f2d>
 80048d8:	a347      	add	r3, pc, #284	; (adr r3, 80049f8 <RGB_Rainbow+0x468>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f7fb fe93 	bl	8000608 <__aeabi_dmul>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4614      	mov	r4, r2
 80048e8:	461d      	mov	r5, r3
 80048ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048ec:	f7fb fe34 	bl	8000558 <__aeabi_f2d>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fb fe86 	bl	8000608 <__aeabi_dmul>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4614      	mov	r4, r2
 8004902:	461d      	mov	r5, r3
 8004904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004906:	f7fb fe27 	bl	8000558 <__aeabi_f2d>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fe79 	bl	8000608 <__aeabi_dmul>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4610      	mov	r0, r2
 800491c:	4619      	mov	r1, r3
 800491e:	f7fc f94b 	bl	8000bb8 <__aeabi_d2uiz>
 8004922:	4603      	mov	r3, r0
 8004924:	72fb      	strb	r3, [r7, #11]
		uint8_t g = (uint8_t) (green * 255.0 * intensity * intensity2);
 8004926:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004928:	f7fb fe16 	bl	8000558 <__aeabi_f2d>
 800492c:	a332      	add	r3, pc, #200	; (adr r3, 80049f8 <RGB_Rainbow+0x468>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fe69 	bl	8000608 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4614      	mov	r4, r2
 800493c:	461d      	mov	r5, r3
 800493e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004940:	f7fb fe0a 	bl	8000558 <__aeabi_f2d>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7fb fe5c 	bl	8000608 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4614      	mov	r4, r2
 8004956:	461d      	mov	r5, r3
 8004958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495a:	f7fb fdfd 	bl	8000558 <__aeabi_f2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fb fe4f 	bl	8000608 <__aeabi_dmul>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	f7fc f921 	bl	8000bb8 <__aeabi_d2uiz>
 8004976:	4603      	mov	r3, r0
 8004978:	72bb      	strb	r3, [r7, #10]
		uint8_t b = (uint8_t) (blue * 255.0 * intensity * intensity2);
 800497a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497c:	f7fb fdec 	bl	8000558 <__aeabi_f2d>
 8004980:	a31d      	add	r3, pc, #116	; (adr r3, 80049f8 <RGB_Rainbow+0x468>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fe3f 	bl	8000608 <__aeabi_dmul>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4614      	mov	r4, r2
 8004990:	461d      	mov	r5, r3
 8004992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004994:	f7fb fde0 	bl	8000558 <__aeabi_f2d>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fe32 	bl	8000608 <__aeabi_dmul>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ae:	f7fb fdd3 	bl	8000558 <__aeabi_f2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb fe25 	bl	8000608 <__aeabi_dmul>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7fc f8f7 	bl	8000bb8 <__aeabi_d2uiz>
 80049ca:	4603      	mov	r3, r0
 80049cc:	727b      	strb	r3, [r7, #9]

		// Set LED color
		Set_LED(i, r, g, b);
 80049ce:	7af9      	ldrb	r1, [r7, #11]
 80049d0:	7aba      	ldrb	r2, [r7, #10]
 80049d2:	7a7b      	ldrb	r3, [r7, #9]
 80049d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049d6:	f7fe fb93 	bl	8003100 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 80049da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049dc:	3301      	adds	r3, #1
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e2:	2b3b      	cmp	r3, #59	; 0x3b
 80049e4:	f77f ae09 	ble.w	80045fa <RGB_Rainbow+0x6a>
	}
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3740      	adds	r7, #64	; 0x40
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bdb0      	pop	{r4, r5, r7, pc}
 80049f2:	bf00      	nop
 80049f4:	f3af 8000 	nop.w
 80049f8:	00000000 	.word	0x00000000
 80049fc:	406fe000 	.word	0x406fe000

08004a00 <RGB_Bootup>:

void RGB_Bootup(uint8_t part) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
	if (part == 1) {
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d117      	bne.n	8004a40 <RGB_Bootup+0x40>
		for (int i = 0; i < 30; i++) {
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e010      	b.n	8004a38 <RGB_Bootup+0x38>
			Set_LED(i, 255, 0, 0);
 8004a16:	2300      	movs	r3, #0
 8004a18:	2200      	movs	r2, #0
 8004a1a:	21ff      	movs	r1, #255	; 0xff
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7fe fb6f 	bl	8003100 <Set_LED>
			HAL_Delay(10);
 8004a22:	200a      	movs	r0, #10
 8004a24:	f001 fcbc 	bl	80063a0 <HAL_Delay>
			Set_Brightness(45);
 8004a28:	202d      	movs	r0, #45	; 0x2d
 8004a2a:	f7fe fb99 	bl	8003160 <Set_Brightness>
			WS2812_Send();
 8004a2e:	f7fe fc19 	bl	8003264 <WS2812_Send>
		for (int i = 0; i < 30; i++) {
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b1d      	cmp	r3, #29
 8004a3c:	ddeb      	ble.n	8004a16 <RGB_Bootup+0x16>
			HAL_Delay(10);
			Set_Brightness(45);
			WS2812_Send();
		}
	}
}
 8004a3e:	e016      	b.n	8004a6e <RGB_Bootup+0x6e>
		for (int i = 30; i < 60; i++) {
 8004a40:	231e      	movs	r3, #30
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e010      	b.n	8004a68 <RGB_Bootup+0x68>
			Set_LED(i, 255, 0, 0);
 8004a46:	2300      	movs	r3, #0
 8004a48:	2200      	movs	r2, #0
 8004a4a:	21ff      	movs	r1, #255	; 0xff
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f7fe fb57 	bl	8003100 <Set_LED>
			HAL_Delay(10);
 8004a52:	200a      	movs	r0, #10
 8004a54:	f001 fca4 	bl	80063a0 <HAL_Delay>
			Set_Brightness(45);
 8004a58:	202d      	movs	r0, #45	; 0x2d
 8004a5a:	f7fe fb81 	bl	8003160 <Set_Brightness>
			WS2812_Send();
 8004a5e:	f7fe fc01 	bl	8003264 <WS2812_Send>
		for (int i = 30; i < 60; i++) {
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b3b      	cmp	r3, #59	; 0x3b
 8004a6c:	ddeb      	ble.n	8004a46 <RGB_Bootup+0x46>
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <RGB_BreathingPattern>:

void RGB_BreathingPattern(uint32_t period, uint8_t R, uint8_t G, uint8_t B) {
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	70fb      	strb	r3, [r7, #3]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70bb      	strb	r3, [r7, #2]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	707b      	strb	r3, [r7, #1]
	if (LEDtime == 0) {
 8004a92:	4b69      	ldr	r3, [pc, #420]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <RGB_BreathingPattern+0x2c>
		LEDtime = HAL_GetTick();
 8004a9a:	f001 fc75 	bl	8006388 <HAL_GetTick>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4a65      	ldr	r2, [pc, #404]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004aa2:	6013      	str	r3, [r2, #0]
	}

	uint32_t elapsedTime = HAL_GetTick() - LEDtime;
 8004aa4:	f001 fc70 	bl	8006388 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	60fb      	str	r3, [r7, #12]
	float intensity;

	intensity = 0.5 * (1.0 + sinf((2.0 * PI * elapsedTime) / period));
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7fb fd2e 	bl	8000514 <__aeabi_ui2d>
 8004ab8:	a35d      	add	r3, pc, #372	; (adr r3, 8004c30 <RGB_BreathingPattern+0x1b8>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fda3 	bl	8000608 <__aeabi_dmul>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4614      	mov	r4, r2
 8004ac8:	461d      	mov	r5, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fb fd22 	bl	8000514 <__aeabi_ui2d>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	f7fb fec0 	bl	800085c <__aeabi_ddiv>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7fc f888 	bl	8000bf8 <__aeabi_d2f>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	ee00 3a10 	vmov	s0, r3
 8004aee:	f00c f8ff 	bl	8010cf0 <sinf>
 8004af2:	ee10 3a10 	vmov	r3, s0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb fd2e 	bl	8000558 <__aeabi_f2d>
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	4b4e      	ldr	r3, [pc, #312]	; (8004c3c <RGB_BreathingPattern+0x1c4>)
 8004b02:	f7fb fbcb 	bl	800029c <__adddf3>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <RGB_BreathingPattern+0x1c8>)
 8004b14:	f7fb fd78 	bl	8000608 <__aeabi_dmul>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f7fc f86a 	bl	8000bf8 <__aeabi_d2f>
 8004b24:	4603      	mov	r3, r0
 8004b26:	60bb      	str	r3, [r7, #8]

	// slow fade in
	if (LEDtime == 0) {
 8004b28:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <RGB_BreathingPattern+0xc2>
		LEDtime = HAL_GetTick();
 8004b30:	f001 fc2a 	bl	8006388 <HAL_GetTick>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4a40      	ldr	r2, [pc, #256]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004b38:	6013      	str	r3, [r2, #0]
	}

	float intensity2;
	if (HAL_GetTick() - LEDtime < 4000) {
 8004b3a:	f001 fc25 	bl	8006388 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004b4a:	d216      	bcs.n	8004b7a <RGB_BreathingPattern+0x102>
		intensity2 = (HAL_GetTick() - LEDtime) / 4000.0;
 8004b4c:	f001 fc1c 	bl	8006388 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <RGB_BreathingPattern+0x1c0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fb fcdb 	bl	8000514 <__aeabi_ui2d>
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	4b38      	ldr	r3, [pc, #224]	; (8004c44 <RGB_BreathingPattern+0x1cc>)
 8004b64:	f7fb fe7a 	bl	800085c <__aeabi_ddiv>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f7fc f842 	bl	8000bf8 <__aeabi_d2f>
 8004b74:	4603      	mov	r3, r0
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e002      	b.n	8004b80 <RGB_BreathingPattern+0x108>
	} else {
		intensity2 = 1;
 8004b7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b7e:	617b      	str	r3, [r7, #20]
	}

	intensity2 = sqrt(intensity2);
 8004b80:	6978      	ldr	r0, [r7, #20]
 8004b82:	f7fb fce9 	bl	8000558 <__aeabi_f2d>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	ec43 2b10 	vmov	d0, r2, r3
 8004b8e:	f00c f8f5 	bl	8010d7c <sqrt>
 8004b92:	ec53 2b10 	vmov	r2, r3, d0
 8004b96:	4610      	mov	r0, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	f7fc f82d 	bl	8000bf8 <__aeabi_d2f>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < MAX_LED; i++) {
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	e038      	b.n	8004c1a <RGB_BreathingPattern+0x1a2>
		Set_LED(i, R * intensity * intensity2, G * intensity * intensity2, B * intensity * intensity2);
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8004bc6:	78bb      	ldrb	r3, [r7, #2]
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be0:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c02:	ee17 3a90 	vmov	r3, s15
 8004c06:	ee16 2a10 	vmov	r2, s12
 8004c0a:	ee16 1a90 	vmov	r1, s13
 8004c0e:	6938      	ldr	r0, [r7, #16]
 8004c10:	f7fe fa76 	bl	8003100 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3301      	adds	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b3b      	cmp	r3, #59	; 0x3b
 8004c1e:	ddc3      	ble.n	8004ba8 <RGB_BreathingPattern+0x130>
	}
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w
 8004c30:	60000000 	.word	0x60000000
 8004c34:	401921fb 	.word	0x401921fb
 8004c38:	20001904 	.word	0x20001904
 8004c3c:	3ff00000 	.word	0x3ff00000
 8004c40:	3fe00000 	.word	0x3fe00000
 8004c44:	40af4000 	.word	0x40af4000

08004c48 <RGB_TrayProgress>:

void RGB_TrayProgress(uint8_t point) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
	float percentage = (point + 1.0) / 9.0;
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fc6d 	bl	8000534 <__aeabi_i2d>
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <RGB_TrayProgress+0x84>)
 8004c60:	f7fb fb1c 	bl	800029c <__adddf3>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <RGB_TrayProgress+0x88>)
 8004c72:	f7fb fdf3 	bl	800085c <__aeabi_ddiv>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f7fb ffbb 	bl	8000bf8 <__aeabi_d2f>
 8004c82:	4603      	mov	r3, r0
 8004c84:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e008      	b.n	8004c9e <RGB_TrayProgress+0x56>
		Set_LED(i, 0, 255, 0);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	22ff      	movs	r2, #255	; 0xff
 8004c90:	2100      	movs	r1, #0
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7fe fa34 	bl	8003100 <Set_LED>
	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68b8      	ldr	r0, [r7, #8]
 8004ca0:	f7fb fc5a 	bl	8000558 <__aeabi_f2d>
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <RGB_TrayProgress+0x8c>)
 8004caa:	f7fb fcad 	bl	8000608 <__aeabi_dmul>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb ff57 	bl	8000b68 <__aeabi_d2iz>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	dbe4      	blt.n	8004c8c <RGB_TrayProgress+0x44>
	}
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	3ff00000 	.word	0x3ff00000
 8004cd0:	40220000 	.word	0x40220000
 8004cd4:	404e0000 	.word	0x404e0000

08004cd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <main+0xb0>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 1000;
 8004ce2:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <main+0xb0>)
 8004ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ce8:	841a      	strh	r2, [r3, #32]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004cea:	f001 fae7 	bl	80062bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004cee:	f000 f859 	bl	8004da4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004cf2:	f7fd fa83 	bl	80021fc <MX_GPIO_Init>
	MX_DMA_Init();
 8004cf6:	f7fd fa43 	bl	8002180 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8004cfa:	f001 f999 	bl	8006030 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004cfe:	f7fd fb1d 	bl	800233c <MX_I2C1_Init>
	MX_TIM1_Init();
 8004d02:	f000 fa71 	bl	80051e8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8004d06:	f000 fb0f 	bl	8005328 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8004d0a:	f001 f967 	bl	8005fdc <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8004d0e:	f7fd f9a1 	bl	8002054 <MX_ADC1_Init>
	MX_TIM9_Init();
 8004d12:	f000 fbd3 	bl	80054bc <MX_TIM9_Init>
	MX_TIM11_Init();
 8004d16:	f000 fc2d 	bl	8005574 <MX_TIM11_Init>
	MX_TIM3_Init();
 8004d1a:	f000 fb59 	bl	80053d0 <MX_TIM3_Init>
	MX_TIM10_Init();
 8004d1e:	f000 fc07 	bl	8005530 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8004d22:	481a      	ldr	r0, [pc, #104]	; (8004d8c <main+0xb4>)
 8004d24:	f003 fde8 	bl	80088f8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4818      	ldr	r0, [pc, #96]	; (8004d8c <main+0xb4>)
 8004d2c:	f003 ff6c 	bl	8008c08 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8004d30:	2104      	movs	r1, #4
 8004d32:	4817      	ldr	r0, [pc, #92]	; (8004d90 <main+0xb8>)
 8004d34:	f004 fc10 	bl	8009558 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8004d38:	4816      	ldr	r0, [pc, #88]	; (8004d94 <main+0xbc>)
 8004d3a:	f003 fe37 	bl	80089ac <HAL_TIM_Base_Start_IT>

	// Timer 10 Timer Interrupt (9600Hz)
	HAL_TIM_Base_Start_IT(&htim10);
 8004d3e:	4816      	ldr	r0, [pc, #88]	; (8004d98 <main+0xc0>)
 8004d40:	f003 fe34 	bl	80089ac <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 8004d44:	f7fe f864 	bl	8002e10 <modbus_init>

	// Initialize UART1
	UARTInterruptConfig();
 8004d48:	f7fc fc08 	bl	800155c <UARTInterruptConfig>

	// Startup tasks
	RGB_Bootup(1);
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7ff fe57 	bl	8004a00 <RGB_Bootup>
	speaker_play(50, 1);
 8004d52:	2101      	movs	r1, #1
 8004d54:	2032      	movs	r0, #50	; 0x32
 8004d56:	f7fe fb81 	bl	800345c <speaker_play>
	RGB_Bootup(2);
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	f7ff fe50 	bl	8004a00 <RGB_Bootup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		modbus_heartbeat_handler(&MBvariables);
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <main+0xb0>)
 8004d62:	f7fe f871 	bl	8002e48 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 8004d66:	4808      	ldr	r0, [pc, #32]	; (8004d88 <main+0xb0>)
 8004d68:	f7fe f8b0 	bl	8002ecc <modbus_data_sync>
		QEIReadHome = getLocalPosition();
 8004d6c:	f7fd fbbc 	bl	80024e8 <getLocalPosition>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <main+0xc4>)
 8004d74:	6013      	str	r3, [r2, #0]
		QEIReadRaw = getRawPosition();
 8004d76:	f7fd fbc9 	bl	800250c <getRawPosition>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <main+0xc8>)
 8004d7e:	6013      	str	r3, [r2, #0]
		main_logic(&MBvariables);
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <main+0xb0>)
 8004d82:	f7fe fb9d 	bl	80034c0 <main_logic>
		modbus_heartbeat_handler(&MBvariables);
 8004d86:	e7eb      	b.n	8004d60 <main+0x88>
 8004d88:	2000191c 	.word	0x2000191c
 8004d8c:	20001984 	.word	0x20001984
 8004d90:	20001a38 	.word	0x20001a38
 8004d94:	20001ba0 	.word	0x20001ba0
 8004d98:	20001c54 	.word	0x20001c54
 8004d9c:	2000190c 	.word	0x2000190c
 8004da0:	20001908 	.word	0x20001908

08004da4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b094      	sub	sp, #80	; 0x50
 8004da8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004daa:	f107 0320 	add.w	r3, r7, #32
 8004dae:	2230      	movs	r2, #48	; 0x30
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f007 f8a8 	bl	800bf08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004db8:	f107 030c 	add.w	r3, r7, #12
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	60da      	str	r2, [r3, #12]
 8004dc6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <SystemClock_Config+0xc8>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <SystemClock_Config+0xc8>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <SystemClock_Config+0xc8>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004de4:	2300      	movs	r3, #0
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <SystemClock_Config+0xcc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <SystemClock_Config+0xcc>)
 8004dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <SystemClock_Config+0xcc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e00:	2302      	movs	r3, #2
 8004e02:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e04:	2301      	movs	r3, #1
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e08:	2310      	movs	r3, #16
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004e14:	2308      	movs	r3, #8
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004e18:	2364      	movs	r3, #100	; 0x64
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e20:	2304      	movs	r3, #4
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004e24:	f107 0320 	add.w	r3, r7, #32
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f003 f871 	bl	8007f10 <HAL_RCC_OscConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <SystemClock_Config+0x94>
		Error_Handler();
 8004e34:	f000 f84c 	bl	8004ed0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e38:	230f      	movs	r3, #15
 8004e3a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e48:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	2103      	movs	r1, #3
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 fad3 	bl	8008400 <HAL_RCC_ClockConfig>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <SystemClock_Config+0xc0>
		Error_Handler();
 8004e60:	f000 f836 	bl	8004ed0 <Error_Handler>
	}
}
 8004e64:	bf00      	nop
 8004e66:	3750      	adds	r7, #80	; 0x50
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40007000 	.word	0x40007000

08004e74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d102      	bne.n	8004e8a <HAL_TIM_PeriodElapsedCallback+0x16>
		interrupt_logic();
 8004e84:	f7fe fd96 	bl	80039b4 <interrupt_logic>
	} else if (htim == &htim10) {
		speaker_UART_bitbang();
	}
}
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_PeriodElapsedCallback+0x22>
	} else if (htim == &htim10) {
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PeriodElapsedCallback+0x22>
		speaker_UART_bitbang();
 8004e92:	f7fe fa8b 	bl	80033ac <speaker_UART_bitbang>
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20001ba0 	.word	0x20001ba0
 8004ea4:	20001c54 	.word	0x20001c54

08004ea8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <HAL_UART_RxCpltCallback+0x20>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d102      	bne.n	8004ebe <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received((int*) &receivedByte);
 8004eb8:	4804      	ldr	r0, [pc, #16]	; (8004ecc <HAL_UART_RxCpltCallback+0x24>)
 8004eba:	f7fc fbbf 	bl	800163c <Joystick_Received>
	}
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20001e60 	.word	0x20001e60
 8004ecc:	20001948 	.word	0x20001948

08004ed0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ed4:	b672      	cpsid	i
}
 8004ed6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004ed8:	e7fe      	b.n	8004ed8 <Error_Handler+0x8>
	...

08004edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_MspInit+0x4c>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <HAL_MspInit+0x4c>)
 8004eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <HAL_MspInit+0x4c>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_MspInit+0x4c>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <HAL_MspInit+0x4c>)
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_MspInit+0x4c>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f1a:	2007      	movs	r0, #7
 8004f1c:	f001 fda6 	bl	8006a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800

08004f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f30:	e7fe      	b.n	8004f30 <NMI_Handler+0x4>

08004f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f36:	e7fe      	b.n	8004f36 <HardFault_Handler+0x4>

08004f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f3c:	e7fe      	b.n	8004f3c <MemManage_Handler+0x4>

08004f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f42:	e7fe      	b.n	8004f42 <BusFault_Handler+0x4>

08004f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f48:	e7fe      	b.n	8004f48 <UsageFault_Handler+0x4>

08004f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f5c:	bf00      	nop
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f78:	f001 f9f2 	bl	8006360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f7c:	bf00      	nop
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <DMA1_Stream4_IRQHandler+0x10>)
 8004f86:	f001 ff4b 	bl	8006e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20001dbc 	.word	0x20001dbc

08004f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004f98:	4802      	ldr	r0, [pc, #8]	; (8004fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8004f9a:	f001 ff41 	bl	8006e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20001fa8 	.word	0x20001fa8

08004fa8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fac:	4803      	ldr	r0, [pc, #12]	; (8004fbc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004fae:	f004 fb61 	bl	8009674 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004fb2:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004fb4:	f004 fb5e 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004fb8:	bf00      	nop
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20001984 	.word	0x20001984
 8004fc0:	20001ba0 	.word	0x20001ba0

08004fc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fc8:	4803      	ldr	r0, [pc, #12]	; (8004fd8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004fca:	f004 fb53 	bl	8009674 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004fce:	4803      	ldr	r0, [pc, #12]	; (8004fdc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004fd0:	f004 fb50 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004fd4:	bf00      	nop
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20001984 	.word	0x20001984
 8004fdc:	20001c54 	.word	0x20001c54

08004fe0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fe4:	4803      	ldr	r0, [pc, #12]	; (8004ff4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004fe6:	f004 fb45 	bl	8009674 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004fea:	4803      	ldr	r0, [pc, #12]	; (8004ff8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004fec:	f004 fb42 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004ff0:	bf00      	nop
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20001984 	.word	0x20001984
 8004ff8:	20001d08 	.word	0x20001d08

08004ffc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <USART1_IRQHandler+0x10>)
 8005002:	f005 ff0d 	bl	800ae20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20001e60 	.word	0x20001e60

08005010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005014:	4802      	ldr	r0, [pc, #8]	; (8005020 <USART2_IRQHandler+0x10>)
 8005016:	f005 ff03 	bl	800ae20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20001ed4 	.word	0x20001ed4

08005024 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005028:	4802      	ldr	r0, [pc, #8]	; (8005034 <DMA2_Stream7_IRQHandler+0x10>)
 800502a:	f001 fef9 	bl	8006e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20001f48 	.word	0x20001f48

08005038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return 1;
 800503c:	2301      	movs	r3, #1
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_kill>:

int _kill(int pid, int sig)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005052:	f006 ff21 	bl	800be98 <__errno>
 8005056:	4603      	mov	r3, r0
 8005058:	2216      	movs	r2, #22
 800505a:	601a      	str	r2, [r3, #0]
  return -1;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <_exit>:

void _exit (int status)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005070:	f04f 31ff 	mov.w	r1, #4294967295
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ffe7 	bl	8005048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800507a:	e7fe      	b.n	800507a <_exit+0x12>

0800507c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e00a      	b.n	80050a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800508e:	f3af 8000 	nop.w
 8005092:	4601      	mov	r1, r0
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	60ba      	str	r2, [r7, #8]
 800509a:	b2ca      	uxtb	r2, r1
 800509c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	3301      	adds	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	dbf0      	blt.n	800508e <_read+0x12>
  }

  return len;
 80050ac:	687b      	ldr	r3, [r7, #4]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e009      	b.n	80050dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	60ba      	str	r2, [r7, #8]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3301      	adds	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	dbf1      	blt.n	80050c8 <_write+0x12>
  }
  return len;
 80050e4:	687b      	ldr	r3, [r7, #4]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_close>:

int _close(int file)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005116:	605a      	str	r2, [r3, #4]
  return 0;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <_isatty>:

int _isatty(int file)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800512e:	2301      	movs	r3, #1
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <_sbrk+0x5c>)
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <_sbrk+0x60>)
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <_sbrk+0x64>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <_sbrk+0x64>)
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <_sbrk+0x68>)
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <_sbrk+0x64>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d207      	bcs.n	8005198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005188:	f006 fe86 	bl	800be98 <__errno>
 800518c:	4603      	mov	r3, r0
 800518e:	220c      	movs	r2, #12
 8005190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	e009      	b.n	80051ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <_sbrk+0x64>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <_sbrk+0x64>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	4a05      	ldr	r2, [pc, #20]	; (80051bc <_sbrk+0x64>)
 80051a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20020000 	.word	0x20020000
 80051b8:	00000400 	.word	0x00000400
 80051bc:	20001980 	.word	0x20001980
 80051c0:	20002020 	.word	0x20002020

080051c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <SystemInit+0x20>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <SystemInit+0x20>)
 80051d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b096      	sub	sp, #88	; 0x58
 80051ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	605a      	str	r2, [r3, #4]
 8005210:	609a      	str	r2, [r3, #8]
 8005212:	60da      	str	r2, [r3, #12]
 8005214:	611a      	str	r2, [r3, #16]
 8005216:	615a      	str	r2, [r3, #20]
 8005218:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	2220      	movs	r2, #32
 800521e:	2100      	movs	r1, #0
 8005220:	4618      	mov	r0, r3
 8005222:	f006 fe71 	bl	800bf08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <MX_TIM1_Init+0x138>)
 8005228:	4a3e      	ldr	r2, [pc, #248]	; (8005324 <MX_TIM1_Init+0x13c>)
 800522a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800522c:	4b3c      	ldr	r3, [pc, #240]	; (8005320 <MX_TIM1_Init+0x138>)
 800522e:	2204      	movs	r2, #4
 8005230:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005232:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <MX_TIM1_Init+0x138>)
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <MX_TIM1_Init+0x138>)
 800523a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800523e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005240:	4b37      	ldr	r3, [pc, #220]	; (8005320 <MX_TIM1_Init+0x138>)
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005246:	4b36      	ldr	r3, [pc, #216]	; (8005320 <MX_TIM1_Init+0x138>)
 8005248:	2200      	movs	r2, #0
 800524a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800524c:	4b34      	ldr	r3, [pc, #208]	; (8005320 <MX_TIM1_Init+0x138>)
 800524e:	2200      	movs	r2, #0
 8005250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005252:	4833      	ldr	r0, [pc, #204]	; (8005320 <MX_TIM1_Init+0x138>)
 8005254:	f003 faf4 	bl	8008840 <HAL_TIM_Base_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800525e:	f7ff fe37 	bl	8004ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005268:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800526c:	4619      	mov	r1, r3
 800526e:	482c      	ldr	r0, [pc, #176]	; (8005320 <MX_TIM1_Init+0x138>)
 8005270:	f004 fc46 	bl	8009b00 <HAL_TIM_ConfigClockSource>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800527a:	f7ff fe29 	bl	8004ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800527e:	4828      	ldr	r0, [pc, #160]	; (8005320 <MX_TIM1_Init+0x138>)
 8005280:	f003 fc5c 	bl	8008b3c <HAL_TIM_PWM_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800528a:	f7ff fe21 	bl	8004ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800529a:	4619      	mov	r1, r3
 800529c:	4820      	ldr	r0, [pc, #128]	; (8005320 <MX_TIM1_Init+0x138>)
 800529e:	f005 fa8d 	bl	800a7bc <HAL_TIMEx_MasterConfigSynchronization>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80052a8:	f7ff fe12 	bl	8004ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052ac:	2360      	movs	r3, #96	; 0x60
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80052b8:	2300      	movs	r3, #0
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80052c4:	2300      	movs	r3, #0
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052cc:	2200      	movs	r2, #0
 80052ce:	4619      	mov	r1, r3
 80052d0:	4813      	ldr	r0, [pc, #76]	; (8005320 <MX_TIM1_Init+0x138>)
 80052d2:	f004 fb53 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80052dc:	f7ff fdf8 	bl	8004ed0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80052f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4807      	ldr	r0, [pc, #28]	; (8005320 <MX_TIM1_Init+0x138>)
 8005304:	f005 fac8 	bl	800a898 <HAL_TIMEx_ConfigBreakDeadTime>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800530e:	f7ff fddf 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005312:	4803      	ldr	r0, [pc, #12]	; (8005320 <MX_TIM1_Init+0x138>)
 8005314:	f000 faaa 	bl	800586c <HAL_TIM_MspPostInit>

}
 8005318:	bf00      	nop
 800531a:	3758      	adds	r7, #88	; 0x58
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20001984 	.word	0x20001984
 8005324:	40010000 	.word	0x40010000

08005328 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f006 fde6 	bl	800bf08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005344:	4b21      	ldr	r3, [pc, #132]	; (80053cc <MX_TIM2_Init+0xa4>)
 8005346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800534a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800534c:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <MX_TIM2_Init+0xa4>)
 800534e:	2200      	movs	r2, #0
 8005350:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <MX_TIM2_Init+0xa4>)
 8005354:	2200      	movs	r2, #0
 8005356:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005358:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <MX_TIM2_Init+0xa4>)
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <MX_TIM2_Init+0xa4>)
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005366:	4b19      	ldr	r3, [pc, #100]	; (80053cc <MX_TIM2_Init+0xa4>)
 8005368:	2200      	movs	r2, #0
 800536a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800536c:	2303      	movs	r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005374:	2301      	movs	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005380:	2300      	movs	r3, #0
 8005382:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005384:	2301      	movs	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005388:	2300      	movs	r3, #0
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	4619      	mov	r1, r3
 8005396:	480d      	ldr	r0, [pc, #52]	; (80053cc <MX_TIM2_Init+0xa4>)
 8005398:	f004 f82a 	bl	80093f0 <HAL_TIM_Encoder_Init>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80053a2:	f7ff fd95 	bl	8004ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4806      	ldr	r0, [pc, #24]	; (80053cc <MX_TIM2_Init+0xa4>)
 80053b4:	f005 fa02 	bl	800a7bc <HAL_TIMEx_MasterConfigSynchronization>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80053be:	f7ff fd87 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80053c2:	bf00      	nop
 80053c4:	3730      	adds	r7, #48	; 0x30
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20001a38 	.word	0x20001a38

080053d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e4:	f107 0320 	add.w	r3, r7, #32
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	615a      	str	r2, [r3, #20]
 80053fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005402:	4a2d      	ldr	r2, [pc, #180]	; (80054b8 <MX_TIM3_Init+0xe8>)
 8005404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005408:	2200      	movs	r2, #0
 800540a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800540c:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <MX_TIM3_Init+0xe4>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 8005412:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005414:	227c      	movs	r2, #124	; 0x7c
 8005416:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <MX_TIM3_Init+0xe4>)
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005420:	2200      	movs	r2, #0
 8005422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005424:	4823      	ldr	r0, [pc, #140]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005426:	f003 fa0b 	bl	8008840 <HAL_TIM_Base_Init>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005430:	f7ff fd4e 	bl	8004ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800543a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800543e:	4619      	mov	r1, r3
 8005440:	481c      	ldr	r0, [pc, #112]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005442:	f004 fb5d 	bl	8009b00 <HAL_TIM_ConfigClockSource>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800544c:	f7ff fd40 	bl	8004ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005450:	4818      	ldr	r0, [pc, #96]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005452:	f003 fb73 	bl	8008b3c <HAL_TIM_PWM_Init>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800545c:	f7ff fd38 	bl	8004ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005460:	2300      	movs	r3, #0
 8005462:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005468:	f107 0320 	add.w	r3, r7, #32
 800546c:	4619      	mov	r1, r3
 800546e:	4811      	ldr	r0, [pc, #68]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005470:	f005 f9a4 	bl	800a7bc <HAL_TIMEx_MasterConfigSynchronization>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800547a:	f7ff fd29 	bl	8004ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800547e:	2360      	movs	r3, #96	; 0x60
 8005480:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	2200      	movs	r2, #0
 8005492:	4619      	mov	r1, r3
 8005494:	4807      	ldr	r0, [pc, #28]	; (80054b4 <MX_TIM3_Init+0xe4>)
 8005496:	f004 fa71 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80054a0:	f7ff fd16 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80054a4:	4803      	ldr	r0, [pc, #12]	; (80054b4 <MX_TIM3_Init+0xe4>)
 80054a6:	f000 f9e1 	bl	800586c <HAL_TIM_MspPostInit>

}
 80054aa:	bf00      	nop
 80054ac:	3738      	adds	r7, #56	; 0x38
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20001aec 	.word	0x20001aec
 80054b8:	40000400 	.word	0x40000400

080054bc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054c2:	463b      	mov	r3, r7
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054d0:	4a16      	ldr	r2, [pc, #88]	; (800552c <MX_TIM9_Init+0x70>)
 80054d2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054d6:	2209      	movs	r2, #9
 80054d8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054e6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054ee:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80054f4:	480c      	ldr	r0, [pc, #48]	; (8005528 <MX_TIM9_Init+0x6c>)
 80054f6:	f003 f9a3 	bl	8008840 <HAL_TIM_Base_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005500:	f7ff fce6 	bl	8004ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005508:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800550a:	463b      	mov	r3, r7
 800550c:	4619      	mov	r1, r3
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <MX_TIM9_Init+0x6c>)
 8005510:	f004 faf6 	bl	8009b00 <HAL_TIM_ConfigClockSource>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800551a:	f7ff fcd9 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20001ba0 	.word	0x20001ba0
 800552c:	40014000 	.word	0x40014000

08005530 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <MX_TIM10_Init+0x3c>)
 8005536:	4a0e      	ldr	r2, [pc, #56]	; (8005570 <MX_TIM10_Init+0x40>)
 8005538:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48-1;
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <MX_TIM10_Init+0x3c>)
 800553c:	222f      	movs	r2, #47	; 0x2f
 800553e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <MX_TIM10_Init+0x3c>)
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 217-1;
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <MX_TIM10_Init+0x3c>)
 8005548:	22d8      	movs	r2, #216	; 0xd8
 800554a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800554c:	4b07      	ldr	r3, [pc, #28]	; (800556c <MX_TIM10_Init+0x3c>)
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <MX_TIM10_Init+0x3c>)
 8005554:	2200      	movs	r2, #0
 8005556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005558:	4804      	ldr	r0, [pc, #16]	; (800556c <MX_TIM10_Init+0x3c>)
 800555a:	f003 f971 	bl	8008840 <HAL_TIM_Base_Init>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8005564:	f7ff fcb4 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20001c54 	.word	0x20001c54
 8005570:	40014400 	.word	0x40014400

08005574 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	611a      	str	r2, [r3, #16]
 8005588:	615a      	str	r2, [r3, #20]
 800558a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800558c:	4b21      	ldr	r3, [pc, #132]	; (8005614 <MX_TIM11_Init+0xa0>)
 800558e:	4a22      	ldr	r2, [pc, #136]	; (8005618 <MX_TIM11_Init+0xa4>)
 8005590:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <MX_TIM11_Init+0xa0>)
 8005594:	2263      	movs	r2, #99	; 0x63
 8005596:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005598:	4b1e      	ldr	r3, [pc, #120]	; (8005614 <MX_TIM11_Init+0xa0>)
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055a0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80055a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a6:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80055b2:	4818      	ldr	r0, [pc, #96]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055b4:	f003 f944 	bl	8008840 <HAL_TIM_Base_Init>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80055be:	f7ff fc87 	bl	8004ed0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80055c2:	4814      	ldr	r0, [pc, #80]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055c4:	f003 fa54 	bl	8008a70 <HAL_TIM_OC_Init>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80055ce:	f7ff fc7f 	bl	8004ed0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80055d2:	2108      	movs	r1, #8
 80055d4:	480f      	ldr	r0, [pc, #60]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055d6:	f003 fe3d 	bl	8009254 <HAL_TIM_OnePulse_Init>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80055e0:	f7ff fc76 	bl	8004ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80055e4:	2310      	movs	r3, #16
 80055e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80055e8:	f240 5399 	movw	r3, #1433	; 0x599
 80055ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	2200      	movs	r2, #0
 80055fa:	4619      	mov	r1, r3
 80055fc:	4805      	ldr	r0, [pc, #20]	; (8005614 <MX_TIM11_Init+0xa0>)
 80055fe:	f004 f961 	bl	80098c4 <HAL_TIM_OC_ConfigChannel>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8005608:	f7ff fc62 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800560c:	bf00      	nop
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20001d08 	.word	0x20001d08
 8005618:	40014800 	.word	0x40014800

0800561c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a65      	ldr	r2, [pc, #404]	; (80057c0 <HAL_TIM_Base_MspInit+0x1a4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d126      	bne.n	800567c <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	4b64      	ldr	r3, [pc, #400]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	4a63      	ldr	r2, [pc, #396]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	6453      	str	r3, [r2, #68]	; 0x44
 800563e:	4b61      	ldr	r3, [pc, #388]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800564a:	2200      	movs	r2, #0
 800564c:	2100      	movs	r1, #0
 800564e:	2018      	movs	r0, #24
 8005650:	f001 fa17 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005654:	2018      	movs	r0, #24
 8005656:	f001 fa30 	bl	8006aba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800565a:	2200      	movs	r2, #0
 800565c:	2100      	movs	r1, #0
 800565e:	2019      	movs	r0, #25
 8005660:	f001 fa0f 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005664:	2019      	movs	r0, #25
 8005666:	f001 fa28 	bl	8006aba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800566a:	2200      	movs	r2, #0
 800566c:	2100      	movs	r1, #0
 800566e:	201a      	movs	r0, #26
 8005670:	f001 fa07 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005674:	201a      	movs	r0, #26
 8005676:	f001 fa20 	bl	8006aba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800567a:	e09c      	b.n	80057b6 <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM3)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <HAL_TIM_Base_MspInit+0x1ac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d144      	bne.n	8005710 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	4a4d      	ldr	r2, [pc, #308]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	6413      	str	r3, [r2, #64]	; 0x40
 8005696:	4b4b      	ldr	r3, [pc, #300]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80056a2:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056a4:	4a4a      	ldr	r2, [pc, #296]	; (80057d0 <HAL_TIM_Base_MspInit+0x1b4>)
 80056a6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80056a8:	4b48      	ldr	r3, [pc, #288]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056aa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80056ae:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056b0:	4b46      	ldr	r3, [pc, #280]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b6:	4b45      	ldr	r3, [pc, #276]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80056bc:	4b43      	ldr	r3, [pc, #268]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80056c4:	4b41      	ldr	r3, [pc, #260]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ca:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80056cc:	4b3f      	ldr	r3, [pc, #252]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056d2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80056d4:	4b3d      	ldr	r3, [pc, #244]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80056da:	4b3c      	ldr	r3, [pc, #240]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056e0:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80056e6:	4839      	ldr	r0, [pc, #228]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056e8:	f001 fa02 	bl	8006af0 <HAL_DMA_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_TIM_Base_MspInit+0xda>
      Error_Handler();
 80056f2:	f7ff fbed 	bl	8004ed0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
 80056fc:	4a33      	ldr	r2, [pc, #204]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a31      	ldr	r2, [pc, #196]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 8005706:	639a      	str	r2, [r3, #56]	; 0x38
 8005708:	4a30      	ldr	r2, [pc, #192]	; (80057cc <HAL_TIM_Base_MspInit+0x1b0>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800570e:	e052      	b.n	80057b6 <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM9)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d116      	bne.n	8005748 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	6453      	str	r3, [r2, #68]	; 0x44
 800572a:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005736:	2200      	movs	r2, #0
 8005738:	2100      	movs	r1, #0
 800573a:	2018      	movs	r0, #24
 800573c:	f001 f9a1 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005740:	2018      	movs	r0, #24
 8005742:	f001 f9ba 	bl	8006aba <HAL_NVIC_EnableIRQ>
}
 8005746:	e036      	b.n	80057b6 <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM10)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_TIM_Base_MspInit+0x1bc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d116      	bne.n	8005780 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 800575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005760:	6453      	str	r3, [r2, #68]	; 0x44
 8005762:	4b18      	ldr	r3, [pc, #96]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800576e:	2200      	movs	r2, #0
 8005770:	2100      	movs	r1, #0
 8005772:	2019      	movs	r0, #25
 8005774:	f001 f985 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005778:	2019      	movs	r0, #25
 800577a:	f001 f99e 	bl	8006aba <HAL_NVIC_EnableIRQ>
}
 800577e:	e01a      	b.n	80057b6 <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM11)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <HAL_TIM_Base_MspInit+0x1c0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d115      	bne.n	80057b6 <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	4a0c      	ldr	r2, [pc, #48]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8005794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005798:	6453      	str	r3, [r2, #68]	; 0x44
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <HAL_TIM_Base_MspInit+0x1a8>)
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80057a6:	2200      	movs	r2, #0
 80057a8:	2100      	movs	r1, #0
 80057aa:	201a      	movs	r0, #26
 80057ac:	f001 f969 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80057b0:	201a      	movs	r0, #26
 80057b2:	f001 f982 	bl	8006aba <HAL_NVIC_EnableIRQ>
}
 80057b6:	bf00      	nop
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40000400 	.word	0x40000400
 80057cc:	20001dbc 	.word	0x20001dbc
 80057d0:	40026070 	.word	0x40026070
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	; 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e8:	f107 0314 	add.w	r3, r7, #20
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	609a      	str	r2, [r3, #8]
 80057f4:	60da      	str	r2, [r3, #12]
 80057f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d12b      	bne.n	800585a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	4b17      	ldr	r3, [pc, #92]	; (8005864 <HAL_TIM_Encoder_MspInit+0x84>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_TIM_Encoder_MspInit+0x84>)
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6413      	str	r3, [r2, #64]	; 0x40
 8005812:	4b14      	ldr	r3, [pc, #80]	; (8005864 <HAL_TIM_Encoder_MspInit+0x84>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <HAL_TIM_Encoder_MspInit+0x84>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	4a0f      	ldr	r2, [pc, #60]	; (8005864 <HAL_TIM_Encoder_MspInit+0x84>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6313      	str	r3, [r2, #48]	; 0x30
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <HAL_TIM_Encoder_MspInit+0x84>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800583a:	2303      	movs	r3, #3
 800583c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583e:	2302      	movs	r3, #2
 8005840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005846:	2300      	movs	r3, #0
 8005848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800584a:	2301      	movs	r3, #1
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584e:	f107 0314 	add.w	r3, r7, #20
 8005852:	4619      	mov	r1, r3
 8005854:	4804      	ldr	r0, [pc, #16]	; (8005868 <HAL_TIM_Encoder_MspInit+0x88>)
 8005856:	f001 fd59 	bl	800730c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800585a:	bf00      	nop
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	40020000 	.word	0x40020000

0800586c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005874:	f107 0314 	add.w	r3, r7, #20
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <HAL_TIM_MspPostInit+0xb0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d11f      	bne.n	80058ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	4b23      	ldr	r3, [pc, #140]	; (8005920 <HAL_TIM_MspPostInit+0xb4>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_TIM_MspPostInit+0xb4>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6313      	str	r3, [r2, #48]	; 0x30
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_TIM_MspPostInit+0xb4>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80058aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b8:	2300      	movs	r3, #0
 80058ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80058bc:	2301      	movs	r3, #1
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	4619      	mov	r1, r3
 80058c6:	4817      	ldr	r0, [pc, #92]	; (8005924 <HAL_TIM_MspPostInit+0xb8>)
 80058c8:	f001 fd20 	bl	800730c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80058cc:	e022      	b.n	8005914 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_TIM_MspPostInit+0xbc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d11d      	bne.n	8005914 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <HAL_TIM_MspPostInit+0xb4>)
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	4a0f      	ldr	r2, [pc, #60]	; (8005920 <HAL_TIM_MspPostInit+0xb4>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6313      	str	r3, [r2, #48]	; 0x30
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <HAL_TIM_MspPostInit+0xb4>)
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f8:	2302      	movs	r3, #2
 80058fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005900:	2300      	movs	r3, #0
 8005902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005904:	2302      	movs	r3, #2
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	4619      	mov	r1, r3
 800590e:	4805      	ldr	r0, [pc, #20]	; (8005924 <HAL_TIM_MspPostInit+0xb8>)
 8005910:	f001 fcfc 	bl	800730c <HAL_GPIO_Init>
}
 8005914:	bf00      	nop
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40010000 	.word	0x40010000
 8005920:	40023800 	.word	0x40023800
 8005924:	40020000 	.word	0x40020000
 8005928:	40000400 	.word	0x40000400
 800592c:	00000000 	.word	0x00000000

08005930 <Trajectory>:
float setpoint_now = 0;
float target = 0;

// USER CODE ======================================================================================

void Trajectory(float setpoint_now_input, float velocity_max, float acceleration_max, int *position_out, float *velocity_out, float *acceleration_out, int homemode) {
 8005930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005934:	b088      	sub	sp, #32
 8005936:	af00      	add	r7, sp, #0
 8005938:	ed87 0a07 	vstr	s0, [r7, #28]
 800593c:	edc7 0a06 	vstr	s1, [r7, #24]
 8005940:	ed87 1a05 	vstr	s2, [r7, #20]
 8005944:	6138      	str	r0, [r7, #16]
 8005946:	60f9      	str	r1, [r7, #12]
 8005948:	60ba      	str	r2, [r7, #8]
 800594a:	607b      	str	r3, [r7, #4]
	static float time_err = 0;

	static float setpoint_past = 0;
	static float distance = 0;

	if(homemode == 1){
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d115      	bne.n	800597e <Trajectory+0x4e>
		setpoint_past = setpoint_now_input;
 8005952:	4a6c      	ldr	r2, [pc, #432]	; (8005b04 <Trajectory+0x1d4>)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	6013      	str	r3, [r2, #0]
		time_trajectory = 0;
 8005958:	4b6b      	ldr	r3, [pc, #428]	; (8005b08 <Trajectory+0x1d8>)
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
		abs_distance = 0;
 8005960:	4b6a      	ldr	r3, [pc, #424]	; (8005b0c <Trajectory+0x1dc>)
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
		distance = 0;
 8005968:	4b69      	ldr	r3, [pc, #420]	; (8005b10 <Trajectory+0x1e0>)
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
		position = setpoint_now_input;
 8005970:	4a68      	ldr	r2, [pc, #416]	; (8005b14 <Trajectory+0x1e4>)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	6013      	str	r3, [r2, #0]
		initial_position = setpoint_now_input;
 8005976:	4a68      	ldr	r2, [pc, #416]	; (8005b18 <Trajectory+0x1e8>)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	6013      	str	r3, [r2, #0]
		return;
 800597c:	e306      	b.n	8005f8c <Trajectory+0x65c>
	}

	else if(homemode == 0)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 82f2 	bne.w	8005f6a <Trajectory+0x63a>
	{
		// distance and +-(sign)
		if (setpoint_past != setpoint_now_input && time_trajectory == 0) {
 8005986:	4b5f      	ldr	r3, [pc, #380]	; (8005b04 <Trajectory+0x1d4>)
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005990:	eeb4 7a67 	vcmp.f32	s14, s15
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	d03f      	beq.n	8005a1a <Trajectory+0xea>
 800599a:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <Trajectory+0x1d8>)
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	d137      	bne.n	8005a1a <Trajectory+0xea>
			setpoint_now = setpoint_now_input;
 80059aa:	4a5c      	ldr	r2, [pc, #368]	; (8005b1c <Trajectory+0x1ec>)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	6013      	str	r3, [r2, #0]
			distance = setpoint_now - initial_position;
 80059b0:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <Trajectory+0x1ec>)
 80059b2:	ed93 7a00 	vldr	s14, [r3]
 80059b6:	4b58      	ldr	r3, [pc, #352]	; (8005b18 <Trajectory+0x1e8>)
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c0:	4b53      	ldr	r3, [pc, #332]	; (8005b10 <Trajectory+0x1e0>)
 80059c2:	edc3 7a00 	vstr	s15, [r3]
			setpoint_past = setpoint_now;
 80059c6:	4b55      	ldr	r3, [pc, #340]	; (8005b1c <Trajectory+0x1ec>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4e      	ldr	r2, [pc, #312]	; (8005b04 <Trajectory+0x1d4>)
 80059cc:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 80059ce:	4b50      	ldr	r3, [pc, #320]	; (8005b10 <Trajectory+0x1e0>)
 80059d0:	edd3 7a00 	vldr	s15, [r3]
 80059d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	db07      	blt.n	80059ee <Trajectory+0xbe>
				sign = 1;
 80059de:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <Trajectory+0x1f0>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
				abs_distance = distance;
 80059e4:	4b4a      	ldr	r3, [pc, #296]	; (8005b10 <Trajectory+0x1e0>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a48      	ldr	r2, [pc, #288]	; (8005b0c <Trajectory+0x1dc>)
 80059ea:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 80059ec:	e019      	b.n	8005a22 <Trajectory+0xf2>
			} else if (distance < 0) {
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <Trajectory+0x1e0>)
 80059f0:	edd3 7a00 	vldr	s15, [r3]
 80059f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fc:	d400      	bmi.n	8005a00 <Trajectory+0xd0>
			if (distance >= 0) {
 80059fe:	e010      	b.n	8005a22 <Trajectory+0xf2>
				sign = -1;
 8005a00:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <Trajectory+0x1f0>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	601a      	str	r2, [r3, #0]
				abs_distance = distance * (-1);
 8005a08:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <Trajectory+0x1e0>)
 8005a0a:	edd3 7a00 	vldr	s15, [r3]
 8005a0e:	eef1 7a67 	vneg.f32	s15, s15
 8005a12:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <Trajectory+0x1dc>)
 8005a14:	edc3 7a00 	vstr	s15, [r3]
			if (distance >= 0) {
 8005a18:	e003      	b.n	8005a22 <Trajectory+0xf2>
			}
		} else {
			setpoint_past = setpoint_now;
 8005a1a:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <Trajectory+0x1ec>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a39      	ldr	r2, [pc, #228]	; (8005b04 <Trajectory+0x1d4>)
 8005a20:	6013      	str	r3, [r2, #0]
		}

	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max) / acceleration_max)) {
 8005a22:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a26:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a32:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <Trajectory+0x1dc>)
 8005a34:	edd3 7a00 	vldr	s15, [r3]
 8005a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	d57a      	bpl.n	8005b38 <Trajectory+0x208>
		time_acc = ((velocity_max - 0) / acceleration_max);
 8005a42:	edd7 6a06 	vldr	s13, [r7, #24]
 8005a46:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a4e:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <Trajectory+0x1f4>)
 8005a50:	edc3 7a00 	vstr	s15, [r3]
		time_const = ((1.0 / velocity_max) * ((abs_distance) - ((velocity_max * velocity_max) / acceleration_max)));
 8005a54:	69b8      	ldr	r0, [r7, #24]
 8005a56:	f7fa fd7f 	bl	8000558 <__aeabi_f2d>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	4931      	ldr	r1, [pc, #196]	; (8005b28 <Trajectory+0x1f8>)
 8005a64:	f7fa fefa 	bl	800085c <__aeabi_ddiv>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	461d      	mov	r5, r3
 8005a70:	4b26      	ldr	r3, [pc, #152]	; (8005b0c <Trajectory+0x1dc>)
 8005a72:	ed93 7a00 	vldr	s14, [r3]
 8005a76:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a7a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005a7e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a8a:	ee17 0a90 	vmov	r0, s15
 8005a8e:	f7fa fd63 	bl	8000558 <__aeabi_f2d>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fa fdb5 	bl	8000608 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7fb f8a7 	bl	8000bf8 <__aeabi_d2f>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <Trajectory+0x1fc>)
 8005aae:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance - (velocity_max * velocity_max) / acceleration_max) / velocity_max;
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <Trajectory+0x1f4>)
 8005ab2:	edd3 7a00 	vldr	s15, [r3]
 8005ab6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <Trajectory+0x1dc>)
 8005abc:	edd3 6a00 	vldr	s13, [r3]
 8005ac0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ac4:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8005ac8:	ed97 6a05 	vldr	s12, [r7, #20]
 8005acc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005ad0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005ad4:	edd7 6a06 	vldr	s13, [r7, #24]
 8005ad8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <Trajectory+0x200>)
 8005ae2:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <Trajectory+0x1f0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <Trajectory+0x204>)
 8005afc:	edc3 7a00 	vstr	s15, [r3]
 8005b00:	e056      	b.n	8005bb0 <Trajectory+0x280>
 8005b02:	bf00      	nop
 8005b04:	20001e38 	.word	0x20001e38
 8005b08:	20001e3c 	.word	0x20001e3c
 8005b0c:	20001e1c 	.word	0x20001e1c
 8005b10:	20001e40 	.word	0x20001e40
 8005b14:	20001e24 	.word	0x20001e24
 8005b18:	20001e20 	.word	0x20001e20
 8005b1c:	20001e34 	.word	0x20001e34
 8005b20:	20001e30 	.word	0x20001e30
 8005b24:	20001e44 	.word	0x20001e44
 8005b28:	3ff00000 	.word	0x3ff00000
 8005b2c:	20001e48 	.word	0x20001e48
 8005b30:	20001e4c 	.word	0x20001e4c
 8005b34:	20001e50 	.word	0x20001e50
	}

	else {
		time_acc = sqrt(abs_distance / acceleration_max);
 8005b38:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <Trajectory+0x440>)
 8005b3a:	ed93 7a00 	vldr	s14, [r3]
 8005b3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b46:	ee16 0a90 	vmov	r0, s13
 8005b4a:	f7fa fd05 	bl	8000558 <__aeabi_f2d>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	ec43 2b10 	vmov	d0, r2, r3
 8005b56:	f00b f911 	bl	8010d7c <sqrt>
 8005b5a:	ec53 2b10 	vmov	r2, r3, d0
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	f7fb f849 	bl	8000bf8 <__aeabi_d2f>
 8005b66:	4603      	mov	r3, r0
 8005b68:	4a82      	ldr	r2, [pc, #520]	; (8005d74 <Trajectory+0x444>)
 8005b6a:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 8005b6c:	4b81      	ldr	r3, [pc, #516]	; (8005d74 <Trajectory+0x444>)
 8005b6e:	edd3 7a00 	vldr	s15, [r3]
 8005b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b76:	4b80      	ldr	r3, [pc, #512]	; (8005d78 <Trajectory+0x448>)
 8005b78:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 8005b7c:	4b7f      	ldr	r3, [pc, #508]	; (8005d7c <Trajectory+0x44c>)
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8005b84:	4b7e      	ldr	r3, [pc, #504]	; (8005d80 <Trajectory+0x450>)
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc * sign;
 8005b8c:	4b79      	ldr	r3, [pc, #484]	; (8005d74 <Trajectory+0x444>)
 8005b8e:	ed93 7a00 	vldr	s14, [r3]
 8005b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b9a:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <Trajectory+0x454>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <Trajectory+0x458>)
 8005bac:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 8005bb0:	4b76      	ldr	r3, [pc, #472]	; (8005d8c <Trajectory+0x45c>)
 8005bb2:	edd3 7a00 	vldr	s15, [r3]
 8005bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	f2c0 8085 	blt.w	8005ccc <Trajectory+0x39c>
 8005bc2:	4b72      	ldr	r3, [pc, #456]	; (8005d8c <Trajectory+0x45c>)
 8005bc4:	ed93 7a00 	vldr	s14, [r3]
 8005bc8:	4b6a      	ldr	r3, [pc, #424]	; (8005d74 <Trajectory+0x444>)
 8005bca:	edd3 7a00 	vldr	s15, [r3]
 8005bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd6:	d579      	bpl.n	8005ccc <Trajectory+0x39c>
		time_trajectory += 0.0001;
 8005bd8:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <Trajectory+0x45c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fa fcbb 	bl	8000558 <__aeabi_f2d>
 8005be2:	a361      	add	r3, pc, #388	; (adr r3, 8005d68 <Trajectory+0x438>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fb58 	bl	800029c <__adddf3>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f7fb f800 	bl	8000bf8 <__aeabi_d2f>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4a64      	ldr	r2, [pc, #400]	; (8005d8c <Trajectory+0x45c>)
 8005bfc:	6013      	str	r3, [r2, #0]
		position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory) * sign);
 8005bfe:	4b64      	ldr	r3, [pc, #400]	; (8005d90 <Trajectory+0x460>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fa fca8 	bl	8000558 <__aeabi_f2d>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f7fa fca3 	bl	8000558 <__aeabi_f2d>
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	4b5f      	ldr	r3, [pc, #380]	; (8005d94 <Trajectory+0x464>)
 8005c18:	f7fa fcf6 	bl	8000608 <__aeabi_dmul>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4690      	mov	r8, r2
 8005c22:	4699      	mov	r9, r3
 8005c24:	4b59      	ldr	r3, [pc, #356]	; (8005d8c <Trajectory+0x45c>)
 8005c26:	ed93 7a00 	vldr	s14, [r3]
 8005c2a:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <Trajectory+0x45c>)
 8005c2c:	edd3 7a00 	vldr	s15, [r3]
 8005c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c34:	ee17 0a90 	vmov	r0, s15
 8005c38:	f7fa fc8e 	bl	8000558 <__aeabi_f2d>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa fce0 	bl	8000608 <__aeabi_dmul>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	4699      	mov	r9, r3
 8005c50:	4b4c      	ldr	r3, [pc, #304]	; (8005d84 <Trajectory+0x454>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fa fc6d 	bl	8000534 <__aeabi_i2d>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4649      	mov	r1, r9
 8005c62:	f7fa fcd1 	bl	8000608 <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa fb15 	bl	800029c <__adddf3>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f7fa ffbd 	bl	8000bf8 <__aeabi_d2f>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4a45      	ldr	r2, [pc, #276]	; (8005d98 <Trajectory+0x468>)
 8005c82:	6013      	str	r3, [r2, #0]
		velocity = (acceleration_max * time_trajectory * sign);
 8005c84:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <Trajectory+0x45c>)
 8005c86:	ed93 7a00 	vldr	s14, [r3]
 8005c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c92:	4b3c      	ldr	r3, [pc, #240]	; (8005d84 <Trajectory+0x454>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	4b3e      	ldr	r3, [pc, #248]	; (8005d9c <Trajectory+0x46c>)
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
		position_acc = position;
 8005ca8:	4b3b      	ldr	r3, [pc, #236]	; (8005d98 <Trajectory+0x468>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <Trajectory+0x470>)
 8005cae:	6013      	str	r3, [r2, #0]
		acceleration = acceleration_max * sign;
 8005cb0:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <Trajectory+0x454>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	4b37      	ldr	r3, [pc, #220]	; (8005da4 <Trajectory+0x474>)
 8005cc6:	edc3 7a00 	vstr	s15, [r3]
 8005cca:	e12d      	b.n	8005f28 <Trajectory+0x5f8>
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc)) {
 8005ccc:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <Trajectory+0x448>)
 8005cce:	ed93 7a00 	vldr	s14, [r3]
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <Trajectory+0x444>)
 8005cd4:	edd3 7a00 	vldr	s15, [r3]
 8005cd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <Trajectory+0x45c>)
 8005cde:	edd3 7a00 	vldr	s15, [r3]
 8005ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	dd5d      	ble.n	8005da8 <Trajectory+0x478>
		time_trajectory += 0.0001;
 8005cec:	4b27      	ldr	r3, [pc, #156]	; (8005d8c <Trajectory+0x45c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fa fc31 	bl	8000558 <__aeabi_f2d>
 8005cf6:	a31c      	add	r3, pc, #112	; (adr r3, 8005d68 <Trajectory+0x438>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f7fa face 	bl	800029c <__adddf3>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7fa ff76 	bl	8000bf8 <__aeabi_d2f>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <Trajectory+0x45c>)
 8005d10:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <Trajectory+0x45c>)
 8005d14:	ed93 7a00 	vldr	s14, [r3]
 8005d18:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <Trajectory+0x444>)
 8005d1a:	edd3 7a00 	vldr	s15, [r3]
 8005d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d22:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <Trajectory+0x458>)
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d2c:	4b1c      	ldr	r3, [pc, #112]	; (8005da0 <Trajectory+0x470>)
 8005d2e:	edd3 7a00 	vldr	s15, [r3]
 8005d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <Trajectory+0x468>)
 8005d38:	edc3 7a00 	vstr	s15, [r3]
		position_const = position - position_acc;
 8005d3c:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <Trajectory+0x468>)
 8005d3e:	ed93 7a00 	vldr	s14, [r3]
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <Trajectory+0x470>)
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <Trajectory+0x450>)
 8005d4e:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <Trajectory+0x458>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a11      	ldr	r2, [pc, #68]	; (8005d9c <Trajectory+0x46c>)
 8005d58:	6013      	str	r3, [r2, #0]
		acceleration = 0;
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <Trajectory+0x474>)
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e0e1      	b.n	8005f28 <Trajectory+0x5f8>
 8005d64:	f3af 8000 	nop.w
 8005d68:	eb1c432d 	.word	0xeb1c432d
 8005d6c:	3f1a36e2 	.word	0x3f1a36e2
 8005d70:	20001e1c 	.word	0x20001e1c
 8005d74:	20001e44 	.word	0x20001e44
 8005d78:	20001e4c 	.word	0x20001e4c
 8005d7c:	20001e48 	.word	0x20001e48
 8005d80:	20001e54 	.word	0x20001e54
 8005d84:	20001e30 	.word	0x20001e30
 8005d88:	20001e50 	.word	0x20001e50
 8005d8c:	20001e3c 	.word	0x20001e3c
 8005d90:	20001e20 	.word	0x20001e20
 8005d94:	3fe00000 	.word	0x3fe00000
 8005d98:	20001e24 	.word	0x20001e24
 8005d9c:	20001e28 	.word	0x20001e28
 8005da0:	20001e58 	.word	0x20001e58
 8005da4:	20001e2c 	.word	0x20001e2c
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total)) {
 8005da8:	4b7d      	ldr	r3, [pc, #500]	; (8005fa0 <Trajectory+0x670>)
 8005daa:	ed93 7a00 	vldr	s14, [r3]
 8005dae:	4b7d      	ldr	r3, [pc, #500]	; (8005fa4 <Trajectory+0x674>)
 8005db0:	edd3 7a00 	vldr	s15, [r3]
 8005db4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005db8:	4b7b      	ldr	r3, [pc, #492]	; (8005fa8 <Trajectory+0x678>)
 8005dba:	edd3 7a00 	vldr	s15, [r3]
 8005dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	f200 80af 	bhi.w	8005f28 <Trajectory+0x5f8>
 8005dca:	4b77      	ldr	r3, [pc, #476]	; (8005fa8 <Trajectory+0x678>)
 8005dcc:	ed93 7a00 	vldr	s14, [r3]
 8005dd0:	4b73      	ldr	r3, [pc, #460]	; (8005fa0 <Trajectory+0x670>)
 8005dd2:	edd3 7a00 	vldr	s15, [r3]
 8005dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	f140 80a3 	bpl.w	8005f28 <Trajectory+0x5f8>
		time_trajectory += 0.0001;
 8005de2:	4b71      	ldr	r3, [pc, #452]	; (8005fa8 <Trajectory+0x678>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fbb6 	bl	8000558 <__aeabi_f2d>
 8005dec:	a36a      	add	r3, pc, #424	; (adr r3, 8005f98 <Trajectory+0x668>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa fa53 	bl	800029c <__adddf3>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f7fa fefb 	bl	8000bf8 <__aeabi_d2f>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4a68      	ldr	r2, [pc, #416]	; (8005fa8 <Trajectory+0x678>)
 8005e06:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 8005e08:	4b67      	ldr	r3, [pc, #412]	; (8005fa8 <Trajectory+0x678>)
 8005e0a:	ed93 7a00 	vldr	s14, [r3]
 8005e0e:	4b65      	ldr	r3, [pc, #404]	; (8005fa4 <Trajectory+0x674>)
 8005e10:	edd3 6a00 	vldr	s13, [r3]
 8005e14:	4b65      	ldr	r3, [pc, #404]	; (8005fac <Trajectory+0x67c>)
 8005e16:	edd3 7a00 	vldr	s15, [r3]
 8005e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e22:	4b63      	ldr	r3, [pc, #396]	; (8005fb0 <Trajectory+0x680>)
 8005e24:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 * (-1) * acceleration_max * (time_err * time_err) * sign);
 8005e28:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <Trajectory+0x684>)
 8005e2a:	ed93 7a00 	vldr	s14, [r3]
 8005e2e:	4b62      	ldr	r3, [pc, #392]	; (8005fb8 <Trajectory+0x688>)
 8005e30:	edd3 7a00 	vldr	s15, [r3]
 8005e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e38:	4b60      	ldr	r3, [pc, #384]	; (8005fbc <Trajectory+0x68c>)
 8005e3a:	edd3 6a00 	vldr	s13, [r3]
 8005e3e:	4b5c      	ldr	r3, [pc, #368]	; (8005fb0 <Trajectory+0x680>)
 8005e40:	edd3 7a00 	vldr	s15, [r3]
 8005e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e4c:	ee17 0a90 	vmov	r0, s15
 8005e50:	f7fa fb82 	bl	8000558 <__aeabi_f2d>
 8005e54:	4604      	mov	r4, r0
 8005e56:	460d      	mov	r5, r1
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f7fa fb7d 	bl	8000558 <__aeabi_f2d>
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	4b57      	ldr	r3, [pc, #348]	; (8005fc0 <Trajectory+0x690>)
 8005e64:	f7fa fbd0 	bl	8000608 <__aeabi_dmul>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4690      	mov	r8, r2
 8005e6e:	4699      	mov	r9, r3
 8005e70:	4b4f      	ldr	r3, [pc, #316]	; (8005fb0 <Trajectory+0x680>)
 8005e72:	ed93 7a00 	vldr	s14, [r3]
 8005e76:	4b4e      	ldr	r3, [pc, #312]	; (8005fb0 <Trajectory+0x680>)
 8005e78:	edd3 7a00 	vldr	s15, [r3]
 8005e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e80:	ee17 0a90 	vmov	r0, s15
 8005e84:	f7fa fb68 	bl	8000558 <__aeabi_f2d>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	f7fa fbba 	bl	8000608 <__aeabi_dmul>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4690      	mov	r8, r2
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	4b49      	ldr	r3, [pc, #292]	; (8005fc4 <Trajectory+0x694>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fa fb47 	bl	8000534 <__aeabi_i2d>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa fbab 	bl	8000608 <__aeabi_dmul>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa f9ef 	bl	800029c <__adddf3>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f7fa fe97 	bl	8000bf8 <__aeabi_d2f>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4a3e      	ldr	r2, [pc, #248]	; (8005fc8 <Trajectory+0x698>)
 8005ece:	6013      	str	r3, [r2, #0]
		velocity = (-acceleration_max * sign * time_err) + (max_velocity);
 8005ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ed4:	eeb1 7a67 	vneg.f32	s14, s15
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <Trajectory+0x694>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <Trajectory+0x680>)
 8005eea:	edd3 7a00 	vldr	s15, [r3]
 8005eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ef2:	4b32      	ldr	r3, [pc, #200]	; (8005fbc <Trajectory+0x68c>)
 8005ef4:	edd3 7a00 	vldr	s15, [r3]
 8005ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005efc:	4b33      	ldr	r3, [pc, #204]	; (8005fcc <Trajectory+0x69c>)
 8005efe:	edc3 7a00 	vstr	s15, [r3]
		acceleration = -acceleration_max * sign;
 8005f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f06:	eeb1 7a67 	vneg.f32	s14, s15
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <Trajectory+0x694>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <Trajectory+0x6a0>)
 8005f1c:	edc3 7a00 	vstr	s15, [r3]
		initial_position = position;
 8005f20:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <Trajectory+0x698>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2b      	ldr	r2, [pc, #172]	; (8005fd4 <Trajectory+0x6a4>)
 8005f26:	6013      	str	r3, [r2, #0]
	}

	position = (int) position;
 8005f28:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <Trajectory+0x698>)
 8005f2a:	edd3 7a00 	vldr	s15, [r3]
 8005f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <Trajectory+0x698>)
 8005f38:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_now == position) {
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <Trajectory+0x6a8>)
 8005f3e:	ed93 7a00 	vldr	s14, [r3]
 8005f42:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <Trajectory+0x698>)
 8005f44:	edd3 7a00 	vldr	s15, [r3]
 8005f48:	eeb4 7a67 	vcmp.f32	s14, s15
 8005f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f50:	d10b      	bne.n	8005f6a <Trajectory+0x63a>
		time_trajectory = 0;
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <Trajectory+0x678>)
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
		acceleration = 0;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <Trajectory+0x6a0>)
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
		velocity = 0;
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <Trajectory+0x69c>)
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
	}
	}

	*position_out = position;
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <Trajectory+0x698>)
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f74:	ee17 2a90 	vmov	r2, s15
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	601a      	str	r2, [r3, #0]
	*velocity_out = velocity;
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <Trajectory+0x69c>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]
	*acceleration_out = acceleration;
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <Trajectory+0x6a0>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	601a      	str	r2, [r3, #0]
}
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f94:	f3af 8000 	nop.w
 8005f98:	eb1c432d 	.word	0xeb1c432d
 8005f9c:	3f1a36e2 	.word	0x3f1a36e2
 8005fa0:	20001e4c 	.word	0x20001e4c
 8005fa4:	20001e44 	.word	0x20001e44
 8005fa8:	20001e3c 	.word	0x20001e3c
 8005fac:	20001e48 	.word	0x20001e48
 8005fb0:	20001e5c 	.word	0x20001e5c
 8005fb4:	20001e58 	.word	0x20001e58
 8005fb8:	20001e54 	.word	0x20001e54
 8005fbc:	20001e50 	.word	0x20001e50
 8005fc0:	bfe00000 	.word	0xbfe00000
 8005fc4:	20001e30 	.word	0x20001e30
 8005fc8:	20001e24 	.word	0x20001e24
 8005fcc:	20001e28 	.word	0x20001e28
 8005fd0:	20001e2c 	.word	0x20001e2c
 8005fd4:	20001e20 	.word	0x20001e20
 8005fd8:	20001e34 	.word	0x20001e34

08005fdc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <MX_USART1_UART_Init+0x50>)
 8005fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8005fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fee:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8006002:	220c      	movs	r2, #12
 8006004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006006:	4b08      	ldr	r3, [pc, #32]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8006008:	2200      	movs	r2, #0
 800600a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 800600e:	2200      	movs	r2, #0
 8006010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006012:	4805      	ldr	r0, [pc, #20]	; (8006028 <MX_USART1_UART_Init+0x4c>)
 8006014:	f004 fcb0 	bl	800a978 <HAL_UART_Init>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800601e:	f7fe ff57 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20001e60 	.word	0x20001e60
 800602c:	40011000 	.word	0x40011000

08006030 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <MX_USART2_UART_Init+0x50>)
 8006036:	4a13      	ldr	r2, [pc, #76]	; (8006084 <MX_USART2_UART_Init+0x54>)
 8006038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <MX_USART2_UART_Init+0x50>)
 800603c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8006040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <MX_USART2_UART_Init+0x50>)
 8006044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006048:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <MX_USART2_UART_Init+0x50>)
 800604c:	2200      	movs	r2, #0
 800604e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <MX_USART2_UART_Init+0x50>)
 8006052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <MX_USART2_UART_Init+0x50>)
 800605a:	220c      	movs	r2, #12
 800605c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <MX_USART2_UART_Init+0x50>)
 8006060:	2200      	movs	r2, #0
 8006062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <MX_USART2_UART_Init+0x50>)
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <MX_USART2_UART_Init+0x50>)
 800606c:	f004 fc84 	bl	800a978 <HAL_UART_Init>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8006076:	f7fe ff2b 	bl	8004ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20001ed4 	.word	0x20001ed4
 8006084:	40004400 	.word	0x40004400

08006088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	; 0x30
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006090:	f107 031c 	add.w	r3, r7, #28
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a68      	ldr	r2, [pc, #416]	; (8006248 <HAL_UART_MspInit+0x1c0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d163      	bne.n	8006172 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	4b67      	ldr	r3, [pc, #412]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	4a66      	ldr	r2, [pc, #408]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80060b4:	f043 0310 	orr.w	r3, r3, #16
 80060b8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ba:	4b64      	ldr	r3, [pc, #400]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	4b60      	ldr	r3, [pc, #384]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	4a5f      	ldr	r2, [pc, #380]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	6313      	str	r3, [r2, #48]	; 0x30
 80060d6:	4b5d      	ldr	r3, [pc, #372]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80060e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80060e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f0:	2303      	movs	r3, #3
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060f4:	2307      	movs	r3, #7
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f8:	f107 031c 	add.w	r3, r7, #28
 80060fc:	4619      	mov	r1, r3
 80060fe:	4854      	ldr	r0, [pc, #336]	; (8006250 <HAL_UART_MspInit+0x1c8>)
 8006100:	f001 f904 	bl	800730c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006104:	4b53      	ldr	r3, [pc, #332]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006106:	4a54      	ldr	r2, [pc, #336]	; (8006258 <HAL_UART_MspInit+0x1d0>)
 8006108:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800610a:	4b52      	ldr	r3, [pc, #328]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 800610c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006110:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006112:	4b50      	ldr	r3, [pc, #320]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006114:	2240      	movs	r2, #64	; 0x40
 8006116:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006118:	4b4e      	ldr	r3, [pc, #312]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 800611a:	2200      	movs	r2, #0
 800611c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006124:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006126:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006128:	2200      	movs	r2, #0
 800612a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800612c:	4b49      	ldr	r3, [pc, #292]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 800612e:	2200      	movs	r2, #0
 8006130:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006132:	4b48      	ldr	r3, [pc, #288]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006134:	2200      	movs	r2, #0
 8006136:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006138:	4b46      	ldr	r3, [pc, #280]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 800613a:	2200      	movs	r2, #0
 800613c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800613e:	4b45      	ldr	r3, [pc, #276]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006140:	2200      	movs	r2, #0
 8006142:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006144:	4843      	ldr	r0, [pc, #268]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006146:	f000 fcd3 	bl	8006af0 <HAL_DMA_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006150:	f7fe febe 	bl	8004ed0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 8006158:	635a      	str	r2, [r3, #52]	; 0x34
 800615a:	4a3e      	ldr	r2, [pc, #248]	; (8006254 <HAL_UART_MspInit+0x1cc>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006160:	2200      	movs	r2, #0
 8006162:	2100      	movs	r1, #0
 8006164:	2025      	movs	r0, #37	; 0x25
 8006166:	f000 fc8c 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800616a:	2025      	movs	r0, #37	; 0x25
 800616c:	f000 fca5 	bl	8006aba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006170:	e066      	b.n	8006240 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART2)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a39      	ldr	r2, [pc, #228]	; (800625c <HAL_UART_MspInit+0x1d4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d161      	bne.n	8006240 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	4b32      	ldr	r3, [pc, #200]	; (800624c <HAL_UART_MspInit+0x1c4>)
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	4a31      	ldr	r2, [pc, #196]	; (800624c <HAL_UART_MspInit+0x1c4>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618a:	6413      	str	r3, [r2, #64]	; 0x40
 800618c:	4b2f      	ldr	r3, [pc, #188]	; (800624c <HAL_UART_MspInit+0x1c4>)
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	4b2b      	ldr	r3, [pc, #172]	; (800624c <HAL_UART_MspInit+0x1c4>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	6313      	str	r3, [r2, #48]	; 0x30
 80061a8:	4b28      	ldr	r3, [pc, #160]	; (800624c <HAL_UART_MspInit+0x1c4>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80061b4:	230c      	movs	r3, #12
 80061b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b8:	2302      	movs	r3, #2
 80061ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061c0:	2303      	movs	r3, #3
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061c4:	2307      	movs	r3, #7
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c8:	f107 031c 	add.w	r3, r7, #28
 80061cc:	4619      	mov	r1, r3
 80061ce:	4820      	ldr	r0, [pc, #128]	; (8006250 <HAL_UART_MspInit+0x1c8>)
 80061d0:	f001 f89c 	bl	800730c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80061d4:	4b22      	ldr	r3, [pc, #136]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061d6:	4a23      	ldr	r2, [pc, #140]	; (8006264 <HAL_UART_MspInit+0x1dc>)
 80061d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80061da:	4b21      	ldr	r3, [pc, #132]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e2:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061e4:	2240      	movs	r2, #64	; 0x40
 80061e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061ee:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 80061fe:	2200      	movs	r2, #0
 8006200:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006202:	4b17      	ldr	r3, [pc, #92]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 8006204:	2200      	movs	r2, #0
 8006206:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006208:	4b15      	ldr	r3, [pc, #84]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 800620a:	2200      	movs	r2, #0
 800620c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 8006210:	2200      	movs	r2, #0
 8006212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006214:	4812      	ldr	r0, [pc, #72]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 8006216:	f000 fc6b 	bl	8006af0 <HAL_DMA_Init>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8006220:	f7fe fe56 	bl	8004ed0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 8006228:	635a      	str	r2, [r3, #52]	; 0x34
 800622a:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <HAL_UART_MspInit+0x1d8>)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006230:	2200      	movs	r2, #0
 8006232:	2100      	movs	r1, #0
 8006234:	2026      	movs	r0, #38	; 0x26
 8006236:	f000 fc24 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800623a:	2026      	movs	r0, #38	; 0x26
 800623c:	f000 fc3d 	bl	8006aba <HAL_NVIC_EnableIRQ>
}
 8006240:	bf00      	nop
 8006242:	3730      	adds	r7, #48	; 0x30
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40011000 	.word	0x40011000
 800624c:	40023800 	.word	0x40023800
 8006250:	40020000 	.word	0x40020000
 8006254:	20001f48 	.word	0x20001f48
 8006258:	400264b8 	.word	0x400264b8
 800625c:	40004400 	.word	0x40004400
 8006260:	20001fa8 	.word	0x20001fa8
 8006264:	400260a0 	.word	0x400260a0

08006268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800626c:	480d      	ldr	r0, [pc, #52]	; (80062a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800626e:	490e      	ldr	r1, [pc, #56]	; (80062a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006270:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006274:	e002      	b.n	800627c <LoopCopyDataInit>

08006276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800627a:	3304      	adds	r3, #4

0800627c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800627c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800627e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006280:	d3f9      	bcc.n	8006276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006282:	4a0b      	ldr	r2, [pc, #44]	; (80062b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006284:	4c0b      	ldr	r4, [pc, #44]	; (80062b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006288:	e001      	b.n	800628e <LoopFillZerobss>

0800628a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800628a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800628c:	3204      	adds	r2, #4

0800628e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800628e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006290:	d3fb      	bcc.n	800628a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006292:	f7fe ff97 	bl	80051c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006296:	f005 fe05 	bl	800bea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800629a:	f7fe fd1d 	bl	8004cd8 <main>
  bx  lr    
 800629e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80062a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062a8:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 80062ac:	08013998 	.word	0x08013998
  ldr r2, =_sbss
 80062b0:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 80062b4:	2000201c 	.word	0x2000201c

080062b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062b8:	e7fe      	b.n	80062b8 <ADC_IRQHandler>
	...

080062bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062c0:	4b0e      	ldr	r3, [pc, #56]	; (80062fc <HAL_Init+0x40>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <HAL_Init+0x40>)
 80062c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_Init+0x40>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <HAL_Init+0x40>)
 80062d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062d8:	4b08      	ldr	r3, [pc, #32]	; (80062fc <HAL_Init+0x40>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a07      	ldr	r2, [pc, #28]	; (80062fc <HAL_Init+0x40>)
 80062de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062e4:	2003      	movs	r0, #3
 80062e6:	f000 fbc1 	bl	8006a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062ea:	2000      	movs	r0, #0
 80062ec:	f000 f808 	bl	8006300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062f0:	f7fe fdf4 	bl	8004edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40023c00 	.word	0x40023c00

08006300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006308:	4b12      	ldr	r3, [pc, #72]	; (8006354 <HAL_InitTick+0x54>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b12      	ldr	r3, [pc, #72]	; (8006358 <HAL_InitTick+0x58>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006316:	fbb3 f3f1 	udiv	r3, r3, r1
 800631a:	fbb2 f3f3 	udiv	r3, r2, r3
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fbd9 	bl	8006ad6 <HAL_SYSTICK_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e00e      	b.n	800634c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b0f      	cmp	r3, #15
 8006332:	d80a      	bhi.n	800634a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006334:	2200      	movs	r2, #0
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	f000 fba1 	bl	8006a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006340:	4a06      	ldr	r2, [pc, #24]	; (800635c <HAL_InitTick+0x5c>)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000230 	.word	0x20000230
 8006358:	20000238 	.word	0x20000238
 800635c:	20000234 	.word	0x20000234

08006360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <HAL_IncTick+0x20>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	4b06      	ldr	r3, [pc, #24]	; (8006384 <HAL_IncTick+0x24>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4413      	add	r3, r2
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <HAL_IncTick+0x24>)
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000238 	.word	0x20000238
 8006384:	20002008 	.word	0x20002008

08006388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  return uwTick;
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <HAL_GetTick+0x14>)
 800638e:	681b      	ldr	r3, [r3, #0]
}
 8006390:	4618      	mov	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20002008 	.word	0x20002008

080063a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063a8:	f7ff ffee 	bl	8006388 <HAL_GetTick>
 80063ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d005      	beq.n	80063c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <HAL_Delay+0x44>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063c6:	bf00      	nop
 80063c8:	f7ff ffde 	bl	8006388 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d8f7      	bhi.n	80063c8 <HAL_Delay+0x28>
  {
  }
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000238 	.word	0x20000238

080063e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e033      	b.n	8006466 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fb fe76 	bl	80020f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d118      	bne.n	8006458 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800642e:	f023 0302 	bic.w	r3, r3, #2
 8006432:	f043 0202 	orr.w	r2, r3, #2
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f94a 	bl	80066d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	f043 0201 	orr.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
 8006456:	e001      	b.n	800645c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_ADC_ConfigChannel+0x1c>
 8006488:	2302      	movs	r3, #2
 800648a:	e113      	b.n	80066b4 <HAL_ADC_ConfigChannel+0x244>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b09      	cmp	r3, #9
 800649a:	d925      	bls.n	80064e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68d9      	ldr	r1, [r3, #12]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	4613      	mov	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	3b1e      	subs	r3, #30
 80064b2:	2207      	movs	r2, #7
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	43da      	mvns	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	400a      	ands	r2, r1
 80064c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68d9      	ldr	r1, [r3, #12]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	4618      	mov	r0, r3
 80064d4:	4603      	mov	r3, r0
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4403      	add	r3, r0
 80064da:	3b1e      	subs	r3, #30
 80064dc:	409a      	lsls	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	60da      	str	r2, [r3, #12]
 80064e6:	e022      	b.n	800652e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6919      	ldr	r1, [r3, #16]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	4613      	mov	r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	4413      	add	r3, r2
 80064fc:	2207      	movs	r2, #7
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	43da      	mvns	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	400a      	ands	r2, r1
 800650a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6919      	ldr	r1, [r3, #16]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	4618      	mov	r0, r3
 800651e:	4603      	mov	r3, r0
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4403      	add	r3, r0
 8006524:	409a      	lsls	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b06      	cmp	r3, #6
 8006534:	d824      	bhi.n	8006580 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	3b05      	subs	r3, #5
 8006548:	221f      	movs	r2, #31
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43da      	mvns	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	400a      	ands	r2, r1
 8006556:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	4618      	mov	r0, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	3b05      	subs	r3, #5
 8006572:	fa00 f203 	lsl.w	r2, r0, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	635a      	str	r2, [r3, #52]	; 0x34
 800657e:	e04c      	b.n	800661a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b0c      	cmp	r3, #12
 8006586:	d824      	bhi.n	80065d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	3b23      	subs	r3, #35	; 0x23
 800659a:	221f      	movs	r2, #31
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43da      	mvns	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	400a      	ands	r2, r1
 80065a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4618      	mov	r0, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	3b23      	subs	r3, #35	; 0x23
 80065c4:	fa00 f203 	lsl.w	r2, r0, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
 80065d0:	e023      	b.n	800661a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	3b41      	subs	r3, #65	; 0x41
 80065e4:	221f      	movs	r2, #31
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43da      	mvns	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	400a      	ands	r2, r1
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4618      	mov	r0, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	3b41      	subs	r3, #65	; 0x41
 800660e:	fa00 f203 	lsl.w	r2, r0, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800661a:	4b29      	ldr	r3, [pc, #164]	; (80066c0 <HAL_ADC_ConfigChannel+0x250>)
 800661c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a28      	ldr	r2, [pc, #160]	; (80066c4 <HAL_ADC_ConfigChannel+0x254>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10f      	bne.n	8006648 <HAL_ADC_ConfigChannel+0x1d8>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b12      	cmp	r3, #18
 800662e:	d10b      	bne.n	8006648 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <HAL_ADC_ConfigChannel+0x254>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d12b      	bne.n	80066aa <HAL_ADC_ConfigChannel+0x23a>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1c      	ldr	r2, [pc, #112]	; (80066c8 <HAL_ADC_ConfigChannel+0x258>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <HAL_ADC_ConfigChannel+0x1f4>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b11      	cmp	r3, #17
 8006662:	d122      	bne.n	80066aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a11      	ldr	r2, [pc, #68]	; (80066c8 <HAL_ADC_ConfigChannel+0x258>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d111      	bne.n	80066aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006686:	4b11      	ldr	r3, [pc, #68]	; (80066cc <HAL_ADC_ConfigChannel+0x25c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <HAL_ADC_ConfigChannel+0x260>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	0c9a      	lsrs	r2, r3, #18
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800669c:	e002      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f9      	bne.n	800669e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	40012300 	.word	0x40012300
 80066c4:	40012000 	.word	0x40012000
 80066c8:	10000012 	.word	0x10000012
 80066cc:	20000230 	.word	0x20000230
 80066d0:	431bde83 	.word	0x431bde83

080066d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066dc:	4b79      	ldr	r3, [pc, #484]	; (80068c4 <ADC_Init+0x1f0>)
 80066de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6859      	ldr	r1, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	021a      	lsls	r2, r3, #8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800672c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800674e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6899      	ldr	r1, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	4a58      	ldr	r2, [pc, #352]	; (80068c8 <ADC_Init+0x1f4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d022      	beq.n	80067b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800677a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6899      	ldr	r1, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800679c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6899      	ldr	r1, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	e00f      	b.n	80067d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0202 	bic.w	r2, r2, #2
 80067e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6899      	ldr	r1, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	7e1b      	ldrb	r3, [r3, #24]
 80067ec:	005a      	lsls	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01b      	beq.n	8006838 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800681e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6859      	ldr	r1, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	3b01      	subs	r3, #1
 800682c:	035a      	lsls	r2, r3, #13
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	e007      	b.n	8006848 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006846:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	3b01      	subs	r3, #1
 8006864:	051a      	lsls	r2, r3, #20
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800687c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800688a:	025a      	lsls	r2, r3, #9
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6899      	ldr	r1, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	029a      	lsls	r2, r3, #10
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40012300 	.word	0x40012300
 80068c8:	0f000001 	.word	0x0f000001

080068cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <__NVIC_SetPriorityGrouping+0x44>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068e8:	4013      	ands	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068fe:	4a04      	ldr	r2, [pc, #16]	; (8006910 <__NVIC_SetPriorityGrouping+0x44>)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	60d3      	str	r3, [r2, #12]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <__NVIC_GetPriorityGrouping+0x18>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	f003 0307 	and.w	r3, r3, #7
}
 8006922:	4618      	mov	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	db0b      	blt.n	800695a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	f003 021f 	and.w	r2, r3, #31
 8006948:	4907      	ldr	r1, [pc, #28]	; (8006968 <__NVIC_EnableIRQ+0x38>)
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2001      	movs	r0, #1
 8006952:	fa00 f202 	lsl.w	r2, r0, r2
 8006956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000e100 	.word	0xe000e100

0800696c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697c:	2b00      	cmp	r3, #0
 800697e:	db0a      	blt.n	8006996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	490c      	ldr	r1, [pc, #48]	; (80069b8 <__NVIC_SetPriority+0x4c>)
 8006986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698a:	0112      	lsls	r2, r2, #4
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	440b      	add	r3, r1
 8006990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006994:	e00a      	b.n	80069ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	4908      	ldr	r1, [pc, #32]	; (80069bc <__NVIC_SetPriority+0x50>)
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	3b04      	subs	r3, #4
 80069a4:	0112      	lsls	r2, r2, #4
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	440b      	add	r3, r1
 80069aa:	761a      	strb	r2, [r3, #24]
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	e000e100 	.word	0xe000e100
 80069bc:	e000ed00 	.word	0xe000ed00

080069c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	; 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f1c3 0307 	rsb	r3, r3, #7
 80069da:	2b04      	cmp	r3, #4
 80069dc:	bf28      	it	cs
 80069de:	2304      	movcs	r3, #4
 80069e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	3304      	adds	r3, #4
 80069e6:	2b06      	cmp	r3, #6
 80069e8:	d902      	bls.n	80069f0 <NVIC_EncodePriority+0x30>
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3b03      	subs	r3, #3
 80069ee:	e000      	b.n	80069f2 <NVIC_EncodePriority+0x32>
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43da      	mvns	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	401a      	ands	r2, r3
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a08:	f04f 31ff 	mov.w	r1, #4294967295
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	43d9      	mvns	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a18:	4313      	orrs	r3, r2
         );
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3724      	adds	r7, #36	; 0x24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a38:	d301      	bcc.n	8006a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00f      	b.n	8006a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a3e:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <SysTick_Config+0x40>)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a46:	210f      	movs	r1, #15
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	f7ff ff8e 	bl	800696c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <SysTick_Config+0x40>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a56:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <SysTick_Config+0x40>)
 8006a58:	2207      	movs	r2, #7
 8006a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	e000e010 	.word	0xe000e010

08006a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff29 	bl	80068cc <__NVIC_SetPriorityGrouping>
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	4603      	mov	r3, r0
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a94:	f7ff ff3e 	bl	8006914 <__NVIC_GetPriorityGrouping>
 8006a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	6978      	ldr	r0, [r7, #20]
 8006aa0:	f7ff ff8e 	bl	80069c0 <NVIC_EncodePriority>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff ff5d 	bl	800696c <__NVIC_SetPriority>
}
 8006ab2:	bf00      	nop
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff ff31 	bl	8006930 <__NVIC_EnableIRQ>
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff ffa2 	bl	8006a28 <SysTick_Config>
 8006ae4:	4603      	mov	r3, r0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006afc:	f7ff fc44 	bl	8006388 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e099      	b.n	8006c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b2c:	e00f      	b.n	8006b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b2e:	f7ff fc2b 	bl	8006388 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d908      	bls.n	8006b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2203      	movs	r2, #3
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e078      	b.n	8006c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e8      	bne.n	8006b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <HAL_DMA_Init+0x158>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d107      	bne.n	8006bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0307 	bic.w	r3, r3, #7
 8006bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d117      	bne.n	8006c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00e      	beq.n	8006c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fb0d 	bl	8007214 <DMA_CheckFifoParam>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2240      	movs	r2, #64	; 0x40
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e016      	b.n	8006c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fac4 	bl	80071a8 <DMA_CalcBaseAndBitshift>
 8006c20:	4603      	mov	r3, r0
 8006c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c28:	223f      	movs	r2, #63	; 0x3f
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	f010803f 	.word	0xf010803f

08006c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_DMA_Start_IT+0x26>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e040      	b.n	8006cf4 <HAL_DMA_Start_IT+0xa8>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d12f      	bne.n	8006ce6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fa56 	bl	800714c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	223f      	movs	r2, #63	; 0x3f
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0216 	orr.w	r2, r2, #22
 8006cba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0208 	orr.w	r2, r2, #8
 8006cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e005      	b.n	8006cf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006d0a:	f7ff fb3d 	bl	8006388 <HAL_GetTick>
 8006d0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d008      	beq.n	8006d2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e052      	b.n	8006dd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0216 	bic.w	r2, r2, #22
 8006d3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <HAL_DMA_Abort+0x62>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0208 	bic.w	r2, r2, #8
 8006d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d7e:	e013      	b.n	8006da8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d80:	f7ff fb02 	bl	8006388 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d90c      	bls.n	8006da8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2203      	movs	r2, #3
 8006d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e015      	b.n	8006dd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e4      	bne.n	8006d80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	223f      	movs	r2, #63	; 0x3f
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d004      	beq.n	8006dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2280      	movs	r2, #128	; 0x80
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e00c      	b.n	8006e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0201 	bic.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e2c:	4b8e      	ldr	r3, [pc, #568]	; (8007068 <HAL_DMA_IRQHandler+0x248>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a8e      	ldr	r2, [pc, #568]	; (800706c <HAL_DMA_IRQHandler+0x24c>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0a9b      	lsrs	r3, r3, #10
 8006e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01a      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0204 	bic.w	r2, r2, #4
 8006e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e78:	2208      	movs	r2, #8
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	2201      	movs	r2, #1
 8006e92:	409a      	lsls	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d012      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	2201      	movs	r2, #1
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f043 0202 	orr.w	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d012      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef0:	f043 0204 	orr.w	r2, r3, #4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efc:	2210      	movs	r2, #16
 8006efe:	409a      	lsls	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d043      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d03c      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d018      	beq.n	8006f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d108      	bne.n	8006f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d024      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
 8006f4e:	e01f      	b.n	8006f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01b      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
 8006f60:	e016      	b.n	8006f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d107      	bne.n	8006f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0208 	bic.w	r2, r2, #8
 8006f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f94:	2220      	movs	r2, #32
 8006f96:	409a      	lsls	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 808f 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8087 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	d136      	bne.n	8007038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0216 	bic.w	r2, r2, #22
 8006fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <HAL_DMA_IRQHandler+0x1da>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0208 	bic.w	r2, r2, #8
 8007008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	223f      	movs	r2, #63	; 0x3f
 8007010:	409a      	lsls	r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702a:	2b00      	cmp	r3, #0
 800702c:	d07e      	beq.n	800712c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
        }
        return;
 8007036:	e079      	b.n	800712c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01d      	beq.n	8007082 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10d      	bne.n	8007070 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	2b00      	cmp	r3, #0
 800705a:	d031      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
 8007064:	e02c      	b.n	80070c0 <HAL_DMA_IRQHandler+0x2a0>
 8007066:	bf00      	nop
 8007068:	20000230 	.word	0x20000230
 800706c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d023      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
 8007080:	e01e      	b.n	80070c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10f      	bne.n	80070b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0210 	bic.w	r2, r2, #16
 800709e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d032      	beq.n	800712e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d022      	beq.n	800711a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2205      	movs	r2, #5
 80070d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d307      	bcc.n	8007108 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f2      	bne.n	80070ec <HAL_DMA_IRQHandler+0x2cc>
 8007106:	e000      	b.n	800710a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007108:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
 800712a:	e000      	b.n	800712e <HAL_DMA_IRQHandler+0x30e>
        return;
 800712c:	bf00      	nop
    }
  }
}
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d108      	bne.n	800718c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800718a:	e007      	b.n	800719c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	60da      	str	r2, [r3, #12]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	3b10      	subs	r3, #16
 80071b8:	4a14      	ldr	r2, [pc, #80]	; (800720c <DMA_CalcBaseAndBitshift+0x64>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	091b      	lsrs	r3, r3, #4
 80071c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071c2:	4a13      	ldr	r2, [pc, #76]	; (8007210 <DMA_CalcBaseAndBitshift+0x68>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d909      	bls.n	80071ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	659a      	str	r2, [r3, #88]	; 0x58
 80071e8:	e007      	b.n	80071fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	aaaaaaab 	.word	0xaaaaaaab
 8007210:	08012ee4 	.word	0x08012ee4

08007214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d11f      	bne.n	800726e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d856      	bhi.n	80072e2 <DMA_CheckFifoParam+0xce>
 8007234:	a201      	add	r2, pc, #4	; (adr r2, 800723c <DMA_CheckFifoParam+0x28>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	0800724d 	.word	0x0800724d
 8007240:	0800725f 	.word	0x0800725f
 8007244:	0800724d 	.word	0x0800724d
 8007248:	080072e3 	.word	0x080072e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d046      	beq.n	80072e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800725c:	e043      	b.n	80072e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007266:	d140      	bne.n	80072ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800726c:	e03d      	b.n	80072ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007276:	d121      	bne.n	80072bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b03      	cmp	r3, #3
 800727c:	d837      	bhi.n	80072ee <DMA_CheckFifoParam+0xda>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <DMA_CheckFifoParam+0x70>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007295 	.word	0x08007295
 8007288:	0800729b 	.word	0x0800729b
 800728c:	08007295 	.word	0x08007295
 8007290:	080072ad 	.word	0x080072ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
      break;
 8007298:	e030      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d025      	beq.n	80072f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072aa:	e022      	b.n	80072f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072b4:	d11f      	bne.n	80072f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80072ba:	e01c      	b.n	80072f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d903      	bls.n	80072ca <DMA_CheckFifoParam+0xb6>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d003      	beq.n	80072d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80072c8:	e018      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]
      break;
 80072ce:	e015      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00e      	beq.n	80072fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
      break;
 80072e0:	e00b      	b.n	80072fa <DMA_CheckFifoParam+0xe6>
      break;
 80072e2:	bf00      	nop
 80072e4:	e00a      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072e6:	bf00      	nop
 80072e8:	e008      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072ea:	bf00      	nop
 80072ec:	e006      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072ee:	bf00      	nop
 80072f0:	e004      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072f2:	bf00      	nop
 80072f4:	e002      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;   
 80072f6:	bf00      	nop
 80072f8:	e000      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072fa:	bf00      	nop
    }
  } 
  
  return status; 
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop

0800730c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800730c:	b480      	push	{r7}
 800730e:	b089      	sub	sp, #36	; 0x24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800731e:	2300      	movs	r3, #0
 8007320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	e159      	b.n	80075dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007328:	2201      	movs	r2, #1
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4013      	ands	r3, r2
 800733a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	429a      	cmp	r2, r3
 8007342:	f040 8148 	bne.w	80075d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b01      	cmp	r3, #1
 8007350:	d005      	beq.n	800735e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800735a:	2b02      	cmp	r3, #2
 800735c:	d130      	bne.n	80073c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	2203      	movs	r2, #3
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4013      	ands	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4313      	orrs	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007394:	2201      	movs	r2, #1
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	4013      	ands	r3, r2
 80073a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	f003 0201 	and.w	r2, r3, #1
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d017      	beq.n	80073fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	2203      	movs	r2, #3
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	43db      	mvns	r3, r3
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	4013      	ands	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d123      	bne.n	8007450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	08da      	lsrs	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3208      	adds	r2, #8
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	220f      	movs	r2, #15
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4013      	ands	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4313      	orrs	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	08da      	lsrs	r2, r3, #3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3208      	adds	r2, #8
 800744a:	69b9      	ldr	r1, [r7, #24]
 800744c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	2203      	movs	r2, #3
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4013      	ands	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0203 	and.w	r2, r3, #3
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	4313      	orrs	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80a2 	beq.w	80075d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	4b57      	ldr	r3, [pc, #348]	; (80075f4 <HAL_GPIO_Init+0x2e8>)
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	4a56      	ldr	r2, [pc, #344]	; (80075f4 <HAL_GPIO_Init+0x2e8>)
 800749c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074a0:	6453      	str	r3, [r2, #68]	; 0x44
 80074a2:	4b54      	ldr	r3, [pc, #336]	; (80075f4 <HAL_GPIO_Init+0x2e8>)
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074ae:	4a52      	ldr	r2, [pc, #328]	; (80075f8 <HAL_GPIO_Init+0x2ec>)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	089b      	lsrs	r3, r3, #2
 80074b4:	3302      	adds	r3, #2
 80074b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	220f      	movs	r2, #15
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	43db      	mvns	r3, r3
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	4013      	ands	r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a49      	ldr	r2, [pc, #292]	; (80075fc <HAL_GPIO_Init+0x2f0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d019      	beq.n	800750e <HAL_GPIO_Init+0x202>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a48      	ldr	r2, [pc, #288]	; (8007600 <HAL_GPIO_Init+0x2f4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <HAL_GPIO_Init+0x1fe>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a47      	ldr	r2, [pc, #284]	; (8007604 <HAL_GPIO_Init+0x2f8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00d      	beq.n	8007506 <HAL_GPIO_Init+0x1fa>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a46      	ldr	r2, [pc, #280]	; (8007608 <HAL_GPIO_Init+0x2fc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d007      	beq.n	8007502 <HAL_GPIO_Init+0x1f6>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a45      	ldr	r2, [pc, #276]	; (800760c <HAL_GPIO_Init+0x300>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d101      	bne.n	80074fe <HAL_GPIO_Init+0x1f2>
 80074fa:	2304      	movs	r3, #4
 80074fc:	e008      	b.n	8007510 <HAL_GPIO_Init+0x204>
 80074fe:	2307      	movs	r3, #7
 8007500:	e006      	b.n	8007510 <HAL_GPIO_Init+0x204>
 8007502:	2303      	movs	r3, #3
 8007504:	e004      	b.n	8007510 <HAL_GPIO_Init+0x204>
 8007506:	2302      	movs	r3, #2
 8007508:	e002      	b.n	8007510 <HAL_GPIO_Init+0x204>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <HAL_GPIO_Init+0x204>
 800750e:	2300      	movs	r3, #0
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	f002 0203 	and.w	r2, r2, #3
 8007516:	0092      	lsls	r2, r2, #2
 8007518:	4093      	lsls	r3, r2
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007520:	4935      	ldr	r1, [pc, #212]	; (80075f8 <HAL_GPIO_Init+0x2ec>)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	089b      	lsrs	r3, r3, #2
 8007526:	3302      	adds	r3, #2
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800752e:	4b38      	ldr	r3, [pc, #224]	; (8007610 <HAL_GPIO_Init+0x304>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	43db      	mvns	r3, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	4013      	ands	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007552:	4a2f      	ldr	r2, [pc, #188]	; (8007610 <HAL_GPIO_Init+0x304>)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007558:	4b2d      	ldr	r3, [pc, #180]	; (8007610 <HAL_GPIO_Init+0x304>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	43db      	mvns	r3, r3
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	4013      	ands	r3, r2
 8007566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800757c:	4a24      	ldr	r2, [pc, #144]	; (8007610 <HAL_GPIO_Init+0x304>)
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007582:	4b23      	ldr	r3, [pc, #140]	; (8007610 <HAL_GPIO_Init+0x304>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	43db      	mvns	r3, r3
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	4013      	ands	r3, r2
 8007590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075a6:	4a1a      	ldr	r2, [pc, #104]	; (8007610 <HAL_GPIO_Init+0x304>)
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075ac:	4b18      	ldr	r3, [pc, #96]	; (8007610 <HAL_GPIO_Init+0x304>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	43db      	mvns	r3, r3
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	4013      	ands	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80075d0:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <HAL_GPIO_Init+0x304>)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	3301      	adds	r3, #1
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	f67f aea2 	bls.w	8007328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	3724      	adds	r7, #36	; 0x24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40023800 	.word	0x40023800
 80075f8:	40013800 	.word	0x40013800
 80075fc:	40020000 	.word	0x40020000
 8007600:	40020400 	.word	0x40020400
 8007604:	40020800 	.word	0x40020800
 8007608:	40020c00 	.word	0x40020c00
 800760c:	40021000 	.word	0x40021000
 8007610:	40013c00 	.word	0x40013c00

08007614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	887b      	ldrh	r3, [r7, #2]
 8007626:	4013      	ands	r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	e001      	b.n	8007636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
 8007650:	4613      	mov	r3, r2
 8007652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007654:	787b      	ldrb	r3, [r7, #1]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007660:	e003      	b.n	800766a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007662:	887b      	ldrh	r3, [r7, #2]
 8007664:	041a      	lsls	r2, r3, #16
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	619a      	str	r2, [r3, #24]
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e12b      	b.n	80078e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fa fe7a 	bl	8002398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2224      	movs	r2, #36	; 0x24
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80076dc:	f001 f888 	bl	80087f0 <HAL_RCC_GetPCLK1Freq>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4a81      	ldr	r2, [pc, #516]	; (80078ec <HAL_I2C_Init+0x274>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d807      	bhi.n	80076fc <HAL_I2C_Init+0x84>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a80      	ldr	r2, [pc, #512]	; (80078f0 <HAL_I2C_Init+0x278>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bf94      	ite	ls
 80076f4:	2301      	movls	r3, #1
 80076f6:	2300      	movhi	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	e006      	b.n	800770a <HAL_I2C_Init+0x92>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a7d      	ldr	r2, [pc, #500]	; (80078f4 <HAL_I2C_Init+0x27c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	bf94      	ite	ls
 8007704:	2301      	movls	r3, #1
 8007706:	2300      	movhi	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e0e7      	b.n	80078e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a78      	ldr	r2, [pc, #480]	; (80078f8 <HAL_I2C_Init+0x280>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	0c9b      	lsrs	r3, r3, #18
 800771c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4a6a      	ldr	r2, [pc, #424]	; (80078ec <HAL_I2C_Init+0x274>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d802      	bhi.n	800774c <HAL_I2C_Init+0xd4>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	3301      	adds	r3, #1
 800774a:	e009      	b.n	8007760 <HAL_I2C_Init+0xe8>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	4a69      	ldr	r2, [pc, #420]	; (80078fc <HAL_I2C_Init+0x284>)
 8007758:	fba2 2303 	umull	r2, r3, r2, r3
 800775c:	099b      	lsrs	r3, r3, #6
 800775e:	3301      	adds	r3, #1
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	430b      	orrs	r3, r1
 8007766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007772:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	495c      	ldr	r1, [pc, #368]	; (80078ec <HAL_I2C_Init+0x274>)
 800777c:	428b      	cmp	r3, r1
 800777e:	d819      	bhi.n	80077b4 <HAL_I2C_Init+0x13c>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	1e59      	subs	r1, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	fbb1 f3f3 	udiv	r3, r1, r3
 800778e:	1c59      	adds	r1, r3, #1
 8007790:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007794:	400b      	ands	r3, r1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <HAL_I2C_Init+0x138>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1e59      	subs	r1, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80077a8:	3301      	adds	r3, #1
 80077aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077ae:	e051      	b.n	8007854 <HAL_I2C_Init+0x1dc>
 80077b0:	2304      	movs	r3, #4
 80077b2:	e04f      	b.n	8007854 <HAL_I2C_Init+0x1dc>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d111      	bne.n	80077e0 <HAL_I2C_Init+0x168>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	1e58      	subs	r0, r3, #1
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6859      	ldr	r1, [r3, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	440b      	add	r3, r1
 80077ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ce:	3301      	adds	r3, #1
 80077d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e012      	b.n	8007806 <HAL_I2C_Init+0x18e>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1e58      	subs	r0, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6859      	ldr	r1, [r3, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	0099      	lsls	r1, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80077f6:	3301      	adds	r3, #1
 80077f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_I2C_Init+0x196>
 800780a:	2301      	movs	r3, #1
 800780c:	e022      	b.n	8007854 <HAL_I2C_Init+0x1dc>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10e      	bne.n	8007834 <HAL_I2C_Init+0x1bc>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	1e58      	subs	r0, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6859      	ldr	r1, [r3, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	440b      	add	r3, r1
 8007824:	fbb0 f3f3 	udiv	r3, r0, r3
 8007828:	3301      	adds	r3, #1
 800782a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800782e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007832:	e00f      	b.n	8007854 <HAL_I2C_Init+0x1dc>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1e58      	subs	r0, r3, #1
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6859      	ldr	r1, [r3, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	0099      	lsls	r1, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	fbb0 f3f3 	udiv	r3, r0, r3
 800784a:	3301      	adds	r3, #1
 800784c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	6809      	ldr	r1, [r1, #0]
 8007858:	4313      	orrs	r3, r2
 800785a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69da      	ldr	r2, [r3, #28]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6911      	ldr	r1, [r2, #16]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	68d2      	ldr	r2, [r2, #12]
 800788e:	4311      	orrs	r1, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6812      	ldr	r2, [r2, #0]
 8007894:	430b      	orrs	r3, r1
 8007896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695a      	ldr	r2, [r3, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	000186a0 	.word	0x000186a0
 80078f0:	001e847f 	.word	0x001e847f
 80078f4:	003d08ff 	.word	0x003d08ff
 80078f8:	431bde83 	.word	0x431bde83
 80078fc:	10624dd3 	.word	0x10624dd3

08007900 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	461a      	mov	r2, r3
 800790c:	460b      	mov	r3, r1
 800790e:	817b      	strh	r3, [r7, #10]
 8007910:	4613      	mov	r3, r2
 8007912:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007914:	f7fe fd38 	bl	8006388 <HAL_GetTick>
 8007918:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b20      	cmp	r3, #32
 8007924:	f040 80e0 	bne.w	8007ae8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2319      	movs	r3, #25
 800792e:	2201      	movs	r2, #1
 8007930:	4970      	ldr	r1, [pc, #448]	; (8007af4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f964 	bl	8007c00 <I2C_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800793e:	2302      	movs	r3, #2
 8007940:	e0d3      	b.n	8007aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_I2C_Master_Transmit+0x50>
 800794c:	2302      	movs	r3, #2
 800794e:	e0cc      	b.n	8007aea <HAL_I2C_Master_Transmit+0x1ea>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b01      	cmp	r3, #1
 8007964:	d007      	beq.n	8007976 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f042 0201 	orr.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007984:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2221      	movs	r2, #33	; 0x21
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2210      	movs	r2, #16
 8007992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	893a      	ldrh	r2, [r7, #8]
 80079a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a50      	ldr	r2, [pc, #320]	; (8007af8 <HAL_I2C_Master_Transmit+0x1f8>)
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80079b8:	8979      	ldrh	r1, [r7, #10]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f89c 	bl	8007afc <I2C_MasterRequestWrite>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e08d      	b.n	8007aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80079e4:	e066      	b.n	8007ab4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	6a39      	ldr	r1, [r7, #32]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f9de 	bl	8007dac <I2C_WaitOnTXEFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d107      	bne.n	8007a0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e06b      	b.n	8007aea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d11b      	bne.n	8007a88 <HAL_I2C_Master_Transmit+0x188>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d017      	beq.n	8007a88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	6a39      	ldr	r1, [r7, #32]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f9ce 	bl	8007e2e <I2C_WaitOnBTFFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d107      	bne.n	8007ab0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e01a      	b.n	8007aea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d194      	bne.n	80079e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e000      	b.n	8007aea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
  }
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	00100002 	.word	0x00100002
 8007af8:	ffff0000 	.word	0xffff0000

08007afc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d006      	beq.n	8007b26 <I2C_MasterRequestWrite+0x2a>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d003      	beq.n	8007b26 <I2C_MasterRequestWrite+0x2a>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b24:	d108      	bne.n	8007b38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e00b      	b.n	8007b50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	2b12      	cmp	r3, #18
 8007b3e:	d107      	bne.n	8007b50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f84f 	bl	8007c00 <I2C_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00d      	beq.n	8007b84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b76:	d103      	bne.n	8007b80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e035      	b.n	8007bf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b8c:	d108      	bne.n	8007ba0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b9c:	611a      	str	r2, [r3, #16]
 8007b9e:	e01b      	b.n	8007bd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ba0:	897b      	ldrh	r3, [r7, #10]
 8007ba2:	11db      	asrs	r3, r3, #7
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f003 0306 	and.w	r3, r3, #6
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f063 030f 	orn	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	490e      	ldr	r1, [pc, #56]	; (8007bf8 <I2C_MasterRequestWrite+0xfc>)
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 f875 	bl	8007cae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e010      	b.n	8007bf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bce:	897b      	ldrh	r3, [r7, #10]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	4907      	ldr	r1, [pc, #28]	; (8007bfc <I2C_MasterRequestWrite+0x100>)
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f865 	bl	8007cae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	00010008 	.word	0x00010008
 8007bfc:	00010002 	.word	0x00010002

08007c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c10:	e025      	b.n	8007c5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d021      	beq.n	8007c5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c1a:	f7fe fbb5 	bl	8006388 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d302      	bcc.n	8007c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d116      	bne.n	8007c5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e023      	b.n	8007ca6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d10d      	bne.n	8007c84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	43da      	mvns	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4013      	ands	r3, r2
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bf0c      	ite	eq
 8007c7a:	2301      	moveq	r3, #1
 8007c7c:	2300      	movne	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	e00c      	b.n	8007c9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	43da      	mvns	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d0b6      	beq.n	8007c12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cbc:	e051      	b.n	8007d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ccc:	d123      	bne.n	8007d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ce6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f043 0204 	orr.w	r2, r3, #4
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e046      	b.n	8007da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d021      	beq.n	8007d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1e:	f7fe fb33 	bl	8006388 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d302      	bcc.n	8007d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d116      	bne.n	8007d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e020      	b.n	8007da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d10c      	bne.n	8007d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	43da      	mvns	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4013      	ands	r3, r2
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf14      	ite	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	2300      	moveq	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	e00b      	b.n	8007d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	43da      	mvns	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4013      	ands	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d18d      	bne.n	8007cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007db8:	e02d      	b.n	8007e16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f878 	bl	8007eb0 <I2C_IsAcknowledgeFailed>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e02d      	b.n	8007e26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d021      	beq.n	8007e16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd2:	f7fe fad9 	bl	8006388 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d302      	bcc.n	8007de8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d116      	bne.n	8007e16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	f043 0220 	orr.w	r2, r3, #32
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e007      	b.n	8007e26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d1ca      	bne.n	8007dba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e3a:	e02d      	b.n	8007e98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f837 	bl	8007eb0 <I2C_IsAcknowledgeFailed>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e02d      	b.n	8007ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e52:	d021      	beq.n	8007e98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e54:	f7fe fa98 	bl	8006388 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d302      	bcc.n	8007e6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d116      	bne.n	8007e98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e007      	b.n	8007ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f003 0304 	and.w	r3, r3, #4
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d1ca      	bne.n	8007e3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec6:	d11b      	bne.n	8007f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	f043 0204 	orr.w	r2, r3, #4
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e267      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d075      	beq.n	800801a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f2e:	4b88      	ldr	r3, [pc, #544]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 030c 	and.w	r3, r3, #12
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d00c      	beq.n	8007f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f3a:	4b85      	ldr	r3, [pc, #532]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d112      	bne.n	8007f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f46:	4b82      	ldr	r3, [pc, #520]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f52:	d10b      	bne.n	8007f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f54:	4b7e      	ldr	r3, [pc, #504]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d05b      	beq.n	8008018 <HAL_RCC_OscConfig+0x108>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d157      	bne.n	8008018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e242      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f74:	d106      	bne.n	8007f84 <HAL_RCC_OscConfig+0x74>
 8007f76:	4b76      	ldr	r3, [pc, #472]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a75      	ldr	r2, [pc, #468]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	e01d      	b.n	8007fc0 <HAL_RCC_OscConfig+0xb0>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x98>
 8007f8e:	4b70      	ldr	r3, [pc, #448]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a6f      	ldr	r2, [pc, #444]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	4b6d      	ldr	r3, [pc, #436]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a6c      	ldr	r2, [pc, #432]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e00b      	b.n	8007fc0 <HAL_RCC_OscConfig+0xb0>
 8007fa8:	4b69      	ldr	r3, [pc, #420]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a68      	ldr	r2, [pc, #416]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	4b66      	ldr	r3, [pc, #408]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a65      	ldr	r2, [pc, #404]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d013      	beq.n	8007ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc8:	f7fe f9de 	bl	8006388 <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fd0:	f7fe f9da 	bl	8006388 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b64      	cmp	r3, #100	; 0x64
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e207      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fe2:	4b5b      	ldr	r3, [pc, #364]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0f0      	beq.n	8007fd0 <HAL_RCC_OscConfig+0xc0>
 8007fee:	e014      	b.n	800801a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ff0:	f7fe f9ca 	bl	8006388 <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ff8:	f7fe f9c6 	bl	8006388 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	; 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e1f3      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800800a:	4b51      	ldr	r3, [pc, #324]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCC_OscConfig+0xe8>
 8008016:	e000      	b.n	800801a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d063      	beq.n	80080ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008026:	4b4a      	ldr	r3, [pc, #296]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 030c 	and.w	r3, r3, #12
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008032:	4b47      	ldr	r3, [pc, #284]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800803a:	2b08      	cmp	r3, #8
 800803c:	d11c      	bne.n	8008078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800803e:	4b44      	ldr	r3, [pc, #272]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d116      	bne.n	8008078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800804a:	4b41      	ldr	r3, [pc, #260]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <HAL_RCC_OscConfig+0x152>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d001      	beq.n	8008062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e1c7      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008062:	4b3b      	ldr	r3, [pc, #236]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4937      	ldr	r1, [pc, #220]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8008072:	4313      	orrs	r3, r2
 8008074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008076:	e03a      	b.n	80080ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d020      	beq.n	80080c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008080:	4b34      	ldr	r3, [pc, #208]	; (8008154 <HAL_RCC_OscConfig+0x244>)
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008086:	f7fe f97f 	bl	8006388 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800808e:	f7fe f97b 	bl	8006388 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e1a8      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a0:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0f0      	beq.n	800808e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ac:	4b28      	ldr	r3, [pc, #160]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	4925      	ldr	r1, [pc, #148]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	600b      	str	r3, [r1, #0]
 80080c0:	e015      	b.n	80080ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080c2:	4b24      	ldr	r3, [pc, #144]	; (8008154 <HAL_RCC_OscConfig+0x244>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7fe f95e 	bl	8006388 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d0:	f7fe f95a 	bl	8006388 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e187      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080e2:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0308 	and.w	r3, r3, #8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d036      	beq.n	8008168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d016      	beq.n	8008130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <HAL_RCC_OscConfig+0x248>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008108:	f7fe f93e 	bl	8006388 <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008110:	f7fe f93a 	bl	8006388 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e167      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008122:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <HAL_RCC_OscConfig+0x240>)
 8008124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f0      	beq.n	8008110 <HAL_RCC_OscConfig+0x200>
 800812e:	e01b      	b.n	8008168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008130:	4b09      	ldr	r3, [pc, #36]	; (8008158 <HAL_RCC_OscConfig+0x248>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008136:	f7fe f927 	bl	8006388 <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800813c:	e00e      	b.n	800815c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800813e:	f7fe f923 	bl	8006388 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d907      	bls.n	800815c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e150      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
 8008150:	40023800 	.word	0x40023800
 8008154:	42470000 	.word	0x42470000
 8008158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800815c:	4b88      	ldr	r3, [pc, #544]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800815e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1ea      	bne.n	800813e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 8097 	beq.w	80082a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800817a:	4b81      	ldr	r3, [pc, #516]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10f      	bne.n	80081a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	4b7d      	ldr	r3, [pc, #500]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	4a7c      	ldr	r2, [pc, #496]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008194:	6413      	str	r3, [r2, #64]	; 0x40
 8008196:	4b7a      	ldr	r3, [pc, #488]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819e:	60bb      	str	r3, [r7, #8]
 80081a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081a2:	2301      	movs	r3, #1
 80081a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081a6:	4b77      	ldr	r3, [pc, #476]	; (8008384 <HAL_RCC_OscConfig+0x474>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d118      	bne.n	80081e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081b2:	4b74      	ldr	r3, [pc, #464]	; (8008384 <HAL_RCC_OscConfig+0x474>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a73      	ldr	r2, [pc, #460]	; (8008384 <HAL_RCC_OscConfig+0x474>)
 80081b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081be:	f7fe f8e3 	bl	8006388 <HAL_GetTick>
 80081c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081c4:	e008      	b.n	80081d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c6:	f7fe f8df 	bl	8006388 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e10c      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081d8:	4b6a      	ldr	r3, [pc, #424]	; (8008384 <HAL_RCC_OscConfig+0x474>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0f0      	beq.n	80081c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d106      	bne.n	80081fa <HAL_RCC_OscConfig+0x2ea>
 80081ec:	4b64      	ldr	r3, [pc, #400]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f0:	4a63      	ldr	r2, [pc, #396]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6713      	str	r3, [r2, #112]	; 0x70
 80081f8:	e01c      	b.n	8008234 <HAL_RCC_OscConfig+0x324>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d10c      	bne.n	800821c <HAL_RCC_OscConfig+0x30c>
 8008202:	4b5f      	ldr	r3, [pc, #380]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	4a5e      	ldr	r2, [pc, #376]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008208:	f043 0304 	orr.w	r3, r3, #4
 800820c:	6713      	str	r3, [r2, #112]	; 0x70
 800820e:	4b5c      	ldr	r3, [pc, #368]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	4a5b      	ldr	r2, [pc, #364]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	6713      	str	r3, [r2, #112]	; 0x70
 800821a:	e00b      	b.n	8008234 <HAL_RCC_OscConfig+0x324>
 800821c:	4b58      	ldr	r3, [pc, #352]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800821e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008220:	4a57      	ldr	r2, [pc, #348]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008222:	f023 0301 	bic.w	r3, r3, #1
 8008226:	6713      	str	r3, [r2, #112]	; 0x70
 8008228:	4b55      	ldr	r3, [pc, #340]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800822a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822c:	4a54      	ldr	r2, [pc, #336]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800822e:	f023 0304 	bic.w	r3, r3, #4
 8008232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d015      	beq.n	8008268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823c:	f7fe f8a4 	bl	8006388 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008242:	e00a      	b.n	800825a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008244:	f7fe f8a0 	bl	8006388 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008252:	4293      	cmp	r3, r2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e0cb      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800825a:	4b49      	ldr	r3, [pc, #292]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0ee      	beq.n	8008244 <HAL_RCC_OscConfig+0x334>
 8008266:	e014      	b.n	8008292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008268:	f7fe f88e 	bl	8006388 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800826e:	e00a      	b.n	8008286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008270:	f7fe f88a 	bl	8006388 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f241 3288 	movw	r2, #5000	; 0x1388
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e0b5      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008286:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ee      	bne.n	8008270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d105      	bne.n	80082a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008298:	4b39      	ldr	r3, [pc, #228]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	4a38      	ldr	r2, [pc, #224]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800829e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80a1 	beq.w	80083f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082ae:	4b34      	ldr	r3, [pc, #208]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 030c 	and.w	r3, r3, #12
 80082b6:	2b08      	cmp	r3, #8
 80082b8:	d05c      	beq.n	8008374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d141      	bne.n	8008346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <HAL_RCC_OscConfig+0x478>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c8:	f7fe f85e 	bl	8006388 <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082d0:	f7fe f85a 	bl	8006388 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e087      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082e2:	4b27      	ldr	r3, [pc, #156]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f0      	bne.n	80082d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69da      	ldr	r2, [r3, #28]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	019b      	lsls	r3, r3, #6
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	3b01      	subs	r3, #1
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	061b      	lsls	r3, r3, #24
 8008312:	491b      	ldr	r1, [pc, #108]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008314:	4313      	orrs	r3, r2
 8008316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <HAL_RCC_OscConfig+0x478>)
 800831a:	2201      	movs	r2, #1
 800831c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800831e:	f7fe f833 	bl	8006388 <HAL_GetTick>
 8008322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008326:	f7fe f82f 	bl	8006388 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e05c      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0f0      	beq.n	8008326 <HAL_RCC_OscConfig+0x416>
 8008344:	e054      	b.n	80083f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <HAL_RCC_OscConfig+0x478>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800834c:	f7fe f81c 	bl	8006388 <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008354:	f7fe f818 	bl	8006388 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e045      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <HAL_RCC_OscConfig+0x470>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f0      	bne.n	8008354 <HAL_RCC_OscConfig+0x444>
 8008372:	e03d      	b.n	80083f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d107      	bne.n	800838c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e038      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
 8008380:	40023800 	.word	0x40023800
 8008384:	40007000 	.word	0x40007000
 8008388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800838c:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <HAL_RCC_OscConfig+0x4ec>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d028      	beq.n	80083ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d121      	bne.n	80083ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d11a      	bne.n	80083ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083bc:	4013      	ands	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d111      	bne.n	80083ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	3b01      	subs	r3, #1
 80083d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083d8:	429a      	cmp	r2, r3
 80083da:	d107      	bne.n	80083ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d001      	beq.n	80083f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	40023800 	.word	0x40023800

08008400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0cc      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008414:	4b68      	ldr	r3, [pc, #416]	; (80085b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d90c      	bls.n	800843c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008422:	4b65      	ldr	r3, [pc, #404]	; (80085b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800842a:	4b63      	ldr	r3, [pc, #396]	; (80085b8 <HAL_RCC_ClockConfig+0x1b8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d001      	beq.n	800843c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0b8      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d020      	beq.n	800848a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008454:	4b59      	ldr	r3, [pc, #356]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	4a58      	ldr	r2, [pc, #352]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800845e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800846c:	4b53      	ldr	r3, [pc, #332]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	4a52      	ldr	r2, [pc, #328]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008478:	4b50      	ldr	r3, [pc, #320]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	494d      	ldr	r1, [pc, #308]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008486:	4313      	orrs	r3, r2
 8008488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d044      	beq.n	8008520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	4b47      	ldr	r3, [pc, #284]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d119      	bne.n	80084de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e07f      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d003      	beq.n	80084be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d107      	bne.n	80084ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084be:	4b3f      	ldr	r3, [pc, #252]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d109      	bne.n	80084de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e06f      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084ce:	4b3b      	ldr	r3, [pc, #236]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e067      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084de:	4b37      	ldr	r3, [pc, #220]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f023 0203 	bic.w	r2, r3, #3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	4934      	ldr	r1, [pc, #208]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084f0:	f7fd ff4a 	bl	8006388 <HAL_GetTick>
 80084f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084f6:	e00a      	b.n	800850e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084f8:	f7fd ff46 	bl	8006388 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	f241 3288 	movw	r2, #5000	; 0x1388
 8008506:	4293      	cmp	r3, r2
 8008508:	d901      	bls.n	800850e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e04f      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850e:	4b2b      	ldr	r3, [pc, #172]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 020c 	and.w	r2, r3, #12
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	429a      	cmp	r2, r3
 800851e:	d1eb      	bne.n	80084f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d20c      	bcs.n	8008548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008536:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e032      	b.n	80085ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008554:	4b19      	ldr	r3, [pc, #100]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	4916      	ldr	r1, [pc, #88]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008562:	4313      	orrs	r3, r2
 8008564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	490e      	ldr	r1, [pc, #56]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	4313      	orrs	r3, r2
 8008584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008586:	f000 f821 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 800858a:	4602      	mov	r2, r0
 800858c:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	091b      	lsrs	r3, r3, #4
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	490a      	ldr	r1, [pc, #40]	; (80085c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008598:	5ccb      	ldrb	r3, [r1, r3]
 800859a:	fa22 f303 	lsr.w	r3, r2, r3
 800859e:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <HAL_RCC_ClockConfig+0x1c4>)
 80085a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_RCC_ClockConfig+0x1c8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd feaa 	bl	8006300 <HAL_InitTick>

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40023c00 	.word	0x40023c00
 80085bc:	40023800 	.word	0x40023800
 80085c0:	08012ecc 	.word	0x08012ecc
 80085c4:	20000230 	.word	0x20000230
 80085c8:	20000234 	.word	0x20000234

080085cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d0:	b094      	sub	sp, #80	; 0x50
 80085d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	647b      	str	r3, [r7, #68]	; 0x44
 80085d8:	2300      	movs	r3, #0
 80085da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085dc:	2300      	movs	r3, #0
 80085de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085e4:	4b79      	ldr	r3, [pc, #484]	; (80087cc <HAL_RCC_GetSysClockFreq+0x200>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f003 030c 	and.w	r3, r3, #12
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d00d      	beq.n	800860c <HAL_RCC_GetSysClockFreq+0x40>
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	f200 80e1 	bhi.w	80087b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_RCC_GetSysClockFreq+0x34>
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d003      	beq.n	8008606 <HAL_RCC_GetSysClockFreq+0x3a>
 80085fe:	e0db      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008600:	4b73      	ldr	r3, [pc, #460]	; (80087d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008602:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008604:	e0db      	b.n	80087be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008606:	4b73      	ldr	r3, [pc, #460]	; (80087d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800860a:	e0d8      	b.n	80087be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800860c:	4b6f      	ldr	r3, [pc, #444]	; (80087cc <HAL_RCC_GetSysClockFreq+0x200>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008614:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008616:	4b6d      	ldr	r3, [pc, #436]	; (80087cc <HAL_RCC_GetSysClockFreq+0x200>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d063      	beq.n	80086ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008622:	4b6a      	ldr	r3, [pc, #424]	; (80087cc <HAL_RCC_GetSysClockFreq+0x200>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	099b      	lsrs	r3, r3, #6
 8008628:	2200      	movs	r2, #0
 800862a:	63bb      	str	r3, [r7, #56]	; 0x38
 800862c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	633b      	str	r3, [r7, #48]	; 0x30
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
 800863a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f04f 0100 	mov.w	r1, #0
 800864a:	0159      	lsls	r1, r3, #5
 800864c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008650:	0150      	lsls	r0, r2, #5
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4621      	mov	r1, r4
 8008658:	1a51      	subs	r1, r2, r1
 800865a:	6139      	str	r1, [r7, #16]
 800865c:	4629      	mov	r1, r5
 800865e:	eb63 0301 	sbc.w	r3, r3, r1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	f04f 0300 	mov.w	r3, #0
 800866c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008670:	4659      	mov	r1, fp
 8008672:	018b      	lsls	r3, r1, #6
 8008674:	4651      	mov	r1, sl
 8008676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800867a:	4651      	mov	r1, sl
 800867c:	018a      	lsls	r2, r1, #6
 800867e:	4651      	mov	r1, sl
 8008680:	ebb2 0801 	subs.w	r8, r2, r1
 8008684:	4659      	mov	r1, fp
 8008686:	eb63 0901 	sbc.w	r9, r3, r1
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800869a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800869e:	4690      	mov	r8, r2
 80086a0:	4699      	mov	r9, r3
 80086a2:	4623      	mov	r3, r4
 80086a4:	eb18 0303 	adds.w	r3, r8, r3
 80086a8:	60bb      	str	r3, [r7, #8]
 80086aa:	462b      	mov	r3, r5
 80086ac:	eb49 0303 	adc.w	r3, r9, r3
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086be:	4629      	mov	r1, r5
 80086c0:	024b      	lsls	r3, r1, #9
 80086c2:	4621      	mov	r1, r4
 80086c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086c8:	4621      	mov	r1, r4
 80086ca:	024a      	lsls	r2, r1, #9
 80086cc:	4610      	mov	r0, r2
 80086ce:	4619      	mov	r1, r3
 80086d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d2:	2200      	movs	r2, #0
 80086d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80086d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086dc:	f7f8 fadc 	bl	8000c98 <__aeabi_uldivmod>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4613      	mov	r3, r2
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e8:	e058      	b.n	800879c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086ea:	4b38      	ldr	r3, [pc, #224]	; (80087cc <HAL_RCC_GetSysClockFreq+0x200>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	099b      	lsrs	r3, r3, #6
 80086f0:	2200      	movs	r2, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	4611      	mov	r1, r2
 80086f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80086fa:	623b      	str	r3, [r7, #32]
 80086fc:	2300      	movs	r3, #0
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008700:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008704:	4642      	mov	r2, r8
 8008706:	464b      	mov	r3, r9
 8008708:	f04f 0000 	mov.w	r0, #0
 800870c:	f04f 0100 	mov.w	r1, #0
 8008710:	0159      	lsls	r1, r3, #5
 8008712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008716:	0150      	lsls	r0, r2, #5
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4641      	mov	r1, r8
 800871e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008722:	4649      	mov	r1, r9
 8008724:	eb63 0b01 	sbc.w	fp, r3, r1
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008734:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008738:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800873c:	ebb2 040a 	subs.w	r4, r2, sl
 8008740:	eb63 050b 	sbc.w	r5, r3, fp
 8008744:	f04f 0200 	mov.w	r2, #0
 8008748:	f04f 0300 	mov.w	r3, #0
 800874c:	00eb      	lsls	r3, r5, #3
 800874e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008752:	00e2      	lsls	r2, r4, #3
 8008754:	4614      	mov	r4, r2
 8008756:	461d      	mov	r5, r3
 8008758:	4643      	mov	r3, r8
 800875a:	18e3      	adds	r3, r4, r3
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	464b      	mov	r3, r9
 8008760:	eb45 0303 	adc.w	r3, r5, r3
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008772:	4629      	mov	r1, r5
 8008774:	028b      	lsls	r3, r1, #10
 8008776:	4621      	mov	r1, r4
 8008778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800877c:	4621      	mov	r1, r4
 800877e:	028a      	lsls	r2, r1, #10
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008786:	2200      	movs	r2, #0
 8008788:	61bb      	str	r3, [r7, #24]
 800878a:	61fa      	str	r2, [r7, #28]
 800878c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008790:	f7f8 fa82 	bl	8000c98 <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4613      	mov	r3, r2
 800879a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800879c:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <HAL_RCC_GetSysClockFreq+0x200>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	0c1b      	lsrs	r3, r3, #16
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	3301      	adds	r3, #1
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80087ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087b6:	e002      	b.n	80087be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80087ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3750      	adds	r7, #80	; 0x50
 80087c4:	46bd      	mov	sp, r7
 80087c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ca:	bf00      	nop
 80087cc:	40023800 	.word	0x40023800
 80087d0:	00f42400 	.word	0x00f42400
 80087d4:	007a1200 	.word	0x007a1200

080087d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087dc:	4b03      	ldr	r3, [pc, #12]	; (80087ec <HAL_RCC_GetHCLKFreq+0x14>)
 80087de:	681b      	ldr	r3, [r3, #0]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20000230 	.word	0x20000230

080087f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087f4:	f7ff fff0 	bl	80087d8 <HAL_RCC_GetHCLKFreq>
 80087f8:	4602      	mov	r2, r0
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	0a9b      	lsrs	r3, r3, #10
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	4903      	ldr	r1, [pc, #12]	; (8008814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008806:	5ccb      	ldrb	r3, [r1, r3]
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40023800 	.word	0x40023800
 8008814:	08012edc 	.word	0x08012edc

08008818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800881c:	f7ff ffdc 	bl	80087d8 <HAL_RCC_GetHCLKFreq>
 8008820:	4602      	mov	r2, r0
 8008822:	4b05      	ldr	r3, [pc, #20]	; (8008838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	0b5b      	lsrs	r3, r3, #13
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	4903      	ldr	r1, [pc, #12]	; (800883c <HAL_RCC_GetPCLK2Freq+0x24>)
 800882e:	5ccb      	ldrb	r3, [r1, r3]
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008834:	4618      	mov	r0, r3
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40023800 	.word	0x40023800
 800883c:	08012edc 	.word	0x08012edc

08008840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e04c      	b.n	80088ec <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d111      	bne.n	8008882 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 ff50 	bl	800a70c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <HAL_TIM_Base_Init+0xb4>)
 8008878:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3304      	adds	r3, #4
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f001 fc6d 	bl	800a174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	0800561d 	.word	0x0800561d

080088f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d001      	beq.n	8008910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e03c      	b.n	800898a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a1e      	ldr	r2, [pc, #120]	; (8008998 <HAL_TIM_Base_Start+0xa0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d018      	beq.n	8008954 <HAL_TIM_Base_Start+0x5c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892a:	d013      	beq.n	8008954 <HAL_TIM_Base_Start+0x5c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1a      	ldr	r2, [pc, #104]	; (800899c <HAL_TIM_Base_Start+0xa4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00e      	beq.n	8008954 <HAL_TIM_Base_Start+0x5c>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <HAL_TIM_Base_Start+0xa8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d009      	beq.n	8008954 <HAL_TIM_Base_Start+0x5c>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <HAL_TIM_Base_Start+0xac>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d004      	beq.n	8008954 <HAL_TIM_Base_Start+0x5c>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a16      	ldr	r2, [pc, #88]	; (80089a8 <HAL_TIM_Base_Start+0xb0>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d111      	bne.n	8008978 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b06      	cmp	r3, #6
 8008964:	d010      	beq.n	8008988 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f042 0201 	orr.w	r2, r2, #1
 8008974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008976:	e007      	b.n	8008988 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0201 	orr.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	40010000 	.word	0x40010000
 800899c:	40000400 	.word	0x40000400
 80089a0:	40000800 	.word	0x40000800
 80089a4:	40000c00 	.word	0x40000c00
 80089a8:	40014000 	.word	0x40014000

080089ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d001      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e044      	b.n	8008a4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1e      	ldr	r2, [pc, #120]	; (8008a5c <HAL_TIM_Base_Start_IT+0xb0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d018      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x6c>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ee:	d013      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x6c>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1a      	ldr	r2, [pc, #104]	; (8008a60 <HAL_TIM_Base_Start_IT+0xb4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00e      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x6c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a19      	ldr	r2, [pc, #100]	; (8008a64 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d009      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x6c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a17      	ldr	r2, [pc, #92]	; (8008a68 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x6c>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a16      	ldr	r2, [pc, #88]	; (8008a6c <HAL_TIM_Base_Start_IT+0xc0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d111      	bne.n	8008a3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b06      	cmp	r3, #6
 8008a28:	d010      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0201 	orr.w	r2, r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3a:	e007      	b.n	8008a4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40000400 	.word	0x40000400
 8008a64:	40000800 	.word	0x40000800
 8008a68:	40000c00 	.word	0x40000c00
 8008a6c:	40014000 	.word	0x40014000

08008a70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e04c      	b.n	8008b1c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d111      	bne.n	8008ab2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 fe38 	bl	800a70c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a1f      	ldr	r2, [pc, #124]	; (8008b24 <HAL_TIM_OC_Init+0xb4>)
 8008aa8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f001 fb55 	bl	800a174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	08008b29 	.word	0x08008b29

08008b28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e04c      	b.n	8008be8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d111      	bne.n	8008b7e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 fdd2 	bl	800a70c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a1f      	ldr	r2, [pc, #124]	; (8008bf0 <HAL_TIM_PWM_Init+0xb4>)
 8008b74:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2202      	movs	r2, #2
 8008b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f001 faef 	bl	800a174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	08008bf5 	.word	0x08008bf5

08008bf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <HAL_TIM_PWM_Start+0x24>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	e022      	b.n	8008c72 <HAL_TIM_PWM_Start+0x6a>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d109      	bne.n	8008c46 <HAL_TIM_PWM_Start+0x3e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	bf14      	ite	ne
 8008c3e:	2301      	movne	r3, #1
 8008c40:	2300      	moveq	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	e015      	b.n	8008c72 <HAL_TIM_PWM_Start+0x6a>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d109      	bne.n	8008c60 <HAL_TIM_PWM_Start+0x58>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	bf14      	ite	ne
 8008c58:	2301      	movne	r3, #1
 8008c5a:	2300      	moveq	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	e008      	b.n	8008c72 <HAL_TIM_PWM_Start+0x6a>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	bf14      	ite	ne
 8008c6c:	2301      	movne	r3, #1
 8008c6e:	2300      	moveq	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e068      	b.n	8008d4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIM_PWM_Start+0x82>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c88:	e013      	b.n	8008cb2 <HAL_TIM_PWM_Start+0xaa>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_PWM_Start+0x92>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c98:	e00b      	b.n	8008cb2 <HAL_TIM_PWM_Start+0xaa>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d104      	bne.n	8008caa <HAL_TIM_PWM_Start+0xa2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ca8:	e003      	b.n	8008cb2 <HAL_TIM_PWM_Start+0xaa>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fd00 	bl	800a6c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a23      	ldr	r2, [pc, #140]	; (8008d54 <HAL_TIM_PWM_Start+0x14c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d107      	bne.n	8008cda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <HAL_TIM_PWM_Start+0x14c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d018      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x10e>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d013      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x10e>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a19      	ldr	r2, [pc, #100]	; (8008d58 <HAL_TIM_PWM_Start+0x150>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00e      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x10e>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a17      	ldr	r2, [pc, #92]	; (8008d5c <HAL_TIM_PWM_Start+0x154>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d009      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x10e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a16      	ldr	r2, [pc, #88]	; (8008d60 <HAL_TIM_PWM_Start+0x158>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d004      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x10e>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a14      	ldr	r2, [pc, #80]	; (8008d64 <HAL_TIM_PWM_Start+0x15c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d111      	bne.n	8008d3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b06      	cmp	r3, #6
 8008d26:	d010      	beq.n	8008d4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0201 	orr.w	r2, r2, #1
 8008d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d38:	e007      	b.n	8008d4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0201 	orr.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40014000 	.word	0x40014000

08008d68 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	e022      	b.n	8008dda <HAL_TIM_PWM_Start_DMA+0x72>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d109      	bne.n	8008dae <HAL_TIM_PWM_Start_DMA+0x46>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	bf0c      	ite	eq
 8008da6:	2301      	moveq	r3, #1
 8008da8:	2300      	movne	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	e015      	b.n	8008dda <HAL_TIM_PWM_Start_DMA+0x72>
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d109      	bne.n	8008dc8 <HAL_TIM_PWM_Start_DMA+0x60>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2301      	moveq	r3, #1
 8008dc2:	2300      	movne	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	e008      	b.n	8008dda <HAL_TIM_PWM_Start_DMA+0x72>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008dde:	2302      	movs	r3, #2
 8008de0:	e15d      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <HAL_TIM_PWM_Start_DMA+0x94>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e022      	b.n	8008e42 <HAL_TIM_PWM_Start_DMA+0xda>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d109      	bne.n	8008e16 <HAL_TIM_PWM_Start_DMA+0xae>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	e015      	b.n	8008e42 <HAL_TIM_PWM_Start_DMA+0xda>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d109      	bne.n	8008e30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	e008      	b.n	8008e42 <HAL_TIM_PWM_Start_DMA+0xda>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	bf0c      	ite	eq
 8008e3c:	2301      	moveq	r3, #1
 8008e3e:	2300      	movne	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d024      	beq.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_PWM_Start_DMA+0xee>
 8008e4c:	887b      	ldrh	r3, [r7, #2]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e123      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d104      	bne.n	8008e66 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e64:	e016      	b.n	8008e94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d104      	bne.n	8008e76 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e74:	e00e      	b.n	8008e94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b08      	cmp	r3, #8
 8008e7a:	d104      	bne.n	8008e86 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e84:	e006      	b.n	8008e94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e8e:	e001      	b.n	8008e94 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e104      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b0c      	cmp	r3, #12
 8008e98:	f200 80ae 	bhi.w	8008ff8 <HAL_TIM_PWM_Start_DMA+0x290>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ed9 	.word	0x08008ed9
 8008ea8:	08008ff9 	.word	0x08008ff9
 8008eac:	08008ff9 	.word	0x08008ff9
 8008eb0:	08008ff9 	.word	0x08008ff9
 8008eb4:	08008f21 	.word	0x08008f21
 8008eb8:	08008ff9 	.word	0x08008ff9
 8008ebc:	08008ff9 	.word	0x08008ff9
 8008ec0:	08008ff9 	.word	0x08008ff9
 8008ec4:	08008f69 	.word	0x08008f69
 8008ec8:	08008ff9 	.word	0x08008ff9
 8008ecc:	08008ff9 	.word	0x08008ff9
 8008ed0:	08008ff9 	.word	0x08008ff9
 8008ed4:	08008fb1 	.word	0x08008fb1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	4a72      	ldr	r2, [pc, #456]	; (80090a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008ede:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	4a71      	ldr	r2, [pc, #452]	; (80090ac <HAL_TIM_PWM_Start_DMA+0x344>)
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	4a70      	ldr	r2, [pc, #448]	; (80090b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008eee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3334      	adds	r3, #52	; 0x34
 8008efc:	461a      	mov	r2, r3
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	f7fd fea4 	bl	8006c4c <HAL_DMA_Start_IT>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0c7      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f1c:	60da      	str	r2, [r3, #12]
      break;
 8008f1e:	e06e      	b.n	8008ffe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f24:	4a60      	ldr	r2, [pc, #384]	; (80090a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008f26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2c:	4a5f      	ldr	r2, [pc, #380]	; (80090ac <HAL_TIM_PWM_Start_DMA+0x344>)
 8008f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	4a5e      	ldr	r2, [pc, #376]	; (80090b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008f36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3338      	adds	r3, #56	; 0x38
 8008f44:	461a      	mov	r2, r3
 8008f46:	887b      	ldrh	r3, [r7, #2]
 8008f48:	f7fd fe80 	bl	8006c4c <HAL_DMA_Start_IT>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e0a3      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f64:	60da      	str	r2, [r3, #12]
      break;
 8008f66:	e04a      	b.n	8008ffe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	4a4e      	ldr	r2, [pc, #312]	; (80090a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008f6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	4a4d      	ldr	r2, [pc, #308]	; (80090ac <HAL_TIM_PWM_Start_DMA+0x344>)
 8008f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	4a4c      	ldr	r2, [pc, #304]	; (80090b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008f7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	333c      	adds	r3, #60	; 0x3c
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	887b      	ldrh	r3, [r7, #2]
 8008f90:	f7fd fe5c 	bl	8006c4c <HAL_DMA_Start_IT>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e07f      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fac:	60da      	str	r2, [r3, #12]
      break;
 8008fae:	e026      	b.n	8008ffe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb4:	4a3c      	ldr	r2, [pc, #240]	; (80090a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008fb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	4a3b      	ldr	r2, [pc, #236]	; (80090ac <HAL_TIM_PWM_Start_DMA+0x344>)
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	4a3a      	ldr	r2, [pc, #232]	; (80090b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008fc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3340      	adds	r3, #64	; 0x40
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	887b      	ldrh	r3, [r7, #2]
 8008fd8:	f7fd fe38 	bl	8006c4c <HAL_DMA_Start_IT>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e05b      	b.n	800909e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ff4:	60da      	str	r2, [r3, #12]
      break;
 8008ff6:	e002      	b.n	8008ffe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffc:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d14b      	bne.n	800909c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2201      	movs	r2, #1
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	4618      	mov	r0, r3
 800900e:	f001 fb57 	bl	800a6c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a27      	ldr	r2, [pc, #156]	; (80090b4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d107      	bne.n	800902c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800902a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a20      	ldr	r2, [pc, #128]	; (80090b4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d018      	beq.n	8009068 <HAL_TIM_PWM_Start_DMA+0x300>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903e:	d013      	beq.n	8009068 <HAL_TIM_PWM_Start_DMA+0x300>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00e      	beq.n	8009068 <HAL_TIM_PWM_Start_DMA+0x300>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a1b      	ldr	r2, [pc, #108]	; (80090bc <HAL_TIM_PWM_Start_DMA+0x354>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d009      	beq.n	8009068 <HAL_TIM_PWM_Start_DMA+0x300>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <HAL_TIM_PWM_Start_DMA+0x300>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a18      	ldr	r2, [pc, #96]	; (80090c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d111      	bne.n	800908c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b06      	cmp	r3, #6
 8009078:	d010      	beq.n	800909c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0201 	orr.w	r2, r2, #1
 8009088:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908a:	e007      	b.n	800909c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	0800a05b 	.word	0x0800a05b
 80090ac:	0800a107 	.word	0x0800a107
 80090b0:	08009fc5 	.word	0x08009fc5
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40000400 	.word	0x40000400
 80090bc:	40000800 	.word	0x40000800
 80090c0:	40000c00 	.word	0x40000c00
 80090c4:	40014000 	.word	0x40014000

080090c8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b0c      	cmp	r3, #12
 80090da:	d855      	bhi.n	8009188 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80090dc:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80090de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	08009119 	.word	0x08009119
 80090e8:	08009189 	.word	0x08009189
 80090ec:	08009189 	.word	0x08009189
 80090f0:	08009189 	.word	0x08009189
 80090f4:	08009135 	.word	0x08009135
 80090f8:	08009189 	.word	0x08009189
 80090fc:	08009189 	.word	0x08009189
 8009100:	08009189 	.word	0x08009189
 8009104:	08009151 	.word	0x08009151
 8009108:	08009189 	.word	0x08009189
 800910c:	08009189 	.word	0x08009189
 8009110:	08009189 	.word	0x08009189
 8009114:	0800916d 	.word	0x0800916d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009126:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	4618      	mov	r0, r3
 800912e:	f7fd fe55 	bl	8006ddc <HAL_DMA_Abort_IT>
      break;
 8009132:	e02c      	b.n	800918e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009142:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	4618      	mov	r0, r3
 800914a:	f7fd fe47 	bl	8006ddc <HAL_DMA_Abort_IT>
      break;
 800914e:	e01e      	b.n	800918e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800915e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fe39 	bl	8006ddc <HAL_DMA_Abort_IT>
      break;
 800916a:	e010      	b.n	800918e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800917a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd fe2b 	bl	8006ddc <HAL_DMA_Abort_IT>
      break;
 8009186:	e002      	b.n	800918e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
      break;
 800918c:	bf00      	nop
  }

  if (status == HAL_OK)
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d157      	bne.n	8009244 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2200      	movs	r2, #0
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f001 fa8f 	bl	800a6c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a2a      	ldr	r2, [pc, #168]	; (8009250 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d117      	bne.n	80091dc <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80091b6:	4013      	ands	r3, r2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10f      	bne.n	80091dc <HAL_TIM_PWM_Stop_DMA+0x114>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6a1a      	ldr	r2, [r3, #32]
 80091c2:	f240 4344 	movw	r3, #1092	; 0x444
 80091c6:	4013      	ands	r3, r2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_PWM_Stop_DMA+0x114>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6a1a      	ldr	r2, [r3, #32]
 80091e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80091e6:	4013      	ands	r3, r2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10f      	bne.n	800920c <HAL_TIM_PWM_Stop_DMA+0x144>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6a1a      	ldr	r2, [r3, #32]
 80091f2:	f240 4344 	movw	r3, #1092	; 0x444
 80091f6:	4013      	ands	r3, r2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d107      	bne.n	800920c <HAL_TIM_PWM_Stop_DMA+0x144>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <HAL_TIM_PWM_Stop_DMA+0x154>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800921a:	e013      	b.n	8009244 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b04      	cmp	r3, #4
 8009220:	d104      	bne.n	800922c <HAL_TIM_PWM_Stop_DMA+0x164>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800922a:	e00b      	b.n	8009244 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b08      	cmp	r3, #8
 8009230:	d104      	bne.n	800923c <HAL_TIM_PWM_Stop_DMA+0x174>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800923a:	e003      	b.n	8009244 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000

08009254 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e04c      	b.n	8009302 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d111      	bne.n	8009298 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fa45 	bl	800a70c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a1f      	ldr	r2, [pc, #124]	; (800930c <HAL_TIM_OnePulse_Init+0xb8>)
 800928e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f000 ff62 	bl	800a174 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0208 	bic.w	r2, r2, #8
 80092be:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6819      	ldr	r1, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	08009311 	.word	0x08009311

08009310 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009334:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800933c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009344:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800934c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d108      	bne.n	8009366 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d105      	bne.n	8009366 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800935a:	7b7b      	ldrb	r3, [r7, #13]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d102      	bne.n	8009366 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009360:	7b3b      	ldrb	r3, [r7, #12]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d001      	beq.n	800936a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e03b      	b.n	80093e2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2202      	movs	r2, #2
 800937e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2202      	movs	r2, #2
 8009386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0202 	orr.w	r2, r2, #2
 8009398:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0204 	orr.w	r2, r2, #4
 80093a8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2201      	movs	r2, #1
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 f984 	bl	800a6c0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2201      	movs	r2, #1
 80093be:	2104      	movs	r1, #4
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 f97d 	bl	800a6c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a08      	ldr	r2, [pc, #32]	; (80093ec <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d107      	bne.n	80093e0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	40010000 	.word	0x40010000

080093f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0a2      	b.n	800954a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d111      	bne.n	8009434 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f977 	bl	800a70c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a4a      	ldr	r2, [pc, #296]	; (8009554 <HAL_TIM_Encoder_Init+0x164>)
 800942a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800944a:	f023 0307 	bic.w	r3, r3, #7
 800944e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3304      	adds	r3, #4
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f000 fe8a 	bl	800a174 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	021b      	lsls	r3, r3, #8
 8009498:	4313      	orrs	r3, r2
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80094a6:	f023 030c 	bic.w	r3, r3, #12
 80094aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	4313      	orrs	r3, r2
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	011a      	lsls	r2, r3, #4
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	031b      	lsls	r3, r3, #12
 80094d6:	4313      	orrs	r3, r2
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80094e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80094ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	4313      	orrs	r3, r2
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	080057e1 	.word	0x080057e1

08009558 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009568:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009570:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009578:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009580:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d110      	bne.n	80095aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d102      	bne.n	8009594 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800958e:	7b7b      	ldrb	r3, [r7, #13]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d001      	beq.n	8009598 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e069      	b.n	800966c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095a8:	e031      	b.n	800960e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d110      	bne.n	80095d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d102      	bne.n	80095bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095b6:	7b3b      	ldrb	r3, [r7, #12]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d001      	beq.n	80095c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e055      	b.n	800966c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095d0:	e01d      	b.n	800960e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d108      	bne.n	80095ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d105      	bne.n	80095ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095de:	7b7b      	ldrb	r3, [r7, #13]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d102      	bne.n	80095ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095e4:	7b3b      	ldrb	r3, [r7, #12]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d001      	beq.n	80095ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e03e      	b.n	800966c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2202      	movs	r2, #2
 80095f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2202      	movs	r2, #2
 80095fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2202      	movs	r2, #2
 800960a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <HAL_TIM_Encoder_Start+0xc4>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2b04      	cmp	r3, #4
 8009618:	d008      	beq.n	800962c <HAL_TIM_Encoder_Start+0xd4>
 800961a:	e00f      	b.n	800963c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2201      	movs	r2, #1
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f84b 	bl	800a6c0 <TIM_CCxChannelCmd>
      break;
 800962a:	e016      	b.n	800965a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2201      	movs	r2, #1
 8009632:	2104      	movs	r1, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f001 f843 	bl	800a6c0 <TIM_CCxChannelCmd>
      break;
 800963a:	e00e      	b.n	800965a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2201      	movs	r2, #1
 8009642:	2100      	movs	r1, #0
 8009644:	4618      	mov	r0, r3
 8009646:	f001 f83b 	bl	800a6c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2201      	movs	r2, #1
 8009650:	2104      	movs	r1, #4
 8009652:	4618      	mov	r0, r3
 8009654:	f001 f834 	bl	800a6c0 <TIM_CCxChannelCmd>
      break;
 8009658:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0201 	orr.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b02      	cmp	r3, #2
 8009688:	d128      	bne.n	80096dc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b02      	cmp	r3, #2
 8009696:	d121      	bne.n	80096dc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f06f 0202 	mvn.w	r2, #2
 80096a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
 80096c0:	e009      	b.n	80096d6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0304 	and.w	r3, r3, #4
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d128      	bne.n	800973c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d121      	bne.n	800973c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f06f 0204 	mvn.w	r2, #4
 8009700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	4798      	blx	r3
 8009720:	e009      	b.n	8009736 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0308 	and.w	r3, r3, #8
 8009746:	2b08      	cmp	r3, #8
 8009748:	d128      	bne.n	800979c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0308 	and.w	r3, r3, #8
 8009754:	2b08      	cmp	r3, #8
 8009756:	d121      	bne.n	800979c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0208 	mvn.w	r2, #8
 8009760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2204      	movs	r2, #4
 8009766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d005      	beq.n	8009782 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
 8009780:	e009      	b.n	8009796 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0310 	and.w	r3, r3, #16
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d128      	bne.n	80097fc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0310 	and.w	r3, r3, #16
 80097b4:	2b10      	cmp	r3, #16
 80097b6:	d121      	bne.n	80097fc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f06f 0210 	mvn.w	r2, #16
 80097c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2208      	movs	r2, #8
 80097c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d005      	beq.n	80097e2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	e009      	b.n	80097f6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b01      	cmp	r3, #1
 8009808:	d110      	bne.n	800982c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b01      	cmp	r3, #1
 8009816:	d109      	bne.n	800982c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0201 	mvn.w	r2, #1
 8009820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009836:	2b80      	cmp	r3, #128	; 0x80
 8009838:	d110      	bne.n	800985c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009844:	2b80      	cmp	r3, #128	; 0x80
 8009846:	d109      	bne.n	800985c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009866:	2b40      	cmp	r3, #64	; 0x40
 8009868:	d110      	bne.n	800988c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009874:	2b40      	cmp	r3, #64	; 0x40
 8009876:	d109      	bne.n	800988c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b20      	cmp	r3, #32
 8009898:	d110      	bne.n	80098bc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d109      	bne.n	80098bc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0220 	mvn.w	r2, #32
 80098b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d101      	bne.n	80098e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80098de:	2302      	movs	r3, #2
 80098e0:	e048      	b.n	8009974 <HAL_TIM_OC_ConfigChannel+0xb0>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b0c      	cmp	r3, #12
 80098ee:	d839      	bhi.n	8009964 <HAL_TIM_OC_ConfigChannel+0xa0>
 80098f0:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	0800992d 	.word	0x0800992d
 80098fc:	08009965 	.word	0x08009965
 8009900:	08009965 	.word	0x08009965
 8009904:	08009965 	.word	0x08009965
 8009908:	0800993b 	.word	0x0800993b
 800990c:	08009965 	.word	0x08009965
 8009910:	08009965 	.word	0x08009965
 8009914:	08009965 	.word	0x08009965
 8009918:	08009949 	.word	0x08009949
 800991c:	08009965 	.word	0x08009965
 8009920:	08009965 	.word	0x08009965
 8009924:	08009965 	.word	0x08009965
 8009928:	08009957 	.word	0x08009957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fc9e 	bl	800a274 <TIM_OC1_SetConfig>
      break;
 8009938:	e017      	b.n	800996a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	4618      	mov	r0, r3
 8009942:	f000 fcfd 	bl	800a340 <TIM_OC2_SetConfig>
      break;
 8009946:	e010      	b.n	800996a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fd62 	bl	800a418 <TIM_OC3_SetConfig>
      break;
 8009954:	e009      	b.n	800996a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fdc5 	bl	800a4ec <TIM_OC4_SetConfig>
      break;
 8009962:	e002      	b.n	800996a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
      break;
 8009968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009996:	2302      	movs	r3, #2
 8009998:	e0ae      	b.n	8009af8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b0c      	cmp	r3, #12
 80099a6:	f200 809f 	bhi.w	8009ae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099aa:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099e5 	.word	0x080099e5
 80099b4:	08009ae9 	.word	0x08009ae9
 80099b8:	08009ae9 	.word	0x08009ae9
 80099bc:	08009ae9 	.word	0x08009ae9
 80099c0:	08009a25 	.word	0x08009a25
 80099c4:	08009ae9 	.word	0x08009ae9
 80099c8:	08009ae9 	.word	0x08009ae9
 80099cc:	08009ae9 	.word	0x08009ae9
 80099d0:	08009a67 	.word	0x08009a67
 80099d4:	08009ae9 	.word	0x08009ae9
 80099d8:	08009ae9 	.word	0x08009ae9
 80099dc:	08009ae9 	.word	0x08009ae9
 80099e0:	08009aa7 	.word	0x08009aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 fc42 	bl	800a274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0208 	orr.w	r2, r2, #8
 80099fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 0204 	bic.w	r2, r2, #4
 8009a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6999      	ldr	r1, [r3, #24]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	691a      	ldr	r2, [r3, #16]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	619a      	str	r2, [r3, #24]
      break;
 8009a22:	e064      	b.n	8009aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fc88 	bl	800a340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699a      	ldr	r2, [r3, #24]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6999      	ldr	r1, [r3, #24]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	021a      	lsls	r2, r3, #8
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	619a      	str	r2, [r3, #24]
      break;
 8009a64:	e043      	b.n	8009aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fcd3 	bl	800a418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f042 0208 	orr.w	r2, r2, #8
 8009a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69da      	ldr	r2, [r3, #28]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0204 	bic.w	r2, r2, #4
 8009a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69d9      	ldr	r1, [r3, #28]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	61da      	str	r2, [r3, #28]
      break;
 8009aa4:	e023      	b.n	8009aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fd1d 	bl	800a4ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69da      	ldr	r2, [r3, #28]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69d9      	ldr	r1, [r3, #28]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	021a      	lsls	r2, r3, #8
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	61da      	str	r2, [r3, #28]
      break;
 8009ae6:	e002      	b.n	8009aee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	75fb      	strb	r3, [r7, #23]
      break;
 8009aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d101      	bne.n	8009b1c <HAL_TIM_ConfigClockSource+0x1c>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e0b4      	b.n	8009c86 <HAL_TIM_ConfigClockSource+0x186>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b54:	d03e      	beq.n	8009bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8009b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5a:	f200 8087 	bhi.w	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b62:	f000 8086 	beq.w	8009c72 <HAL_TIM_ConfigClockSource+0x172>
 8009b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b6a:	d87f      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b6c:	2b70      	cmp	r3, #112	; 0x70
 8009b6e:	d01a      	beq.n	8009ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8009b70:	2b70      	cmp	r3, #112	; 0x70
 8009b72:	d87b      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b74:	2b60      	cmp	r3, #96	; 0x60
 8009b76:	d050      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x11a>
 8009b78:	2b60      	cmp	r3, #96	; 0x60
 8009b7a:	d877      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b7c:	2b50      	cmp	r3, #80	; 0x50
 8009b7e:	d03c      	beq.n	8009bfa <HAL_TIM_ConfigClockSource+0xfa>
 8009b80:	2b50      	cmp	r3, #80	; 0x50
 8009b82:	d873      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b84:	2b40      	cmp	r3, #64	; 0x40
 8009b86:	d058      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x13a>
 8009b88:	2b40      	cmp	r3, #64	; 0x40
 8009b8a:	d86f      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b8c:	2b30      	cmp	r3, #48	; 0x30
 8009b8e:	d064      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0x15a>
 8009b90:	2b30      	cmp	r3, #48	; 0x30
 8009b92:	d86b      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d060      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0x15a>
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	d867      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d05c      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0x15a>
 8009ba0:	2b10      	cmp	r3, #16
 8009ba2:	d05a      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0x15a>
 8009ba4:	e062      	b.n	8009c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	6899      	ldr	r1, [r3, #8]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f000 fd63 	bl	800a680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	609a      	str	r2, [r3, #8]
      break;
 8009bd2:	e04f      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	6899      	ldr	r1, [r3, #8]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f000 fd4c 	bl	800a680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689a      	ldr	r2, [r3, #8]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bf6:	609a      	str	r2, [r3, #8]
      break;
 8009bf8:	e03c      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	6859      	ldr	r1, [r3, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f000 fcc0 	bl	800a58c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2150      	movs	r1, #80	; 0x50
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fd19 	bl	800a64a <TIM_ITRx_SetConfig>
      break;
 8009c18:	e02c      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	6859      	ldr	r1, [r3, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f000 fcdf 	bl	800a5ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2160      	movs	r1, #96	; 0x60
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fd09 	bl	800a64a <TIM_ITRx_SetConfig>
      break;
 8009c38:	e01c      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	6859      	ldr	r1, [r3, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f000 fca0 	bl	800a58c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2140      	movs	r1, #64	; 0x40
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fcf9 	bl	800a64a <TIM_ITRx_SetConfig>
      break;
 8009c58:	e00c      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f000 fcf0 	bl	800a64a <TIM_ITRx_SetConfig>
      break;
 8009c6a:	e003      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c70:	e000      	b.n	8009c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009c96:	bf00      	nop
 8009c98:	370c      	adds	r7, #12
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b083      	sub	sp, #12
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cbe:	bf00      	nop
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
	...

08009d30 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e135      	b.n	8009fb8 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <HAL_TIM_RegisterCallback+0x2a>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e12e      	b.n	8009fb8 <HAL_TIM_RegisterCallback+0x288>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	f040 80ba 	bne.w	8009ee4 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	2b1a      	cmp	r3, #26
 8009d74:	f200 80b3 	bhi.w	8009ede <HAL_TIM_RegisterCallback+0x1ae>
 8009d78:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <HAL_TIM_RegisterCallback+0x50>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009ded 	.word	0x08009ded
 8009d84:	08009df5 	.word	0x08009df5
 8009d88:	08009dfd 	.word	0x08009dfd
 8009d8c:	08009e05 	.word	0x08009e05
 8009d90:	08009e0d 	.word	0x08009e0d
 8009d94:	08009e15 	.word	0x08009e15
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e25 	.word	0x08009e25
 8009da0:	08009e2d 	.word	0x08009e2d
 8009da4:	08009e35 	.word	0x08009e35
 8009da8:	08009e3d 	.word	0x08009e3d
 8009dac:	08009e45 	.word	0x08009e45
 8009db0:	08009e4d 	.word	0x08009e4d
 8009db4:	08009e55 	.word	0x08009e55
 8009db8:	08009e5d 	.word	0x08009e5d
 8009dbc:	08009e67 	.word	0x08009e67
 8009dc0:	08009e71 	.word	0x08009e71
 8009dc4:	08009e7b 	.word	0x08009e7b
 8009dc8:	08009e85 	.word	0x08009e85
 8009dcc:	08009e8f 	.word	0x08009e8f
 8009dd0:	08009e99 	.word	0x08009e99
 8009dd4:	08009ea3 	.word	0x08009ea3
 8009dd8:	08009ead 	.word	0x08009ead
 8009ddc:	08009eb7 	.word	0x08009eb7
 8009de0:	08009ec1 	.word	0x08009ec1
 8009de4:	08009ecb 	.word	0x08009ecb
 8009de8:	08009ed5 	.word	0x08009ed5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009df2:	e0dc      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009dfa:	e0d8      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009e02:	e0d4      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009e0a:	e0d0      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009e12:	e0cc      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009e1a:	e0c8      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009e22:	e0c4      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009e2a:	e0c0      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009e32:	e0bc      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009e3a:	e0b8      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009e42:	e0b4      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009e4a:	e0b0      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009e52:	e0ac      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009e5a:	e0a8      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009e64:	e0a3      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009e6e:	e09e      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009e78:	e099      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009e82:	e094      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009e8c:	e08f      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009e96:	e08a      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009ea0:	e085      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009eaa:	e080      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009eb4:	e07b      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009ebe:	e076      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009ec8:	e071      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009ed2:	e06c      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009edc:	e067      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	75fb      	strb	r3, [r7, #23]
        break;
 8009ee2:	e064      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d15c      	bne.n	8009faa <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	2b0d      	cmp	r3, #13
 8009ef4:	d856      	bhi.n	8009fa4 <HAL_TIM_RegisterCallback+0x274>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <HAL_TIM_RegisterCallback+0x1cc>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f35 	.word	0x08009f35
 8009f00:	08009f3d 	.word	0x08009f3d
 8009f04:	08009f45 	.word	0x08009f45
 8009f08:	08009f4d 	.word	0x08009f4d
 8009f0c:	08009f55 	.word	0x08009f55
 8009f10:	08009f5d 	.word	0x08009f5d
 8009f14:	08009f65 	.word	0x08009f65
 8009f18:	08009f6d 	.word	0x08009f6d
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f7d 	.word	0x08009f7d
 8009f24:	08009f85 	.word	0x08009f85
 8009f28:	08009f8d 	.word	0x08009f8d
 8009f2c:	08009f95 	.word	0x08009f95
 8009f30:	08009f9d 	.word	0x08009f9d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009f3a:	e038      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009f42:	e034      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009f4a:	e030      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009f52:	e02c      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009f5a:	e028      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009f62:	e024      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009f6a:	e020      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009f72:	e01c      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009f7a:	e018      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009f82:	e014      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009f8a:	e010      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009f92:	e00c      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009f9a:	e008      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009fa2:	e004      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
        break;
 8009fa8:	e001      	b.n	8009fae <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d107      	bne.n	8009fec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fea:	e02a      	b.n	800a042 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d107      	bne.n	800a006 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a004:	e01d      	b.n	800a042 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d107      	bne.n	800a020 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2204      	movs	r2, #4
 800a014:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a01e:	e010      	b.n	800a042 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	429a      	cmp	r2, r3
 800a028:	d107      	bne.n	800a03a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2208      	movs	r2, #8
 800a02e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a038:	e003      	b.n	800a042 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	771a      	strb	r2, [r3, #28]
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a066:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d10b      	bne.n	800a08a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d136      	bne.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a088:	e031      	b.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	429a      	cmp	r2, r3
 800a092:	d10b      	bne.n	800a0ac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2202      	movs	r2, #2
 800a098:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d125      	bne.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0aa:	e020      	b.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d10b      	bne.n	800a0ce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2204      	movs	r2, #4
 800a0ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d114      	bne.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0cc:	e00f      	b.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d10a      	bne.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2208      	movs	r2, #8
 800a0dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	771a      	strb	r2, [r3, #28]
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d103      	bne.n	800a126 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	771a      	strb	r2, [r3, #28]
 800a124:	e019      	b.n	800a15a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d103      	bne.n	800a138 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2202      	movs	r2, #2
 800a134:	771a      	strb	r2, [r3, #28]
 800a136:	e010      	b.n	800a15a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d103      	bne.n	800a14a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2204      	movs	r2, #4
 800a146:	771a      	strb	r2, [r3, #28]
 800a148:	e007      	b.n	800a15a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d102      	bne.n	800a15a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2208      	movs	r2, #8
 800a158:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	771a      	strb	r2, [r3, #28]
}
 800a16a:	bf00      	nop
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a34      	ldr	r2, [pc, #208]	; (800a258 <TIM_Base_SetConfig+0xe4>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d00f      	beq.n	800a1ac <TIM_Base_SetConfig+0x38>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a192:	d00b      	beq.n	800a1ac <TIM_Base_SetConfig+0x38>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a31      	ldr	r2, [pc, #196]	; (800a25c <TIM_Base_SetConfig+0xe8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d007      	beq.n	800a1ac <TIM_Base_SetConfig+0x38>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a30      	ldr	r2, [pc, #192]	; (800a260 <TIM_Base_SetConfig+0xec>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_Base_SetConfig+0x38>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a2f      	ldr	r2, [pc, #188]	; (800a264 <TIM_Base_SetConfig+0xf0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d108      	bne.n	800a1be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a25      	ldr	r2, [pc, #148]	; (800a258 <TIM_Base_SetConfig+0xe4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d01b      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1cc:	d017      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a22      	ldr	r2, [pc, #136]	; (800a25c <TIM_Base_SetConfig+0xe8>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d013      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a21      	ldr	r2, [pc, #132]	; (800a260 <TIM_Base_SetConfig+0xec>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d00f      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a20      	ldr	r2, [pc, #128]	; (800a264 <TIM_Base_SetConfig+0xf0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00b      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <TIM_Base_SetConfig+0xf4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d007      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <TIM_Base_SetConfig+0xf8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d003      	beq.n	800a1fe <TIM_Base_SetConfig+0x8a>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a1d      	ldr	r2, [pc, #116]	; (800a270 <TIM_Base_SetConfig+0xfc>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d108      	bne.n	800a210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a08      	ldr	r2, [pc, #32]	; (800a258 <TIM_Base_SetConfig+0xe4>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d103      	bne.n	800a244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	615a      	str	r2, [r3, #20]
}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40014000 	.word	0x40014000
 800a26c:	40014400 	.word	0x40014400
 800a270:	40014800 	.word	0x40014800

0800a274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	f023 0201 	bic.w	r2, r3, #1
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f023 0302 	bic.w	r3, r3, #2
 800a2bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a1c      	ldr	r2, [pc, #112]	; (800a33c <TIM_OC1_SetConfig+0xc8>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d10c      	bne.n	800a2ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f023 0308 	bic.w	r3, r3, #8
 800a2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f023 0304 	bic.w	r3, r3, #4
 800a2e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a13      	ldr	r2, [pc, #76]	; (800a33c <TIM_OC1_SetConfig+0xc8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d111      	bne.n	800a316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4313      	orrs	r3, r2
 800a314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	621a      	str	r2, [r3, #32]
}
 800a330:	bf00      	nop
 800a332:	371c      	adds	r7, #28
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	40010000 	.word	0x40010000

0800a340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f023 0210 	bic.w	r2, r3, #16
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0320 	bic.w	r3, r3, #32
 800a38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a1e      	ldr	r2, [pc, #120]	; (800a414 <TIM_OC2_SetConfig+0xd4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d10d      	bne.n	800a3bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a15      	ldr	r2, [pc, #84]	; (800a414 <TIM_OC2_SetConfig+0xd4>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d113      	bne.n	800a3ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	621a      	str	r2, [r3, #32]
}
 800a406:	bf00      	nop
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	40010000 	.word	0x40010000

0800a418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0303 	bic.w	r3, r3, #3
 800a44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	4313      	orrs	r3, r2
 800a458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	021b      	lsls	r3, r3, #8
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a1d      	ldr	r2, [pc, #116]	; (800a4e8 <TIM_OC3_SetConfig+0xd0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d10d      	bne.n	800a492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a47c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a14      	ldr	r2, [pc, #80]	; (800a4e8 <TIM_OC3_SetConfig+0xd0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d113      	bne.n	800a4c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	621a      	str	r2, [r3, #32]
}
 800a4dc:	bf00      	nop
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	40010000 	.word	0x40010000

0800a4ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	031b      	lsls	r3, r3, #12
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a10      	ldr	r2, [pc, #64]	; (800a588 <TIM_OC4_SetConfig+0x9c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d109      	bne.n	800a560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	019b      	lsls	r3, r3, #6
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	621a      	str	r2, [r3, #32]
}
 800a57a:	bf00      	nop
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40010000 	.word	0x40010000

0800a58c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f023 0201 	bic.w	r2, r3, #1
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f023 030a 	bic.w	r3, r3, #10
 800a5c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b087      	sub	sp, #28
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f023 0210 	bic.w	r2, r3, #16
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
 800a60c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	031b      	lsls	r3, r3, #12
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	011b      	lsls	r3, r3, #4
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	4313      	orrs	r3, r2
 800a630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	621a      	str	r2, [r3, #32]
}
 800a63e:	bf00      	nop
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	f043 0307 	orr.w	r3, r3, #7
 800a66c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	609a      	str	r2, [r3, #8]
}
 800a674:	bf00      	nop
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a69a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	021a      	lsls	r2, r3, #8
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	609a      	str	r2, [r3, #8]
}
 800a6b4:	bf00      	nop
 800a6b6:	371c      	adds	r7, #28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f003 031f 	and.w	r3, r3, #31
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a1a      	ldr	r2, [r3, #32]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	43db      	mvns	r3, r3
 800a6e2:	401a      	ands	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a1a      	ldr	r2, [r3, #32]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f003 031f 	and.w	r3, r3, #31
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	621a      	str	r2, [r3, #32]
}
 800a6fe:	bf00      	nop
 800a700:	371c      	adds	r7, #28
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
	...

0800a70c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a1c      	ldr	r2, [pc, #112]	; (800a788 <TIM_ResetCallback+0x7c>)
 800a718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a1b      	ldr	r2, [pc, #108]	; (800a78c <TIM_ResetCallback+0x80>)
 800a720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a1a      	ldr	r2, [pc, #104]	; (800a790 <TIM_ResetCallback+0x84>)
 800a728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a19      	ldr	r2, [pc, #100]	; (800a794 <TIM_ResetCallback+0x88>)
 800a730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a18      	ldr	r2, [pc, #96]	; (800a798 <TIM_ResetCallback+0x8c>)
 800a738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a17      	ldr	r2, [pc, #92]	; (800a79c <TIM_ResetCallback+0x90>)
 800a740:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a16      	ldr	r2, [pc, #88]	; (800a7a0 <TIM_ResetCallback+0x94>)
 800a748:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a15      	ldr	r2, [pc, #84]	; (800a7a4 <TIM_ResetCallback+0x98>)
 800a750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a14      	ldr	r2, [pc, #80]	; (800a7a8 <TIM_ResetCallback+0x9c>)
 800a758:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <TIM_ResetCallback+0xa0>)
 800a760:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a12      	ldr	r2, [pc, #72]	; (800a7b0 <TIM_ResetCallback+0xa4>)
 800a768:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a11      	ldr	r2, [pc, #68]	; (800a7b4 <TIM_ResetCallback+0xa8>)
 800a770:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a10      	ldr	r2, [pc, #64]	; (800a7b8 <TIM_ResetCallback+0xac>)
 800a778:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	08004e75 	.word	0x08004e75
 800a78c:	08009c8f 	.word	0x08009c8f
 800a790:	08009cf3 	.word	0x08009cf3
 800a794:	08009d07 	.word	0x08009d07
 800a798:	08009cb7 	.word	0x08009cb7
 800a79c:	08009ccb 	.word	0x08009ccb
 800a7a0:	08009ca3 	.word	0x08009ca3
 800a7a4:	08003345 	.word	0x08003345
 800a7a8:	08009cdf 	.word	0x08009cdf
 800a7ac:	08009d1b 	.word	0x08009d1b
 800a7b0:	0800a93d 	.word	0x0800a93d
 800a7b4:	0800a951 	.word	0x0800a951
 800a7b8:	0800a965 	.word	0x0800a965

0800a7bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d101      	bne.n	800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e050      	b.n	800a876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a1c      	ldr	r2, [pc, #112]	; (800a884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d018      	beq.n	800a84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a820:	d013      	beq.n	800a84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a18      	ldr	r2, [pc, #96]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00e      	beq.n	800a84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a16      	ldr	r2, [pc, #88]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d009      	beq.n	800a84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a15      	ldr	r2, [pc, #84]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d004      	beq.n	800a84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a13      	ldr	r2, [pc, #76]	; (800a894 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d10c      	bne.n	800a864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	40010000 	.word	0x40010000
 800a888:	40000400 	.word	0x40000400
 800a88c:	40000800 	.word	0x40000800
 800a890:	40000c00 	.word	0x40000c00
 800a894:	40014000 	.word	0x40014000

0800a898 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e03d      	b.n	800a930 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e04a      	b.n	800aa20 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d111      	bne.n	800a9ba <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fd22 	bl	800b3e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d102      	bne.n	800a9b2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a1e      	ldr	r2, [pc, #120]	; (800aa28 <HAL_UART_Init+0xb0>)
 800a9b0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2224      	movs	r2, #36	; 0x24
 800a9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 ffec 	bl	800b9b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691a      	ldr	r2, [r3, #16]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	695a      	ldr	r2, [r3, #20]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	08006089 	.word	0x08006089

0800aa2c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	460b      	mov	r3, r1
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d107      	bne.n	800aa54 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	f043 0220 	orr.w	r2, r3, #32
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e08c      	b.n	800ab6e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d101      	bne.n	800aa62 <HAL_UART_RegisterCallback+0x36>
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e085      	b.n	800ab6e <HAL_UART_RegisterCallback+0x142>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d151      	bne.n	800ab1a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800aa76:	7afb      	ldrb	r3, [r7, #11]
 800aa78:	2b0c      	cmp	r3, #12
 800aa7a:	d845      	bhi.n	800ab08 <HAL_UART_RegisterCallback+0xdc>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <HAL_UART_RegisterCallback+0x58>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aab9 	.word	0x0800aab9
 800aa88:	0800aac1 	.word	0x0800aac1
 800aa8c:	0800aac9 	.word	0x0800aac9
 800aa90:	0800aad1 	.word	0x0800aad1
 800aa94:	0800aad9 	.word	0x0800aad9
 800aa98:	0800aae1 	.word	0x0800aae1
 800aa9c:	0800aae9 	.word	0x0800aae9
 800aaa0:	0800aaf1 	.word	0x0800aaf1
 800aaa4:	0800ab09 	.word	0x0800ab09
 800aaa8:	0800ab09 	.word	0x0800ab09
 800aaac:	0800ab09 	.word	0x0800ab09
 800aab0:	0800aaf9 	.word	0x0800aaf9
 800aab4:	0800ab01 	.word	0x0800ab01
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800aabe:	e051      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800aac6:	e04d      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800aace:	e049      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800aad6:	e045      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800aade:	e041      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800aae6:	e03d      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800aaee:	e039      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800aaf6:	e035      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800aafe:	e031      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ab06:	e02d      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	f043 0220 	orr.w	r2, r3, #32
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
        break;
 800ab18:	e024      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d116      	bne.n	800ab54 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800ab26:	7afb      	ldrb	r3, [r7, #11]
 800ab28:	2b0b      	cmp	r3, #11
 800ab2a:	d002      	beq.n	800ab32 <HAL_UART_RegisterCallback+0x106>
 800ab2c:	2b0c      	cmp	r3, #12
 800ab2e:	d004      	beq.n	800ab3a <HAL_UART_RegisterCallback+0x10e>
 800ab30:	e007      	b.n	800ab42 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ab38:	e014      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ab40:	e010      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	f043 0220 	orr.w	r2, r3, #32
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	75fb      	strb	r3, [r7, #23]
        break;
 800ab52:	e007      	b.n	800ab64 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	f043 0220 	orr.w	r2, r3, #32
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop

0800ab7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	d11d      	bne.n	800abd2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <HAL_UART_Receive_IT+0x26>
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e016      	b.n	800abd4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_UART_Receive_IT+0x38>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e00f      	b.n	800abd4 <HAL_UART_Receive_IT+0x58>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abc2:	88fb      	ldrh	r3, [r7, #6]
 800abc4:	461a      	mov	r2, r3
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 fced 	bl	800b5a8 <UART_Start_Receive_IT>
 800abce:	4603      	mov	r3, r0
 800abd0:	e000      	b.n	800abd4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800abd2:	2302      	movs	r3, #2
  }
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08c      	sub	sp, #48	; 0x30
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	d165      	bne.n	800acc2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <HAL_UART_Transmit_DMA+0x26>
 800abfc:	88fb      	ldrh	r3, [r7, #6]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e05e      	b.n	800acc4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d101      	bne.n	800ac14 <HAL_UART_Transmit_DMA+0x38>
 800ac10:	2302      	movs	r3, #2
 800ac12:	e057      	b.n	800acc4 <HAL_UART_Transmit_DMA+0xe8>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	88fa      	ldrh	r2, [r7, #6]
 800ac26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	88fa      	ldrh	r2, [r7, #6]
 800ac2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2221      	movs	r2, #33	; 0x21
 800ac38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac40:	4a22      	ldr	r2, [pc, #136]	; (800accc <HAL_UART_Transmit_DMA+0xf0>)
 800ac42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	4a21      	ldr	r2, [pc, #132]	; (800acd0 <HAL_UART_Transmit_DMA+0xf4>)
 800ac4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac50:	4a20      	ldr	r2, [pc, #128]	; (800acd4 <HAL_UART_Transmit_DMA+0xf8>)
 800ac52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	2200      	movs	r2, #0
 800ac5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ac5c:	f107 0308 	add.w	r3, r7, #8
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	6819      	ldr	r1, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	461a      	mov	r2, r3
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	f7fb ffea 	bl	8006c4c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3314      	adds	r3, #20
 800ac90:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	617b      	str	r3, [r7, #20]
   return(result);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3314      	adds	r3, #20
 800aca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acaa:	627a      	str	r2, [r7, #36]	; 0x24
 800acac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	6a39      	ldr	r1, [r7, #32]
 800acb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e5      	bne.n	800ac8a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	e000      	b.n	800acc4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800acc2:	2302      	movs	r3, #2
  }
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3730      	adds	r7, #48	; 0x30
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	0800b459 	.word	0x0800b459
 800acd0:	0800b4f5 	.word	0x0800b4f5
 800acd4:	0800b513 	.word	0x0800b513

0800acd8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b09a      	sub	sp, #104	; 0x68
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	330c      	adds	r3, #12
 800ace6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800acf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acf6:	667b      	str	r3, [r7, #100]	; 0x64
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	330c      	adds	r3, #12
 800acfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad00:	657a      	str	r2, [r7, #84]	; 0x54
 800ad02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e5      	bne.n	800ace0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3314      	adds	r3, #20
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	e853 3f00 	ldrex	r3, [r3]
 800ad22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	f023 0301 	bic.w	r3, r3, #1
 800ad2a:	663b      	str	r3, [r7, #96]	; 0x60
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3314      	adds	r3, #20
 800ad32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad34:	643a      	str	r2, [r7, #64]	; 0x40
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad3c:	e841 2300 	strex	r3, r2, [r1]
 800ad40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e5      	bne.n	800ad14 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d119      	bne.n	800ad84 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	330c      	adds	r3, #12
 800ad56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	f023 0310 	bic.w	r3, r3, #16
 800ad66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	330c      	adds	r3, #12
 800ad6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad70:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e5      	bne.n	800ad50 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8e:	2b40      	cmp	r3, #64	; 0x40
 800ad90:	d136      	bne.n	800ae00 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3314      	adds	r3, #20
 800ad98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	e853 3f00 	ldrex	r3, [r3]
 800ada0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada8:	65bb      	str	r3, [r7, #88]	; 0x58
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3314      	adds	r3, #20
 800adb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adb2:	61ba      	str	r2, [r7, #24]
 800adb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	6979      	ldr	r1, [r7, #20]
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	613b      	str	r3, [r7, #16]
   return(result);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e5      	bne.n	800ad92 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d018      	beq.n	800ae00 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	2200      	movs	r2, #0
 800add4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	4618      	mov	r0, r3
 800addc:	f7fb ff8e 	bl	8006cfc <HAL_DMA_Abort>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00c      	beq.n	800ae00 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	4618      	mov	r0, r3
 800adec:	f7fc f9a2 	bl	8007134 <HAL_DMA_GetError>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d104      	bne.n	800ae00 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2210      	movs	r2, #16
 800adfa:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e00a      	b.n	800ae16 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3768      	adds	r7, #104	; 0x68
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b0ba      	sub	sp, #232	; 0xe8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae56:	f003 030f 	and.w	r3, r3, #15
 800ae5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10f      	bne.n	800ae86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d009      	beq.n	800ae86 <HAL_UART_IRQHandler+0x66>
 800ae72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae76:	f003 0320 	and.w	r3, r3, #32
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fcd9 	bl	800b836 <UART_Receive_IT>
      return;
 800ae84:	e25b      	b.n	800b33e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80e1 	beq.w	800b052 <HAL_UART_IRQHandler+0x232>
 800ae90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 80d4 	beq.w	800b052 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <HAL_UART_IRQHandler+0xae>
 800aeb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d005      	beq.n	800aece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	f043 0201 	orr.w	r2, r3, #1
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aed2:	f003 0304 	and.w	r3, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00b      	beq.n	800aef2 <HAL_UART_IRQHandler+0xd2>
 800aeda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	f043 0202 	orr.w	r2, r3, #2
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00b      	beq.n	800af16 <HAL_UART_IRQHandler+0xf6>
 800aefe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d005      	beq.n	800af16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f043 0204 	orr.w	r2, r3, #4
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1a:	f003 0308 	and.w	r3, r3, #8
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d011      	beq.n	800af46 <HAL_UART_IRQHandler+0x126>
 800af22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d105      	bne.n	800af3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d005      	beq.n	800af46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3e:	f043 0208 	orr.w	r2, r3, #8
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 81f2 	beq.w	800b334 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af54:	f003 0320 	and.w	r3, r3, #32
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d008      	beq.n	800af6e <HAL_UART_IRQHandler+0x14e>
 800af5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af60:	f003 0320 	and.w	r3, r3, #32
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fc64 	bl	800b836 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	bf0c      	ite	eq
 800af7c:	2301      	moveq	r3, #1
 800af7e:	2300      	movne	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	f003 0308 	and.w	r3, r3, #8
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d103      	bne.n	800af9a <HAL_UART_IRQHandler+0x17a>
 800af92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d051      	beq.n	800b03e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb6a 	bl	800b674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afaa:	2b40      	cmp	r3, #64	; 0x40
 800afac:	d142      	bne.n	800b034 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3314      	adds	r3, #20
 800afb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3314      	adds	r3, #20
 800afd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afea:	e841 2300 	strex	r3, r2, [r1]
 800afee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1d9      	bne.n	800afae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affe:	2b00      	cmp	r3, #0
 800b000:	d013      	beq.n	800b02a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b006:	4a7f      	ldr	r2, [pc, #508]	; (800b204 <HAL_UART_IRQHandler+0x3e4>)
 800b008:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fb fee4 	bl	8006ddc <HAL_DMA_Abort_IT>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d019      	beq.n	800b04e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b024:	4610      	mov	r0, r2
 800b026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b028:	e011      	b.n	800b04e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b032:	e00c      	b.n	800b04e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b03c:	e007      	b.n	800b04e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b04c:	e172      	b.n	800b334 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b04e:	bf00      	nop
    return;
 800b050:	e170      	b.n	800b334 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	2b01      	cmp	r3, #1
 800b058:	f040 814c 	bne.w	800b2f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b060:	f003 0310 	and.w	r3, r3, #16
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8145 	beq.w	800b2f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 813e 	beq.w	800b2f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b078:	2300      	movs	r3, #0
 800b07a:	60bb      	str	r3, [r7, #8]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60bb      	str	r3, [r7, #8]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	60bb      	str	r3, [r7, #8]
 800b08c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b098:	2b40      	cmp	r3, #64	; 0x40
 800b09a:	f040 80b5 	bne.w	800b208 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 8142 	beq.w	800b338 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	f080 813b 	bcs.w	800b338 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d4:	f000 8088 	beq.w	800b1e8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	330c      	adds	r3, #12
 800b0de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	330c      	adds	r3, #12
 800b100:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b104:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b108:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b110:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b114:	e841 2300 	strex	r3, r2, [r1]
 800b118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b11c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1d9      	bne.n	800b0d8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3314      	adds	r3, #20
 800b12a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b136:	f023 0301 	bic.w	r3, r3, #1
 800b13a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3314      	adds	r3, #20
 800b144:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b148:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b14c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b150:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b154:	e841 2300 	strex	r3, r2, [r1]
 800b158:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b15a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1e1      	bne.n	800b124 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3314      	adds	r3, #20
 800b166:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3314      	adds	r3, #20
 800b180:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b184:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b186:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b18a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e3      	bne.n	800b160 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	330c      	adds	r3, #12
 800b1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1b8:	f023 0310 	bic.w	r3, r3, #16
 800b1bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1e3      	bne.n	800b1a6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fb fd8a 	bl	8006cfc <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b1f4:	b292      	uxth	r2, r2
 800b1f6:	1a8a      	subs	r2, r1, r2
 800b1f8:	b292      	uxth	r2, r2
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b200:	e09a      	b.n	800b338 <HAL_UART_IRQHandler+0x518>
 800b202:	bf00      	nop
 800b204:	0800b73b 	.word	0x0800b73b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b210:	b29b      	uxth	r3, r3
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 808c 	beq.w	800b33c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8087 	beq.w	800b33c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	330c      	adds	r3, #12
 800b234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	330c      	adds	r3, #12
 800b24e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b252:	647a      	str	r2, [r7, #68]	; 0x44
 800b254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e3      	bne.n	800b22e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3314      	adds	r3, #20
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	623b      	str	r3, [r7, #32]
   return(result);
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	f023 0301 	bic.w	r3, r3, #1
 800b27c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3314      	adds	r3, #20
 800b286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b28a:	633a      	str	r2, [r7, #48]	; 0x30
 800b28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b292:	e841 2300 	strex	r3, r2, [r1]
 800b296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e3      	bne.n	800b266 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0310 	bic.w	r3, r3, #16
 800b2c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	330c      	adds	r3, #12
 800b2cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2d0:	61fa      	str	r2, [r7, #28]
 800b2d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	69b9      	ldr	r1, [r7, #24]
 800b2d6:	69fa      	ldr	r2, [r7, #28]
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e3      	bne.n	800b2ac <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2e8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2f2:	e023      	b.n	800b33c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d009      	beq.n	800b314 <HAL_UART_IRQHandler+0x4f4>
 800b300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa29 	bl	800b764 <UART_Transmit_IT>
    return;
 800b312:	e014      	b.n	800b33e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00e      	beq.n	800b33e <HAL_UART_IRQHandler+0x51e>
 800b320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d008      	beq.n	800b33e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fa69 	bl	800b804 <UART_EndTransmit_IT>
    return;
 800b332:	e004      	b.n	800b33e <HAL_UART_IRQHandler+0x51e>
    return;
 800b334:	bf00      	nop
 800b336:	e002      	b.n	800b33e <HAL_UART_IRQHandler+0x51e>
      return;
 800b338:	bf00      	nop
 800b33a:	e000      	b.n	800b33e <HAL_UART_IRQHandler+0x51e>
      return;
 800b33c:	bf00      	nop
  }
}
 800b33e:	37e8      	adds	r7, #232	; 0xe8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a10      	ldr	r2, [pc, #64]	; (800b434 <UART_InitCallbacksToDefault+0x4c>)
 800b3f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a0f      	ldr	r2, [pc, #60]	; (800b438 <UART_InitCallbacksToDefault+0x50>)
 800b3fa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a0f      	ldr	r2, [pc, #60]	; (800b43c <UART_InitCallbacksToDefault+0x54>)
 800b400:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a0e      	ldr	r2, [pc, #56]	; (800b440 <UART_InitCallbacksToDefault+0x58>)
 800b406:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a0e      	ldr	r2, [pc, #56]	; (800b444 <UART_InitCallbacksToDefault+0x5c>)
 800b40c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a0d      	ldr	r2, [pc, #52]	; (800b448 <UART_InitCallbacksToDefault+0x60>)
 800b412:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a0d      	ldr	r2, [pc, #52]	; (800b44c <UART_InitCallbacksToDefault+0x64>)
 800b418:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a0c      	ldr	r2, [pc, #48]	; (800b450 <UART_InitCallbacksToDefault+0x68>)
 800b41e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a0c      	ldr	r2, [pc, #48]	; (800b454 <UART_InitCallbacksToDefault+0x6c>)
 800b424:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	0800b359 	.word	0x0800b359
 800b438:	0800b345 	.word	0x0800b345
 800b43c:	0800b36d 	.word	0x0800b36d
 800b440:	08004ea9 	.word	0x08004ea9
 800b444:	0800b381 	.word	0x0800b381
 800b448:	0800b395 	.word	0x0800b395
 800b44c:	0800b3a9 	.word	0x0800b3a9
 800b450:	0800b3bd 	.word	0x0800b3bd
 800b454:	0800b3d1 	.word	0x0800b3d1

0800b458 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b090      	sub	sp, #64	; 0x40
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b464:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b470:	2b00      	cmp	r3, #0
 800b472:	d137      	bne.n	800b4e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b476:	2200      	movs	r2, #0
 800b478:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3314      	adds	r3, #20
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	623b      	str	r3, [r7, #32]
   return(result);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b490:	63bb      	str	r3, [r7, #56]	; 0x38
 800b492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3314      	adds	r3, #20
 800b498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b49a:	633a      	str	r2, [r7, #48]	; 0x30
 800b49c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a2:	e841 2300 	strex	r3, r2, [r1]
 800b4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e5      	bne.n	800b47a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	330c      	adds	r3, #12
 800b4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	330c      	adds	r3, #12
 800b4cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ce:	61fa      	str	r2, [r7, #28]
 800b4d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	69b9      	ldr	r1, [r7, #24]
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	617b      	str	r3, [r7, #20]
   return(result);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e5      	bne.n	800b4ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4e2:	e003      	b.n	800b4ec <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4ea:	4798      	blx	r3
}
 800b4ec:	bf00      	nop
 800b4ee:	3740      	adds	r7, #64	; 0x40
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b500:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52e:	2b80      	cmp	r3, #128	; 0x80
 800b530:	bf0c      	ite	eq
 800b532:	2301      	moveq	r3, #1
 800b534:	2300      	movne	r3, #0
 800b536:	b2db      	uxtb	r3, r3
 800b538:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b21      	cmp	r3, #33	; 0x21
 800b544:	d108      	bne.n	800b558 <UART_DMAError+0x46>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2200      	movs	r2, #0
 800b550:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b552:	68b8      	ldr	r0, [r7, #8]
 800b554:	f000 f866 	bl	800b624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b562:	2b40      	cmp	r3, #64	; 0x40
 800b564:	bf0c      	ite	eq
 800b566:	2301      	moveq	r3, #1
 800b568:	2300      	movne	r3, #0
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b22      	cmp	r3, #34	; 0x22
 800b578:	d108      	bne.n	800b58c <UART_DMAError+0x7a>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d005      	beq.n	800b58c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2200      	movs	r2, #0
 800b584:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b586:	68b8      	ldr	r0, [r7, #8]
 800b588:	f000 f874 	bl	800b674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b590:	f043 0210 	orr.w	r2, r3, #16
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59c:	68b8      	ldr	r0, [r7, #8]
 800b59e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a0:	bf00      	nop
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	88fa      	ldrh	r2, [r7, #6]
 800b5c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	88fa      	ldrh	r2, [r7, #6]
 800b5c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2222      	movs	r2, #34	; 0x22
 800b5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d007      	beq.n	800b5f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68da      	ldr	r2, [r3, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695a      	ldr	r2, [r3, #20]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f042 0201 	orr.w	r2, r2, #1
 800b604:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f042 0220 	orr.w	r2, r2, #32
 800b614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b624:	b480      	push	{r7}
 800b626:	b089      	sub	sp, #36	; 0x24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	330c      	adds	r3, #12
 800b632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	330c      	adds	r3, #12
 800b64a:	69fa      	ldr	r2, [r7, #28]
 800b64c:	61ba      	str	r2, [r7, #24]
 800b64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	6979      	ldr	r1, [r7, #20]
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	613b      	str	r3, [r7, #16]
   return(result);
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e5      	bne.n	800b62c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b668:	bf00      	nop
 800b66a:	3724      	adds	r7, #36	; 0x24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b095      	sub	sp, #84	; 0x54
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	330c      	adds	r3, #12
 800b682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b686:	e853 3f00 	ldrex	r3, [r3]
 800b68a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b692:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	330c      	adds	r3, #12
 800b69a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b69c:	643a      	str	r2, [r7, #64]	; 0x40
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e5      	bne.n	800b67c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3314      	adds	r3, #20
 800b6b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	e853 3f00 	ldrex	r3, [r3]
 800b6be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3314      	adds	r3, #20
 800b6ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d8:	e841 2300 	strex	r3, r2, [r1]
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e5      	bne.n	800b6b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d119      	bne.n	800b720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	330c      	adds	r3, #12
 800b6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f023 0310 	bic.w	r3, r3, #16
 800b702:	647b      	str	r3, [r7, #68]	; 0x44
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	330c      	adds	r3, #12
 800b70a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b70c:	61ba      	str	r2, [r7, #24]
 800b70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	6979      	ldr	r1, [r7, #20]
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	613b      	str	r3, [r7, #16]
   return(result);
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e5      	bne.n	800b6ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2220      	movs	r2, #32
 800b724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b72e:	bf00      	nop
 800b730:	3754      	adds	r7, #84	; 0x54
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b21      	cmp	r3, #33	; 0x21
 800b776:	d13e      	bne.n	800b7f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b780:	d114      	bne.n	800b7ac <UART_Transmit_IT+0x48>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d110      	bne.n	800b7ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b79e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	1c9a      	adds	r2, r3, #2
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	621a      	str	r2, [r3, #32]
 800b7aa:	e008      	b.n	800b7be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	1c59      	adds	r1, r3, #1
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	6211      	str	r1, [r2, #32]
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10f      	bne.n	800b7f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e000      	b.n	800b7f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b7f6:	2302      	movs	r3, #2
  }
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b81a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2220      	movs	r2, #32
 800b820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b08c      	sub	sp, #48	; 0x30
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b22      	cmp	r3, #34	; 0x22
 800b848:	f040 80ad 	bne.w	800b9a6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b854:	d117      	bne.n	800b886 <UART_Receive_IT+0x50>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d113      	bne.n	800b886 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b874:	b29a      	uxth	r2, r3
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87e:	1c9a      	adds	r2, r3, #2
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	629a      	str	r2, [r3, #40]	; 0x28
 800b884:	e026      	b.n	800b8d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b88c:	2300      	movs	r3, #0
 800b88e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b898:	d007      	beq.n	800b8aa <UART_Receive_IT+0x74>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10a      	bne.n	800b8b8 <UART_Receive_IT+0x82>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d106      	bne.n	800b8b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	e008      	b.n	800b8ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ce:	1c5a      	adds	r2, r3, #1
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d15c      	bne.n	800b9a2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f022 0220 	bic.w	r2, r2, #32
 800b8f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	695a      	ldr	r2, [r3, #20]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0201 	bic.w	r2, r2, #1
 800b916:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2220      	movs	r2, #32
 800b91c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b924:	2b01      	cmp	r3, #1
 800b926:	d136      	bne.n	800b996 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	330c      	adds	r3, #12
 800b934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	613b      	str	r3, [r7, #16]
   return(result);
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f023 0310 	bic.w	r3, r3, #16
 800b944:	627b      	str	r3, [r7, #36]	; 0x24
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	330c      	adds	r3, #12
 800b94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b94e:	623a      	str	r2, [r7, #32]
 800b950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	69f9      	ldr	r1, [r7, #28]
 800b954:	6a3a      	ldr	r2, [r7, #32]
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e5      	bne.n	800b92e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0310 	and.w	r3, r3, #16
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	d10a      	bne.n	800b986 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b970:	2300      	movs	r3, #0
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b98e:	4611      	mov	r1, r2
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3
 800b994:	e003      	b.n	800b99e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e002      	b.n	800b9a8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e000      	b.n	800b9a8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b9a6:	2302      	movs	r3, #2
  }
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3730      	adds	r7, #48	; 0x30
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9b4:	b0c0      	sub	sp, #256	; 0x100
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9cc:	68d9      	ldr	r1, [r3, #12]
 800b9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	ea40 0301 	orr.w	r3, r0, r1
 800b9d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9de:	689a      	ldr	r2, [r3, #8]
 800b9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba08:	f021 010c 	bic.w	r1, r1, #12
 800ba0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba16:	430b      	orrs	r3, r1
 800ba18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2a:	6999      	ldr	r1, [r3, #24]
 800ba2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	ea40 0301 	orr.w	r3, r0, r1
 800ba36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b8f      	ldr	r3, [pc, #572]	; (800bc7c <UART_SetConfig+0x2cc>)
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d005      	beq.n	800ba50 <UART_SetConfig+0xa0>
 800ba44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b8d      	ldr	r3, [pc, #564]	; (800bc80 <UART_SetConfig+0x2d0>)
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d104      	bne.n	800ba5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba50:	f7fc fee2 	bl	8008818 <HAL_RCC_GetPCLK2Freq>
 800ba54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ba58:	e003      	b.n	800ba62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba5a:	f7fc fec9 	bl	80087f0 <HAL_RCC_GetPCLK1Freq>
 800ba5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba6c:	f040 810c 	bne.w	800bc88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba74:	2200      	movs	r2, #0
 800ba76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ba82:	4622      	mov	r2, r4
 800ba84:	462b      	mov	r3, r5
 800ba86:	1891      	adds	r1, r2, r2
 800ba88:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba8a:	415b      	adcs	r3, r3
 800ba8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ba92:	4621      	mov	r1, r4
 800ba94:	eb12 0801 	adds.w	r8, r2, r1
 800ba98:	4629      	mov	r1, r5
 800ba9a:	eb43 0901 	adc.w	r9, r3, r1
 800ba9e:	f04f 0200 	mov.w	r2, #0
 800baa2:	f04f 0300 	mov.w	r3, #0
 800baa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800baaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800baae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bab2:	4690      	mov	r8, r2
 800bab4:	4699      	mov	r9, r3
 800bab6:	4623      	mov	r3, r4
 800bab8:	eb18 0303 	adds.w	r3, r8, r3
 800babc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bac0:	462b      	mov	r3, r5
 800bac2:	eb49 0303 	adc.w	r3, r9, r3
 800bac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800baca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bad6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bade:	460b      	mov	r3, r1
 800bae0:	18db      	adds	r3, r3, r3
 800bae2:	653b      	str	r3, [r7, #80]	; 0x50
 800bae4:	4613      	mov	r3, r2
 800bae6:	eb42 0303 	adc.w	r3, r2, r3
 800baea:	657b      	str	r3, [r7, #84]	; 0x54
 800baec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800baf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800baf4:	f7f5 f8d0 	bl	8000c98 <__aeabi_uldivmod>
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4b61      	ldr	r3, [pc, #388]	; (800bc84 <UART_SetConfig+0x2d4>)
 800bafe:	fba3 2302 	umull	r2, r3, r3, r2
 800bb02:	095b      	lsrs	r3, r3, #5
 800bb04:	011c      	lsls	r4, r3, #4
 800bb06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bb14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bb18:	4642      	mov	r2, r8
 800bb1a:	464b      	mov	r3, r9
 800bb1c:	1891      	adds	r1, r2, r2
 800bb1e:	64b9      	str	r1, [r7, #72]	; 0x48
 800bb20:	415b      	adcs	r3, r3
 800bb22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bb28:	4641      	mov	r1, r8
 800bb2a:	eb12 0a01 	adds.w	sl, r2, r1
 800bb2e:	4649      	mov	r1, r9
 800bb30:	eb43 0b01 	adc.w	fp, r3, r1
 800bb34:	f04f 0200 	mov.w	r2, #0
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bb40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bb44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb48:	4692      	mov	sl, r2
 800bb4a:	469b      	mov	fp, r3
 800bb4c:	4643      	mov	r3, r8
 800bb4e:	eb1a 0303 	adds.w	r3, sl, r3
 800bb52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb56:	464b      	mov	r3, r9
 800bb58:	eb4b 0303 	adc.w	r3, fp, r3
 800bb5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb74:	460b      	mov	r3, r1
 800bb76:	18db      	adds	r3, r3, r3
 800bb78:	643b      	str	r3, [r7, #64]	; 0x40
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	eb42 0303 	adc.w	r3, r2, r3
 800bb80:	647b      	str	r3, [r7, #68]	; 0x44
 800bb82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bb86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bb8a:	f7f5 f885 	bl	8000c98 <__aeabi_uldivmod>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4611      	mov	r1, r2
 800bb94:	4b3b      	ldr	r3, [pc, #236]	; (800bc84 <UART_SetConfig+0x2d4>)
 800bb96:	fba3 2301 	umull	r2, r3, r3, r1
 800bb9a:	095b      	lsrs	r3, r3, #5
 800bb9c:	2264      	movs	r2, #100	; 0x64
 800bb9e:	fb02 f303 	mul.w	r3, r2, r3
 800bba2:	1acb      	subs	r3, r1, r3
 800bba4:	00db      	lsls	r3, r3, #3
 800bba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bbaa:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <UART_SetConfig+0x2d4>)
 800bbac:	fba3 2302 	umull	r2, r3, r3, r2
 800bbb0:	095b      	lsrs	r3, r3, #5
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bbb8:	441c      	add	r4, r3
 800bbba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bbc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bbcc:	4642      	mov	r2, r8
 800bbce:	464b      	mov	r3, r9
 800bbd0:	1891      	adds	r1, r2, r2
 800bbd2:	63b9      	str	r1, [r7, #56]	; 0x38
 800bbd4:	415b      	adcs	r3, r3
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bbdc:	4641      	mov	r1, r8
 800bbde:	1851      	adds	r1, r2, r1
 800bbe0:	6339      	str	r1, [r7, #48]	; 0x30
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	414b      	adcs	r3, r1
 800bbe6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe8:	f04f 0200 	mov.w	r2, #0
 800bbec:	f04f 0300 	mov.w	r3, #0
 800bbf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bbf4:	4659      	mov	r1, fp
 800bbf6:	00cb      	lsls	r3, r1, #3
 800bbf8:	4651      	mov	r1, sl
 800bbfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbfe:	4651      	mov	r1, sl
 800bc00:	00ca      	lsls	r2, r1, #3
 800bc02:	4610      	mov	r0, r2
 800bc04:	4619      	mov	r1, r3
 800bc06:	4603      	mov	r3, r0
 800bc08:	4642      	mov	r2, r8
 800bc0a:	189b      	adds	r3, r3, r2
 800bc0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc10:	464b      	mov	r3, r9
 800bc12:	460a      	mov	r2, r1
 800bc14:	eb42 0303 	adc.w	r3, r2, r3
 800bc18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bc2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc30:	460b      	mov	r3, r1
 800bc32:	18db      	adds	r3, r3, r3
 800bc34:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc36:	4613      	mov	r3, r2
 800bc38:	eb42 0303 	adc.w	r3, r2, r3
 800bc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bc46:	f7f5 f827 	bl	8000c98 <__aeabi_uldivmod>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <UART_SetConfig+0x2d4>)
 800bc50:	fba3 1302 	umull	r1, r3, r3, r2
 800bc54:	095b      	lsrs	r3, r3, #5
 800bc56:	2164      	movs	r1, #100	; 0x64
 800bc58:	fb01 f303 	mul.w	r3, r1, r3
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	3332      	adds	r3, #50	; 0x32
 800bc62:	4a08      	ldr	r2, [pc, #32]	; (800bc84 <UART_SetConfig+0x2d4>)
 800bc64:	fba2 2303 	umull	r2, r3, r2, r3
 800bc68:	095b      	lsrs	r3, r3, #5
 800bc6a:	f003 0207 	and.w	r2, r3, #7
 800bc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4422      	add	r2, r4
 800bc76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc78:	e105      	b.n	800be86 <UART_SetConfig+0x4d6>
 800bc7a:	bf00      	nop
 800bc7c:	40011000 	.word	0x40011000
 800bc80:	40011400 	.word	0x40011400
 800bc84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bc9a:	4642      	mov	r2, r8
 800bc9c:	464b      	mov	r3, r9
 800bc9e:	1891      	adds	r1, r2, r2
 800bca0:	6239      	str	r1, [r7, #32]
 800bca2:	415b      	adcs	r3, r3
 800bca4:	627b      	str	r3, [r7, #36]	; 0x24
 800bca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bcaa:	4641      	mov	r1, r8
 800bcac:	1854      	adds	r4, r2, r1
 800bcae:	4649      	mov	r1, r9
 800bcb0:	eb43 0501 	adc.w	r5, r3, r1
 800bcb4:	f04f 0200 	mov.w	r2, #0
 800bcb8:	f04f 0300 	mov.w	r3, #0
 800bcbc:	00eb      	lsls	r3, r5, #3
 800bcbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bcc2:	00e2      	lsls	r2, r4, #3
 800bcc4:	4614      	mov	r4, r2
 800bcc6:	461d      	mov	r5, r3
 800bcc8:	4643      	mov	r3, r8
 800bcca:	18e3      	adds	r3, r4, r3
 800bccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bcd0:	464b      	mov	r3, r9
 800bcd2:	eb45 0303 	adc.w	r3, r5, r3
 800bcd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bcea:	f04f 0200 	mov.w	r2, #0
 800bcee:	f04f 0300 	mov.w	r3, #0
 800bcf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	008b      	lsls	r3, r1, #2
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd00:	4621      	mov	r1, r4
 800bd02:	008a      	lsls	r2, r1, #2
 800bd04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd08:	f7f4 ffc6 	bl	8000c98 <__aeabi_uldivmod>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4b60      	ldr	r3, [pc, #384]	; (800be94 <UART_SetConfig+0x4e4>)
 800bd12:	fba3 2302 	umull	r2, r3, r3, r2
 800bd16:	095b      	lsrs	r3, r3, #5
 800bd18:	011c      	lsls	r4, r3, #4
 800bd1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bd28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	464b      	mov	r3, r9
 800bd30:	1891      	adds	r1, r2, r2
 800bd32:	61b9      	str	r1, [r7, #24]
 800bd34:	415b      	adcs	r3, r3
 800bd36:	61fb      	str	r3, [r7, #28]
 800bd38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd3c:	4641      	mov	r1, r8
 800bd3e:	1851      	adds	r1, r2, r1
 800bd40:	6139      	str	r1, [r7, #16]
 800bd42:	4649      	mov	r1, r9
 800bd44:	414b      	adcs	r3, r1
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	f04f 0200 	mov.w	r2, #0
 800bd4c:	f04f 0300 	mov.w	r3, #0
 800bd50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bd54:	4659      	mov	r1, fp
 800bd56:	00cb      	lsls	r3, r1, #3
 800bd58:	4651      	mov	r1, sl
 800bd5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd5e:	4651      	mov	r1, sl
 800bd60:	00ca      	lsls	r2, r1, #3
 800bd62:	4610      	mov	r0, r2
 800bd64:	4619      	mov	r1, r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	4642      	mov	r2, r8
 800bd6a:	189b      	adds	r3, r3, r2
 800bd6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd70:	464b      	mov	r3, r9
 800bd72:	460a      	mov	r2, r1
 800bd74:	eb42 0303 	adc.w	r3, r2, r3
 800bd78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd86:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	f04f 0300 	mov.w	r3, #0
 800bd90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bd94:	4649      	mov	r1, r9
 800bd96:	008b      	lsls	r3, r1, #2
 800bd98:	4641      	mov	r1, r8
 800bd9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd9e:	4641      	mov	r1, r8
 800bda0:	008a      	lsls	r2, r1, #2
 800bda2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bda6:	f7f4 ff77 	bl	8000c98 <__aeabi_uldivmod>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4b39      	ldr	r3, [pc, #228]	; (800be94 <UART_SetConfig+0x4e4>)
 800bdb0:	fba3 1302 	umull	r1, r3, r3, r2
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	2164      	movs	r1, #100	; 0x64
 800bdb8:	fb01 f303 	mul.w	r3, r1, r3
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	3332      	adds	r3, #50	; 0x32
 800bdc2:	4a34      	ldr	r2, [pc, #208]	; (800be94 <UART_SetConfig+0x4e4>)
 800bdc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc8:	095b      	lsrs	r3, r3, #5
 800bdca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdce:	441c      	add	r4, r3
 800bdd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	673b      	str	r3, [r7, #112]	; 0x70
 800bdd8:	677a      	str	r2, [r7, #116]	; 0x74
 800bdda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	1891      	adds	r1, r2, r2
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	415b      	adcs	r3, r3
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bdee:	4641      	mov	r1, r8
 800bdf0:	1851      	adds	r1, r2, r1
 800bdf2:	6039      	str	r1, [r7, #0]
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	414b      	adcs	r3, r1
 800bdf8:	607b      	str	r3, [r7, #4]
 800bdfa:	f04f 0200 	mov.w	r2, #0
 800bdfe:	f04f 0300 	mov.w	r3, #0
 800be02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800be06:	4659      	mov	r1, fp
 800be08:	00cb      	lsls	r3, r1, #3
 800be0a:	4651      	mov	r1, sl
 800be0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be10:	4651      	mov	r1, sl
 800be12:	00ca      	lsls	r2, r1, #3
 800be14:	4610      	mov	r0, r2
 800be16:	4619      	mov	r1, r3
 800be18:	4603      	mov	r3, r0
 800be1a:	4642      	mov	r2, r8
 800be1c:	189b      	adds	r3, r3, r2
 800be1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be20:	464b      	mov	r3, r9
 800be22:	460a      	mov	r2, r1
 800be24:	eb42 0303 	adc.w	r3, r2, r3
 800be28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	663b      	str	r3, [r7, #96]	; 0x60
 800be34:	667a      	str	r2, [r7, #100]	; 0x64
 800be36:	f04f 0200 	mov.w	r2, #0
 800be3a:	f04f 0300 	mov.w	r3, #0
 800be3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800be42:	4649      	mov	r1, r9
 800be44:	008b      	lsls	r3, r1, #2
 800be46:	4641      	mov	r1, r8
 800be48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be4c:	4641      	mov	r1, r8
 800be4e:	008a      	lsls	r2, r1, #2
 800be50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800be54:	f7f4 ff20 	bl	8000c98 <__aeabi_uldivmod>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <UART_SetConfig+0x4e4>)
 800be5e:	fba3 1302 	umull	r1, r3, r3, r2
 800be62:	095b      	lsrs	r3, r3, #5
 800be64:	2164      	movs	r1, #100	; 0x64
 800be66:	fb01 f303 	mul.w	r3, r1, r3
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	011b      	lsls	r3, r3, #4
 800be6e:	3332      	adds	r3, #50	; 0x32
 800be70:	4a08      	ldr	r2, [pc, #32]	; (800be94 <UART_SetConfig+0x4e4>)
 800be72:	fba2 2303 	umull	r2, r3, r2, r3
 800be76:	095b      	lsrs	r3, r3, #5
 800be78:	f003 020f 	and.w	r2, r3, #15
 800be7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4422      	add	r2, r4
 800be84:	609a      	str	r2, [r3, #8]
}
 800be86:	bf00      	nop
 800be88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800be8c:	46bd      	mov	sp, r7
 800be8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be92:	bf00      	nop
 800be94:	51eb851f 	.word	0x51eb851f

0800be98 <__errno>:
 800be98:	4b01      	ldr	r3, [pc, #4]	; (800bea0 <__errno+0x8>)
 800be9a:	6818      	ldr	r0, [r3, #0]
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	2000023c 	.word	0x2000023c

0800bea4 <__libc_init_array>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	4d0d      	ldr	r5, [pc, #52]	; (800bedc <__libc_init_array+0x38>)
 800bea8:	4c0d      	ldr	r4, [pc, #52]	; (800bee0 <__libc_init_array+0x3c>)
 800beaa:	1b64      	subs	r4, r4, r5
 800beac:	10a4      	asrs	r4, r4, #2
 800beae:	2600      	movs	r6, #0
 800beb0:	42a6      	cmp	r6, r4
 800beb2:	d109      	bne.n	800bec8 <__libc_init_array+0x24>
 800beb4:	4d0b      	ldr	r5, [pc, #44]	; (800bee4 <__libc_init_array+0x40>)
 800beb6:	4c0c      	ldr	r4, [pc, #48]	; (800bee8 <__libc_init_array+0x44>)
 800beb8:	f006 ffec 	bl	8012e94 <_init>
 800bebc:	1b64      	subs	r4, r4, r5
 800bebe:	10a4      	asrs	r4, r4, #2
 800bec0:	2600      	movs	r6, #0
 800bec2:	42a6      	cmp	r6, r4
 800bec4:	d105      	bne.n	800bed2 <__libc_init_array+0x2e>
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800becc:	4798      	blx	r3
 800bece:	3601      	adds	r6, #1
 800bed0:	e7ee      	b.n	800beb0 <__libc_init_array+0xc>
 800bed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed6:	4798      	blx	r3
 800bed8:	3601      	adds	r6, #1
 800beda:	e7f2      	b.n	800bec2 <__libc_init_array+0x1e>
 800bedc:	08013990 	.word	0x08013990
 800bee0:	08013990 	.word	0x08013990
 800bee4:	08013990 	.word	0x08013990
 800bee8:	08013994 	.word	0x08013994

0800beec <memcpy>:
 800beec:	440a      	add	r2, r1
 800beee:	4291      	cmp	r1, r2
 800bef0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bef4:	d100      	bne.n	800bef8 <memcpy+0xc>
 800bef6:	4770      	bx	lr
 800bef8:	b510      	push	{r4, lr}
 800befa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800befe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf02:	4291      	cmp	r1, r2
 800bf04:	d1f9      	bne.n	800befa <memcpy+0xe>
 800bf06:	bd10      	pop	{r4, pc}

0800bf08 <memset>:
 800bf08:	4402      	add	r2, r0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d100      	bne.n	800bf12 <memset+0xa>
 800bf10:	4770      	bx	lr
 800bf12:	f803 1b01 	strb.w	r1, [r3], #1
 800bf16:	e7f9      	b.n	800bf0c <memset+0x4>

0800bf18 <__cvt>:
 800bf18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	ec55 4b10 	vmov	r4, r5, d0
 800bf20:	2d00      	cmp	r5, #0
 800bf22:	460e      	mov	r6, r1
 800bf24:	4619      	mov	r1, r3
 800bf26:	462b      	mov	r3, r5
 800bf28:	bfbb      	ittet	lt
 800bf2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf2e:	461d      	movlt	r5, r3
 800bf30:	2300      	movge	r3, #0
 800bf32:	232d      	movlt	r3, #45	; 0x2d
 800bf34:	700b      	strb	r3, [r1, #0]
 800bf36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf3c:	4691      	mov	r9, r2
 800bf3e:	f023 0820 	bic.w	r8, r3, #32
 800bf42:	bfbc      	itt	lt
 800bf44:	4622      	movlt	r2, r4
 800bf46:	4614      	movlt	r4, r2
 800bf48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf4c:	d005      	beq.n	800bf5a <__cvt+0x42>
 800bf4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf52:	d100      	bne.n	800bf56 <__cvt+0x3e>
 800bf54:	3601      	adds	r6, #1
 800bf56:	2102      	movs	r1, #2
 800bf58:	e000      	b.n	800bf5c <__cvt+0x44>
 800bf5a:	2103      	movs	r1, #3
 800bf5c:	ab03      	add	r3, sp, #12
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	ab02      	add	r3, sp, #8
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	ec45 4b10 	vmov	d0, r4, r5
 800bf68:	4653      	mov	r3, sl
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	f001 fdac 	bl	800dac8 <_dtoa_r>
 800bf70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf74:	4607      	mov	r7, r0
 800bf76:	d102      	bne.n	800bf7e <__cvt+0x66>
 800bf78:	f019 0f01 	tst.w	r9, #1
 800bf7c:	d022      	beq.n	800bfc4 <__cvt+0xac>
 800bf7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf82:	eb07 0906 	add.w	r9, r7, r6
 800bf86:	d110      	bne.n	800bfaa <__cvt+0x92>
 800bf88:	783b      	ldrb	r3, [r7, #0]
 800bf8a:	2b30      	cmp	r3, #48	; 0x30
 800bf8c:	d10a      	bne.n	800bfa4 <__cvt+0x8c>
 800bf8e:	2200      	movs	r2, #0
 800bf90:	2300      	movs	r3, #0
 800bf92:	4620      	mov	r0, r4
 800bf94:	4629      	mov	r1, r5
 800bf96:	f7f4 fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf9a:	b918      	cbnz	r0, 800bfa4 <__cvt+0x8c>
 800bf9c:	f1c6 0601 	rsb	r6, r6, #1
 800bfa0:	f8ca 6000 	str.w	r6, [sl]
 800bfa4:	f8da 3000 	ldr.w	r3, [sl]
 800bfa8:	4499      	add	r9, r3
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2300      	movs	r3, #0
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 fd91 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfb6:	b108      	cbz	r0, 800bfbc <__cvt+0xa4>
 800bfb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfbc:	2230      	movs	r2, #48	; 0x30
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	454b      	cmp	r3, r9
 800bfc2:	d307      	bcc.n	800bfd4 <__cvt+0xbc>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfc8:	1bdb      	subs	r3, r3, r7
 800bfca:	4638      	mov	r0, r7
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	b004      	add	sp, #16
 800bfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd4:	1c59      	adds	r1, r3, #1
 800bfd6:	9103      	str	r1, [sp, #12]
 800bfd8:	701a      	strb	r2, [r3, #0]
 800bfda:	e7f0      	b.n	800bfbe <__cvt+0xa6>

0800bfdc <__exponent>:
 800bfdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2900      	cmp	r1, #0
 800bfe2:	bfb8      	it	lt
 800bfe4:	4249      	neglt	r1, r1
 800bfe6:	f803 2b02 	strb.w	r2, [r3], #2
 800bfea:	bfb4      	ite	lt
 800bfec:	222d      	movlt	r2, #45	; 0x2d
 800bfee:	222b      	movge	r2, #43	; 0x2b
 800bff0:	2909      	cmp	r1, #9
 800bff2:	7042      	strb	r2, [r0, #1]
 800bff4:	dd2a      	ble.n	800c04c <__exponent+0x70>
 800bff6:	f10d 0407 	add.w	r4, sp, #7
 800bffa:	46a4      	mov	ip, r4
 800bffc:	270a      	movs	r7, #10
 800bffe:	46a6      	mov	lr, r4
 800c000:	460a      	mov	r2, r1
 800c002:	fb91 f6f7 	sdiv	r6, r1, r7
 800c006:	fb07 1516 	mls	r5, r7, r6, r1
 800c00a:	3530      	adds	r5, #48	; 0x30
 800c00c:	2a63      	cmp	r2, #99	; 0x63
 800c00e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c016:	4631      	mov	r1, r6
 800c018:	dcf1      	bgt.n	800bffe <__exponent+0x22>
 800c01a:	3130      	adds	r1, #48	; 0x30
 800c01c:	f1ae 0502 	sub.w	r5, lr, #2
 800c020:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c024:	1c44      	adds	r4, r0, #1
 800c026:	4629      	mov	r1, r5
 800c028:	4561      	cmp	r1, ip
 800c02a:	d30a      	bcc.n	800c042 <__exponent+0x66>
 800c02c:	f10d 0209 	add.w	r2, sp, #9
 800c030:	eba2 020e 	sub.w	r2, r2, lr
 800c034:	4565      	cmp	r5, ip
 800c036:	bf88      	it	hi
 800c038:	2200      	movhi	r2, #0
 800c03a:	4413      	add	r3, r2
 800c03c:	1a18      	subs	r0, r3, r0
 800c03e:	b003      	add	sp, #12
 800c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c04a:	e7ed      	b.n	800c028 <__exponent+0x4c>
 800c04c:	2330      	movs	r3, #48	; 0x30
 800c04e:	3130      	adds	r1, #48	; 0x30
 800c050:	7083      	strb	r3, [r0, #2]
 800c052:	70c1      	strb	r1, [r0, #3]
 800c054:	1d03      	adds	r3, r0, #4
 800c056:	e7f1      	b.n	800c03c <__exponent+0x60>

0800c058 <_printf_float>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	ed2d 8b02 	vpush	{d8}
 800c060:	b08d      	sub	sp, #52	; 0x34
 800c062:	460c      	mov	r4, r1
 800c064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c068:	4616      	mov	r6, r2
 800c06a:	461f      	mov	r7, r3
 800c06c:	4605      	mov	r5, r0
 800c06e:	f002 fe89 	bl	800ed84 <_localeconv_r>
 800c072:	f8d0 a000 	ldr.w	sl, [r0]
 800c076:	4650      	mov	r0, sl
 800c078:	f7f4 f8b2 	bl	80001e0 <strlen>
 800c07c:	2300      	movs	r3, #0
 800c07e:	930a      	str	r3, [sp, #40]	; 0x28
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	9305      	str	r3, [sp, #20]
 800c084:	f8d8 3000 	ldr.w	r3, [r8]
 800c088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c08c:	3307      	adds	r3, #7
 800c08e:	f023 0307 	bic.w	r3, r3, #7
 800c092:	f103 0208 	add.w	r2, r3, #8
 800c096:	f8c8 2000 	str.w	r2, [r8]
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c0a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c0a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0aa:	9307      	str	r3, [sp, #28]
 800c0ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0b0:	ee08 0a10 	vmov	s16, r0
 800c0b4:	4b9f      	ldr	r3, [pc, #636]	; (800c334 <_printf_float+0x2dc>)
 800c0b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c0be:	f7f4 fd3d 	bl	8000b3c <__aeabi_dcmpun>
 800c0c2:	bb88      	cbnz	r0, 800c128 <_printf_float+0xd0>
 800c0c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0c8:	4b9a      	ldr	r3, [pc, #616]	; (800c334 <_printf_float+0x2dc>)
 800c0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ce:	f7f4 fd17 	bl	8000b00 <__aeabi_dcmple>
 800c0d2:	bb48      	cbnz	r0, 800c128 <_printf_float+0xd0>
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 fd06 	bl	8000aec <__aeabi_dcmplt>
 800c0e0:	b110      	cbz	r0, 800c0e8 <_printf_float+0x90>
 800c0e2:	232d      	movs	r3, #45	; 0x2d
 800c0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0e8:	4b93      	ldr	r3, [pc, #588]	; (800c338 <_printf_float+0x2e0>)
 800c0ea:	4894      	ldr	r0, [pc, #592]	; (800c33c <_printf_float+0x2e4>)
 800c0ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c0f0:	bf94      	ite	ls
 800c0f2:	4698      	movls	r8, r3
 800c0f4:	4680      	movhi	r8, r0
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	6123      	str	r3, [r4, #16]
 800c0fa:	9b05      	ldr	r3, [sp, #20]
 800c0fc:	f023 0204 	bic.w	r2, r3, #4
 800c100:	6022      	str	r2, [r4, #0]
 800c102:	f04f 0900 	mov.w	r9, #0
 800c106:	9700      	str	r7, [sp, #0]
 800c108:	4633      	mov	r3, r6
 800c10a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c10c:	4621      	mov	r1, r4
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 f9d8 	bl	800c4c4 <_printf_common>
 800c114:	3001      	adds	r0, #1
 800c116:	f040 8090 	bne.w	800c23a <_printf_float+0x1e2>
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	b00d      	add	sp, #52	; 0x34
 800c120:	ecbd 8b02 	vpop	{d8}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	4640      	mov	r0, r8
 800c12e:	4649      	mov	r1, r9
 800c130:	f7f4 fd04 	bl	8000b3c <__aeabi_dcmpun>
 800c134:	b140      	cbz	r0, 800c148 <_printf_float+0xf0>
 800c136:	464b      	mov	r3, r9
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bfbc      	itt	lt
 800c13c:	232d      	movlt	r3, #45	; 0x2d
 800c13e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c142:	487f      	ldr	r0, [pc, #508]	; (800c340 <_printf_float+0x2e8>)
 800c144:	4b7f      	ldr	r3, [pc, #508]	; (800c344 <_printf_float+0x2ec>)
 800c146:	e7d1      	b.n	800c0ec <_printf_float+0x94>
 800c148:	6863      	ldr	r3, [r4, #4]
 800c14a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c14e:	9206      	str	r2, [sp, #24]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	d13f      	bne.n	800c1d4 <_printf_float+0x17c>
 800c154:	2306      	movs	r3, #6
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	9b05      	ldr	r3, [sp, #20]
 800c15a:	6861      	ldr	r1, [r4, #4]
 800c15c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c160:	2300      	movs	r3, #0
 800c162:	9303      	str	r3, [sp, #12]
 800c164:	ab0a      	add	r3, sp, #40	; 0x28
 800c166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c16a:	ab09      	add	r3, sp, #36	; 0x24
 800c16c:	ec49 8b10 	vmov	d0, r8, r9
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	6022      	str	r2, [r4, #0]
 800c174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c178:	4628      	mov	r0, r5
 800c17a:	f7ff fecd 	bl	800bf18 <__cvt>
 800c17e:	9b06      	ldr	r3, [sp, #24]
 800c180:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c182:	2b47      	cmp	r3, #71	; 0x47
 800c184:	4680      	mov	r8, r0
 800c186:	d108      	bne.n	800c19a <_printf_float+0x142>
 800c188:	1cc8      	adds	r0, r1, #3
 800c18a:	db02      	blt.n	800c192 <_printf_float+0x13a>
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	4299      	cmp	r1, r3
 800c190:	dd41      	ble.n	800c216 <_printf_float+0x1be>
 800c192:	f1ab 0b02 	sub.w	fp, fp, #2
 800c196:	fa5f fb8b 	uxtb.w	fp, fp
 800c19a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c19e:	d820      	bhi.n	800c1e2 <_printf_float+0x18a>
 800c1a0:	3901      	subs	r1, #1
 800c1a2:	465a      	mov	r2, fp
 800c1a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1a8:	9109      	str	r1, [sp, #36]	; 0x24
 800c1aa:	f7ff ff17 	bl	800bfdc <__exponent>
 800c1ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1b0:	1813      	adds	r3, r2, r0
 800c1b2:	2a01      	cmp	r2, #1
 800c1b4:	4681      	mov	r9, r0
 800c1b6:	6123      	str	r3, [r4, #16]
 800c1b8:	dc02      	bgt.n	800c1c0 <_printf_float+0x168>
 800c1ba:	6822      	ldr	r2, [r4, #0]
 800c1bc:	07d2      	lsls	r2, r2, #31
 800c1be:	d501      	bpl.n	800c1c4 <_printf_float+0x16c>
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	6123      	str	r3, [r4, #16]
 800c1c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d09c      	beq.n	800c106 <_printf_float+0xae>
 800c1cc:	232d      	movs	r3, #45	; 0x2d
 800c1ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1d2:	e798      	b.n	800c106 <_printf_float+0xae>
 800c1d4:	9a06      	ldr	r2, [sp, #24]
 800c1d6:	2a47      	cmp	r2, #71	; 0x47
 800c1d8:	d1be      	bne.n	800c158 <_printf_float+0x100>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1bc      	bne.n	800c158 <_printf_float+0x100>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e7b9      	b.n	800c156 <_printf_float+0xfe>
 800c1e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c1e6:	d118      	bne.n	800c21a <_printf_float+0x1c2>
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	6863      	ldr	r3, [r4, #4]
 800c1ec:	dd0b      	ble.n	800c206 <_printf_float+0x1ae>
 800c1ee:	6121      	str	r1, [r4, #16]
 800c1f0:	b913      	cbnz	r3, 800c1f8 <_printf_float+0x1a0>
 800c1f2:	6822      	ldr	r2, [r4, #0]
 800c1f4:	07d0      	lsls	r0, r2, #31
 800c1f6:	d502      	bpl.n	800c1fe <_printf_float+0x1a6>
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	440b      	add	r3, r1
 800c1fc:	6123      	str	r3, [r4, #16]
 800c1fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800c200:	f04f 0900 	mov.w	r9, #0
 800c204:	e7de      	b.n	800c1c4 <_printf_float+0x16c>
 800c206:	b913      	cbnz	r3, 800c20e <_printf_float+0x1b6>
 800c208:	6822      	ldr	r2, [r4, #0]
 800c20a:	07d2      	lsls	r2, r2, #31
 800c20c:	d501      	bpl.n	800c212 <_printf_float+0x1ba>
 800c20e:	3302      	adds	r3, #2
 800c210:	e7f4      	b.n	800c1fc <_printf_float+0x1a4>
 800c212:	2301      	movs	r3, #1
 800c214:	e7f2      	b.n	800c1fc <_printf_float+0x1a4>
 800c216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21c:	4299      	cmp	r1, r3
 800c21e:	db05      	blt.n	800c22c <_printf_float+0x1d4>
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	6121      	str	r1, [r4, #16]
 800c224:	07d8      	lsls	r0, r3, #31
 800c226:	d5ea      	bpl.n	800c1fe <_printf_float+0x1a6>
 800c228:	1c4b      	adds	r3, r1, #1
 800c22a:	e7e7      	b.n	800c1fc <_printf_float+0x1a4>
 800c22c:	2900      	cmp	r1, #0
 800c22e:	bfd4      	ite	le
 800c230:	f1c1 0202 	rsble	r2, r1, #2
 800c234:	2201      	movgt	r2, #1
 800c236:	4413      	add	r3, r2
 800c238:	e7e0      	b.n	800c1fc <_printf_float+0x1a4>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	055a      	lsls	r2, r3, #21
 800c23e:	d407      	bmi.n	800c250 <_printf_float+0x1f8>
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	4642      	mov	r2, r8
 800c244:	4631      	mov	r1, r6
 800c246:	4628      	mov	r0, r5
 800c248:	47b8      	blx	r7
 800c24a:	3001      	adds	r0, #1
 800c24c:	d12c      	bne.n	800c2a8 <_printf_float+0x250>
 800c24e:	e764      	b.n	800c11a <_printf_float+0xc2>
 800c250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c254:	f240 80e0 	bls.w	800c418 <_printf_float+0x3c0>
 800c258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c25c:	2200      	movs	r2, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	f7f4 fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c264:	2800      	cmp	r0, #0
 800c266:	d034      	beq.n	800c2d2 <_printf_float+0x27a>
 800c268:	4a37      	ldr	r2, [pc, #220]	; (800c348 <_printf_float+0x2f0>)
 800c26a:	2301      	movs	r3, #1
 800c26c:	4631      	mov	r1, r6
 800c26e:	4628      	mov	r0, r5
 800c270:	47b8      	blx	r7
 800c272:	3001      	adds	r0, #1
 800c274:	f43f af51 	beq.w	800c11a <_printf_float+0xc2>
 800c278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c27c:	429a      	cmp	r2, r3
 800c27e:	db02      	blt.n	800c286 <_printf_float+0x22e>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	07d8      	lsls	r0, r3, #31
 800c284:	d510      	bpl.n	800c2a8 <_printf_float+0x250>
 800c286:	ee18 3a10 	vmov	r3, s16
 800c28a:	4652      	mov	r2, sl
 800c28c:	4631      	mov	r1, r6
 800c28e:	4628      	mov	r0, r5
 800c290:	47b8      	blx	r7
 800c292:	3001      	adds	r0, #1
 800c294:	f43f af41 	beq.w	800c11a <_printf_float+0xc2>
 800c298:	f04f 0800 	mov.w	r8, #0
 800c29c:	f104 091a 	add.w	r9, r4, #26
 800c2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	4543      	cmp	r3, r8
 800c2a6:	dc09      	bgt.n	800c2bc <_printf_float+0x264>
 800c2a8:	6823      	ldr	r3, [r4, #0]
 800c2aa:	079b      	lsls	r3, r3, #30
 800c2ac:	f100 8105 	bmi.w	800c4ba <_printf_float+0x462>
 800c2b0:	68e0      	ldr	r0, [r4, #12]
 800c2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2b4:	4298      	cmp	r0, r3
 800c2b6:	bfb8      	it	lt
 800c2b8:	4618      	movlt	r0, r3
 800c2ba:	e730      	b.n	800c11e <_printf_float+0xc6>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	464a      	mov	r2, r9
 800c2c0:	4631      	mov	r1, r6
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	47b8      	blx	r7
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	f43f af27 	beq.w	800c11a <_printf_float+0xc2>
 800c2cc:	f108 0801 	add.w	r8, r8, #1
 800c2d0:	e7e6      	b.n	800c2a0 <_printf_float+0x248>
 800c2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dc39      	bgt.n	800c34c <_printf_float+0x2f4>
 800c2d8:	4a1b      	ldr	r2, [pc, #108]	; (800c348 <_printf_float+0x2f0>)
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4628      	mov	r0, r5
 800c2e0:	47b8      	blx	r7
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	f43f af19 	beq.w	800c11a <_printf_float+0xc2>
 800c2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	d102      	bne.n	800c2f6 <_printf_float+0x29e>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	07d9      	lsls	r1, r3, #31
 800c2f4:	d5d8      	bpl.n	800c2a8 <_printf_float+0x250>
 800c2f6:	ee18 3a10 	vmov	r3, s16
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4628      	mov	r0, r5
 800c300:	47b8      	blx	r7
 800c302:	3001      	adds	r0, #1
 800c304:	f43f af09 	beq.w	800c11a <_printf_float+0xc2>
 800c308:	f04f 0900 	mov.w	r9, #0
 800c30c:	f104 0a1a 	add.w	sl, r4, #26
 800c310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c312:	425b      	negs	r3, r3
 800c314:	454b      	cmp	r3, r9
 800c316:	dc01      	bgt.n	800c31c <_printf_float+0x2c4>
 800c318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c31a:	e792      	b.n	800c242 <_printf_float+0x1ea>
 800c31c:	2301      	movs	r3, #1
 800c31e:	4652      	mov	r2, sl
 800c320:	4631      	mov	r1, r6
 800c322:	4628      	mov	r0, r5
 800c324:	47b8      	blx	r7
 800c326:	3001      	adds	r0, #1
 800c328:	f43f aef7 	beq.w	800c11a <_printf_float+0xc2>
 800c32c:	f109 0901 	add.w	r9, r9, #1
 800c330:	e7ee      	b.n	800c310 <_printf_float+0x2b8>
 800c332:	bf00      	nop
 800c334:	7fefffff 	.word	0x7fefffff
 800c338:	08012ef0 	.word	0x08012ef0
 800c33c:	08012ef4 	.word	0x08012ef4
 800c340:	08012efc 	.word	0x08012efc
 800c344:	08012ef8 	.word	0x08012ef8
 800c348:	08012f00 	.word	0x08012f00
 800c34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c34e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c350:	429a      	cmp	r2, r3
 800c352:	bfa8      	it	ge
 800c354:	461a      	movge	r2, r3
 800c356:	2a00      	cmp	r2, #0
 800c358:	4691      	mov	r9, r2
 800c35a:	dc37      	bgt.n	800c3cc <_printf_float+0x374>
 800c35c:	f04f 0b00 	mov.w	fp, #0
 800c360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c364:	f104 021a 	add.w	r2, r4, #26
 800c368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	eba3 0309 	sub.w	r3, r3, r9
 800c370:	455b      	cmp	r3, fp
 800c372:	dc33      	bgt.n	800c3dc <_printf_float+0x384>
 800c374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c378:	429a      	cmp	r2, r3
 800c37a:	db3b      	blt.n	800c3f4 <_printf_float+0x39c>
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	07da      	lsls	r2, r3, #31
 800c380:	d438      	bmi.n	800c3f4 <_printf_float+0x39c>
 800c382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c384:	9a05      	ldr	r2, [sp, #20]
 800c386:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c388:	1a9a      	subs	r2, r3, r2
 800c38a:	eba3 0901 	sub.w	r9, r3, r1
 800c38e:	4591      	cmp	r9, r2
 800c390:	bfa8      	it	ge
 800c392:	4691      	movge	r9, r2
 800c394:	f1b9 0f00 	cmp.w	r9, #0
 800c398:	dc35      	bgt.n	800c406 <_printf_float+0x3ae>
 800c39a:	f04f 0800 	mov.w	r8, #0
 800c39e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3a2:	f104 0a1a 	add.w	sl, r4, #26
 800c3a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3aa:	1a9b      	subs	r3, r3, r2
 800c3ac:	eba3 0309 	sub.w	r3, r3, r9
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	f77f af79 	ble.w	800c2a8 <_printf_float+0x250>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	4652      	mov	r2, sl
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b8      	blx	r7
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	f43f aeaa 	beq.w	800c11a <_printf_float+0xc2>
 800c3c6:	f108 0801 	add.w	r8, r8, #1
 800c3ca:	e7ec      	b.n	800c3a6 <_printf_float+0x34e>
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	47b8      	blx	r7
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	d1c0      	bne.n	800c35c <_printf_float+0x304>
 800c3da:	e69e      	b.n	800c11a <_printf_float+0xc2>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	4631      	mov	r1, r6
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	9205      	str	r2, [sp, #20]
 800c3e4:	47b8      	blx	r7
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	f43f ae97 	beq.w	800c11a <_printf_float+0xc2>
 800c3ec:	9a05      	ldr	r2, [sp, #20]
 800c3ee:	f10b 0b01 	add.w	fp, fp, #1
 800c3f2:	e7b9      	b.n	800c368 <_printf_float+0x310>
 800c3f4:	ee18 3a10 	vmov	r3, s16
 800c3f8:	4652      	mov	r2, sl
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	47b8      	blx	r7
 800c400:	3001      	adds	r0, #1
 800c402:	d1be      	bne.n	800c382 <_printf_float+0x32a>
 800c404:	e689      	b.n	800c11a <_printf_float+0xc2>
 800c406:	9a05      	ldr	r2, [sp, #20]
 800c408:	464b      	mov	r3, r9
 800c40a:	4442      	add	r2, r8
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	d1c1      	bne.n	800c39a <_printf_float+0x342>
 800c416:	e680      	b.n	800c11a <_printf_float+0xc2>
 800c418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c41a:	2a01      	cmp	r2, #1
 800c41c:	dc01      	bgt.n	800c422 <_printf_float+0x3ca>
 800c41e:	07db      	lsls	r3, r3, #31
 800c420:	d538      	bpl.n	800c494 <_printf_float+0x43c>
 800c422:	2301      	movs	r3, #1
 800c424:	4642      	mov	r2, r8
 800c426:	4631      	mov	r1, r6
 800c428:	4628      	mov	r0, r5
 800c42a:	47b8      	blx	r7
 800c42c:	3001      	adds	r0, #1
 800c42e:	f43f ae74 	beq.w	800c11a <_printf_float+0xc2>
 800c432:	ee18 3a10 	vmov	r3, s16
 800c436:	4652      	mov	r2, sl
 800c438:	4631      	mov	r1, r6
 800c43a:	4628      	mov	r0, r5
 800c43c:	47b8      	blx	r7
 800c43e:	3001      	adds	r0, #1
 800c440:	f43f ae6b 	beq.w	800c11a <_printf_float+0xc2>
 800c444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c448:	2200      	movs	r2, #0
 800c44a:	2300      	movs	r3, #0
 800c44c:	f7f4 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 800c450:	b9d8      	cbnz	r0, 800c48a <_printf_float+0x432>
 800c452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c454:	f108 0201 	add.w	r2, r8, #1
 800c458:	3b01      	subs	r3, #1
 800c45a:	4631      	mov	r1, r6
 800c45c:	4628      	mov	r0, r5
 800c45e:	47b8      	blx	r7
 800c460:	3001      	adds	r0, #1
 800c462:	d10e      	bne.n	800c482 <_printf_float+0x42a>
 800c464:	e659      	b.n	800c11a <_printf_float+0xc2>
 800c466:	2301      	movs	r3, #1
 800c468:	4652      	mov	r2, sl
 800c46a:	4631      	mov	r1, r6
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b8      	blx	r7
 800c470:	3001      	adds	r0, #1
 800c472:	f43f ae52 	beq.w	800c11a <_printf_float+0xc2>
 800c476:	f108 0801 	add.w	r8, r8, #1
 800c47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c47c:	3b01      	subs	r3, #1
 800c47e:	4543      	cmp	r3, r8
 800c480:	dcf1      	bgt.n	800c466 <_printf_float+0x40e>
 800c482:	464b      	mov	r3, r9
 800c484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c488:	e6dc      	b.n	800c244 <_printf_float+0x1ec>
 800c48a:	f04f 0800 	mov.w	r8, #0
 800c48e:	f104 0a1a 	add.w	sl, r4, #26
 800c492:	e7f2      	b.n	800c47a <_printf_float+0x422>
 800c494:	2301      	movs	r3, #1
 800c496:	4642      	mov	r2, r8
 800c498:	e7df      	b.n	800c45a <_printf_float+0x402>
 800c49a:	2301      	movs	r3, #1
 800c49c:	464a      	mov	r2, r9
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	47b8      	blx	r7
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	f43f ae38 	beq.w	800c11a <_printf_float+0xc2>
 800c4aa:	f108 0801 	add.w	r8, r8, #1
 800c4ae:	68e3      	ldr	r3, [r4, #12]
 800c4b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4b2:	1a5b      	subs	r3, r3, r1
 800c4b4:	4543      	cmp	r3, r8
 800c4b6:	dcf0      	bgt.n	800c49a <_printf_float+0x442>
 800c4b8:	e6fa      	b.n	800c2b0 <_printf_float+0x258>
 800c4ba:	f04f 0800 	mov.w	r8, #0
 800c4be:	f104 0919 	add.w	r9, r4, #25
 800c4c2:	e7f4      	b.n	800c4ae <_printf_float+0x456>

0800c4c4 <_printf_common>:
 800c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c8:	4616      	mov	r6, r2
 800c4ca:	4699      	mov	r9, r3
 800c4cc:	688a      	ldr	r2, [r1, #8]
 800c4ce:	690b      	ldr	r3, [r1, #16]
 800c4d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	bfb8      	it	lt
 800c4d8:	4613      	movlt	r3, r2
 800c4da:	6033      	str	r3, [r6, #0]
 800c4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4e0:	4607      	mov	r7, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	b10a      	cbz	r2, 800c4ea <_printf_common+0x26>
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	6033      	str	r3, [r6, #0]
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	0699      	lsls	r1, r3, #26
 800c4ee:	bf42      	ittt	mi
 800c4f0:	6833      	ldrmi	r3, [r6, #0]
 800c4f2:	3302      	addmi	r3, #2
 800c4f4:	6033      	strmi	r3, [r6, #0]
 800c4f6:	6825      	ldr	r5, [r4, #0]
 800c4f8:	f015 0506 	ands.w	r5, r5, #6
 800c4fc:	d106      	bne.n	800c50c <_printf_common+0x48>
 800c4fe:	f104 0a19 	add.w	sl, r4, #25
 800c502:	68e3      	ldr	r3, [r4, #12]
 800c504:	6832      	ldr	r2, [r6, #0]
 800c506:	1a9b      	subs	r3, r3, r2
 800c508:	42ab      	cmp	r3, r5
 800c50a:	dc26      	bgt.n	800c55a <_printf_common+0x96>
 800c50c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c510:	1e13      	subs	r3, r2, #0
 800c512:	6822      	ldr	r2, [r4, #0]
 800c514:	bf18      	it	ne
 800c516:	2301      	movne	r3, #1
 800c518:	0692      	lsls	r2, r2, #26
 800c51a:	d42b      	bmi.n	800c574 <_printf_common+0xb0>
 800c51c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c520:	4649      	mov	r1, r9
 800c522:	4638      	mov	r0, r7
 800c524:	47c0      	blx	r8
 800c526:	3001      	adds	r0, #1
 800c528:	d01e      	beq.n	800c568 <_printf_common+0xa4>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	68e5      	ldr	r5, [r4, #12]
 800c52e:	6832      	ldr	r2, [r6, #0]
 800c530:	f003 0306 	and.w	r3, r3, #6
 800c534:	2b04      	cmp	r3, #4
 800c536:	bf08      	it	eq
 800c538:	1aad      	subeq	r5, r5, r2
 800c53a:	68a3      	ldr	r3, [r4, #8]
 800c53c:	6922      	ldr	r2, [r4, #16]
 800c53e:	bf0c      	ite	eq
 800c540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c544:	2500      	movne	r5, #0
 800c546:	4293      	cmp	r3, r2
 800c548:	bfc4      	itt	gt
 800c54a:	1a9b      	subgt	r3, r3, r2
 800c54c:	18ed      	addgt	r5, r5, r3
 800c54e:	2600      	movs	r6, #0
 800c550:	341a      	adds	r4, #26
 800c552:	42b5      	cmp	r5, r6
 800c554:	d11a      	bne.n	800c58c <_printf_common+0xc8>
 800c556:	2000      	movs	r0, #0
 800c558:	e008      	b.n	800c56c <_printf_common+0xa8>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4652      	mov	r2, sl
 800c55e:	4649      	mov	r1, r9
 800c560:	4638      	mov	r0, r7
 800c562:	47c0      	blx	r8
 800c564:	3001      	adds	r0, #1
 800c566:	d103      	bne.n	800c570 <_printf_common+0xac>
 800c568:	f04f 30ff 	mov.w	r0, #4294967295
 800c56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c570:	3501      	adds	r5, #1
 800c572:	e7c6      	b.n	800c502 <_printf_common+0x3e>
 800c574:	18e1      	adds	r1, r4, r3
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	2030      	movs	r0, #48	; 0x30
 800c57a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c57e:	4422      	add	r2, r4
 800c580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c588:	3302      	adds	r3, #2
 800c58a:	e7c7      	b.n	800c51c <_printf_common+0x58>
 800c58c:	2301      	movs	r3, #1
 800c58e:	4622      	mov	r2, r4
 800c590:	4649      	mov	r1, r9
 800c592:	4638      	mov	r0, r7
 800c594:	47c0      	blx	r8
 800c596:	3001      	adds	r0, #1
 800c598:	d0e6      	beq.n	800c568 <_printf_common+0xa4>
 800c59a:	3601      	adds	r6, #1
 800c59c:	e7d9      	b.n	800c552 <_printf_common+0x8e>
	...

0800c5a0 <_printf_i>:
 800c5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a4:	7e0f      	ldrb	r7, [r1, #24]
 800c5a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5a8:	2f78      	cmp	r7, #120	; 0x78
 800c5aa:	4691      	mov	r9, r2
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	469a      	mov	sl, r3
 800c5b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5b6:	d807      	bhi.n	800c5c8 <_printf_i+0x28>
 800c5b8:	2f62      	cmp	r7, #98	; 0x62
 800c5ba:	d80a      	bhi.n	800c5d2 <_printf_i+0x32>
 800c5bc:	2f00      	cmp	r7, #0
 800c5be:	f000 80d8 	beq.w	800c772 <_printf_i+0x1d2>
 800c5c2:	2f58      	cmp	r7, #88	; 0x58
 800c5c4:	f000 80a3 	beq.w	800c70e <_printf_i+0x16e>
 800c5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5d0:	e03a      	b.n	800c648 <_printf_i+0xa8>
 800c5d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5d6:	2b15      	cmp	r3, #21
 800c5d8:	d8f6      	bhi.n	800c5c8 <_printf_i+0x28>
 800c5da:	a101      	add	r1, pc, #4	; (adr r1, 800c5e0 <_printf_i+0x40>)
 800c5dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5e0:	0800c639 	.word	0x0800c639
 800c5e4:	0800c64d 	.word	0x0800c64d
 800c5e8:	0800c5c9 	.word	0x0800c5c9
 800c5ec:	0800c5c9 	.word	0x0800c5c9
 800c5f0:	0800c5c9 	.word	0x0800c5c9
 800c5f4:	0800c5c9 	.word	0x0800c5c9
 800c5f8:	0800c64d 	.word	0x0800c64d
 800c5fc:	0800c5c9 	.word	0x0800c5c9
 800c600:	0800c5c9 	.word	0x0800c5c9
 800c604:	0800c5c9 	.word	0x0800c5c9
 800c608:	0800c5c9 	.word	0x0800c5c9
 800c60c:	0800c759 	.word	0x0800c759
 800c610:	0800c67d 	.word	0x0800c67d
 800c614:	0800c73b 	.word	0x0800c73b
 800c618:	0800c5c9 	.word	0x0800c5c9
 800c61c:	0800c5c9 	.word	0x0800c5c9
 800c620:	0800c77b 	.word	0x0800c77b
 800c624:	0800c5c9 	.word	0x0800c5c9
 800c628:	0800c67d 	.word	0x0800c67d
 800c62c:	0800c5c9 	.word	0x0800c5c9
 800c630:	0800c5c9 	.word	0x0800c5c9
 800c634:	0800c743 	.word	0x0800c743
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	1d1a      	adds	r2, r3, #4
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	602a      	str	r2, [r5, #0]
 800c640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c648:	2301      	movs	r3, #1
 800c64a:	e0a3      	b.n	800c794 <_printf_i+0x1f4>
 800c64c:	6820      	ldr	r0, [r4, #0]
 800c64e:	6829      	ldr	r1, [r5, #0]
 800c650:	0606      	lsls	r6, r0, #24
 800c652:	f101 0304 	add.w	r3, r1, #4
 800c656:	d50a      	bpl.n	800c66e <_printf_i+0xce>
 800c658:	680e      	ldr	r6, [r1, #0]
 800c65a:	602b      	str	r3, [r5, #0]
 800c65c:	2e00      	cmp	r6, #0
 800c65e:	da03      	bge.n	800c668 <_printf_i+0xc8>
 800c660:	232d      	movs	r3, #45	; 0x2d
 800c662:	4276      	negs	r6, r6
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c668:	485e      	ldr	r0, [pc, #376]	; (800c7e4 <_printf_i+0x244>)
 800c66a:	230a      	movs	r3, #10
 800c66c:	e019      	b.n	800c6a2 <_printf_i+0x102>
 800c66e:	680e      	ldr	r6, [r1, #0]
 800c670:	602b      	str	r3, [r5, #0]
 800c672:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c676:	bf18      	it	ne
 800c678:	b236      	sxthne	r6, r6
 800c67a:	e7ef      	b.n	800c65c <_printf_i+0xbc>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	6820      	ldr	r0, [r4, #0]
 800c680:	1d19      	adds	r1, r3, #4
 800c682:	6029      	str	r1, [r5, #0]
 800c684:	0601      	lsls	r1, r0, #24
 800c686:	d501      	bpl.n	800c68c <_printf_i+0xec>
 800c688:	681e      	ldr	r6, [r3, #0]
 800c68a:	e002      	b.n	800c692 <_printf_i+0xf2>
 800c68c:	0646      	lsls	r6, r0, #25
 800c68e:	d5fb      	bpl.n	800c688 <_printf_i+0xe8>
 800c690:	881e      	ldrh	r6, [r3, #0]
 800c692:	4854      	ldr	r0, [pc, #336]	; (800c7e4 <_printf_i+0x244>)
 800c694:	2f6f      	cmp	r7, #111	; 0x6f
 800c696:	bf0c      	ite	eq
 800c698:	2308      	moveq	r3, #8
 800c69a:	230a      	movne	r3, #10
 800c69c:	2100      	movs	r1, #0
 800c69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6a2:	6865      	ldr	r5, [r4, #4]
 800c6a4:	60a5      	str	r5, [r4, #8]
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	bfa2      	ittt	ge
 800c6aa:	6821      	ldrge	r1, [r4, #0]
 800c6ac:	f021 0104 	bicge.w	r1, r1, #4
 800c6b0:	6021      	strge	r1, [r4, #0]
 800c6b2:	b90e      	cbnz	r6, 800c6b8 <_printf_i+0x118>
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	d04d      	beq.n	800c754 <_printf_i+0x1b4>
 800c6b8:	4615      	mov	r5, r2
 800c6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6be:	fb03 6711 	mls	r7, r3, r1, r6
 800c6c2:	5dc7      	ldrb	r7, [r0, r7]
 800c6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6c8:	4637      	mov	r7, r6
 800c6ca:	42bb      	cmp	r3, r7
 800c6cc:	460e      	mov	r6, r1
 800c6ce:	d9f4      	bls.n	800c6ba <_printf_i+0x11a>
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	d10b      	bne.n	800c6ec <_printf_i+0x14c>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	07de      	lsls	r6, r3, #31
 800c6d8:	d508      	bpl.n	800c6ec <_printf_i+0x14c>
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	6861      	ldr	r1, [r4, #4]
 800c6de:	4299      	cmp	r1, r3
 800c6e0:	bfde      	ittt	le
 800c6e2:	2330      	movle	r3, #48	; 0x30
 800c6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6ec:	1b52      	subs	r2, r2, r5
 800c6ee:	6122      	str	r2, [r4, #16]
 800c6f0:	f8cd a000 	str.w	sl, [sp]
 800c6f4:	464b      	mov	r3, r9
 800c6f6:	aa03      	add	r2, sp, #12
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f7ff fee2 	bl	800c4c4 <_printf_common>
 800c700:	3001      	adds	r0, #1
 800c702:	d14c      	bne.n	800c79e <_printf_i+0x1fe>
 800c704:	f04f 30ff 	mov.w	r0, #4294967295
 800c708:	b004      	add	sp, #16
 800c70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c70e:	4835      	ldr	r0, [pc, #212]	; (800c7e4 <_printf_i+0x244>)
 800c710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c714:	6829      	ldr	r1, [r5, #0]
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	f851 6b04 	ldr.w	r6, [r1], #4
 800c71c:	6029      	str	r1, [r5, #0]
 800c71e:	061d      	lsls	r5, r3, #24
 800c720:	d514      	bpl.n	800c74c <_printf_i+0x1ac>
 800c722:	07df      	lsls	r7, r3, #31
 800c724:	bf44      	itt	mi
 800c726:	f043 0320 	orrmi.w	r3, r3, #32
 800c72a:	6023      	strmi	r3, [r4, #0]
 800c72c:	b91e      	cbnz	r6, 800c736 <_printf_i+0x196>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	f023 0320 	bic.w	r3, r3, #32
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	2310      	movs	r3, #16
 800c738:	e7b0      	b.n	800c69c <_printf_i+0xfc>
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	f043 0320 	orr.w	r3, r3, #32
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	2378      	movs	r3, #120	; 0x78
 800c744:	4828      	ldr	r0, [pc, #160]	; (800c7e8 <_printf_i+0x248>)
 800c746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c74a:	e7e3      	b.n	800c714 <_printf_i+0x174>
 800c74c:	0659      	lsls	r1, r3, #25
 800c74e:	bf48      	it	mi
 800c750:	b2b6      	uxthmi	r6, r6
 800c752:	e7e6      	b.n	800c722 <_printf_i+0x182>
 800c754:	4615      	mov	r5, r2
 800c756:	e7bb      	b.n	800c6d0 <_printf_i+0x130>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	6826      	ldr	r6, [r4, #0]
 800c75c:	6961      	ldr	r1, [r4, #20]
 800c75e:	1d18      	adds	r0, r3, #4
 800c760:	6028      	str	r0, [r5, #0]
 800c762:	0635      	lsls	r5, r6, #24
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	d501      	bpl.n	800c76c <_printf_i+0x1cc>
 800c768:	6019      	str	r1, [r3, #0]
 800c76a:	e002      	b.n	800c772 <_printf_i+0x1d2>
 800c76c:	0670      	lsls	r0, r6, #25
 800c76e:	d5fb      	bpl.n	800c768 <_printf_i+0x1c8>
 800c770:	8019      	strh	r1, [r3, #0]
 800c772:	2300      	movs	r3, #0
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	4615      	mov	r5, r2
 800c778:	e7ba      	b.n	800c6f0 <_printf_i+0x150>
 800c77a:	682b      	ldr	r3, [r5, #0]
 800c77c:	1d1a      	adds	r2, r3, #4
 800c77e:	602a      	str	r2, [r5, #0]
 800c780:	681d      	ldr	r5, [r3, #0]
 800c782:	6862      	ldr	r2, [r4, #4]
 800c784:	2100      	movs	r1, #0
 800c786:	4628      	mov	r0, r5
 800c788:	f7f3 fd32 	bl	80001f0 <memchr>
 800c78c:	b108      	cbz	r0, 800c792 <_printf_i+0x1f2>
 800c78e:	1b40      	subs	r0, r0, r5
 800c790:	6060      	str	r0, [r4, #4]
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	2300      	movs	r3, #0
 800c798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c79c:	e7a8      	b.n	800c6f0 <_printf_i+0x150>
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	47d0      	blx	sl
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d0ab      	beq.n	800c704 <_printf_i+0x164>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	079b      	lsls	r3, r3, #30
 800c7b0:	d413      	bmi.n	800c7da <_printf_i+0x23a>
 800c7b2:	68e0      	ldr	r0, [r4, #12]
 800c7b4:	9b03      	ldr	r3, [sp, #12]
 800c7b6:	4298      	cmp	r0, r3
 800c7b8:	bfb8      	it	lt
 800c7ba:	4618      	movlt	r0, r3
 800c7bc:	e7a4      	b.n	800c708 <_printf_i+0x168>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	47d0      	blx	sl
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d09b      	beq.n	800c704 <_printf_i+0x164>
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	9903      	ldr	r1, [sp, #12]
 800c7d2:	1a5b      	subs	r3, r3, r1
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	dcf2      	bgt.n	800c7be <_printf_i+0x21e>
 800c7d8:	e7eb      	b.n	800c7b2 <_printf_i+0x212>
 800c7da:	2500      	movs	r5, #0
 800c7dc:	f104 0619 	add.w	r6, r4, #25
 800c7e0:	e7f5      	b.n	800c7ce <_printf_i+0x22e>
 800c7e2:	bf00      	nop
 800c7e4:	08012f02 	.word	0x08012f02
 800c7e8:	08012f13 	.word	0x08012f13

0800c7ec <_scanf_float>:
 800c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	b087      	sub	sp, #28
 800c7f2:	4617      	mov	r7, r2
 800c7f4:	9303      	str	r3, [sp, #12]
 800c7f6:	688b      	ldr	r3, [r1, #8]
 800c7f8:	1e5a      	subs	r2, r3, #1
 800c7fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c7fe:	bf83      	ittte	hi
 800c800:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c804:	195b      	addhi	r3, r3, r5
 800c806:	9302      	strhi	r3, [sp, #8]
 800c808:	2300      	movls	r3, #0
 800c80a:	bf86      	itte	hi
 800c80c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c810:	608b      	strhi	r3, [r1, #8]
 800c812:	9302      	strls	r3, [sp, #8]
 800c814:	680b      	ldr	r3, [r1, #0]
 800c816:	468b      	mov	fp, r1
 800c818:	2500      	movs	r5, #0
 800c81a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c81e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c826:	4680      	mov	r8, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	465e      	mov	r6, fp
 800c82c:	46aa      	mov	sl, r5
 800c82e:	46a9      	mov	r9, r5
 800c830:	9501      	str	r5, [sp, #4]
 800c832:	68a2      	ldr	r2, [r4, #8]
 800c834:	b152      	cbz	r2, 800c84c <_scanf_float+0x60>
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	2b4e      	cmp	r3, #78	; 0x4e
 800c83c:	d864      	bhi.n	800c908 <_scanf_float+0x11c>
 800c83e:	2b40      	cmp	r3, #64	; 0x40
 800c840:	d83c      	bhi.n	800c8bc <_scanf_float+0xd0>
 800c842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c846:	b2c8      	uxtb	r0, r1
 800c848:	280e      	cmp	r0, #14
 800c84a:	d93a      	bls.n	800c8c2 <_scanf_float+0xd6>
 800c84c:	f1b9 0f00 	cmp.w	r9, #0
 800c850:	d003      	beq.n	800c85a <_scanf_float+0x6e>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c85e:	f1ba 0f01 	cmp.w	sl, #1
 800c862:	f200 8113 	bhi.w	800ca8c <_scanf_float+0x2a0>
 800c866:	455e      	cmp	r6, fp
 800c868:	f200 8105 	bhi.w	800ca76 <_scanf_float+0x28a>
 800c86c:	2501      	movs	r5, #1
 800c86e:	4628      	mov	r0, r5
 800c870:	b007      	add	sp, #28
 800c872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c87a:	2a0d      	cmp	r2, #13
 800c87c:	d8e6      	bhi.n	800c84c <_scanf_float+0x60>
 800c87e:	a101      	add	r1, pc, #4	; (adr r1, 800c884 <_scanf_float+0x98>)
 800c880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c884:	0800c9c3 	.word	0x0800c9c3
 800c888:	0800c84d 	.word	0x0800c84d
 800c88c:	0800c84d 	.word	0x0800c84d
 800c890:	0800c84d 	.word	0x0800c84d
 800c894:	0800ca23 	.word	0x0800ca23
 800c898:	0800c9fb 	.word	0x0800c9fb
 800c89c:	0800c84d 	.word	0x0800c84d
 800c8a0:	0800c84d 	.word	0x0800c84d
 800c8a4:	0800c9d1 	.word	0x0800c9d1
 800c8a8:	0800c84d 	.word	0x0800c84d
 800c8ac:	0800c84d 	.word	0x0800c84d
 800c8b0:	0800c84d 	.word	0x0800c84d
 800c8b4:	0800c84d 	.word	0x0800c84d
 800c8b8:	0800c989 	.word	0x0800c989
 800c8bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c8c0:	e7db      	b.n	800c87a <_scanf_float+0x8e>
 800c8c2:	290e      	cmp	r1, #14
 800c8c4:	d8c2      	bhi.n	800c84c <_scanf_float+0x60>
 800c8c6:	a001      	add	r0, pc, #4	; (adr r0, 800c8cc <_scanf_float+0xe0>)
 800c8c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8cc:	0800c97b 	.word	0x0800c97b
 800c8d0:	0800c84d 	.word	0x0800c84d
 800c8d4:	0800c97b 	.word	0x0800c97b
 800c8d8:	0800ca0f 	.word	0x0800ca0f
 800c8dc:	0800c84d 	.word	0x0800c84d
 800c8e0:	0800c929 	.word	0x0800c929
 800c8e4:	0800c965 	.word	0x0800c965
 800c8e8:	0800c965 	.word	0x0800c965
 800c8ec:	0800c965 	.word	0x0800c965
 800c8f0:	0800c965 	.word	0x0800c965
 800c8f4:	0800c965 	.word	0x0800c965
 800c8f8:	0800c965 	.word	0x0800c965
 800c8fc:	0800c965 	.word	0x0800c965
 800c900:	0800c965 	.word	0x0800c965
 800c904:	0800c965 	.word	0x0800c965
 800c908:	2b6e      	cmp	r3, #110	; 0x6e
 800c90a:	d809      	bhi.n	800c920 <_scanf_float+0x134>
 800c90c:	2b60      	cmp	r3, #96	; 0x60
 800c90e:	d8b2      	bhi.n	800c876 <_scanf_float+0x8a>
 800c910:	2b54      	cmp	r3, #84	; 0x54
 800c912:	d077      	beq.n	800ca04 <_scanf_float+0x218>
 800c914:	2b59      	cmp	r3, #89	; 0x59
 800c916:	d199      	bne.n	800c84c <_scanf_float+0x60>
 800c918:	2d07      	cmp	r5, #7
 800c91a:	d197      	bne.n	800c84c <_scanf_float+0x60>
 800c91c:	2508      	movs	r5, #8
 800c91e:	e029      	b.n	800c974 <_scanf_float+0x188>
 800c920:	2b74      	cmp	r3, #116	; 0x74
 800c922:	d06f      	beq.n	800ca04 <_scanf_float+0x218>
 800c924:	2b79      	cmp	r3, #121	; 0x79
 800c926:	e7f6      	b.n	800c916 <_scanf_float+0x12a>
 800c928:	6821      	ldr	r1, [r4, #0]
 800c92a:	05c8      	lsls	r0, r1, #23
 800c92c:	d51a      	bpl.n	800c964 <_scanf_float+0x178>
 800c92e:	9b02      	ldr	r3, [sp, #8]
 800c930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c934:	6021      	str	r1, [r4, #0]
 800c936:	f109 0901 	add.w	r9, r9, #1
 800c93a:	b11b      	cbz	r3, 800c944 <_scanf_float+0x158>
 800c93c:	3b01      	subs	r3, #1
 800c93e:	3201      	adds	r2, #1
 800c940:	9302      	str	r3, [sp, #8]
 800c942:	60a2      	str	r2, [r4, #8]
 800c944:	68a3      	ldr	r3, [r4, #8]
 800c946:	3b01      	subs	r3, #1
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	6923      	ldr	r3, [r4, #16]
 800c94c:	3301      	adds	r3, #1
 800c94e:	6123      	str	r3, [r4, #16]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3b01      	subs	r3, #1
 800c954:	2b00      	cmp	r3, #0
 800c956:	607b      	str	r3, [r7, #4]
 800c958:	f340 8084 	ble.w	800ca64 <_scanf_float+0x278>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	3301      	adds	r3, #1
 800c960:	603b      	str	r3, [r7, #0]
 800c962:	e766      	b.n	800c832 <_scanf_float+0x46>
 800c964:	eb1a 0f05 	cmn.w	sl, r5
 800c968:	f47f af70 	bne.w	800c84c <_scanf_float+0x60>
 800c96c:	6822      	ldr	r2, [r4, #0]
 800c96e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c972:	6022      	str	r2, [r4, #0]
 800c974:	f806 3b01 	strb.w	r3, [r6], #1
 800c978:	e7e4      	b.n	800c944 <_scanf_float+0x158>
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	0610      	lsls	r0, r2, #24
 800c97e:	f57f af65 	bpl.w	800c84c <_scanf_float+0x60>
 800c982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c986:	e7f4      	b.n	800c972 <_scanf_float+0x186>
 800c988:	f1ba 0f00 	cmp.w	sl, #0
 800c98c:	d10e      	bne.n	800c9ac <_scanf_float+0x1c0>
 800c98e:	f1b9 0f00 	cmp.w	r9, #0
 800c992:	d10e      	bne.n	800c9b2 <_scanf_float+0x1c6>
 800c994:	6822      	ldr	r2, [r4, #0]
 800c996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c99a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c99e:	d108      	bne.n	800c9b2 <_scanf_float+0x1c6>
 800c9a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9a4:	6022      	str	r2, [r4, #0]
 800c9a6:	f04f 0a01 	mov.w	sl, #1
 800c9aa:	e7e3      	b.n	800c974 <_scanf_float+0x188>
 800c9ac:	f1ba 0f02 	cmp.w	sl, #2
 800c9b0:	d055      	beq.n	800ca5e <_scanf_float+0x272>
 800c9b2:	2d01      	cmp	r5, #1
 800c9b4:	d002      	beq.n	800c9bc <_scanf_float+0x1d0>
 800c9b6:	2d04      	cmp	r5, #4
 800c9b8:	f47f af48 	bne.w	800c84c <_scanf_float+0x60>
 800c9bc:	3501      	adds	r5, #1
 800c9be:	b2ed      	uxtb	r5, r5
 800c9c0:	e7d8      	b.n	800c974 <_scanf_float+0x188>
 800c9c2:	f1ba 0f01 	cmp.w	sl, #1
 800c9c6:	f47f af41 	bne.w	800c84c <_scanf_float+0x60>
 800c9ca:	f04f 0a02 	mov.w	sl, #2
 800c9ce:	e7d1      	b.n	800c974 <_scanf_float+0x188>
 800c9d0:	b97d      	cbnz	r5, 800c9f2 <_scanf_float+0x206>
 800c9d2:	f1b9 0f00 	cmp.w	r9, #0
 800c9d6:	f47f af3c 	bne.w	800c852 <_scanf_float+0x66>
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c9e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c9e4:	f47f af39 	bne.w	800c85a <_scanf_float+0x6e>
 800c9e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9ec:	6022      	str	r2, [r4, #0]
 800c9ee:	2501      	movs	r5, #1
 800c9f0:	e7c0      	b.n	800c974 <_scanf_float+0x188>
 800c9f2:	2d03      	cmp	r5, #3
 800c9f4:	d0e2      	beq.n	800c9bc <_scanf_float+0x1d0>
 800c9f6:	2d05      	cmp	r5, #5
 800c9f8:	e7de      	b.n	800c9b8 <_scanf_float+0x1cc>
 800c9fa:	2d02      	cmp	r5, #2
 800c9fc:	f47f af26 	bne.w	800c84c <_scanf_float+0x60>
 800ca00:	2503      	movs	r5, #3
 800ca02:	e7b7      	b.n	800c974 <_scanf_float+0x188>
 800ca04:	2d06      	cmp	r5, #6
 800ca06:	f47f af21 	bne.w	800c84c <_scanf_float+0x60>
 800ca0a:	2507      	movs	r5, #7
 800ca0c:	e7b2      	b.n	800c974 <_scanf_float+0x188>
 800ca0e:	6822      	ldr	r2, [r4, #0]
 800ca10:	0591      	lsls	r1, r2, #22
 800ca12:	f57f af1b 	bpl.w	800c84c <_scanf_float+0x60>
 800ca16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ca1a:	6022      	str	r2, [r4, #0]
 800ca1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca20:	e7a8      	b.n	800c974 <_scanf_float+0x188>
 800ca22:	6822      	ldr	r2, [r4, #0]
 800ca24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ca28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ca2c:	d006      	beq.n	800ca3c <_scanf_float+0x250>
 800ca2e:	0550      	lsls	r0, r2, #21
 800ca30:	f57f af0c 	bpl.w	800c84c <_scanf_float+0x60>
 800ca34:	f1b9 0f00 	cmp.w	r9, #0
 800ca38:	f43f af0f 	beq.w	800c85a <_scanf_float+0x6e>
 800ca3c:	0591      	lsls	r1, r2, #22
 800ca3e:	bf58      	it	pl
 800ca40:	9901      	ldrpl	r1, [sp, #4]
 800ca42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca46:	bf58      	it	pl
 800ca48:	eba9 0101 	subpl.w	r1, r9, r1
 800ca4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ca50:	bf58      	it	pl
 800ca52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	f04f 0900 	mov.w	r9, #0
 800ca5c:	e78a      	b.n	800c974 <_scanf_float+0x188>
 800ca5e:	f04f 0a03 	mov.w	sl, #3
 800ca62:	e787      	b.n	800c974 <_scanf_float+0x188>
 800ca64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca68:	4639      	mov	r1, r7
 800ca6a:	4640      	mov	r0, r8
 800ca6c:	4798      	blx	r3
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f43f aedf 	beq.w	800c832 <_scanf_float+0x46>
 800ca74:	e6ea      	b.n	800c84c <_scanf_float+0x60>
 800ca76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca7e:	463a      	mov	r2, r7
 800ca80:	4640      	mov	r0, r8
 800ca82:	4798      	blx	r3
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	6123      	str	r3, [r4, #16]
 800ca8a:	e6ec      	b.n	800c866 <_scanf_float+0x7a>
 800ca8c:	1e6b      	subs	r3, r5, #1
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	d825      	bhi.n	800cade <_scanf_float+0x2f2>
 800ca92:	2d02      	cmp	r5, #2
 800ca94:	d836      	bhi.n	800cb04 <_scanf_float+0x318>
 800ca96:	455e      	cmp	r6, fp
 800ca98:	f67f aee8 	bls.w	800c86c <_scanf_float+0x80>
 800ca9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800caa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caa4:	463a      	mov	r2, r7
 800caa6:	4640      	mov	r0, r8
 800caa8:	4798      	blx	r3
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	3b01      	subs	r3, #1
 800caae:	6123      	str	r3, [r4, #16]
 800cab0:	e7f1      	b.n	800ca96 <_scanf_float+0x2aa>
 800cab2:	9802      	ldr	r0, [sp, #8]
 800cab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cabc:	9002      	str	r0, [sp, #8]
 800cabe:	463a      	mov	r2, r7
 800cac0:	4640      	mov	r0, r8
 800cac2:	4798      	blx	r3
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	3b01      	subs	r3, #1
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cace:	fa5f fa8a 	uxtb.w	sl, sl
 800cad2:	f1ba 0f02 	cmp.w	sl, #2
 800cad6:	d1ec      	bne.n	800cab2 <_scanf_float+0x2c6>
 800cad8:	3d03      	subs	r5, #3
 800cada:	b2ed      	uxtb	r5, r5
 800cadc:	1b76      	subs	r6, r6, r5
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	05da      	lsls	r2, r3, #23
 800cae2:	d52f      	bpl.n	800cb44 <_scanf_float+0x358>
 800cae4:	055b      	lsls	r3, r3, #21
 800cae6:	d510      	bpl.n	800cb0a <_scanf_float+0x31e>
 800cae8:	455e      	cmp	r6, fp
 800caea:	f67f aebf 	bls.w	800c86c <_scanf_float+0x80>
 800caee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800caf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caf6:	463a      	mov	r2, r7
 800caf8:	4640      	mov	r0, r8
 800cafa:	4798      	blx	r3
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	3b01      	subs	r3, #1
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	e7f1      	b.n	800cae8 <_scanf_float+0x2fc>
 800cb04:	46aa      	mov	sl, r5
 800cb06:	9602      	str	r6, [sp, #8]
 800cb08:	e7df      	b.n	800caca <_scanf_float+0x2de>
 800cb0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	2965      	cmp	r1, #101	; 0x65
 800cb12:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb16:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	d00c      	beq.n	800cb38 <_scanf_float+0x34c>
 800cb1e:	2945      	cmp	r1, #69	; 0x45
 800cb20:	d00a      	beq.n	800cb38 <_scanf_float+0x34c>
 800cb22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb26:	463a      	mov	r2, r7
 800cb28:	4640      	mov	r0, r8
 800cb2a:	4798      	blx	r3
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	1eb5      	subs	r5, r6, #2
 800cb36:	6123      	str	r3, [r4, #16]
 800cb38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb3c:	463a      	mov	r2, r7
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4798      	blx	r3
 800cb42:	462e      	mov	r6, r5
 800cb44:	6825      	ldr	r5, [r4, #0]
 800cb46:	f015 0510 	ands.w	r5, r5, #16
 800cb4a:	d159      	bne.n	800cc00 <_scanf_float+0x414>
 800cb4c:	7035      	strb	r5, [r6, #0]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb58:	d11b      	bne.n	800cb92 <_scanf_float+0x3a6>
 800cb5a:	9b01      	ldr	r3, [sp, #4]
 800cb5c:	454b      	cmp	r3, r9
 800cb5e:	eba3 0209 	sub.w	r2, r3, r9
 800cb62:	d123      	bne.n	800cbac <_scanf_float+0x3c0>
 800cb64:	2200      	movs	r2, #0
 800cb66:	4659      	mov	r1, fp
 800cb68:	4640      	mov	r0, r8
 800cb6a:	f000 fe97 	bl	800d89c <_strtod_r>
 800cb6e:	6822      	ldr	r2, [r4, #0]
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	f012 0f02 	tst.w	r2, #2
 800cb76:	ec57 6b10 	vmov	r6, r7, d0
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	d021      	beq.n	800cbc2 <_scanf_float+0x3d6>
 800cb7e:	9903      	ldr	r1, [sp, #12]
 800cb80:	1d1a      	adds	r2, r3, #4
 800cb82:	600a      	str	r2, [r1, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	e9c3 6700 	strd	r6, r7, [r3]
 800cb8a:	68e3      	ldr	r3, [r4, #12]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	60e3      	str	r3, [r4, #12]
 800cb90:	e66d      	b.n	800c86e <_scanf_float+0x82>
 800cb92:	9b04      	ldr	r3, [sp, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0e5      	beq.n	800cb64 <_scanf_float+0x378>
 800cb98:	9905      	ldr	r1, [sp, #20]
 800cb9a:	230a      	movs	r3, #10
 800cb9c:	462a      	mov	r2, r5
 800cb9e:	3101      	adds	r1, #1
 800cba0:	4640      	mov	r0, r8
 800cba2:	f000 ff03 	bl	800d9ac <_strtol_r>
 800cba6:	9b04      	ldr	r3, [sp, #16]
 800cba8:	9e05      	ldr	r6, [sp, #20]
 800cbaa:	1ac2      	subs	r2, r0, r3
 800cbac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cbb0:	429e      	cmp	r6, r3
 800cbb2:	bf28      	it	cs
 800cbb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cbb8:	4912      	ldr	r1, [pc, #72]	; (800cc04 <_scanf_float+0x418>)
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f000 f82c 	bl	800cc18 <siprintf>
 800cbc0:	e7d0      	b.n	800cb64 <_scanf_float+0x378>
 800cbc2:	9903      	ldr	r1, [sp, #12]
 800cbc4:	f012 0f04 	tst.w	r2, #4
 800cbc8:	f103 0204 	add.w	r2, r3, #4
 800cbcc:	600a      	str	r2, [r1, #0]
 800cbce:	d1d9      	bne.n	800cb84 <_scanf_float+0x398>
 800cbd0:	f8d3 8000 	ldr.w	r8, [r3]
 800cbd4:	ee10 2a10 	vmov	r2, s0
 800cbd8:	ee10 0a10 	vmov	r0, s0
 800cbdc:	463b      	mov	r3, r7
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 ffac 	bl	8000b3c <__aeabi_dcmpun>
 800cbe4:	b128      	cbz	r0, 800cbf2 <_scanf_float+0x406>
 800cbe6:	4808      	ldr	r0, [pc, #32]	; (800cc08 <_scanf_float+0x41c>)
 800cbe8:	f000 f810 	bl	800cc0c <nanf>
 800cbec:	ed88 0a00 	vstr	s0, [r8]
 800cbf0:	e7cb      	b.n	800cb8a <_scanf_float+0x39e>
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f3 ffff 	bl	8000bf8 <__aeabi_d2f>
 800cbfa:	f8c8 0000 	str.w	r0, [r8]
 800cbfe:	e7c4      	b.n	800cb8a <_scanf_float+0x39e>
 800cc00:	2500      	movs	r5, #0
 800cc02:	e634      	b.n	800c86e <_scanf_float+0x82>
 800cc04:	08012f24 	.word	0x08012f24
 800cc08:	08013330 	.word	0x08013330

0800cc0c <nanf>:
 800cc0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc14 <nanf+0x8>
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	7fc00000 	.word	0x7fc00000

0800cc18 <siprintf>:
 800cc18:	b40e      	push	{r1, r2, r3}
 800cc1a:	b500      	push	{lr}
 800cc1c:	b09c      	sub	sp, #112	; 0x70
 800cc1e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc20:	9002      	str	r0, [sp, #8]
 800cc22:	9006      	str	r0, [sp, #24]
 800cc24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc28:	4809      	ldr	r0, [pc, #36]	; (800cc50 <siprintf+0x38>)
 800cc2a:	9107      	str	r1, [sp, #28]
 800cc2c:	9104      	str	r1, [sp, #16]
 800cc2e:	4909      	ldr	r1, [pc, #36]	; (800cc54 <siprintf+0x3c>)
 800cc30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc34:	9105      	str	r1, [sp, #20]
 800cc36:	6800      	ldr	r0, [r0, #0]
 800cc38:	9301      	str	r3, [sp, #4]
 800cc3a:	a902      	add	r1, sp, #8
 800cc3c:	f002 fed4 	bl	800f9e8 <_svfiprintf_r>
 800cc40:	9b02      	ldr	r3, [sp, #8]
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	b01c      	add	sp, #112	; 0x70
 800cc48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc4c:	b003      	add	sp, #12
 800cc4e:	4770      	bx	lr
 800cc50:	2000023c 	.word	0x2000023c
 800cc54:	ffff0208 	.word	0xffff0208

0800cc58 <sulp>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	460d      	mov	r5, r1
 800cc5e:	ec45 4b10 	vmov	d0, r4, r5
 800cc62:	4616      	mov	r6, r2
 800cc64:	f002 fc1e 	bl	800f4a4 <__ulp>
 800cc68:	ec51 0b10 	vmov	r0, r1, d0
 800cc6c:	b17e      	cbz	r6, 800cc8e <sulp+0x36>
 800cc6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	dd09      	ble.n	800cc8e <sulp+0x36>
 800cc7a:	051b      	lsls	r3, r3, #20
 800cc7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc80:	2400      	movs	r4, #0
 800cc82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc86:	4622      	mov	r2, r4
 800cc88:	462b      	mov	r3, r5
 800cc8a:	f7f3 fcbd 	bl	8000608 <__aeabi_dmul>
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}

0800cc90 <_strtod_l>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	ed2d 8b02 	vpush	{d8}
 800cc98:	b09d      	sub	sp, #116	; 0x74
 800cc9a:	461f      	mov	r7, r3
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9318      	str	r3, [sp, #96]	; 0x60
 800cca0:	4ba2      	ldr	r3, [pc, #648]	; (800cf2c <_strtod_l+0x29c>)
 800cca2:	9213      	str	r2, [sp, #76]	; 0x4c
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	9305      	str	r3, [sp, #20]
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4618      	mov	r0, r3
 800ccac:	4688      	mov	r8, r1
 800ccae:	f7f3 fa97 	bl	80001e0 <strlen>
 800ccb2:	f04f 0a00 	mov.w	sl, #0
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	f04f 0b00 	mov.w	fp, #0
 800ccbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ccc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccc2:	781a      	ldrb	r2, [r3, #0]
 800ccc4:	2a2b      	cmp	r2, #43	; 0x2b
 800ccc6:	d04e      	beq.n	800cd66 <_strtod_l+0xd6>
 800ccc8:	d83b      	bhi.n	800cd42 <_strtod_l+0xb2>
 800ccca:	2a0d      	cmp	r2, #13
 800cccc:	d834      	bhi.n	800cd38 <_strtod_l+0xa8>
 800ccce:	2a08      	cmp	r2, #8
 800ccd0:	d834      	bhi.n	800cd3c <_strtod_l+0xac>
 800ccd2:	2a00      	cmp	r2, #0
 800ccd4:	d03e      	beq.n	800cd54 <_strtod_l+0xc4>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	930a      	str	r3, [sp, #40]	; 0x28
 800ccda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ccdc:	7833      	ldrb	r3, [r6, #0]
 800ccde:	2b30      	cmp	r3, #48	; 0x30
 800cce0:	f040 80b0 	bne.w	800ce44 <_strtod_l+0x1b4>
 800cce4:	7873      	ldrb	r3, [r6, #1]
 800cce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccea:	2b58      	cmp	r3, #88	; 0x58
 800ccec:	d168      	bne.n	800cdc0 <_strtod_l+0x130>
 800ccee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	ab18      	add	r3, sp, #96	; 0x60
 800ccf4:	9702      	str	r7, [sp, #8]
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	4a8d      	ldr	r2, [pc, #564]	; (800cf30 <_strtod_l+0x2a0>)
 800ccfa:	ab19      	add	r3, sp, #100	; 0x64
 800ccfc:	a917      	add	r1, sp, #92	; 0x5c
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f001 fd38 	bl	800e774 <__gethex>
 800cd04:	f010 0707 	ands.w	r7, r0, #7
 800cd08:	4605      	mov	r5, r0
 800cd0a:	d005      	beq.n	800cd18 <_strtod_l+0x88>
 800cd0c:	2f06      	cmp	r7, #6
 800cd0e:	d12c      	bne.n	800cd6a <_strtod_l+0xda>
 800cd10:	3601      	adds	r6, #1
 800cd12:	2300      	movs	r3, #0
 800cd14:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd16:	930a      	str	r3, [sp, #40]	; 0x28
 800cd18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f040 8590 	bne.w	800d840 <_strtod_l+0xbb0>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd22:	b1eb      	cbz	r3, 800cd60 <_strtod_l+0xd0>
 800cd24:	4652      	mov	r2, sl
 800cd26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd2a:	ec43 2b10 	vmov	d0, r2, r3
 800cd2e:	b01d      	add	sp, #116	; 0x74
 800cd30:	ecbd 8b02 	vpop	{d8}
 800cd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd38:	2a20      	cmp	r2, #32
 800cd3a:	d1cc      	bne.n	800ccd6 <_strtod_l+0x46>
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd40:	e7be      	b.n	800ccc0 <_strtod_l+0x30>
 800cd42:	2a2d      	cmp	r2, #45	; 0x2d
 800cd44:	d1c7      	bne.n	800ccd6 <_strtod_l+0x46>
 800cd46:	2201      	movs	r2, #1
 800cd48:	920a      	str	r2, [sp, #40]	; 0x28
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd4e:	785b      	ldrb	r3, [r3, #1]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1c2      	bne.n	800ccda <_strtod_l+0x4a>
 800cd54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f040 856e 	bne.w	800d83c <_strtod_l+0xbac>
 800cd60:	4652      	mov	r2, sl
 800cd62:	465b      	mov	r3, fp
 800cd64:	e7e1      	b.n	800cd2a <_strtod_l+0x9a>
 800cd66:	2200      	movs	r2, #0
 800cd68:	e7ee      	b.n	800cd48 <_strtod_l+0xb8>
 800cd6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd6c:	b13a      	cbz	r2, 800cd7e <_strtod_l+0xee>
 800cd6e:	2135      	movs	r1, #53	; 0x35
 800cd70:	a81a      	add	r0, sp, #104	; 0x68
 800cd72:	f002 fca2 	bl	800f6ba <__copybits>
 800cd76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f002 f861 	bl	800ee40 <_Bfree>
 800cd7e:	3f01      	subs	r7, #1
 800cd80:	2f04      	cmp	r7, #4
 800cd82:	d806      	bhi.n	800cd92 <_strtod_l+0x102>
 800cd84:	e8df f007 	tbb	[pc, r7]
 800cd88:	1714030a 	.word	0x1714030a
 800cd8c:	0a          	.byte	0x0a
 800cd8d:	00          	.byte	0x00
 800cd8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cd92:	0728      	lsls	r0, r5, #28
 800cd94:	d5c0      	bpl.n	800cd18 <_strtod_l+0x88>
 800cd96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cd9a:	e7bd      	b.n	800cd18 <_strtod_l+0x88>
 800cd9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cda0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cda2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cda6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cdaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdae:	e7f0      	b.n	800cd92 <_strtod_l+0x102>
 800cdb0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cf34 <_strtod_l+0x2a4>
 800cdb4:	e7ed      	b.n	800cd92 <_strtod_l+0x102>
 800cdb6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cdba:	f04f 3aff 	mov.w	sl, #4294967295
 800cdbe:	e7e8      	b.n	800cd92 <_strtod_l+0x102>
 800cdc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdc6:	785b      	ldrb	r3, [r3, #1]
 800cdc8:	2b30      	cmp	r3, #48	; 0x30
 800cdca:	d0f9      	beq.n	800cdc0 <_strtod_l+0x130>
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0a3      	beq.n	800cd18 <_strtod_l+0x88>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	f04f 0900 	mov.w	r9, #0
 800cdd6:	9304      	str	r3, [sp, #16]
 800cdd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdda:	9308      	str	r3, [sp, #32]
 800cddc:	f8cd 901c 	str.w	r9, [sp, #28]
 800cde0:	464f      	mov	r7, r9
 800cde2:	220a      	movs	r2, #10
 800cde4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cde6:	7806      	ldrb	r6, [r0, #0]
 800cde8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cdec:	b2d9      	uxtb	r1, r3
 800cdee:	2909      	cmp	r1, #9
 800cdf0:	d92a      	bls.n	800ce48 <_strtod_l+0x1b8>
 800cdf2:	9905      	ldr	r1, [sp, #20]
 800cdf4:	462a      	mov	r2, r5
 800cdf6:	f002 ff0f 	bl	800fc18 <strncmp>
 800cdfa:	b398      	cbz	r0, 800ce64 <_strtod_l+0x1d4>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	4632      	mov	r2, r6
 800ce00:	463d      	mov	r5, r7
 800ce02:	9005      	str	r0, [sp, #20]
 800ce04:	4603      	mov	r3, r0
 800ce06:	2a65      	cmp	r2, #101	; 0x65
 800ce08:	d001      	beq.n	800ce0e <_strtod_l+0x17e>
 800ce0a:	2a45      	cmp	r2, #69	; 0x45
 800ce0c:	d118      	bne.n	800ce40 <_strtod_l+0x1b0>
 800ce0e:	b91d      	cbnz	r5, 800ce18 <_strtod_l+0x188>
 800ce10:	9a04      	ldr	r2, [sp, #16]
 800ce12:	4302      	orrs	r2, r0
 800ce14:	d09e      	beq.n	800cd54 <_strtod_l+0xc4>
 800ce16:	2500      	movs	r5, #0
 800ce18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ce1c:	f108 0201 	add.w	r2, r8, #1
 800ce20:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce22:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ce26:	2a2b      	cmp	r2, #43	; 0x2b
 800ce28:	d075      	beq.n	800cf16 <_strtod_l+0x286>
 800ce2a:	2a2d      	cmp	r2, #45	; 0x2d
 800ce2c:	d07b      	beq.n	800cf26 <_strtod_l+0x296>
 800ce2e:	f04f 0c00 	mov.w	ip, #0
 800ce32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ce36:	2909      	cmp	r1, #9
 800ce38:	f240 8082 	bls.w	800cf40 <_strtod_l+0x2b0>
 800ce3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce40:	2600      	movs	r6, #0
 800ce42:	e09d      	b.n	800cf80 <_strtod_l+0x2f0>
 800ce44:	2300      	movs	r3, #0
 800ce46:	e7c4      	b.n	800cdd2 <_strtod_l+0x142>
 800ce48:	2f08      	cmp	r7, #8
 800ce4a:	bfd8      	it	le
 800ce4c:	9907      	ldrle	r1, [sp, #28]
 800ce4e:	f100 0001 	add.w	r0, r0, #1
 800ce52:	bfda      	itte	le
 800ce54:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce58:	9307      	strle	r3, [sp, #28]
 800ce5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ce5e:	3701      	adds	r7, #1
 800ce60:	9017      	str	r0, [sp, #92]	; 0x5c
 800ce62:	e7bf      	b.n	800cde4 <_strtod_l+0x154>
 800ce64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce66:	195a      	adds	r2, r3, r5
 800ce68:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce6a:	5d5a      	ldrb	r2, [r3, r5]
 800ce6c:	2f00      	cmp	r7, #0
 800ce6e:	d037      	beq.n	800cee0 <_strtod_l+0x250>
 800ce70:	9005      	str	r0, [sp, #20]
 800ce72:	463d      	mov	r5, r7
 800ce74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce78:	2b09      	cmp	r3, #9
 800ce7a:	d912      	bls.n	800cea2 <_strtod_l+0x212>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e7c2      	b.n	800ce06 <_strtod_l+0x176>
 800ce80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce86:	785a      	ldrb	r2, [r3, #1]
 800ce88:	3001      	adds	r0, #1
 800ce8a:	2a30      	cmp	r2, #48	; 0x30
 800ce8c:	d0f8      	beq.n	800ce80 <_strtod_l+0x1f0>
 800ce8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce92:	2b08      	cmp	r3, #8
 800ce94:	f200 84d9 	bhi.w	800d84a <_strtod_l+0xbba>
 800ce98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce9a:	9005      	str	r0, [sp, #20]
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	9308      	str	r3, [sp, #32]
 800cea0:	4605      	mov	r5, r0
 800cea2:	3a30      	subs	r2, #48	; 0x30
 800cea4:	f100 0301 	add.w	r3, r0, #1
 800cea8:	d014      	beq.n	800ced4 <_strtod_l+0x244>
 800ceaa:	9905      	ldr	r1, [sp, #20]
 800ceac:	4419      	add	r1, r3
 800ceae:	9105      	str	r1, [sp, #20]
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	eb00 0e05 	add.w	lr, r0, r5
 800ceb6:	210a      	movs	r1, #10
 800ceb8:	4573      	cmp	r3, lr
 800ceba:	d113      	bne.n	800cee4 <_strtod_l+0x254>
 800cebc:	182b      	adds	r3, r5, r0
 800cebe:	2b08      	cmp	r3, #8
 800cec0:	f105 0501 	add.w	r5, r5, #1
 800cec4:	4405      	add	r5, r0
 800cec6:	dc1c      	bgt.n	800cf02 <_strtod_l+0x272>
 800cec8:	9907      	ldr	r1, [sp, #28]
 800ceca:	230a      	movs	r3, #10
 800cecc:	fb03 2301 	mla	r3, r3, r1, r2
 800ced0:	9307      	str	r3, [sp, #28]
 800ced2:	2300      	movs	r3, #0
 800ced4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ced6:	1c51      	adds	r1, r2, #1
 800ced8:	9117      	str	r1, [sp, #92]	; 0x5c
 800ceda:	7852      	ldrb	r2, [r2, #1]
 800cedc:	4618      	mov	r0, r3
 800cede:	e7c9      	b.n	800ce74 <_strtod_l+0x1e4>
 800cee0:	4638      	mov	r0, r7
 800cee2:	e7d2      	b.n	800ce8a <_strtod_l+0x1fa>
 800cee4:	2b08      	cmp	r3, #8
 800cee6:	dc04      	bgt.n	800cef2 <_strtod_l+0x262>
 800cee8:	9e07      	ldr	r6, [sp, #28]
 800ceea:	434e      	muls	r6, r1
 800ceec:	9607      	str	r6, [sp, #28]
 800ceee:	3301      	adds	r3, #1
 800cef0:	e7e2      	b.n	800ceb8 <_strtod_l+0x228>
 800cef2:	f103 0c01 	add.w	ip, r3, #1
 800cef6:	f1bc 0f10 	cmp.w	ip, #16
 800cefa:	bfd8      	it	le
 800cefc:	fb01 f909 	mulle.w	r9, r1, r9
 800cf00:	e7f5      	b.n	800ceee <_strtod_l+0x25e>
 800cf02:	2d10      	cmp	r5, #16
 800cf04:	bfdc      	itt	le
 800cf06:	230a      	movle	r3, #10
 800cf08:	fb03 2909 	mlale	r9, r3, r9, r2
 800cf0c:	e7e1      	b.n	800ced2 <_strtod_l+0x242>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	2301      	movs	r3, #1
 800cf14:	e77c      	b.n	800ce10 <_strtod_l+0x180>
 800cf16:	f04f 0c00 	mov.w	ip, #0
 800cf1a:	f108 0202 	add.w	r2, r8, #2
 800cf1e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf20:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cf24:	e785      	b.n	800ce32 <_strtod_l+0x1a2>
 800cf26:	f04f 0c01 	mov.w	ip, #1
 800cf2a:	e7f6      	b.n	800cf1a <_strtod_l+0x28a>
 800cf2c:	08013178 	.word	0x08013178
 800cf30:	08012f2c 	.word	0x08012f2c
 800cf34:	7ff00000 	.word	0x7ff00000
 800cf38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf3a:	1c51      	adds	r1, r2, #1
 800cf3c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf3e:	7852      	ldrb	r2, [r2, #1]
 800cf40:	2a30      	cmp	r2, #48	; 0x30
 800cf42:	d0f9      	beq.n	800cf38 <_strtod_l+0x2a8>
 800cf44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cf48:	2908      	cmp	r1, #8
 800cf4a:	f63f af79 	bhi.w	800ce40 <_strtod_l+0x1b0>
 800cf4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cf52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf54:	9206      	str	r2, [sp, #24]
 800cf56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf58:	1c51      	adds	r1, r2, #1
 800cf5a:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf5c:	7852      	ldrb	r2, [r2, #1]
 800cf5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cf62:	2e09      	cmp	r6, #9
 800cf64:	d937      	bls.n	800cfd6 <_strtod_l+0x346>
 800cf66:	9e06      	ldr	r6, [sp, #24]
 800cf68:	1b89      	subs	r1, r1, r6
 800cf6a:	2908      	cmp	r1, #8
 800cf6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cf70:	dc02      	bgt.n	800cf78 <_strtod_l+0x2e8>
 800cf72:	4576      	cmp	r6, lr
 800cf74:	bfa8      	it	ge
 800cf76:	4676      	movge	r6, lr
 800cf78:	f1bc 0f00 	cmp.w	ip, #0
 800cf7c:	d000      	beq.n	800cf80 <_strtod_l+0x2f0>
 800cf7e:	4276      	negs	r6, r6
 800cf80:	2d00      	cmp	r5, #0
 800cf82:	d14d      	bne.n	800d020 <_strtod_l+0x390>
 800cf84:	9904      	ldr	r1, [sp, #16]
 800cf86:	4301      	orrs	r1, r0
 800cf88:	f47f aec6 	bne.w	800cd18 <_strtod_l+0x88>
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f47f aee1 	bne.w	800cd54 <_strtod_l+0xc4>
 800cf92:	2a69      	cmp	r2, #105	; 0x69
 800cf94:	d027      	beq.n	800cfe6 <_strtod_l+0x356>
 800cf96:	dc24      	bgt.n	800cfe2 <_strtod_l+0x352>
 800cf98:	2a49      	cmp	r2, #73	; 0x49
 800cf9a:	d024      	beq.n	800cfe6 <_strtod_l+0x356>
 800cf9c:	2a4e      	cmp	r2, #78	; 0x4e
 800cf9e:	f47f aed9 	bne.w	800cd54 <_strtod_l+0xc4>
 800cfa2:	499f      	ldr	r1, [pc, #636]	; (800d220 <_strtod_l+0x590>)
 800cfa4:	a817      	add	r0, sp, #92	; 0x5c
 800cfa6:	f001 fe3d 	bl	800ec24 <__match>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	f43f aed2 	beq.w	800cd54 <_strtod_l+0xc4>
 800cfb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b28      	cmp	r3, #40	; 0x28
 800cfb6:	d12d      	bne.n	800d014 <_strtod_l+0x384>
 800cfb8:	499a      	ldr	r1, [pc, #616]	; (800d224 <_strtod_l+0x594>)
 800cfba:	aa1a      	add	r2, sp, #104	; 0x68
 800cfbc:	a817      	add	r0, sp, #92	; 0x5c
 800cfbe:	f001 fe45 	bl	800ec4c <__hexnan>
 800cfc2:	2805      	cmp	r0, #5
 800cfc4:	d126      	bne.n	800d014 <_strtod_l+0x384>
 800cfc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cfcc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cfd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cfd4:	e6a0      	b.n	800cd18 <_strtod_l+0x88>
 800cfd6:	210a      	movs	r1, #10
 800cfd8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cfdc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cfe0:	e7b9      	b.n	800cf56 <_strtod_l+0x2c6>
 800cfe2:	2a6e      	cmp	r2, #110	; 0x6e
 800cfe4:	e7db      	b.n	800cf9e <_strtod_l+0x30e>
 800cfe6:	4990      	ldr	r1, [pc, #576]	; (800d228 <_strtod_l+0x598>)
 800cfe8:	a817      	add	r0, sp, #92	; 0x5c
 800cfea:	f001 fe1b 	bl	800ec24 <__match>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	f43f aeb0 	beq.w	800cd54 <_strtod_l+0xc4>
 800cff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cff6:	498d      	ldr	r1, [pc, #564]	; (800d22c <_strtod_l+0x59c>)
 800cff8:	3b01      	subs	r3, #1
 800cffa:	a817      	add	r0, sp, #92	; 0x5c
 800cffc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cffe:	f001 fe11 	bl	800ec24 <__match>
 800d002:	b910      	cbnz	r0, 800d00a <_strtod_l+0x37a>
 800d004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d006:	3301      	adds	r3, #1
 800d008:	9317      	str	r3, [sp, #92]	; 0x5c
 800d00a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d23c <_strtod_l+0x5ac>
 800d00e:	f04f 0a00 	mov.w	sl, #0
 800d012:	e681      	b.n	800cd18 <_strtod_l+0x88>
 800d014:	4886      	ldr	r0, [pc, #536]	; (800d230 <_strtod_l+0x5a0>)
 800d016:	f002 fde7 	bl	800fbe8 <nan>
 800d01a:	ec5b ab10 	vmov	sl, fp, d0
 800d01e:	e67b      	b.n	800cd18 <_strtod_l+0x88>
 800d020:	9b05      	ldr	r3, [sp, #20]
 800d022:	9807      	ldr	r0, [sp, #28]
 800d024:	1af3      	subs	r3, r6, r3
 800d026:	2f00      	cmp	r7, #0
 800d028:	bf08      	it	eq
 800d02a:	462f      	moveq	r7, r5
 800d02c:	2d10      	cmp	r5, #16
 800d02e:	9306      	str	r3, [sp, #24]
 800d030:	46a8      	mov	r8, r5
 800d032:	bfa8      	it	ge
 800d034:	f04f 0810 	movge.w	r8, #16
 800d038:	f7f3 fa6c 	bl	8000514 <__aeabi_ui2d>
 800d03c:	2d09      	cmp	r5, #9
 800d03e:	4682      	mov	sl, r0
 800d040:	468b      	mov	fp, r1
 800d042:	dd13      	ble.n	800d06c <_strtod_l+0x3dc>
 800d044:	4b7b      	ldr	r3, [pc, #492]	; (800d234 <_strtod_l+0x5a4>)
 800d046:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d04a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d04e:	f7f3 fadb 	bl	8000608 <__aeabi_dmul>
 800d052:	4682      	mov	sl, r0
 800d054:	4648      	mov	r0, r9
 800d056:	468b      	mov	fp, r1
 800d058:	f7f3 fa5c 	bl	8000514 <__aeabi_ui2d>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	4650      	mov	r0, sl
 800d062:	4659      	mov	r1, fp
 800d064:	f7f3 f91a 	bl	800029c <__adddf3>
 800d068:	4682      	mov	sl, r0
 800d06a:	468b      	mov	fp, r1
 800d06c:	2d0f      	cmp	r5, #15
 800d06e:	dc38      	bgt.n	800d0e2 <_strtod_l+0x452>
 800d070:	9b06      	ldr	r3, [sp, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	f43f ae50 	beq.w	800cd18 <_strtod_l+0x88>
 800d078:	dd24      	ble.n	800d0c4 <_strtod_l+0x434>
 800d07a:	2b16      	cmp	r3, #22
 800d07c:	dc0b      	bgt.n	800d096 <_strtod_l+0x406>
 800d07e:	496d      	ldr	r1, [pc, #436]	; (800d234 <_strtod_l+0x5a4>)
 800d080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d088:	4652      	mov	r2, sl
 800d08a:	465b      	mov	r3, fp
 800d08c:	f7f3 fabc 	bl	8000608 <__aeabi_dmul>
 800d090:	4682      	mov	sl, r0
 800d092:	468b      	mov	fp, r1
 800d094:	e640      	b.n	800cd18 <_strtod_l+0x88>
 800d096:	9a06      	ldr	r2, [sp, #24]
 800d098:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d09c:	4293      	cmp	r3, r2
 800d09e:	db20      	blt.n	800d0e2 <_strtod_l+0x452>
 800d0a0:	4c64      	ldr	r4, [pc, #400]	; (800d234 <_strtod_l+0x5a4>)
 800d0a2:	f1c5 050f 	rsb	r5, r5, #15
 800d0a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0aa:	4652      	mov	r2, sl
 800d0ac:	465b      	mov	r3, fp
 800d0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b2:	f7f3 faa9 	bl	8000608 <__aeabi_dmul>
 800d0b6:	9b06      	ldr	r3, [sp, #24]
 800d0b8:	1b5d      	subs	r5, r3, r5
 800d0ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0c2:	e7e3      	b.n	800d08c <_strtod_l+0x3fc>
 800d0c4:	9b06      	ldr	r3, [sp, #24]
 800d0c6:	3316      	adds	r3, #22
 800d0c8:	db0b      	blt.n	800d0e2 <_strtod_l+0x452>
 800d0ca:	9b05      	ldr	r3, [sp, #20]
 800d0cc:	1b9e      	subs	r6, r3, r6
 800d0ce:	4b59      	ldr	r3, [pc, #356]	; (800d234 <_strtod_l+0x5a4>)
 800d0d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d0d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0d8:	4650      	mov	r0, sl
 800d0da:	4659      	mov	r1, fp
 800d0dc:	f7f3 fbbe 	bl	800085c <__aeabi_ddiv>
 800d0e0:	e7d6      	b.n	800d090 <_strtod_l+0x400>
 800d0e2:	9b06      	ldr	r3, [sp, #24]
 800d0e4:	eba5 0808 	sub.w	r8, r5, r8
 800d0e8:	4498      	add	r8, r3
 800d0ea:	f1b8 0f00 	cmp.w	r8, #0
 800d0ee:	dd74      	ble.n	800d1da <_strtod_l+0x54a>
 800d0f0:	f018 030f 	ands.w	r3, r8, #15
 800d0f4:	d00a      	beq.n	800d10c <_strtod_l+0x47c>
 800d0f6:	494f      	ldr	r1, [pc, #316]	; (800d234 <_strtod_l+0x5a4>)
 800d0f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	465b      	mov	r3, fp
 800d100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d104:	f7f3 fa80 	bl	8000608 <__aeabi_dmul>
 800d108:	4682      	mov	sl, r0
 800d10a:	468b      	mov	fp, r1
 800d10c:	f038 080f 	bics.w	r8, r8, #15
 800d110:	d04f      	beq.n	800d1b2 <_strtod_l+0x522>
 800d112:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d116:	dd22      	ble.n	800d15e <_strtod_l+0x4ce>
 800d118:	2500      	movs	r5, #0
 800d11a:	462e      	mov	r6, r5
 800d11c:	9507      	str	r5, [sp, #28]
 800d11e:	9505      	str	r5, [sp, #20]
 800d120:	2322      	movs	r3, #34	; 0x22
 800d122:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d23c <_strtod_l+0x5ac>
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	f04f 0a00 	mov.w	sl, #0
 800d12c:	9b07      	ldr	r3, [sp, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f43f adf2 	beq.w	800cd18 <_strtod_l+0x88>
 800d134:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d136:	4620      	mov	r0, r4
 800d138:	f001 fe82 	bl	800ee40 <_Bfree>
 800d13c:	9905      	ldr	r1, [sp, #20]
 800d13e:	4620      	mov	r0, r4
 800d140:	f001 fe7e 	bl	800ee40 <_Bfree>
 800d144:	4631      	mov	r1, r6
 800d146:	4620      	mov	r0, r4
 800d148:	f001 fe7a 	bl	800ee40 <_Bfree>
 800d14c:	9907      	ldr	r1, [sp, #28]
 800d14e:	4620      	mov	r0, r4
 800d150:	f001 fe76 	bl	800ee40 <_Bfree>
 800d154:	4629      	mov	r1, r5
 800d156:	4620      	mov	r0, r4
 800d158:	f001 fe72 	bl	800ee40 <_Bfree>
 800d15c:	e5dc      	b.n	800cd18 <_strtod_l+0x88>
 800d15e:	4b36      	ldr	r3, [pc, #216]	; (800d238 <_strtod_l+0x5a8>)
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	2300      	movs	r3, #0
 800d164:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d168:	4650      	mov	r0, sl
 800d16a:	4659      	mov	r1, fp
 800d16c:	4699      	mov	r9, r3
 800d16e:	f1b8 0f01 	cmp.w	r8, #1
 800d172:	dc21      	bgt.n	800d1b8 <_strtod_l+0x528>
 800d174:	b10b      	cbz	r3, 800d17a <_strtod_l+0x4ea>
 800d176:	4682      	mov	sl, r0
 800d178:	468b      	mov	fp, r1
 800d17a:	4b2f      	ldr	r3, [pc, #188]	; (800d238 <_strtod_l+0x5a8>)
 800d17c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d180:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d184:	4652      	mov	r2, sl
 800d186:	465b      	mov	r3, fp
 800d188:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d18c:	f7f3 fa3c 	bl	8000608 <__aeabi_dmul>
 800d190:	4b2a      	ldr	r3, [pc, #168]	; (800d23c <_strtod_l+0x5ac>)
 800d192:	460a      	mov	r2, r1
 800d194:	400b      	ands	r3, r1
 800d196:	492a      	ldr	r1, [pc, #168]	; (800d240 <_strtod_l+0x5b0>)
 800d198:	428b      	cmp	r3, r1
 800d19a:	4682      	mov	sl, r0
 800d19c:	d8bc      	bhi.n	800d118 <_strtod_l+0x488>
 800d19e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d1a2:	428b      	cmp	r3, r1
 800d1a4:	bf86      	itte	hi
 800d1a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d244 <_strtod_l+0x5b4>
 800d1aa:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9304      	str	r3, [sp, #16]
 800d1b6:	e084      	b.n	800d2c2 <_strtod_l+0x632>
 800d1b8:	f018 0f01 	tst.w	r8, #1
 800d1bc:	d005      	beq.n	800d1ca <_strtod_l+0x53a>
 800d1be:	9b04      	ldr	r3, [sp, #16]
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f7f3 fa20 	bl	8000608 <__aeabi_dmul>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	9a04      	ldr	r2, [sp, #16]
 800d1cc:	3208      	adds	r2, #8
 800d1ce:	f109 0901 	add.w	r9, r9, #1
 800d1d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1d6:	9204      	str	r2, [sp, #16]
 800d1d8:	e7c9      	b.n	800d16e <_strtod_l+0x4de>
 800d1da:	d0ea      	beq.n	800d1b2 <_strtod_l+0x522>
 800d1dc:	f1c8 0800 	rsb	r8, r8, #0
 800d1e0:	f018 020f 	ands.w	r2, r8, #15
 800d1e4:	d00a      	beq.n	800d1fc <_strtod_l+0x56c>
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <_strtod_l+0x5a4>)
 800d1e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	4659      	mov	r1, fp
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f7f3 fb32 	bl	800085c <__aeabi_ddiv>
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	468b      	mov	fp, r1
 800d1fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d200:	d0d7      	beq.n	800d1b2 <_strtod_l+0x522>
 800d202:	f1b8 0f1f 	cmp.w	r8, #31
 800d206:	dd1f      	ble.n	800d248 <_strtod_l+0x5b8>
 800d208:	2500      	movs	r5, #0
 800d20a:	462e      	mov	r6, r5
 800d20c:	9507      	str	r5, [sp, #28]
 800d20e:	9505      	str	r5, [sp, #20]
 800d210:	2322      	movs	r3, #34	; 0x22
 800d212:	f04f 0a00 	mov.w	sl, #0
 800d216:	f04f 0b00 	mov.w	fp, #0
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	e786      	b.n	800d12c <_strtod_l+0x49c>
 800d21e:	bf00      	nop
 800d220:	08012efd 	.word	0x08012efd
 800d224:	08012f40 	.word	0x08012f40
 800d228:	08012ef5 	.word	0x08012ef5
 800d22c:	08013084 	.word	0x08013084
 800d230:	08013330 	.word	0x08013330
 800d234:	08013210 	.word	0x08013210
 800d238:	080131e8 	.word	0x080131e8
 800d23c:	7ff00000 	.word	0x7ff00000
 800d240:	7ca00000 	.word	0x7ca00000
 800d244:	7fefffff 	.word	0x7fefffff
 800d248:	f018 0310 	ands.w	r3, r8, #16
 800d24c:	bf18      	it	ne
 800d24e:	236a      	movne	r3, #106	; 0x6a
 800d250:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d600 <_strtod_l+0x970>
 800d254:	9304      	str	r3, [sp, #16]
 800d256:	4650      	mov	r0, sl
 800d258:	4659      	mov	r1, fp
 800d25a:	2300      	movs	r3, #0
 800d25c:	f018 0f01 	tst.w	r8, #1
 800d260:	d004      	beq.n	800d26c <_strtod_l+0x5dc>
 800d262:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d266:	f7f3 f9cf 	bl	8000608 <__aeabi_dmul>
 800d26a:	2301      	movs	r3, #1
 800d26c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d270:	f109 0908 	add.w	r9, r9, #8
 800d274:	d1f2      	bne.n	800d25c <_strtod_l+0x5cc>
 800d276:	b10b      	cbz	r3, 800d27c <_strtod_l+0x5ec>
 800d278:	4682      	mov	sl, r0
 800d27a:	468b      	mov	fp, r1
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	b1c3      	cbz	r3, 800d2b2 <_strtod_l+0x622>
 800d280:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d284:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d288:	2b00      	cmp	r3, #0
 800d28a:	4659      	mov	r1, fp
 800d28c:	dd11      	ble.n	800d2b2 <_strtod_l+0x622>
 800d28e:	2b1f      	cmp	r3, #31
 800d290:	f340 8124 	ble.w	800d4dc <_strtod_l+0x84c>
 800d294:	2b34      	cmp	r3, #52	; 0x34
 800d296:	bfde      	ittt	le
 800d298:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d29c:	f04f 33ff 	movle.w	r3, #4294967295
 800d2a0:	fa03 f202 	lslle.w	r2, r3, r2
 800d2a4:	f04f 0a00 	mov.w	sl, #0
 800d2a8:	bfcc      	ite	gt
 800d2aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d2ae:	ea02 0b01 	andle.w	fp, r2, r1
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	4650      	mov	r0, sl
 800d2b8:	4659      	mov	r1, fp
 800d2ba:	f7f3 fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d1a2      	bne.n	800d208 <_strtod_l+0x578>
 800d2c2:	9b07      	ldr	r3, [sp, #28]
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	9908      	ldr	r1, [sp, #32]
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f001 fe1f 	bl	800ef10 <__s2b>
 800d2d2:	9007      	str	r0, [sp, #28]
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	f43f af1f 	beq.w	800d118 <_strtod_l+0x488>
 800d2da:	9b05      	ldr	r3, [sp, #20]
 800d2dc:	1b9e      	subs	r6, r3, r6
 800d2de:	9b06      	ldr	r3, [sp, #24]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bfb4      	ite	lt
 800d2e4:	4633      	movlt	r3, r6
 800d2e6:	2300      	movge	r3, #0
 800d2e8:	930c      	str	r3, [sp, #48]	; 0x30
 800d2ea:	9b06      	ldr	r3, [sp, #24]
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2f2:	9312      	str	r3, [sp, #72]	; 0x48
 800d2f4:	462e      	mov	r6, r5
 800d2f6:	9b07      	ldr	r3, [sp, #28]
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	6859      	ldr	r1, [r3, #4]
 800d2fc:	f001 fd60 	bl	800edc0 <_Balloc>
 800d300:	9005      	str	r0, [sp, #20]
 800d302:	2800      	cmp	r0, #0
 800d304:	f43f af0c 	beq.w	800d120 <_strtod_l+0x490>
 800d308:	9b07      	ldr	r3, [sp, #28]
 800d30a:	691a      	ldr	r2, [r3, #16]
 800d30c:	3202      	adds	r2, #2
 800d30e:	f103 010c 	add.w	r1, r3, #12
 800d312:	0092      	lsls	r2, r2, #2
 800d314:	300c      	adds	r0, #12
 800d316:	f7fe fde9 	bl	800beec <memcpy>
 800d31a:	ec4b ab10 	vmov	d0, sl, fp
 800d31e:	aa1a      	add	r2, sp, #104	; 0x68
 800d320:	a919      	add	r1, sp, #100	; 0x64
 800d322:	4620      	mov	r0, r4
 800d324:	f002 f93a 	bl	800f59c <__d2b>
 800d328:	ec4b ab18 	vmov	d8, sl, fp
 800d32c:	9018      	str	r0, [sp, #96]	; 0x60
 800d32e:	2800      	cmp	r0, #0
 800d330:	f43f aef6 	beq.w	800d120 <_strtod_l+0x490>
 800d334:	2101      	movs	r1, #1
 800d336:	4620      	mov	r0, r4
 800d338:	f001 fe84 	bl	800f044 <__i2b>
 800d33c:	4606      	mov	r6, r0
 800d33e:	2800      	cmp	r0, #0
 800d340:	f43f aeee 	beq.w	800d120 <_strtod_l+0x490>
 800d344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d346:	9904      	ldr	r1, [sp, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfab      	itete	ge
 800d34c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d34e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d350:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d352:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d356:	bfac      	ite	ge
 800d358:	eb03 0902 	addge.w	r9, r3, r2
 800d35c:	1ad7      	sublt	r7, r2, r3
 800d35e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d360:	eba3 0801 	sub.w	r8, r3, r1
 800d364:	4490      	add	r8, r2
 800d366:	4ba1      	ldr	r3, [pc, #644]	; (800d5ec <_strtod_l+0x95c>)
 800d368:	f108 38ff 	add.w	r8, r8, #4294967295
 800d36c:	4598      	cmp	r8, r3
 800d36e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d372:	f280 80c7 	bge.w	800d504 <_strtod_l+0x874>
 800d376:	eba3 0308 	sub.w	r3, r3, r8
 800d37a:	2b1f      	cmp	r3, #31
 800d37c:	eba2 0203 	sub.w	r2, r2, r3
 800d380:	f04f 0101 	mov.w	r1, #1
 800d384:	f300 80b1 	bgt.w	800d4ea <_strtod_l+0x85a>
 800d388:	fa01 f303 	lsl.w	r3, r1, r3
 800d38c:	930d      	str	r3, [sp, #52]	; 0x34
 800d38e:	2300      	movs	r3, #0
 800d390:	9308      	str	r3, [sp, #32]
 800d392:	eb09 0802 	add.w	r8, r9, r2
 800d396:	9b04      	ldr	r3, [sp, #16]
 800d398:	45c1      	cmp	r9, r8
 800d39a:	4417      	add	r7, r2
 800d39c:	441f      	add	r7, r3
 800d39e:	464b      	mov	r3, r9
 800d3a0:	bfa8      	it	ge
 800d3a2:	4643      	movge	r3, r8
 800d3a4:	42bb      	cmp	r3, r7
 800d3a6:	bfa8      	it	ge
 800d3a8:	463b      	movge	r3, r7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bfc2      	ittt	gt
 800d3ae:	eba8 0803 	subgt.w	r8, r8, r3
 800d3b2:	1aff      	subgt	r7, r7, r3
 800d3b4:	eba9 0903 	subgt.w	r9, r9, r3
 800d3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	dd17      	ble.n	800d3ee <_strtod_l+0x75e>
 800d3be:	4631      	mov	r1, r6
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f001 fefe 	bl	800f1c4 <__pow5mult>
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	f43f aea8 	beq.w	800d120 <_strtod_l+0x490>
 800d3d0:	4601      	mov	r1, r0
 800d3d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f001 fe4b 	bl	800f070 <__multiply>
 800d3da:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	f43f ae9f 	beq.w	800d120 <_strtod_l+0x490>
 800d3e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f001 fd2b 	bl	800ee40 <_Bfree>
 800d3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ec:	9318      	str	r3, [sp, #96]	; 0x60
 800d3ee:	f1b8 0f00 	cmp.w	r8, #0
 800d3f2:	f300 808c 	bgt.w	800d50e <_strtod_l+0x87e>
 800d3f6:	9b06      	ldr	r3, [sp, #24]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	dd08      	ble.n	800d40e <_strtod_l+0x77e>
 800d3fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3fe:	9905      	ldr	r1, [sp, #20]
 800d400:	4620      	mov	r0, r4
 800d402:	f001 fedf 	bl	800f1c4 <__pow5mult>
 800d406:	9005      	str	r0, [sp, #20]
 800d408:	2800      	cmp	r0, #0
 800d40a:	f43f ae89 	beq.w	800d120 <_strtod_l+0x490>
 800d40e:	2f00      	cmp	r7, #0
 800d410:	dd08      	ble.n	800d424 <_strtod_l+0x794>
 800d412:	9905      	ldr	r1, [sp, #20]
 800d414:	463a      	mov	r2, r7
 800d416:	4620      	mov	r0, r4
 800d418:	f001 ff2e 	bl	800f278 <__lshift>
 800d41c:	9005      	str	r0, [sp, #20]
 800d41e:	2800      	cmp	r0, #0
 800d420:	f43f ae7e 	beq.w	800d120 <_strtod_l+0x490>
 800d424:	f1b9 0f00 	cmp.w	r9, #0
 800d428:	dd08      	ble.n	800d43c <_strtod_l+0x7ac>
 800d42a:	4631      	mov	r1, r6
 800d42c:	464a      	mov	r2, r9
 800d42e:	4620      	mov	r0, r4
 800d430:	f001 ff22 	bl	800f278 <__lshift>
 800d434:	4606      	mov	r6, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	f43f ae72 	beq.w	800d120 <_strtod_l+0x490>
 800d43c:	9a05      	ldr	r2, [sp, #20]
 800d43e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d440:	4620      	mov	r0, r4
 800d442:	f001 ffa5 	bl	800f390 <__mdiff>
 800d446:	4605      	mov	r5, r0
 800d448:	2800      	cmp	r0, #0
 800d44a:	f43f ae69 	beq.w	800d120 <_strtod_l+0x490>
 800d44e:	68c3      	ldr	r3, [r0, #12]
 800d450:	930b      	str	r3, [sp, #44]	; 0x2c
 800d452:	2300      	movs	r3, #0
 800d454:	60c3      	str	r3, [r0, #12]
 800d456:	4631      	mov	r1, r6
 800d458:	f001 ff7e 	bl	800f358 <__mcmp>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	da60      	bge.n	800d522 <_strtod_l+0x892>
 800d460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d462:	ea53 030a 	orrs.w	r3, r3, sl
 800d466:	f040 8082 	bne.w	800d56e <_strtod_l+0x8de>
 800d46a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d17d      	bne.n	800d56e <_strtod_l+0x8de>
 800d472:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d476:	0d1b      	lsrs	r3, r3, #20
 800d478:	051b      	lsls	r3, r3, #20
 800d47a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d47e:	d976      	bls.n	800d56e <_strtod_l+0x8de>
 800d480:	696b      	ldr	r3, [r5, #20]
 800d482:	b913      	cbnz	r3, 800d48a <_strtod_l+0x7fa>
 800d484:	692b      	ldr	r3, [r5, #16]
 800d486:	2b01      	cmp	r3, #1
 800d488:	dd71      	ble.n	800d56e <_strtod_l+0x8de>
 800d48a:	4629      	mov	r1, r5
 800d48c:	2201      	movs	r2, #1
 800d48e:	4620      	mov	r0, r4
 800d490:	f001 fef2 	bl	800f278 <__lshift>
 800d494:	4631      	mov	r1, r6
 800d496:	4605      	mov	r5, r0
 800d498:	f001 ff5e 	bl	800f358 <__mcmp>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	dd66      	ble.n	800d56e <_strtod_l+0x8de>
 800d4a0:	9904      	ldr	r1, [sp, #16]
 800d4a2:	4a53      	ldr	r2, [pc, #332]	; (800d5f0 <_strtod_l+0x960>)
 800d4a4:	465b      	mov	r3, fp
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	f000 8081 	beq.w	800d5ae <_strtod_l+0x91e>
 800d4ac:	ea02 010b 	and.w	r1, r2, fp
 800d4b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d4b4:	dc7b      	bgt.n	800d5ae <_strtod_l+0x91e>
 800d4b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4ba:	f77f aea9 	ble.w	800d210 <_strtod_l+0x580>
 800d4be:	4b4d      	ldr	r3, [pc, #308]	; (800d5f4 <_strtod_l+0x964>)
 800d4c0:	4650      	mov	r0, sl
 800d4c2:	4659      	mov	r1, fp
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f7f3 f89f 	bl	8000608 <__aeabi_dmul>
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4303      	orrs	r3, r0
 800d4ce:	bf08      	it	eq
 800d4d0:	2322      	moveq	r3, #34	; 0x22
 800d4d2:	4682      	mov	sl, r0
 800d4d4:	468b      	mov	fp, r1
 800d4d6:	bf08      	it	eq
 800d4d8:	6023      	streq	r3, [r4, #0]
 800d4da:	e62b      	b.n	800d134 <_strtod_l+0x4a4>
 800d4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e4:	ea03 0a0a 	and.w	sl, r3, sl
 800d4e8:	e6e3      	b.n	800d2b2 <_strtod_l+0x622>
 800d4ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d4ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d4f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d4f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d4fa:	fa01 f308 	lsl.w	r3, r1, r8
 800d4fe:	9308      	str	r3, [sp, #32]
 800d500:	910d      	str	r1, [sp, #52]	; 0x34
 800d502:	e746      	b.n	800d392 <_strtod_l+0x702>
 800d504:	2300      	movs	r3, #0
 800d506:	9308      	str	r3, [sp, #32]
 800d508:	2301      	movs	r3, #1
 800d50a:	930d      	str	r3, [sp, #52]	; 0x34
 800d50c:	e741      	b.n	800d392 <_strtod_l+0x702>
 800d50e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d510:	4642      	mov	r2, r8
 800d512:	4620      	mov	r0, r4
 800d514:	f001 feb0 	bl	800f278 <__lshift>
 800d518:	9018      	str	r0, [sp, #96]	; 0x60
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f47f af6b 	bne.w	800d3f6 <_strtod_l+0x766>
 800d520:	e5fe      	b.n	800d120 <_strtod_l+0x490>
 800d522:	465f      	mov	r7, fp
 800d524:	d16e      	bne.n	800d604 <_strtod_l+0x974>
 800d526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d52c:	b342      	cbz	r2, 800d580 <_strtod_l+0x8f0>
 800d52e:	4a32      	ldr	r2, [pc, #200]	; (800d5f8 <_strtod_l+0x968>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d128      	bne.n	800d586 <_strtod_l+0x8f6>
 800d534:	9b04      	ldr	r3, [sp, #16]
 800d536:	4651      	mov	r1, sl
 800d538:	b1eb      	cbz	r3, 800d576 <_strtod_l+0x8e6>
 800d53a:	4b2d      	ldr	r3, [pc, #180]	; (800d5f0 <_strtod_l+0x960>)
 800d53c:	403b      	ands	r3, r7
 800d53e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d542:	f04f 32ff 	mov.w	r2, #4294967295
 800d546:	d819      	bhi.n	800d57c <_strtod_l+0x8ec>
 800d548:	0d1b      	lsrs	r3, r3, #20
 800d54a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d54e:	fa02 f303 	lsl.w	r3, r2, r3
 800d552:	4299      	cmp	r1, r3
 800d554:	d117      	bne.n	800d586 <_strtod_l+0x8f6>
 800d556:	4b29      	ldr	r3, [pc, #164]	; (800d5fc <_strtod_l+0x96c>)
 800d558:	429f      	cmp	r7, r3
 800d55a:	d102      	bne.n	800d562 <_strtod_l+0x8d2>
 800d55c:	3101      	adds	r1, #1
 800d55e:	f43f addf 	beq.w	800d120 <_strtod_l+0x490>
 800d562:	4b23      	ldr	r3, [pc, #140]	; (800d5f0 <_strtod_l+0x960>)
 800d564:	403b      	ands	r3, r7
 800d566:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d56a:	f04f 0a00 	mov.w	sl, #0
 800d56e:	9b04      	ldr	r3, [sp, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1a4      	bne.n	800d4be <_strtod_l+0x82e>
 800d574:	e5de      	b.n	800d134 <_strtod_l+0x4a4>
 800d576:	f04f 33ff 	mov.w	r3, #4294967295
 800d57a:	e7ea      	b.n	800d552 <_strtod_l+0x8c2>
 800d57c:	4613      	mov	r3, r2
 800d57e:	e7e8      	b.n	800d552 <_strtod_l+0x8c2>
 800d580:	ea53 030a 	orrs.w	r3, r3, sl
 800d584:	d08c      	beq.n	800d4a0 <_strtod_l+0x810>
 800d586:	9b08      	ldr	r3, [sp, #32]
 800d588:	b1db      	cbz	r3, 800d5c2 <_strtod_l+0x932>
 800d58a:	423b      	tst	r3, r7
 800d58c:	d0ef      	beq.n	800d56e <_strtod_l+0x8de>
 800d58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d590:	9a04      	ldr	r2, [sp, #16]
 800d592:	4650      	mov	r0, sl
 800d594:	4659      	mov	r1, fp
 800d596:	b1c3      	cbz	r3, 800d5ca <_strtod_l+0x93a>
 800d598:	f7ff fb5e 	bl	800cc58 <sulp>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	ec51 0b18 	vmov	r0, r1, d8
 800d5a4:	f7f2 fe7a 	bl	800029c <__adddf3>
 800d5a8:	4682      	mov	sl, r0
 800d5aa:	468b      	mov	fp, r1
 800d5ac:	e7df      	b.n	800d56e <_strtod_l+0x8de>
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d5b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d5b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d5bc:	f04f 3aff 	mov.w	sl, #4294967295
 800d5c0:	e7d5      	b.n	800d56e <_strtod_l+0x8de>
 800d5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5c4:	ea13 0f0a 	tst.w	r3, sl
 800d5c8:	e7e0      	b.n	800d58c <_strtod_l+0x8fc>
 800d5ca:	f7ff fb45 	bl	800cc58 <sulp>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	ec51 0b18 	vmov	r0, r1, d8
 800d5d6:	f7f2 fe5f 	bl	8000298 <__aeabi_dsub>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4682      	mov	sl, r0
 800d5e0:	468b      	mov	fp, r1
 800d5e2:	f7f3 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d0c1      	beq.n	800d56e <_strtod_l+0x8de>
 800d5ea:	e611      	b.n	800d210 <_strtod_l+0x580>
 800d5ec:	fffffc02 	.word	0xfffffc02
 800d5f0:	7ff00000 	.word	0x7ff00000
 800d5f4:	39500000 	.word	0x39500000
 800d5f8:	000fffff 	.word	0x000fffff
 800d5fc:	7fefffff 	.word	0x7fefffff
 800d600:	08012f58 	.word	0x08012f58
 800d604:	4631      	mov	r1, r6
 800d606:	4628      	mov	r0, r5
 800d608:	f002 f824 	bl	800f654 <__ratio>
 800d60c:	ec59 8b10 	vmov	r8, r9, d0
 800d610:	ee10 0a10 	vmov	r0, s0
 800d614:	2200      	movs	r2, #0
 800d616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d61a:	4649      	mov	r1, r9
 800d61c:	f7f3 fa70 	bl	8000b00 <__aeabi_dcmple>
 800d620:	2800      	cmp	r0, #0
 800d622:	d07a      	beq.n	800d71a <_strtod_l+0xa8a>
 800d624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d04a      	beq.n	800d6c0 <_strtod_l+0xa30>
 800d62a:	4b95      	ldr	r3, [pc, #596]	; (800d880 <_strtod_l+0xbf0>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d632:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d880 <_strtod_l+0xbf0>
 800d636:	f04f 0800 	mov.w	r8, #0
 800d63a:	4b92      	ldr	r3, [pc, #584]	; (800d884 <_strtod_l+0xbf4>)
 800d63c:	403b      	ands	r3, r7
 800d63e:	930d      	str	r3, [sp, #52]	; 0x34
 800d640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d642:	4b91      	ldr	r3, [pc, #580]	; (800d888 <_strtod_l+0xbf8>)
 800d644:	429a      	cmp	r2, r3
 800d646:	f040 80b0 	bne.w	800d7aa <_strtod_l+0xb1a>
 800d64a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d64e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d652:	ec4b ab10 	vmov	d0, sl, fp
 800d656:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d65a:	f001 ff23 	bl	800f4a4 <__ulp>
 800d65e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d662:	ec53 2b10 	vmov	r2, r3, d0
 800d666:	f7f2 ffcf 	bl	8000608 <__aeabi_dmul>
 800d66a:	4652      	mov	r2, sl
 800d66c:	465b      	mov	r3, fp
 800d66e:	f7f2 fe15 	bl	800029c <__adddf3>
 800d672:	460b      	mov	r3, r1
 800d674:	4983      	ldr	r1, [pc, #524]	; (800d884 <_strtod_l+0xbf4>)
 800d676:	4a85      	ldr	r2, [pc, #532]	; (800d88c <_strtod_l+0xbfc>)
 800d678:	4019      	ands	r1, r3
 800d67a:	4291      	cmp	r1, r2
 800d67c:	4682      	mov	sl, r0
 800d67e:	d960      	bls.n	800d742 <_strtod_l+0xab2>
 800d680:	ee18 3a90 	vmov	r3, s17
 800d684:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d688:	4293      	cmp	r3, r2
 800d68a:	d104      	bne.n	800d696 <_strtod_l+0xa06>
 800d68c:	ee18 3a10 	vmov	r3, s16
 800d690:	3301      	adds	r3, #1
 800d692:	f43f ad45 	beq.w	800d120 <_strtod_l+0x490>
 800d696:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d898 <_strtod_l+0xc08>
 800d69a:	f04f 3aff 	mov.w	sl, #4294967295
 800d69e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f001 fbcd 	bl	800ee40 <_Bfree>
 800d6a6:	9905      	ldr	r1, [sp, #20]
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f001 fbc9 	bl	800ee40 <_Bfree>
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f001 fbc5 	bl	800ee40 <_Bfree>
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f001 fbc1 	bl	800ee40 <_Bfree>
 800d6be:	e61a      	b.n	800d2f6 <_strtod_l+0x666>
 800d6c0:	f1ba 0f00 	cmp.w	sl, #0
 800d6c4:	d11b      	bne.n	800d6fe <_strtod_l+0xa6e>
 800d6c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6ca:	b9f3      	cbnz	r3, 800d70a <_strtod_l+0xa7a>
 800d6cc:	4b6c      	ldr	r3, [pc, #432]	; (800d880 <_strtod_l+0xbf0>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	4649      	mov	r1, r9
 800d6d4:	f7f3 fa0a 	bl	8000aec <__aeabi_dcmplt>
 800d6d8:	b9d0      	cbnz	r0, 800d710 <_strtod_l+0xa80>
 800d6da:	4640      	mov	r0, r8
 800d6dc:	4649      	mov	r1, r9
 800d6de:	4b6c      	ldr	r3, [pc, #432]	; (800d890 <_strtod_l+0xc00>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f7f2 ff91 	bl	8000608 <__aeabi_dmul>
 800d6e6:	4680      	mov	r8, r0
 800d6e8:	4689      	mov	r9, r1
 800d6ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d6ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d6f2:	9315      	str	r3, [sp, #84]	; 0x54
 800d6f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d6f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6fc:	e79d      	b.n	800d63a <_strtod_l+0x9aa>
 800d6fe:	f1ba 0f01 	cmp.w	sl, #1
 800d702:	d102      	bne.n	800d70a <_strtod_l+0xa7a>
 800d704:	2f00      	cmp	r7, #0
 800d706:	f43f ad83 	beq.w	800d210 <_strtod_l+0x580>
 800d70a:	4b62      	ldr	r3, [pc, #392]	; (800d894 <_strtod_l+0xc04>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	e78e      	b.n	800d62e <_strtod_l+0x99e>
 800d710:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d890 <_strtod_l+0xc00>
 800d714:	f04f 0800 	mov.w	r8, #0
 800d718:	e7e7      	b.n	800d6ea <_strtod_l+0xa5a>
 800d71a:	4b5d      	ldr	r3, [pc, #372]	; (800d890 <_strtod_l+0xc00>)
 800d71c:	4640      	mov	r0, r8
 800d71e:	4649      	mov	r1, r9
 800d720:	2200      	movs	r2, #0
 800d722:	f7f2 ff71 	bl	8000608 <__aeabi_dmul>
 800d726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d728:	4680      	mov	r8, r0
 800d72a:	4689      	mov	r9, r1
 800d72c:	b933      	cbnz	r3, 800d73c <_strtod_l+0xaac>
 800d72e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d732:	900e      	str	r0, [sp, #56]	; 0x38
 800d734:	930f      	str	r3, [sp, #60]	; 0x3c
 800d736:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d73a:	e7dd      	b.n	800d6f8 <_strtod_l+0xa68>
 800d73c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d740:	e7f9      	b.n	800d736 <_strtod_l+0xaa6>
 800d742:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d746:	9b04      	ldr	r3, [sp, #16]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1a8      	bne.n	800d69e <_strtod_l+0xa0e>
 800d74c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d752:	0d1b      	lsrs	r3, r3, #20
 800d754:	051b      	lsls	r3, r3, #20
 800d756:	429a      	cmp	r2, r3
 800d758:	d1a1      	bne.n	800d69e <_strtod_l+0xa0e>
 800d75a:	4640      	mov	r0, r8
 800d75c:	4649      	mov	r1, r9
 800d75e:	f7f3 fab3 	bl	8000cc8 <__aeabi_d2lz>
 800d762:	f7f2 ff23 	bl	80005ac <__aeabi_l2d>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	4640      	mov	r0, r8
 800d76c:	4649      	mov	r1, r9
 800d76e:	f7f2 fd93 	bl	8000298 <__aeabi_dsub>
 800d772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d778:	ea43 030a 	orr.w	r3, r3, sl
 800d77c:	4313      	orrs	r3, r2
 800d77e:	4680      	mov	r8, r0
 800d780:	4689      	mov	r9, r1
 800d782:	d055      	beq.n	800d830 <_strtod_l+0xba0>
 800d784:	a336      	add	r3, pc, #216	; (adr r3, 800d860 <_strtod_l+0xbd0>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f3 f9af 	bl	8000aec <__aeabi_dcmplt>
 800d78e:	2800      	cmp	r0, #0
 800d790:	f47f acd0 	bne.w	800d134 <_strtod_l+0x4a4>
 800d794:	a334      	add	r3, pc, #208	; (adr r3, 800d868 <_strtod_l+0xbd8>)
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	4640      	mov	r0, r8
 800d79c:	4649      	mov	r1, r9
 800d79e:	f7f3 f9c3 	bl	8000b28 <__aeabi_dcmpgt>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	f43f af7b 	beq.w	800d69e <_strtod_l+0xa0e>
 800d7a8:	e4c4      	b.n	800d134 <_strtod_l+0x4a4>
 800d7aa:	9b04      	ldr	r3, [sp, #16]
 800d7ac:	b333      	cbz	r3, 800d7fc <_strtod_l+0xb6c>
 800d7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7b4:	d822      	bhi.n	800d7fc <_strtod_l+0xb6c>
 800d7b6:	a32e      	add	r3, pc, #184	; (adr r3, 800d870 <_strtod_l+0xbe0>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	4640      	mov	r0, r8
 800d7be:	4649      	mov	r1, r9
 800d7c0:	f7f3 f99e 	bl	8000b00 <__aeabi_dcmple>
 800d7c4:	b1a0      	cbz	r0, 800d7f0 <_strtod_l+0xb60>
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	4640      	mov	r0, r8
 800d7ca:	f7f3 f9f5 	bl	8000bb8 <__aeabi_d2uiz>
 800d7ce:	2801      	cmp	r0, #1
 800d7d0:	bf38      	it	cc
 800d7d2:	2001      	movcc	r0, #1
 800d7d4:	f7f2 fe9e 	bl	8000514 <__aeabi_ui2d>
 800d7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7da:	4680      	mov	r8, r0
 800d7dc:	4689      	mov	r9, r1
 800d7de:	bb23      	cbnz	r3, 800d82a <_strtod_l+0xb9a>
 800d7e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7e4:	9010      	str	r0, [sp, #64]	; 0x40
 800d7e6:	9311      	str	r3, [sp, #68]	; 0x44
 800d7e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d7fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d800:	eeb0 0a48 	vmov.f32	s0, s16
 800d804:	eef0 0a68 	vmov.f32	s1, s17
 800d808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d80c:	f001 fe4a 	bl	800f4a4 <__ulp>
 800d810:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d814:	ec53 2b10 	vmov	r2, r3, d0
 800d818:	f7f2 fef6 	bl	8000608 <__aeabi_dmul>
 800d81c:	ec53 2b18 	vmov	r2, r3, d8
 800d820:	f7f2 fd3c 	bl	800029c <__adddf3>
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	e78d      	b.n	800d746 <_strtod_l+0xab6>
 800d82a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d82e:	e7db      	b.n	800d7e8 <_strtod_l+0xb58>
 800d830:	a311      	add	r3, pc, #68	; (adr r3, 800d878 <_strtod_l+0xbe8>)
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f7f3 f959 	bl	8000aec <__aeabi_dcmplt>
 800d83a:	e7b2      	b.n	800d7a2 <_strtod_l+0xb12>
 800d83c:	2300      	movs	r3, #0
 800d83e:	930a      	str	r3, [sp, #40]	; 0x28
 800d840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	f7ff ba6b 	b.w	800cd20 <_strtod_l+0x90>
 800d84a:	2a65      	cmp	r2, #101	; 0x65
 800d84c:	f43f ab5f 	beq.w	800cf0e <_strtod_l+0x27e>
 800d850:	2a45      	cmp	r2, #69	; 0x45
 800d852:	f43f ab5c 	beq.w	800cf0e <_strtod_l+0x27e>
 800d856:	2301      	movs	r3, #1
 800d858:	f7ff bb94 	b.w	800cf84 <_strtod_l+0x2f4>
 800d85c:	f3af 8000 	nop.w
 800d860:	94a03595 	.word	0x94a03595
 800d864:	3fdfffff 	.word	0x3fdfffff
 800d868:	35afe535 	.word	0x35afe535
 800d86c:	3fe00000 	.word	0x3fe00000
 800d870:	ffc00000 	.word	0xffc00000
 800d874:	41dfffff 	.word	0x41dfffff
 800d878:	94a03595 	.word	0x94a03595
 800d87c:	3fcfffff 	.word	0x3fcfffff
 800d880:	3ff00000 	.word	0x3ff00000
 800d884:	7ff00000 	.word	0x7ff00000
 800d888:	7fe00000 	.word	0x7fe00000
 800d88c:	7c9fffff 	.word	0x7c9fffff
 800d890:	3fe00000 	.word	0x3fe00000
 800d894:	bff00000 	.word	0xbff00000
 800d898:	7fefffff 	.word	0x7fefffff

0800d89c <_strtod_r>:
 800d89c:	4b01      	ldr	r3, [pc, #4]	; (800d8a4 <_strtod_r+0x8>)
 800d89e:	f7ff b9f7 	b.w	800cc90 <_strtod_l>
 800d8a2:	bf00      	nop
 800d8a4:	200002a4 	.word	0x200002a4

0800d8a8 <_strtol_l.constprop.0>:
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ae:	d001      	beq.n	800d8b4 <_strtol_l.constprop.0+0xc>
 800d8b0:	2b24      	cmp	r3, #36	; 0x24
 800d8b2:	d906      	bls.n	800d8c2 <_strtol_l.constprop.0+0x1a>
 800d8b4:	f7fe faf0 	bl	800be98 <__errno>
 800d8b8:	2316      	movs	r3, #22
 800d8ba:	6003      	str	r3, [r0, #0]
 800d8bc:	2000      	movs	r0, #0
 800d8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d9a8 <_strtol_l.constprop.0+0x100>
 800d8c6:	460d      	mov	r5, r1
 800d8c8:	462e      	mov	r6, r5
 800d8ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d8d2:	f017 0708 	ands.w	r7, r7, #8
 800d8d6:	d1f7      	bne.n	800d8c8 <_strtol_l.constprop.0+0x20>
 800d8d8:	2c2d      	cmp	r4, #45	; 0x2d
 800d8da:	d132      	bne.n	800d942 <_strtol_l.constprop.0+0x9a>
 800d8dc:	782c      	ldrb	r4, [r5, #0]
 800d8de:	2701      	movs	r7, #1
 800d8e0:	1cb5      	adds	r5, r6, #2
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d05b      	beq.n	800d99e <_strtol_l.constprop.0+0xf6>
 800d8e6:	2b10      	cmp	r3, #16
 800d8e8:	d109      	bne.n	800d8fe <_strtol_l.constprop.0+0x56>
 800d8ea:	2c30      	cmp	r4, #48	; 0x30
 800d8ec:	d107      	bne.n	800d8fe <_strtol_l.constprop.0+0x56>
 800d8ee:	782c      	ldrb	r4, [r5, #0]
 800d8f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d8f4:	2c58      	cmp	r4, #88	; 0x58
 800d8f6:	d14d      	bne.n	800d994 <_strtol_l.constprop.0+0xec>
 800d8f8:	786c      	ldrb	r4, [r5, #1]
 800d8fa:	2310      	movs	r3, #16
 800d8fc:	3502      	adds	r5, #2
 800d8fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d902:	f108 38ff 	add.w	r8, r8, #4294967295
 800d906:	f04f 0c00 	mov.w	ip, #0
 800d90a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d90e:	4666      	mov	r6, ip
 800d910:	fb03 8a19 	mls	sl, r3, r9, r8
 800d914:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d918:	f1be 0f09 	cmp.w	lr, #9
 800d91c:	d816      	bhi.n	800d94c <_strtol_l.constprop.0+0xa4>
 800d91e:	4674      	mov	r4, lr
 800d920:	42a3      	cmp	r3, r4
 800d922:	dd24      	ble.n	800d96e <_strtol_l.constprop.0+0xc6>
 800d924:	f1bc 0f00 	cmp.w	ip, #0
 800d928:	db1e      	blt.n	800d968 <_strtol_l.constprop.0+0xc0>
 800d92a:	45b1      	cmp	r9, r6
 800d92c:	d31c      	bcc.n	800d968 <_strtol_l.constprop.0+0xc0>
 800d92e:	d101      	bne.n	800d934 <_strtol_l.constprop.0+0x8c>
 800d930:	45a2      	cmp	sl, r4
 800d932:	db19      	blt.n	800d968 <_strtol_l.constprop.0+0xc0>
 800d934:	fb06 4603 	mla	r6, r6, r3, r4
 800d938:	f04f 0c01 	mov.w	ip, #1
 800d93c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d940:	e7e8      	b.n	800d914 <_strtol_l.constprop.0+0x6c>
 800d942:	2c2b      	cmp	r4, #43	; 0x2b
 800d944:	bf04      	itt	eq
 800d946:	782c      	ldrbeq	r4, [r5, #0]
 800d948:	1cb5      	addeq	r5, r6, #2
 800d94a:	e7ca      	b.n	800d8e2 <_strtol_l.constprop.0+0x3a>
 800d94c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d950:	f1be 0f19 	cmp.w	lr, #25
 800d954:	d801      	bhi.n	800d95a <_strtol_l.constprop.0+0xb2>
 800d956:	3c37      	subs	r4, #55	; 0x37
 800d958:	e7e2      	b.n	800d920 <_strtol_l.constprop.0+0x78>
 800d95a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d95e:	f1be 0f19 	cmp.w	lr, #25
 800d962:	d804      	bhi.n	800d96e <_strtol_l.constprop.0+0xc6>
 800d964:	3c57      	subs	r4, #87	; 0x57
 800d966:	e7db      	b.n	800d920 <_strtol_l.constprop.0+0x78>
 800d968:	f04f 3cff 	mov.w	ip, #4294967295
 800d96c:	e7e6      	b.n	800d93c <_strtol_l.constprop.0+0x94>
 800d96e:	f1bc 0f00 	cmp.w	ip, #0
 800d972:	da05      	bge.n	800d980 <_strtol_l.constprop.0+0xd8>
 800d974:	2322      	movs	r3, #34	; 0x22
 800d976:	6003      	str	r3, [r0, #0]
 800d978:	4646      	mov	r6, r8
 800d97a:	b942      	cbnz	r2, 800d98e <_strtol_l.constprop.0+0xe6>
 800d97c:	4630      	mov	r0, r6
 800d97e:	e79e      	b.n	800d8be <_strtol_l.constprop.0+0x16>
 800d980:	b107      	cbz	r7, 800d984 <_strtol_l.constprop.0+0xdc>
 800d982:	4276      	negs	r6, r6
 800d984:	2a00      	cmp	r2, #0
 800d986:	d0f9      	beq.n	800d97c <_strtol_l.constprop.0+0xd4>
 800d988:	f1bc 0f00 	cmp.w	ip, #0
 800d98c:	d000      	beq.n	800d990 <_strtol_l.constprop.0+0xe8>
 800d98e:	1e69      	subs	r1, r5, #1
 800d990:	6011      	str	r1, [r2, #0]
 800d992:	e7f3      	b.n	800d97c <_strtol_l.constprop.0+0xd4>
 800d994:	2430      	movs	r4, #48	; 0x30
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1b1      	bne.n	800d8fe <_strtol_l.constprop.0+0x56>
 800d99a:	2308      	movs	r3, #8
 800d99c:	e7af      	b.n	800d8fe <_strtol_l.constprop.0+0x56>
 800d99e:	2c30      	cmp	r4, #48	; 0x30
 800d9a0:	d0a5      	beq.n	800d8ee <_strtol_l.constprop.0+0x46>
 800d9a2:	230a      	movs	r3, #10
 800d9a4:	e7ab      	b.n	800d8fe <_strtol_l.constprop.0+0x56>
 800d9a6:	bf00      	nop
 800d9a8:	08012f81 	.word	0x08012f81

0800d9ac <_strtol_r>:
 800d9ac:	f7ff bf7c 	b.w	800d8a8 <_strtol_l.constprop.0>

0800d9b0 <quorem>:
 800d9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	6903      	ldr	r3, [r0, #16]
 800d9b6:	690c      	ldr	r4, [r1, #16]
 800d9b8:	42a3      	cmp	r3, r4
 800d9ba:	4607      	mov	r7, r0
 800d9bc:	f2c0 8081 	blt.w	800dac2 <quorem+0x112>
 800d9c0:	3c01      	subs	r4, #1
 800d9c2:	f101 0814 	add.w	r8, r1, #20
 800d9c6:	f100 0514 	add.w	r5, r0, #20
 800d9ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d9e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9e8:	d331      	bcc.n	800da4e <quorem+0x9e>
 800d9ea:	f04f 0e00 	mov.w	lr, #0
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	46ac      	mov	ip, r5
 800d9f2:	46f2      	mov	sl, lr
 800d9f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9f8:	b293      	uxth	r3, r2
 800d9fa:	fb06 e303 	mla	r3, r6, r3, lr
 800d9fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800da02:	b29b      	uxth	r3, r3
 800da04:	ebaa 0303 	sub.w	r3, sl, r3
 800da08:	f8dc a000 	ldr.w	sl, [ip]
 800da0c:	0c12      	lsrs	r2, r2, #16
 800da0e:	fa13 f38a 	uxtah	r3, r3, sl
 800da12:	fb06 e202 	mla	r2, r6, r2, lr
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	9b00      	ldr	r3, [sp, #0]
 800da1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da1e:	b292      	uxth	r2, r2
 800da20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800da24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da28:	f8bd 3000 	ldrh.w	r3, [sp]
 800da2c:	4581      	cmp	r9, r0
 800da2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da32:	f84c 3b04 	str.w	r3, [ip], #4
 800da36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da3a:	d2db      	bcs.n	800d9f4 <quorem+0x44>
 800da3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800da40:	b92b      	cbnz	r3, 800da4e <quorem+0x9e>
 800da42:	9b01      	ldr	r3, [sp, #4]
 800da44:	3b04      	subs	r3, #4
 800da46:	429d      	cmp	r5, r3
 800da48:	461a      	mov	r2, r3
 800da4a:	d32e      	bcc.n	800daaa <quorem+0xfa>
 800da4c:	613c      	str	r4, [r7, #16]
 800da4e:	4638      	mov	r0, r7
 800da50:	f001 fc82 	bl	800f358 <__mcmp>
 800da54:	2800      	cmp	r0, #0
 800da56:	db24      	blt.n	800daa2 <quorem+0xf2>
 800da58:	3601      	adds	r6, #1
 800da5a:	4628      	mov	r0, r5
 800da5c:	f04f 0c00 	mov.w	ip, #0
 800da60:	f858 2b04 	ldr.w	r2, [r8], #4
 800da64:	f8d0 e000 	ldr.w	lr, [r0]
 800da68:	b293      	uxth	r3, r2
 800da6a:	ebac 0303 	sub.w	r3, ip, r3
 800da6e:	0c12      	lsrs	r2, r2, #16
 800da70:	fa13 f38e 	uxtah	r3, r3, lr
 800da74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da82:	45c1      	cmp	r9, r8
 800da84:	f840 3b04 	str.w	r3, [r0], #4
 800da88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da8c:	d2e8      	bcs.n	800da60 <quorem+0xb0>
 800da8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da96:	b922      	cbnz	r2, 800daa2 <quorem+0xf2>
 800da98:	3b04      	subs	r3, #4
 800da9a:	429d      	cmp	r5, r3
 800da9c:	461a      	mov	r2, r3
 800da9e:	d30a      	bcc.n	800dab6 <quorem+0x106>
 800daa0:	613c      	str	r4, [r7, #16]
 800daa2:	4630      	mov	r0, r6
 800daa4:	b003      	add	sp, #12
 800daa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	3b04      	subs	r3, #4
 800daae:	2a00      	cmp	r2, #0
 800dab0:	d1cc      	bne.n	800da4c <quorem+0x9c>
 800dab2:	3c01      	subs	r4, #1
 800dab4:	e7c7      	b.n	800da46 <quorem+0x96>
 800dab6:	6812      	ldr	r2, [r2, #0]
 800dab8:	3b04      	subs	r3, #4
 800daba:	2a00      	cmp	r2, #0
 800dabc:	d1f0      	bne.n	800daa0 <quorem+0xf0>
 800dabe:	3c01      	subs	r4, #1
 800dac0:	e7eb      	b.n	800da9a <quorem+0xea>
 800dac2:	2000      	movs	r0, #0
 800dac4:	e7ee      	b.n	800daa4 <quorem+0xf4>
	...

0800dac8 <_dtoa_r>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	ed2d 8b04 	vpush	{d8-d9}
 800dad0:	ec57 6b10 	vmov	r6, r7, d0
 800dad4:	b093      	sub	sp, #76	; 0x4c
 800dad6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dad8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dadc:	9106      	str	r1, [sp, #24]
 800dade:	ee10 aa10 	vmov	sl, s0
 800dae2:	4604      	mov	r4, r0
 800dae4:	9209      	str	r2, [sp, #36]	; 0x24
 800dae6:	930c      	str	r3, [sp, #48]	; 0x30
 800dae8:	46bb      	mov	fp, r7
 800daea:	b975      	cbnz	r5, 800db0a <_dtoa_r+0x42>
 800daec:	2010      	movs	r0, #16
 800daee:	f001 f94d 	bl	800ed8c <malloc>
 800daf2:	4602      	mov	r2, r0
 800daf4:	6260      	str	r0, [r4, #36]	; 0x24
 800daf6:	b920      	cbnz	r0, 800db02 <_dtoa_r+0x3a>
 800daf8:	4ba7      	ldr	r3, [pc, #668]	; (800dd98 <_dtoa_r+0x2d0>)
 800dafa:	21ea      	movs	r1, #234	; 0xea
 800dafc:	48a7      	ldr	r0, [pc, #668]	; (800dd9c <_dtoa_r+0x2d4>)
 800dafe:	f002 f8ad 	bl	800fc5c <__assert_func>
 800db02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db06:	6005      	str	r5, [r0, #0]
 800db08:	60c5      	str	r5, [r0, #12]
 800db0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db0c:	6819      	ldr	r1, [r3, #0]
 800db0e:	b151      	cbz	r1, 800db26 <_dtoa_r+0x5e>
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	604a      	str	r2, [r1, #4]
 800db14:	2301      	movs	r3, #1
 800db16:	4093      	lsls	r3, r2
 800db18:	608b      	str	r3, [r1, #8]
 800db1a:	4620      	mov	r0, r4
 800db1c:	f001 f990 	bl	800ee40 <_Bfree>
 800db20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	1e3b      	subs	r3, r7, #0
 800db28:	bfaa      	itet	ge
 800db2a:	2300      	movge	r3, #0
 800db2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800db30:	f8c8 3000 	strge.w	r3, [r8]
 800db34:	4b9a      	ldr	r3, [pc, #616]	; (800dda0 <_dtoa_r+0x2d8>)
 800db36:	bfbc      	itt	lt
 800db38:	2201      	movlt	r2, #1
 800db3a:	f8c8 2000 	strlt.w	r2, [r8]
 800db3e:	ea33 030b 	bics.w	r3, r3, fp
 800db42:	d11b      	bne.n	800db7c <_dtoa_r+0xb4>
 800db44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db46:	f242 730f 	movw	r3, #9999	; 0x270f
 800db4a:	6013      	str	r3, [r2, #0]
 800db4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db50:	4333      	orrs	r3, r6
 800db52:	f000 8592 	beq.w	800e67a <_dtoa_r+0xbb2>
 800db56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db58:	b963      	cbnz	r3, 800db74 <_dtoa_r+0xac>
 800db5a:	4b92      	ldr	r3, [pc, #584]	; (800dda4 <_dtoa_r+0x2dc>)
 800db5c:	e022      	b.n	800dba4 <_dtoa_r+0xdc>
 800db5e:	4b92      	ldr	r3, [pc, #584]	; (800dda8 <_dtoa_r+0x2e0>)
 800db60:	9301      	str	r3, [sp, #4]
 800db62:	3308      	adds	r3, #8
 800db64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	9801      	ldr	r0, [sp, #4]
 800db6a:	b013      	add	sp, #76	; 0x4c
 800db6c:	ecbd 8b04 	vpop	{d8-d9}
 800db70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db74:	4b8b      	ldr	r3, [pc, #556]	; (800dda4 <_dtoa_r+0x2dc>)
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	3303      	adds	r3, #3
 800db7a:	e7f3      	b.n	800db64 <_dtoa_r+0x9c>
 800db7c:	2200      	movs	r2, #0
 800db7e:	2300      	movs	r3, #0
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	f7f2 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800db88:	ec4b ab19 	vmov	d9, sl, fp
 800db8c:	4680      	mov	r8, r0
 800db8e:	b158      	cbz	r0, 800dba8 <_dtoa_r+0xe0>
 800db90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db92:	2301      	movs	r3, #1
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 856b 	beq.w	800e674 <_dtoa_r+0xbac>
 800db9e:	4883      	ldr	r0, [pc, #524]	; (800ddac <_dtoa_r+0x2e4>)
 800dba0:	6018      	str	r0, [r3, #0]
 800dba2:	1e43      	subs	r3, r0, #1
 800dba4:	9301      	str	r3, [sp, #4]
 800dba6:	e7df      	b.n	800db68 <_dtoa_r+0xa0>
 800dba8:	ec4b ab10 	vmov	d0, sl, fp
 800dbac:	aa10      	add	r2, sp, #64	; 0x40
 800dbae:	a911      	add	r1, sp, #68	; 0x44
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f001 fcf3 	bl	800f59c <__d2b>
 800dbb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dbba:	ee08 0a10 	vmov	s16, r0
 800dbbe:	2d00      	cmp	r5, #0
 800dbc0:	f000 8084 	beq.w	800dccc <_dtoa_r+0x204>
 800dbc4:	ee19 3a90 	vmov	r3, s19
 800dbc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dbd0:	4656      	mov	r6, sl
 800dbd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dbd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dbda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dbde:	4b74      	ldr	r3, [pc, #464]	; (800ddb0 <_dtoa_r+0x2e8>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	f7f2 fb57 	bl	8000298 <__aeabi_dsub>
 800dbea:	a365      	add	r3, pc, #404	; (adr r3, 800dd80 <_dtoa_r+0x2b8>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	f7f2 fd0a 	bl	8000608 <__aeabi_dmul>
 800dbf4:	a364      	add	r3, pc, #400	; (adr r3, 800dd88 <_dtoa_r+0x2c0>)
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	f7f2 fb4f 	bl	800029c <__adddf3>
 800dbfe:	4606      	mov	r6, r0
 800dc00:	4628      	mov	r0, r5
 800dc02:	460f      	mov	r7, r1
 800dc04:	f7f2 fc96 	bl	8000534 <__aeabi_i2d>
 800dc08:	a361      	add	r3, pc, #388	; (adr r3, 800dd90 <_dtoa_r+0x2c8>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fcfb 	bl	8000608 <__aeabi_dmul>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4630      	mov	r0, r6
 800dc18:	4639      	mov	r1, r7
 800dc1a:	f7f2 fb3f 	bl	800029c <__adddf3>
 800dc1e:	4606      	mov	r6, r0
 800dc20:	460f      	mov	r7, r1
 800dc22:	f7f2 ffa1 	bl	8000b68 <__aeabi_d2iz>
 800dc26:	2200      	movs	r2, #0
 800dc28:	9000      	str	r0, [sp, #0]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 ff5c 	bl	8000aec <__aeabi_dcmplt>
 800dc34:	b150      	cbz	r0, 800dc4c <_dtoa_r+0x184>
 800dc36:	9800      	ldr	r0, [sp, #0]
 800dc38:	f7f2 fc7c 	bl	8000534 <__aeabi_i2d>
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	463b      	mov	r3, r7
 800dc40:	f7f2 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc44:	b910      	cbnz	r0, 800dc4c <_dtoa_r+0x184>
 800dc46:	9b00      	ldr	r3, [sp, #0]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	9b00      	ldr	r3, [sp, #0]
 800dc4e:	2b16      	cmp	r3, #22
 800dc50:	d85a      	bhi.n	800dd08 <_dtoa_r+0x240>
 800dc52:	9a00      	ldr	r2, [sp, #0]
 800dc54:	4b57      	ldr	r3, [pc, #348]	; (800ddb4 <_dtoa_r+0x2ec>)
 800dc56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	ec51 0b19 	vmov	r0, r1, d9
 800dc62:	f7f2 ff43 	bl	8000aec <__aeabi_dcmplt>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d050      	beq.n	800dd0c <_dtoa_r+0x244>
 800dc6a:	9b00      	ldr	r3, [sp, #0]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	2300      	movs	r3, #0
 800dc72:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc76:	1b5d      	subs	r5, r3, r5
 800dc78:	1e6b      	subs	r3, r5, #1
 800dc7a:	9305      	str	r3, [sp, #20]
 800dc7c:	bf45      	ittet	mi
 800dc7e:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc82:	9304      	strmi	r3, [sp, #16]
 800dc84:	2300      	movpl	r3, #0
 800dc86:	2300      	movmi	r3, #0
 800dc88:	bf4c      	ite	mi
 800dc8a:	9305      	strmi	r3, [sp, #20]
 800dc8c:	9304      	strpl	r3, [sp, #16]
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	db3d      	blt.n	800dd10 <_dtoa_r+0x248>
 800dc94:	9b05      	ldr	r3, [sp, #20]
 800dc96:	9a00      	ldr	r2, [sp, #0]
 800dc98:	920a      	str	r2, [sp, #40]	; 0x28
 800dc9a:	4413      	add	r3, r2
 800dc9c:	9305      	str	r3, [sp, #20]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	9307      	str	r3, [sp, #28]
 800dca2:	9b06      	ldr	r3, [sp, #24]
 800dca4:	2b09      	cmp	r3, #9
 800dca6:	f200 8089 	bhi.w	800ddbc <_dtoa_r+0x2f4>
 800dcaa:	2b05      	cmp	r3, #5
 800dcac:	bfc4      	itt	gt
 800dcae:	3b04      	subgt	r3, #4
 800dcb0:	9306      	strgt	r3, [sp, #24]
 800dcb2:	9b06      	ldr	r3, [sp, #24]
 800dcb4:	f1a3 0302 	sub.w	r3, r3, #2
 800dcb8:	bfcc      	ite	gt
 800dcba:	2500      	movgt	r5, #0
 800dcbc:	2501      	movle	r5, #1
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	f200 8087 	bhi.w	800ddd2 <_dtoa_r+0x30a>
 800dcc4:	e8df f003 	tbb	[pc, r3]
 800dcc8:	59383a2d 	.word	0x59383a2d
 800dccc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dcd0:	441d      	add	r5, r3
 800dcd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dcd6:	2b20      	cmp	r3, #32
 800dcd8:	bfc1      	itttt	gt
 800dcda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dcde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dce2:	fa0b f303 	lslgt.w	r3, fp, r3
 800dce6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dcea:	bfda      	itte	le
 800dcec:	f1c3 0320 	rsble	r3, r3, #32
 800dcf0:	fa06 f003 	lslle.w	r0, r6, r3
 800dcf4:	4318      	orrgt	r0, r3
 800dcf6:	f7f2 fc0d 	bl	8000514 <__aeabi_ui2d>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dd02:	3d01      	subs	r5, #1
 800dd04:	930e      	str	r3, [sp, #56]	; 0x38
 800dd06:	e76a      	b.n	800dbde <_dtoa_r+0x116>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e7b2      	b.n	800dc72 <_dtoa_r+0x1aa>
 800dd0c:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd0e:	e7b1      	b.n	800dc74 <_dtoa_r+0x1ac>
 800dd10:	9b04      	ldr	r3, [sp, #16]
 800dd12:	9a00      	ldr	r2, [sp, #0]
 800dd14:	1a9b      	subs	r3, r3, r2
 800dd16:	9304      	str	r3, [sp, #16]
 800dd18:	4253      	negs	r3, r2
 800dd1a:	9307      	str	r3, [sp, #28]
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd20:	e7bf      	b.n	800dca2 <_dtoa_r+0x1da>
 800dd22:	2300      	movs	r3, #0
 800dd24:	9308      	str	r3, [sp, #32]
 800dd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	dc55      	bgt.n	800ddd8 <_dtoa_r+0x310>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd32:	461a      	mov	r2, r3
 800dd34:	9209      	str	r2, [sp, #36]	; 0x24
 800dd36:	e00c      	b.n	800dd52 <_dtoa_r+0x28a>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e7f3      	b.n	800dd24 <_dtoa_r+0x25c>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd40:	9308      	str	r3, [sp, #32]
 800dd42:	9b00      	ldr	r3, [sp, #0]
 800dd44:	4413      	add	r3, r2
 800dd46:	9302      	str	r3, [sp, #8]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	9303      	str	r3, [sp, #12]
 800dd4e:	bfb8      	it	lt
 800dd50:	2301      	movlt	r3, #1
 800dd52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd54:	2200      	movs	r2, #0
 800dd56:	6042      	str	r2, [r0, #4]
 800dd58:	2204      	movs	r2, #4
 800dd5a:	f102 0614 	add.w	r6, r2, #20
 800dd5e:	429e      	cmp	r6, r3
 800dd60:	6841      	ldr	r1, [r0, #4]
 800dd62:	d93d      	bls.n	800dde0 <_dtoa_r+0x318>
 800dd64:	4620      	mov	r0, r4
 800dd66:	f001 f82b 	bl	800edc0 <_Balloc>
 800dd6a:	9001      	str	r0, [sp, #4]
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d13b      	bne.n	800dde8 <_dtoa_r+0x320>
 800dd70:	4b11      	ldr	r3, [pc, #68]	; (800ddb8 <_dtoa_r+0x2f0>)
 800dd72:	4602      	mov	r2, r0
 800dd74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd78:	e6c0      	b.n	800dafc <_dtoa_r+0x34>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e7df      	b.n	800dd3e <_dtoa_r+0x276>
 800dd7e:	bf00      	nop
 800dd80:	636f4361 	.word	0x636f4361
 800dd84:	3fd287a7 	.word	0x3fd287a7
 800dd88:	8b60c8b3 	.word	0x8b60c8b3
 800dd8c:	3fc68a28 	.word	0x3fc68a28
 800dd90:	509f79fb 	.word	0x509f79fb
 800dd94:	3fd34413 	.word	0x3fd34413
 800dd98:	0801308e 	.word	0x0801308e
 800dd9c:	080130a5 	.word	0x080130a5
 800dda0:	7ff00000 	.word	0x7ff00000
 800dda4:	0801308a 	.word	0x0801308a
 800dda8:	08013081 	.word	0x08013081
 800ddac:	08012f01 	.word	0x08012f01
 800ddb0:	3ff80000 	.word	0x3ff80000
 800ddb4:	08013210 	.word	0x08013210
 800ddb8:	08013100 	.word	0x08013100
 800ddbc:	2501      	movs	r5, #1
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	9306      	str	r3, [sp, #24]
 800ddc2:	9508      	str	r5, [sp, #32]
 800ddc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2312      	movs	r3, #18
 800ddd0:	e7b0      	b.n	800dd34 <_dtoa_r+0x26c>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	9308      	str	r3, [sp, #32]
 800ddd6:	e7f5      	b.n	800ddc4 <_dtoa_r+0x2fc>
 800ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddde:	e7b8      	b.n	800dd52 <_dtoa_r+0x28a>
 800dde0:	3101      	adds	r1, #1
 800dde2:	6041      	str	r1, [r0, #4]
 800dde4:	0052      	lsls	r2, r2, #1
 800dde6:	e7b8      	b.n	800dd5a <_dtoa_r+0x292>
 800dde8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddea:	9a01      	ldr	r2, [sp, #4]
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	9b03      	ldr	r3, [sp, #12]
 800ddf0:	2b0e      	cmp	r3, #14
 800ddf2:	f200 809d 	bhi.w	800df30 <_dtoa_r+0x468>
 800ddf6:	2d00      	cmp	r5, #0
 800ddf8:	f000 809a 	beq.w	800df30 <_dtoa_r+0x468>
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	dd32      	ble.n	800de68 <_dtoa_r+0x3a0>
 800de02:	4ab7      	ldr	r2, [pc, #732]	; (800e0e0 <_dtoa_r+0x618>)
 800de04:	f003 030f 	and.w	r3, r3, #15
 800de08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de10:	9b00      	ldr	r3, [sp, #0]
 800de12:	05d8      	lsls	r0, r3, #23
 800de14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800de18:	d516      	bpl.n	800de48 <_dtoa_r+0x380>
 800de1a:	4bb2      	ldr	r3, [pc, #712]	; (800e0e4 <_dtoa_r+0x61c>)
 800de1c:	ec51 0b19 	vmov	r0, r1, d9
 800de20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de24:	f7f2 fd1a 	bl	800085c <__aeabi_ddiv>
 800de28:	f007 070f 	and.w	r7, r7, #15
 800de2c:	4682      	mov	sl, r0
 800de2e:	468b      	mov	fp, r1
 800de30:	2503      	movs	r5, #3
 800de32:	4eac      	ldr	r6, [pc, #688]	; (800e0e4 <_dtoa_r+0x61c>)
 800de34:	b957      	cbnz	r7, 800de4c <_dtoa_r+0x384>
 800de36:	4642      	mov	r2, r8
 800de38:	464b      	mov	r3, r9
 800de3a:	4650      	mov	r0, sl
 800de3c:	4659      	mov	r1, fp
 800de3e:	f7f2 fd0d 	bl	800085c <__aeabi_ddiv>
 800de42:	4682      	mov	sl, r0
 800de44:	468b      	mov	fp, r1
 800de46:	e028      	b.n	800de9a <_dtoa_r+0x3d2>
 800de48:	2502      	movs	r5, #2
 800de4a:	e7f2      	b.n	800de32 <_dtoa_r+0x36a>
 800de4c:	07f9      	lsls	r1, r7, #31
 800de4e:	d508      	bpl.n	800de62 <_dtoa_r+0x39a>
 800de50:	4640      	mov	r0, r8
 800de52:	4649      	mov	r1, r9
 800de54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de58:	f7f2 fbd6 	bl	8000608 <__aeabi_dmul>
 800de5c:	3501      	adds	r5, #1
 800de5e:	4680      	mov	r8, r0
 800de60:	4689      	mov	r9, r1
 800de62:	107f      	asrs	r7, r7, #1
 800de64:	3608      	adds	r6, #8
 800de66:	e7e5      	b.n	800de34 <_dtoa_r+0x36c>
 800de68:	f000 809b 	beq.w	800dfa2 <_dtoa_r+0x4da>
 800de6c:	9b00      	ldr	r3, [sp, #0]
 800de6e:	4f9d      	ldr	r7, [pc, #628]	; (800e0e4 <_dtoa_r+0x61c>)
 800de70:	425e      	negs	r6, r3
 800de72:	4b9b      	ldr	r3, [pc, #620]	; (800e0e0 <_dtoa_r+0x618>)
 800de74:	f006 020f 	and.w	r2, r6, #15
 800de78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	ec51 0b19 	vmov	r0, r1, d9
 800de84:	f7f2 fbc0 	bl	8000608 <__aeabi_dmul>
 800de88:	1136      	asrs	r6, r6, #4
 800de8a:	4682      	mov	sl, r0
 800de8c:	468b      	mov	fp, r1
 800de8e:	2300      	movs	r3, #0
 800de90:	2502      	movs	r5, #2
 800de92:	2e00      	cmp	r6, #0
 800de94:	d17a      	bne.n	800df8c <_dtoa_r+0x4c4>
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1d3      	bne.n	800de42 <_dtoa_r+0x37a>
 800de9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 8082 	beq.w	800dfa6 <_dtoa_r+0x4de>
 800dea2:	4b91      	ldr	r3, [pc, #580]	; (800e0e8 <_dtoa_r+0x620>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	4650      	mov	r0, sl
 800dea8:	4659      	mov	r1, fp
 800deaa:	f7f2 fe1f 	bl	8000aec <__aeabi_dcmplt>
 800deae:	2800      	cmp	r0, #0
 800deb0:	d079      	beq.n	800dfa6 <_dtoa_r+0x4de>
 800deb2:	9b03      	ldr	r3, [sp, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d076      	beq.n	800dfa6 <_dtoa_r+0x4de>
 800deb8:	9b02      	ldr	r3, [sp, #8]
 800deba:	2b00      	cmp	r3, #0
 800debc:	dd36      	ble.n	800df2c <_dtoa_r+0x464>
 800debe:	9b00      	ldr	r3, [sp, #0]
 800dec0:	4650      	mov	r0, sl
 800dec2:	4659      	mov	r1, fp
 800dec4:	1e5f      	subs	r7, r3, #1
 800dec6:	2200      	movs	r2, #0
 800dec8:	4b88      	ldr	r3, [pc, #544]	; (800e0ec <_dtoa_r+0x624>)
 800deca:	f7f2 fb9d 	bl	8000608 <__aeabi_dmul>
 800dece:	9e02      	ldr	r6, [sp, #8]
 800ded0:	4682      	mov	sl, r0
 800ded2:	468b      	mov	fp, r1
 800ded4:	3501      	adds	r5, #1
 800ded6:	4628      	mov	r0, r5
 800ded8:	f7f2 fb2c 	bl	8000534 <__aeabi_i2d>
 800dedc:	4652      	mov	r2, sl
 800dede:	465b      	mov	r3, fp
 800dee0:	f7f2 fb92 	bl	8000608 <__aeabi_dmul>
 800dee4:	4b82      	ldr	r3, [pc, #520]	; (800e0f0 <_dtoa_r+0x628>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	f7f2 f9d8 	bl	800029c <__adddf3>
 800deec:	46d0      	mov	r8, sl
 800deee:	46d9      	mov	r9, fp
 800def0:	4682      	mov	sl, r0
 800def2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800def6:	2e00      	cmp	r6, #0
 800def8:	d158      	bne.n	800dfac <_dtoa_r+0x4e4>
 800defa:	4b7e      	ldr	r3, [pc, #504]	; (800e0f4 <_dtoa_r+0x62c>)
 800defc:	2200      	movs	r2, #0
 800defe:	4640      	mov	r0, r8
 800df00:	4649      	mov	r1, r9
 800df02:	f7f2 f9c9 	bl	8000298 <__aeabi_dsub>
 800df06:	4652      	mov	r2, sl
 800df08:	465b      	mov	r3, fp
 800df0a:	4680      	mov	r8, r0
 800df0c:	4689      	mov	r9, r1
 800df0e:	f7f2 fe0b 	bl	8000b28 <__aeabi_dcmpgt>
 800df12:	2800      	cmp	r0, #0
 800df14:	f040 8295 	bne.w	800e442 <_dtoa_r+0x97a>
 800df18:	4652      	mov	r2, sl
 800df1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df1e:	4640      	mov	r0, r8
 800df20:	4649      	mov	r1, r9
 800df22:	f7f2 fde3 	bl	8000aec <__aeabi_dcmplt>
 800df26:	2800      	cmp	r0, #0
 800df28:	f040 8289 	bne.w	800e43e <_dtoa_r+0x976>
 800df2c:	ec5b ab19 	vmov	sl, fp, d9
 800df30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df32:	2b00      	cmp	r3, #0
 800df34:	f2c0 8148 	blt.w	800e1c8 <_dtoa_r+0x700>
 800df38:	9a00      	ldr	r2, [sp, #0]
 800df3a:	2a0e      	cmp	r2, #14
 800df3c:	f300 8144 	bgt.w	800e1c8 <_dtoa_r+0x700>
 800df40:	4b67      	ldr	r3, [pc, #412]	; (800e0e0 <_dtoa_r+0x618>)
 800df42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f280 80d5 	bge.w	800e0fc <_dtoa_r+0x634>
 800df52:	9b03      	ldr	r3, [sp, #12]
 800df54:	2b00      	cmp	r3, #0
 800df56:	f300 80d1 	bgt.w	800e0fc <_dtoa_r+0x634>
 800df5a:	f040 826f 	bne.w	800e43c <_dtoa_r+0x974>
 800df5e:	4b65      	ldr	r3, [pc, #404]	; (800e0f4 <_dtoa_r+0x62c>)
 800df60:	2200      	movs	r2, #0
 800df62:	4640      	mov	r0, r8
 800df64:	4649      	mov	r1, r9
 800df66:	f7f2 fb4f 	bl	8000608 <__aeabi_dmul>
 800df6a:	4652      	mov	r2, sl
 800df6c:	465b      	mov	r3, fp
 800df6e:	f7f2 fdd1 	bl	8000b14 <__aeabi_dcmpge>
 800df72:	9e03      	ldr	r6, [sp, #12]
 800df74:	4637      	mov	r7, r6
 800df76:	2800      	cmp	r0, #0
 800df78:	f040 8245 	bne.w	800e406 <_dtoa_r+0x93e>
 800df7c:	9d01      	ldr	r5, [sp, #4]
 800df7e:	2331      	movs	r3, #49	; 0x31
 800df80:	f805 3b01 	strb.w	r3, [r5], #1
 800df84:	9b00      	ldr	r3, [sp, #0]
 800df86:	3301      	adds	r3, #1
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	e240      	b.n	800e40e <_dtoa_r+0x946>
 800df8c:	07f2      	lsls	r2, r6, #31
 800df8e:	d505      	bpl.n	800df9c <_dtoa_r+0x4d4>
 800df90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df94:	f7f2 fb38 	bl	8000608 <__aeabi_dmul>
 800df98:	3501      	adds	r5, #1
 800df9a:	2301      	movs	r3, #1
 800df9c:	1076      	asrs	r6, r6, #1
 800df9e:	3708      	adds	r7, #8
 800dfa0:	e777      	b.n	800de92 <_dtoa_r+0x3ca>
 800dfa2:	2502      	movs	r5, #2
 800dfa4:	e779      	b.n	800de9a <_dtoa_r+0x3d2>
 800dfa6:	9f00      	ldr	r7, [sp, #0]
 800dfa8:	9e03      	ldr	r6, [sp, #12]
 800dfaa:	e794      	b.n	800ded6 <_dtoa_r+0x40e>
 800dfac:	9901      	ldr	r1, [sp, #4]
 800dfae:	4b4c      	ldr	r3, [pc, #304]	; (800e0e0 <_dtoa_r+0x618>)
 800dfb0:	4431      	add	r1, r6
 800dfb2:	910d      	str	r1, [sp, #52]	; 0x34
 800dfb4:	9908      	ldr	r1, [sp, #32]
 800dfb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dfba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfbe:	2900      	cmp	r1, #0
 800dfc0:	d043      	beq.n	800e04a <_dtoa_r+0x582>
 800dfc2:	494d      	ldr	r1, [pc, #308]	; (800e0f8 <_dtoa_r+0x630>)
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	f7f2 fc49 	bl	800085c <__aeabi_ddiv>
 800dfca:	4652      	mov	r2, sl
 800dfcc:	465b      	mov	r3, fp
 800dfce:	f7f2 f963 	bl	8000298 <__aeabi_dsub>
 800dfd2:	9d01      	ldr	r5, [sp, #4]
 800dfd4:	4682      	mov	sl, r0
 800dfd6:	468b      	mov	fp, r1
 800dfd8:	4649      	mov	r1, r9
 800dfda:	4640      	mov	r0, r8
 800dfdc:	f7f2 fdc4 	bl	8000b68 <__aeabi_d2iz>
 800dfe0:	4606      	mov	r6, r0
 800dfe2:	f7f2 faa7 	bl	8000534 <__aeabi_i2d>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4640      	mov	r0, r8
 800dfec:	4649      	mov	r1, r9
 800dfee:	f7f2 f953 	bl	8000298 <__aeabi_dsub>
 800dff2:	3630      	adds	r6, #48	; 0x30
 800dff4:	f805 6b01 	strb.w	r6, [r5], #1
 800dff8:	4652      	mov	r2, sl
 800dffa:	465b      	mov	r3, fp
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	f7f2 fd74 	bl	8000aec <__aeabi_dcmplt>
 800e004:	2800      	cmp	r0, #0
 800e006:	d163      	bne.n	800e0d0 <_dtoa_r+0x608>
 800e008:	4642      	mov	r2, r8
 800e00a:	464b      	mov	r3, r9
 800e00c:	4936      	ldr	r1, [pc, #216]	; (800e0e8 <_dtoa_r+0x620>)
 800e00e:	2000      	movs	r0, #0
 800e010:	f7f2 f942 	bl	8000298 <__aeabi_dsub>
 800e014:	4652      	mov	r2, sl
 800e016:	465b      	mov	r3, fp
 800e018:	f7f2 fd68 	bl	8000aec <__aeabi_dcmplt>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	f040 80b5 	bne.w	800e18c <_dtoa_r+0x6c4>
 800e022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e024:	429d      	cmp	r5, r3
 800e026:	d081      	beq.n	800df2c <_dtoa_r+0x464>
 800e028:	4b30      	ldr	r3, [pc, #192]	; (800e0ec <_dtoa_r+0x624>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	4650      	mov	r0, sl
 800e02e:	4659      	mov	r1, fp
 800e030:	f7f2 faea 	bl	8000608 <__aeabi_dmul>
 800e034:	4b2d      	ldr	r3, [pc, #180]	; (800e0ec <_dtoa_r+0x624>)
 800e036:	4682      	mov	sl, r0
 800e038:	468b      	mov	fp, r1
 800e03a:	4640      	mov	r0, r8
 800e03c:	4649      	mov	r1, r9
 800e03e:	2200      	movs	r2, #0
 800e040:	f7f2 fae2 	bl	8000608 <__aeabi_dmul>
 800e044:	4680      	mov	r8, r0
 800e046:	4689      	mov	r9, r1
 800e048:	e7c6      	b.n	800dfd8 <_dtoa_r+0x510>
 800e04a:	4650      	mov	r0, sl
 800e04c:	4659      	mov	r1, fp
 800e04e:	f7f2 fadb 	bl	8000608 <__aeabi_dmul>
 800e052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e054:	9d01      	ldr	r5, [sp, #4]
 800e056:	930f      	str	r3, [sp, #60]	; 0x3c
 800e058:	4682      	mov	sl, r0
 800e05a:	468b      	mov	fp, r1
 800e05c:	4649      	mov	r1, r9
 800e05e:	4640      	mov	r0, r8
 800e060:	f7f2 fd82 	bl	8000b68 <__aeabi_d2iz>
 800e064:	4606      	mov	r6, r0
 800e066:	f7f2 fa65 	bl	8000534 <__aeabi_i2d>
 800e06a:	3630      	adds	r6, #48	; 0x30
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4640      	mov	r0, r8
 800e072:	4649      	mov	r1, r9
 800e074:	f7f2 f910 	bl	8000298 <__aeabi_dsub>
 800e078:	f805 6b01 	strb.w	r6, [r5], #1
 800e07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e07e:	429d      	cmp	r5, r3
 800e080:	4680      	mov	r8, r0
 800e082:	4689      	mov	r9, r1
 800e084:	f04f 0200 	mov.w	r2, #0
 800e088:	d124      	bne.n	800e0d4 <_dtoa_r+0x60c>
 800e08a:	4b1b      	ldr	r3, [pc, #108]	; (800e0f8 <_dtoa_r+0x630>)
 800e08c:	4650      	mov	r0, sl
 800e08e:	4659      	mov	r1, fp
 800e090:	f7f2 f904 	bl	800029c <__adddf3>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	4640      	mov	r0, r8
 800e09a:	4649      	mov	r1, r9
 800e09c:	f7f2 fd44 	bl	8000b28 <__aeabi_dcmpgt>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d173      	bne.n	800e18c <_dtoa_r+0x6c4>
 800e0a4:	4652      	mov	r2, sl
 800e0a6:	465b      	mov	r3, fp
 800e0a8:	4913      	ldr	r1, [pc, #76]	; (800e0f8 <_dtoa_r+0x630>)
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	f7f2 f8f4 	bl	8000298 <__aeabi_dsub>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	4649      	mov	r1, r9
 800e0b8:	f7f2 fd18 	bl	8000aec <__aeabi_dcmplt>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	f43f af35 	beq.w	800df2c <_dtoa_r+0x464>
 800e0c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e0c4:	1e6b      	subs	r3, r5, #1
 800e0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0cc:	2b30      	cmp	r3, #48	; 0x30
 800e0ce:	d0f8      	beq.n	800e0c2 <_dtoa_r+0x5fa>
 800e0d0:	9700      	str	r7, [sp, #0]
 800e0d2:	e049      	b.n	800e168 <_dtoa_r+0x6a0>
 800e0d4:	4b05      	ldr	r3, [pc, #20]	; (800e0ec <_dtoa_r+0x624>)
 800e0d6:	f7f2 fa97 	bl	8000608 <__aeabi_dmul>
 800e0da:	4680      	mov	r8, r0
 800e0dc:	4689      	mov	r9, r1
 800e0de:	e7bd      	b.n	800e05c <_dtoa_r+0x594>
 800e0e0:	08013210 	.word	0x08013210
 800e0e4:	080131e8 	.word	0x080131e8
 800e0e8:	3ff00000 	.word	0x3ff00000
 800e0ec:	40240000 	.word	0x40240000
 800e0f0:	401c0000 	.word	0x401c0000
 800e0f4:	40140000 	.word	0x40140000
 800e0f8:	3fe00000 	.word	0x3fe00000
 800e0fc:	9d01      	ldr	r5, [sp, #4]
 800e0fe:	4656      	mov	r6, sl
 800e100:	465f      	mov	r7, fp
 800e102:	4642      	mov	r2, r8
 800e104:	464b      	mov	r3, r9
 800e106:	4630      	mov	r0, r6
 800e108:	4639      	mov	r1, r7
 800e10a:	f7f2 fba7 	bl	800085c <__aeabi_ddiv>
 800e10e:	f7f2 fd2b 	bl	8000b68 <__aeabi_d2iz>
 800e112:	4682      	mov	sl, r0
 800e114:	f7f2 fa0e 	bl	8000534 <__aeabi_i2d>
 800e118:	4642      	mov	r2, r8
 800e11a:	464b      	mov	r3, r9
 800e11c:	f7f2 fa74 	bl	8000608 <__aeabi_dmul>
 800e120:	4602      	mov	r2, r0
 800e122:	460b      	mov	r3, r1
 800e124:	4630      	mov	r0, r6
 800e126:	4639      	mov	r1, r7
 800e128:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e12c:	f7f2 f8b4 	bl	8000298 <__aeabi_dsub>
 800e130:	f805 6b01 	strb.w	r6, [r5], #1
 800e134:	9e01      	ldr	r6, [sp, #4]
 800e136:	9f03      	ldr	r7, [sp, #12]
 800e138:	1bae      	subs	r6, r5, r6
 800e13a:	42b7      	cmp	r7, r6
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	d135      	bne.n	800e1ae <_dtoa_r+0x6e6>
 800e142:	f7f2 f8ab 	bl	800029c <__adddf3>
 800e146:	4642      	mov	r2, r8
 800e148:	464b      	mov	r3, r9
 800e14a:	4606      	mov	r6, r0
 800e14c:	460f      	mov	r7, r1
 800e14e:	f7f2 fceb 	bl	8000b28 <__aeabi_dcmpgt>
 800e152:	b9d0      	cbnz	r0, 800e18a <_dtoa_r+0x6c2>
 800e154:	4642      	mov	r2, r8
 800e156:	464b      	mov	r3, r9
 800e158:	4630      	mov	r0, r6
 800e15a:	4639      	mov	r1, r7
 800e15c:	f7f2 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800e160:	b110      	cbz	r0, 800e168 <_dtoa_r+0x6a0>
 800e162:	f01a 0f01 	tst.w	sl, #1
 800e166:	d110      	bne.n	800e18a <_dtoa_r+0x6c2>
 800e168:	4620      	mov	r0, r4
 800e16a:	ee18 1a10 	vmov	r1, s16
 800e16e:	f000 fe67 	bl	800ee40 <_Bfree>
 800e172:	2300      	movs	r3, #0
 800e174:	9800      	ldr	r0, [sp, #0]
 800e176:	702b      	strb	r3, [r5, #0]
 800e178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e17a:	3001      	adds	r0, #1
 800e17c:	6018      	str	r0, [r3, #0]
 800e17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e180:	2b00      	cmp	r3, #0
 800e182:	f43f acf1 	beq.w	800db68 <_dtoa_r+0xa0>
 800e186:	601d      	str	r5, [r3, #0]
 800e188:	e4ee      	b.n	800db68 <_dtoa_r+0xa0>
 800e18a:	9f00      	ldr	r7, [sp, #0]
 800e18c:	462b      	mov	r3, r5
 800e18e:	461d      	mov	r5, r3
 800e190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e194:	2a39      	cmp	r2, #57	; 0x39
 800e196:	d106      	bne.n	800e1a6 <_dtoa_r+0x6de>
 800e198:	9a01      	ldr	r2, [sp, #4]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d1f7      	bne.n	800e18e <_dtoa_r+0x6c6>
 800e19e:	9901      	ldr	r1, [sp, #4]
 800e1a0:	2230      	movs	r2, #48	; 0x30
 800e1a2:	3701      	adds	r7, #1
 800e1a4:	700a      	strb	r2, [r1, #0]
 800e1a6:	781a      	ldrb	r2, [r3, #0]
 800e1a8:	3201      	adds	r2, #1
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	e790      	b.n	800e0d0 <_dtoa_r+0x608>
 800e1ae:	4ba6      	ldr	r3, [pc, #664]	; (800e448 <_dtoa_r+0x980>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f7f2 fa29 	bl	8000608 <__aeabi_dmul>
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	460f      	mov	r7, r1
 800e1be:	f7f2 fc8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d09d      	beq.n	800e102 <_dtoa_r+0x63a>
 800e1c6:	e7cf      	b.n	800e168 <_dtoa_r+0x6a0>
 800e1c8:	9a08      	ldr	r2, [sp, #32]
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	f000 80d7 	beq.w	800e37e <_dtoa_r+0x8b6>
 800e1d0:	9a06      	ldr	r2, [sp, #24]
 800e1d2:	2a01      	cmp	r2, #1
 800e1d4:	f300 80ba 	bgt.w	800e34c <_dtoa_r+0x884>
 800e1d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1da:	2a00      	cmp	r2, #0
 800e1dc:	f000 80b2 	beq.w	800e344 <_dtoa_r+0x87c>
 800e1e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1e4:	9e07      	ldr	r6, [sp, #28]
 800e1e6:	9d04      	ldr	r5, [sp, #16]
 800e1e8:	9a04      	ldr	r2, [sp, #16]
 800e1ea:	441a      	add	r2, r3
 800e1ec:	9204      	str	r2, [sp, #16]
 800e1ee:	9a05      	ldr	r2, [sp, #20]
 800e1f0:	2101      	movs	r1, #1
 800e1f2:	441a      	add	r2, r3
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	9205      	str	r2, [sp, #20]
 800e1f8:	f000 ff24 	bl	800f044 <__i2b>
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	2d00      	cmp	r5, #0
 800e200:	dd0c      	ble.n	800e21c <_dtoa_r+0x754>
 800e202:	9b05      	ldr	r3, [sp, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	dd09      	ble.n	800e21c <_dtoa_r+0x754>
 800e208:	42ab      	cmp	r3, r5
 800e20a:	9a04      	ldr	r2, [sp, #16]
 800e20c:	bfa8      	it	ge
 800e20e:	462b      	movge	r3, r5
 800e210:	1ad2      	subs	r2, r2, r3
 800e212:	9204      	str	r2, [sp, #16]
 800e214:	9a05      	ldr	r2, [sp, #20]
 800e216:	1aed      	subs	r5, r5, r3
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	9305      	str	r3, [sp, #20]
 800e21c:	9b07      	ldr	r3, [sp, #28]
 800e21e:	b31b      	cbz	r3, 800e268 <_dtoa_r+0x7a0>
 800e220:	9b08      	ldr	r3, [sp, #32]
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 80af 	beq.w	800e386 <_dtoa_r+0x8be>
 800e228:	2e00      	cmp	r6, #0
 800e22a:	dd13      	ble.n	800e254 <_dtoa_r+0x78c>
 800e22c:	4639      	mov	r1, r7
 800e22e:	4632      	mov	r2, r6
 800e230:	4620      	mov	r0, r4
 800e232:	f000 ffc7 	bl	800f1c4 <__pow5mult>
 800e236:	ee18 2a10 	vmov	r2, s16
 800e23a:	4601      	mov	r1, r0
 800e23c:	4607      	mov	r7, r0
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 ff16 	bl	800f070 <__multiply>
 800e244:	ee18 1a10 	vmov	r1, s16
 800e248:	4680      	mov	r8, r0
 800e24a:	4620      	mov	r0, r4
 800e24c:	f000 fdf8 	bl	800ee40 <_Bfree>
 800e250:	ee08 8a10 	vmov	s16, r8
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	1b9a      	subs	r2, r3, r6
 800e258:	d006      	beq.n	800e268 <_dtoa_r+0x7a0>
 800e25a:	ee18 1a10 	vmov	r1, s16
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 ffb0 	bl	800f1c4 <__pow5mult>
 800e264:	ee08 0a10 	vmov	s16, r0
 800e268:	2101      	movs	r1, #1
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 feea 	bl	800f044 <__i2b>
 800e270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e272:	2b00      	cmp	r3, #0
 800e274:	4606      	mov	r6, r0
 800e276:	f340 8088 	ble.w	800e38a <_dtoa_r+0x8c2>
 800e27a:	461a      	mov	r2, r3
 800e27c:	4601      	mov	r1, r0
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 ffa0 	bl	800f1c4 <__pow5mult>
 800e284:	9b06      	ldr	r3, [sp, #24]
 800e286:	2b01      	cmp	r3, #1
 800e288:	4606      	mov	r6, r0
 800e28a:	f340 8081 	ble.w	800e390 <_dtoa_r+0x8c8>
 800e28e:	f04f 0800 	mov.w	r8, #0
 800e292:	6933      	ldr	r3, [r6, #16]
 800e294:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e298:	6918      	ldr	r0, [r3, #16]
 800e29a:	f000 fe83 	bl	800efa4 <__hi0bits>
 800e29e:	f1c0 0020 	rsb	r0, r0, #32
 800e2a2:	9b05      	ldr	r3, [sp, #20]
 800e2a4:	4418      	add	r0, r3
 800e2a6:	f010 001f 	ands.w	r0, r0, #31
 800e2aa:	f000 8092 	beq.w	800e3d2 <_dtoa_r+0x90a>
 800e2ae:	f1c0 0320 	rsb	r3, r0, #32
 800e2b2:	2b04      	cmp	r3, #4
 800e2b4:	f340 808a 	ble.w	800e3cc <_dtoa_r+0x904>
 800e2b8:	f1c0 001c 	rsb	r0, r0, #28
 800e2bc:	9b04      	ldr	r3, [sp, #16]
 800e2be:	4403      	add	r3, r0
 800e2c0:	9304      	str	r3, [sp, #16]
 800e2c2:	9b05      	ldr	r3, [sp, #20]
 800e2c4:	4403      	add	r3, r0
 800e2c6:	4405      	add	r5, r0
 800e2c8:	9305      	str	r3, [sp, #20]
 800e2ca:	9b04      	ldr	r3, [sp, #16]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	dd07      	ble.n	800e2e0 <_dtoa_r+0x818>
 800e2d0:	ee18 1a10 	vmov	r1, s16
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 ffce 	bl	800f278 <__lshift>
 800e2dc:	ee08 0a10 	vmov	s16, r0
 800e2e0:	9b05      	ldr	r3, [sp, #20]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	dd05      	ble.n	800e2f2 <_dtoa_r+0x82a>
 800e2e6:	4631      	mov	r1, r6
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 ffc4 	bl	800f278 <__lshift>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d06e      	beq.n	800e3d6 <_dtoa_r+0x90e>
 800e2f8:	ee18 0a10 	vmov	r0, s16
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	f001 f82b 	bl	800f358 <__mcmp>
 800e302:	2800      	cmp	r0, #0
 800e304:	da67      	bge.n	800e3d6 <_dtoa_r+0x90e>
 800e306:	9b00      	ldr	r3, [sp, #0]
 800e308:	3b01      	subs	r3, #1
 800e30a:	ee18 1a10 	vmov	r1, s16
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	220a      	movs	r2, #10
 800e312:	2300      	movs	r3, #0
 800e314:	4620      	mov	r0, r4
 800e316:	f000 fdb5 	bl	800ee84 <__multadd>
 800e31a:	9b08      	ldr	r3, [sp, #32]
 800e31c:	ee08 0a10 	vmov	s16, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	f000 81b1 	beq.w	800e688 <_dtoa_r+0xbc0>
 800e326:	2300      	movs	r3, #0
 800e328:	4639      	mov	r1, r7
 800e32a:	220a      	movs	r2, #10
 800e32c:	4620      	mov	r0, r4
 800e32e:	f000 fda9 	bl	800ee84 <__multadd>
 800e332:	9b02      	ldr	r3, [sp, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	4607      	mov	r7, r0
 800e338:	f300 808e 	bgt.w	800e458 <_dtoa_r+0x990>
 800e33c:	9b06      	ldr	r3, [sp, #24]
 800e33e:	2b02      	cmp	r3, #2
 800e340:	dc51      	bgt.n	800e3e6 <_dtoa_r+0x91e>
 800e342:	e089      	b.n	800e458 <_dtoa_r+0x990>
 800e344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e34a:	e74b      	b.n	800e1e4 <_dtoa_r+0x71c>
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	1e5e      	subs	r6, r3, #1
 800e350:	9b07      	ldr	r3, [sp, #28]
 800e352:	42b3      	cmp	r3, r6
 800e354:	bfbf      	itttt	lt
 800e356:	9b07      	ldrlt	r3, [sp, #28]
 800e358:	9607      	strlt	r6, [sp, #28]
 800e35a:	1af2      	sublt	r2, r6, r3
 800e35c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e35e:	bfb6      	itet	lt
 800e360:	189b      	addlt	r3, r3, r2
 800e362:	1b9e      	subge	r6, r3, r6
 800e364:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e366:	9b03      	ldr	r3, [sp, #12]
 800e368:	bfb8      	it	lt
 800e36a:	2600      	movlt	r6, #0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	bfb7      	itett	lt
 800e370:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e374:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e378:	1a9d      	sublt	r5, r3, r2
 800e37a:	2300      	movlt	r3, #0
 800e37c:	e734      	b.n	800e1e8 <_dtoa_r+0x720>
 800e37e:	9e07      	ldr	r6, [sp, #28]
 800e380:	9d04      	ldr	r5, [sp, #16]
 800e382:	9f08      	ldr	r7, [sp, #32]
 800e384:	e73b      	b.n	800e1fe <_dtoa_r+0x736>
 800e386:	9a07      	ldr	r2, [sp, #28]
 800e388:	e767      	b.n	800e25a <_dtoa_r+0x792>
 800e38a:	9b06      	ldr	r3, [sp, #24]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	dc18      	bgt.n	800e3c2 <_dtoa_r+0x8fa>
 800e390:	f1ba 0f00 	cmp.w	sl, #0
 800e394:	d115      	bne.n	800e3c2 <_dtoa_r+0x8fa>
 800e396:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e39a:	b993      	cbnz	r3, 800e3c2 <_dtoa_r+0x8fa>
 800e39c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3a0:	0d1b      	lsrs	r3, r3, #20
 800e3a2:	051b      	lsls	r3, r3, #20
 800e3a4:	b183      	cbz	r3, 800e3c8 <_dtoa_r+0x900>
 800e3a6:	9b04      	ldr	r3, [sp, #16]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	9304      	str	r3, [sp, #16]
 800e3ac:	9b05      	ldr	r3, [sp, #20]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	9305      	str	r3, [sp, #20]
 800e3b2:	f04f 0801 	mov.w	r8, #1
 800e3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f47f af6a 	bne.w	800e292 <_dtoa_r+0x7ca>
 800e3be:	2001      	movs	r0, #1
 800e3c0:	e76f      	b.n	800e2a2 <_dtoa_r+0x7da>
 800e3c2:	f04f 0800 	mov.w	r8, #0
 800e3c6:	e7f6      	b.n	800e3b6 <_dtoa_r+0x8ee>
 800e3c8:	4698      	mov	r8, r3
 800e3ca:	e7f4      	b.n	800e3b6 <_dtoa_r+0x8ee>
 800e3cc:	f43f af7d 	beq.w	800e2ca <_dtoa_r+0x802>
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	301c      	adds	r0, #28
 800e3d4:	e772      	b.n	800e2bc <_dtoa_r+0x7f4>
 800e3d6:	9b03      	ldr	r3, [sp, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	dc37      	bgt.n	800e44c <_dtoa_r+0x984>
 800e3dc:	9b06      	ldr	r3, [sp, #24]
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	dd34      	ble.n	800e44c <_dtoa_r+0x984>
 800e3e2:	9b03      	ldr	r3, [sp, #12]
 800e3e4:	9302      	str	r3, [sp, #8]
 800e3e6:	9b02      	ldr	r3, [sp, #8]
 800e3e8:	b96b      	cbnz	r3, 800e406 <_dtoa_r+0x93e>
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	2205      	movs	r2, #5
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 fd48 	bl	800ee84 <__multadd>
 800e3f4:	4601      	mov	r1, r0
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	ee18 0a10 	vmov	r0, s16
 800e3fc:	f000 ffac 	bl	800f358 <__mcmp>
 800e400:	2800      	cmp	r0, #0
 800e402:	f73f adbb 	bgt.w	800df7c <_dtoa_r+0x4b4>
 800e406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e408:	9d01      	ldr	r5, [sp, #4]
 800e40a:	43db      	mvns	r3, r3
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	f04f 0800 	mov.w	r8, #0
 800e412:	4631      	mov	r1, r6
 800e414:	4620      	mov	r0, r4
 800e416:	f000 fd13 	bl	800ee40 <_Bfree>
 800e41a:	2f00      	cmp	r7, #0
 800e41c:	f43f aea4 	beq.w	800e168 <_dtoa_r+0x6a0>
 800e420:	f1b8 0f00 	cmp.w	r8, #0
 800e424:	d005      	beq.n	800e432 <_dtoa_r+0x96a>
 800e426:	45b8      	cmp	r8, r7
 800e428:	d003      	beq.n	800e432 <_dtoa_r+0x96a>
 800e42a:	4641      	mov	r1, r8
 800e42c:	4620      	mov	r0, r4
 800e42e:	f000 fd07 	bl	800ee40 <_Bfree>
 800e432:	4639      	mov	r1, r7
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fd03 	bl	800ee40 <_Bfree>
 800e43a:	e695      	b.n	800e168 <_dtoa_r+0x6a0>
 800e43c:	2600      	movs	r6, #0
 800e43e:	4637      	mov	r7, r6
 800e440:	e7e1      	b.n	800e406 <_dtoa_r+0x93e>
 800e442:	9700      	str	r7, [sp, #0]
 800e444:	4637      	mov	r7, r6
 800e446:	e599      	b.n	800df7c <_dtoa_r+0x4b4>
 800e448:	40240000 	.word	0x40240000
 800e44c:	9b08      	ldr	r3, [sp, #32]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 80ca 	beq.w	800e5e8 <_dtoa_r+0xb20>
 800e454:	9b03      	ldr	r3, [sp, #12]
 800e456:	9302      	str	r3, [sp, #8]
 800e458:	2d00      	cmp	r5, #0
 800e45a:	dd05      	ble.n	800e468 <_dtoa_r+0x9a0>
 800e45c:	4639      	mov	r1, r7
 800e45e:	462a      	mov	r2, r5
 800e460:	4620      	mov	r0, r4
 800e462:	f000 ff09 	bl	800f278 <__lshift>
 800e466:	4607      	mov	r7, r0
 800e468:	f1b8 0f00 	cmp.w	r8, #0
 800e46c:	d05b      	beq.n	800e526 <_dtoa_r+0xa5e>
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	4620      	mov	r0, r4
 800e472:	f000 fca5 	bl	800edc0 <_Balloc>
 800e476:	4605      	mov	r5, r0
 800e478:	b928      	cbnz	r0, 800e486 <_dtoa_r+0x9be>
 800e47a:	4b87      	ldr	r3, [pc, #540]	; (800e698 <_dtoa_r+0xbd0>)
 800e47c:	4602      	mov	r2, r0
 800e47e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e482:	f7ff bb3b 	b.w	800dafc <_dtoa_r+0x34>
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	3202      	adds	r2, #2
 800e48a:	0092      	lsls	r2, r2, #2
 800e48c:	f107 010c 	add.w	r1, r7, #12
 800e490:	300c      	adds	r0, #12
 800e492:	f7fd fd2b 	bl	800beec <memcpy>
 800e496:	2201      	movs	r2, #1
 800e498:	4629      	mov	r1, r5
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 feec 	bl	800f278 <__lshift>
 800e4a0:	9b01      	ldr	r3, [sp, #4]
 800e4a2:	f103 0901 	add.w	r9, r3, #1
 800e4a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	9305      	str	r3, [sp, #20]
 800e4ae:	f00a 0301 	and.w	r3, sl, #1
 800e4b2:	46b8      	mov	r8, r7
 800e4b4:	9304      	str	r3, [sp, #16]
 800e4b6:	4607      	mov	r7, r0
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	ee18 0a10 	vmov	r0, s16
 800e4be:	f7ff fa77 	bl	800d9b0 <quorem>
 800e4c2:	4641      	mov	r1, r8
 800e4c4:	9002      	str	r0, [sp, #8]
 800e4c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e4ca:	ee18 0a10 	vmov	r0, s16
 800e4ce:	f000 ff43 	bl	800f358 <__mcmp>
 800e4d2:	463a      	mov	r2, r7
 800e4d4:	9003      	str	r0, [sp, #12]
 800e4d6:	4631      	mov	r1, r6
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 ff59 	bl	800f390 <__mdiff>
 800e4de:	68c2      	ldr	r2, [r0, #12]
 800e4e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	bb02      	cbnz	r2, 800e52a <_dtoa_r+0xa62>
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	ee18 0a10 	vmov	r0, s16
 800e4ee:	f000 ff33 	bl	800f358 <__mcmp>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	9207      	str	r2, [sp, #28]
 800e4fa:	f000 fca1 	bl	800ee40 <_Bfree>
 800e4fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e502:	ea43 0102 	orr.w	r1, r3, r2
 800e506:	9b04      	ldr	r3, [sp, #16]
 800e508:	430b      	orrs	r3, r1
 800e50a:	464d      	mov	r5, r9
 800e50c:	d10f      	bne.n	800e52e <_dtoa_r+0xa66>
 800e50e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e512:	d02a      	beq.n	800e56a <_dtoa_r+0xaa2>
 800e514:	9b03      	ldr	r3, [sp, #12]
 800e516:	2b00      	cmp	r3, #0
 800e518:	dd02      	ble.n	800e520 <_dtoa_r+0xa58>
 800e51a:	9b02      	ldr	r3, [sp, #8]
 800e51c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e520:	f88b a000 	strb.w	sl, [fp]
 800e524:	e775      	b.n	800e412 <_dtoa_r+0x94a>
 800e526:	4638      	mov	r0, r7
 800e528:	e7ba      	b.n	800e4a0 <_dtoa_r+0x9d8>
 800e52a:	2201      	movs	r2, #1
 800e52c:	e7e2      	b.n	800e4f4 <_dtoa_r+0xa2c>
 800e52e:	9b03      	ldr	r3, [sp, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	db04      	blt.n	800e53e <_dtoa_r+0xa76>
 800e534:	9906      	ldr	r1, [sp, #24]
 800e536:	430b      	orrs	r3, r1
 800e538:	9904      	ldr	r1, [sp, #16]
 800e53a:	430b      	orrs	r3, r1
 800e53c:	d122      	bne.n	800e584 <_dtoa_r+0xabc>
 800e53e:	2a00      	cmp	r2, #0
 800e540:	ddee      	ble.n	800e520 <_dtoa_r+0xa58>
 800e542:	ee18 1a10 	vmov	r1, s16
 800e546:	2201      	movs	r2, #1
 800e548:	4620      	mov	r0, r4
 800e54a:	f000 fe95 	bl	800f278 <__lshift>
 800e54e:	4631      	mov	r1, r6
 800e550:	ee08 0a10 	vmov	s16, r0
 800e554:	f000 ff00 	bl	800f358 <__mcmp>
 800e558:	2800      	cmp	r0, #0
 800e55a:	dc03      	bgt.n	800e564 <_dtoa_r+0xa9c>
 800e55c:	d1e0      	bne.n	800e520 <_dtoa_r+0xa58>
 800e55e:	f01a 0f01 	tst.w	sl, #1
 800e562:	d0dd      	beq.n	800e520 <_dtoa_r+0xa58>
 800e564:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e568:	d1d7      	bne.n	800e51a <_dtoa_r+0xa52>
 800e56a:	2339      	movs	r3, #57	; 0x39
 800e56c:	f88b 3000 	strb.w	r3, [fp]
 800e570:	462b      	mov	r3, r5
 800e572:	461d      	mov	r5, r3
 800e574:	3b01      	subs	r3, #1
 800e576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e57a:	2a39      	cmp	r2, #57	; 0x39
 800e57c:	d071      	beq.n	800e662 <_dtoa_r+0xb9a>
 800e57e:	3201      	adds	r2, #1
 800e580:	701a      	strb	r2, [r3, #0]
 800e582:	e746      	b.n	800e412 <_dtoa_r+0x94a>
 800e584:	2a00      	cmp	r2, #0
 800e586:	dd07      	ble.n	800e598 <_dtoa_r+0xad0>
 800e588:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e58c:	d0ed      	beq.n	800e56a <_dtoa_r+0xaa2>
 800e58e:	f10a 0301 	add.w	r3, sl, #1
 800e592:	f88b 3000 	strb.w	r3, [fp]
 800e596:	e73c      	b.n	800e412 <_dtoa_r+0x94a>
 800e598:	9b05      	ldr	r3, [sp, #20]
 800e59a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e59e:	4599      	cmp	r9, r3
 800e5a0:	d047      	beq.n	800e632 <_dtoa_r+0xb6a>
 800e5a2:	ee18 1a10 	vmov	r1, s16
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	220a      	movs	r2, #10
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 fc6a 	bl	800ee84 <__multadd>
 800e5b0:	45b8      	cmp	r8, r7
 800e5b2:	ee08 0a10 	vmov	s16, r0
 800e5b6:	f04f 0300 	mov.w	r3, #0
 800e5ba:	f04f 020a 	mov.w	r2, #10
 800e5be:	4641      	mov	r1, r8
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	d106      	bne.n	800e5d2 <_dtoa_r+0xb0a>
 800e5c4:	f000 fc5e 	bl	800ee84 <__multadd>
 800e5c8:	4680      	mov	r8, r0
 800e5ca:	4607      	mov	r7, r0
 800e5cc:	f109 0901 	add.w	r9, r9, #1
 800e5d0:	e772      	b.n	800e4b8 <_dtoa_r+0x9f0>
 800e5d2:	f000 fc57 	bl	800ee84 <__multadd>
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	4680      	mov	r8, r0
 800e5da:	2300      	movs	r3, #0
 800e5dc:	220a      	movs	r2, #10
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f000 fc50 	bl	800ee84 <__multadd>
 800e5e4:	4607      	mov	r7, r0
 800e5e6:	e7f1      	b.n	800e5cc <_dtoa_r+0xb04>
 800e5e8:	9b03      	ldr	r3, [sp, #12]
 800e5ea:	9302      	str	r3, [sp, #8]
 800e5ec:	9d01      	ldr	r5, [sp, #4]
 800e5ee:	ee18 0a10 	vmov	r0, s16
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	f7ff f9dc 	bl	800d9b0 <quorem>
 800e5f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e5fc:	9b01      	ldr	r3, [sp, #4]
 800e5fe:	f805 ab01 	strb.w	sl, [r5], #1
 800e602:	1aea      	subs	r2, r5, r3
 800e604:	9b02      	ldr	r3, [sp, #8]
 800e606:	4293      	cmp	r3, r2
 800e608:	dd09      	ble.n	800e61e <_dtoa_r+0xb56>
 800e60a:	ee18 1a10 	vmov	r1, s16
 800e60e:	2300      	movs	r3, #0
 800e610:	220a      	movs	r2, #10
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fc36 	bl	800ee84 <__multadd>
 800e618:	ee08 0a10 	vmov	s16, r0
 800e61c:	e7e7      	b.n	800e5ee <_dtoa_r+0xb26>
 800e61e:	9b02      	ldr	r3, [sp, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	bfc8      	it	gt
 800e624:	461d      	movgt	r5, r3
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	bfd8      	it	le
 800e62a:	2501      	movle	r5, #1
 800e62c:	441d      	add	r5, r3
 800e62e:	f04f 0800 	mov.w	r8, #0
 800e632:	ee18 1a10 	vmov	r1, s16
 800e636:	2201      	movs	r2, #1
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 fe1d 	bl	800f278 <__lshift>
 800e63e:	4631      	mov	r1, r6
 800e640:	ee08 0a10 	vmov	s16, r0
 800e644:	f000 fe88 	bl	800f358 <__mcmp>
 800e648:	2800      	cmp	r0, #0
 800e64a:	dc91      	bgt.n	800e570 <_dtoa_r+0xaa8>
 800e64c:	d102      	bne.n	800e654 <_dtoa_r+0xb8c>
 800e64e:	f01a 0f01 	tst.w	sl, #1
 800e652:	d18d      	bne.n	800e570 <_dtoa_r+0xaa8>
 800e654:	462b      	mov	r3, r5
 800e656:	461d      	mov	r5, r3
 800e658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e65c:	2a30      	cmp	r2, #48	; 0x30
 800e65e:	d0fa      	beq.n	800e656 <_dtoa_r+0xb8e>
 800e660:	e6d7      	b.n	800e412 <_dtoa_r+0x94a>
 800e662:	9a01      	ldr	r2, [sp, #4]
 800e664:	429a      	cmp	r2, r3
 800e666:	d184      	bne.n	800e572 <_dtoa_r+0xaaa>
 800e668:	9b00      	ldr	r3, [sp, #0]
 800e66a:	3301      	adds	r3, #1
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	2331      	movs	r3, #49	; 0x31
 800e670:	7013      	strb	r3, [r2, #0]
 800e672:	e6ce      	b.n	800e412 <_dtoa_r+0x94a>
 800e674:	4b09      	ldr	r3, [pc, #36]	; (800e69c <_dtoa_r+0xbd4>)
 800e676:	f7ff ba95 	b.w	800dba4 <_dtoa_r+0xdc>
 800e67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f47f aa6e 	bne.w	800db5e <_dtoa_r+0x96>
 800e682:	4b07      	ldr	r3, [pc, #28]	; (800e6a0 <_dtoa_r+0xbd8>)
 800e684:	f7ff ba8e 	b.w	800dba4 <_dtoa_r+0xdc>
 800e688:	9b02      	ldr	r3, [sp, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	dcae      	bgt.n	800e5ec <_dtoa_r+0xb24>
 800e68e:	9b06      	ldr	r3, [sp, #24]
 800e690:	2b02      	cmp	r3, #2
 800e692:	f73f aea8 	bgt.w	800e3e6 <_dtoa_r+0x91e>
 800e696:	e7a9      	b.n	800e5ec <_dtoa_r+0xb24>
 800e698:	08013100 	.word	0x08013100
 800e69c:	08012f00 	.word	0x08012f00
 800e6a0:	08013081 	.word	0x08013081

0800e6a4 <rshift>:
 800e6a4:	6903      	ldr	r3, [r0, #16]
 800e6a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e6b2:	f100 0414 	add.w	r4, r0, #20
 800e6b6:	dd45      	ble.n	800e744 <rshift+0xa0>
 800e6b8:	f011 011f 	ands.w	r1, r1, #31
 800e6bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e6c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e6c4:	d10c      	bne.n	800e6e0 <rshift+0x3c>
 800e6c6:	f100 0710 	add.w	r7, r0, #16
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	42b1      	cmp	r1, r6
 800e6ce:	d334      	bcc.n	800e73a <rshift+0x96>
 800e6d0:	1a9b      	subs	r3, r3, r2
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	1eea      	subs	r2, r5, #3
 800e6d6:	4296      	cmp	r6, r2
 800e6d8:	bf38      	it	cc
 800e6da:	2300      	movcc	r3, #0
 800e6dc:	4423      	add	r3, r4
 800e6de:	e015      	b.n	800e70c <rshift+0x68>
 800e6e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6e4:	f1c1 0820 	rsb	r8, r1, #32
 800e6e8:	40cf      	lsrs	r7, r1
 800e6ea:	f105 0e04 	add.w	lr, r5, #4
 800e6ee:	46a1      	mov	r9, r4
 800e6f0:	4576      	cmp	r6, lr
 800e6f2:	46f4      	mov	ip, lr
 800e6f4:	d815      	bhi.n	800e722 <rshift+0x7e>
 800e6f6:	1a9a      	subs	r2, r3, r2
 800e6f8:	0092      	lsls	r2, r2, #2
 800e6fa:	3a04      	subs	r2, #4
 800e6fc:	3501      	adds	r5, #1
 800e6fe:	42ae      	cmp	r6, r5
 800e700:	bf38      	it	cc
 800e702:	2200      	movcc	r2, #0
 800e704:	18a3      	adds	r3, r4, r2
 800e706:	50a7      	str	r7, [r4, r2]
 800e708:	b107      	cbz	r7, 800e70c <rshift+0x68>
 800e70a:	3304      	adds	r3, #4
 800e70c:	1b1a      	subs	r2, r3, r4
 800e70e:	42a3      	cmp	r3, r4
 800e710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e714:	bf08      	it	eq
 800e716:	2300      	moveq	r3, #0
 800e718:	6102      	str	r2, [r0, #16]
 800e71a:	bf08      	it	eq
 800e71c:	6143      	streq	r3, [r0, #20]
 800e71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e722:	f8dc c000 	ldr.w	ip, [ip]
 800e726:	fa0c fc08 	lsl.w	ip, ip, r8
 800e72a:	ea4c 0707 	orr.w	r7, ip, r7
 800e72e:	f849 7b04 	str.w	r7, [r9], #4
 800e732:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e736:	40cf      	lsrs	r7, r1
 800e738:	e7da      	b.n	800e6f0 <rshift+0x4c>
 800e73a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e73e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e742:	e7c3      	b.n	800e6cc <rshift+0x28>
 800e744:	4623      	mov	r3, r4
 800e746:	e7e1      	b.n	800e70c <rshift+0x68>

0800e748 <__hexdig_fun>:
 800e748:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e74c:	2b09      	cmp	r3, #9
 800e74e:	d802      	bhi.n	800e756 <__hexdig_fun+0xe>
 800e750:	3820      	subs	r0, #32
 800e752:	b2c0      	uxtb	r0, r0
 800e754:	4770      	bx	lr
 800e756:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e75a:	2b05      	cmp	r3, #5
 800e75c:	d801      	bhi.n	800e762 <__hexdig_fun+0x1a>
 800e75e:	3847      	subs	r0, #71	; 0x47
 800e760:	e7f7      	b.n	800e752 <__hexdig_fun+0xa>
 800e762:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e766:	2b05      	cmp	r3, #5
 800e768:	d801      	bhi.n	800e76e <__hexdig_fun+0x26>
 800e76a:	3827      	subs	r0, #39	; 0x27
 800e76c:	e7f1      	b.n	800e752 <__hexdig_fun+0xa>
 800e76e:	2000      	movs	r0, #0
 800e770:	4770      	bx	lr
	...

0800e774 <__gethex>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	ed2d 8b02 	vpush	{d8}
 800e77c:	b089      	sub	sp, #36	; 0x24
 800e77e:	ee08 0a10 	vmov	s16, r0
 800e782:	9304      	str	r3, [sp, #16]
 800e784:	4bb4      	ldr	r3, [pc, #720]	; (800ea58 <__gethex+0x2e4>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	468b      	mov	fp, r1
 800e78e:	4690      	mov	r8, r2
 800e790:	f7f1 fd26 	bl	80001e0 <strlen>
 800e794:	9b01      	ldr	r3, [sp, #4]
 800e796:	f8db 2000 	ldr.w	r2, [fp]
 800e79a:	4403      	add	r3, r0
 800e79c:	4682      	mov	sl, r0
 800e79e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e7a2:	9305      	str	r3, [sp, #20]
 800e7a4:	1c93      	adds	r3, r2, #2
 800e7a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e7aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e7ae:	32fe      	adds	r2, #254	; 0xfe
 800e7b0:	18d1      	adds	r1, r2, r3
 800e7b2:	461f      	mov	r7, r3
 800e7b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7b8:	9100      	str	r1, [sp, #0]
 800e7ba:	2830      	cmp	r0, #48	; 0x30
 800e7bc:	d0f8      	beq.n	800e7b0 <__gethex+0x3c>
 800e7be:	f7ff ffc3 	bl	800e748 <__hexdig_fun>
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d13a      	bne.n	800e83e <__gethex+0xca>
 800e7c8:	9901      	ldr	r1, [sp, #4]
 800e7ca:	4652      	mov	r2, sl
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f001 fa23 	bl	800fc18 <strncmp>
 800e7d2:	4605      	mov	r5, r0
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d168      	bne.n	800e8aa <__gethex+0x136>
 800e7d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e7dc:	eb07 060a 	add.w	r6, r7, sl
 800e7e0:	f7ff ffb2 	bl	800e748 <__hexdig_fun>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d062      	beq.n	800e8ae <__gethex+0x13a>
 800e7e8:	4633      	mov	r3, r6
 800e7ea:	7818      	ldrb	r0, [r3, #0]
 800e7ec:	2830      	cmp	r0, #48	; 0x30
 800e7ee:	461f      	mov	r7, r3
 800e7f0:	f103 0301 	add.w	r3, r3, #1
 800e7f4:	d0f9      	beq.n	800e7ea <__gethex+0x76>
 800e7f6:	f7ff ffa7 	bl	800e748 <__hexdig_fun>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	fab0 f480 	clz	r4, r0
 800e800:	0964      	lsrs	r4, r4, #5
 800e802:	4635      	mov	r5, r6
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	463a      	mov	r2, r7
 800e808:	4616      	mov	r6, r2
 800e80a:	3201      	adds	r2, #1
 800e80c:	7830      	ldrb	r0, [r6, #0]
 800e80e:	f7ff ff9b 	bl	800e748 <__hexdig_fun>
 800e812:	2800      	cmp	r0, #0
 800e814:	d1f8      	bne.n	800e808 <__gethex+0x94>
 800e816:	9901      	ldr	r1, [sp, #4]
 800e818:	4652      	mov	r2, sl
 800e81a:	4630      	mov	r0, r6
 800e81c:	f001 f9fc 	bl	800fc18 <strncmp>
 800e820:	b980      	cbnz	r0, 800e844 <__gethex+0xd0>
 800e822:	b94d      	cbnz	r5, 800e838 <__gethex+0xc4>
 800e824:	eb06 050a 	add.w	r5, r6, sl
 800e828:	462a      	mov	r2, r5
 800e82a:	4616      	mov	r6, r2
 800e82c:	3201      	adds	r2, #1
 800e82e:	7830      	ldrb	r0, [r6, #0]
 800e830:	f7ff ff8a 	bl	800e748 <__hexdig_fun>
 800e834:	2800      	cmp	r0, #0
 800e836:	d1f8      	bne.n	800e82a <__gethex+0xb6>
 800e838:	1bad      	subs	r5, r5, r6
 800e83a:	00ad      	lsls	r5, r5, #2
 800e83c:	e004      	b.n	800e848 <__gethex+0xd4>
 800e83e:	2400      	movs	r4, #0
 800e840:	4625      	mov	r5, r4
 800e842:	e7e0      	b.n	800e806 <__gethex+0x92>
 800e844:	2d00      	cmp	r5, #0
 800e846:	d1f7      	bne.n	800e838 <__gethex+0xc4>
 800e848:	7833      	ldrb	r3, [r6, #0]
 800e84a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e84e:	2b50      	cmp	r3, #80	; 0x50
 800e850:	d13b      	bne.n	800e8ca <__gethex+0x156>
 800e852:	7873      	ldrb	r3, [r6, #1]
 800e854:	2b2b      	cmp	r3, #43	; 0x2b
 800e856:	d02c      	beq.n	800e8b2 <__gethex+0x13e>
 800e858:	2b2d      	cmp	r3, #45	; 0x2d
 800e85a:	d02e      	beq.n	800e8ba <__gethex+0x146>
 800e85c:	1c71      	adds	r1, r6, #1
 800e85e:	f04f 0900 	mov.w	r9, #0
 800e862:	7808      	ldrb	r0, [r1, #0]
 800e864:	f7ff ff70 	bl	800e748 <__hexdig_fun>
 800e868:	1e43      	subs	r3, r0, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b18      	cmp	r3, #24
 800e86e:	d82c      	bhi.n	800e8ca <__gethex+0x156>
 800e870:	f1a0 0210 	sub.w	r2, r0, #16
 800e874:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e878:	f7ff ff66 	bl	800e748 <__hexdig_fun>
 800e87c:	1e43      	subs	r3, r0, #1
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b18      	cmp	r3, #24
 800e882:	d91d      	bls.n	800e8c0 <__gethex+0x14c>
 800e884:	f1b9 0f00 	cmp.w	r9, #0
 800e888:	d000      	beq.n	800e88c <__gethex+0x118>
 800e88a:	4252      	negs	r2, r2
 800e88c:	4415      	add	r5, r2
 800e88e:	f8cb 1000 	str.w	r1, [fp]
 800e892:	b1e4      	cbz	r4, 800e8ce <__gethex+0x15a>
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	bf14      	ite	ne
 800e89a:	2700      	movne	r7, #0
 800e89c:	2706      	moveq	r7, #6
 800e89e:	4638      	mov	r0, r7
 800e8a0:	b009      	add	sp, #36	; 0x24
 800e8a2:	ecbd 8b02 	vpop	{d8}
 800e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8aa:	463e      	mov	r6, r7
 800e8ac:	4625      	mov	r5, r4
 800e8ae:	2401      	movs	r4, #1
 800e8b0:	e7ca      	b.n	800e848 <__gethex+0xd4>
 800e8b2:	f04f 0900 	mov.w	r9, #0
 800e8b6:	1cb1      	adds	r1, r6, #2
 800e8b8:	e7d3      	b.n	800e862 <__gethex+0xee>
 800e8ba:	f04f 0901 	mov.w	r9, #1
 800e8be:	e7fa      	b.n	800e8b6 <__gethex+0x142>
 800e8c0:	230a      	movs	r3, #10
 800e8c2:	fb03 0202 	mla	r2, r3, r2, r0
 800e8c6:	3a10      	subs	r2, #16
 800e8c8:	e7d4      	b.n	800e874 <__gethex+0x100>
 800e8ca:	4631      	mov	r1, r6
 800e8cc:	e7df      	b.n	800e88e <__gethex+0x11a>
 800e8ce:	1bf3      	subs	r3, r6, r7
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	2b07      	cmp	r3, #7
 800e8d6:	dc0b      	bgt.n	800e8f0 <__gethex+0x17c>
 800e8d8:	ee18 0a10 	vmov	r0, s16
 800e8dc:	f000 fa70 	bl	800edc0 <_Balloc>
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	b940      	cbnz	r0, 800e8f6 <__gethex+0x182>
 800e8e4:	4b5d      	ldr	r3, [pc, #372]	; (800ea5c <__gethex+0x2e8>)
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	21de      	movs	r1, #222	; 0xde
 800e8ea:	485d      	ldr	r0, [pc, #372]	; (800ea60 <__gethex+0x2ec>)
 800e8ec:	f001 f9b6 	bl	800fc5c <__assert_func>
 800e8f0:	3101      	adds	r1, #1
 800e8f2:	105b      	asrs	r3, r3, #1
 800e8f4:	e7ee      	b.n	800e8d4 <__gethex+0x160>
 800e8f6:	f100 0914 	add.w	r9, r0, #20
 800e8fa:	f04f 0b00 	mov.w	fp, #0
 800e8fe:	f1ca 0301 	rsb	r3, sl, #1
 800e902:	f8cd 9008 	str.w	r9, [sp, #8]
 800e906:	f8cd b000 	str.w	fp, [sp]
 800e90a:	9306      	str	r3, [sp, #24]
 800e90c:	42b7      	cmp	r7, r6
 800e90e:	d340      	bcc.n	800e992 <__gethex+0x21e>
 800e910:	9802      	ldr	r0, [sp, #8]
 800e912:	9b00      	ldr	r3, [sp, #0]
 800e914:	f840 3b04 	str.w	r3, [r0], #4
 800e918:	eba0 0009 	sub.w	r0, r0, r9
 800e91c:	1080      	asrs	r0, r0, #2
 800e91e:	0146      	lsls	r6, r0, #5
 800e920:	6120      	str	r0, [r4, #16]
 800e922:	4618      	mov	r0, r3
 800e924:	f000 fb3e 	bl	800efa4 <__hi0bits>
 800e928:	1a30      	subs	r0, r6, r0
 800e92a:	f8d8 6000 	ldr.w	r6, [r8]
 800e92e:	42b0      	cmp	r0, r6
 800e930:	dd63      	ble.n	800e9fa <__gethex+0x286>
 800e932:	1b87      	subs	r7, r0, r6
 800e934:	4639      	mov	r1, r7
 800e936:	4620      	mov	r0, r4
 800e938:	f000 fee2 	bl	800f700 <__any_on>
 800e93c:	4682      	mov	sl, r0
 800e93e:	b1a8      	cbz	r0, 800e96c <__gethex+0x1f8>
 800e940:	1e7b      	subs	r3, r7, #1
 800e942:	1159      	asrs	r1, r3, #5
 800e944:	f003 021f 	and.w	r2, r3, #31
 800e948:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e94c:	f04f 0a01 	mov.w	sl, #1
 800e950:	fa0a f202 	lsl.w	r2, sl, r2
 800e954:	420a      	tst	r2, r1
 800e956:	d009      	beq.n	800e96c <__gethex+0x1f8>
 800e958:	4553      	cmp	r3, sl
 800e95a:	dd05      	ble.n	800e968 <__gethex+0x1f4>
 800e95c:	1eb9      	subs	r1, r7, #2
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 fece 	bl	800f700 <__any_on>
 800e964:	2800      	cmp	r0, #0
 800e966:	d145      	bne.n	800e9f4 <__gethex+0x280>
 800e968:	f04f 0a02 	mov.w	sl, #2
 800e96c:	4639      	mov	r1, r7
 800e96e:	4620      	mov	r0, r4
 800e970:	f7ff fe98 	bl	800e6a4 <rshift>
 800e974:	443d      	add	r5, r7
 800e976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e97a:	42ab      	cmp	r3, r5
 800e97c:	da4c      	bge.n	800ea18 <__gethex+0x2a4>
 800e97e:	ee18 0a10 	vmov	r0, s16
 800e982:	4621      	mov	r1, r4
 800e984:	f000 fa5c 	bl	800ee40 <_Bfree>
 800e988:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e98a:	2300      	movs	r3, #0
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	27a3      	movs	r7, #163	; 0xa3
 800e990:	e785      	b.n	800e89e <__gethex+0x12a>
 800e992:	1e73      	subs	r3, r6, #1
 800e994:	9a05      	ldr	r2, [sp, #20]
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d019      	beq.n	800e9d4 <__gethex+0x260>
 800e9a0:	f1bb 0f20 	cmp.w	fp, #32
 800e9a4:	d107      	bne.n	800e9b6 <__gethex+0x242>
 800e9a6:	9b02      	ldr	r3, [sp, #8]
 800e9a8:	9a00      	ldr	r2, [sp, #0]
 800e9aa:	f843 2b04 	str.w	r2, [r3], #4
 800e9ae:	9302      	str	r3, [sp, #8]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	469b      	mov	fp, r3
 800e9b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e9ba:	f7ff fec5 	bl	800e748 <__hexdig_fun>
 800e9be:	9b00      	ldr	r3, [sp, #0]
 800e9c0:	f000 000f 	and.w	r0, r0, #15
 800e9c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800e9c8:	4303      	orrs	r3, r0
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	f10b 0b04 	add.w	fp, fp, #4
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	e00d      	b.n	800e9f0 <__gethex+0x27c>
 800e9d4:	9b03      	ldr	r3, [sp, #12]
 800e9d6:	9a06      	ldr	r2, [sp, #24]
 800e9d8:	4413      	add	r3, r2
 800e9da:	42bb      	cmp	r3, r7
 800e9dc:	d3e0      	bcc.n	800e9a0 <__gethex+0x22c>
 800e9de:	4618      	mov	r0, r3
 800e9e0:	9901      	ldr	r1, [sp, #4]
 800e9e2:	9307      	str	r3, [sp, #28]
 800e9e4:	4652      	mov	r2, sl
 800e9e6:	f001 f917 	bl	800fc18 <strncmp>
 800e9ea:	9b07      	ldr	r3, [sp, #28]
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d1d7      	bne.n	800e9a0 <__gethex+0x22c>
 800e9f0:	461e      	mov	r6, r3
 800e9f2:	e78b      	b.n	800e90c <__gethex+0x198>
 800e9f4:	f04f 0a03 	mov.w	sl, #3
 800e9f8:	e7b8      	b.n	800e96c <__gethex+0x1f8>
 800e9fa:	da0a      	bge.n	800ea12 <__gethex+0x29e>
 800e9fc:	1a37      	subs	r7, r6, r0
 800e9fe:	4621      	mov	r1, r4
 800ea00:	ee18 0a10 	vmov	r0, s16
 800ea04:	463a      	mov	r2, r7
 800ea06:	f000 fc37 	bl	800f278 <__lshift>
 800ea0a:	1bed      	subs	r5, r5, r7
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	f100 0914 	add.w	r9, r0, #20
 800ea12:	f04f 0a00 	mov.w	sl, #0
 800ea16:	e7ae      	b.n	800e976 <__gethex+0x202>
 800ea18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ea1c:	42a8      	cmp	r0, r5
 800ea1e:	dd72      	ble.n	800eb06 <__gethex+0x392>
 800ea20:	1b45      	subs	r5, r0, r5
 800ea22:	42ae      	cmp	r6, r5
 800ea24:	dc36      	bgt.n	800ea94 <__gethex+0x320>
 800ea26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d02a      	beq.n	800ea84 <__gethex+0x310>
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	d02c      	beq.n	800ea8c <__gethex+0x318>
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d11c      	bne.n	800ea70 <__gethex+0x2fc>
 800ea36:	42ae      	cmp	r6, r5
 800ea38:	d11a      	bne.n	800ea70 <__gethex+0x2fc>
 800ea3a:	2e01      	cmp	r6, #1
 800ea3c:	d112      	bne.n	800ea64 <__gethex+0x2f0>
 800ea3e:	9a04      	ldr	r2, [sp, #16]
 800ea40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea44:	6013      	str	r3, [r2, #0]
 800ea46:	2301      	movs	r3, #1
 800ea48:	6123      	str	r3, [r4, #16]
 800ea4a:	f8c9 3000 	str.w	r3, [r9]
 800ea4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea50:	2762      	movs	r7, #98	; 0x62
 800ea52:	601c      	str	r4, [r3, #0]
 800ea54:	e723      	b.n	800e89e <__gethex+0x12a>
 800ea56:	bf00      	nop
 800ea58:	08013178 	.word	0x08013178
 800ea5c:	08013100 	.word	0x08013100
 800ea60:	08013111 	.word	0x08013111
 800ea64:	1e71      	subs	r1, r6, #1
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 fe4a 	bl	800f700 <__any_on>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d1e6      	bne.n	800ea3e <__gethex+0x2ca>
 800ea70:	ee18 0a10 	vmov	r0, s16
 800ea74:	4621      	mov	r1, r4
 800ea76:	f000 f9e3 	bl	800ee40 <_Bfree>
 800ea7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	2750      	movs	r7, #80	; 0x50
 800ea82:	e70c      	b.n	800e89e <__gethex+0x12a>
 800ea84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1f2      	bne.n	800ea70 <__gethex+0x2fc>
 800ea8a:	e7d8      	b.n	800ea3e <__gethex+0x2ca>
 800ea8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1d5      	bne.n	800ea3e <__gethex+0x2ca>
 800ea92:	e7ed      	b.n	800ea70 <__gethex+0x2fc>
 800ea94:	1e6f      	subs	r7, r5, #1
 800ea96:	f1ba 0f00 	cmp.w	sl, #0
 800ea9a:	d131      	bne.n	800eb00 <__gethex+0x38c>
 800ea9c:	b127      	cbz	r7, 800eaa8 <__gethex+0x334>
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f000 fe2d 	bl	800f700 <__any_on>
 800eaa6:	4682      	mov	sl, r0
 800eaa8:	117b      	asrs	r3, r7, #5
 800eaaa:	2101      	movs	r1, #1
 800eaac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eab0:	f007 071f 	and.w	r7, r7, #31
 800eab4:	fa01 f707 	lsl.w	r7, r1, r7
 800eab8:	421f      	tst	r7, r3
 800eaba:	4629      	mov	r1, r5
 800eabc:	4620      	mov	r0, r4
 800eabe:	bf18      	it	ne
 800eac0:	f04a 0a02 	orrne.w	sl, sl, #2
 800eac4:	1b76      	subs	r6, r6, r5
 800eac6:	f7ff fded 	bl	800e6a4 <rshift>
 800eaca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eace:	2702      	movs	r7, #2
 800ead0:	f1ba 0f00 	cmp.w	sl, #0
 800ead4:	d048      	beq.n	800eb68 <__gethex+0x3f4>
 800ead6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d015      	beq.n	800eb0a <__gethex+0x396>
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d017      	beq.n	800eb12 <__gethex+0x39e>
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d109      	bne.n	800eafa <__gethex+0x386>
 800eae6:	f01a 0f02 	tst.w	sl, #2
 800eaea:	d006      	beq.n	800eafa <__gethex+0x386>
 800eaec:	f8d9 0000 	ldr.w	r0, [r9]
 800eaf0:	ea4a 0a00 	orr.w	sl, sl, r0
 800eaf4:	f01a 0f01 	tst.w	sl, #1
 800eaf8:	d10e      	bne.n	800eb18 <__gethex+0x3a4>
 800eafa:	f047 0710 	orr.w	r7, r7, #16
 800eafe:	e033      	b.n	800eb68 <__gethex+0x3f4>
 800eb00:	f04f 0a01 	mov.w	sl, #1
 800eb04:	e7d0      	b.n	800eaa8 <__gethex+0x334>
 800eb06:	2701      	movs	r7, #1
 800eb08:	e7e2      	b.n	800ead0 <__gethex+0x35c>
 800eb0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb0c:	f1c3 0301 	rsb	r3, r3, #1
 800eb10:	9315      	str	r3, [sp, #84]	; 0x54
 800eb12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0f0      	beq.n	800eafa <__gethex+0x386>
 800eb18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb1c:	f104 0314 	add.w	r3, r4, #20
 800eb20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eb28:	f04f 0c00 	mov.w	ip, #0
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb32:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb36:	d01c      	beq.n	800eb72 <__gethex+0x3fe>
 800eb38:	3201      	adds	r2, #1
 800eb3a:	6002      	str	r2, [r0, #0]
 800eb3c:	2f02      	cmp	r7, #2
 800eb3e:	f104 0314 	add.w	r3, r4, #20
 800eb42:	d13f      	bne.n	800ebc4 <__gethex+0x450>
 800eb44:	f8d8 2000 	ldr.w	r2, [r8]
 800eb48:	3a01      	subs	r2, #1
 800eb4a:	42b2      	cmp	r2, r6
 800eb4c:	d10a      	bne.n	800eb64 <__gethex+0x3f0>
 800eb4e:	1171      	asrs	r1, r6, #5
 800eb50:	2201      	movs	r2, #1
 800eb52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb56:	f006 061f 	and.w	r6, r6, #31
 800eb5a:	fa02 f606 	lsl.w	r6, r2, r6
 800eb5e:	421e      	tst	r6, r3
 800eb60:	bf18      	it	ne
 800eb62:	4617      	movne	r7, r2
 800eb64:	f047 0720 	orr.w	r7, r7, #32
 800eb68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb6a:	601c      	str	r4, [r3, #0]
 800eb6c:	9b04      	ldr	r3, [sp, #16]
 800eb6e:	601d      	str	r5, [r3, #0]
 800eb70:	e695      	b.n	800e89e <__gethex+0x12a>
 800eb72:	4299      	cmp	r1, r3
 800eb74:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb78:	d8d8      	bhi.n	800eb2c <__gethex+0x3b8>
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	459b      	cmp	fp, r3
 800eb7e:	db19      	blt.n	800ebb4 <__gethex+0x440>
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	ee18 0a10 	vmov	r0, s16
 800eb86:	3101      	adds	r1, #1
 800eb88:	f000 f91a 	bl	800edc0 <_Balloc>
 800eb8c:	4681      	mov	r9, r0
 800eb8e:	b918      	cbnz	r0, 800eb98 <__gethex+0x424>
 800eb90:	4b1a      	ldr	r3, [pc, #104]	; (800ebfc <__gethex+0x488>)
 800eb92:	4602      	mov	r2, r0
 800eb94:	2184      	movs	r1, #132	; 0x84
 800eb96:	e6a8      	b.n	800e8ea <__gethex+0x176>
 800eb98:	6922      	ldr	r2, [r4, #16]
 800eb9a:	3202      	adds	r2, #2
 800eb9c:	f104 010c 	add.w	r1, r4, #12
 800eba0:	0092      	lsls	r2, r2, #2
 800eba2:	300c      	adds	r0, #12
 800eba4:	f7fd f9a2 	bl	800beec <memcpy>
 800eba8:	4621      	mov	r1, r4
 800ebaa:	ee18 0a10 	vmov	r0, s16
 800ebae:	f000 f947 	bl	800ee40 <_Bfree>
 800ebb2:	464c      	mov	r4, r9
 800ebb4:	6923      	ldr	r3, [r4, #16]
 800ebb6:	1c5a      	adds	r2, r3, #1
 800ebb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebbc:	6122      	str	r2, [r4, #16]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	615a      	str	r2, [r3, #20]
 800ebc2:	e7bb      	b.n	800eb3c <__gethex+0x3c8>
 800ebc4:	6922      	ldr	r2, [r4, #16]
 800ebc6:	455a      	cmp	r2, fp
 800ebc8:	dd0b      	ble.n	800ebe2 <__gethex+0x46e>
 800ebca:	2101      	movs	r1, #1
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f7ff fd69 	bl	800e6a4 <rshift>
 800ebd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	42ab      	cmp	r3, r5
 800ebda:	f6ff aed0 	blt.w	800e97e <__gethex+0x20a>
 800ebde:	2701      	movs	r7, #1
 800ebe0:	e7c0      	b.n	800eb64 <__gethex+0x3f0>
 800ebe2:	f016 061f 	ands.w	r6, r6, #31
 800ebe6:	d0fa      	beq.n	800ebde <__gethex+0x46a>
 800ebe8:	4453      	add	r3, sl
 800ebea:	f1c6 0620 	rsb	r6, r6, #32
 800ebee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ebf2:	f000 f9d7 	bl	800efa4 <__hi0bits>
 800ebf6:	42b0      	cmp	r0, r6
 800ebf8:	dbe7      	blt.n	800ebca <__gethex+0x456>
 800ebfa:	e7f0      	b.n	800ebde <__gethex+0x46a>
 800ebfc:	08013100 	.word	0x08013100

0800ec00 <L_shift>:
 800ec00:	f1c2 0208 	rsb	r2, r2, #8
 800ec04:	0092      	lsls	r2, r2, #2
 800ec06:	b570      	push	{r4, r5, r6, lr}
 800ec08:	f1c2 0620 	rsb	r6, r2, #32
 800ec0c:	6843      	ldr	r3, [r0, #4]
 800ec0e:	6804      	ldr	r4, [r0, #0]
 800ec10:	fa03 f506 	lsl.w	r5, r3, r6
 800ec14:	432c      	orrs	r4, r5
 800ec16:	40d3      	lsrs	r3, r2
 800ec18:	6004      	str	r4, [r0, #0]
 800ec1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec1e:	4288      	cmp	r0, r1
 800ec20:	d3f4      	bcc.n	800ec0c <L_shift+0xc>
 800ec22:	bd70      	pop	{r4, r5, r6, pc}

0800ec24 <__match>:
 800ec24:	b530      	push	{r4, r5, lr}
 800ec26:	6803      	ldr	r3, [r0, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec2e:	b914      	cbnz	r4, 800ec36 <__match+0x12>
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	2001      	movs	r0, #1
 800ec34:	bd30      	pop	{r4, r5, pc}
 800ec36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ec3e:	2d19      	cmp	r5, #25
 800ec40:	bf98      	it	ls
 800ec42:	3220      	addls	r2, #32
 800ec44:	42a2      	cmp	r2, r4
 800ec46:	d0f0      	beq.n	800ec2a <__match+0x6>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	e7f3      	b.n	800ec34 <__match+0x10>

0800ec4c <__hexnan>:
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	680b      	ldr	r3, [r1, #0]
 800ec52:	115e      	asrs	r6, r3, #5
 800ec54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec58:	f013 031f 	ands.w	r3, r3, #31
 800ec5c:	b087      	sub	sp, #28
 800ec5e:	bf18      	it	ne
 800ec60:	3604      	addne	r6, #4
 800ec62:	2500      	movs	r5, #0
 800ec64:	1f37      	subs	r7, r6, #4
 800ec66:	4690      	mov	r8, r2
 800ec68:	6802      	ldr	r2, [r0, #0]
 800ec6a:	9301      	str	r3, [sp, #4]
 800ec6c:	4682      	mov	sl, r0
 800ec6e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec72:	46b9      	mov	r9, r7
 800ec74:	463c      	mov	r4, r7
 800ec76:	9502      	str	r5, [sp, #8]
 800ec78:	46ab      	mov	fp, r5
 800ec7a:	7851      	ldrb	r1, [r2, #1]
 800ec7c:	1c53      	adds	r3, r2, #1
 800ec7e:	9303      	str	r3, [sp, #12]
 800ec80:	b341      	cbz	r1, 800ecd4 <__hexnan+0x88>
 800ec82:	4608      	mov	r0, r1
 800ec84:	9205      	str	r2, [sp, #20]
 800ec86:	9104      	str	r1, [sp, #16]
 800ec88:	f7ff fd5e 	bl	800e748 <__hexdig_fun>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d14f      	bne.n	800ed30 <__hexnan+0xe4>
 800ec90:	9904      	ldr	r1, [sp, #16]
 800ec92:	9a05      	ldr	r2, [sp, #20]
 800ec94:	2920      	cmp	r1, #32
 800ec96:	d818      	bhi.n	800ecca <__hexnan+0x7e>
 800ec98:	9b02      	ldr	r3, [sp, #8]
 800ec9a:	459b      	cmp	fp, r3
 800ec9c:	dd13      	ble.n	800ecc6 <__hexnan+0x7a>
 800ec9e:	454c      	cmp	r4, r9
 800eca0:	d206      	bcs.n	800ecb0 <__hexnan+0x64>
 800eca2:	2d07      	cmp	r5, #7
 800eca4:	dc04      	bgt.n	800ecb0 <__hexnan+0x64>
 800eca6:	462a      	mov	r2, r5
 800eca8:	4649      	mov	r1, r9
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f7ff ffa8 	bl	800ec00 <L_shift>
 800ecb0:	4544      	cmp	r4, r8
 800ecb2:	d950      	bls.n	800ed56 <__hexnan+0x10a>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f1a4 0904 	sub.w	r9, r4, #4
 800ecba:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecbe:	f8cd b008 	str.w	fp, [sp, #8]
 800ecc2:	464c      	mov	r4, r9
 800ecc4:	461d      	mov	r5, r3
 800ecc6:	9a03      	ldr	r2, [sp, #12]
 800ecc8:	e7d7      	b.n	800ec7a <__hexnan+0x2e>
 800ecca:	2929      	cmp	r1, #41	; 0x29
 800eccc:	d156      	bne.n	800ed7c <__hexnan+0x130>
 800ecce:	3202      	adds	r2, #2
 800ecd0:	f8ca 2000 	str.w	r2, [sl]
 800ecd4:	f1bb 0f00 	cmp.w	fp, #0
 800ecd8:	d050      	beq.n	800ed7c <__hexnan+0x130>
 800ecda:	454c      	cmp	r4, r9
 800ecdc:	d206      	bcs.n	800ecec <__hexnan+0xa0>
 800ecde:	2d07      	cmp	r5, #7
 800ece0:	dc04      	bgt.n	800ecec <__hexnan+0xa0>
 800ece2:	462a      	mov	r2, r5
 800ece4:	4649      	mov	r1, r9
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7ff ff8a 	bl	800ec00 <L_shift>
 800ecec:	4544      	cmp	r4, r8
 800ecee:	d934      	bls.n	800ed5a <__hexnan+0x10e>
 800ecf0:	f1a8 0204 	sub.w	r2, r8, #4
 800ecf4:	4623      	mov	r3, r4
 800ecf6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecfa:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecfe:	429f      	cmp	r7, r3
 800ed00:	d2f9      	bcs.n	800ecf6 <__hexnan+0xaa>
 800ed02:	1b3b      	subs	r3, r7, r4
 800ed04:	f023 0303 	bic.w	r3, r3, #3
 800ed08:	3304      	adds	r3, #4
 800ed0a:	3401      	adds	r4, #1
 800ed0c:	3e03      	subs	r6, #3
 800ed0e:	42b4      	cmp	r4, r6
 800ed10:	bf88      	it	hi
 800ed12:	2304      	movhi	r3, #4
 800ed14:	4443      	add	r3, r8
 800ed16:	2200      	movs	r2, #0
 800ed18:	f843 2b04 	str.w	r2, [r3], #4
 800ed1c:	429f      	cmp	r7, r3
 800ed1e:	d2fb      	bcs.n	800ed18 <__hexnan+0xcc>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	b91b      	cbnz	r3, 800ed2c <__hexnan+0xe0>
 800ed24:	4547      	cmp	r7, r8
 800ed26:	d127      	bne.n	800ed78 <__hexnan+0x12c>
 800ed28:	2301      	movs	r3, #1
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	2005      	movs	r0, #5
 800ed2e:	e026      	b.n	800ed7e <__hexnan+0x132>
 800ed30:	3501      	adds	r5, #1
 800ed32:	2d08      	cmp	r5, #8
 800ed34:	f10b 0b01 	add.w	fp, fp, #1
 800ed38:	dd06      	ble.n	800ed48 <__hexnan+0xfc>
 800ed3a:	4544      	cmp	r4, r8
 800ed3c:	d9c3      	bls.n	800ecc6 <__hexnan+0x7a>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed44:	2501      	movs	r5, #1
 800ed46:	3c04      	subs	r4, #4
 800ed48:	6822      	ldr	r2, [r4, #0]
 800ed4a:	f000 000f 	and.w	r0, r0, #15
 800ed4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ed52:	6022      	str	r2, [r4, #0]
 800ed54:	e7b7      	b.n	800ecc6 <__hexnan+0x7a>
 800ed56:	2508      	movs	r5, #8
 800ed58:	e7b5      	b.n	800ecc6 <__hexnan+0x7a>
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0df      	beq.n	800ed20 <__hexnan+0xd4>
 800ed60:	f04f 32ff 	mov.w	r2, #4294967295
 800ed64:	f1c3 0320 	rsb	r3, r3, #32
 800ed68:	fa22 f303 	lsr.w	r3, r2, r3
 800ed6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed70:	401a      	ands	r2, r3
 800ed72:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed76:	e7d3      	b.n	800ed20 <__hexnan+0xd4>
 800ed78:	3f04      	subs	r7, #4
 800ed7a:	e7d1      	b.n	800ed20 <__hexnan+0xd4>
 800ed7c:	2004      	movs	r0, #4
 800ed7e:	b007      	add	sp, #28
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed84 <_localeconv_r>:
 800ed84:	4800      	ldr	r0, [pc, #0]	; (800ed88 <_localeconv_r+0x4>)
 800ed86:	4770      	bx	lr
 800ed88:	20000394 	.word	0x20000394

0800ed8c <malloc>:
 800ed8c:	4b02      	ldr	r3, [pc, #8]	; (800ed98 <malloc+0xc>)
 800ed8e:	4601      	mov	r1, r0
 800ed90:	6818      	ldr	r0, [r3, #0]
 800ed92:	f000 bd59 	b.w	800f848 <_malloc_r>
 800ed96:	bf00      	nop
 800ed98:	2000023c 	.word	0x2000023c

0800ed9c <__ascii_mbtowc>:
 800ed9c:	b082      	sub	sp, #8
 800ed9e:	b901      	cbnz	r1, 800eda2 <__ascii_mbtowc+0x6>
 800eda0:	a901      	add	r1, sp, #4
 800eda2:	b142      	cbz	r2, 800edb6 <__ascii_mbtowc+0x1a>
 800eda4:	b14b      	cbz	r3, 800edba <__ascii_mbtowc+0x1e>
 800eda6:	7813      	ldrb	r3, [r2, #0]
 800eda8:	600b      	str	r3, [r1, #0]
 800edaa:	7812      	ldrb	r2, [r2, #0]
 800edac:	1e10      	subs	r0, r2, #0
 800edae:	bf18      	it	ne
 800edb0:	2001      	movne	r0, #1
 800edb2:	b002      	add	sp, #8
 800edb4:	4770      	bx	lr
 800edb6:	4610      	mov	r0, r2
 800edb8:	e7fb      	b.n	800edb2 <__ascii_mbtowc+0x16>
 800edba:	f06f 0001 	mvn.w	r0, #1
 800edbe:	e7f8      	b.n	800edb2 <__ascii_mbtowc+0x16>

0800edc0 <_Balloc>:
 800edc0:	b570      	push	{r4, r5, r6, lr}
 800edc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edc4:	4604      	mov	r4, r0
 800edc6:	460d      	mov	r5, r1
 800edc8:	b976      	cbnz	r6, 800ede8 <_Balloc+0x28>
 800edca:	2010      	movs	r0, #16
 800edcc:	f7ff ffde 	bl	800ed8c <malloc>
 800edd0:	4602      	mov	r2, r0
 800edd2:	6260      	str	r0, [r4, #36]	; 0x24
 800edd4:	b920      	cbnz	r0, 800ede0 <_Balloc+0x20>
 800edd6:	4b18      	ldr	r3, [pc, #96]	; (800ee38 <_Balloc+0x78>)
 800edd8:	4818      	ldr	r0, [pc, #96]	; (800ee3c <_Balloc+0x7c>)
 800edda:	2166      	movs	r1, #102	; 0x66
 800eddc:	f000 ff3e 	bl	800fc5c <__assert_func>
 800ede0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ede4:	6006      	str	r6, [r0, #0]
 800ede6:	60c6      	str	r6, [r0, #12]
 800ede8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edea:	68f3      	ldr	r3, [r6, #12]
 800edec:	b183      	cbz	r3, 800ee10 <_Balloc+0x50>
 800edee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800edf6:	b9b8      	cbnz	r0, 800ee28 <_Balloc+0x68>
 800edf8:	2101      	movs	r1, #1
 800edfa:	fa01 f605 	lsl.w	r6, r1, r5
 800edfe:	1d72      	adds	r2, r6, #5
 800ee00:	0092      	lsls	r2, r2, #2
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 fc9d 	bl	800f742 <_calloc_r>
 800ee08:	b160      	cbz	r0, 800ee24 <_Balloc+0x64>
 800ee0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee0e:	e00e      	b.n	800ee2e <_Balloc+0x6e>
 800ee10:	2221      	movs	r2, #33	; 0x21
 800ee12:	2104      	movs	r1, #4
 800ee14:	4620      	mov	r0, r4
 800ee16:	f000 fc94 	bl	800f742 <_calloc_r>
 800ee1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee1c:	60f0      	str	r0, [r6, #12]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1e4      	bne.n	800edee <_Balloc+0x2e>
 800ee24:	2000      	movs	r0, #0
 800ee26:	bd70      	pop	{r4, r5, r6, pc}
 800ee28:	6802      	ldr	r2, [r0, #0]
 800ee2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee34:	e7f7      	b.n	800ee26 <_Balloc+0x66>
 800ee36:	bf00      	nop
 800ee38:	0801308e 	.word	0x0801308e
 800ee3c:	0801318c 	.word	0x0801318c

0800ee40 <_Bfree>:
 800ee40:	b570      	push	{r4, r5, r6, lr}
 800ee42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee44:	4605      	mov	r5, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	b976      	cbnz	r6, 800ee68 <_Bfree+0x28>
 800ee4a:	2010      	movs	r0, #16
 800ee4c:	f7ff ff9e 	bl	800ed8c <malloc>
 800ee50:	4602      	mov	r2, r0
 800ee52:	6268      	str	r0, [r5, #36]	; 0x24
 800ee54:	b920      	cbnz	r0, 800ee60 <_Bfree+0x20>
 800ee56:	4b09      	ldr	r3, [pc, #36]	; (800ee7c <_Bfree+0x3c>)
 800ee58:	4809      	ldr	r0, [pc, #36]	; (800ee80 <_Bfree+0x40>)
 800ee5a:	218a      	movs	r1, #138	; 0x8a
 800ee5c:	f000 fefe 	bl	800fc5c <__assert_func>
 800ee60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee64:	6006      	str	r6, [r0, #0]
 800ee66:	60c6      	str	r6, [r0, #12]
 800ee68:	b13c      	cbz	r4, 800ee7a <_Bfree+0x3a>
 800ee6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee6c:	6862      	ldr	r2, [r4, #4]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee74:	6021      	str	r1, [r4, #0]
 800ee76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee7a:	bd70      	pop	{r4, r5, r6, pc}
 800ee7c:	0801308e 	.word	0x0801308e
 800ee80:	0801318c 	.word	0x0801318c

0800ee84 <__multadd>:
 800ee84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee88:	690d      	ldr	r5, [r1, #16]
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	461e      	mov	r6, r3
 800ee90:	f101 0c14 	add.w	ip, r1, #20
 800ee94:	2000      	movs	r0, #0
 800ee96:	f8dc 3000 	ldr.w	r3, [ip]
 800ee9a:	b299      	uxth	r1, r3
 800ee9c:	fb02 6101 	mla	r1, r2, r1, r6
 800eea0:	0c1e      	lsrs	r6, r3, #16
 800eea2:	0c0b      	lsrs	r3, r1, #16
 800eea4:	fb02 3306 	mla	r3, r2, r6, r3
 800eea8:	b289      	uxth	r1, r1
 800eeaa:	3001      	adds	r0, #1
 800eeac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eeb0:	4285      	cmp	r5, r0
 800eeb2:	f84c 1b04 	str.w	r1, [ip], #4
 800eeb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eeba:	dcec      	bgt.n	800ee96 <__multadd+0x12>
 800eebc:	b30e      	cbz	r6, 800ef02 <__multadd+0x7e>
 800eebe:	68a3      	ldr	r3, [r4, #8]
 800eec0:	42ab      	cmp	r3, r5
 800eec2:	dc19      	bgt.n	800eef8 <__multadd+0x74>
 800eec4:	6861      	ldr	r1, [r4, #4]
 800eec6:	4638      	mov	r0, r7
 800eec8:	3101      	adds	r1, #1
 800eeca:	f7ff ff79 	bl	800edc0 <_Balloc>
 800eece:	4680      	mov	r8, r0
 800eed0:	b928      	cbnz	r0, 800eede <__multadd+0x5a>
 800eed2:	4602      	mov	r2, r0
 800eed4:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <__multadd+0x84>)
 800eed6:	480d      	ldr	r0, [pc, #52]	; (800ef0c <__multadd+0x88>)
 800eed8:	21b5      	movs	r1, #181	; 0xb5
 800eeda:	f000 febf 	bl	800fc5c <__assert_func>
 800eede:	6922      	ldr	r2, [r4, #16]
 800eee0:	3202      	adds	r2, #2
 800eee2:	f104 010c 	add.w	r1, r4, #12
 800eee6:	0092      	lsls	r2, r2, #2
 800eee8:	300c      	adds	r0, #12
 800eeea:	f7fc ffff 	bl	800beec <memcpy>
 800eeee:	4621      	mov	r1, r4
 800eef0:	4638      	mov	r0, r7
 800eef2:	f7ff ffa5 	bl	800ee40 <_Bfree>
 800eef6:	4644      	mov	r4, r8
 800eef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eefc:	3501      	adds	r5, #1
 800eefe:	615e      	str	r6, [r3, #20]
 800ef00:	6125      	str	r5, [r4, #16]
 800ef02:	4620      	mov	r0, r4
 800ef04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef08:	08013100 	.word	0x08013100
 800ef0c:	0801318c 	.word	0x0801318c

0800ef10 <__s2b>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	460c      	mov	r4, r1
 800ef16:	4615      	mov	r5, r2
 800ef18:	461f      	mov	r7, r3
 800ef1a:	2209      	movs	r2, #9
 800ef1c:	3308      	adds	r3, #8
 800ef1e:	4606      	mov	r6, r0
 800ef20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef24:	2100      	movs	r1, #0
 800ef26:	2201      	movs	r2, #1
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	db09      	blt.n	800ef40 <__s2b+0x30>
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f7ff ff47 	bl	800edc0 <_Balloc>
 800ef32:	b940      	cbnz	r0, 800ef46 <__s2b+0x36>
 800ef34:	4602      	mov	r2, r0
 800ef36:	4b19      	ldr	r3, [pc, #100]	; (800ef9c <__s2b+0x8c>)
 800ef38:	4819      	ldr	r0, [pc, #100]	; (800efa0 <__s2b+0x90>)
 800ef3a:	21ce      	movs	r1, #206	; 0xce
 800ef3c:	f000 fe8e 	bl	800fc5c <__assert_func>
 800ef40:	0052      	lsls	r2, r2, #1
 800ef42:	3101      	adds	r1, #1
 800ef44:	e7f0      	b.n	800ef28 <__s2b+0x18>
 800ef46:	9b08      	ldr	r3, [sp, #32]
 800ef48:	6143      	str	r3, [r0, #20]
 800ef4a:	2d09      	cmp	r5, #9
 800ef4c:	f04f 0301 	mov.w	r3, #1
 800ef50:	6103      	str	r3, [r0, #16]
 800ef52:	dd16      	ble.n	800ef82 <__s2b+0x72>
 800ef54:	f104 0909 	add.w	r9, r4, #9
 800ef58:	46c8      	mov	r8, r9
 800ef5a:	442c      	add	r4, r5
 800ef5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ef60:	4601      	mov	r1, r0
 800ef62:	3b30      	subs	r3, #48	; 0x30
 800ef64:	220a      	movs	r2, #10
 800ef66:	4630      	mov	r0, r6
 800ef68:	f7ff ff8c 	bl	800ee84 <__multadd>
 800ef6c:	45a0      	cmp	r8, r4
 800ef6e:	d1f5      	bne.n	800ef5c <__s2b+0x4c>
 800ef70:	f1a5 0408 	sub.w	r4, r5, #8
 800ef74:	444c      	add	r4, r9
 800ef76:	1b2d      	subs	r5, r5, r4
 800ef78:	1963      	adds	r3, r4, r5
 800ef7a:	42bb      	cmp	r3, r7
 800ef7c:	db04      	blt.n	800ef88 <__s2b+0x78>
 800ef7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef82:	340a      	adds	r4, #10
 800ef84:	2509      	movs	r5, #9
 800ef86:	e7f6      	b.n	800ef76 <__s2b+0x66>
 800ef88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef8c:	4601      	mov	r1, r0
 800ef8e:	3b30      	subs	r3, #48	; 0x30
 800ef90:	220a      	movs	r2, #10
 800ef92:	4630      	mov	r0, r6
 800ef94:	f7ff ff76 	bl	800ee84 <__multadd>
 800ef98:	e7ee      	b.n	800ef78 <__s2b+0x68>
 800ef9a:	bf00      	nop
 800ef9c:	08013100 	.word	0x08013100
 800efa0:	0801318c 	.word	0x0801318c

0800efa4 <__hi0bits>:
 800efa4:	0c03      	lsrs	r3, r0, #16
 800efa6:	041b      	lsls	r3, r3, #16
 800efa8:	b9d3      	cbnz	r3, 800efe0 <__hi0bits+0x3c>
 800efaa:	0400      	lsls	r0, r0, #16
 800efac:	2310      	movs	r3, #16
 800efae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800efb2:	bf04      	itt	eq
 800efb4:	0200      	lsleq	r0, r0, #8
 800efb6:	3308      	addeq	r3, #8
 800efb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800efbc:	bf04      	itt	eq
 800efbe:	0100      	lsleq	r0, r0, #4
 800efc0:	3304      	addeq	r3, #4
 800efc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800efc6:	bf04      	itt	eq
 800efc8:	0080      	lsleq	r0, r0, #2
 800efca:	3302      	addeq	r3, #2
 800efcc:	2800      	cmp	r0, #0
 800efce:	db05      	blt.n	800efdc <__hi0bits+0x38>
 800efd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800efd4:	f103 0301 	add.w	r3, r3, #1
 800efd8:	bf08      	it	eq
 800efda:	2320      	moveq	r3, #32
 800efdc:	4618      	mov	r0, r3
 800efde:	4770      	bx	lr
 800efe0:	2300      	movs	r3, #0
 800efe2:	e7e4      	b.n	800efae <__hi0bits+0xa>

0800efe4 <__lo0bits>:
 800efe4:	6803      	ldr	r3, [r0, #0]
 800efe6:	f013 0207 	ands.w	r2, r3, #7
 800efea:	4601      	mov	r1, r0
 800efec:	d00b      	beq.n	800f006 <__lo0bits+0x22>
 800efee:	07da      	lsls	r2, r3, #31
 800eff0:	d423      	bmi.n	800f03a <__lo0bits+0x56>
 800eff2:	0798      	lsls	r0, r3, #30
 800eff4:	bf49      	itett	mi
 800eff6:	085b      	lsrmi	r3, r3, #1
 800eff8:	089b      	lsrpl	r3, r3, #2
 800effa:	2001      	movmi	r0, #1
 800effc:	600b      	strmi	r3, [r1, #0]
 800effe:	bf5c      	itt	pl
 800f000:	600b      	strpl	r3, [r1, #0]
 800f002:	2002      	movpl	r0, #2
 800f004:	4770      	bx	lr
 800f006:	b298      	uxth	r0, r3
 800f008:	b9a8      	cbnz	r0, 800f036 <__lo0bits+0x52>
 800f00a:	0c1b      	lsrs	r3, r3, #16
 800f00c:	2010      	movs	r0, #16
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	b90a      	cbnz	r2, 800f016 <__lo0bits+0x32>
 800f012:	3008      	adds	r0, #8
 800f014:	0a1b      	lsrs	r3, r3, #8
 800f016:	071a      	lsls	r2, r3, #28
 800f018:	bf04      	itt	eq
 800f01a:	091b      	lsreq	r3, r3, #4
 800f01c:	3004      	addeq	r0, #4
 800f01e:	079a      	lsls	r2, r3, #30
 800f020:	bf04      	itt	eq
 800f022:	089b      	lsreq	r3, r3, #2
 800f024:	3002      	addeq	r0, #2
 800f026:	07da      	lsls	r2, r3, #31
 800f028:	d403      	bmi.n	800f032 <__lo0bits+0x4e>
 800f02a:	085b      	lsrs	r3, r3, #1
 800f02c:	f100 0001 	add.w	r0, r0, #1
 800f030:	d005      	beq.n	800f03e <__lo0bits+0x5a>
 800f032:	600b      	str	r3, [r1, #0]
 800f034:	4770      	bx	lr
 800f036:	4610      	mov	r0, r2
 800f038:	e7e9      	b.n	800f00e <__lo0bits+0x2a>
 800f03a:	2000      	movs	r0, #0
 800f03c:	4770      	bx	lr
 800f03e:	2020      	movs	r0, #32
 800f040:	4770      	bx	lr
	...

0800f044 <__i2b>:
 800f044:	b510      	push	{r4, lr}
 800f046:	460c      	mov	r4, r1
 800f048:	2101      	movs	r1, #1
 800f04a:	f7ff feb9 	bl	800edc0 <_Balloc>
 800f04e:	4602      	mov	r2, r0
 800f050:	b928      	cbnz	r0, 800f05e <__i2b+0x1a>
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <__i2b+0x24>)
 800f054:	4805      	ldr	r0, [pc, #20]	; (800f06c <__i2b+0x28>)
 800f056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f05a:	f000 fdff 	bl	800fc5c <__assert_func>
 800f05e:	2301      	movs	r3, #1
 800f060:	6144      	str	r4, [r0, #20]
 800f062:	6103      	str	r3, [r0, #16]
 800f064:	bd10      	pop	{r4, pc}
 800f066:	bf00      	nop
 800f068:	08013100 	.word	0x08013100
 800f06c:	0801318c 	.word	0x0801318c

0800f070 <__multiply>:
 800f070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f074:	4691      	mov	r9, r2
 800f076:	690a      	ldr	r2, [r1, #16]
 800f078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	bfb8      	it	lt
 800f080:	460b      	movlt	r3, r1
 800f082:	460c      	mov	r4, r1
 800f084:	bfbc      	itt	lt
 800f086:	464c      	movlt	r4, r9
 800f088:	4699      	movlt	r9, r3
 800f08a:	6927      	ldr	r7, [r4, #16]
 800f08c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f090:	68a3      	ldr	r3, [r4, #8]
 800f092:	6861      	ldr	r1, [r4, #4]
 800f094:	eb07 060a 	add.w	r6, r7, sl
 800f098:	42b3      	cmp	r3, r6
 800f09a:	b085      	sub	sp, #20
 800f09c:	bfb8      	it	lt
 800f09e:	3101      	addlt	r1, #1
 800f0a0:	f7ff fe8e 	bl	800edc0 <_Balloc>
 800f0a4:	b930      	cbnz	r0, 800f0b4 <__multiply+0x44>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	4b44      	ldr	r3, [pc, #272]	; (800f1bc <__multiply+0x14c>)
 800f0aa:	4845      	ldr	r0, [pc, #276]	; (800f1c0 <__multiply+0x150>)
 800f0ac:	f240 115d 	movw	r1, #349	; 0x15d
 800f0b0:	f000 fdd4 	bl	800fc5c <__assert_func>
 800f0b4:	f100 0514 	add.w	r5, r0, #20
 800f0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0bc:	462b      	mov	r3, r5
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4543      	cmp	r3, r8
 800f0c2:	d321      	bcc.n	800f108 <__multiply+0x98>
 800f0c4:	f104 0314 	add.w	r3, r4, #20
 800f0c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f0cc:	f109 0314 	add.w	r3, r9, #20
 800f0d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f0d4:	9202      	str	r2, [sp, #8]
 800f0d6:	1b3a      	subs	r2, r7, r4
 800f0d8:	3a15      	subs	r2, #21
 800f0da:	f022 0203 	bic.w	r2, r2, #3
 800f0de:	3204      	adds	r2, #4
 800f0e0:	f104 0115 	add.w	r1, r4, #21
 800f0e4:	428f      	cmp	r7, r1
 800f0e6:	bf38      	it	cc
 800f0e8:	2204      	movcc	r2, #4
 800f0ea:	9201      	str	r2, [sp, #4]
 800f0ec:	9a02      	ldr	r2, [sp, #8]
 800f0ee:	9303      	str	r3, [sp, #12]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d80c      	bhi.n	800f10e <__multiply+0x9e>
 800f0f4:	2e00      	cmp	r6, #0
 800f0f6:	dd03      	ble.n	800f100 <__multiply+0x90>
 800f0f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d05a      	beq.n	800f1b6 <__multiply+0x146>
 800f100:	6106      	str	r6, [r0, #16]
 800f102:	b005      	add	sp, #20
 800f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f108:	f843 2b04 	str.w	r2, [r3], #4
 800f10c:	e7d8      	b.n	800f0c0 <__multiply+0x50>
 800f10e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f112:	f1ba 0f00 	cmp.w	sl, #0
 800f116:	d024      	beq.n	800f162 <__multiply+0xf2>
 800f118:	f104 0e14 	add.w	lr, r4, #20
 800f11c:	46a9      	mov	r9, r5
 800f11e:	f04f 0c00 	mov.w	ip, #0
 800f122:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f126:	f8d9 1000 	ldr.w	r1, [r9]
 800f12a:	fa1f fb82 	uxth.w	fp, r2
 800f12e:	b289      	uxth	r1, r1
 800f130:	fb0a 110b 	mla	r1, sl, fp, r1
 800f134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f138:	f8d9 2000 	ldr.w	r2, [r9]
 800f13c:	4461      	add	r1, ip
 800f13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f142:	fb0a c20b 	mla	r2, sl, fp, ip
 800f146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f14a:	b289      	uxth	r1, r1
 800f14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f150:	4577      	cmp	r7, lr
 800f152:	f849 1b04 	str.w	r1, [r9], #4
 800f156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f15a:	d8e2      	bhi.n	800f122 <__multiply+0xb2>
 800f15c:	9a01      	ldr	r2, [sp, #4]
 800f15e:	f845 c002 	str.w	ip, [r5, r2]
 800f162:	9a03      	ldr	r2, [sp, #12]
 800f164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f168:	3304      	adds	r3, #4
 800f16a:	f1b9 0f00 	cmp.w	r9, #0
 800f16e:	d020      	beq.n	800f1b2 <__multiply+0x142>
 800f170:	6829      	ldr	r1, [r5, #0]
 800f172:	f104 0c14 	add.w	ip, r4, #20
 800f176:	46ae      	mov	lr, r5
 800f178:	f04f 0a00 	mov.w	sl, #0
 800f17c:	f8bc b000 	ldrh.w	fp, [ip]
 800f180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f184:	fb09 220b 	mla	r2, r9, fp, r2
 800f188:	4492      	add	sl, r2
 800f18a:	b289      	uxth	r1, r1
 800f18c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f190:	f84e 1b04 	str.w	r1, [lr], #4
 800f194:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f198:	f8be 1000 	ldrh.w	r1, [lr]
 800f19c:	0c12      	lsrs	r2, r2, #16
 800f19e:	fb09 1102 	mla	r1, r9, r2, r1
 800f1a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f1a6:	4567      	cmp	r7, ip
 800f1a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f1ac:	d8e6      	bhi.n	800f17c <__multiply+0x10c>
 800f1ae:	9a01      	ldr	r2, [sp, #4]
 800f1b0:	50a9      	str	r1, [r5, r2]
 800f1b2:	3504      	adds	r5, #4
 800f1b4:	e79a      	b.n	800f0ec <__multiply+0x7c>
 800f1b6:	3e01      	subs	r6, #1
 800f1b8:	e79c      	b.n	800f0f4 <__multiply+0x84>
 800f1ba:	bf00      	nop
 800f1bc:	08013100 	.word	0x08013100
 800f1c0:	0801318c 	.word	0x0801318c

0800f1c4 <__pow5mult>:
 800f1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c8:	4615      	mov	r5, r2
 800f1ca:	f012 0203 	ands.w	r2, r2, #3
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	460f      	mov	r7, r1
 800f1d2:	d007      	beq.n	800f1e4 <__pow5mult+0x20>
 800f1d4:	4c25      	ldr	r4, [pc, #148]	; (800f26c <__pow5mult+0xa8>)
 800f1d6:	3a01      	subs	r2, #1
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1de:	f7ff fe51 	bl	800ee84 <__multadd>
 800f1e2:	4607      	mov	r7, r0
 800f1e4:	10ad      	asrs	r5, r5, #2
 800f1e6:	d03d      	beq.n	800f264 <__pow5mult+0xa0>
 800f1e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1ea:	b97c      	cbnz	r4, 800f20c <__pow5mult+0x48>
 800f1ec:	2010      	movs	r0, #16
 800f1ee:	f7ff fdcd 	bl	800ed8c <malloc>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	6270      	str	r0, [r6, #36]	; 0x24
 800f1f6:	b928      	cbnz	r0, 800f204 <__pow5mult+0x40>
 800f1f8:	4b1d      	ldr	r3, [pc, #116]	; (800f270 <__pow5mult+0xac>)
 800f1fa:	481e      	ldr	r0, [pc, #120]	; (800f274 <__pow5mult+0xb0>)
 800f1fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f200:	f000 fd2c 	bl	800fc5c <__assert_func>
 800f204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f208:	6004      	str	r4, [r0, #0]
 800f20a:	60c4      	str	r4, [r0, #12]
 800f20c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f214:	b94c      	cbnz	r4, 800f22a <__pow5mult+0x66>
 800f216:	f240 2171 	movw	r1, #625	; 0x271
 800f21a:	4630      	mov	r0, r6
 800f21c:	f7ff ff12 	bl	800f044 <__i2b>
 800f220:	2300      	movs	r3, #0
 800f222:	f8c8 0008 	str.w	r0, [r8, #8]
 800f226:	4604      	mov	r4, r0
 800f228:	6003      	str	r3, [r0, #0]
 800f22a:	f04f 0900 	mov.w	r9, #0
 800f22e:	07eb      	lsls	r3, r5, #31
 800f230:	d50a      	bpl.n	800f248 <__pow5mult+0x84>
 800f232:	4639      	mov	r1, r7
 800f234:	4622      	mov	r2, r4
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff ff1a 	bl	800f070 <__multiply>
 800f23c:	4639      	mov	r1, r7
 800f23e:	4680      	mov	r8, r0
 800f240:	4630      	mov	r0, r6
 800f242:	f7ff fdfd 	bl	800ee40 <_Bfree>
 800f246:	4647      	mov	r7, r8
 800f248:	106d      	asrs	r5, r5, #1
 800f24a:	d00b      	beq.n	800f264 <__pow5mult+0xa0>
 800f24c:	6820      	ldr	r0, [r4, #0]
 800f24e:	b938      	cbnz	r0, 800f260 <__pow5mult+0x9c>
 800f250:	4622      	mov	r2, r4
 800f252:	4621      	mov	r1, r4
 800f254:	4630      	mov	r0, r6
 800f256:	f7ff ff0b 	bl	800f070 <__multiply>
 800f25a:	6020      	str	r0, [r4, #0]
 800f25c:	f8c0 9000 	str.w	r9, [r0]
 800f260:	4604      	mov	r4, r0
 800f262:	e7e4      	b.n	800f22e <__pow5mult+0x6a>
 800f264:	4638      	mov	r0, r7
 800f266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f26a:	bf00      	nop
 800f26c:	080132d8 	.word	0x080132d8
 800f270:	0801308e 	.word	0x0801308e
 800f274:	0801318c 	.word	0x0801318c

0800f278 <__lshift>:
 800f278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f27c:	460c      	mov	r4, r1
 800f27e:	6849      	ldr	r1, [r1, #4]
 800f280:	6923      	ldr	r3, [r4, #16]
 800f282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f286:	68a3      	ldr	r3, [r4, #8]
 800f288:	4607      	mov	r7, r0
 800f28a:	4691      	mov	r9, r2
 800f28c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f290:	f108 0601 	add.w	r6, r8, #1
 800f294:	42b3      	cmp	r3, r6
 800f296:	db0b      	blt.n	800f2b0 <__lshift+0x38>
 800f298:	4638      	mov	r0, r7
 800f29a:	f7ff fd91 	bl	800edc0 <_Balloc>
 800f29e:	4605      	mov	r5, r0
 800f2a0:	b948      	cbnz	r0, 800f2b6 <__lshift+0x3e>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	4b2a      	ldr	r3, [pc, #168]	; (800f350 <__lshift+0xd8>)
 800f2a6:	482b      	ldr	r0, [pc, #172]	; (800f354 <__lshift+0xdc>)
 800f2a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f2ac:	f000 fcd6 	bl	800fc5c <__assert_func>
 800f2b0:	3101      	adds	r1, #1
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	e7ee      	b.n	800f294 <__lshift+0x1c>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f100 0114 	add.w	r1, r0, #20
 800f2bc:	f100 0210 	add.w	r2, r0, #16
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	4553      	cmp	r3, sl
 800f2c4:	db37      	blt.n	800f336 <__lshift+0xbe>
 800f2c6:	6920      	ldr	r0, [r4, #16]
 800f2c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2cc:	f104 0314 	add.w	r3, r4, #20
 800f2d0:	f019 091f 	ands.w	r9, r9, #31
 800f2d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f2dc:	d02f      	beq.n	800f33e <__lshift+0xc6>
 800f2de:	f1c9 0e20 	rsb	lr, r9, #32
 800f2e2:	468a      	mov	sl, r1
 800f2e4:	f04f 0c00 	mov.w	ip, #0
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	fa02 f209 	lsl.w	r2, r2, r9
 800f2ee:	ea42 020c 	orr.w	r2, r2, ip
 800f2f2:	f84a 2b04 	str.w	r2, [sl], #4
 800f2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2fa:	4298      	cmp	r0, r3
 800f2fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f300:	d8f2      	bhi.n	800f2e8 <__lshift+0x70>
 800f302:	1b03      	subs	r3, r0, r4
 800f304:	3b15      	subs	r3, #21
 800f306:	f023 0303 	bic.w	r3, r3, #3
 800f30a:	3304      	adds	r3, #4
 800f30c:	f104 0215 	add.w	r2, r4, #21
 800f310:	4290      	cmp	r0, r2
 800f312:	bf38      	it	cc
 800f314:	2304      	movcc	r3, #4
 800f316:	f841 c003 	str.w	ip, [r1, r3]
 800f31a:	f1bc 0f00 	cmp.w	ip, #0
 800f31e:	d001      	beq.n	800f324 <__lshift+0xac>
 800f320:	f108 0602 	add.w	r6, r8, #2
 800f324:	3e01      	subs	r6, #1
 800f326:	4638      	mov	r0, r7
 800f328:	612e      	str	r6, [r5, #16]
 800f32a:	4621      	mov	r1, r4
 800f32c:	f7ff fd88 	bl	800ee40 <_Bfree>
 800f330:	4628      	mov	r0, r5
 800f332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f336:	f842 0f04 	str.w	r0, [r2, #4]!
 800f33a:	3301      	adds	r3, #1
 800f33c:	e7c1      	b.n	800f2c2 <__lshift+0x4a>
 800f33e:	3904      	subs	r1, #4
 800f340:	f853 2b04 	ldr.w	r2, [r3], #4
 800f344:	f841 2f04 	str.w	r2, [r1, #4]!
 800f348:	4298      	cmp	r0, r3
 800f34a:	d8f9      	bhi.n	800f340 <__lshift+0xc8>
 800f34c:	e7ea      	b.n	800f324 <__lshift+0xac>
 800f34e:	bf00      	nop
 800f350:	08013100 	.word	0x08013100
 800f354:	0801318c 	.word	0x0801318c

0800f358 <__mcmp>:
 800f358:	b530      	push	{r4, r5, lr}
 800f35a:	6902      	ldr	r2, [r0, #16]
 800f35c:	690c      	ldr	r4, [r1, #16]
 800f35e:	1b12      	subs	r2, r2, r4
 800f360:	d10e      	bne.n	800f380 <__mcmp+0x28>
 800f362:	f100 0314 	add.w	r3, r0, #20
 800f366:	3114      	adds	r1, #20
 800f368:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f36c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f370:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f374:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f378:	42a5      	cmp	r5, r4
 800f37a:	d003      	beq.n	800f384 <__mcmp+0x2c>
 800f37c:	d305      	bcc.n	800f38a <__mcmp+0x32>
 800f37e:	2201      	movs	r2, #1
 800f380:	4610      	mov	r0, r2
 800f382:	bd30      	pop	{r4, r5, pc}
 800f384:	4283      	cmp	r3, r0
 800f386:	d3f3      	bcc.n	800f370 <__mcmp+0x18>
 800f388:	e7fa      	b.n	800f380 <__mcmp+0x28>
 800f38a:	f04f 32ff 	mov.w	r2, #4294967295
 800f38e:	e7f7      	b.n	800f380 <__mcmp+0x28>

0800f390 <__mdiff>:
 800f390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	460c      	mov	r4, r1
 800f396:	4606      	mov	r6, r0
 800f398:	4611      	mov	r1, r2
 800f39a:	4620      	mov	r0, r4
 800f39c:	4690      	mov	r8, r2
 800f39e:	f7ff ffdb 	bl	800f358 <__mcmp>
 800f3a2:	1e05      	subs	r5, r0, #0
 800f3a4:	d110      	bne.n	800f3c8 <__mdiff+0x38>
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7ff fd09 	bl	800edc0 <_Balloc>
 800f3ae:	b930      	cbnz	r0, 800f3be <__mdiff+0x2e>
 800f3b0:	4b3a      	ldr	r3, [pc, #232]	; (800f49c <__mdiff+0x10c>)
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	f240 2132 	movw	r1, #562	; 0x232
 800f3b8:	4839      	ldr	r0, [pc, #228]	; (800f4a0 <__mdiff+0x110>)
 800f3ba:	f000 fc4f 	bl	800fc5c <__assert_func>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c8:	bfa4      	itt	ge
 800f3ca:	4643      	movge	r3, r8
 800f3cc:	46a0      	movge	r8, r4
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3d4:	bfa6      	itte	ge
 800f3d6:	461c      	movge	r4, r3
 800f3d8:	2500      	movge	r5, #0
 800f3da:	2501      	movlt	r5, #1
 800f3dc:	f7ff fcf0 	bl	800edc0 <_Balloc>
 800f3e0:	b920      	cbnz	r0, 800f3ec <__mdiff+0x5c>
 800f3e2:	4b2e      	ldr	r3, [pc, #184]	; (800f49c <__mdiff+0x10c>)
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f3ea:	e7e5      	b.n	800f3b8 <__mdiff+0x28>
 800f3ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f3f0:	6926      	ldr	r6, [r4, #16]
 800f3f2:	60c5      	str	r5, [r0, #12]
 800f3f4:	f104 0914 	add.w	r9, r4, #20
 800f3f8:	f108 0514 	add.w	r5, r8, #20
 800f3fc:	f100 0e14 	add.w	lr, r0, #20
 800f400:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f404:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f408:	f108 0210 	add.w	r2, r8, #16
 800f40c:	46f2      	mov	sl, lr
 800f40e:	2100      	movs	r1, #0
 800f410:	f859 3b04 	ldr.w	r3, [r9], #4
 800f414:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f418:	fa1f f883 	uxth.w	r8, r3
 800f41c:	fa11 f18b 	uxtah	r1, r1, fp
 800f420:	0c1b      	lsrs	r3, r3, #16
 800f422:	eba1 0808 	sub.w	r8, r1, r8
 800f426:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f42a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f42e:	fa1f f888 	uxth.w	r8, r8
 800f432:	1419      	asrs	r1, r3, #16
 800f434:	454e      	cmp	r6, r9
 800f436:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f43a:	f84a 3b04 	str.w	r3, [sl], #4
 800f43e:	d8e7      	bhi.n	800f410 <__mdiff+0x80>
 800f440:	1b33      	subs	r3, r6, r4
 800f442:	3b15      	subs	r3, #21
 800f444:	f023 0303 	bic.w	r3, r3, #3
 800f448:	3304      	adds	r3, #4
 800f44a:	3415      	adds	r4, #21
 800f44c:	42a6      	cmp	r6, r4
 800f44e:	bf38      	it	cc
 800f450:	2304      	movcc	r3, #4
 800f452:	441d      	add	r5, r3
 800f454:	4473      	add	r3, lr
 800f456:	469e      	mov	lr, r3
 800f458:	462e      	mov	r6, r5
 800f45a:	4566      	cmp	r6, ip
 800f45c:	d30e      	bcc.n	800f47c <__mdiff+0xec>
 800f45e:	f10c 0203 	add.w	r2, ip, #3
 800f462:	1b52      	subs	r2, r2, r5
 800f464:	f022 0203 	bic.w	r2, r2, #3
 800f468:	3d03      	subs	r5, #3
 800f46a:	45ac      	cmp	ip, r5
 800f46c:	bf38      	it	cc
 800f46e:	2200      	movcc	r2, #0
 800f470:	441a      	add	r2, r3
 800f472:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f476:	b17b      	cbz	r3, 800f498 <__mdiff+0x108>
 800f478:	6107      	str	r7, [r0, #16]
 800f47a:	e7a3      	b.n	800f3c4 <__mdiff+0x34>
 800f47c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f480:	fa11 f288 	uxtah	r2, r1, r8
 800f484:	1414      	asrs	r4, r2, #16
 800f486:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f48a:	b292      	uxth	r2, r2
 800f48c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f490:	f84e 2b04 	str.w	r2, [lr], #4
 800f494:	1421      	asrs	r1, r4, #16
 800f496:	e7e0      	b.n	800f45a <__mdiff+0xca>
 800f498:	3f01      	subs	r7, #1
 800f49a:	e7ea      	b.n	800f472 <__mdiff+0xe2>
 800f49c:	08013100 	.word	0x08013100
 800f4a0:	0801318c 	.word	0x0801318c

0800f4a4 <__ulp>:
 800f4a4:	b082      	sub	sp, #8
 800f4a6:	ed8d 0b00 	vstr	d0, [sp]
 800f4aa:	9b01      	ldr	r3, [sp, #4]
 800f4ac:	4912      	ldr	r1, [pc, #72]	; (800f4f8 <__ulp+0x54>)
 800f4ae:	4019      	ands	r1, r3
 800f4b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f4b4:	2900      	cmp	r1, #0
 800f4b6:	dd05      	ble.n	800f4c4 <__ulp+0x20>
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	ec43 2b10 	vmov	d0, r2, r3
 800f4c0:	b002      	add	sp, #8
 800f4c2:	4770      	bx	lr
 800f4c4:	4249      	negs	r1, r1
 800f4c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f4ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f4ce:	f04f 0200 	mov.w	r2, #0
 800f4d2:	f04f 0300 	mov.w	r3, #0
 800f4d6:	da04      	bge.n	800f4e2 <__ulp+0x3e>
 800f4d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f4dc:	fa41 f300 	asr.w	r3, r1, r0
 800f4e0:	e7ec      	b.n	800f4bc <__ulp+0x18>
 800f4e2:	f1a0 0114 	sub.w	r1, r0, #20
 800f4e6:	291e      	cmp	r1, #30
 800f4e8:	bfda      	itte	le
 800f4ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f4ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800f4f2:	2101      	movgt	r1, #1
 800f4f4:	460a      	mov	r2, r1
 800f4f6:	e7e1      	b.n	800f4bc <__ulp+0x18>
 800f4f8:	7ff00000 	.word	0x7ff00000

0800f4fc <__b2d>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	6905      	ldr	r5, [r0, #16]
 800f500:	f100 0714 	add.w	r7, r0, #20
 800f504:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f508:	1f2e      	subs	r6, r5, #4
 800f50a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f50e:	4620      	mov	r0, r4
 800f510:	f7ff fd48 	bl	800efa4 <__hi0bits>
 800f514:	f1c0 0320 	rsb	r3, r0, #32
 800f518:	280a      	cmp	r0, #10
 800f51a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f598 <__b2d+0x9c>
 800f51e:	600b      	str	r3, [r1, #0]
 800f520:	dc14      	bgt.n	800f54c <__b2d+0x50>
 800f522:	f1c0 0e0b 	rsb	lr, r0, #11
 800f526:	fa24 f10e 	lsr.w	r1, r4, lr
 800f52a:	42b7      	cmp	r7, r6
 800f52c:	ea41 030c 	orr.w	r3, r1, ip
 800f530:	bf34      	ite	cc
 800f532:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f536:	2100      	movcs	r1, #0
 800f538:	3015      	adds	r0, #21
 800f53a:	fa04 f000 	lsl.w	r0, r4, r0
 800f53e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f542:	ea40 0201 	orr.w	r2, r0, r1
 800f546:	ec43 2b10 	vmov	d0, r2, r3
 800f54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f54c:	42b7      	cmp	r7, r6
 800f54e:	bf3a      	itte	cc
 800f550:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f554:	f1a5 0608 	subcc.w	r6, r5, #8
 800f558:	2100      	movcs	r1, #0
 800f55a:	380b      	subs	r0, #11
 800f55c:	d017      	beq.n	800f58e <__b2d+0x92>
 800f55e:	f1c0 0c20 	rsb	ip, r0, #32
 800f562:	fa04 f500 	lsl.w	r5, r4, r0
 800f566:	42be      	cmp	r6, r7
 800f568:	fa21 f40c 	lsr.w	r4, r1, ip
 800f56c:	ea45 0504 	orr.w	r5, r5, r4
 800f570:	bf8c      	ite	hi
 800f572:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f576:	2400      	movls	r4, #0
 800f578:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f57c:	fa01 f000 	lsl.w	r0, r1, r0
 800f580:	fa24 f40c 	lsr.w	r4, r4, ip
 800f584:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f588:	ea40 0204 	orr.w	r2, r0, r4
 800f58c:	e7db      	b.n	800f546 <__b2d+0x4a>
 800f58e:	ea44 030c 	orr.w	r3, r4, ip
 800f592:	460a      	mov	r2, r1
 800f594:	e7d7      	b.n	800f546 <__b2d+0x4a>
 800f596:	bf00      	nop
 800f598:	3ff00000 	.word	0x3ff00000

0800f59c <__d2b>:
 800f59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5a0:	4689      	mov	r9, r1
 800f5a2:	2101      	movs	r1, #1
 800f5a4:	ec57 6b10 	vmov	r6, r7, d0
 800f5a8:	4690      	mov	r8, r2
 800f5aa:	f7ff fc09 	bl	800edc0 <_Balloc>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	b930      	cbnz	r0, 800f5c0 <__d2b+0x24>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	4b25      	ldr	r3, [pc, #148]	; (800f64c <__d2b+0xb0>)
 800f5b6:	4826      	ldr	r0, [pc, #152]	; (800f650 <__d2b+0xb4>)
 800f5b8:	f240 310a 	movw	r1, #778	; 0x30a
 800f5bc:	f000 fb4e 	bl	800fc5c <__assert_func>
 800f5c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f5c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f5c8:	bb35      	cbnz	r5, 800f618 <__d2b+0x7c>
 800f5ca:	2e00      	cmp	r6, #0
 800f5cc:	9301      	str	r3, [sp, #4]
 800f5ce:	d028      	beq.n	800f622 <__d2b+0x86>
 800f5d0:	4668      	mov	r0, sp
 800f5d2:	9600      	str	r6, [sp, #0]
 800f5d4:	f7ff fd06 	bl	800efe4 <__lo0bits>
 800f5d8:	9900      	ldr	r1, [sp, #0]
 800f5da:	b300      	cbz	r0, 800f61e <__d2b+0x82>
 800f5dc:	9a01      	ldr	r2, [sp, #4]
 800f5de:	f1c0 0320 	rsb	r3, r0, #32
 800f5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f5e6:	430b      	orrs	r3, r1
 800f5e8:	40c2      	lsrs	r2, r0
 800f5ea:	6163      	str	r3, [r4, #20]
 800f5ec:	9201      	str	r2, [sp, #4]
 800f5ee:	9b01      	ldr	r3, [sp, #4]
 800f5f0:	61a3      	str	r3, [r4, #24]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	bf14      	ite	ne
 800f5f6:	2202      	movne	r2, #2
 800f5f8:	2201      	moveq	r2, #1
 800f5fa:	6122      	str	r2, [r4, #16]
 800f5fc:	b1d5      	cbz	r5, 800f634 <__d2b+0x98>
 800f5fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f602:	4405      	add	r5, r0
 800f604:	f8c9 5000 	str.w	r5, [r9]
 800f608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f60c:	f8c8 0000 	str.w	r0, [r8]
 800f610:	4620      	mov	r0, r4
 800f612:	b003      	add	sp, #12
 800f614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f61c:	e7d5      	b.n	800f5ca <__d2b+0x2e>
 800f61e:	6161      	str	r1, [r4, #20]
 800f620:	e7e5      	b.n	800f5ee <__d2b+0x52>
 800f622:	a801      	add	r0, sp, #4
 800f624:	f7ff fcde 	bl	800efe4 <__lo0bits>
 800f628:	9b01      	ldr	r3, [sp, #4]
 800f62a:	6163      	str	r3, [r4, #20]
 800f62c:	2201      	movs	r2, #1
 800f62e:	6122      	str	r2, [r4, #16]
 800f630:	3020      	adds	r0, #32
 800f632:	e7e3      	b.n	800f5fc <__d2b+0x60>
 800f634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f63c:	f8c9 0000 	str.w	r0, [r9]
 800f640:	6918      	ldr	r0, [r3, #16]
 800f642:	f7ff fcaf 	bl	800efa4 <__hi0bits>
 800f646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f64a:	e7df      	b.n	800f60c <__d2b+0x70>
 800f64c:	08013100 	.word	0x08013100
 800f650:	0801318c 	.word	0x0801318c

0800f654 <__ratio>:
 800f654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f658:	4688      	mov	r8, r1
 800f65a:	4669      	mov	r1, sp
 800f65c:	4681      	mov	r9, r0
 800f65e:	f7ff ff4d 	bl	800f4fc <__b2d>
 800f662:	a901      	add	r1, sp, #4
 800f664:	4640      	mov	r0, r8
 800f666:	ec55 4b10 	vmov	r4, r5, d0
 800f66a:	f7ff ff47 	bl	800f4fc <__b2d>
 800f66e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f672:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f676:	eba3 0c02 	sub.w	ip, r3, r2
 800f67a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f67e:	1a9b      	subs	r3, r3, r2
 800f680:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f684:	ec51 0b10 	vmov	r0, r1, d0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	bfd6      	itet	le
 800f68c:	460a      	movle	r2, r1
 800f68e:	462a      	movgt	r2, r5
 800f690:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f694:	468b      	mov	fp, r1
 800f696:	462f      	mov	r7, r5
 800f698:	bfd4      	ite	le
 800f69a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f69e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	ee10 2a10 	vmov	r2, s0
 800f6a8:	465b      	mov	r3, fp
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	f7f1 f8d6 	bl	800085c <__aeabi_ddiv>
 800f6b0:	ec41 0b10 	vmov	d0, r0, r1
 800f6b4:	b003      	add	sp, #12
 800f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6ba <__copybits>:
 800f6ba:	3901      	subs	r1, #1
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	1149      	asrs	r1, r1, #5
 800f6c0:	6914      	ldr	r4, [r2, #16]
 800f6c2:	3101      	adds	r1, #1
 800f6c4:	f102 0314 	add.w	r3, r2, #20
 800f6c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f6cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f6d0:	1f05      	subs	r5, r0, #4
 800f6d2:	42a3      	cmp	r3, r4
 800f6d4:	d30c      	bcc.n	800f6f0 <__copybits+0x36>
 800f6d6:	1aa3      	subs	r3, r4, r2
 800f6d8:	3b11      	subs	r3, #17
 800f6da:	f023 0303 	bic.w	r3, r3, #3
 800f6de:	3211      	adds	r2, #17
 800f6e0:	42a2      	cmp	r2, r4
 800f6e2:	bf88      	it	hi
 800f6e4:	2300      	movhi	r3, #0
 800f6e6:	4418      	add	r0, r3
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4288      	cmp	r0, r1
 800f6ec:	d305      	bcc.n	800f6fa <__copybits+0x40>
 800f6ee:	bd70      	pop	{r4, r5, r6, pc}
 800f6f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800f6f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800f6f8:	e7eb      	b.n	800f6d2 <__copybits+0x18>
 800f6fa:	f840 3b04 	str.w	r3, [r0], #4
 800f6fe:	e7f4      	b.n	800f6ea <__copybits+0x30>

0800f700 <__any_on>:
 800f700:	f100 0214 	add.w	r2, r0, #20
 800f704:	6900      	ldr	r0, [r0, #16]
 800f706:	114b      	asrs	r3, r1, #5
 800f708:	4298      	cmp	r0, r3
 800f70a:	b510      	push	{r4, lr}
 800f70c:	db11      	blt.n	800f732 <__any_on+0x32>
 800f70e:	dd0a      	ble.n	800f726 <__any_on+0x26>
 800f710:	f011 011f 	ands.w	r1, r1, #31
 800f714:	d007      	beq.n	800f726 <__any_on+0x26>
 800f716:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f71a:	fa24 f001 	lsr.w	r0, r4, r1
 800f71e:	fa00 f101 	lsl.w	r1, r0, r1
 800f722:	428c      	cmp	r4, r1
 800f724:	d10b      	bne.n	800f73e <__any_on+0x3e>
 800f726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d803      	bhi.n	800f736 <__any_on+0x36>
 800f72e:	2000      	movs	r0, #0
 800f730:	bd10      	pop	{r4, pc}
 800f732:	4603      	mov	r3, r0
 800f734:	e7f7      	b.n	800f726 <__any_on+0x26>
 800f736:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f73a:	2900      	cmp	r1, #0
 800f73c:	d0f5      	beq.n	800f72a <__any_on+0x2a>
 800f73e:	2001      	movs	r0, #1
 800f740:	e7f6      	b.n	800f730 <__any_on+0x30>

0800f742 <_calloc_r>:
 800f742:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f744:	fba1 2402 	umull	r2, r4, r1, r2
 800f748:	b94c      	cbnz	r4, 800f75e <_calloc_r+0x1c>
 800f74a:	4611      	mov	r1, r2
 800f74c:	9201      	str	r2, [sp, #4]
 800f74e:	f000 f87b 	bl	800f848 <_malloc_r>
 800f752:	9a01      	ldr	r2, [sp, #4]
 800f754:	4605      	mov	r5, r0
 800f756:	b930      	cbnz	r0, 800f766 <_calloc_r+0x24>
 800f758:	4628      	mov	r0, r5
 800f75a:	b003      	add	sp, #12
 800f75c:	bd30      	pop	{r4, r5, pc}
 800f75e:	220c      	movs	r2, #12
 800f760:	6002      	str	r2, [r0, #0]
 800f762:	2500      	movs	r5, #0
 800f764:	e7f8      	b.n	800f758 <_calloc_r+0x16>
 800f766:	4621      	mov	r1, r4
 800f768:	f7fc fbce 	bl	800bf08 <memset>
 800f76c:	e7f4      	b.n	800f758 <_calloc_r+0x16>
	...

0800f770 <_free_r>:
 800f770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f772:	2900      	cmp	r1, #0
 800f774:	d044      	beq.n	800f800 <_free_r+0x90>
 800f776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f77a:	9001      	str	r0, [sp, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f1a1 0404 	sub.w	r4, r1, #4
 800f782:	bfb8      	it	lt
 800f784:	18e4      	addlt	r4, r4, r3
 800f786:	f000 fab3 	bl	800fcf0 <__malloc_lock>
 800f78a:	4a1e      	ldr	r2, [pc, #120]	; (800f804 <_free_r+0x94>)
 800f78c:	9801      	ldr	r0, [sp, #4]
 800f78e:	6813      	ldr	r3, [r2, #0]
 800f790:	b933      	cbnz	r3, 800f7a0 <_free_r+0x30>
 800f792:	6063      	str	r3, [r4, #4]
 800f794:	6014      	str	r4, [r2, #0]
 800f796:	b003      	add	sp, #12
 800f798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f79c:	f000 baae 	b.w	800fcfc <__malloc_unlock>
 800f7a0:	42a3      	cmp	r3, r4
 800f7a2:	d908      	bls.n	800f7b6 <_free_r+0x46>
 800f7a4:	6825      	ldr	r5, [r4, #0]
 800f7a6:	1961      	adds	r1, r4, r5
 800f7a8:	428b      	cmp	r3, r1
 800f7aa:	bf01      	itttt	eq
 800f7ac:	6819      	ldreq	r1, [r3, #0]
 800f7ae:	685b      	ldreq	r3, [r3, #4]
 800f7b0:	1949      	addeq	r1, r1, r5
 800f7b2:	6021      	streq	r1, [r4, #0]
 800f7b4:	e7ed      	b.n	800f792 <_free_r+0x22>
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	b10b      	cbz	r3, 800f7c0 <_free_r+0x50>
 800f7bc:	42a3      	cmp	r3, r4
 800f7be:	d9fa      	bls.n	800f7b6 <_free_r+0x46>
 800f7c0:	6811      	ldr	r1, [r2, #0]
 800f7c2:	1855      	adds	r5, r2, r1
 800f7c4:	42a5      	cmp	r5, r4
 800f7c6:	d10b      	bne.n	800f7e0 <_free_r+0x70>
 800f7c8:	6824      	ldr	r4, [r4, #0]
 800f7ca:	4421      	add	r1, r4
 800f7cc:	1854      	adds	r4, r2, r1
 800f7ce:	42a3      	cmp	r3, r4
 800f7d0:	6011      	str	r1, [r2, #0]
 800f7d2:	d1e0      	bne.n	800f796 <_free_r+0x26>
 800f7d4:	681c      	ldr	r4, [r3, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	6053      	str	r3, [r2, #4]
 800f7da:	4421      	add	r1, r4
 800f7dc:	6011      	str	r1, [r2, #0]
 800f7de:	e7da      	b.n	800f796 <_free_r+0x26>
 800f7e0:	d902      	bls.n	800f7e8 <_free_r+0x78>
 800f7e2:	230c      	movs	r3, #12
 800f7e4:	6003      	str	r3, [r0, #0]
 800f7e6:	e7d6      	b.n	800f796 <_free_r+0x26>
 800f7e8:	6825      	ldr	r5, [r4, #0]
 800f7ea:	1961      	adds	r1, r4, r5
 800f7ec:	428b      	cmp	r3, r1
 800f7ee:	bf04      	itt	eq
 800f7f0:	6819      	ldreq	r1, [r3, #0]
 800f7f2:	685b      	ldreq	r3, [r3, #4]
 800f7f4:	6063      	str	r3, [r4, #4]
 800f7f6:	bf04      	itt	eq
 800f7f8:	1949      	addeq	r1, r1, r5
 800f7fa:	6021      	streq	r1, [r4, #0]
 800f7fc:	6054      	str	r4, [r2, #4]
 800f7fe:	e7ca      	b.n	800f796 <_free_r+0x26>
 800f800:	b003      	add	sp, #12
 800f802:	bd30      	pop	{r4, r5, pc}
 800f804:	2000200c 	.word	0x2000200c

0800f808 <sbrk_aligned>:
 800f808:	b570      	push	{r4, r5, r6, lr}
 800f80a:	4e0e      	ldr	r6, [pc, #56]	; (800f844 <sbrk_aligned+0x3c>)
 800f80c:	460c      	mov	r4, r1
 800f80e:	6831      	ldr	r1, [r6, #0]
 800f810:	4605      	mov	r5, r0
 800f812:	b911      	cbnz	r1, 800f81a <sbrk_aligned+0x12>
 800f814:	f000 f9f0 	bl	800fbf8 <_sbrk_r>
 800f818:	6030      	str	r0, [r6, #0]
 800f81a:	4621      	mov	r1, r4
 800f81c:	4628      	mov	r0, r5
 800f81e:	f000 f9eb 	bl	800fbf8 <_sbrk_r>
 800f822:	1c43      	adds	r3, r0, #1
 800f824:	d00a      	beq.n	800f83c <sbrk_aligned+0x34>
 800f826:	1cc4      	adds	r4, r0, #3
 800f828:	f024 0403 	bic.w	r4, r4, #3
 800f82c:	42a0      	cmp	r0, r4
 800f82e:	d007      	beq.n	800f840 <sbrk_aligned+0x38>
 800f830:	1a21      	subs	r1, r4, r0
 800f832:	4628      	mov	r0, r5
 800f834:	f000 f9e0 	bl	800fbf8 <_sbrk_r>
 800f838:	3001      	adds	r0, #1
 800f83a:	d101      	bne.n	800f840 <sbrk_aligned+0x38>
 800f83c:	f04f 34ff 	mov.w	r4, #4294967295
 800f840:	4620      	mov	r0, r4
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	20002010 	.word	0x20002010

0800f848 <_malloc_r>:
 800f848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f84c:	1ccd      	adds	r5, r1, #3
 800f84e:	f025 0503 	bic.w	r5, r5, #3
 800f852:	3508      	adds	r5, #8
 800f854:	2d0c      	cmp	r5, #12
 800f856:	bf38      	it	cc
 800f858:	250c      	movcc	r5, #12
 800f85a:	2d00      	cmp	r5, #0
 800f85c:	4607      	mov	r7, r0
 800f85e:	db01      	blt.n	800f864 <_malloc_r+0x1c>
 800f860:	42a9      	cmp	r1, r5
 800f862:	d905      	bls.n	800f870 <_malloc_r+0x28>
 800f864:	230c      	movs	r3, #12
 800f866:	603b      	str	r3, [r7, #0]
 800f868:	2600      	movs	r6, #0
 800f86a:	4630      	mov	r0, r6
 800f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f870:	4e2e      	ldr	r6, [pc, #184]	; (800f92c <_malloc_r+0xe4>)
 800f872:	f000 fa3d 	bl	800fcf0 <__malloc_lock>
 800f876:	6833      	ldr	r3, [r6, #0]
 800f878:	461c      	mov	r4, r3
 800f87a:	bb34      	cbnz	r4, 800f8ca <_malloc_r+0x82>
 800f87c:	4629      	mov	r1, r5
 800f87e:	4638      	mov	r0, r7
 800f880:	f7ff ffc2 	bl	800f808 <sbrk_aligned>
 800f884:	1c43      	adds	r3, r0, #1
 800f886:	4604      	mov	r4, r0
 800f888:	d14d      	bne.n	800f926 <_malloc_r+0xde>
 800f88a:	6834      	ldr	r4, [r6, #0]
 800f88c:	4626      	mov	r6, r4
 800f88e:	2e00      	cmp	r6, #0
 800f890:	d140      	bne.n	800f914 <_malloc_r+0xcc>
 800f892:	6823      	ldr	r3, [r4, #0]
 800f894:	4631      	mov	r1, r6
 800f896:	4638      	mov	r0, r7
 800f898:	eb04 0803 	add.w	r8, r4, r3
 800f89c:	f000 f9ac 	bl	800fbf8 <_sbrk_r>
 800f8a0:	4580      	cmp	r8, r0
 800f8a2:	d13a      	bne.n	800f91a <_malloc_r+0xd2>
 800f8a4:	6821      	ldr	r1, [r4, #0]
 800f8a6:	3503      	adds	r5, #3
 800f8a8:	1a6d      	subs	r5, r5, r1
 800f8aa:	f025 0503 	bic.w	r5, r5, #3
 800f8ae:	3508      	adds	r5, #8
 800f8b0:	2d0c      	cmp	r5, #12
 800f8b2:	bf38      	it	cc
 800f8b4:	250c      	movcc	r5, #12
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	4638      	mov	r0, r7
 800f8ba:	f7ff ffa5 	bl	800f808 <sbrk_aligned>
 800f8be:	3001      	adds	r0, #1
 800f8c0:	d02b      	beq.n	800f91a <_malloc_r+0xd2>
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	442b      	add	r3, r5
 800f8c6:	6023      	str	r3, [r4, #0]
 800f8c8:	e00e      	b.n	800f8e8 <_malloc_r+0xa0>
 800f8ca:	6822      	ldr	r2, [r4, #0]
 800f8cc:	1b52      	subs	r2, r2, r5
 800f8ce:	d41e      	bmi.n	800f90e <_malloc_r+0xc6>
 800f8d0:	2a0b      	cmp	r2, #11
 800f8d2:	d916      	bls.n	800f902 <_malloc_r+0xba>
 800f8d4:	1961      	adds	r1, r4, r5
 800f8d6:	42a3      	cmp	r3, r4
 800f8d8:	6025      	str	r5, [r4, #0]
 800f8da:	bf18      	it	ne
 800f8dc:	6059      	strne	r1, [r3, #4]
 800f8de:	6863      	ldr	r3, [r4, #4]
 800f8e0:	bf08      	it	eq
 800f8e2:	6031      	streq	r1, [r6, #0]
 800f8e4:	5162      	str	r2, [r4, r5]
 800f8e6:	604b      	str	r3, [r1, #4]
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f104 060b 	add.w	r6, r4, #11
 800f8ee:	f000 fa05 	bl	800fcfc <__malloc_unlock>
 800f8f2:	f026 0607 	bic.w	r6, r6, #7
 800f8f6:	1d23      	adds	r3, r4, #4
 800f8f8:	1af2      	subs	r2, r6, r3
 800f8fa:	d0b6      	beq.n	800f86a <_malloc_r+0x22>
 800f8fc:	1b9b      	subs	r3, r3, r6
 800f8fe:	50a3      	str	r3, [r4, r2]
 800f900:	e7b3      	b.n	800f86a <_malloc_r+0x22>
 800f902:	6862      	ldr	r2, [r4, #4]
 800f904:	42a3      	cmp	r3, r4
 800f906:	bf0c      	ite	eq
 800f908:	6032      	streq	r2, [r6, #0]
 800f90a:	605a      	strne	r2, [r3, #4]
 800f90c:	e7ec      	b.n	800f8e8 <_malloc_r+0xa0>
 800f90e:	4623      	mov	r3, r4
 800f910:	6864      	ldr	r4, [r4, #4]
 800f912:	e7b2      	b.n	800f87a <_malloc_r+0x32>
 800f914:	4634      	mov	r4, r6
 800f916:	6876      	ldr	r6, [r6, #4]
 800f918:	e7b9      	b.n	800f88e <_malloc_r+0x46>
 800f91a:	230c      	movs	r3, #12
 800f91c:	603b      	str	r3, [r7, #0]
 800f91e:	4638      	mov	r0, r7
 800f920:	f000 f9ec 	bl	800fcfc <__malloc_unlock>
 800f924:	e7a1      	b.n	800f86a <_malloc_r+0x22>
 800f926:	6025      	str	r5, [r4, #0]
 800f928:	e7de      	b.n	800f8e8 <_malloc_r+0xa0>
 800f92a:	bf00      	nop
 800f92c:	2000200c 	.word	0x2000200c

0800f930 <__ssputs_r>:
 800f930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f934:	688e      	ldr	r6, [r1, #8]
 800f936:	429e      	cmp	r6, r3
 800f938:	4682      	mov	sl, r0
 800f93a:	460c      	mov	r4, r1
 800f93c:	4690      	mov	r8, r2
 800f93e:	461f      	mov	r7, r3
 800f940:	d838      	bhi.n	800f9b4 <__ssputs_r+0x84>
 800f942:	898a      	ldrh	r2, [r1, #12]
 800f944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f948:	d032      	beq.n	800f9b0 <__ssputs_r+0x80>
 800f94a:	6825      	ldr	r5, [r4, #0]
 800f94c:	6909      	ldr	r1, [r1, #16]
 800f94e:	eba5 0901 	sub.w	r9, r5, r1
 800f952:	6965      	ldr	r5, [r4, #20]
 800f954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f95c:	3301      	adds	r3, #1
 800f95e:	444b      	add	r3, r9
 800f960:	106d      	asrs	r5, r5, #1
 800f962:	429d      	cmp	r5, r3
 800f964:	bf38      	it	cc
 800f966:	461d      	movcc	r5, r3
 800f968:	0553      	lsls	r3, r2, #21
 800f96a:	d531      	bpl.n	800f9d0 <__ssputs_r+0xa0>
 800f96c:	4629      	mov	r1, r5
 800f96e:	f7ff ff6b 	bl	800f848 <_malloc_r>
 800f972:	4606      	mov	r6, r0
 800f974:	b950      	cbnz	r0, 800f98c <__ssputs_r+0x5c>
 800f976:	230c      	movs	r3, #12
 800f978:	f8ca 3000 	str.w	r3, [sl]
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f982:	81a3      	strh	r3, [r4, #12]
 800f984:	f04f 30ff 	mov.w	r0, #4294967295
 800f988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98c:	6921      	ldr	r1, [r4, #16]
 800f98e:	464a      	mov	r2, r9
 800f990:	f7fc faac 	bl	800beec <memcpy>
 800f994:	89a3      	ldrh	r3, [r4, #12]
 800f996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	6126      	str	r6, [r4, #16]
 800f9a2:	6165      	str	r5, [r4, #20]
 800f9a4:	444e      	add	r6, r9
 800f9a6:	eba5 0509 	sub.w	r5, r5, r9
 800f9aa:	6026      	str	r6, [r4, #0]
 800f9ac:	60a5      	str	r5, [r4, #8]
 800f9ae:	463e      	mov	r6, r7
 800f9b0:	42be      	cmp	r6, r7
 800f9b2:	d900      	bls.n	800f9b6 <__ssputs_r+0x86>
 800f9b4:	463e      	mov	r6, r7
 800f9b6:	6820      	ldr	r0, [r4, #0]
 800f9b8:	4632      	mov	r2, r6
 800f9ba:	4641      	mov	r1, r8
 800f9bc:	f000 f97e 	bl	800fcbc <memmove>
 800f9c0:	68a3      	ldr	r3, [r4, #8]
 800f9c2:	1b9b      	subs	r3, r3, r6
 800f9c4:	60a3      	str	r3, [r4, #8]
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	4433      	add	r3, r6
 800f9ca:	6023      	str	r3, [r4, #0]
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	e7db      	b.n	800f988 <__ssputs_r+0x58>
 800f9d0:	462a      	mov	r2, r5
 800f9d2:	f000 f999 	bl	800fd08 <_realloc_r>
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d1e1      	bne.n	800f9a0 <__ssputs_r+0x70>
 800f9dc:	6921      	ldr	r1, [r4, #16]
 800f9de:	4650      	mov	r0, sl
 800f9e0:	f7ff fec6 	bl	800f770 <_free_r>
 800f9e4:	e7c7      	b.n	800f976 <__ssputs_r+0x46>
	...

0800f9e8 <_svfiprintf_r>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	4698      	mov	r8, r3
 800f9ee:	898b      	ldrh	r3, [r1, #12]
 800f9f0:	061b      	lsls	r3, r3, #24
 800f9f2:	b09d      	sub	sp, #116	; 0x74
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	460d      	mov	r5, r1
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	d50e      	bpl.n	800fa1a <_svfiprintf_r+0x32>
 800f9fc:	690b      	ldr	r3, [r1, #16]
 800f9fe:	b963      	cbnz	r3, 800fa1a <_svfiprintf_r+0x32>
 800fa00:	2140      	movs	r1, #64	; 0x40
 800fa02:	f7ff ff21 	bl	800f848 <_malloc_r>
 800fa06:	6028      	str	r0, [r5, #0]
 800fa08:	6128      	str	r0, [r5, #16]
 800fa0a:	b920      	cbnz	r0, 800fa16 <_svfiprintf_r+0x2e>
 800fa0c:	230c      	movs	r3, #12
 800fa0e:	603b      	str	r3, [r7, #0]
 800fa10:	f04f 30ff 	mov.w	r0, #4294967295
 800fa14:	e0d1      	b.n	800fbba <_svfiprintf_r+0x1d2>
 800fa16:	2340      	movs	r3, #64	; 0x40
 800fa18:	616b      	str	r3, [r5, #20]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa1e:	2320      	movs	r3, #32
 800fa20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa24:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa28:	2330      	movs	r3, #48	; 0x30
 800fa2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fbd4 <_svfiprintf_r+0x1ec>
 800fa2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa32:	f04f 0901 	mov.w	r9, #1
 800fa36:	4623      	mov	r3, r4
 800fa38:	469a      	mov	sl, r3
 800fa3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa3e:	b10a      	cbz	r2, 800fa44 <_svfiprintf_r+0x5c>
 800fa40:	2a25      	cmp	r2, #37	; 0x25
 800fa42:	d1f9      	bne.n	800fa38 <_svfiprintf_r+0x50>
 800fa44:	ebba 0b04 	subs.w	fp, sl, r4
 800fa48:	d00b      	beq.n	800fa62 <_svfiprintf_r+0x7a>
 800fa4a:	465b      	mov	r3, fp
 800fa4c:	4622      	mov	r2, r4
 800fa4e:	4629      	mov	r1, r5
 800fa50:	4638      	mov	r0, r7
 800fa52:	f7ff ff6d 	bl	800f930 <__ssputs_r>
 800fa56:	3001      	adds	r0, #1
 800fa58:	f000 80aa 	beq.w	800fbb0 <_svfiprintf_r+0x1c8>
 800fa5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa5e:	445a      	add	r2, fp
 800fa60:	9209      	str	r2, [sp, #36]	; 0x24
 800fa62:	f89a 3000 	ldrb.w	r3, [sl]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f000 80a2 	beq.w	800fbb0 <_svfiprintf_r+0x1c8>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa76:	f10a 0a01 	add.w	sl, sl, #1
 800fa7a:	9304      	str	r3, [sp, #16]
 800fa7c:	9307      	str	r3, [sp, #28]
 800fa7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa82:	931a      	str	r3, [sp, #104]	; 0x68
 800fa84:	4654      	mov	r4, sl
 800fa86:	2205      	movs	r2, #5
 800fa88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa8c:	4851      	ldr	r0, [pc, #324]	; (800fbd4 <_svfiprintf_r+0x1ec>)
 800fa8e:	f7f0 fbaf 	bl	80001f0 <memchr>
 800fa92:	9a04      	ldr	r2, [sp, #16]
 800fa94:	b9d8      	cbnz	r0, 800face <_svfiprintf_r+0xe6>
 800fa96:	06d0      	lsls	r0, r2, #27
 800fa98:	bf44      	itt	mi
 800fa9a:	2320      	movmi	r3, #32
 800fa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faa0:	0711      	lsls	r1, r2, #28
 800faa2:	bf44      	itt	mi
 800faa4:	232b      	movmi	r3, #43	; 0x2b
 800faa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faaa:	f89a 3000 	ldrb.w	r3, [sl]
 800faae:	2b2a      	cmp	r3, #42	; 0x2a
 800fab0:	d015      	beq.n	800fade <_svfiprintf_r+0xf6>
 800fab2:	9a07      	ldr	r2, [sp, #28]
 800fab4:	4654      	mov	r4, sl
 800fab6:	2000      	movs	r0, #0
 800fab8:	f04f 0c0a 	mov.w	ip, #10
 800fabc:	4621      	mov	r1, r4
 800fabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fac2:	3b30      	subs	r3, #48	; 0x30
 800fac4:	2b09      	cmp	r3, #9
 800fac6:	d94e      	bls.n	800fb66 <_svfiprintf_r+0x17e>
 800fac8:	b1b0      	cbz	r0, 800faf8 <_svfiprintf_r+0x110>
 800faca:	9207      	str	r2, [sp, #28]
 800facc:	e014      	b.n	800faf8 <_svfiprintf_r+0x110>
 800face:	eba0 0308 	sub.w	r3, r0, r8
 800fad2:	fa09 f303 	lsl.w	r3, r9, r3
 800fad6:	4313      	orrs	r3, r2
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	46a2      	mov	sl, r4
 800fadc:	e7d2      	b.n	800fa84 <_svfiprintf_r+0x9c>
 800fade:	9b03      	ldr	r3, [sp, #12]
 800fae0:	1d19      	adds	r1, r3, #4
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	9103      	str	r1, [sp, #12]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	bfbb      	ittet	lt
 800faea:	425b      	neglt	r3, r3
 800faec:	f042 0202 	orrlt.w	r2, r2, #2
 800faf0:	9307      	strge	r3, [sp, #28]
 800faf2:	9307      	strlt	r3, [sp, #28]
 800faf4:	bfb8      	it	lt
 800faf6:	9204      	strlt	r2, [sp, #16]
 800faf8:	7823      	ldrb	r3, [r4, #0]
 800fafa:	2b2e      	cmp	r3, #46	; 0x2e
 800fafc:	d10c      	bne.n	800fb18 <_svfiprintf_r+0x130>
 800fafe:	7863      	ldrb	r3, [r4, #1]
 800fb00:	2b2a      	cmp	r3, #42	; 0x2a
 800fb02:	d135      	bne.n	800fb70 <_svfiprintf_r+0x188>
 800fb04:	9b03      	ldr	r3, [sp, #12]
 800fb06:	1d1a      	adds	r2, r3, #4
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	9203      	str	r2, [sp, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bfb8      	it	lt
 800fb10:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb14:	3402      	adds	r4, #2
 800fb16:	9305      	str	r3, [sp, #20]
 800fb18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fbe4 <_svfiprintf_r+0x1fc>
 800fb1c:	7821      	ldrb	r1, [r4, #0]
 800fb1e:	2203      	movs	r2, #3
 800fb20:	4650      	mov	r0, sl
 800fb22:	f7f0 fb65 	bl	80001f0 <memchr>
 800fb26:	b140      	cbz	r0, 800fb3a <_svfiprintf_r+0x152>
 800fb28:	2340      	movs	r3, #64	; 0x40
 800fb2a:	eba0 000a 	sub.w	r0, r0, sl
 800fb2e:	fa03 f000 	lsl.w	r0, r3, r0
 800fb32:	9b04      	ldr	r3, [sp, #16]
 800fb34:	4303      	orrs	r3, r0
 800fb36:	3401      	adds	r4, #1
 800fb38:	9304      	str	r3, [sp, #16]
 800fb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb3e:	4826      	ldr	r0, [pc, #152]	; (800fbd8 <_svfiprintf_r+0x1f0>)
 800fb40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb44:	2206      	movs	r2, #6
 800fb46:	f7f0 fb53 	bl	80001f0 <memchr>
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	d038      	beq.n	800fbc0 <_svfiprintf_r+0x1d8>
 800fb4e:	4b23      	ldr	r3, [pc, #140]	; (800fbdc <_svfiprintf_r+0x1f4>)
 800fb50:	bb1b      	cbnz	r3, 800fb9a <_svfiprintf_r+0x1b2>
 800fb52:	9b03      	ldr	r3, [sp, #12]
 800fb54:	3307      	adds	r3, #7
 800fb56:	f023 0307 	bic.w	r3, r3, #7
 800fb5a:	3308      	adds	r3, #8
 800fb5c:	9303      	str	r3, [sp, #12]
 800fb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb60:	4433      	add	r3, r6
 800fb62:	9309      	str	r3, [sp, #36]	; 0x24
 800fb64:	e767      	b.n	800fa36 <_svfiprintf_r+0x4e>
 800fb66:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	2001      	movs	r0, #1
 800fb6e:	e7a5      	b.n	800fabc <_svfiprintf_r+0xd4>
 800fb70:	2300      	movs	r3, #0
 800fb72:	3401      	adds	r4, #1
 800fb74:	9305      	str	r3, [sp, #20]
 800fb76:	4619      	mov	r1, r3
 800fb78:	f04f 0c0a 	mov.w	ip, #10
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb82:	3a30      	subs	r2, #48	; 0x30
 800fb84:	2a09      	cmp	r2, #9
 800fb86:	d903      	bls.n	800fb90 <_svfiprintf_r+0x1a8>
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d0c5      	beq.n	800fb18 <_svfiprintf_r+0x130>
 800fb8c:	9105      	str	r1, [sp, #20]
 800fb8e:	e7c3      	b.n	800fb18 <_svfiprintf_r+0x130>
 800fb90:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb94:	4604      	mov	r4, r0
 800fb96:	2301      	movs	r3, #1
 800fb98:	e7f0      	b.n	800fb7c <_svfiprintf_r+0x194>
 800fb9a:	ab03      	add	r3, sp, #12
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	462a      	mov	r2, r5
 800fba0:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <_svfiprintf_r+0x1f8>)
 800fba2:	a904      	add	r1, sp, #16
 800fba4:	4638      	mov	r0, r7
 800fba6:	f7fc fa57 	bl	800c058 <_printf_float>
 800fbaa:	1c42      	adds	r2, r0, #1
 800fbac:	4606      	mov	r6, r0
 800fbae:	d1d6      	bne.n	800fb5e <_svfiprintf_r+0x176>
 800fbb0:	89ab      	ldrh	r3, [r5, #12]
 800fbb2:	065b      	lsls	r3, r3, #25
 800fbb4:	f53f af2c 	bmi.w	800fa10 <_svfiprintf_r+0x28>
 800fbb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbba:	b01d      	add	sp, #116	; 0x74
 800fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc0:	ab03      	add	r3, sp, #12
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	462a      	mov	r2, r5
 800fbc6:	4b06      	ldr	r3, [pc, #24]	; (800fbe0 <_svfiprintf_r+0x1f8>)
 800fbc8:	a904      	add	r1, sp, #16
 800fbca:	4638      	mov	r0, r7
 800fbcc:	f7fc fce8 	bl	800c5a0 <_printf_i>
 800fbd0:	e7eb      	b.n	800fbaa <_svfiprintf_r+0x1c2>
 800fbd2:	bf00      	nop
 800fbd4:	080132e4 	.word	0x080132e4
 800fbd8:	080132ee 	.word	0x080132ee
 800fbdc:	0800c059 	.word	0x0800c059
 800fbe0:	0800f931 	.word	0x0800f931
 800fbe4:	080132ea 	.word	0x080132ea

0800fbe8 <nan>:
 800fbe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fbf0 <nan+0x8>
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	00000000 	.word	0x00000000
 800fbf4:	7ff80000 	.word	0x7ff80000

0800fbf8 <_sbrk_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d06      	ldr	r5, [pc, #24]	; (800fc14 <_sbrk_r+0x1c>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	602b      	str	r3, [r5, #0]
 800fc04:	f7f5 faa8 	bl	8005158 <_sbrk>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_sbrk_r+0x1a>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_sbrk_r+0x1a>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20002014 	.word	0x20002014

0800fc18 <strncmp>:
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	b17a      	cbz	r2, 800fc3c <strncmp+0x24>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	3901      	subs	r1, #1
 800fc20:	1884      	adds	r4, r0, r2
 800fc22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc2a:	4290      	cmp	r0, r2
 800fc2c:	d101      	bne.n	800fc32 <strncmp+0x1a>
 800fc2e:	42a3      	cmp	r3, r4
 800fc30:	d101      	bne.n	800fc36 <strncmp+0x1e>
 800fc32:	1a80      	subs	r0, r0, r2
 800fc34:	bd10      	pop	{r4, pc}
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d1f3      	bne.n	800fc22 <strncmp+0xa>
 800fc3a:	e7fa      	b.n	800fc32 <strncmp+0x1a>
 800fc3c:	4610      	mov	r0, r2
 800fc3e:	e7f9      	b.n	800fc34 <strncmp+0x1c>

0800fc40 <__ascii_wctomb>:
 800fc40:	b149      	cbz	r1, 800fc56 <__ascii_wctomb+0x16>
 800fc42:	2aff      	cmp	r2, #255	; 0xff
 800fc44:	bf85      	ittet	hi
 800fc46:	238a      	movhi	r3, #138	; 0x8a
 800fc48:	6003      	strhi	r3, [r0, #0]
 800fc4a:	700a      	strbls	r2, [r1, #0]
 800fc4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc50:	bf98      	it	ls
 800fc52:	2001      	movls	r0, #1
 800fc54:	4770      	bx	lr
 800fc56:	4608      	mov	r0, r1
 800fc58:	4770      	bx	lr
	...

0800fc5c <__assert_func>:
 800fc5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc5e:	4614      	mov	r4, r2
 800fc60:	461a      	mov	r2, r3
 800fc62:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <__assert_func+0x2c>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4605      	mov	r5, r0
 800fc68:	68d8      	ldr	r0, [r3, #12]
 800fc6a:	b14c      	cbz	r4, 800fc80 <__assert_func+0x24>
 800fc6c:	4b07      	ldr	r3, [pc, #28]	; (800fc8c <__assert_func+0x30>)
 800fc6e:	9100      	str	r1, [sp, #0]
 800fc70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc74:	4906      	ldr	r1, [pc, #24]	; (800fc90 <__assert_func+0x34>)
 800fc76:	462b      	mov	r3, r5
 800fc78:	f000 f80e 	bl	800fc98 <fiprintf>
 800fc7c:	f000 fa8c 	bl	8010198 <abort>
 800fc80:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <__assert_func+0x38>)
 800fc82:	461c      	mov	r4, r3
 800fc84:	e7f3      	b.n	800fc6e <__assert_func+0x12>
 800fc86:	bf00      	nop
 800fc88:	2000023c 	.word	0x2000023c
 800fc8c:	080132f5 	.word	0x080132f5
 800fc90:	08013302 	.word	0x08013302
 800fc94:	08013330 	.word	0x08013330

0800fc98 <fiprintf>:
 800fc98:	b40e      	push	{r1, r2, r3}
 800fc9a:	b503      	push	{r0, r1, lr}
 800fc9c:	4601      	mov	r1, r0
 800fc9e:	ab03      	add	r3, sp, #12
 800fca0:	4805      	ldr	r0, [pc, #20]	; (800fcb8 <fiprintf+0x20>)
 800fca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fca6:	6800      	ldr	r0, [r0, #0]
 800fca8:	9301      	str	r3, [sp, #4]
 800fcaa:	f000 f885 	bl	800fdb8 <_vfiprintf_r>
 800fcae:	b002      	add	sp, #8
 800fcb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcb4:	b003      	add	sp, #12
 800fcb6:	4770      	bx	lr
 800fcb8:	2000023c 	.word	0x2000023c

0800fcbc <memmove>:
 800fcbc:	4288      	cmp	r0, r1
 800fcbe:	b510      	push	{r4, lr}
 800fcc0:	eb01 0402 	add.w	r4, r1, r2
 800fcc4:	d902      	bls.n	800fccc <memmove+0x10>
 800fcc6:	4284      	cmp	r4, r0
 800fcc8:	4623      	mov	r3, r4
 800fcca:	d807      	bhi.n	800fcdc <memmove+0x20>
 800fccc:	1e43      	subs	r3, r0, #1
 800fcce:	42a1      	cmp	r1, r4
 800fcd0:	d008      	beq.n	800fce4 <memmove+0x28>
 800fcd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcda:	e7f8      	b.n	800fcce <memmove+0x12>
 800fcdc:	4402      	add	r2, r0
 800fcde:	4601      	mov	r1, r0
 800fce0:	428a      	cmp	r2, r1
 800fce2:	d100      	bne.n	800fce6 <memmove+0x2a>
 800fce4:	bd10      	pop	{r4, pc}
 800fce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcee:	e7f7      	b.n	800fce0 <memmove+0x24>

0800fcf0 <__malloc_lock>:
 800fcf0:	4801      	ldr	r0, [pc, #4]	; (800fcf8 <__malloc_lock+0x8>)
 800fcf2:	f000 bc11 	b.w	8010518 <__retarget_lock_acquire_recursive>
 800fcf6:	bf00      	nop
 800fcf8:	20002018 	.word	0x20002018

0800fcfc <__malloc_unlock>:
 800fcfc:	4801      	ldr	r0, [pc, #4]	; (800fd04 <__malloc_unlock+0x8>)
 800fcfe:	f000 bc0c 	b.w	801051a <__retarget_lock_release_recursive>
 800fd02:	bf00      	nop
 800fd04:	20002018 	.word	0x20002018

0800fd08 <_realloc_r>:
 800fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	4614      	mov	r4, r2
 800fd10:	460e      	mov	r6, r1
 800fd12:	b921      	cbnz	r1, 800fd1e <_realloc_r+0x16>
 800fd14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	4611      	mov	r1, r2
 800fd1a:	f7ff bd95 	b.w	800f848 <_malloc_r>
 800fd1e:	b92a      	cbnz	r2, 800fd2c <_realloc_r+0x24>
 800fd20:	f7ff fd26 	bl	800f770 <_free_r>
 800fd24:	4625      	mov	r5, r4
 800fd26:	4628      	mov	r0, r5
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2c:	f000 fc5c 	bl	80105e8 <_malloc_usable_size_r>
 800fd30:	4284      	cmp	r4, r0
 800fd32:	4607      	mov	r7, r0
 800fd34:	d802      	bhi.n	800fd3c <_realloc_r+0x34>
 800fd36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd3a:	d812      	bhi.n	800fd62 <_realloc_r+0x5a>
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	4640      	mov	r0, r8
 800fd40:	f7ff fd82 	bl	800f848 <_malloc_r>
 800fd44:	4605      	mov	r5, r0
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d0ed      	beq.n	800fd26 <_realloc_r+0x1e>
 800fd4a:	42bc      	cmp	r4, r7
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	4631      	mov	r1, r6
 800fd50:	bf28      	it	cs
 800fd52:	463a      	movcs	r2, r7
 800fd54:	f7fc f8ca 	bl	800beec <memcpy>
 800fd58:	4631      	mov	r1, r6
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	f7ff fd08 	bl	800f770 <_free_r>
 800fd60:	e7e1      	b.n	800fd26 <_realloc_r+0x1e>
 800fd62:	4635      	mov	r5, r6
 800fd64:	e7df      	b.n	800fd26 <_realloc_r+0x1e>

0800fd66 <__sfputc_r>:
 800fd66:	6893      	ldr	r3, [r2, #8]
 800fd68:	3b01      	subs	r3, #1
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	b410      	push	{r4}
 800fd6e:	6093      	str	r3, [r2, #8]
 800fd70:	da08      	bge.n	800fd84 <__sfputc_r+0x1e>
 800fd72:	6994      	ldr	r4, [r2, #24]
 800fd74:	42a3      	cmp	r3, r4
 800fd76:	db01      	blt.n	800fd7c <__sfputc_r+0x16>
 800fd78:	290a      	cmp	r1, #10
 800fd7a:	d103      	bne.n	800fd84 <__sfputc_r+0x1e>
 800fd7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd80:	f000 b94a 	b.w	8010018 <__swbuf_r>
 800fd84:	6813      	ldr	r3, [r2, #0]
 800fd86:	1c58      	adds	r0, r3, #1
 800fd88:	6010      	str	r0, [r2, #0]
 800fd8a:	7019      	strb	r1, [r3, #0]
 800fd8c:	4608      	mov	r0, r1
 800fd8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <__sfputs_r>:
 800fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd96:	4606      	mov	r6, r0
 800fd98:	460f      	mov	r7, r1
 800fd9a:	4614      	mov	r4, r2
 800fd9c:	18d5      	adds	r5, r2, r3
 800fd9e:	42ac      	cmp	r4, r5
 800fda0:	d101      	bne.n	800fda6 <__sfputs_r+0x12>
 800fda2:	2000      	movs	r0, #0
 800fda4:	e007      	b.n	800fdb6 <__sfputs_r+0x22>
 800fda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdaa:	463a      	mov	r2, r7
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7ff ffda 	bl	800fd66 <__sfputc_r>
 800fdb2:	1c43      	adds	r3, r0, #1
 800fdb4:	d1f3      	bne.n	800fd9e <__sfputs_r+0xa>
 800fdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fdb8 <_vfiprintf_r>:
 800fdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdbc:	460d      	mov	r5, r1
 800fdbe:	b09d      	sub	sp, #116	; 0x74
 800fdc0:	4614      	mov	r4, r2
 800fdc2:	4698      	mov	r8, r3
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	b118      	cbz	r0, 800fdd0 <_vfiprintf_r+0x18>
 800fdc8:	6983      	ldr	r3, [r0, #24]
 800fdca:	b90b      	cbnz	r3, 800fdd0 <_vfiprintf_r+0x18>
 800fdcc:	f000 fb06 	bl	80103dc <__sinit>
 800fdd0:	4b89      	ldr	r3, [pc, #548]	; (800fff8 <_vfiprintf_r+0x240>)
 800fdd2:	429d      	cmp	r5, r3
 800fdd4:	d11b      	bne.n	800fe0e <_vfiprintf_r+0x56>
 800fdd6:	6875      	ldr	r5, [r6, #4]
 800fdd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdda:	07d9      	lsls	r1, r3, #31
 800fddc:	d405      	bmi.n	800fdea <_vfiprintf_r+0x32>
 800fdde:	89ab      	ldrh	r3, [r5, #12]
 800fde0:	059a      	lsls	r2, r3, #22
 800fde2:	d402      	bmi.n	800fdea <_vfiprintf_r+0x32>
 800fde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fde6:	f000 fb97 	bl	8010518 <__retarget_lock_acquire_recursive>
 800fdea:	89ab      	ldrh	r3, [r5, #12]
 800fdec:	071b      	lsls	r3, r3, #28
 800fdee:	d501      	bpl.n	800fdf4 <_vfiprintf_r+0x3c>
 800fdf0:	692b      	ldr	r3, [r5, #16]
 800fdf2:	b9eb      	cbnz	r3, 800fe30 <_vfiprintf_r+0x78>
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	f000 f960 	bl	80100bc <__swsetup_r>
 800fdfc:	b1c0      	cbz	r0, 800fe30 <_vfiprintf_r+0x78>
 800fdfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe00:	07dc      	lsls	r4, r3, #31
 800fe02:	d50e      	bpl.n	800fe22 <_vfiprintf_r+0x6a>
 800fe04:	f04f 30ff 	mov.w	r0, #4294967295
 800fe08:	b01d      	add	sp, #116	; 0x74
 800fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0e:	4b7b      	ldr	r3, [pc, #492]	; (800fffc <_vfiprintf_r+0x244>)
 800fe10:	429d      	cmp	r5, r3
 800fe12:	d101      	bne.n	800fe18 <_vfiprintf_r+0x60>
 800fe14:	68b5      	ldr	r5, [r6, #8]
 800fe16:	e7df      	b.n	800fdd8 <_vfiprintf_r+0x20>
 800fe18:	4b79      	ldr	r3, [pc, #484]	; (8010000 <_vfiprintf_r+0x248>)
 800fe1a:	429d      	cmp	r5, r3
 800fe1c:	bf08      	it	eq
 800fe1e:	68f5      	ldreq	r5, [r6, #12]
 800fe20:	e7da      	b.n	800fdd8 <_vfiprintf_r+0x20>
 800fe22:	89ab      	ldrh	r3, [r5, #12]
 800fe24:	0598      	lsls	r0, r3, #22
 800fe26:	d4ed      	bmi.n	800fe04 <_vfiprintf_r+0x4c>
 800fe28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe2a:	f000 fb76 	bl	801051a <__retarget_lock_release_recursive>
 800fe2e:	e7e9      	b.n	800fe04 <_vfiprintf_r+0x4c>
 800fe30:	2300      	movs	r3, #0
 800fe32:	9309      	str	r3, [sp, #36]	; 0x24
 800fe34:	2320      	movs	r3, #32
 800fe36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe3e:	2330      	movs	r3, #48	; 0x30
 800fe40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010004 <_vfiprintf_r+0x24c>
 800fe44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe48:	f04f 0901 	mov.w	r9, #1
 800fe4c:	4623      	mov	r3, r4
 800fe4e:	469a      	mov	sl, r3
 800fe50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe54:	b10a      	cbz	r2, 800fe5a <_vfiprintf_r+0xa2>
 800fe56:	2a25      	cmp	r2, #37	; 0x25
 800fe58:	d1f9      	bne.n	800fe4e <_vfiprintf_r+0x96>
 800fe5a:	ebba 0b04 	subs.w	fp, sl, r4
 800fe5e:	d00b      	beq.n	800fe78 <_vfiprintf_r+0xc0>
 800fe60:	465b      	mov	r3, fp
 800fe62:	4622      	mov	r2, r4
 800fe64:	4629      	mov	r1, r5
 800fe66:	4630      	mov	r0, r6
 800fe68:	f7ff ff94 	bl	800fd94 <__sfputs_r>
 800fe6c:	3001      	adds	r0, #1
 800fe6e:	f000 80aa 	beq.w	800ffc6 <_vfiprintf_r+0x20e>
 800fe72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe74:	445a      	add	r2, fp
 800fe76:	9209      	str	r2, [sp, #36]	; 0x24
 800fe78:	f89a 3000 	ldrb.w	r3, [sl]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f000 80a2 	beq.w	800ffc6 <_vfiprintf_r+0x20e>
 800fe82:	2300      	movs	r3, #0
 800fe84:	f04f 32ff 	mov.w	r2, #4294967295
 800fe88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe8c:	f10a 0a01 	add.w	sl, sl, #1
 800fe90:	9304      	str	r3, [sp, #16]
 800fe92:	9307      	str	r3, [sp, #28]
 800fe94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe98:	931a      	str	r3, [sp, #104]	; 0x68
 800fe9a:	4654      	mov	r4, sl
 800fe9c:	2205      	movs	r2, #5
 800fe9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fea2:	4858      	ldr	r0, [pc, #352]	; (8010004 <_vfiprintf_r+0x24c>)
 800fea4:	f7f0 f9a4 	bl	80001f0 <memchr>
 800fea8:	9a04      	ldr	r2, [sp, #16]
 800feaa:	b9d8      	cbnz	r0, 800fee4 <_vfiprintf_r+0x12c>
 800feac:	06d1      	lsls	r1, r2, #27
 800feae:	bf44      	itt	mi
 800feb0:	2320      	movmi	r3, #32
 800feb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feb6:	0713      	lsls	r3, r2, #28
 800feb8:	bf44      	itt	mi
 800feba:	232b      	movmi	r3, #43	; 0x2b
 800febc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fec0:	f89a 3000 	ldrb.w	r3, [sl]
 800fec4:	2b2a      	cmp	r3, #42	; 0x2a
 800fec6:	d015      	beq.n	800fef4 <_vfiprintf_r+0x13c>
 800fec8:	9a07      	ldr	r2, [sp, #28]
 800feca:	4654      	mov	r4, sl
 800fecc:	2000      	movs	r0, #0
 800fece:	f04f 0c0a 	mov.w	ip, #10
 800fed2:	4621      	mov	r1, r4
 800fed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fed8:	3b30      	subs	r3, #48	; 0x30
 800feda:	2b09      	cmp	r3, #9
 800fedc:	d94e      	bls.n	800ff7c <_vfiprintf_r+0x1c4>
 800fede:	b1b0      	cbz	r0, 800ff0e <_vfiprintf_r+0x156>
 800fee0:	9207      	str	r2, [sp, #28]
 800fee2:	e014      	b.n	800ff0e <_vfiprintf_r+0x156>
 800fee4:	eba0 0308 	sub.w	r3, r0, r8
 800fee8:	fa09 f303 	lsl.w	r3, r9, r3
 800feec:	4313      	orrs	r3, r2
 800feee:	9304      	str	r3, [sp, #16]
 800fef0:	46a2      	mov	sl, r4
 800fef2:	e7d2      	b.n	800fe9a <_vfiprintf_r+0xe2>
 800fef4:	9b03      	ldr	r3, [sp, #12]
 800fef6:	1d19      	adds	r1, r3, #4
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	9103      	str	r1, [sp, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bfbb      	ittet	lt
 800ff00:	425b      	neglt	r3, r3
 800ff02:	f042 0202 	orrlt.w	r2, r2, #2
 800ff06:	9307      	strge	r3, [sp, #28]
 800ff08:	9307      	strlt	r3, [sp, #28]
 800ff0a:	bfb8      	it	lt
 800ff0c:	9204      	strlt	r2, [sp, #16]
 800ff0e:	7823      	ldrb	r3, [r4, #0]
 800ff10:	2b2e      	cmp	r3, #46	; 0x2e
 800ff12:	d10c      	bne.n	800ff2e <_vfiprintf_r+0x176>
 800ff14:	7863      	ldrb	r3, [r4, #1]
 800ff16:	2b2a      	cmp	r3, #42	; 0x2a
 800ff18:	d135      	bne.n	800ff86 <_vfiprintf_r+0x1ce>
 800ff1a:	9b03      	ldr	r3, [sp, #12]
 800ff1c:	1d1a      	adds	r2, r3, #4
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	9203      	str	r2, [sp, #12]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	bfb8      	it	lt
 800ff26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff2a:	3402      	adds	r4, #2
 800ff2c:	9305      	str	r3, [sp, #20]
 800ff2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010014 <_vfiprintf_r+0x25c>
 800ff32:	7821      	ldrb	r1, [r4, #0]
 800ff34:	2203      	movs	r2, #3
 800ff36:	4650      	mov	r0, sl
 800ff38:	f7f0 f95a 	bl	80001f0 <memchr>
 800ff3c:	b140      	cbz	r0, 800ff50 <_vfiprintf_r+0x198>
 800ff3e:	2340      	movs	r3, #64	; 0x40
 800ff40:	eba0 000a 	sub.w	r0, r0, sl
 800ff44:	fa03 f000 	lsl.w	r0, r3, r0
 800ff48:	9b04      	ldr	r3, [sp, #16]
 800ff4a:	4303      	orrs	r3, r0
 800ff4c:	3401      	adds	r4, #1
 800ff4e:	9304      	str	r3, [sp, #16]
 800ff50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff54:	482c      	ldr	r0, [pc, #176]	; (8010008 <_vfiprintf_r+0x250>)
 800ff56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff5a:	2206      	movs	r2, #6
 800ff5c:	f7f0 f948 	bl	80001f0 <memchr>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d03f      	beq.n	800ffe4 <_vfiprintf_r+0x22c>
 800ff64:	4b29      	ldr	r3, [pc, #164]	; (801000c <_vfiprintf_r+0x254>)
 800ff66:	bb1b      	cbnz	r3, 800ffb0 <_vfiprintf_r+0x1f8>
 800ff68:	9b03      	ldr	r3, [sp, #12]
 800ff6a:	3307      	adds	r3, #7
 800ff6c:	f023 0307 	bic.w	r3, r3, #7
 800ff70:	3308      	adds	r3, #8
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff76:	443b      	add	r3, r7
 800ff78:	9309      	str	r3, [sp, #36]	; 0x24
 800ff7a:	e767      	b.n	800fe4c <_vfiprintf_r+0x94>
 800ff7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff80:	460c      	mov	r4, r1
 800ff82:	2001      	movs	r0, #1
 800ff84:	e7a5      	b.n	800fed2 <_vfiprintf_r+0x11a>
 800ff86:	2300      	movs	r3, #0
 800ff88:	3401      	adds	r4, #1
 800ff8a:	9305      	str	r3, [sp, #20]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	f04f 0c0a 	mov.w	ip, #10
 800ff92:	4620      	mov	r0, r4
 800ff94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff98:	3a30      	subs	r2, #48	; 0x30
 800ff9a:	2a09      	cmp	r2, #9
 800ff9c:	d903      	bls.n	800ffa6 <_vfiprintf_r+0x1ee>
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d0c5      	beq.n	800ff2e <_vfiprintf_r+0x176>
 800ffa2:	9105      	str	r1, [sp, #20]
 800ffa4:	e7c3      	b.n	800ff2e <_vfiprintf_r+0x176>
 800ffa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffaa:	4604      	mov	r4, r0
 800ffac:	2301      	movs	r3, #1
 800ffae:	e7f0      	b.n	800ff92 <_vfiprintf_r+0x1da>
 800ffb0:	ab03      	add	r3, sp, #12
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	462a      	mov	r2, r5
 800ffb6:	4b16      	ldr	r3, [pc, #88]	; (8010010 <_vfiprintf_r+0x258>)
 800ffb8:	a904      	add	r1, sp, #16
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f7fc f84c 	bl	800c058 <_printf_float>
 800ffc0:	4607      	mov	r7, r0
 800ffc2:	1c78      	adds	r0, r7, #1
 800ffc4:	d1d6      	bne.n	800ff74 <_vfiprintf_r+0x1bc>
 800ffc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffc8:	07d9      	lsls	r1, r3, #31
 800ffca:	d405      	bmi.n	800ffd8 <_vfiprintf_r+0x220>
 800ffcc:	89ab      	ldrh	r3, [r5, #12]
 800ffce:	059a      	lsls	r2, r3, #22
 800ffd0:	d402      	bmi.n	800ffd8 <_vfiprintf_r+0x220>
 800ffd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffd4:	f000 faa1 	bl	801051a <__retarget_lock_release_recursive>
 800ffd8:	89ab      	ldrh	r3, [r5, #12]
 800ffda:	065b      	lsls	r3, r3, #25
 800ffdc:	f53f af12 	bmi.w	800fe04 <_vfiprintf_r+0x4c>
 800ffe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffe2:	e711      	b.n	800fe08 <_vfiprintf_r+0x50>
 800ffe4:	ab03      	add	r3, sp, #12
 800ffe6:	9300      	str	r3, [sp, #0]
 800ffe8:	462a      	mov	r2, r5
 800ffea:	4b09      	ldr	r3, [pc, #36]	; (8010010 <_vfiprintf_r+0x258>)
 800ffec:	a904      	add	r1, sp, #16
 800ffee:	4630      	mov	r0, r6
 800fff0:	f7fc fad6 	bl	800c5a0 <_printf_i>
 800fff4:	e7e4      	b.n	800ffc0 <_vfiprintf_r+0x208>
 800fff6:	bf00      	nop
 800fff8:	08013354 	.word	0x08013354
 800fffc:	08013374 	.word	0x08013374
 8010000:	08013334 	.word	0x08013334
 8010004:	080132e4 	.word	0x080132e4
 8010008:	080132ee 	.word	0x080132ee
 801000c:	0800c059 	.word	0x0800c059
 8010010:	0800fd95 	.word	0x0800fd95
 8010014:	080132ea 	.word	0x080132ea

08010018 <__swbuf_r>:
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001a:	460e      	mov	r6, r1
 801001c:	4614      	mov	r4, r2
 801001e:	4605      	mov	r5, r0
 8010020:	b118      	cbz	r0, 801002a <__swbuf_r+0x12>
 8010022:	6983      	ldr	r3, [r0, #24]
 8010024:	b90b      	cbnz	r3, 801002a <__swbuf_r+0x12>
 8010026:	f000 f9d9 	bl	80103dc <__sinit>
 801002a:	4b21      	ldr	r3, [pc, #132]	; (80100b0 <__swbuf_r+0x98>)
 801002c:	429c      	cmp	r4, r3
 801002e:	d12b      	bne.n	8010088 <__swbuf_r+0x70>
 8010030:	686c      	ldr	r4, [r5, #4]
 8010032:	69a3      	ldr	r3, [r4, #24]
 8010034:	60a3      	str	r3, [r4, #8]
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	071a      	lsls	r2, r3, #28
 801003a:	d52f      	bpl.n	801009c <__swbuf_r+0x84>
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	b36b      	cbz	r3, 801009c <__swbuf_r+0x84>
 8010040:	6923      	ldr	r3, [r4, #16]
 8010042:	6820      	ldr	r0, [r4, #0]
 8010044:	1ac0      	subs	r0, r0, r3
 8010046:	6963      	ldr	r3, [r4, #20]
 8010048:	b2f6      	uxtb	r6, r6
 801004a:	4283      	cmp	r3, r0
 801004c:	4637      	mov	r7, r6
 801004e:	dc04      	bgt.n	801005a <__swbuf_r+0x42>
 8010050:	4621      	mov	r1, r4
 8010052:	4628      	mov	r0, r5
 8010054:	f000 f92e 	bl	80102b4 <_fflush_r>
 8010058:	bb30      	cbnz	r0, 80100a8 <__swbuf_r+0x90>
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	3b01      	subs	r3, #1
 801005e:	60a3      	str	r3, [r4, #8]
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	6022      	str	r2, [r4, #0]
 8010066:	701e      	strb	r6, [r3, #0]
 8010068:	6963      	ldr	r3, [r4, #20]
 801006a:	3001      	adds	r0, #1
 801006c:	4283      	cmp	r3, r0
 801006e:	d004      	beq.n	801007a <__swbuf_r+0x62>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	07db      	lsls	r3, r3, #31
 8010074:	d506      	bpl.n	8010084 <__swbuf_r+0x6c>
 8010076:	2e0a      	cmp	r6, #10
 8010078:	d104      	bne.n	8010084 <__swbuf_r+0x6c>
 801007a:	4621      	mov	r1, r4
 801007c:	4628      	mov	r0, r5
 801007e:	f000 f919 	bl	80102b4 <_fflush_r>
 8010082:	b988      	cbnz	r0, 80100a8 <__swbuf_r+0x90>
 8010084:	4638      	mov	r0, r7
 8010086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010088:	4b0a      	ldr	r3, [pc, #40]	; (80100b4 <__swbuf_r+0x9c>)
 801008a:	429c      	cmp	r4, r3
 801008c:	d101      	bne.n	8010092 <__swbuf_r+0x7a>
 801008e:	68ac      	ldr	r4, [r5, #8]
 8010090:	e7cf      	b.n	8010032 <__swbuf_r+0x1a>
 8010092:	4b09      	ldr	r3, [pc, #36]	; (80100b8 <__swbuf_r+0xa0>)
 8010094:	429c      	cmp	r4, r3
 8010096:	bf08      	it	eq
 8010098:	68ec      	ldreq	r4, [r5, #12]
 801009a:	e7ca      	b.n	8010032 <__swbuf_r+0x1a>
 801009c:	4621      	mov	r1, r4
 801009e:	4628      	mov	r0, r5
 80100a0:	f000 f80c 	bl	80100bc <__swsetup_r>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d0cb      	beq.n	8010040 <__swbuf_r+0x28>
 80100a8:	f04f 37ff 	mov.w	r7, #4294967295
 80100ac:	e7ea      	b.n	8010084 <__swbuf_r+0x6c>
 80100ae:	bf00      	nop
 80100b0:	08013354 	.word	0x08013354
 80100b4:	08013374 	.word	0x08013374
 80100b8:	08013334 	.word	0x08013334

080100bc <__swsetup_r>:
 80100bc:	4b32      	ldr	r3, [pc, #200]	; (8010188 <__swsetup_r+0xcc>)
 80100be:	b570      	push	{r4, r5, r6, lr}
 80100c0:	681d      	ldr	r5, [r3, #0]
 80100c2:	4606      	mov	r6, r0
 80100c4:	460c      	mov	r4, r1
 80100c6:	b125      	cbz	r5, 80100d2 <__swsetup_r+0x16>
 80100c8:	69ab      	ldr	r3, [r5, #24]
 80100ca:	b913      	cbnz	r3, 80100d2 <__swsetup_r+0x16>
 80100cc:	4628      	mov	r0, r5
 80100ce:	f000 f985 	bl	80103dc <__sinit>
 80100d2:	4b2e      	ldr	r3, [pc, #184]	; (801018c <__swsetup_r+0xd0>)
 80100d4:	429c      	cmp	r4, r3
 80100d6:	d10f      	bne.n	80100f8 <__swsetup_r+0x3c>
 80100d8:	686c      	ldr	r4, [r5, #4]
 80100da:	89a3      	ldrh	r3, [r4, #12]
 80100dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100e0:	0719      	lsls	r1, r3, #28
 80100e2:	d42c      	bmi.n	801013e <__swsetup_r+0x82>
 80100e4:	06dd      	lsls	r5, r3, #27
 80100e6:	d411      	bmi.n	801010c <__swsetup_r+0x50>
 80100e8:	2309      	movs	r3, #9
 80100ea:	6033      	str	r3, [r6, #0]
 80100ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100f0:	81a3      	strh	r3, [r4, #12]
 80100f2:	f04f 30ff 	mov.w	r0, #4294967295
 80100f6:	e03e      	b.n	8010176 <__swsetup_r+0xba>
 80100f8:	4b25      	ldr	r3, [pc, #148]	; (8010190 <__swsetup_r+0xd4>)
 80100fa:	429c      	cmp	r4, r3
 80100fc:	d101      	bne.n	8010102 <__swsetup_r+0x46>
 80100fe:	68ac      	ldr	r4, [r5, #8]
 8010100:	e7eb      	b.n	80100da <__swsetup_r+0x1e>
 8010102:	4b24      	ldr	r3, [pc, #144]	; (8010194 <__swsetup_r+0xd8>)
 8010104:	429c      	cmp	r4, r3
 8010106:	bf08      	it	eq
 8010108:	68ec      	ldreq	r4, [r5, #12]
 801010a:	e7e6      	b.n	80100da <__swsetup_r+0x1e>
 801010c:	0758      	lsls	r0, r3, #29
 801010e:	d512      	bpl.n	8010136 <__swsetup_r+0x7a>
 8010110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010112:	b141      	cbz	r1, 8010126 <__swsetup_r+0x6a>
 8010114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010118:	4299      	cmp	r1, r3
 801011a:	d002      	beq.n	8010122 <__swsetup_r+0x66>
 801011c:	4630      	mov	r0, r6
 801011e:	f7ff fb27 	bl	800f770 <_free_r>
 8010122:	2300      	movs	r3, #0
 8010124:	6363      	str	r3, [r4, #52]	; 0x34
 8010126:	89a3      	ldrh	r3, [r4, #12]
 8010128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801012c:	81a3      	strh	r3, [r4, #12]
 801012e:	2300      	movs	r3, #0
 8010130:	6063      	str	r3, [r4, #4]
 8010132:	6923      	ldr	r3, [r4, #16]
 8010134:	6023      	str	r3, [r4, #0]
 8010136:	89a3      	ldrh	r3, [r4, #12]
 8010138:	f043 0308 	orr.w	r3, r3, #8
 801013c:	81a3      	strh	r3, [r4, #12]
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	b94b      	cbnz	r3, 8010156 <__swsetup_r+0x9a>
 8010142:	89a3      	ldrh	r3, [r4, #12]
 8010144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801014c:	d003      	beq.n	8010156 <__swsetup_r+0x9a>
 801014e:	4621      	mov	r1, r4
 8010150:	4630      	mov	r0, r6
 8010152:	f000 fa09 	bl	8010568 <__smakebuf_r>
 8010156:	89a0      	ldrh	r0, [r4, #12]
 8010158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801015c:	f010 0301 	ands.w	r3, r0, #1
 8010160:	d00a      	beq.n	8010178 <__swsetup_r+0xbc>
 8010162:	2300      	movs	r3, #0
 8010164:	60a3      	str	r3, [r4, #8]
 8010166:	6963      	ldr	r3, [r4, #20]
 8010168:	425b      	negs	r3, r3
 801016a:	61a3      	str	r3, [r4, #24]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	b943      	cbnz	r3, 8010182 <__swsetup_r+0xc6>
 8010170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010174:	d1ba      	bne.n	80100ec <__swsetup_r+0x30>
 8010176:	bd70      	pop	{r4, r5, r6, pc}
 8010178:	0781      	lsls	r1, r0, #30
 801017a:	bf58      	it	pl
 801017c:	6963      	ldrpl	r3, [r4, #20]
 801017e:	60a3      	str	r3, [r4, #8]
 8010180:	e7f4      	b.n	801016c <__swsetup_r+0xb0>
 8010182:	2000      	movs	r0, #0
 8010184:	e7f7      	b.n	8010176 <__swsetup_r+0xba>
 8010186:	bf00      	nop
 8010188:	2000023c 	.word	0x2000023c
 801018c:	08013354 	.word	0x08013354
 8010190:	08013374 	.word	0x08013374
 8010194:	08013334 	.word	0x08013334

08010198 <abort>:
 8010198:	b508      	push	{r3, lr}
 801019a:	2006      	movs	r0, #6
 801019c:	f000 fa54 	bl	8010648 <raise>
 80101a0:	2001      	movs	r0, #1
 80101a2:	f7f4 ff61 	bl	8005068 <_exit>
	...

080101a8 <__sflush_r>:
 80101a8:	898a      	ldrh	r2, [r1, #12]
 80101aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ae:	4605      	mov	r5, r0
 80101b0:	0710      	lsls	r0, r2, #28
 80101b2:	460c      	mov	r4, r1
 80101b4:	d458      	bmi.n	8010268 <__sflush_r+0xc0>
 80101b6:	684b      	ldr	r3, [r1, #4]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dc05      	bgt.n	80101c8 <__sflush_r+0x20>
 80101bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101be:	2b00      	cmp	r3, #0
 80101c0:	dc02      	bgt.n	80101c8 <__sflush_r+0x20>
 80101c2:	2000      	movs	r0, #0
 80101c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101ca:	2e00      	cmp	r6, #0
 80101cc:	d0f9      	beq.n	80101c2 <__sflush_r+0x1a>
 80101ce:	2300      	movs	r3, #0
 80101d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101d4:	682f      	ldr	r7, [r5, #0]
 80101d6:	602b      	str	r3, [r5, #0]
 80101d8:	d032      	beq.n	8010240 <__sflush_r+0x98>
 80101da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	075a      	lsls	r2, r3, #29
 80101e0:	d505      	bpl.n	80101ee <__sflush_r+0x46>
 80101e2:	6863      	ldr	r3, [r4, #4]
 80101e4:	1ac0      	subs	r0, r0, r3
 80101e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101e8:	b10b      	cbz	r3, 80101ee <__sflush_r+0x46>
 80101ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101ec:	1ac0      	subs	r0, r0, r3
 80101ee:	2300      	movs	r3, #0
 80101f0:	4602      	mov	r2, r0
 80101f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101f4:	6a21      	ldr	r1, [r4, #32]
 80101f6:	4628      	mov	r0, r5
 80101f8:	47b0      	blx	r6
 80101fa:	1c43      	adds	r3, r0, #1
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	d106      	bne.n	801020e <__sflush_r+0x66>
 8010200:	6829      	ldr	r1, [r5, #0]
 8010202:	291d      	cmp	r1, #29
 8010204:	d82c      	bhi.n	8010260 <__sflush_r+0xb8>
 8010206:	4a2a      	ldr	r2, [pc, #168]	; (80102b0 <__sflush_r+0x108>)
 8010208:	40ca      	lsrs	r2, r1
 801020a:	07d6      	lsls	r6, r2, #31
 801020c:	d528      	bpl.n	8010260 <__sflush_r+0xb8>
 801020e:	2200      	movs	r2, #0
 8010210:	6062      	str	r2, [r4, #4]
 8010212:	04d9      	lsls	r1, r3, #19
 8010214:	6922      	ldr	r2, [r4, #16]
 8010216:	6022      	str	r2, [r4, #0]
 8010218:	d504      	bpl.n	8010224 <__sflush_r+0x7c>
 801021a:	1c42      	adds	r2, r0, #1
 801021c:	d101      	bne.n	8010222 <__sflush_r+0x7a>
 801021e:	682b      	ldr	r3, [r5, #0]
 8010220:	b903      	cbnz	r3, 8010224 <__sflush_r+0x7c>
 8010222:	6560      	str	r0, [r4, #84]	; 0x54
 8010224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010226:	602f      	str	r7, [r5, #0]
 8010228:	2900      	cmp	r1, #0
 801022a:	d0ca      	beq.n	80101c2 <__sflush_r+0x1a>
 801022c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010230:	4299      	cmp	r1, r3
 8010232:	d002      	beq.n	801023a <__sflush_r+0x92>
 8010234:	4628      	mov	r0, r5
 8010236:	f7ff fa9b 	bl	800f770 <_free_r>
 801023a:	2000      	movs	r0, #0
 801023c:	6360      	str	r0, [r4, #52]	; 0x34
 801023e:	e7c1      	b.n	80101c4 <__sflush_r+0x1c>
 8010240:	6a21      	ldr	r1, [r4, #32]
 8010242:	2301      	movs	r3, #1
 8010244:	4628      	mov	r0, r5
 8010246:	47b0      	blx	r6
 8010248:	1c41      	adds	r1, r0, #1
 801024a:	d1c7      	bne.n	80101dc <__sflush_r+0x34>
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d0c4      	beq.n	80101dc <__sflush_r+0x34>
 8010252:	2b1d      	cmp	r3, #29
 8010254:	d001      	beq.n	801025a <__sflush_r+0xb2>
 8010256:	2b16      	cmp	r3, #22
 8010258:	d101      	bne.n	801025e <__sflush_r+0xb6>
 801025a:	602f      	str	r7, [r5, #0]
 801025c:	e7b1      	b.n	80101c2 <__sflush_r+0x1a>
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010264:	81a3      	strh	r3, [r4, #12]
 8010266:	e7ad      	b.n	80101c4 <__sflush_r+0x1c>
 8010268:	690f      	ldr	r7, [r1, #16]
 801026a:	2f00      	cmp	r7, #0
 801026c:	d0a9      	beq.n	80101c2 <__sflush_r+0x1a>
 801026e:	0793      	lsls	r3, r2, #30
 8010270:	680e      	ldr	r6, [r1, #0]
 8010272:	bf08      	it	eq
 8010274:	694b      	ldreq	r3, [r1, #20]
 8010276:	600f      	str	r7, [r1, #0]
 8010278:	bf18      	it	ne
 801027a:	2300      	movne	r3, #0
 801027c:	eba6 0807 	sub.w	r8, r6, r7
 8010280:	608b      	str	r3, [r1, #8]
 8010282:	f1b8 0f00 	cmp.w	r8, #0
 8010286:	dd9c      	ble.n	80101c2 <__sflush_r+0x1a>
 8010288:	6a21      	ldr	r1, [r4, #32]
 801028a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801028c:	4643      	mov	r3, r8
 801028e:	463a      	mov	r2, r7
 8010290:	4628      	mov	r0, r5
 8010292:	47b0      	blx	r6
 8010294:	2800      	cmp	r0, #0
 8010296:	dc06      	bgt.n	80102a6 <__sflush_r+0xfe>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801029e:	81a3      	strh	r3, [r4, #12]
 80102a0:	f04f 30ff 	mov.w	r0, #4294967295
 80102a4:	e78e      	b.n	80101c4 <__sflush_r+0x1c>
 80102a6:	4407      	add	r7, r0
 80102a8:	eba8 0800 	sub.w	r8, r8, r0
 80102ac:	e7e9      	b.n	8010282 <__sflush_r+0xda>
 80102ae:	bf00      	nop
 80102b0:	20400001 	.word	0x20400001

080102b4 <_fflush_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	690b      	ldr	r3, [r1, #16]
 80102b8:	4605      	mov	r5, r0
 80102ba:	460c      	mov	r4, r1
 80102bc:	b913      	cbnz	r3, 80102c4 <_fflush_r+0x10>
 80102be:	2500      	movs	r5, #0
 80102c0:	4628      	mov	r0, r5
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	b118      	cbz	r0, 80102ce <_fflush_r+0x1a>
 80102c6:	6983      	ldr	r3, [r0, #24]
 80102c8:	b90b      	cbnz	r3, 80102ce <_fflush_r+0x1a>
 80102ca:	f000 f887 	bl	80103dc <__sinit>
 80102ce:	4b14      	ldr	r3, [pc, #80]	; (8010320 <_fflush_r+0x6c>)
 80102d0:	429c      	cmp	r4, r3
 80102d2:	d11b      	bne.n	801030c <_fflush_r+0x58>
 80102d4:	686c      	ldr	r4, [r5, #4]
 80102d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d0ef      	beq.n	80102be <_fflush_r+0xa>
 80102de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102e0:	07d0      	lsls	r0, r2, #31
 80102e2:	d404      	bmi.n	80102ee <_fflush_r+0x3a>
 80102e4:	0599      	lsls	r1, r3, #22
 80102e6:	d402      	bmi.n	80102ee <_fflush_r+0x3a>
 80102e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ea:	f000 f915 	bl	8010518 <__retarget_lock_acquire_recursive>
 80102ee:	4628      	mov	r0, r5
 80102f0:	4621      	mov	r1, r4
 80102f2:	f7ff ff59 	bl	80101a8 <__sflush_r>
 80102f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102f8:	07da      	lsls	r2, r3, #31
 80102fa:	4605      	mov	r5, r0
 80102fc:	d4e0      	bmi.n	80102c0 <_fflush_r+0xc>
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	059b      	lsls	r3, r3, #22
 8010302:	d4dd      	bmi.n	80102c0 <_fflush_r+0xc>
 8010304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010306:	f000 f908 	bl	801051a <__retarget_lock_release_recursive>
 801030a:	e7d9      	b.n	80102c0 <_fflush_r+0xc>
 801030c:	4b05      	ldr	r3, [pc, #20]	; (8010324 <_fflush_r+0x70>)
 801030e:	429c      	cmp	r4, r3
 8010310:	d101      	bne.n	8010316 <_fflush_r+0x62>
 8010312:	68ac      	ldr	r4, [r5, #8]
 8010314:	e7df      	b.n	80102d6 <_fflush_r+0x22>
 8010316:	4b04      	ldr	r3, [pc, #16]	; (8010328 <_fflush_r+0x74>)
 8010318:	429c      	cmp	r4, r3
 801031a:	bf08      	it	eq
 801031c:	68ec      	ldreq	r4, [r5, #12]
 801031e:	e7da      	b.n	80102d6 <_fflush_r+0x22>
 8010320:	08013354 	.word	0x08013354
 8010324:	08013374 	.word	0x08013374
 8010328:	08013334 	.word	0x08013334

0801032c <std>:
 801032c:	2300      	movs	r3, #0
 801032e:	b510      	push	{r4, lr}
 8010330:	4604      	mov	r4, r0
 8010332:	e9c0 3300 	strd	r3, r3, [r0]
 8010336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801033a:	6083      	str	r3, [r0, #8]
 801033c:	8181      	strh	r1, [r0, #12]
 801033e:	6643      	str	r3, [r0, #100]	; 0x64
 8010340:	81c2      	strh	r2, [r0, #14]
 8010342:	6183      	str	r3, [r0, #24]
 8010344:	4619      	mov	r1, r3
 8010346:	2208      	movs	r2, #8
 8010348:	305c      	adds	r0, #92	; 0x5c
 801034a:	f7fb fddd 	bl	800bf08 <memset>
 801034e:	4b05      	ldr	r3, [pc, #20]	; (8010364 <std+0x38>)
 8010350:	6263      	str	r3, [r4, #36]	; 0x24
 8010352:	4b05      	ldr	r3, [pc, #20]	; (8010368 <std+0x3c>)
 8010354:	62a3      	str	r3, [r4, #40]	; 0x28
 8010356:	4b05      	ldr	r3, [pc, #20]	; (801036c <std+0x40>)
 8010358:	62e3      	str	r3, [r4, #44]	; 0x2c
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x44>)
 801035c:	6224      	str	r4, [r4, #32]
 801035e:	6323      	str	r3, [r4, #48]	; 0x30
 8010360:	bd10      	pop	{r4, pc}
 8010362:	bf00      	nop
 8010364:	08010681 	.word	0x08010681
 8010368:	080106a3 	.word	0x080106a3
 801036c:	080106db 	.word	0x080106db
 8010370:	080106ff 	.word	0x080106ff

08010374 <_cleanup_r>:
 8010374:	4901      	ldr	r1, [pc, #4]	; (801037c <_cleanup_r+0x8>)
 8010376:	f000 b8af 	b.w	80104d8 <_fwalk_reent>
 801037a:	bf00      	nop
 801037c:	080102b5 	.word	0x080102b5

08010380 <__sfmoreglue>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	2268      	movs	r2, #104	; 0x68
 8010384:	1e4d      	subs	r5, r1, #1
 8010386:	4355      	muls	r5, r2
 8010388:	460e      	mov	r6, r1
 801038a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801038e:	f7ff fa5b 	bl	800f848 <_malloc_r>
 8010392:	4604      	mov	r4, r0
 8010394:	b140      	cbz	r0, 80103a8 <__sfmoreglue+0x28>
 8010396:	2100      	movs	r1, #0
 8010398:	e9c0 1600 	strd	r1, r6, [r0]
 801039c:	300c      	adds	r0, #12
 801039e:	60a0      	str	r0, [r4, #8]
 80103a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103a4:	f7fb fdb0 	bl	800bf08 <memset>
 80103a8:	4620      	mov	r0, r4
 80103aa:	bd70      	pop	{r4, r5, r6, pc}

080103ac <__sfp_lock_acquire>:
 80103ac:	4801      	ldr	r0, [pc, #4]	; (80103b4 <__sfp_lock_acquire+0x8>)
 80103ae:	f000 b8b3 	b.w	8010518 <__retarget_lock_acquire_recursive>
 80103b2:	bf00      	nop
 80103b4:	20002019 	.word	0x20002019

080103b8 <__sfp_lock_release>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__sfp_lock_release+0x8>)
 80103ba:	f000 b8ae 	b.w	801051a <__retarget_lock_release_recursive>
 80103be:	bf00      	nop
 80103c0:	20002019 	.word	0x20002019

080103c4 <__sinit_lock_acquire>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__sinit_lock_acquire+0x8>)
 80103c6:	f000 b8a7 	b.w	8010518 <__retarget_lock_acquire_recursive>
 80103ca:	bf00      	nop
 80103cc:	2000201a 	.word	0x2000201a

080103d0 <__sinit_lock_release>:
 80103d0:	4801      	ldr	r0, [pc, #4]	; (80103d8 <__sinit_lock_release+0x8>)
 80103d2:	f000 b8a2 	b.w	801051a <__retarget_lock_release_recursive>
 80103d6:	bf00      	nop
 80103d8:	2000201a 	.word	0x2000201a

080103dc <__sinit>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	4604      	mov	r4, r0
 80103e0:	f7ff fff0 	bl	80103c4 <__sinit_lock_acquire>
 80103e4:	69a3      	ldr	r3, [r4, #24]
 80103e6:	b11b      	cbz	r3, 80103f0 <__sinit+0x14>
 80103e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ec:	f7ff bff0 	b.w	80103d0 <__sinit_lock_release>
 80103f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103f4:	6523      	str	r3, [r4, #80]	; 0x50
 80103f6:	4b13      	ldr	r3, [pc, #76]	; (8010444 <__sinit+0x68>)
 80103f8:	4a13      	ldr	r2, [pc, #76]	; (8010448 <__sinit+0x6c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80103fe:	42a3      	cmp	r3, r4
 8010400:	bf04      	itt	eq
 8010402:	2301      	moveq	r3, #1
 8010404:	61a3      	streq	r3, [r4, #24]
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f820 	bl	801044c <__sfp>
 801040c:	6060      	str	r0, [r4, #4]
 801040e:	4620      	mov	r0, r4
 8010410:	f000 f81c 	bl	801044c <__sfp>
 8010414:	60a0      	str	r0, [r4, #8]
 8010416:	4620      	mov	r0, r4
 8010418:	f000 f818 	bl	801044c <__sfp>
 801041c:	2200      	movs	r2, #0
 801041e:	60e0      	str	r0, [r4, #12]
 8010420:	2104      	movs	r1, #4
 8010422:	6860      	ldr	r0, [r4, #4]
 8010424:	f7ff ff82 	bl	801032c <std>
 8010428:	68a0      	ldr	r0, [r4, #8]
 801042a:	2201      	movs	r2, #1
 801042c:	2109      	movs	r1, #9
 801042e:	f7ff ff7d 	bl	801032c <std>
 8010432:	68e0      	ldr	r0, [r4, #12]
 8010434:	2202      	movs	r2, #2
 8010436:	2112      	movs	r1, #18
 8010438:	f7ff ff78 	bl	801032c <std>
 801043c:	2301      	movs	r3, #1
 801043e:	61a3      	str	r3, [r4, #24]
 8010440:	e7d2      	b.n	80103e8 <__sinit+0xc>
 8010442:	bf00      	nop
 8010444:	08012eec 	.word	0x08012eec
 8010448:	08010375 	.word	0x08010375

0801044c <__sfp>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	4607      	mov	r7, r0
 8010450:	f7ff ffac 	bl	80103ac <__sfp_lock_acquire>
 8010454:	4b1e      	ldr	r3, [pc, #120]	; (80104d0 <__sfp+0x84>)
 8010456:	681e      	ldr	r6, [r3, #0]
 8010458:	69b3      	ldr	r3, [r6, #24]
 801045a:	b913      	cbnz	r3, 8010462 <__sfp+0x16>
 801045c:	4630      	mov	r0, r6
 801045e:	f7ff ffbd 	bl	80103dc <__sinit>
 8010462:	3648      	adds	r6, #72	; 0x48
 8010464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010468:	3b01      	subs	r3, #1
 801046a:	d503      	bpl.n	8010474 <__sfp+0x28>
 801046c:	6833      	ldr	r3, [r6, #0]
 801046e:	b30b      	cbz	r3, 80104b4 <__sfp+0x68>
 8010470:	6836      	ldr	r6, [r6, #0]
 8010472:	e7f7      	b.n	8010464 <__sfp+0x18>
 8010474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010478:	b9d5      	cbnz	r5, 80104b0 <__sfp+0x64>
 801047a:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <__sfp+0x88>)
 801047c:	60e3      	str	r3, [r4, #12]
 801047e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010482:	6665      	str	r5, [r4, #100]	; 0x64
 8010484:	f000 f847 	bl	8010516 <__retarget_lock_init_recursive>
 8010488:	f7ff ff96 	bl	80103b8 <__sfp_lock_release>
 801048c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010494:	6025      	str	r5, [r4, #0]
 8010496:	61a5      	str	r5, [r4, #24]
 8010498:	2208      	movs	r2, #8
 801049a:	4629      	mov	r1, r5
 801049c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104a0:	f7fb fd32 	bl	800bf08 <memset>
 80104a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104ac:	4620      	mov	r0, r4
 80104ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104b0:	3468      	adds	r4, #104	; 0x68
 80104b2:	e7d9      	b.n	8010468 <__sfp+0x1c>
 80104b4:	2104      	movs	r1, #4
 80104b6:	4638      	mov	r0, r7
 80104b8:	f7ff ff62 	bl	8010380 <__sfmoreglue>
 80104bc:	4604      	mov	r4, r0
 80104be:	6030      	str	r0, [r6, #0]
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d1d5      	bne.n	8010470 <__sfp+0x24>
 80104c4:	f7ff ff78 	bl	80103b8 <__sfp_lock_release>
 80104c8:	230c      	movs	r3, #12
 80104ca:	603b      	str	r3, [r7, #0]
 80104cc:	e7ee      	b.n	80104ac <__sfp+0x60>
 80104ce:	bf00      	nop
 80104d0:	08012eec 	.word	0x08012eec
 80104d4:	ffff0001 	.word	0xffff0001

080104d8 <_fwalk_reent>:
 80104d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104dc:	4606      	mov	r6, r0
 80104de:	4688      	mov	r8, r1
 80104e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104e4:	2700      	movs	r7, #0
 80104e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104ea:	f1b9 0901 	subs.w	r9, r9, #1
 80104ee:	d505      	bpl.n	80104fc <_fwalk_reent+0x24>
 80104f0:	6824      	ldr	r4, [r4, #0]
 80104f2:	2c00      	cmp	r4, #0
 80104f4:	d1f7      	bne.n	80104e6 <_fwalk_reent+0xe>
 80104f6:	4638      	mov	r0, r7
 80104f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fc:	89ab      	ldrh	r3, [r5, #12]
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d907      	bls.n	8010512 <_fwalk_reent+0x3a>
 8010502:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010506:	3301      	adds	r3, #1
 8010508:	d003      	beq.n	8010512 <_fwalk_reent+0x3a>
 801050a:	4629      	mov	r1, r5
 801050c:	4630      	mov	r0, r6
 801050e:	47c0      	blx	r8
 8010510:	4307      	orrs	r7, r0
 8010512:	3568      	adds	r5, #104	; 0x68
 8010514:	e7e9      	b.n	80104ea <_fwalk_reent+0x12>

08010516 <__retarget_lock_init_recursive>:
 8010516:	4770      	bx	lr

08010518 <__retarget_lock_acquire_recursive>:
 8010518:	4770      	bx	lr

0801051a <__retarget_lock_release_recursive>:
 801051a:	4770      	bx	lr

0801051c <__swhatbuf_r>:
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	460e      	mov	r6, r1
 8010520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010524:	2900      	cmp	r1, #0
 8010526:	b096      	sub	sp, #88	; 0x58
 8010528:	4614      	mov	r4, r2
 801052a:	461d      	mov	r5, r3
 801052c:	da08      	bge.n	8010540 <__swhatbuf_r+0x24>
 801052e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010532:	2200      	movs	r2, #0
 8010534:	602a      	str	r2, [r5, #0]
 8010536:	061a      	lsls	r2, r3, #24
 8010538:	d410      	bmi.n	801055c <__swhatbuf_r+0x40>
 801053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801053e:	e00e      	b.n	801055e <__swhatbuf_r+0x42>
 8010540:	466a      	mov	r2, sp
 8010542:	f000 f903 	bl	801074c <_fstat_r>
 8010546:	2800      	cmp	r0, #0
 8010548:	dbf1      	blt.n	801052e <__swhatbuf_r+0x12>
 801054a:	9a01      	ldr	r2, [sp, #4]
 801054c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010554:	425a      	negs	r2, r3
 8010556:	415a      	adcs	r2, r3
 8010558:	602a      	str	r2, [r5, #0]
 801055a:	e7ee      	b.n	801053a <__swhatbuf_r+0x1e>
 801055c:	2340      	movs	r3, #64	; 0x40
 801055e:	2000      	movs	r0, #0
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	b016      	add	sp, #88	; 0x58
 8010564:	bd70      	pop	{r4, r5, r6, pc}
	...

08010568 <__smakebuf_r>:
 8010568:	898b      	ldrh	r3, [r1, #12]
 801056a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801056c:	079d      	lsls	r5, r3, #30
 801056e:	4606      	mov	r6, r0
 8010570:	460c      	mov	r4, r1
 8010572:	d507      	bpl.n	8010584 <__smakebuf_r+0x1c>
 8010574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010578:	6023      	str	r3, [r4, #0]
 801057a:	6123      	str	r3, [r4, #16]
 801057c:	2301      	movs	r3, #1
 801057e:	6163      	str	r3, [r4, #20]
 8010580:	b002      	add	sp, #8
 8010582:	bd70      	pop	{r4, r5, r6, pc}
 8010584:	ab01      	add	r3, sp, #4
 8010586:	466a      	mov	r2, sp
 8010588:	f7ff ffc8 	bl	801051c <__swhatbuf_r>
 801058c:	9900      	ldr	r1, [sp, #0]
 801058e:	4605      	mov	r5, r0
 8010590:	4630      	mov	r0, r6
 8010592:	f7ff f959 	bl	800f848 <_malloc_r>
 8010596:	b948      	cbnz	r0, 80105ac <__smakebuf_r+0x44>
 8010598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801059c:	059a      	lsls	r2, r3, #22
 801059e:	d4ef      	bmi.n	8010580 <__smakebuf_r+0x18>
 80105a0:	f023 0303 	bic.w	r3, r3, #3
 80105a4:	f043 0302 	orr.w	r3, r3, #2
 80105a8:	81a3      	strh	r3, [r4, #12]
 80105aa:	e7e3      	b.n	8010574 <__smakebuf_r+0xc>
 80105ac:	4b0d      	ldr	r3, [pc, #52]	; (80105e4 <__smakebuf_r+0x7c>)
 80105ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	6020      	str	r0, [r4, #0]
 80105b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105b8:	81a3      	strh	r3, [r4, #12]
 80105ba:	9b00      	ldr	r3, [sp, #0]
 80105bc:	6163      	str	r3, [r4, #20]
 80105be:	9b01      	ldr	r3, [sp, #4]
 80105c0:	6120      	str	r0, [r4, #16]
 80105c2:	b15b      	cbz	r3, 80105dc <__smakebuf_r+0x74>
 80105c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105c8:	4630      	mov	r0, r6
 80105ca:	f000 f8d1 	bl	8010770 <_isatty_r>
 80105ce:	b128      	cbz	r0, 80105dc <__smakebuf_r+0x74>
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	f023 0303 	bic.w	r3, r3, #3
 80105d6:	f043 0301 	orr.w	r3, r3, #1
 80105da:	81a3      	strh	r3, [r4, #12]
 80105dc:	89a0      	ldrh	r0, [r4, #12]
 80105de:	4305      	orrs	r5, r0
 80105e0:	81a5      	strh	r5, [r4, #12]
 80105e2:	e7cd      	b.n	8010580 <__smakebuf_r+0x18>
 80105e4:	08010375 	.word	0x08010375

080105e8 <_malloc_usable_size_r>:
 80105e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105ec:	1f18      	subs	r0, r3, #4
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	bfbc      	itt	lt
 80105f2:	580b      	ldrlt	r3, [r1, r0]
 80105f4:	18c0      	addlt	r0, r0, r3
 80105f6:	4770      	bx	lr

080105f8 <_raise_r>:
 80105f8:	291f      	cmp	r1, #31
 80105fa:	b538      	push	{r3, r4, r5, lr}
 80105fc:	4604      	mov	r4, r0
 80105fe:	460d      	mov	r5, r1
 8010600:	d904      	bls.n	801060c <_raise_r+0x14>
 8010602:	2316      	movs	r3, #22
 8010604:	6003      	str	r3, [r0, #0]
 8010606:	f04f 30ff 	mov.w	r0, #4294967295
 801060a:	bd38      	pop	{r3, r4, r5, pc}
 801060c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801060e:	b112      	cbz	r2, 8010616 <_raise_r+0x1e>
 8010610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010614:	b94b      	cbnz	r3, 801062a <_raise_r+0x32>
 8010616:	4620      	mov	r0, r4
 8010618:	f000 f830 	bl	801067c <_getpid_r>
 801061c:	462a      	mov	r2, r5
 801061e:	4601      	mov	r1, r0
 8010620:	4620      	mov	r0, r4
 8010622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010626:	f000 b817 	b.w	8010658 <_kill_r>
 801062a:	2b01      	cmp	r3, #1
 801062c:	d00a      	beq.n	8010644 <_raise_r+0x4c>
 801062e:	1c59      	adds	r1, r3, #1
 8010630:	d103      	bne.n	801063a <_raise_r+0x42>
 8010632:	2316      	movs	r3, #22
 8010634:	6003      	str	r3, [r0, #0]
 8010636:	2001      	movs	r0, #1
 8010638:	e7e7      	b.n	801060a <_raise_r+0x12>
 801063a:	2400      	movs	r4, #0
 801063c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010640:	4628      	mov	r0, r5
 8010642:	4798      	blx	r3
 8010644:	2000      	movs	r0, #0
 8010646:	e7e0      	b.n	801060a <_raise_r+0x12>

08010648 <raise>:
 8010648:	4b02      	ldr	r3, [pc, #8]	; (8010654 <raise+0xc>)
 801064a:	4601      	mov	r1, r0
 801064c:	6818      	ldr	r0, [r3, #0]
 801064e:	f7ff bfd3 	b.w	80105f8 <_raise_r>
 8010652:	bf00      	nop
 8010654:	2000023c 	.word	0x2000023c

08010658 <_kill_r>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4d07      	ldr	r5, [pc, #28]	; (8010678 <_kill_r+0x20>)
 801065c:	2300      	movs	r3, #0
 801065e:	4604      	mov	r4, r0
 8010660:	4608      	mov	r0, r1
 8010662:	4611      	mov	r1, r2
 8010664:	602b      	str	r3, [r5, #0]
 8010666:	f7f4 fcef 	bl	8005048 <_kill>
 801066a:	1c43      	adds	r3, r0, #1
 801066c:	d102      	bne.n	8010674 <_kill_r+0x1c>
 801066e:	682b      	ldr	r3, [r5, #0]
 8010670:	b103      	cbz	r3, 8010674 <_kill_r+0x1c>
 8010672:	6023      	str	r3, [r4, #0]
 8010674:	bd38      	pop	{r3, r4, r5, pc}
 8010676:	bf00      	nop
 8010678:	20002014 	.word	0x20002014

0801067c <_getpid_r>:
 801067c:	f7f4 bcdc 	b.w	8005038 <_getpid>

08010680 <__sread>:
 8010680:	b510      	push	{r4, lr}
 8010682:	460c      	mov	r4, r1
 8010684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010688:	f000 f894 	bl	80107b4 <_read_r>
 801068c:	2800      	cmp	r0, #0
 801068e:	bfab      	itete	ge
 8010690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010692:	89a3      	ldrhlt	r3, [r4, #12]
 8010694:	181b      	addge	r3, r3, r0
 8010696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801069a:	bfac      	ite	ge
 801069c:	6563      	strge	r3, [r4, #84]	; 0x54
 801069e:	81a3      	strhlt	r3, [r4, #12]
 80106a0:	bd10      	pop	{r4, pc}

080106a2 <__swrite>:
 80106a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a6:	461f      	mov	r7, r3
 80106a8:	898b      	ldrh	r3, [r1, #12]
 80106aa:	05db      	lsls	r3, r3, #23
 80106ac:	4605      	mov	r5, r0
 80106ae:	460c      	mov	r4, r1
 80106b0:	4616      	mov	r6, r2
 80106b2:	d505      	bpl.n	80106c0 <__swrite+0x1e>
 80106b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106b8:	2302      	movs	r3, #2
 80106ba:	2200      	movs	r2, #0
 80106bc:	f000 f868 	bl	8010790 <_lseek_r>
 80106c0:	89a3      	ldrh	r3, [r4, #12]
 80106c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106ca:	81a3      	strh	r3, [r4, #12]
 80106cc:	4632      	mov	r2, r6
 80106ce:	463b      	mov	r3, r7
 80106d0:	4628      	mov	r0, r5
 80106d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106d6:	f000 b817 	b.w	8010708 <_write_r>

080106da <__sseek>:
 80106da:	b510      	push	{r4, lr}
 80106dc:	460c      	mov	r4, r1
 80106de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e2:	f000 f855 	bl	8010790 <_lseek_r>
 80106e6:	1c43      	adds	r3, r0, #1
 80106e8:	89a3      	ldrh	r3, [r4, #12]
 80106ea:	bf15      	itete	ne
 80106ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80106ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106f6:	81a3      	strheq	r3, [r4, #12]
 80106f8:	bf18      	it	ne
 80106fa:	81a3      	strhne	r3, [r4, #12]
 80106fc:	bd10      	pop	{r4, pc}

080106fe <__sclose>:
 80106fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010702:	f000 b813 	b.w	801072c <_close_r>
	...

08010708 <_write_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4d07      	ldr	r5, [pc, #28]	; (8010728 <_write_r+0x20>)
 801070c:	4604      	mov	r4, r0
 801070e:	4608      	mov	r0, r1
 8010710:	4611      	mov	r1, r2
 8010712:	2200      	movs	r2, #0
 8010714:	602a      	str	r2, [r5, #0]
 8010716:	461a      	mov	r2, r3
 8010718:	f7f4 fccd 	bl	80050b6 <_write>
 801071c:	1c43      	adds	r3, r0, #1
 801071e:	d102      	bne.n	8010726 <_write_r+0x1e>
 8010720:	682b      	ldr	r3, [r5, #0]
 8010722:	b103      	cbz	r3, 8010726 <_write_r+0x1e>
 8010724:	6023      	str	r3, [r4, #0]
 8010726:	bd38      	pop	{r3, r4, r5, pc}
 8010728:	20002014 	.word	0x20002014

0801072c <_close_r>:
 801072c:	b538      	push	{r3, r4, r5, lr}
 801072e:	4d06      	ldr	r5, [pc, #24]	; (8010748 <_close_r+0x1c>)
 8010730:	2300      	movs	r3, #0
 8010732:	4604      	mov	r4, r0
 8010734:	4608      	mov	r0, r1
 8010736:	602b      	str	r3, [r5, #0]
 8010738:	f7f4 fcd9 	bl	80050ee <_close>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_close_r+0x1a>
 8010740:	682b      	ldr	r3, [r5, #0]
 8010742:	b103      	cbz	r3, 8010746 <_close_r+0x1a>
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	20002014 	.word	0x20002014

0801074c <_fstat_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d07      	ldr	r5, [pc, #28]	; (801076c <_fstat_r+0x20>)
 8010750:	2300      	movs	r3, #0
 8010752:	4604      	mov	r4, r0
 8010754:	4608      	mov	r0, r1
 8010756:	4611      	mov	r1, r2
 8010758:	602b      	str	r3, [r5, #0]
 801075a:	f7f4 fcd4 	bl	8005106 <_fstat>
 801075e:	1c43      	adds	r3, r0, #1
 8010760:	d102      	bne.n	8010768 <_fstat_r+0x1c>
 8010762:	682b      	ldr	r3, [r5, #0]
 8010764:	b103      	cbz	r3, 8010768 <_fstat_r+0x1c>
 8010766:	6023      	str	r3, [r4, #0]
 8010768:	bd38      	pop	{r3, r4, r5, pc}
 801076a:	bf00      	nop
 801076c:	20002014 	.word	0x20002014

08010770 <_isatty_r>:
 8010770:	b538      	push	{r3, r4, r5, lr}
 8010772:	4d06      	ldr	r5, [pc, #24]	; (801078c <_isatty_r+0x1c>)
 8010774:	2300      	movs	r3, #0
 8010776:	4604      	mov	r4, r0
 8010778:	4608      	mov	r0, r1
 801077a:	602b      	str	r3, [r5, #0]
 801077c:	f7f4 fcd3 	bl	8005126 <_isatty>
 8010780:	1c43      	adds	r3, r0, #1
 8010782:	d102      	bne.n	801078a <_isatty_r+0x1a>
 8010784:	682b      	ldr	r3, [r5, #0]
 8010786:	b103      	cbz	r3, 801078a <_isatty_r+0x1a>
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	20002014 	.word	0x20002014

08010790 <_lseek_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	4d07      	ldr	r5, [pc, #28]	; (80107b0 <_lseek_r+0x20>)
 8010794:	4604      	mov	r4, r0
 8010796:	4608      	mov	r0, r1
 8010798:	4611      	mov	r1, r2
 801079a:	2200      	movs	r2, #0
 801079c:	602a      	str	r2, [r5, #0]
 801079e:	461a      	mov	r2, r3
 80107a0:	f7f4 fccc 	bl	800513c <_lseek>
 80107a4:	1c43      	adds	r3, r0, #1
 80107a6:	d102      	bne.n	80107ae <_lseek_r+0x1e>
 80107a8:	682b      	ldr	r3, [r5, #0]
 80107aa:	b103      	cbz	r3, 80107ae <_lseek_r+0x1e>
 80107ac:	6023      	str	r3, [r4, #0]
 80107ae:	bd38      	pop	{r3, r4, r5, pc}
 80107b0:	20002014 	.word	0x20002014

080107b4 <_read_r>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4d07      	ldr	r5, [pc, #28]	; (80107d4 <_read_r+0x20>)
 80107b8:	4604      	mov	r4, r0
 80107ba:	4608      	mov	r0, r1
 80107bc:	4611      	mov	r1, r2
 80107be:	2200      	movs	r2, #0
 80107c0:	602a      	str	r2, [r5, #0]
 80107c2:	461a      	mov	r2, r3
 80107c4:	f7f4 fc5a 	bl	800507c <_read>
 80107c8:	1c43      	adds	r3, r0, #1
 80107ca:	d102      	bne.n	80107d2 <_read_r+0x1e>
 80107cc:	682b      	ldr	r3, [r5, #0]
 80107ce:	b103      	cbz	r3, 80107d2 <_read_r+0x1e>
 80107d0:	6023      	str	r3, [r4, #0]
 80107d2:	bd38      	pop	{r3, r4, r5, pc}
 80107d4:	20002014 	.word	0x20002014

080107d8 <atan>:
 80107d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107dc:	ec55 4b10 	vmov	r4, r5, d0
 80107e0:	4bc3      	ldr	r3, [pc, #780]	; (8010af0 <atan+0x318>)
 80107e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80107e6:	429e      	cmp	r6, r3
 80107e8:	46ab      	mov	fp, r5
 80107ea:	dd18      	ble.n	801081e <atan+0x46>
 80107ec:	4bc1      	ldr	r3, [pc, #772]	; (8010af4 <atan+0x31c>)
 80107ee:	429e      	cmp	r6, r3
 80107f0:	dc01      	bgt.n	80107f6 <atan+0x1e>
 80107f2:	d109      	bne.n	8010808 <atan+0x30>
 80107f4:	b144      	cbz	r4, 8010808 <atan+0x30>
 80107f6:	4622      	mov	r2, r4
 80107f8:	462b      	mov	r3, r5
 80107fa:	4620      	mov	r0, r4
 80107fc:	4629      	mov	r1, r5
 80107fe:	f7ef fd4d 	bl	800029c <__adddf3>
 8010802:	4604      	mov	r4, r0
 8010804:	460d      	mov	r5, r1
 8010806:	e006      	b.n	8010816 <atan+0x3e>
 8010808:	f1bb 0f00 	cmp.w	fp, #0
 801080c:	f300 8131 	bgt.w	8010a72 <atan+0x29a>
 8010810:	a59b      	add	r5, pc, #620	; (adr r5, 8010a80 <atan+0x2a8>)
 8010812:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010816:	ec45 4b10 	vmov	d0, r4, r5
 801081a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081e:	4bb6      	ldr	r3, [pc, #728]	; (8010af8 <atan+0x320>)
 8010820:	429e      	cmp	r6, r3
 8010822:	dc14      	bgt.n	801084e <atan+0x76>
 8010824:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010828:	429e      	cmp	r6, r3
 801082a:	dc0d      	bgt.n	8010848 <atan+0x70>
 801082c:	a396      	add	r3, pc, #600	; (adr r3, 8010a88 <atan+0x2b0>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	ee10 0a10 	vmov	r0, s0
 8010836:	4629      	mov	r1, r5
 8010838:	f7ef fd30 	bl	800029c <__adddf3>
 801083c:	4baf      	ldr	r3, [pc, #700]	; (8010afc <atan+0x324>)
 801083e:	2200      	movs	r2, #0
 8010840:	f7f0 f972 	bl	8000b28 <__aeabi_dcmpgt>
 8010844:	2800      	cmp	r0, #0
 8010846:	d1e6      	bne.n	8010816 <atan+0x3e>
 8010848:	f04f 3aff 	mov.w	sl, #4294967295
 801084c:	e02b      	b.n	80108a6 <atan+0xce>
 801084e:	f000 f9b7 	bl	8010bc0 <fabs>
 8010852:	4bab      	ldr	r3, [pc, #684]	; (8010b00 <atan+0x328>)
 8010854:	429e      	cmp	r6, r3
 8010856:	ec55 4b10 	vmov	r4, r5, d0
 801085a:	f300 80bf 	bgt.w	80109dc <atan+0x204>
 801085e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010862:	429e      	cmp	r6, r3
 8010864:	f300 80a0 	bgt.w	80109a8 <atan+0x1d0>
 8010868:	ee10 2a10 	vmov	r2, s0
 801086c:	ee10 0a10 	vmov	r0, s0
 8010870:	462b      	mov	r3, r5
 8010872:	4629      	mov	r1, r5
 8010874:	f7ef fd12 	bl	800029c <__adddf3>
 8010878:	4ba0      	ldr	r3, [pc, #640]	; (8010afc <atan+0x324>)
 801087a:	2200      	movs	r2, #0
 801087c:	f7ef fd0c 	bl	8000298 <__aeabi_dsub>
 8010880:	2200      	movs	r2, #0
 8010882:	4606      	mov	r6, r0
 8010884:	460f      	mov	r7, r1
 8010886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801088a:	4620      	mov	r0, r4
 801088c:	4629      	mov	r1, r5
 801088e:	f7ef fd05 	bl	800029c <__adddf3>
 8010892:	4602      	mov	r2, r0
 8010894:	460b      	mov	r3, r1
 8010896:	4630      	mov	r0, r6
 8010898:	4639      	mov	r1, r7
 801089a:	f7ef ffdf 	bl	800085c <__aeabi_ddiv>
 801089e:	f04f 0a00 	mov.w	sl, #0
 80108a2:	4604      	mov	r4, r0
 80108a4:	460d      	mov	r5, r1
 80108a6:	4622      	mov	r2, r4
 80108a8:	462b      	mov	r3, r5
 80108aa:	4620      	mov	r0, r4
 80108ac:	4629      	mov	r1, r5
 80108ae:	f7ef feab 	bl	8000608 <__aeabi_dmul>
 80108b2:	4602      	mov	r2, r0
 80108b4:	460b      	mov	r3, r1
 80108b6:	4680      	mov	r8, r0
 80108b8:	4689      	mov	r9, r1
 80108ba:	f7ef fea5 	bl	8000608 <__aeabi_dmul>
 80108be:	a374      	add	r3, pc, #464	; (adr r3, 8010a90 <atan+0x2b8>)
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	4606      	mov	r6, r0
 80108c6:	460f      	mov	r7, r1
 80108c8:	f7ef fe9e 	bl	8000608 <__aeabi_dmul>
 80108cc:	a372      	add	r3, pc, #456	; (adr r3, 8010a98 <atan+0x2c0>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7ef fce3 	bl	800029c <__adddf3>
 80108d6:	4632      	mov	r2, r6
 80108d8:	463b      	mov	r3, r7
 80108da:	f7ef fe95 	bl	8000608 <__aeabi_dmul>
 80108de:	a370      	add	r3, pc, #448	; (adr r3, 8010aa0 <atan+0x2c8>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	f7ef fcda 	bl	800029c <__adddf3>
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	f7ef fe8c 	bl	8000608 <__aeabi_dmul>
 80108f0:	a36d      	add	r3, pc, #436	; (adr r3, 8010aa8 <atan+0x2d0>)
 80108f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f6:	f7ef fcd1 	bl	800029c <__adddf3>
 80108fa:	4632      	mov	r2, r6
 80108fc:	463b      	mov	r3, r7
 80108fe:	f7ef fe83 	bl	8000608 <__aeabi_dmul>
 8010902:	a36b      	add	r3, pc, #428	; (adr r3, 8010ab0 <atan+0x2d8>)
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	f7ef fcc8 	bl	800029c <__adddf3>
 801090c:	4632      	mov	r2, r6
 801090e:	463b      	mov	r3, r7
 8010910:	f7ef fe7a 	bl	8000608 <__aeabi_dmul>
 8010914:	a368      	add	r3, pc, #416	; (adr r3, 8010ab8 <atan+0x2e0>)
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	f7ef fcbf 	bl	800029c <__adddf3>
 801091e:	4642      	mov	r2, r8
 8010920:	464b      	mov	r3, r9
 8010922:	f7ef fe71 	bl	8000608 <__aeabi_dmul>
 8010926:	a366      	add	r3, pc, #408	; (adr r3, 8010ac0 <atan+0x2e8>)
 8010928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092c:	4680      	mov	r8, r0
 801092e:	4689      	mov	r9, r1
 8010930:	4630      	mov	r0, r6
 8010932:	4639      	mov	r1, r7
 8010934:	f7ef fe68 	bl	8000608 <__aeabi_dmul>
 8010938:	a363      	add	r3, pc, #396	; (adr r3, 8010ac8 <atan+0x2f0>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	f7ef fcab 	bl	8000298 <__aeabi_dsub>
 8010942:	4632      	mov	r2, r6
 8010944:	463b      	mov	r3, r7
 8010946:	f7ef fe5f 	bl	8000608 <__aeabi_dmul>
 801094a:	a361      	add	r3, pc, #388	; (adr r3, 8010ad0 <atan+0x2f8>)
 801094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010950:	f7ef fca2 	bl	8000298 <__aeabi_dsub>
 8010954:	4632      	mov	r2, r6
 8010956:	463b      	mov	r3, r7
 8010958:	f7ef fe56 	bl	8000608 <__aeabi_dmul>
 801095c:	a35e      	add	r3, pc, #376	; (adr r3, 8010ad8 <atan+0x300>)
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	f7ef fc99 	bl	8000298 <__aeabi_dsub>
 8010966:	4632      	mov	r2, r6
 8010968:	463b      	mov	r3, r7
 801096a:	f7ef fe4d 	bl	8000608 <__aeabi_dmul>
 801096e:	a35c      	add	r3, pc, #368	; (adr r3, 8010ae0 <atan+0x308>)
 8010970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010974:	f7ef fc90 	bl	8000298 <__aeabi_dsub>
 8010978:	4632      	mov	r2, r6
 801097a:	463b      	mov	r3, r7
 801097c:	f7ef fe44 	bl	8000608 <__aeabi_dmul>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4640      	mov	r0, r8
 8010986:	4649      	mov	r1, r9
 8010988:	f7ef fc88 	bl	800029c <__adddf3>
 801098c:	4622      	mov	r2, r4
 801098e:	462b      	mov	r3, r5
 8010990:	f7ef fe3a 	bl	8000608 <__aeabi_dmul>
 8010994:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010998:	4602      	mov	r2, r0
 801099a:	460b      	mov	r3, r1
 801099c:	d14b      	bne.n	8010a36 <atan+0x25e>
 801099e:	4620      	mov	r0, r4
 80109a0:	4629      	mov	r1, r5
 80109a2:	f7ef fc79 	bl	8000298 <__aeabi_dsub>
 80109a6:	e72c      	b.n	8010802 <atan+0x2a>
 80109a8:	ee10 0a10 	vmov	r0, s0
 80109ac:	4b53      	ldr	r3, [pc, #332]	; (8010afc <atan+0x324>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	4629      	mov	r1, r5
 80109b2:	f7ef fc71 	bl	8000298 <__aeabi_dsub>
 80109b6:	4b51      	ldr	r3, [pc, #324]	; (8010afc <atan+0x324>)
 80109b8:	4606      	mov	r6, r0
 80109ba:	460f      	mov	r7, r1
 80109bc:	2200      	movs	r2, #0
 80109be:	4620      	mov	r0, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	f7ef fc6b 	bl	800029c <__adddf3>
 80109c6:	4602      	mov	r2, r0
 80109c8:	460b      	mov	r3, r1
 80109ca:	4630      	mov	r0, r6
 80109cc:	4639      	mov	r1, r7
 80109ce:	f7ef ff45 	bl	800085c <__aeabi_ddiv>
 80109d2:	f04f 0a01 	mov.w	sl, #1
 80109d6:	4604      	mov	r4, r0
 80109d8:	460d      	mov	r5, r1
 80109da:	e764      	b.n	80108a6 <atan+0xce>
 80109dc:	4b49      	ldr	r3, [pc, #292]	; (8010b04 <atan+0x32c>)
 80109de:	429e      	cmp	r6, r3
 80109e0:	da1d      	bge.n	8010a1e <atan+0x246>
 80109e2:	ee10 0a10 	vmov	r0, s0
 80109e6:	4b48      	ldr	r3, [pc, #288]	; (8010b08 <atan+0x330>)
 80109e8:	2200      	movs	r2, #0
 80109ea:	4629      	mov	r1, r5
 80109ec:	f7ef fc54 	bl	8000298 <__aeabi_dsub>
 80109f0:	4b45      	ldr	r3, [pc, #276]	; (8010b08 <atan+0x330>)
 80109f2:	4606      	mov	r6, r0
 80109f4:	460f      	mov	r7, r1
 80109f6:	2200      	movs	r2, #0
 80109f8:	4620      	mov	r0, r4
 80109fa:	4629      	mov	r1, r5
 80109fc:	f7ef fe04 	bl	8000608 <__aeabi_dmul>
 8010a00:	4b3e      	ldr	r3, [pc, #248]	; (8010afc <atan+0x324>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	f7ef fc4a 	bl	800029c <__adddf3>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	4639      	mov	r1, r7
 8010a10:	f7ef ff24 	bl	800085c <__aeabi_ddiv>
 8010a14:	f04f 0a02 	mov.w	sl, #2
 8010a18:	4604      	mov	r4, r0
 8010a1a:	460d      	mov	r5, r1
 8010a1c:	e743      	b.n	80108a6 <atan+0xce>
 8010a1e:	462b      	mov	r3, r5
 8010a20:	ee10 2a10 	vmov	r2, s0
 8010a24:	4939      	ldr	r1, [pc, #228]	; (8010b0c <atan+0x334>)
 8010a26:	2000      	movs	r0, #0
 8010a28:	f7ef ff18 	bl	800085c <__aeabi_ddiv>
 8010a2c:	f04f 0a03 	mov.w	sl, #3
 8010a30:	4604      	mov	r4, r0
 8010a32:	460d      	mov	r5, r1
 8010a34:	e737      	b.n	80108a6 <atan+0xce>
 8010a36:	4b36      	ldr	r3, [pc, #216]	; (8010b10 <atan+0x338>)
 8010a38:	4e36      	ldr	r6, [pc, #216]	; (8010b14 <atan+0x33c>)
 8010a3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010a3e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010a42:	e9da 2300 	ldrd	r2, r3, [sl]
 8010a46:	f7ef fc27 	bl	8000298 <__aeabi_dsub>
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	462b      	mov	r3, r5
 8010a4e:	f7ef fc23 	bl	8000298 <__aeabi_dsub>
 8010a52:	4602      	mov	r2, r0
 8010a54:	460b      	mov	r3, r1
 8010a56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010a5a:	f7ef fc1d 	bl	8000298 <__aeabi_dsub>
 8010a5e:	f1bb 0f00 	cmp.w	fp, #0
 8010a62:	4604      	mov	r4, r0
 8010a64:	460d      	mov	r5, r1
 8010a66:	f6bf aed6 	bge.w	8010816 <atan+0x3e>
 8010a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a6e:	461d      	mov	r5, r3
 8010a70:	e6d1      	b.n	8010816 <atan+0x3e>
 8010a72:	a51d      	add	r5, pc, #116	; (adr r5, 8010ae8 <atan+0x310>)
 8010a74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a78:	e6cd      	b.n	8010816 <atan+0x3e>
 8010a7a:	bf00      	nop
 8010a7c:	f3af 8000 	nop.w
 8010a80:	54442d18 	.word	0x54442d18
 8010a84:	bff921fb 	.word	0xbff921fb
 8010a88:	8800759c 	.word	0x8800759c
 8010a8c:	7e37e43c 	.word	0x7e37e43c
 8010a90:	e322da11 	.word	0xe322da11
 8010a94:	3f90ad3a 	.word	0x3f90ad3a
 8010a98:	24760deb 	.word	0x24760deb
 8010a9c:	3fa97b4b 	.word	0x3fa97b4b
 8010aa0:	a0d03d51 	.word	0xa0d03d51
 8010aa4:	3fb10d66 	.word	0x3fb10d66
 8010aa8:	c54c206e 	.word	0xc54c206e
 8010aac:	3fb745cd 	.word	0x3fb745cd
 8010ab0:	920083ff 	.word	0x920083ff
 8010ab4:	3fc24924 	.word	0x3fc24924
 8010ab8:	5555550d 	.word	0x5555550d
 8010abc:	3fd55555 	.word	0x3fd55555
 8010ac0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010ac4:	bfa2b444 	.word	0xbfa2b444
 8010ac8:	52defd9a 	.word	0x52defd9a
 8010acc:	3fadde2d 	.word	0x3fadde2d
 8010ad0:	af749a6d 	.word	0xaf749a6d
 8010ad4:	3fb3b0f2 	.word	0x3fb3b0f2
 8010ad8:	fe231671 	.word	0xfe231671
 8010adc:	3fbc71c6 	.word	0x3fbc71c6
 8010ae0:	9998ebc4 	.word	0x9998ebc4
 8010ae4:	3fc99999 	.word	0x3fc99999
 8010ae8:	54442d18 	.word	0x54442d18
 8010aec:	3ff921fb 	.word	0x3ff921fb
 8010af0:	440fffff 	.word	0x440fffff
 8010af4:	7ff00000 	.word	0x7ff00000
 8010af8:	3fdbffff 	.word	0x3fdbffff
 8010afc:	3ff00000 	.word	0x3ff00000
 8010b00:	3ff2ffff 	.word	0x3ff2ffff
 8010b04:	40038000 	.word	0x40038000
 8010b08:	3ff80000 	.word	0x3ff80000
 8010b0c:	bff00000 	.word	0xbff00000
 8010b10:	080133b8 	.word	0x080133b8
 8010b14:	08013398 	.word	0x08013398

08010b18 <cos>:
 8010b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b1a:	ec53 2b10 	vmov	r2, r3, d0
 8010b1e:	4826      	ldr	r0, [pc, #152]	; (8010bb8 <cos+0xa0>)
 8010b20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b24:	4281      	cmp	r1, r0
 8010b26:	dc06      	bgt.n	8010b36 <cos+0x1e>
 8010b28:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010bb0 <cos+0x98>
 8010b2c:	b005      	add	sp, #20
 8010b2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b32:	f000 bded 	b.w	8011710 <__kernel_cos>
 8010b36:	4821      	ldr	r0, [pc, #132]	; (8010bbc <cos+0xa4>)
 8010b38:	4281      	cmp	r1, r0
 8010b3a:	dd09      	ble.n	8010b50 <cos+0x38>
 8010b3c:	ee10 0a10 	vmov	r0, s0
 8010b40:	4619      	mov	r1, r3
 8010b42:	f7ef fba9 	bl	8000298 <__aeabi_dsub>
 8010b46:	ec41 0b10 	vmov	d0, r0, r1
 8010b4a:	b005      	add	sp, #20
 8010b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b50:	4668      	mov	r0, sp
 8010b52:	f000 f961 	bl	8010e18 <__ieee754_rem_pio2>
 8010b56:	f000 0003 	and.w	r0, r0, #3
 8010b5a:	2801      	cmp	r0, #1
 8010b5c:	d00b      	beq.n	8010b76 <cos+0x5e>
 8010b5e:	2802      	cmp	r0, #2
 8010b60:	d016      	beq.n	8010b90 <cos+0x78>
 8010b62:	b9e0      	cbnz	r0, 8010b9e <cos+0x86>
 8010b64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b68:	ed9d 0b00 	vldr	d0, [sp]
 8010b6c:	f000 fdd0 	bl	8011710 <__kernel_cos>
 8010b70:	ec51 0b10 	vmov	r0, r1, d0
 8010b74:	e7e7      	b.n	8010b46 <cos+0x2e>
 8010b76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b7a:	ed9d 0b00 	vldr	d0, [sp]
 8010b7e:	f001 f9df 	bl	8011f40 <__kernel_sin>
 8010b82:	ec53 2b10 	vmov	r2, r3, d0
 8010b86:	ee10 0a10 	vmov	r0, s0
 8010b8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010b8e:	e7da      	b.n	8010b46 <cos+0x2e>
 8010b90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b94:	ed9d 0b00 	vldr	d0, [sp]
 8010b98:	f000 fdba 	bl	8011710 <__kernel_cos>
 8010b9c:	e7f1      	b.n	8010b82 <cos+0x6a>
 8010b9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ba2:	ed9d 0b00 	vldr	d0, [sp]
 8010ba6:	2001      	movs	r0, #1
 8010ba8:	f001 f9ca 	bl	8011f40 <__kernel_sin>
 8010bac:	e7e0      	b.n	8010b70 <cos+0x58>
 8010bae:	bf00      	nop
	...
 8010bb8:	3fe921fb 	.word	0x3fe921fb
 8010bbc:	7fefffff 	.word	0x7fefffff

08010bc0 <fabs>:
 8010bc0:	ec51 0b10 	vmov	r0, r1, d0
 8010bc4:	ee10 2a10 	vmov	r2, s0
 8010bc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010bcc:	ec43 2b10 	vmov	d0, r2, r3
 8010bd0:	4770      	bx	lr
 8010bd2:	0000      	movs	r0, r0
 8010bd4:	0000      	movs	r0, r0
	...

08010bd8 <sin>:
 8010bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bda:	ec53 2b10 	vmov	r2, r3, d0
 8010bde:	4828      	ldr	r0, [pc, #160]	; (8010c80 <sin+0xa8>)
 8010be0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010be4:	4281      	cmp	r1, r0
 8010be6:	dc07      	bgt.n	8010bf8 <sin+0x20>
 8010be8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010c78 <sin+0xa0>
 8010bec:	2000      	movs	r0, #0
 8010bee:	b005      	add	sp, #20
 8010bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bf4:	f001 b9a4 	b.w	8011f40 <__kernel_sin>
 8010bf8:	4822      	ldr	r0, [pc, #136]	; (8010c84 <sin+0xac>)
 8010bfa:	4281      	cmp	r1, r0
 8010bfc:	dd09      	ble.n	8010c12 <sin+0x3a>
 8010bfe:	ee10 0a10 	vmov	r0, s0
 8010c02:	4619      	mov	r1, r3
 8010c04:	f7ef fb48 	bl	8000298 <__aeabi_dsub>
 8010c08:	ec41 0b10 	vmov	d0, r0, r1
 8010c0c:	b005      	add	sp, #20
 8010c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c12:	4668      	mov	r0, sp
 8010c14:	f000 f900 	bl	8010e18 <__ieee754_rem_pio2>
 8010c18:	f000 0003 	and.w	r0, r0, #3
 8010c1c:	2801      	cmp	r0, #1
 8010c1e:	d00c      	beq.n	8010c3a <sin+0x62>
 8010c20:	2802      	cmp	r0, #2
 8010c22:	d011      	beq.n	8010c48 <sin+0x70>
 8010c24:	b9f0      	cbnz	r0, 8010c64 <sin+0x8c>
 8010c26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c2a:	ed9d 0b00 	vldr	d0, [sp]
 8010c2e:	2001      	movs	r0, #1
 8010c30:	f001 f986 	bl	8011f40 <__kernel_sin>
 8010c34:	ec51 0b10 	vmov	r0, r1, d0
 8010c38:	e7e6      	b.n	8010c08 <sin+0x30>
 8010c3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c3e:	ed9d 0b00 	vldr	d0, [sp]
 8010c42:	f000 fd65 	bl	8011710 <__kernel_cos>
 8010c46:	e7f5      	b.n	8010c34 <sin+0x5c>
 8010c48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c4c:	ed9d 0b00 	vldr	d0, [sp]
 8010c50:	2001      	movs	r0, #1
 8010c52:	f001 f975 	bl	8011f40 <__kernel_sin>
 8010c56:	ec53 2b10 	vmov	r2, r3, d0
 8010c5a:	ee10 0a10 	vmov	r0, s0
 8010c5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010c62:	e7d1      	b.n	8010c08 <sin+0x30>
 8010c64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c68:	ed9d 0b00 	vldr	d0, [sp]
 8010c6c:	f000 fd50 	bl	8011710 <__kernel_cos>
 8010c70:	e7f1      	b.n	8010c56 <sin+0x7e>
 8010c72:	bf00      	nop
 8010c74:	f3af 8000 	nop.w
	...
 8010c80:	3fe921fb 	.word	0x3fe921fb
 8010c84:	7fefffff 	.word	0x7fefffff

08010c88 <tan>:
 8010c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c8a:	ec53 2b10 	vmov	r2, r3, d0
 8010c8e:	4816      	ldr	r0, [pc, #88]	; (8010ce8 <tan+0x60>)
 8010c90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010c94:	4281      	cmp	r1, r0
 8010c96:	dc07      	bgt.n	8010ca8 <tan+0x20>
 8010c98:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010ce0 <tan+0x58>
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	b005      	add	sp, #20
 8010ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ca4:	f001 ba0c 	b.w	80120c0 <__kernel_tan>
 8010ca8:	4810      	ldr	r0, [pc, #64]	; (8010cec <tan+0x64>)
 8010caa:	4281      	cmp	r1, r0
 8010cac:	dd09      	ble.n	8010cc2 <tan+0x3a>
 8010cae:	ee10 0a10 	vmov	r0, s0
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	f7ef faf0 	bl	8000298 <__aeabi_dsub>
 8010cb8:	ec41 0b10 	vmov	d0, r0, r1
 8010cbc:	b005      	add	sp, #20
 8010cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cc2:	4668      	mov	r0, sp
 8010cc4:	f000 f8a8 	bl	8010e18 <__ieee754_rem_pio2>
 8010cc8:	0040      	lsls	r0, r0, #1
 8010cca:	f000 0002 	and.w	r0, r0, #2
 8010cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010cd2:	ed9d 0b00 	vldr	d0, [sp]
 8010cd6:	f1c0 0001 	rsb	r0, r0, #1
 8010cda:	f001 f9f1 	bl	80120c0 <__kernel_tan>
 8010cde:	e7ed      	b.n	8010cbc <tan+0x34>
	...
 8010ce8:	3fe921fb 	.word	0x3fe921fb
 8010cec:	7fefffff 	.word	0x7fefffff

08010cf0 <sinf>:
 8010cf0:	ee10 3a10 	vmov	r3, s0
 8010cf4:	b507      	push	{r0, r1, r2, lr}
 8010cf6:	4a1f      	ldr	r2, [pc, #124]	; (8010d74 <sinf+0x84>)
 8010cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	dc07      	bgt.n	8010d10 <sinf+0x20>
 8010d00:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010d78 <sinf+0x88>
 8010d04:	2000      	movs	r0, #0
 8010d06:	b003      	add	sp, #12
 8010d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d0c:	f001 beb8 	b.w	8012a80 <__kernel_sinf>
 8010d10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010d14:	db04      	blt.n	8010d20 <sinf+0x30>
 8010d16:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010d1a:	b003      	add	sp, #12
 8010d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d20:	4668      	mov	r0, sp
 8010d22:	f000 fbb9 	bl	8011498 <__ieee754_rem_pio2f>
 8010d26:	f000 0003 	and.w	r0, r0, #3
 8010d2a:	2801      	cmp	r0, #1
 8010d2c:	d00a      	beq.n	8010d44 <sinf+0x54>
 8010d2e:	2802      	cmp	r0, #2
 8010d30:	d00f      	beq.n	8010d52 <sinf+0x62>
 8010d32:	b9c0      	cbnz	r0, 8010d66 <sinf+0x76>
 8010d34:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d38:	ed9d 0a00 	vldr	s0, [sp]
 8010d3c:	2001      	movs	r0, #1
 8010d3e:	f001 fe9f 	bl	8012a80 <__kernel_sinf>
 8010d42:	e7ea      	b.n	8010d1a <sinf+0x2a>
 8010d44:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d48:	ed9d 0a00 	vldr	s0, [sp]
 8010d4c:	f001 fbc2 	bl	80124d4 <__kernel_cosf>
 8010d50:	e7e3      	b.n	8010d1a <sinf+0x2a>
 8010d52:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d56:	ed9d 0a00 	vldr	s0, [sp]
 8010d5a:	2001      	movs	r0, #1
 8010d5c:	f001 fe90 	bl	8012a80 <__kernel_sinf>
 8010d60:	eeb1 0a40 	vneg.f32	s0, s0
 8010d64:	e7d9      	b.n	8010d1a <sinf+0x2a>
 8010d66:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d6a:	ed9d 0a00 	vldr	s0, [sp]
 8010d6e:	f001 fbb1 	bl	80124d4 <__kernel_cosf>
 8010d72:	e7f5      	b.n	8010d60 <sinf+0x70>
 8010d74:	3f490fd8 	.word	0x3f490fd8
 8010d78:	00000000 	.word	0x00000000

08010d7c <sqrt>:
 8010d7c:	b538      	push	{r3, r4, r5, lr}
 8010d7e:	ed2d 8b02 	vpush	{d8}
 8010d82:	ec55 4b10 	vmov	r4, r5, d0
 8010d86:	f000 fa53 	bl	8011230 <__ieee754_sqrt>
 8010d8a:	4622      	mov	r2, r4
 8010d8c:	462b      	mov	r3, r5
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	eeb0 8a40 	vmov.f32	s16, s0
 8010d96:	eef0 8a60 	vmov.f32	s17, s1
 8010d9a:	f7ef fecf 	bl	8000b3c <__aeabi_dcmpun>
 8010d9e:	b990      	cbnz	r0, 8010dc6 <sqrt+0x4a>
 8010da0:	2200      	movs	r2, #0
 8010da2:	2300      	movs	r3, #0
 8010da4:	4620      	mov	r0, r4
 8010da6:	4629      	mov	r1, r5
 8010da8:	f7ef fea0 	bl	8000aec <__aeabi_dcmplt>
 8010dac:	b158      	cbz	r0, 8010dc6 <sqrt+0x4a>
 8010dae:	f7fb f873 	bl	800be98 <__errno>
 8010db2:	2321      	movs	r3, #33	; 0x21
 8010db4:	6003      	str	r3, [r0, #0]
 8010db6:	2200      	movs	r2, #0
 8010db8:	2300      	movs	r3, #0
 8010dba:	4610      	mov	r0, r2
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	f7ef fd4d 	bl	800085c <__aeabi_ddiv>
 8010dc2:	ec41 0b18 	vmov	d8, r0, r1
 8010dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8010dca:	eef0 0a68 	vmov.f32	s1, s17
 8010dce:	ecbd 8b02 	vpop	{d8}
 8010dd2:	bd38      	pop	{r3, r4, r5, pc}

08010dd4 <fmodf>:
 8010dd4:	b508      	push	{r3, lr}
 8010dd6:	ed2d 8b02 	vpush	{d8}
 8010dda:	eef0 8a40 	vmov.f32	s17, s0
 8010dde:	eeb0 8a60 	vmov.f32	s16, s1
 8010de2:	f000 fad7 	bl	8011394 <__ieee754_fmodf>
 8010de6:	eef4 8a48 	vcmp.f32	s17, s16
 8010dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dee:	d60c      	bvs.n	8010e0a <fmodf+0x36>
 8010df0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010e10 <fmodf+0x3c>
 8010df4:	eeb4 8a68 	vcmp.f32	s16, s17
 8010df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfc:	d105      	bne.n	8010e0a <fmodf+0x36>
 8010dfe:	f7fb f84b 	bl	800be98 <__errno>
 8010e02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010e06:	2321      	movs	r3, #33	; 0x21
 8010e08:	6003      	str	r3, [r0, #0]
 8010e0a:	ecbd 8b02 	vpop	{d8}
 8010e0e:	bd08      	pop	{r3, pc}
	...

08010e18 <__ieee754_rem_pio2>:
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	ed2d 8b02 	vpush	{d8}
 8010e20:	ec55 4b10 	vmov	r4, r5, d0
 8010e24:	4bca      	ldr	r3, [pc, #808]	; (8011150 <__ieee754_rem_pio2+0x338>)
 8010e26:	b08b      	sub	sp, #44	; 0x2c
 8010e28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010e2c:	4598      	cmp	r8, r3
 8010e2e:	4682      	mov	sl, r0
 8010e30:	9502      	str	r5, [sp, #8]
 8010e32:	dc08      	bgt.n	8010e46 <__ieee754_rem_pio2+0x2e>
 8010e34:	2200      	movs	r2, #0
 8010e36:	2300      	movs	r3, #0
 8010e38:	ed80 0b00 	vstr	d0, [r0]
 8010e3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010e40:	f04f 0b00 	mov.w	fp, #0
 8010e44:	e028      	b.n	8010e98 <__ieee754_rem_pio2+0x80>
 8010e46:	4bc3      	ldr	r3, [pc, #780]	; (8011154 <__ieee754_rem_pio2+0x33c>)
 8010e48:	4598      	cmp	r8, r3
 8010e4a:	dc78      	bgt.n	8010f3e <__ieee754_rem_pio2+0x126>
 8010e4c:	9b02      	ldr	r3, [sp, #8]
 8010e4e:	4ec2      	ldr	r6, [pc, #776]	; (8011158 <__ieee754_rem_pio2+0x340>)
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	ee10 0a10 	vmov	r0, s0
 8010e56:	a3b0      	add	r3, pc, #704	; (adr r3, 8011118 <__ieee754_rem_pio2+0x300>)
 8010e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	dd39      	ble.n	8010ed4 <__ieee754_rem_pio2+0xbc>
 8010e60:	f7ef fa1a 	bl	8000298 <__aeabi_dsub>
 8010e64:	45b0      	cmp	r8, r6
 8010e66:	4604      	mov	r4, r0
 8010e68:	460d      	mov	r5, r1
 8010e6a:	d01b      	beq.n	8010ea4 <__ieee754_rem_pio2+0x8c>
 8010e6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8011120 <__ieee754_rem_pio2+0x308>)
 8010e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e72:	f7ef fa11 	bl	8000298 <__aeabi_dsub>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	e9ca 2300 	strd	r2, r3, [sl]
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fa09 	bl	8000298 <__aeabi_dsub>
 8010e86:	a3a6      	add	r3, pc, #664	; (adr r3, 8011120 <__ieee754_rem_pio2+0x308>)
 8010e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8c:	f7ef fa04 	bl	8000298 <__aeabi_dsub>
 8010e90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e94:	f04f 0b01 	mov.w	fp, #1
 8010e98:	4658      	mov	r0, fp
 8010e9a:	b00b      	add	sp, #44	; 0x2c
 8010e9c:	ecbd 8b02 	vpop	{d8}
 8010ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea4:	a3a0      	add	r3, pc, #640	; (adr r3, 8011128 <__ieee754_rem_pio2+0x310>)
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	f7ef f9f5 	bl	8000298 <__aeabi_dsub>
 8010eae:	a3a0      	add	r3, pc, #640	; (adr r3, 8011130 <__ieee754_rem_pio2+0x318>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	f7ef f9ee 	bl	8000298 <__aeabi_dsub>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	e9ca 2300 	strd	r2, r3, [sl]
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	f7ef f9e6 	bl	8000298 <__aeabi_dsub>
 8010ecc:	a398      	add	r3, pc, #608	; (adr r3, 8011130 <__ieee754_rem_pio2+0x318>)
 8010ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed2:	e7db      	b.n	8010e8c <__ieee754_rem_pio2+0x74>
 8010ed4:	f7ef f9e2 	bl	800029c <__adddf3>
 8010ed8:	45b0      	cmp	r8, r6
 8010eda:	4604      	mov	r4, r0
 8010edc:	460d      	mov	r5, r1
 8010ede:	d016      	beq.n	8010f0e <__ieee754_rem_pio2+0xf6>
 8010ee0:	a38f      	add	r3, pc, #572	; (adr r3, 8011120 <__ieee754_rem_pio2+0x308>)
 8010ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee6:	f7ef f9d9 	bl	800029c <__adddf3>
 8010eea:	4602      	mov	r2, r0
 8010eec:	460b      	mov	r3, r1
 8010eee:	e9ca 2300 	strd	r2, r3, [sl]
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	4629      	mov	r1, r5
 8010ef6:	f7ef f9cf 	bl	8000298 <__aeabi_dsub>
 8010efa:	a389      	add	r3, pc, #548	; (adr r3, 8011120 <__ieee754_rem_pio2+0x308>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	f7ef f9cc 	bl	800029c <__adddf3>
 8010f04:	f04f 3bff 	mov.w	fp, #4294967295
 8010f08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f0c:	e7c4      	b.n	8010e98 <__ieee754_rem_pio2+0x80>
 8010f0e:	a386      	add	r3, pc, #536	; (adr r3, 8011128 <__ieee754_rem_pio2+0x310>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	f7ef f9c2 	bl	800029c <__adddf3>
 8010f18:	a385      	add	r3, pc, #532	; (adr r3, 8011130 <__ieee754_rem_pio2+0x318>)
 8010f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1e:	4604      	mov	r4, r0
 8010f20:	460d      	mov	r5, r1
 8010f22:	f7ef f9bb 	bl	800029c <__adddf3>
 8010f26:	4602      	mov	r2, r0
 8010f28:	460b      	mov	r3, r1
 8010f2a:	e9ca 2300 	strd	r2, r3, [sl]
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4629      	mov	r1, r5
 8010f32:	f7ef f9b1 	bl	8000298 <__aeabi_dsub>
 8010f36:	a37e      	add	r3, pc, #504	; (adr r3, 8011130 <__ieee754_rem_pio2+0x318>)
 8010f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3c:	e7e0      	b.n	8010f00 <__ieee754_rem_pio2+0xe8>
 8010f3e:	4b87      	ldr	r3, [pc, #540]	; (801115c <__ieee754_rem_pio2+0x344>)
 8010f40:	4598      	cmp	r8, r3
 8010f42:	f300 80d9 	bgt.w	80110f8 <__ieee754_rem_pio2+0x2e0>
 8010f46:	f7ff fe3b 	bl	8010bc0 <fabs>
 8010f4a:	ec55 4b10 	vmov	r4, r5, d0
 8010f4e:	ee10 0a10 	vmov	r0, s0
 8010f52:	a379      	add	r3, pc, #484	; (adr r3, 8011138 <__ieee754_rem_pio2+0x320>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	4629      	mov	r1, r5
 8010f5a:	f7ef fb55 	bl	8000608 <__aeabi_dmul>
 8010f5e:	4b80      	ldr	r3, [pc, #512]	; (8011160 <__ieee754_rem_pio2+0x348>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	f7ef f99b 	bl	800029c <__adddf3>
 8010f66:	f7ef fdff 	bl	8000b68 <__aeabi_d2iz>
 8010f6a:	4683      	mov	fp, r0
 8010f6c:	f7ef fae2 	bl	8000534 <__aeabi_i2d>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	ec43 2b18 	vmov	d8, r2, r3
 8010f78:	a367      	add	r3, pc, #412	; (adr r3, 8011118 <__ieee754_rem_pio2+0x300>)
 8010f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f7e:	f7ef fb43 	bl	8000608 <__aeabi_dmul>
 8010f82:	4602      	mov	r2, r0
 8010f84:	460b      	mov	r3, r1
 8010f86:	4620      	mov	r0, r4
 8010f88:	4629      	mov	r1, r5
 8010f8a:	f7ef f985 	bl	8000298 <__aeabi_dsub>
 8010f8e:	a364      	add	r3, pc, #400	; (adr r3, 8011120 <__ieee754_rem_pio2+0x308>)
 8010f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f94:	4606      	mov	r6, r0
 8010f96:	460f      	mov	r7, r1
 8010f98:	ec51 0b18 	vmov	r0, r1, d8
 8010f9c:	f7ef fb34 	bl	8000608 <__aeabi_dmul>
 8010fa0:	f1bb 0f1f 	cmp.w	fp, #31
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	dc0d      	bgt.n	8010fc6 <__ieee754_rem_pio2+0x1ae>
 8010faa:	4b6e      	ldr	r3, [pc, #440]	; (8011164 <__ieee754_rem_pio2+0x34c>)
 8010fac:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fb4:	4543      	cmp	r3, r8
 8010fb6:	d006      	beq.n	8010fc6 <__ieee754_rem_pio2+0x1ae>
 8010fb8:	4622      	mov	r2, r4
 8010fba:	462b      	mov	r3, r5
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	4639      	mov	r1, r7
 8010fc0:	f7ef f96a 	bl	8000298 <__aeabi_dsub>
 8010fc4:	e00f      	b.n	8010fe6 <__ieee754_rem_pio2+0x1ce>
 8010fc6:	462b      	mov	r3, r5
 8010fc8:	4622      	mov	r2, r4
 8010fca:	4630      	mov	r0, r6
 8010fcc:	4639      	mov	r1, r7
 8010fce:	f7ef f963 	bl	8000298 <__aeabi_dsub>
 8010fd2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010fd6:	9303      	str	r3, [sp, #12]
 8010fd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010fdc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010fe0:	f1b8 0f10 	cmp.w	r8, #16
 8010fe4:	dc02      	bgt.n	8010fec <__ieee754_rem_pio2+0x1d4>
 8010fe6:	e9ca 0100 	strd	r0, r1, [sl]
 8010fea:	e039      	b.n	8011060 <__ieee754_rem_pio2+0x248>
 8010fec:	a34e      	add	r3, pc, #312	; (adr r3, 8011128 <__ieee754_rem_pio2+0x310>)
 8010fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff2:	ec51 0b18 	vmov	r0, r1, d8
 8010ff6:	f7ef fb07 	bl	8000608 <__aeabi_dmul>
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	460d      	mov	r5, r1
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	4630      	mov	r0, r6
 8011004:	4639      	mov	r1, r7
 8011006:	f7ef f947 	bl	8000298 <__aeabi_dsub>
 801100a:	4602      	mov	r2, r0
 801100c:	460b      	mov	r3, r1
 801100e:	4680      	mov	r8, r0
 8011010:	4689      	mov	r9, r1
 8011012:	4630      	mov	r0, r6
 8011014:	4639      	mov	r1, r7
 8011016:	f7ef f93f 	bl	8000298 <__aeabi_dsub>
 801101a:	4622      	mov	r2, r4
 801101c:	462b      	mov	r3, r5
 801101e:	f7ef f93b 	bl	8000298 <__aeabi_dsub>
 8011022:	a343      	add	r3, pc, #268	; (adr r3, 8011130 <__ieee754_rem_pio2+0x318>)
 8011024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011028:	4604      	mov	r4, r0
 801102a:	460d      	mov	r5, r1
 801102c:	ec51 0b18 	vmov	r0, r1, d8
 8011030:	f7ef faea 	bl	8000608 <__aeabi_dmul>
 8011034:	4622      	mov	r2, r4
 8011036:	462b      	mov	r3, r5
 8011038:	f7ef f92e 	bl	8000298 <__aeabi_dsub>
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	4604      	mov	r4, r0
 8011042:	460d      	mov	r5, r1
 8011044:	4640      	mov	r0, r8
 8011046:	4649      	mov	r1, r9
 8011048:	f7ef f926 	bl	8000298 <__aeabi_dsub>
 801104c:	9a03      	ldr	r2, [sp, #12]
 801104e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	2b31      	cmp	r3, #49	; 0x31
 8011056:	dc24      	bgt.n	80110a2 <__ieee754_rem_pio2+0x28a>
 8011058:	e9ca 0100 	strd	r0, r1, [sl]
 801105c:	4646      	mov	r6, r8
 801105e:	464f      	mov	r7, r9
 8011060:	e9da 8900 	ldrd	r8, r9, [sl]
 8011064:	4630      	mov	r0, r6
 8011066:	4642      	mov	r2, r8
 8011068:	464b      	mov	r3, r9
 801106a:	4639      	mov	r1, r7
 801106c:	f7ef f914 	bl	8000298 <__aeabi_dsub>
 8011070:	462b      	mov	r3, r5
 8011072:	4622      	mov	r2, r4
 8011074:	f7ef f910 	bl	8000298 <__aeabi_dsub>
 8011078:	9b02      	ldr	r3, [sp, #8]
 801107a:	2b00      	cmp	r3, #0
 801107c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011080:	f6bf af0a 	bge.w	8010e98 <__ieee754_rem_pio2+0x80>
 8011084:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011088:	f8ca 3004 	str.w	r3, [sl, #4]
 801108c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011090:	f8ca 8000 	str.w	r8, [sl]
 8011094:	f8ca 0008 	str.w	r0, [sl, #8]
 8011098:	f8ca 300c 	str.w	r3, [sl, #12]
 801109c:	f1cb 0b00 	rsb	fp, fp, #0
 80110a0:	e6fa      	b.n	8010e98 <__ieee754_rem_pio2+0x80>
 80110a2:	a327      	add	r3, pc, #156	; (adr r3, 8011140 <__ieee754_rem_pio2+0x328>)
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	ec51 0b18 	vmov	r0, r1, d8
 80110ac:	f7ef faac 	bl	8000608 <__aeabi_dmul>
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4640      	mov	r0, r8
 80110ba:	4649      	mov	r1, r9
 80110bc:	f7ef f8ec 	bl	8000298 <__aeabi_dsub>
 80110c0:	4602      	mov	r2, r0
 80110c2:	460b      	mov	r3, r1
 80110c4:	4606      	mov	r6, r0
 80110c6:	460f      	mov	r7, r1
 80110c8:	4640      	mov	r0, r8
 80110ca:	4649      	mov	r1, r9
 80110cc:	f7ef f8e4 	bl	8000298 <__aeabi_dsub>
 80110d0:	4622      	mov	r2, r4
 80110d2:	462b      	mov	r3, r5
 80110d4:	f7ef f8e0 	bl	8000298 <__aeabi_dsub>
 80110d8:	a31b      	add	r3, pc, #108	; (adr r3, 8011148 <__ieee754_rem_pio2+0x330>)
 80110da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110de:	4604      	mov	r4, r0
 80110e0:	460d      	mov	r5, r1
 80110e2:	ec51 0b18 	vmov	r0, r1, d8
 80110e6:	f7ef fa8f 	bl	8000608 <__aeabi_dmul>
 80110ea:	4622      	mov	r2, r4
 80110ec:	462b      	mov	r3, r5
 80110ee:	f7ef f8d3 	bl	8000298 <__aeabi_dsub>
 80110f2:	4604      	mov	r4, r0
 80110f4:	460d      	mov	r5, r1
 80110f6:	e75f      	b.n	8010fb8 <__ieee754_rem_pio2+0x1a0>
 80110f8:	4b1b      	ldr	r3, [pc, #108]	; (8011168 <__ieee754_rem_pio2+0x350>)
 80110fa:	4598      	cmp	r8, r3
 80110fc:	dd36      	ble.n	801116c <__ieee754_rem_pio2+0x354>
 80110fe:	ee10 2a10 	vmov	r2, s0
 8011102:	462b      	mov	r3, r5
 8011104:	4620      	mov	r0, r4
 8011106:	4629      	mov	r1, r5
 8011108:	f7ef f8c6 	bl	8000298 <__aeabi_dsub>
 801110c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011110:	e9ca 0100 	strd	r0, r1, [sl]
 8011114:	e694      	b.n	8010e40 <__ieee754_rem_pio2+0x28>
 8011116:	bf00      	nop
 8011118:	54400000 	.word	0x54400000
 801111c:	3ff921fb 	.word	0x3ff921fb
 8011120:	1a626331 	.word	0x1a626331
 8011124:	3dd0b461 	.word	0x3dd0b461
 8011128:	1a600000 	.word	0x1a600000
 801112c:	3dd0b461 	.word	0x3dd0b461
 8011130:	2e037073 	.word	0x2e037073
 8011134:	3ba3198a 	.word	0x3ba3198a
 8011138:	6dc9c883 	.word	0x6dc9c883
 801113c:	3fe45f30 	.word	0x3fe45f30
 8011140:	2e000000 	.word	0x2e000000
 8011144:	3ba3198a 	.word	0x3ba3198a
 8011148:	252049c1 	.word	0x252049c1
 801114c:	397b839a 	.word	0x397b839a
 8011150:	3fe921fb 	.word	0x3fe921fb
 8011154:	4002d97b 	.word	0x4002d97b
 8011158:	3ff921fb 	.word	0x3ff921fb
 801115c:	413921fb 	.word	0x413921fb
 8011160:	3fe00000 	.word	0x3fe00000
 8011164:	080133d8 	.word	0x080133d8
 8011168:	7fefffff 	.word	0x7fefffff
 801116c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011170:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011174:	ee10 0a10 	vmov	r0, s0
 8011178:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801117c:	ee10 6a10 	vmov	r6, s0
 8011180:	460f      	mov	r7, r1
 8011182:	f7ef fcf1 	bl	8000b68 <__aeabi_d2iz>
 8011186:	f7ef f9d5 	bl	8000534 <__aeabi_i2d>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	4630      	mov	r0, r6
 8011190:	4639      	mov	r1, r7
 8011192:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011196:	f7ef f87f 	bl	8000298 <__aeabi_dsub>
 801119a:	4b23      	ldr	r3, [pc, #140]	; (8011228 <__ieee754_rem_pio2+0x410>)
 801119c:	2200      	movs	r2, #0
 801119e:	f7ef fa33 	bl	8000608 <__aeabi_dmul>
 80111a2:	460f      	mov	r7, r1
 80111a4:	4606      	mov	r6, r0
 80111a6:	f7ef fcdf 	bl	8000b68 <__aeabi_d2iz>
 80111aa:	f7ef f9c3 	bl	8000534 <__aeabi_i2d>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4630      	mov	r0, r6
 80111b4:	4639      	mov	r1, r7
 80111b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80111ba:	f7ef f86d 	bl	8000298 <__aeabi_dsub>
 80111be:	4b1a      	ldr	r3, [pc, #104]	; (8011228 <__ieee754_rem_pio2+0x410>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	f7ef fa21 	bl	8000608 <__aeabi_dmul>
 80111c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80111ca:	ad04      	add	r5, sp, #16
 80111cc:	f04f 0803 	mov.w	r8, #3
 80111d0:	46a9      	mov	r9, r5
 80111d2:	2600      	movs	r6, #0
 80111d4:	2700      	movs	r7, #0
 80111d6:	4632      	mov	r2, r6
 80111d8:	463b      	mov	r3, r7
 80111da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80111de:	46c3      	mov	fp, r8
 80111e0:	3d08      	subs	r5, #8
 80111e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80111e6:	f7ef fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	d1f3      	bne.n	80111d6 <__ieee754_rem_pio2+0x3be>
 80111ee:	4b0f      	ldr	r3, [pc, #60]	; (801122c <__ieee754_rem_pio2+0x414>)
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	2302      	movs	r3, #2
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	4622      	mov	r2, r4
 80111f8:	465b      	mov	r3, fp
 80111fa:	4651      	mov	r1, sl
 80111fc:	4648      	mov	r0, r9
 80111fe:	f000 fb4f 	bl	80118a0 <__kernel_rem_pio2>
 8011202:	9b02      	ldr	r3, [sp, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	4683      	mov	fp, r0
 8011208:	f6bf ae46 	bge.w	8010e98 <__ieee754_rem_pio2+0x80>
 801120c:	e9da 2100 	ldrd	r2, r1, [sl]
 8011210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011214:	e9ca 2300 	strd	r2, r3, [sl]
 8011218:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801121c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011220:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011224:	e73a      	b.n	801109c <__ieee754_rem_pio2+0x284>
 8011226:	bf00      	nop
 8011228:	41700000 	.word	0x41700000
 801122c:	08013458 	.word	0x08013458

08011230 <__ieee754_sqrt>:
 8011230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011234:	ec55 4b10 	vmov	r4, r5, d0
 8011238:	4e55      	ldr	r6, [pc, #340]	; (8011390 <__ieee754_sqrt+0x160>)
 801123a:	43ae      	bics	r6, r5
 801123c:	ee10 0a10 	vmov	r0, s0
 8011240:	ee10 3a10 	vmov	r3, s0
 8011244:	462a      	mov	r2, r5
 8011246:	4629      	mov	r1, r5
 8011248:	d110      	bne.n	801126c <__ieee754_sqrt+0x3c>
 801124a:	ee10 2a10 	vmov	r2, s0
 801124e:	462b      	mov	r3, r5
 8011250:	f7ef f9da 	bl	8000608 <__aeabi_dmul>
 8011254:	4602      	mov	r2, r0
 8011256:	460b      	mov	r3, r1
 8011258:	4620      	mov	r0, r4
 801125a:	4629      	mov	r1, r5
 801125c:	f7ef f81e 	bl	800029c <__adddf3>
 8011260:	4604      	mov	r4, r0
 8011262:	460d      	mov	r5, r1
 8011264:	ec45 4b10 	vmov	d0, r4, r5
 8011268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126c:	2d00      	cmp	r5, #0
 801126e:	dc10      	bgt.n	8011292 <__ieee754_sqrt+0x62>
 8011270:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011274:	4330      	orrs	r0, r6
 8011276:	d0f5      	beq.n	8011264 <__ieee754_sqrt+0x34>
 8011278:	b15d      	cbz	r5, 8011292 <__ieee754_sqrt+0x62>
 801127a:	ee10 2a10 	vmov	r2, s0
 801127e:	462b      	mov	r3, r5
 8011280:	ee10 0a10 	vmov	r0, s0
 8011284:	f7ef f808 	bl	8000298 <__aeabi_dsub>
 8011288:	4602      	mov	r2, r0
 801128a:	460b      	mov	r3, r1
 801128c:	f7ef fae6 	bl	800085c <__aeabi_ddiv>
 8011290:	e7e6      	b.n	8011260 <__ieee754_sqrt+0x30>
 8011292:	1512      	asrs	r2, r2, #20
 8011294:	d074      	beq.n	8011380 <__ieee754_sqrt+0x150>
 8011296:	07d4      	lsls	r4, r2, #31
 8011298:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801129c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80112a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80112a4:	bf5e      	ittt	pl
 80112a6:	0fda      	lsrpl	r2, r3, #31
 80112a8:	005b      	lslpl	r3, r3, #1
 80112aa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80112ae:	2400      	movs	r4, #0
 80112b0:	0fda      	lsrs	r2, r3, #31
 80112b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80112b6:	107f      	asrs	r7, r7, #1
 80112b8:	005b      	lsls	r3, r3, #1
 80112ba:	2516      	movs	r5, #22
 80112bc:	4620      	mov	r0, r4
 80112be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80112c2:	1886      	adds	r6, r0, r2
 80112c4:	428e      	cmp	r6, r1
 80112c6:	bfde      	ittt	le
 80112c8:	1b89      	suble	r1, r1, r6
 80112ca:	18b0      	addle	r0, r6, r2
 80112cc:	18a4      	addle	r4, r4, r2
 80112ce:	0049      	lsls	r1, r1, #1
 80112d0:	3d01      	subs	r5, #1
 80112d2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80112d6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80112da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80112de:	d1f0      	bne.n	80112c2 <__ieee754_sqrt+0x92>
 80112e0:	462a      	mov	r2, r5
 80112e2:	f04f 0e20 	mov.w	lr, #32
 80112e6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80112ea:	4281      	cmp	r1, r0
 80112ec:	eb06 0c05 	add.w	ip, r6, r5
 80112f0:	dc02      	bgt.n	80112f8 <__ieee754_sqrt+0xc8>
 80112f2:	d113      	bne.n	801131c <__ieee754_sqrt+0xec>
 80112f4:	459c      	cmp	ip, r3
 80112f6:	d811      	bhi.n	801131c <__ieee754_sqrt+0xec>
 80112f8:	f1bc 0f00 	cmp.w	ip, #0
 80112fc:	eb0c 0506 	add.w	r5, ip, r6
 8011300:	da43      	bge.n	801138a <__ieee754_sqrt+0x15a>
 8011302:	2d00      	cmp	r5, #0
 8011304:	db41      	blt.n	801138a <__ieee754_sqrt+0x15a>
 8011306:	f100 0801 	add.w	r8, r0, #1
 801130a:	1a09      	subs	r1, r1, r0
 801130c:	459c      	cmp	ip, r3
 801130e:	bf88      	it	hi
 8011310:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011314:	eba3 030c 	sub.w	r3, r3, ip
 8011318:	4432      	add	r2, r6
 801131a:	4640      	mov	r0, r8
 801131c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011320:	f1be 0e01 	subs.w	lr, lr, #1
 8011324:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011328:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801132c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011330:	d1db      	bne.n	80112ea <__ieee754_sqrt+0xba>
 8011332:	430b      	orrs	r3, r1
 8011334:	d006      	beq.n	8011344 <__ieee754_sqrt+0x114>
 8011336:	1c50      	adds	r0, r2, #1
 8011338:	bf13      	iteet	ne
 801133a:	3201      	addne	r2, #1
 801133c:	3401      	addeq	r4, #1
 801133e:	4672      	moveq	r2, lr
 8011340:	f022 0201 	bicne.w	r2, r2, #1
 8011344:	1063      	asrs	r3, r4, #1
 8011346:	0852      	lsrs	r2, r2, #1
 8011348:	07e1      	lsls	r1, r4, #31
 801134a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801134e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011352:	bf48      	it	mi
 8011354:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011358:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801135c:	4614      	mov	r4, r2
 801135e:	e781      	b.n	8011264 <__ieee754_sqrt+0x34>
 8011360:	0ad9      	lsrs	r1, r3, #11
 8011362:	3815      	subs	r0, #21
 8011364:	055b      	lsls	r3, r3, #21
 8011366:	2900      	cmp	r1, #0
 8011368:	d0fa      	beq.n	8011360 <__ieee754_sqrt+0x130>
 801136a:	02cd      	lsls	r5, r1, #11
 801136c:	d50a      	bpl.n	8011384 <__ieee754_sqrt+0x154>
 801136e:	f1c2 0420 	rsb	r4, r2, #32
 8011372:	fa23 f404 	lsr.w	r4, r3, r4
 8011376:	1e55      	subs	r5, r2, #1
 8011378:	4093      	lsls	r3, r2
 801137a:	4321      	orrs	r1, r4
 801137c:	1b42      	subs	r2, r0, r5
 801137e:	e78a      	b.n	8011296 <__ieee754_sqrt+0x66>
 8011380:	4610      	mov	r0, r2
 8011382:	e7f0      	b.n	8011366 <__ieee754_sqrt+0x136>
 8011384:	0049      	lsls	r1, r1, #1
 8011386:	3201      	adds	r2, #1
 8011388:	e7ef      	b.n	801136a <__ieee754_sqrt+0x13a>
 801138a:	4680      	mov	r8, r0
 801138c:	e7bd      	b.n	801130a <__ieee754_sqrt+0xda>
 801138e:	bf00      	nop
 8011390:	7ff00000 	.word	0x7ff00000

08011394 <__ieee754_fmodf>:
 8011394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011396:	ee10 5a90 	vmov	r5, s1
 801139a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801139e:	d009      	beq.n	80113b4 <__ieee754_fmodf+0x20>
 80113a0:	ee10 2a10 	vmov	r2, s0
 80113a4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80113a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80113ac:	da02      	bge.n	80113b4 <__ieee754_fmodf+0x20>
 80113ae:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80113b2:	dd04      	ble.n	80113be <__ieee754_fmodf+0x2a>
 80113b4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80113b8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80113bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113be:	42a3      	cmp	r3, r4
 80113c0:	dbfc      	blt.n	80113bc <__ieee754_fmodf+0x28>
 80113c2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80113c6:	d105      	bne.n	80113d4 <__ieee754_fmodf+0x40>
 80113c8:	4b32      	ldr	r3, [pc, #200]	; (8011494 <__ieee754_fmodf+0x100>)
 80113ca:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80113ce:	ed93 0a00 	vldr	s0, [r3]
 80113d2:	e7f3      	b.n	80113bc <__ieee754_fmodf+0x28>
 80113d4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80113d8:	d13f      	bne.n	801145a <__ieee754_fmodf+0xc6>
 80113da:	0219      	lsls	r1, r3, #8
 80113dc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80113e0:	2900      	cmp	r1, #0
 80113e2:	dc37      	bgt.n	8011454 <__ieee754_fmodf+0xc0>
 80113e4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80113e8:	d13d      	bne.n	8011466 <__ieee754_fmodf+0xd2>
 80113ea:	0227      	lsls	r7, r4, #8
 80113ec:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80113f0:	2f00      	cmp	r7, #0
 80113f2:	da35      	bge.n	8011460 <__ieee754_fmodf+0xcc>
 80113f4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80113f8:	bfbb      	ittet	lt
 80113fa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80113fe:	1a12      	sublt	r2, r2, r0
 8011400:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011404:	4093      	lsllt	r3, r2
 8011406:	bfa8      	it	ge
 8011408:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801140c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011410:	bfb5      	itete	lt
 8011412:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011416:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801141a:	1a52      	sublt	r2, r2, r1
 801141c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8011420:	bfb8      	it	lt
 8011422:	4094      	lsllt	r4, r2
 8011424:	1a40      	subs	r0, r0, r1
 8011426:	1b1a      	subs	r2, r3, r4
 8011428:	bb00      	cbnz	r0, 801146c <__ieee754_fmodf+0xd8>
 801142a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801142e:	bf38      	it	cc
 8011430:	4613      	movcc	r3, r2
 8011432:	2b00      	cmp	r3, #0
 8011434:	d0c8      	beq.n	80113c8 <__ieee754_fmodf+0x34>
 8011436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801143a:	db1f      	blt.n	801147c <__ieee754_fmodf+0xe8>
 801143c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011440:	db1f      	blt.n	8011482 <__ieee754_fmodf+0xee>
 8011442:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011446:	317f      	adds	r1, #127	; 0x7f
 8011448:	4333      	orrs	r3, r6
 801144a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801144e:	ee00 3a10 	vmov	s0, r3
 8011452:	e7b3      	b.n	80113bc <__ieee754_fmodf+0x28>
 8011454:	3801      	subs	r0, #1
 8011456:	0049      	lsls	r1, r1, #1
 8011458:	e7c2      	b.n	80113e0 <__ieee754_fmodf+0x4c>
 801145a:	15d8      	asrs	r0, r3, #23
 801145c:	387f      	subs	r0, #127	; 0x7f
 801145e:	e7c1      	b.n	80113e4 <__ieee754_fmodf+0x50>
 8011460:	3901      	subs	r1, #1
 8011462:	007f      	lsls	r7, r7, #1
 8011464:	e7c4      	b.n	80113f0 <__ieee754_fmodf+0x5c>
 8011466:	15e1      	asrs	r1, r4, #23
 8011468:	397f      	subs	r1, #127	; 0x7f
 801146a:	e7c3      	b.n	80113f4 <__ieee754_fmodf+0x60>
 801146c:	2a00      	cmp	r2, #0
 801146e:	da02      	bge.n	8011476 <__ieee754_fmodf+0xe2>
 8011470:	005b      	lsls	r3, r3, #1
 8011472:	3801      	subs	r0, #1
 8011474:	e7d7      	b.n	8011426 <__ieee754_fmodf+0x92>
 8011476:	d0a7      	beq.n	80113c8 <__ieee754_fmodf+0x34>
 8011478:	0053      	lsls	r3, r2, #1
 801147a:	e7fa      	b.n	8011472 <__ieee754_fmodf+0xde>
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	3901      	subs	r1, #1
 8011480:	e7d9      	b.n	8011436 <__ieee754_fmodf+0xa2>
 8011482:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8011486:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801148a:	3182      	adds	r1, #130	; 0x82
 801148c:	410b      	asrs	r3, r1
 801148e:	4333      	orrs	r3, r6
 8011490:	e7dd      	b.n	801144e <__ieee754_fmodf+0xba>
 8011492:	bf00      	nop
 8011494:	08013560 	.word	0x08013560

08011498 <__ieee754_rem_pio2f>:
 8011498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801149a:	ee10 6a10 	vmov	r6, s0
 801149e:	4b8e      	ldr	r3, [pc, #568]	; (80116d8 <__ieee754_rem_pio2f+0x240>)
 80114a0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80114a4:	429d      	cmp	r5, r3
 80114a6:	b087      	sub	sp, #28
 80114a8:	eef0 7a40 	vmov.f32	s15, s0
 80114ac:	4604      	mov	r4, r0
 80114ae:	dc05      	bgt.n	80114bc <__ieee754_rem_pio2f+0x24>
 80114b0:	2300      	movs	r3, #0
 80114b2:	ed80 0a00 	vstr	s0, [r0]
 80114b6:	6043      	str	r3, [r0, #4]
 80114b8:	2000      	movs	r0, #0
 80114ba:	e01a      	b.n	80114f2 <__ieee754_rem_pio2f+0x5a>
 80114bc:	4b87      	ldr	r3, [pc, #540]	; (80116dc <__ieee754_rem_pio2f+0x244>)
 80114be:	429d      	cmp	r5, r3
 80114c0:	dc46      	bgt.n	8011550 <__ieee754_rem_pio2f+0xb8>
 80114c2:	2e00      	cmp	r6, #0
 80114c4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80116e0 <__ieee754_rem_pio2f+0x248>
 80114c8:	4b86      	ldr	r3, [pc, #536]	; (80116e4 <__ieee754_rem_pio2f+0x24c>)
 80114ca:	f025 050f 	bic.w	r5, r5, #15
 80114ce:	dd1f      	ble.n	8011510 <__ieee754_rem_pio2f+0x78>
 80114d0:	429d      	cmp	r5, r3
 80114d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80114d6:	d00e      	beq.n	80114f6 <__ieee754_rem_pio2f+0x5e>
 80114d8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80116e8 <__ieee754_rem_pio2f+0x250>
 80114dc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80114e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80114e4:	ed80 0a00 	vstr	s0, [r0]
 80114e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114ec:	2001      	movs	r0, #1
 80114ee:	edc4 7a01 	vstr	s15, [r4, #4]
 80114f2:	b007      	add	sp, #28
 80114f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114f6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80116ec <__ieee754_rem_pio2f+0x254>
 80114fa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80116f0 <__ieee754_rem_pio2f+0x258>
 80114fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011502:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011506:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801150a:	edc0 6a00 	vstr	s13, [r0]
 801150e:	e7eb      	b.n	80114e8 <__ieee754_rem_pio2f+0x50>
 8011510:	429d      	cmp	r5, r3
 8011512:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011516:	d00e      	beq.n	8011536 <__ieee754_rem_pio2f+0x9e>
 8011518:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80116e8 <__ieee754_rem_pio2f+0x250>
 801151c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011520:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011524:	ed80 0a00 	vstr	s0, [r0]
 8011528:	ee77 7a87 	vadd.f32	s15, s15, s14
 801152c:	f04f 30ff 	mov.w	r0, #4294967295
 8011530:	edc4 7a01 	vstr	s15, [r4, #4]
 8011534:	e7dd      	b.n	80114f2 <__ieee754_rem_pio2f+0x5a>
 8011536:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80116ec <__ieee754_rem_pio2f+0x254>
 801153a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80116f0 <__ieee754_rem_pio2f+0x258>
 801153e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011542:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011546:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801154a:	edc0 6a00 	vstr	s13, [r0]
 801154e:	e7eb      	b.n	8011528 <__ieee754_rem_pio2f+0x90>
 8011550:	4b68      	ldr	r3, [pc, #416]	; (80116f4 <__ieee754_rem_pio2f+0x25c>)
 8011552:	429d      	cmp	r5, r3
 8011554:	dc72      	bgt.n	801163c <__ieee754_rem_pio2f+0x1a4>
 8011556:	f001 fbe1 	bl	8012d1c <fabsf>
 801155a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80116f8 <__ieee754_rem_pio2f+0x260>
 801155e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011562:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801156a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801156e:	ee17 0a90 	vmov	r0, s15
 8011572:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80116e0 <__ieee754_rem_pio2f+0x248>
 8011576:	eea7 0a67 	vfms.f32	s0, s14, s15
 801157a:	281f      	cmp	r0, #31
 801157c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80116e8 <__ieee754_rem_pio2f+0x250>
 8011580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011584:	eeb1 6a47 	vneg.f32	s12, s14
 8011588:	ee70 6a67 	vsub.f32	s13, s0, s15
 801158c:	ee16 2a90 	vmov	r2, s13
 8011590:	dc1c      	bgt.n	80115cc <__ieee754_rem_pio2f+0x134>
 8011592:	495a      	ldr	r1, [pc, #360]	; (80116fc <__ieee754_rem_pio2f+0x264>)
 8011594:	1e47      	subs	r7, r0, #1
 8011596:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801159a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801159e:	428b      	cmp	r3, r1
 80115a0:	d014      	beq.n	80115cc <__ieee754_rem_pio2f+0x134>
 80115a2:	6022      	str	r2, [r4, #0]
 80115a4:	ed94 7a00 	vldr	s14, [r4]
 80115a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80115ac:	2e00      	cmp	r6, #0
 80115ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80115b2:	ed84 0a01 	vstr	s0, [r4, #4]
 80115b6:	da9c      	bge.n	80114f2 <__ieee754_rem_pio2f+0x5a>
 80115b8:	eeb1 7a47 	vneg.f32	s14, s14
 80115bc:	eeb1 0a40 	vneg.f32	s0, s0
 80115c0:	ed84 7a00 	vstr	s14, [r4]
 80115c4:	ed84 0a01 	vstr	s0, [r4, #4]
 80115c8:	4240      	negs	r0, r0
 80115ca:	e792      	b.n	80114f2 <__ieee754_rem_pio2f+0x5a>
 80115cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80115d0:	15eb      	asrs	r3, r5, #23
 80115d2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80115d6:	2d08      	cmp	r5, #8
 80115d8:	dde3      	ble.n	80115a2 <__ieee754_rem_pio2f+0x10a>
 80115da:	eddf 7a44 	vldr	s15, [pc, #272]	; 80116ec <__ieee754_rem_pio2f+0x254>
 80115de:	eddf 5a44 	vldr	s11, [pc, #272]	; 80116f0 <__ieee754_rem_pio2f+0x258>
 80115e2:	eef0 6a40 	vmov.f32	s13, s0
 80115e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80115ea:	ee30 0a66 	vsub.f32	s0, s0, s13
 80115ee:	eea6 0a27 	vfma.f32	s0, s12, s15
 80115f2:	eef0 7a40 	vmov.f32	s15, s0
 80115f6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80115fa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80115fe:	ee15 2a90 	vmov	r2, s11
 8011602:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011606:	1a5b      	subs	r3, r3, r1
 8011608:	2b19      	cmp	r3, #25
 801160a:	dc04      	bgt.n	8011616 <__ieee754_rem_pio2f+0x17e>
 801160c:	edc4 5a00 	vstr	s11, [r4]
 8011610:	eeb0 0a66 	vmov.f32	s0, s13
 8011614:	e7c6      	b.n	80115a4 <__ieee754_rem_pio2f+0x10c>
 8011616:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011700 <__ieee754_rem_pio2f+0x268>
 801161a:	eeb0 0a66 	vmov.f32	s0, s13
 801161e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011622:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011626:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011704 <__ieee754_rem_pio2f+0x26c>
 801162a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801162e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011632:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011636:	ed84 7a00 	vstr	s14, [r4]
 801163a:	e7b3      	b.n	80115a4 <__ieee754_rem_pio2f+0x10c>
 801163c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011640:	db06      	blt.n	8011650 <__ieee754_rem_pio2f+0x1b8>
 8011642:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011646:	edc0 7a01 	vstr	s15, [r0, #4]
 801164a:	edc0 7a00 	vstr	s15, [r0]
 801164e:	e733      	b.n	80114b8 <__ieee754_rem_pio2f+0x20>
 8011650:	15ea      	asrs	r2, r5, #23
 8011652:	3a86      	subs	r2, #134	; 0x86
 8011654:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011658:	ee07 3a90 	vmov	s15, r3
 801165c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011660:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011708 <__ieee754_rem_pio2f+0x270>
 8011664:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801166c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011670:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011674:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011678:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801167c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011680:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011684:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011688:	eef5 7a40 	vcmp.f32	s15, #0.0
 801168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011690:	edcd 7a05 	vstr	s15, [sp, #20]
 8011694:	d11e      	bne.n	80116d4 <__ieee754_rem_pio2f+0x23c>
 8011696:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801169e:	bf14      	ite	ne
 80116a0:	2302      	movne	r3, #2
 80116a2:	2301      	moveq	r3, #1
 80116a4:	4919      	ldr	r1, [pc, #100]	; (801170c <__ieee754_rem_pio2f+0x274>)
 80116a6:	9101      	str	r1, [sp, #4]
 80116a8:	2102      	movs	r1, #2
 80116aa:	9100      	str	r1, [sp, #0]
 80116ac:	a803      	add	r0, sp, #12
 80116ae:	4621      	mov	r1, r4
 80116b0:	f000 ff70 	bl	8012594 <__kernel_rem_pio2f>
 80116b4:	2e00      	cmp	r6, #0
 80116b6:	f6bf af1c 	bge.w	80114f2 <__ieee754_rem_pio2f+0x5a>
 80116ba:	edd4 7a00 	vldr	s15, [r4]
 80116be:	eef1 7a67 	vneg.f32	s15, s15
 80116c2:	edc4 7a00 	vstr	s15, [r4]
 80116c6:	edd4 7a01 	vldr	s15, [r4, #4]
 80116ca:	eef1 7a67 	vneg.f32	s15, s15
 80116ce:	edc4 7a01 	vstr	s15, [r4, #4]
 80116d2:	e779      	b.n	80115c8 <__ieee754_rem_pio2f+0x130>
 80116d4:	2303      	movs	r3, #3
 80116d6:	e7e5      	b.n	80116a4 <__ieee754_rem_pio2f+0x20c>
 80116d8:	3f490fd8 	.word	0x3f490fd8
 80116dc:	4016cbe3 	.word	0x4016cbe3
 80116e0:	3fc90f80 	.word	0x3fc90f80
 80116e4:	3fc90fd0 	.word	0x3fc90fd0
 80116e8:	37354443 	.word	0x37354443
 80116ec:	37354400 	.word	0x37354400
 80116f0:	2e85a308 	.word	0x2e85a308
 80116f4:	43490f80 	.word	0x43490f80
 80116f8:	3f22f984 	.word	0x3f22f984
 80116fc:	08013568 	.word	0x08013568
 8011700:	2e85a300 	.word	0x2e85a300
 8011704:	248d3132 	.word	0x248d3132
 8011708:	43800000 	.word	0x43800000
 801170c:	080135e8 	.word	0x080135e8

08011710 <__kernel_cos>:
 8011710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	ec57 6b10 	vmov	r6, r7, d0
 8011718:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801171c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011720:	ed8d 1b00 	vstr	d1, [sp]
 8011724:	da07      	bge.n	8011736 <__kernel_cos+0x26>
 8011726:	ee10 0a10 	vmov	r0, s0
 801172a:	4639      	mov	r1, r7
 801172c:	f7ef fa1c 	bl	8000b68 <__aeabi_d2iz>
 8011730:	2800      	cmp	r0, #0
 8011732:	f000 8088 	beq.w	8011846 <__kernel_cos+0x136>
 8011736:	4632      	mov	r2, r6
 8011738:	463b      	mov	r3, r7
 801173a:	4630      	mov	r0, r6
 801173c:	4639      	mov	r1, r7
 801173e:	f7ee ff63 	bl	8000608 <__aeabi_dmul>
 8011742:	4b51      	ldr	r3, [pc, #324]	; (8011888 <__kernel_cos+0x178>)
 8011744:	2200      	movs	r2, #0
 8011746:	4604      	mov	r4, r0
 8011748:	460d      	mov	r5, r1
 801174a:	f7ee ff5d 	bl	8000608 <__aeabi_dmul>
 801174e:	a340      	add	r3, pc, #256	; (adr r3, 8011850 <__kernel_cos+0x140>)
 8011750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011754:	4682      	mov	sl, r0
 8011756:	468b      	mov	fp, r1
 8011758:	4620      	mov	r0, r4
 801175a:	4629      	mov	r1, r5
 801175c:	f7ee ff54 	bl	8000608 <__aeabi_dmul>
 8011760:	a33d      	add	r3, pc, #244	; (adr r3, 8011858 <__kernel_cos+0x148>)
 8011762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011766:	f7ee fd99 	bl	800029c <__adddf3>
 801176a:	4622      	mov	r2, r4
 801176c:	462b      	mov	r3, r5
 801176e:	f7ee ff4b 	bl	8000608 <__aeabi_dmul>
 8011772:	a33b      	add	r3, pc, #236	; (adr r3, 8011860 <__kernel_cos+0x150>)
 8011774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011778:	f7ee fd8e 	bl	8000298 <__aeabi_dsub>
 801177c:	4622      	mov	r2, r4
 801177e:	462b      	mov	r3, r5
 8011780:	f7ee ff42 	bl	8000608 <__aeabi_dmul>
 8011784:	a338      	add	r3, pc, #224	; (adr r3, 8011868 <__kernel_cos+0x158>)
 8011786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178a:	f7ee fd87 	bl	800029c <__adddf3>
 801178e:	4622      	mov	r2, r4
 8011790:	462b      	mov	r3, r5
 8011792:	f7ee ff39 	bl	8000608 <__aeabi_dmul>
 8011796:	a336      	add	r3, pc, #216	; (adr r3, 8011870 <__kernel_cos+0x160>)
 8011798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179c:	f7ee fd7c 	bl	8000298 <__aeabi_dsub>
 80117a0:	4622      	mov	r2, r4
 80117a2:	462b      	mov	r3, r5
 80117a4:	f7ee ff30 	bl	8000608 <__aeabi_dmul>
 80117a8:	a333      	add	r3, pc, #204	; (adr r3, 8011878 <__kernel_cos+0x168>)
 80117aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ae:	f7ee fd75 	bl	800029c <__adddf3>
 80117b2:	4622      	mov	r2, r4
 80117b4:	462b      	mov	r3, r5
 80117b6:	f7ee ff27 	bl	8000608 <__aeabi_dmul>
 80117ba:	4622      	mov	r2, r4
 80117bc:	462b      	mov	r3, r5
 80117be:	f7ee ff23 	bl	8000608 <__aeabi_dmul>
 80117c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117c6:	4604      	mov	r4, r0
 80117c8:	460d      	mov	r5, r1
 80117ca:	4630      	mov	r0, r6
 80117cc:	4639      	mov	r1, r7
 80117ce:	f7ee ff1b 	bl	8000608 <__aeabi_dmul>
 80117d2:	460b      	mov	r3, r1
 80117d4:	4602      	mov	r2, r0
 80117d6:	4629      	mov	r1, r5
 80117d8:	4620      	mov	r0, r4
 80117da:	f7ee fd5d 	bl	8000298 <__aeabi_dsub>
 80117de:	4b2b      	ldr	r3, [pc, #172]	; (801188c <__kernel_cos+0x17c>)
 80117e0:	4598      	cmp	r8, r3
 80117e2:	4606      	mov	r6, r0
 80117e4:	460f      	mov	r7, r1
 80117e6:	dc10      	bgt.n	801180a <__kernel_cos+0xfa>
 80117e8:	4602      	mov	r2, r0
 80117ea:	460b      	mov	r3, r1
 80117ec:	4650      	mov	r0, sl
 80117ee:	4659      	mov	r1, fp
 80117f0:	f7ee fd52 	bl	8000298 <__aeabi_dsub>
 80117f4:	460b      	mov	r3, r1
 80117f6:	4926      	ldr	r1, [pc, #152]	; (8011890 <__kernel_cos+0x180>)
 80117f8:	4602      	mov	r2, r0
 80117fa:	2000      	movs	r0, #0
 80117fc:	f7ee fd4c 	bl	8000298 <__aeabi_dsub>
 8011800:	ec41 0b10 	vmov	d0, r0, r1
 8011804:	b003      	add	sp, #12
 8011806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180a:	4b22      	ldr	r3, [pc, #136]	; (8011894 <__kernel_cos+0x184>)
 801180c:	4920      	ldr	r1, [pc, #128]	; (8011890 <__kernel_cos+0x180>)
 801180e:	4598      	cmp	r8, r3
 8011810:	bfcc      	ite	gt
 8011812:	4d21      	ldrgt	r5, [pc, #132]	; (8011898 <__kernel_cos+0x188>)
 8011814:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011818:	2400      	movs	r4, #0
 801181a:	4622      	mov	r2, r4
 801181c:	462b      	mov	r3, r5
 801181e:	2000      	movs	r0, #0
 8011820:	f7ee fd3a 	bl	8000298 <__aeabi_dsub>
 8011824:	4622      	mov	r2, r4
 8011826:	4680      	mov	r8, r0
 8011828:	4689      	mov	r9, r1
 801182a:	462b      	mov	r3, r5
 801182c:	4650      	mov	r0, sl
 801182e:	4659      	mov	r1, fp
 8011830:	f7ee fd32 	bl	8000298 <__aeabi_dsub>
 8011834:	4632      	mov	r2, r6
 8011836:	463b      	mov	r3, r7
 8011838:	f7ee fd2e 	bl	8000298 <__aeabi_dsub>
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	4640      	mov	r0, r8
 8011842:	4649      	mov	r1, r9
 8011844:	e7da      	b.n	80117fc <__kernel_cos+0xec>
 8011846:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011880 <__kernel_cos+0x170>
 801184a:	e7db      	b.n	8011804 <__kernel_cos+0xf4>
 801184c:	f3af 8000 	nop.w
 8011850:	be8838d4 	.word	0xbe8838d4
 8011854:	bda8fae9 	.word	0xbda8fae9
 8011858:	bdb4b1c4 	.word	0xbdb4b1c4
 801185c:	3e21ee9e 	.word	0x3e21ee9e
 8011860:	809c52ad 	.word	0x809c52ad
 8011864:	3e927e4f 	.word	0x3e927e4f
 8011868:	19cb1590 	.word	0x19cb1590
 801186c:	3efa01a0 	.word	0x3efa01a0
 8011870:	16c15177 	.word	0x16c15177
 8011874:	3f56c16c 	.word	0x3f56c16c
 8011878:	5555554c 	.word	0x5555554c
 801187c:	3fa55555 	.word	0x3fa55555
 8011880:	00000000 	.word	0x00000000
 8011884:	3ff00000 	.word	0x3ff00000
 8011888:	3fe00000 	.word	0x3fe00000
 801188c:	3fd33332 	.word	0x3fd33332
 8011890:	3ff00000 	.word	0x3ff00000
 8011894:	3fe90000 	.word	0x3fe90000
 8011898:	3fd20000 	.word	0x3fd20000
 801189c:	00000000 	.word	0x00000000

080118a0 <__kernel_rem_pio2>:
 80118a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a4:	ed2d 8b02 	vpush	{d8}
 80118a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80118ac:	f112 0f14 	cmn.w	r2, #20
 80118b0:	9308      	str	r3, [sp, #32]
 80118b2:	9101      	str	r1, [sp, #4]
 80118b4:	4bc4      	ldr	r3, [pc, #784]	; (8011bc8 <__kernel_rem_pio2+0x328>)
 80118b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80118b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80118ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80118be:	9302      	str	r3, [sp, #8]
 80118c0:	9b08      	ldr	r3, [sp, #32]
 80118c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118c6:	bfa8      	it	ge
 80118c8:	1ed4      	subge	r4, r2, #3
 80118ca:	9306      	str	r3, [sp, #24]
 80118cc:	bfb2      	itee	lt
 80118ce:	2400      	movlt	r4, #0
 80118d0:	2318      	movge	r3, #24
 80118d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80118d6:	f06f 0317 	mvn.w	r3, #23
 80118da:	fb04 3303 	mla	r3, r4, r3, r3
 80118de:	eb03 0a02 	add.w	sl, r3, r2
 80118e2:	9b02      	ldr	r3, [sp, #8]
 80118e4:	9a06      	ldr	r2, [sp, #24]
 80118e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011bb8 <__kernel_rem_pio2+0x318>
 80118ea:	eb03 0802 	add.w	r8, r3, r2
 80118ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80118f0:	1aa7      	subs	r7, r4, r2
 80118f2:	ae22      	add	r6, sp, #136	; 0x88
 80118f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80118f8:	2500      	movs	r5, #0
 80118fa:	4545      	cmp	r5, r8
 80118fc:	dd13      	ble.n	8011926 <__kernel_rem_pio2+0x86>
 80118fe:	9b08      	ldr	r3, [sp, #32]
 8011900:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011bb8 <__kernel_rem_pio2+0x318>
 8011904:	aa22      	add	r2, sp, #136	; 0x88
 8011906:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801190a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801190e:	f04f 0800 	mov.w	r8, #0
 8011912:	9b02      	ldr	r3, [sp, #8]
 8011914:	4598      	cmp	r8, r3
 8011916:	dc2f      	bgt.n	8011978 <__kernel_rem_pio2+0xd8>
 8011918:	ed8d 8b04 	vstr	d8, [sp, #16]
 801191c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011920:	462f      	mov	r7, r5
 8011922:	2600      	movs	r6, #0
 8011924:	e01b      	b.n	801195e <__kernel_rem_pio2+0xbe>
 8011926:	42ef      	cmn	r7, r5
 8011928:	d407      	bmi.n	801193a <__kernel_rem_pio2+0x9a>
 801192a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801192e:	f7ee fe01 	bl	8000534 <__aeabi_i2d>
 8011932:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011936:	3501      	adds	r5, #1
 8011938:	e7df      	b.n	80118fa <__kernel_rem_pio2+0x5a>
 801193a:	ec51 0b18 	vmov	r0, r1, d8
 801193e:	e7f8      	b.n	8011932 <__kernel_rem_pio2+0x92>
 8011940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011944:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011948:	f7ee fe5e 	bl	8000608 <__aeabi_dmul>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011954:	f7ee fca2 	bl	800029c <__adddf3>
 8011958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801195c:	3601      	adds	r6, #1
 801195e:	9b06      	ldr	r3, [sp, #24]
 8011960:	429e      	cmp	r6, r3
 8011962:	f1a7 0708 	sub.w	r7, r7, #8
 8011966:	ddeb      	ble.n	8011940 <__kernel_rem_pio2+0xa0>
 8011968:	ed9d 7b04 	vldr	d7, [sp, #16]
 801196c:	f108 0801 	add.w	r8, r8, #1
 8011970:	ecab 7b02 	vstmia	fp!, {d7}
 8011974:	3508      	adds	r5, #8
 8011976:	e7cc      	b.n	8011912 <__kernel_rem_pio2+0x72>
 8011978:	9b02      	ldr	r3, [sp, #8]
 801197a:	aa0e      	add	r2, sp, #56	; 0x38
 801197c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011980:	930d      	str	r3, [sp, #52]	; 0x34
 8011982:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011984:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011988:	9c02      	ldr	r4, [sp, #8]
 801198a:	930c      	str	r3, [sp, #48]	; 0x30
 801198c:	00e3      	lsls	r3, r4, #3
 801198e:	930a      	str	r3, [sp, #40]	; 0x28
 8011990:	ab9a      	add	r3, sp, #616	; 0x268
 8011992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011996:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801199a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801199e:	ab72      	add	r3, sp, #456	; 0x1c8
 80119a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80119a4:	46c3      	mov	fp, r8
 80119a6:	46a1      	mov	r9, r4
 80119a8:	f1b9 0f00 	cmp.w	r9, #0
 80119ac:	f1a5 0508 	sub.w	r5, r5, #8
 80119b0:	dc77      	bgt.n	8011aa2 <__kernel_rem_pio2+0x202>
 80119b2:	ec47 6b10 	vmov	d0, r6, r7
 80119b6:	4650      	mov	r0, sl
 80119b8:	f001 f92a 	bl	8012c10 <scalbn>
 80119bc:	ec57 6b10 	vmov	r6, r7, d0
 80119c0:	2200      	movs	r2, #0
 80119c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80119c6:	ee10 0a10 	vmov	r0, s0
 80119ca:	4639      	mov	r1, r7
 80119cc:	f7ee fe1c 	bl	8000608 <__aeabi_dmul>
 80119d0:	ec41 0b10 	vmov	d0, r0, r1
 80119d4:	f001 f89c 	bl	8012b10 <floor>
 80119d8:	4b7c      	ldr	r3, [pc, #496]	; (8011bcc <__kernel_rem_pio2+0x32c>)
 80119da:	ec51 0b10 	vmov	r0, r1, d0
 80119de:	2200      	movs	r2, #0
 80119e0:	f7ee fe12 	bl	8000608 <__aeabi_dmul>
 80119e4:	4602      	mov	r2, r0
 80119e6:	460b      	mov	r3, r1
 80119e8:	4630      	mov	r0, r6
 80119ea:	4639      	mov	r1, r7
 80119ec:	f7ee fc54 	bl	8000298 <__aeabi_dsub>
 80119f0:	460f      	mov	r7, r1
 80119f2:	4606      	mov	r6, r0
 80119f4:	f7ef f8b8 	bl	8000b68 <__aeabi_d2iz>
 80119f8:	9004      	str	r0, [sp, #16]
 80119fa:	f7ee fd9b 	bl	8000534 <__aeabi_i2d>
 80119fe:	4602      	mov	r2, r0
 8011a00:	460b      	mov	r3, r1
 8011a02:	4630      	mov	r0, r6
 8011a04:	4639      	mov	r1, r7
 8011a06:	f7ee fc47 	bl	8000298 <__aeabi_dsub>
 8011a0a:	f1ba 0f00 	cmp.w	sl, #0
 8011a0e:	4606      	mov	r6, r0
 8011a10:	460f      	mov	r7, r1
 8011a12:	dd6d      	ble.n	8011af0 <__kernel_rem_pio2+0x250>
 8011a14:	1e62      	subs	r2, r4, #1
 8011a16:	ab0e      	add	r3, sp, #56	; 0x38
 8011a18:	9d04      	ldr	r5, [sp, #16]
 8011a1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a1e:	f1ca 0118 	rsb	r1, sl, #24
 8011a22:	fa40 f301 	asr.w	r3, r0, r1
 8011a26:	441d      	add	r5, r3
 8011a28:	408b      	lsls	r3, r1
 8011a2a:	1ac0      	subs	r0, r0, r3
 8011a2c:	ab0e      	add	r3, sp, #56	; 0x38
 8011a2e:	9504      	str	r5, [sp, #16]
 8011a30:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011a34:	f1ca 0317 	rsb	r3, sl, #23
 8011a38:	fa40 fb03 	asr.w	fp, r0, r3
 8011a3c:	f1bb 0f00 	cmp.w	fp, #0
 8011a40:	dd65      	ble.n	8011b0e <__kernel_rem_pio2+0x26e>
 8011a42:	9b04      	ldr	r3, [sp, #16]
 8011a44:	2200      	movs	r2, #0
 8011a46:	3301      	adds	r3, #1
 8011a48:	9304      	str	r3, [sp, #16]
 8011a4a:	4615      	mov	r5, r2
 8011a4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011a50:	4294      	cmp	r4, r2
 8011a52:	f300 809c 	bgt.w	8011b8e <__kernel_rem_pio2+0x2ee>
 8011a56:	f1ba 0f00 	cmp.w	sl, #0
 8011a5a:	dd07      	ble.n	8011a6c <__kernel_rem_pio2+0x1cc>
 8011a5c:	f1ba 0f01 	cmp.w	sl, #1
 8011a60:	f000 80c0 	beq.w	8011be4 <__kernel_rem_pio2+0x344>
 8011a64:	f1ba 0f02 	cmp.w	sl, #2
 8011a68:	f000 80c6 	beq.w	8011bf8 <__kernel_rem_pio2+0x358>
 8011a6c:	f1bb 0f02 	cmp.w	fp, #2
 8011a70:	d14d      	bne.n	8011b0e <__kernel_rem_pio2+0x26e>
 8011a72:	4632      	mov	r2, r6
 8011a74:	463b      	mov	r3, r7
 8011a76:	4956      	ldr	r1, [pc, #344]	; (8011bd0 <__kernel_rem_pio2+0x330>)
 8011a78:	2000      	movs	r0, #0
 8011a7a:	f7ee fc0d 	bl	8000298 <__aeabi_dsub>
 8011a7e:	4606      	mov	r6, r0
 8011a80:	460f      	mov	r7, r1
 8011a82:	2d00      	cmp	r5, #0
 8011a84:	d043      	beq.n	8011b0e <__kernel_rem_pio2+0x26e>
 8011a86:	4650      	mov	r0, sl
 8011a88:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011bc0 <__kernel_rem_pio2+0x320>
 8011a8c:	f001 f8c0 	bl	8012c10 <scalbn>
 8011a90:	4630      	mov	r0, r6
 8011a92:	4639      	mov	r1, r7
 8011a94:	ec53 2b10 	vmov	r2, r3, d0
 8011a98:	f7ee fbfe 	bl	8000298 <__aeabi_dsub>
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	460f      	mov	r7, r1
 8011aa0:	e035      	b.n	8011b0e <__kernel_rem_pio2+0x26e>
 8011aa2:	4b4c      	ldr	r3, [pc, #304]	; (8011bd4 <__kernel_rem_pio2+0x334>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	f7ee fdad 	bl	8000608 <__aeabi_dmul>
 8011aae:	f7ef f85b 	bl	8000b68 <__aeabi_d2iz>
 8011ab2:	f7ee fd3f 	bl	8000534 <__aeabi_i2d>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	ec43 2b18 	vmov	d8, r2, r3
 8011abe:	4b46      	ldr	r3, [pc, #280]	; (8011bd8 <__kernel_rem_pio2+0x338>)
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f7ee fda1 	bl	8000608 <__aeabi_dmul>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	460b      	mov	r3, r1
 8011aca:	4630      	mov	r0, r6
 8011acc:	4639      	mov	r1, r7
 8011ace:	f7ee fbe3 	bl	8000298 <__aeabi_dsub>
 8011ad2:	f7ef f849 	bl	8000b68 <__aeabi_d2iz>
 8011ad6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ada:	f84b 0b04 	str.w	r0, [fp], #4
 8011ade:	ec51 0b18 	vmov	r0, r1, d8
 8011ae2:	f7ee fbdb 	bl	800029c <__adddf3>
 8011ae6:	f109 39ff 	add.w	r9, r9, #4294967295
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	e75b      	b.n	80119a8 <__kernel_rem_pio2+0x108>
 8011af0:	d106      	bne.n	8011b00 <__kernel_rem_pio2+0x260>
 8011af2:	1e63      	subs	r3, r4, #1
 8011af4:	aa0e      	add	r2, sp, #56	; 0x38
 8011af6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011afa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011afe:	e79d      	b.n	8011a3c <__kernel_rem_pio2+0x19c>
 8011b00:	4b36      	ldr	r3, [pc, #216]	; (8011bdc <__kernel_rem_pio2+0x33c>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	f7ef f806 	bl	8000b14 <__aeabi_dcmpge>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d13d      	bne.n	8011b88 <__kernel_rem_pio2+0x2e8>
 8011b0c:	4683      	mov	fp, r0
 8011b0e:	2200      	movs	r2, #0
 8011b10:	2300      	movs	r3, #0
 8011b12:	4630      	mov	r0, r6
 8011b14:	4639      	mov	r1, r7
 8011b16:	f7ee ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	f000 80c0 	beq.w	8011ca0 <__kernel_rem_pio2+0x400>
 8011b20:	1e65      	subs	r5, r4, #1
 8011b22:	462b      	mov	r3, r5
 8011b24:	2200      	movs	r2, #0
 8011b26:	9902      	ldr	r1, [sp, #8]
 8011b28:	428b      	cmp	r3, r1
 8011b2a:	da6c      	bge.n	8011c06 <__kernel_rem_pio2+0x366>
 8011b2c:	2a00      	cmp	r2, #0
 8011b2e:	f000 8089 	beq.w	8011c44 <__kernel_rem_pio2+0x3a4>
 8011b32:	ab0e      	add	r3, sp, #56	; 0x38
 8011b34:	f1aa 0a18 	sub.w	sl, sl, #24
 8011b38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f000 80ad 	beq.w	8011c9c <__kernel_rem_pio2+0x3fc>
 8011b42:	4650      	mov	r0, sl
 8011b44:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011bc0 <__kernel_rem_pio2+0x320>
 8011b48:	f001 f862 	bl	8012c10 <scalbn>
 8011b4c:	ab9a      	add	r3, sp, #616	; 0x268
 8011b4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011b52:	ec57 6b10 	vmov	r6, r7, d0
 8011b56:	00ec      	lsls	r4, r5, #3
 8011b58:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011b5c:	46aa      	mov	sl, r5
 8011b5e:	f1ba 0f00 	cmp.w	sl, #0
 8011b62:	f280 80d6 	bge.w	8011d12 <__kernel_rem_pio2+0x472>
 8011b66:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011bb8 <__kernel_rem_pio2+0x318>
 8011b6a:	462e      	mov	r6, r5
 8011b6c:	2e00      	cmp	r6, #0
 8011b6e:	f2c0 8104 	blt.w	8011d7a <__kernel_rem_pio2+0x4da>
 8011b72:	ab72      	add	r3, sp, #456	; 0x1c8
 8011b74:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011b78:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011be0 <__kernel_rem_pio2+0x340>
 8011b7c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011b80:	f04f 0800 	mov.w	r8, #0
 8011b84:	1baf      	subs	r7, r5, r6
 8011b86:	e0ea      	b.n	8011d5e <__kernel_rem_pio2+0x4be>
 8011b88:	f04f 0b02 	mov.w	fp, #2
 8011b8c:	e759      	b.n	8011a42 <__kernel_rem_pio2+0x1a2>
 8011b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011b92:	b955      	cbnz	r5, 8011baa <__kernel_rem_pio2+0x30a>
 8011b94:	b123      	cbz	r3, 8011ba0 <__kernel_rem_pio2+0x300>
 8011b96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011b9a:	f8c8 3000 	str.w	r3, [r8]
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	3201      	adds	r2, #1
 8011ba2:	f108 0804 	add.w	r8, r8, #4
 8011ba6:	461d      	mov	r5, r3
 8011ba8:	e752      	b.n	8011a50 <__kernel_rem_pio2+0x1b0>
 8011baa:	1acb      	subs	r3, r1, r3
 8011bac:	f8c8 3000 	str.w	r3, [r8]
 8011bb0:	462b      	mov	r3, r5
 8011bb2:	e7f5      	b.n	8011ba0 <__kernel_rem_pio2+0x300>
 8011bb4:	f3af 8000 	nop.w
	...
 8011bc4:	3ff00000 	.word	0x3ff00000
 8011bc8:	08013940 	.word	0x08013940
 8011bcc:	40200000 	.word	0x40200000
 8011bd0:	3ff00000 	.word	0x3ff00000
 8011bd4:	3e700000 	.word	0x3e700000
 8011bd8:	41700000 	.word	0x41700000
 8011bdc:	3fe00000 	.word	0x3fe00000
 8011be0:	08013900 	.word	0x08013900
 8011be4:	1e62      	subs	r2, r4, #1
 8011be6:	ab0e      	add	r3, sp, #56	; 0x38
 8011be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011bf0:	a90e      	add	r1, sp, #56	; 0x38
 8011bf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011bf6:	e739      	b.n	8011a6c <__kernel_rem_pio2+0x1cc>
 8011bf8:	1e62      	subs	r2, r4, #1
 8011bfa:	ab0e      	add	r3, sp, #56	; 0x38
 8011bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011c04:	e7f4      	b.n	8011bf0 <__kernel_rem_pio2+0x350>
 8011c06:	a90e      	add	r1, sp, #56	; 0x38
 8011c08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011c0c:	3b01      	subs	r3, #1
 8011c0e:	430a      	orrs	r2, r1
 8011c10:	e789      	b.n	8011b26 <__kernel_rem_pio2+0x286>
 8011c12:	3301      	adds	r3, #1
 8011c14:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011c18:	2900      	cmp	r1, #0
 8011c1a:	d0fa      	beq.n	8011c12 <__kernel_rem_pio2+0x372>
 8011c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c1e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011c22:	446a      	add	r2, sp
 8011c24:	3a98      	subs	r2, #152	; 0x98
 8011c26:	920a      	str	r2, [sp, #40]	; 0x28
 8011c28:	9a08      	ldr	r2, [sp, #32]
 8011c2a:	18e3      	adds	r3, r4, r3
 8011c2c:	18a5      	adds	r5, r4, r2
 8011c2e:	aa22      	add	r2, sp, #136	; 0x88
 8011c30:	f104 0801 	add.w	r8, r4, #1
 8011c34:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011c38:	9304      	str	r3, [sp, #16]
 8011c3a:	9b04      	ldr	r3, [sp, #16]
 8011c3c:	4543      	cmp	r3, r8
 8011c3e:	da04      	bge.n	8011c4a <__kernel_rem_pio2+0x3aa>
 8011c40:	461c      	mov	r4, r3
 8011c42:	e6a3      	b.n	801198c <__kernel_rem_pio2+0xec>
 8011c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c46:	2301      	movs	r3, #1
 8011c48:	e7e4      	b.n	8011c14 <__kernel_rem_pio2+0x374>
 8011c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011c50:	f7ee fc70 	bl	8000534 <__aeabi_i2d>
 8011c54:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c5a:	46ab      	mov	fp, r5
 8011c5c:	461c      	mov	r4, r3
 8011c5e:	f04f 0900 	mov.w	r9, #0
 8011c62:	2600      	movs	r6, #0
 8011c64:	2700      	movs	r7, #0
 8011c66:	9b06      	ldr	r3, [sp, #24]
 8011c68:	4599      	cmp	r9, r3
 8011c6a:	dd06      	ble.n	8011c7a <__kernel_rem_pio2+0x3da>
 8011c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c6e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011c72:	f108 0801 	add.w	r8, r8, #1
 8011c76:	930a      	str	r3, [sp, #40]	; 0x28
 8011c78:	e7df      	b.n	8011c3a <__kernel_rem_pio2+0x39a>
 8011c7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011c7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011c82:	f7ee fcc1 	bl	8000608 <__aeabi_dmul>
 8011c86:	4602      	mov	r2, r0
 8011c88:	460b      	mov	r3, r1
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	4639      	mov	r1, r7
 8011c8e:	f7ee fb05 	bl	800029c <__adddf3>
 8011c92:	f109 0901 	add.w	r9, r9, #1
 8011c96:	4606      	mov	r6, r0
 8011c98:	460f      	mov	r7, r1
 8011c9a:	e7e4      	b.n	8011c66 <__kernel_rem_pio2+0x3c6>
 8011c9c:	3d01      	subs	r5, #1
 8011c9e:	e748      	b.n	8011b32 <__kernel_rem_pio2+0x292>
 8011ca0:	ec47 6b10 	vmov	d0, r6, r7
 8011ca4:	f1ca 0000 	rsb	r0, sl, #0
 8011ca8:	f000 ffb2 	bl	8012c10 <scalbn>
 8011cac:	ec57 6b10 	vmov	r6, r7, d0
 8011cb0:	4ba0      	ldr	r3, [pc, #640]	; (8011f34 <__kernel_rem_pio2+0x694>)
 8011cb2:	ee10 0a10 	vmov	r0, s0
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	4639      	mov	r1, r7
 8011cba:	f7ee ff2b 	bl	8000b14 <__aeabi_dcmpge>
 8011cbe:	b1f8      	cbz	r0, 8011d00 <__kernel_rem_pio2+0x460>
 8011cc0:	4b9d      	ldr	r3, [pc, #628]	; (8011f38 <__kernel_rem_pio2+0x698>)
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	4630      	mov	r0, r6
 8011cc6:	4639      	mov	r1, r7
 8011cc8:	f7ee fc9e 	bl	8000608 <__aeabi_dmul>
 8011ccc:	f7ee ff4c 	bl	8000b68 <__aeabi_d2iz>
 8011cd0:	4680      	mov	r8, r0
 8011cd2:	f7ee fc2f 	bl	8000534 <__aeabi_i2d>
 8011cd6:	4b97      	ldr	r3, [pc, #604]	; (8011f34 <__kernel_rem_pio2+0x694>)
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f7ee fc95 	bl	8000608 <__aeabi_dmul>
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	f7ee fad7 	bl	8000298 <__aeabi_dsub>
 8011cea:	f7ee ff3d 	bl	8000b68 <__aeabi_d2iz>
 8011cee:	1c65      	adds	r5, r4, #1
 8011cf0:	ab0e      	add	r3, sp, #56	; 0x38
 8011cf2:	f10a 0a18 	add.w	sl, sl, #24
 8011cf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011cfa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011cfe:	e720      	b.n	8011b42 <__kernel_rem_pio2+0x2a2>
 8011d00:	4630      	mov	r0, r6
 8011d02:	4639      	mov	r1, r7
 8011d04:	f7ee ff30 	bl	8000b68 <__aeabi_d2iz>
 8011d08:	ab0e      	add	r3, sp, #56	; 0x38
 8011d0a:	4625      	mov	r5, r4
 8011d0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011d10:	e717      	b.n	8011b42 <__kernel_rem_pio2+0x2a2>
 8011d12:	ab0e      	add	r3, sp, #56	; 0x38
 8011d14:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011d18:	f7ee fc0c 	bl	8000534 <__aeabi_i2d>
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	f7ee fc72 	bl	8000608 <__aeabi_dmul>
 8011d24:	4b84      	ldr	r3, [pc, #528]	; (8011f38 <__kernel_rem_pio2+0x698>)
 8011d26:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	4639      	mov	r1, r7
 8011d30:	f7ee fc6a 	bl	8000608 <__aeabi_dmul>
 8011d34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d38:	4606      	mov	r6, r0
 8011d3a:	460f      	mov	r7, r1
 8011d3c:	e70f      	b.n	8011b5e <__kernel_rem_pio2+0x2be>
 8011d3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011d42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011d46:	f7ee fc5f 	bl	8000608 <__aeabi_dmul>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d52:	f7ee faa3 	bl	800029c <__adddf3>
 8011d56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011d5a:	f108 0801 	add.w	r8, r8, #1
 8011d5e:	9b02      	ldr	r3, [sp, #8]
 8011d60:	4598      	cmp	r8, r3
 8011d62:	dc01      	bgt.n	8011d68 <__kernel_rem_pio2+0x4c8>
 8011d64:	45b8      	cmp	r8, r7
 8011d66:	ddea      	ble.n	8011d3e <__kernel_rem_pio2+0x49e>
 8011d68:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011d6c:	ab4a      	add	r3, sp, #296	; 0x128
 8011d6e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011d72:	ed87 7b00 	vstr	d7, [r7]
 8011d76:	3e01      	subs	r6, #1
 8011d78:	e6f8      	b.n	8011b6c <__kernel_rem_pio2+0x2cc>
 8011d7a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011d7c:	2b02      	cmp	r3, #2
 8011d7e:	dc0b      	bgt.n	8011d98 <__kernel_rem_pio2+0x4f8>
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	dc35      	bgt.n	8011df0 <__kernel_rem_pio2+0x550>
 8011d84:	d059      	beq.n	8011e3a <__kernel_rem_pio2+0x59a>
 8011d86:	9b04      	ldr	r3, [sp, #16]
 8011d88:	f003 0007 	and.w	r0, r3, #7
 8011d8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011d90:	ecbd 8b02 	vpop	{d8}
 8011d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011d9a:	2b03      	cmp	r3, #3
 8011d9c:	d1f3      	bne.n	8011d86 <__kernel_rem_pio2+0x4e6>
 8011d9e:	ab4a      	add	r3, sp, #296	; 0x128
 8011da0:	4423      	add	r3, r4
 8011da2:	9306      	str	r3, [sp, #24]
 8011da4:	461c      	mov	r4, r3
 8011da6:	469a      	mov	sl, r3
 8011da8:	9502      	str	r5, [sp, #8]
 8011daa:	9b02      	ldr	r3, [sp, #8]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f1aa 0a08 	sub.w	sl, sl, #8
 8011db2:	dc6b      	bgt.n	8011e8c <__kernel_rem_pio2+0x5ec>
 8011db4:	46aa      	mov	sl, r5
 8011db6:	f1ba 0f01 	cmp.w	sl, #1
 8011dba:	f1a4 0408 	sub.w	r4, r4, #8
 8011dbe:	f300 8085 	bgt.w	8011ecc <__kernel_rem_pio2+0x62c>
 8011dc2:	9c06      	ldr	r4, [sp, #24]
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	3408      	adds	r4, #8
 8011dc8:	2100      	movs	r1, #0
 8011dca:	2d01      	cmp	r5, #1
 8011dcc:	f300 809d 	bgt.w	8011f0a <__kernel_rem_pio2+0x66a>
 8011dd0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011dd4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011dd8:	f1bb 0f00 	cmp.w	fp, #0
 8011ddc:	f040 809b 	bne.w	8011f16 <__kernel_rem_pio2+0x676>
 8011de0:	9b01      	ldr	r3, [sp, #4]
 8011de2:	e9c3 5600 	strd	r5, r6, [r3]
 8011de6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011dea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011dee:	e7ca      	b.n	8011d86 <__kernel_rem_pio2+0x4e6>
 8011df0:	3408      	adds	r4, #8
 8011df2:	ab4a      	add	r3, sp, #296	; 0x128
 8011df4:	441c      	add	r4, r3
 8011df6:	462e      	mov	r6, r5
 8011df8:	2000      	movs	r0, #0
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	2e00      	cmp	r6, #0
 8011dfe:	da36      	bge.n	8011e6e <__kernel_rem_pio2+0x5ce>
 8011e00:	f1bb 0f00 	cmp.w	fp, #0
 8011e04:	d039      	beq.n	8011e7a <__kernel_rem_pio2+0x5da>
 8011e06:	4602      	mov	r2, r0
 8011e08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e0c:	9c01      	ldr	r4, [sp, #4]
 8011e0e:	e9c4 2300 	strd	r2, r3, [r4]
 8011e12:	4602      	mov	r2, r0
 8011e14:	460b      	mov	r3, r1
 8011e16:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011e1a:	f7ee fa3d 	bl	8000298 <__aeabi_dsub>
 8011e1e:	ae4c      	add	r6, sp, #304	; 0x130
 8011e20:	2401      	movs	r4, #1
 8011e22:	42a5      	cmp	r5, r4
 8011e24:	da2c      	bge.n	8011e80 <__kernel_rem_pio2+0x5e0>
 8011e26:	f1bb 0f00 	cmp.w	fp, #0
 8011e2a:	d002      	beq.n	8011e32 <__kernel_rem_pio2+0x592>
 8011e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e30:	4619      	mov	r1, r3
 8011e32:	9b01      	ldr	r3, [sp, #4]
 8011e34:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011e38:	e7a5      	b.n	8011d86 <__kernel_rem_pio2+0x4e6>
 8011e3a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011e3e:	eb0d 0403 	add.w	r4, sp, r3
 8011e42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011e46:	2000      	movs	r0, #0
 8011e48:	2100      	movs	r1, #0
 8011e4a:	2d00      	cmp	r5, #0
 8011e4c:	da09      	bge.n	8011e62 <__kernel_rem_pio2+0x5c2>
 8011e4e:	f1bb 0f00 	cmp.w	fp, #0
 8011e52:	d002      	beq.n	8011e5a <__kernel_rem_pio2+0x5ba>
 8011e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e58:	4619      	mov	r1, r3
 8011e5a:	9b01      	ldr	r3, [sp, #4]
 8011e5c:	e9c3 0100 	strd	r0, r1, [r3]
 8011e60:	e791      	b.n	8011d86 <__kernel_rem_pio2+0x4e6>
 8011e62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e66:	f7ee fa19 	bl	800029c <__adddf3>
 8011e6a:	3d01      	subs	r5, #1
 8011e6c:	e7ed      	b.n	8011e4a <__kernel_rem_pio2+0x5aa>
 8011e6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e72:	f7ee fa13 	bl	800029c <__adddf3>
 8011e76:	3e01      	subs	r6, #1
 8011e78:	e7c0      	b.n	8011dfc <__kernel_rem_pio2+0x55c>
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	460b      	mov	r3, r1
 8011e7e:	e7c5      	b.n	8011e0c <__kernel_rem_pio2+0x56c>
 8011e80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011e84:	f7ee fa0a 	bl	800029c <__adddf3>
 8011e88:	3401      	adds	r4, #1
 8011e8a:	e7ca      	b.n	8011e22 <__kernel_rem_pio2+0x582>
 8011e8c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011e94:	9b02      	ldr	r3, [sp, #8]
 8011e96:	3b01      	subs	r3, #1
 8011e98:	9302      	str	r3, [sp, #8]
 8011e9a:	4632      	mov	r2, r6
 8011e9c:	463b      	mov	r3, r7
 8011e9e:	4640      	mov	r0, r8
 8011ea0:	4649      	mov	r1, r9
 8011ea2:	f7ee f9fb 	bl	800029c <__adddf3>
 8011ea6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011eaa:	4602      	mov	r2, r0
 8011eac:	460b      	mov	r3, r1
 8011eae:	4640      	mov	r0, r8
 8011eb0:	4649      	mov	r1, r9
 8011eb2:	f7ee f9f1 	bl	8000298 <__aeabi_dsub>
 8011eb6:	4632      	mov	r2, r6
 8011eb8:	463b      	mov	r3, r7
 8011eba:	f7ee f9ef 	bl	800029c <__adddf3>
 8011ebe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011ec2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ec6:	ed8a 7b00 	vstr	d7, [sl]
 8011eca:	e76e      	b.n	8011daa <__kernel_rem_pio2+0x50a>
 8011ecc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011ed0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011ed4:	4640      	mov	r0, r8
 8011ed6:	4632      	mov	r2, r6
 8011ed8:	463b      	mov	r3, r7
 8011eda:	4649      	mov	r1, r9
 8011edc:	f7ee f9de 	bl	800029c <__adddf3>
 8011ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	4640      	mov	r0, r8
 8011eea:	4649      	mov	r1, r9
 8011eec:	f7ee f9d4 	bl	8000298 <__aeabi_dsub>
 8011ef0:	4632      	mov	r2, r6
 8011ef2:	463b      	mov	r3, r7
 8011ef4:	f7ee f9d2 	bl	800029c <__adddf3>
 8011ef8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011efc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f00:	ed84 7b00 	vstr	d7, [r4]
 8011f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f08:	e755      	b.n	8011db6 <__kernel_rem_pio2+0x516>
 8011f0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f0e:	f7ee f9c5 	bl	800029c <__adddf3>
 8011f12:	3d01      	subs	r5, #1
 8011f14:	e759      	b.n	8011dca <__kernel_rem_pio2+0x52a>
 8011f16:	9b01      	ldr	r3, [sp, #4]
 8011f18:	9a01      	ldr	r2, [sp, #4]
 8011f1a:	601d      	str	r5, [r3, #0]
 8011f1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011f20:	605c      	str	r4, [r3, #4]
 8011f22:	609f      	str	r7, [r3, #8]
 8011f24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011f28:	60d3      	str	r3, [r2, #12]
 8011f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f2e:	6110      	str	r0, [r2, #16]
 8011f30:	6153      	str	r3, [r2, #20]
 8011f32:	e728      	b.n	8011d86 <__kernel_rem_pio2+0x4e6>
 8011f34:	41700000 	.word	0x41700000
 8011f38:	3e700000 	.word	0x3e700000
 8011f3c:	00000000 	.word	0x00000000

08011f40 <__kernel_sin>:
 8011f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f44:	ed2d 8b04 	vpush	{d8-d9}
 8011f48:	eeb0 8a41 	vmov.f32	s16, s2
 8011f4c:	eef0 8a61 	vmov.f32	s17, s3
 8011f50:	ec55 4b10 	vmov	r4, r5, d0
 8011f54:	b083      	sub	sp, #12
 8011f56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011f5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011f5e:	9001      	str	r0, [sp, #4]
 8011f60:	da06      	bge.n	8011f70 <__kernel_sin+0x30>
 8011f62:	ee10 0a10 	vmov	r0, s0
 8011f66:	4629      	mov	r1, r5
 8011f68:	f7ee fdfe 	bl	8000b68 <__aeabi_d2iz>
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d051      	beq.n	8012014 <__kernel_sin+0xd4>
 8011f70:	4622      	mov	r2, r4
 8011f72:	462b      	mov	r3, r5
 8011f74:	4620      	mov	r0, r4
 8011f76:	4629      	mov	r1, r5
 8011f78:	f7ee fb46 	bl	8000608 <__aeabi_dmul>
 8011f7c:	4682      	mov	sl, r0
 8011f7e:	468b      	mov	fp, r1
 8011f80:	4602      	mov	r2, r0
 8011f82:	460b      	mov	r3, r1
 8011f84:	4620      	mov	r0, r4
 8011f86:	4629      	mov	r1, r5
 8011f88:	f7ee fb3e 	bl	8000608 <__aeabi_dmul>
 8011f8c:	a341      	add	r3, pc, #260	; (adr r3, 8012094 <__kernel_sin+0x154>)
 8011f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f92:	4680      	mov	r8, r0
 8011f94:	4689      	mov	r9, r1
 8011f96:	4650      	mov	r0, sl
 8011f98:	4659      	mov	r1, fp
 8011f9a:	f7ee fb35 	bl	8000608 <__aeabi_dmul>
 8011f9e:	a33f      	add	r3, pc, #252	; (adr r3, 801209c <__kernel_sin+0x15c>)
 8011fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa4:	f7ee f978 	bl	8000298 <__aeabi_dsub>
 8011fa8:	4652      	mov	r2, sl
 8011faa:	465b      	mov	r3, fp
 8011fac:	f7ee fb2c 	bl	8000608 <__aeabi_dmul>
 8011fb0:	a33c      	add	r3, pc, #240	; (adr r3, 80120a4 <__kernel_sin+0x164>)
 8011fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb6:	f7ee f971 	bl	800029c <__adddf3>
 8011fba:	4652      	mov	r2, sl
 8011fbc:	465b      	mov	r3, fp
 8011fbe:	f7ee fb23 	bl	8000608 <__aeabi_dmul>
 8011fc2:	a33a      	add	r3, pc, #232	; (adr r3, 80120ac <__kernel_sin+0x16c>)
 8011fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc8:	f7ee f966 	bl	8000298 <__aeabi_dsub>
 8011fcc:	4652      	mov	r2, sl
 8011fce:	465b      	mov	r3, fp
 8011fd0:	f7ee fb1a 	bl	8000608 <__aeabi_dmul>
 8011fd4:	a337      	add	r3, pc, #220	; (adr r3, 80120b4 <__kernel_sin+0x174>)
 8011fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fda:	f7ee f95f 	bl	800029c <__adddf3>
 8011fde:	9b01      	ldr	r3, [sp, #4]
 8011fe0:	4606      	mov	r6, r0
 8011fe2:	460f      	mov	r7, r1
 8011fe4:	b9eb      	cbnz	r3, 8012022 <__kernel_sin+0xe2>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	460b      	mov	r3, r1
 8011fea:	4650      	mov	r0, sl
 8011fec:	4659      	mov	r1, fp
 8011fee:	f7ee fb0b 	bl	8000608 <__aeabi_dmul>
 8011ff2:	a325      	add	r3, pc, #148	; (adr r3, 8012088 <__kernel_sin+0x148>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	f7ee f94e 	bl	8000298 <__aeabi_dsub>
 8011ffc:	4642      	mov	r2, r8
 8011ffe:	464b      	mov	r3, r9
 8012000:	f7ee fb02 	bl	8000608 <__aeabi_dmul>
 8012004:	4602      	mov	r2, r0
 8012006:	460b      	mov	r3, r1
 8012008:	4620      	mov	r0, r4
 801200a:	4629      	mov	r1, r5
 801200c:	f7ee f946 	bl	800029c <__adddf3>
 8012010:	4604      	mov	r4, r0
 8012012:	460d      	mov	r5, r1
 8012014:	ec45 4b10 	vmov	d0, r4, r5
 8012018:	b003      	add	sp, #12
 801201a:	ecbd 8b04 	vpop	{d8-d9}
 801201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012022:	4b1b      	ldr	r3, [pc, #108]	; (8012090 <__kernel_sin+0x150>)
 8012024:	ec51 0b18 	vmov	r0, r1, d8
 8012028:	2200      	movs	r2, #0
 801202a:	f7ee faed 	bl	8000608 <__aeabi_dmul>
 801202e:	4632      	mov	r2, r6
 8012030:	ec41 0b19 	vmov	d9, r0, r1
 8012034:	463b      	mov	r3, r7
 8012036:	4640      	mov	r0, r8
 8012038:	4649      	mov	r1, r9
 801203a:	f7ee fae5 	bl	8000608 <__aeabi_dmul>
 801203e:	4602      	mov	r2, r0
 8012040:	460b      	mov	r3, r1
 8012042:	ec51 0b19 	vmov	r0, r1, d9
 8012046:	f7ee f927 	bl	8000298 <__aeabi_dsub>
 801204a:	4652      	mov	r2, sl
 801204c:	465b      	mov	r3, fp
 801204e:	f7ee fadb 	bl	8000608 <__aeabi_dmul>
 8012052:	ec53 2b18 	vmov	r2, r3, d8
 8012056:	f7ee f91f 	bl	8000298 <__aeabi_dsub>
 801205a:	a30b      	add	r3, pc, #44	; (adr r3, 8012088 <__kernel_sin+0x148>)
 801205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012060:	4606      	mov	r6, r0
 8012062:	460f      	mov	r7, r1
 8012064:	4640      	mov	r0, r8
 8012066:	4649      	mov	r1, r9
 8012068:	f7ee face 	bl	8000608 <__aeabi_dmul>
 801206c:	4602      	mov	r2, r0
 801206e:	460b      	mov	r3, r1
 8012070:	4630      	mov	r0, r6
 8012072:	4639      	mov	r1, r7
 8012074:	f7ee f912 	bl	800029c <__adddf3>
 8012078:	4602      	mov	r2, r0
 801207a:	460b      	mov	r3, r1
 801207c:	4620      	mov	r0, r4
 801207e:	4629      	mov	r1, r5
 8012080:	f7ee f90a 	bl	8000298 <__aeabi_dsub>
 8012084:	e7c4      	b.n	8012010 <__kernel_sin+0xd0>
 8012086:	bf00      	nop
 8012088:	55555549 	.word	0x55555549
 801208c:	3fc55555 	.word	0x3fc55555
 8012090:	3fe00000 	.word	0x3fe00000
 8012094:	5acfd57c 	.word	0x5acfd57c
 8012098:	3de5d93a 	.word	0x3de5d93a
 801209c:	8a2b9ceb 	.word	0x8a2b9ceb
 80120a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80120a4:	57b1fe7d 	.word	0x57b1fe7d
 80120a8:	3ec71de3 	.word	0x3ec71de3
 80120ac:	19c161d5 	.word	0x19c161d5
 80120b0:	3f2a01a0 	.word	0x3f2a01a0
 80120b4:	1110f8a6 	.word	0x1110f8a6
 80120b8:	3f811111 	.word	0x3f811111
 80120bc:	00000000 	.word	0x00000000

080120c0 <__kernel_tan>:
 80120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	ed2d 8b06 	vpush	{d8-d10}
 80120c8:	ec5b ab10 	vmov	sl, fp, d0
 80120cc:	4be0      	ldr	r3, [pc, #896]	; (8012450 <__kernel_tan+0x390>)
 80120ce:	b083      	sub	sp, #12
 80120d0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80120d4:	429f      	cmp	r7, r3
 80120d6:	ec59 8b11 	vmov	r8, r9, d1
 80120da:	4606      	mov	r6, r0
 80120dc:	f8cd b000 	str.w	fp, [sp]
 80120e0:	dc61      	bgt.n	80121a6 <__kernel_tan+0xe6>
 80120e2:	ee10 0a10 	vmov	r0, s0
 80120e6:	4659      	mov	r1, fp
 80120e8:	f7ee fd3e 	bl	8000b68 <__aeabi_d2iz>
 80120ec:	4605      	mov	r5, r0
 80120ee:	2800      	cmp	r0, #0
 80120f0:	f040 8083 	bne.w	80121fa <__kernel_tan+0x13a>
 80120f4:	1c73      	adds	r3, r6, #1
 80120f6:	4652      	mov	r2, sl
 80120f8:	4313      	orrs	r3, r2
 80120fa:	433b      	orrs	r3, r7
 80120fc:	d112      	bne.n	8012124 <__kernel_tan+0x64>
 80120fe:	ec4b ab10 	vmov	d0, sl, fp
 8012102:	f7fe fd5d 	bl	8010bc0 <fabs>
 8012106:	49d3      	ldr	r1, [pc, #844]	; (8012454 <__kernel_tan+0x394>)
 8012108:	ec53 2b10 	vmov	r2, r3, d0
 801210c:	2000      	movs	r0, #0
 801210e:	f7ee fba5 	bl	800085c <__aeabi_ddiv>
 8012112:	4682      	mov	sl, r0
 8012114:	468b      	mov	fp, r1
 8012116:	ec4b ab10 	vmov	d0, sl, fp
 801211a:	b003      	add	sp, #12
 801211c:	ecbd 8b06 	vpop	{d8-d10}
 8012120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012124:	2e01      	cmp	r6, #1
 8012126:	d0f6      	beq.n	8012116 <__kernel_tan+0x56>
 8012128:	4642      	mov	r2, r8
 801212a:	464b      	mov	r3, r9
 801212c:	4650      	mov	r0, sl
 801212e:	4659      	mov	r1, fp
 8012130:	f7ee f8b4 	bl	800029c <__adddf3>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	460f      	mov	r7, r1
 801213a:	2000      	movs	r0, #0
 801213c:	49c6      	ldr	r1, [pc, #792]	; (8012458 <__kernel_tan+0x398>)
 801213e:	f7ee fb8d 	bl	800085c <__aeabi_ddiv>
 8012142:	e9cd 0100 	strd	r0, r1, [sp]
 8012146:	e9dd 2300 	ldrd	r2, r3, [sp]
 801214a:	462e      	mov	r6, r5
 801214c:	4652      	mov	r2, sl
 801214e:	462c      	mov	r4, r5
 8012150:	4630      	mov	r0, r6
 8012152:	461d      	mov	r5, r3
 8012154:	4639      	mov	r1, r7
 8012156:	465b      	mov	r3, fp
 8012158:	f7ee f89e 	bl	8000298 <__aeabi_dsub>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	4640      	mov	r0, r8
 8012162:	4649      	mov	r1, r9
 8012164:	f7ee f898 	bl	8000298 <__aeabi_dsub>
 8012168:	4632      	mov	r2, r6
 801216a:	462b      	mov	r3, r5
 801216c:	f7ee fa4c 	bl	8000608 <__aeabi_dmul>
 8012170:	4632      	mov	r2, r6
 8012172:	4680      	mov	r8, r0
 8012174:	4689      	mov	r9, r1
 8012176:	462b      	mov	r3, r5
 8012178:	4630      	mov	r0, r6
 801217a:	4639      	mov	r1, r7
 801217c:	f7ee fa44 	bl	8000608 <__aeabi_dmul>
 8012180:	4bb4      	ldr	r3, [pc, #720]	; (8012454 <__kernel_tan+0x394>)
 8012182:	2200      	movs	r2, #0
 8012184:	f7ee f88a 	bl	800029c <__adddf3>
 8012188:	4602      	mov	r2, r0
 801218a:	460b      	mov	r3, r1
 801218c:	4640      	mov	r0, r8
 801218e:	4649      	mov	r1, r9
 8012190:	f7ee f884 	bl	800029c <__adddf3>
 8012194:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012198:	f7ee fa36 	bl	8000608 <__aeabi_dmul>
 801219c:	4622      	mov	r2, r4
 801219e:	462b      	mov	r3, r5
 80121a0:	f7ee f87c 	bl	800029c <__adddf3>
 80121a4:	e7b5      	b.n	8012112 <__kernel_tan+0x52>
 80121a6:	4bad      	ldr	r3, [pc, #692]	; (801245c <__kernel_tan+0x39c>)
 80121a8:	429f      	cmp	r7, r3
 80121aa:	dd26      	ble.n	80121fa <__kernel_tan+0x13a>
 80121ac:	9b00      	ldr	r3, [sp, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	da09      	bge.n	80121c6 <__kernel_tan+0x106>
 80121b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80121b6:	469b      	mov	fp, r3
 80121b8:	ee10 aa10 	vmov	sl, s0
 80121bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80121c0:	ee11 8a10 	vmov	r8, s2
 80121c4:	4699      	mov	r9, r3
 80121c6:	4652      	mov	r2, sl
 80121c8:	465b      	mov	r3, fp
 80121ca:	a183      	add	r1, pc, #524	; (adr r1, 80123d8 <__kernel_tan+0x318>)
 80121cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121d0:	f7ee f862 	bl	8000298 <__aeabi_dsub>
 80121d4:	4642      	mov	r2, r8
 80121d6:	464b      	mov	r3, r9
 80121d8:	4604      	mov	r4, r0
 80121da:	460d      	mov	r5, r1
 80121dc:	a180      	add	r1, pc, #512	; (adr r1, 80123e0 <__kernel_tan+0x320>)
 80121de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121e2:	f7ee f859 	bl	8000298 <__aeabi_dsub>
 80121e6:	4622      	mov	r2, r4
 80121e8:	462b      	mov	r3, r5
 80121ea:	f7ee f857 	bl	800029c <__adddf3>
 80121ee:	f04f 0800 	mov.w	r8, #0
 80121f2:	4682      	mov	sl, r0
 80121f4:	468b      	mov	fp, r1
 80121f6:	f04f 0900 	mov.w	r9, #0
 80121fa:	4652      	mov	r2, sl
 80121fc:	465b      	mov	r3, fp
 80121fe:	4650      	mov	r0, sl
 8012200:	4659      	mov	r1, fp
 8012202:	f7ee fa01 	bl	8000608 <__aeabi_dmul>
 8012206:	4602      	mov	r2, r0
 8012208:	460b      	mov	r3, r1
 801220a:	ec43 2b18 	vmov	d8, r2, r3
 801220e:	f7ee f9fb 	bl	8000608 <__aeabi_dmul>
 8012212:	ec53 2b18 	vmov	r2, r3, d8
 8012216:	4604      	mov	r4, r0
 8012218:	460d      	mov	r5, r1
 801221a:	4650      	mov	r0, sl
 801221c:	4659      	mov	r1, fp
 801221e:	f7ee f9f3 	bl	8000608 <__aeabi_dmul>
 8012222:	a371      	add	r3, pc, #452	; (adr r3, 80123e8 <__kernel_tan+0x328>)
 8012224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012228:	ec41 0b19 	vmov	d9, r0, r1
 801222c:	4620      	mov	r0, r4
 801222e:	4629      	mov	r1, r5
 8012230:	f7ee f9ea 	bl	8000608 <__aeabi_dmul>
 8012234:	a36e      	add	r3, pc, #440	; (adr r3, 80123f0 <__kernel_tan+0x330>)
 8012236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223a:	f7ee f82f 	bl	800029c <__adddf3>
 801223e:	4622      	mov	r2, r4
 8012240:	462b      	mov	r3, r5
 8012242:	f7ee f9e1 	bl	8000608 <__aeabi_dmul>
 8012246:	a36c      	add	r3, pc, #432	; (adr r3, 80123f8 <__kernel_tan+0x338>)
 8012248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224c:	f7ee f826 	bl	800029c <__adddf3>
 8012250:	4622      	mov	r2, r4
 8012252:	462b      	mov	r3, r5
 8012254:	f7ee f9d8 	bl	8000608 <__aeabi_dmul>
 8012258:	a369      	add	r3, pc, #420	; (adr r3, 8012400 <__kernel_tan+0x340>)
 801225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225e:	f7ee f81d 	bl	800029c <__adddf3>
 8012262:	4622      	mov	r2, r4
 8012264:	462b      	mov	r3, r5
 8012266:	f7ee f9cf 	bl	8000608 <__aeabi_dmul>
 801226a:	a367      	add	r3, pc, #412	; (adr r3, 8012408 <__kernel_tan+0x348>)
 801226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012270:	f7ee f814 	bl	800029c <__adddf3>
 8012274:	4622      	mov	r2, r4
 8012276:	462b      	mov	r3, r5
 8012278:	f7ee f9c6 	bl	8000608 <__aeabi_dmul>
 801227c:	a364      	add	r3, pc, #400	; (adr r3, 8012410 <__kernel_tan+0x350>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	f7ee f80b 	bl	800029c <__adddf3>
 8012286:	ec53 2b18 	vmov	r2, r3, d8
 801228a:	f7ee f9bd 	bl	8000608 <__aeabi_dmul>
 801228e:	a362      	add	r3, pc, #392	; (adr r3, 8012418 <__kernel_tan+0x358>)
 8012290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012294:	ec41 0b1a 	vmov	d10, r0, r1
 8012298:	4620      	mov	r0, r4
 801229a:	4629      	mov	r1, r5
 801229c:	f7ee f9b4 	bl	8000608 <__aeabi_dmul>
 80122a0:	a35f      	add	r3, pc, #380	; (adr r3, 8012420 <__kernel_tan+0x360>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	f7ed fff9 	bl	800029c <__adddf3>
 80122aa:	4622      	mov	r2, r4
 80122ac:	462b      	mov	r3, r5
 80122ae:	f7ee f9ab 	bl	8000608 <__aeabi_dmul>
 80122b2:	a35d      	add	r3, pc, #372	; (adr r3, 8012428 <__kernel_tan+0x368>)
 80122b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b8:	f7ed fff0 	bl	800029c <__adddf3>
 80122bc:	4622      	mov	r2, r4
 80122be:	462b      	mov	r3, r5
 80122c0:	f7ee f9a2 	bl	8000608 <__aeabi_dmul>
 80122c4:	a35a      	add	r3, pc, #360	; (adr r3, 8012430 <__kernel_tan+0x370>)
 80122c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ca:	f7ed ffe7 	bl	800029c <__adddf3>
 80122ce:	4622      	mov	r2, r4
 80122d0:	462b      	mov	r3, r5
 80122d2:	f7ee f999 	bl	8000608 <__aeabi_dmul>
 80122d6:	a358      	add	r3, pc, #352	; (adr r3, 8012438 <__kernel_tan+0x378>)
 80122d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122dc:	f7ed ffde 	bl	800029c <__adddf3>
 80122e0:	4622      	mov	r2, r4
 80122e2:	462b      	mov	r3, r5
 80122e4:	f7ee f990 	bl	8000608 <__aeabi_dmul>
 80122e8:	a355      	add	r3, pc, #340	; (adr r3, 8012440 <__kernel_tan+0x380>)
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	f7ed ffd5 	bl	800029c <__adddf3>
 80122f2:	4602      	mov	r2, r0
 80122f4:	460b      	mov	r3, r1
 80122f6:	ec51 0b1a 	vmov	r0, r1, d10
 80122fa:	f7ed ffcf 	bl	800029c <__adddf3>
 80122fe:	ec53 2b19 	vmov	r2, r3, d9
 8012302:	f7ee f981 	bl	8000608 <__aeabi_dmul>
 8012306:	4642      	mov	r2, r8
 8012308:	464b      	mov	r3, r9
 801230a:	f7ed ffc7 	bl	800029c <__adddf3>
 801230e:	ec53 2b18 	vmov	r2, r3, d8
 8012312:	f7ee f979 	bl	8000608 <__aeabi_dmul>
 8012316:	4642      	mov	r2, r8
 8012318:	464b      	mov	r3, r9
 801231a:	f7ed ffbf 	bl	800029c <__adddf3>
 801231e:	a34a      	add	r3, pc, #296	; (adr r3, 8012448 <__kernel_tan+0x388>)
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	4604      	mov	r4, r0
 8012326:	460d      	mov	r5, r1
 8012328:	ec51 0b19 	vmov	r0, r1, d9
 801232c:	f7ee f96c 	bl	8000608 <__aeabi_dmul>
 8012330:	4622      	mov	r2, r4
 8012332:	462b      	mov	r3, r5
 8012334:	f7ed ffb2 	bl	800029c <__adddf3>
 8012338:	460b      	mov	r3, r1
 801233a:	ec41 0b18 	vmov	d8, r0, r1
 801233e:	4602      	mov	r2, r0
 8012340:	4659      	mov	r1, fp
 8012342:	4650      	mov	r0, sl
 8012344:	f7ed ffaa 	bl	800029c <__adddf3>
 8012348:	4b44      	ldr	r3, [pc, #272]	; (801245c <__kernel_tan+0x39c>)
 801234a:	429f      	cmp	r7, r3
 801234c:	4604      	mov	r4, r0
 801234e:	460d      	mov	r5, r1
 8012350:	f340 8086 	ble.w	8012460 <__kernel_tan+0x3a0>
 8012354:	4630      	mov	r0, r6
 8012356:	f7ee f8ed 	bl	8000534 <__aeabi_i2d>
 801235a:	4622      	mov	r2, r4
 801235c:	4680      	mov	r8, r0
 801235e:	4689      	mov	r9, r1
 8012360:	462b      	mov	r3, r5
 8012362:	4620      	mov	r0, r4
 8012364:	4629      	mov	r1, r5
 8012366:	f7ee f94f 	bl	8000608 <__aeabi_dmul>
 801236a:	4642      	mov	r2, r8
 801236c:	4606      	mov	r6, r0
 801236e:	460f      	mov	r7, r1
 8012370:	464b      	mov	r3, r9
 8012372:	4620      	mov	r0, r4
 8012374:	4629      	mov	r1, r5
 8012376:	f7ed ff91 	bl	800029c <__adddf3>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4630      	mov	r0, r6
 8012380:	4639      	mov	r1, r7
 8012382:	f7ee fa6b 	bl	800085c <__aeabi_ddiv>
 8012386:	ec53 2b18 	vmov	r2, r3, d8
 801238a:	f7ed ff85 	bl	8000298 <__aeabi_dsub>
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4650      	mov	r0, sl
 8012394:	4659      	mov	r1, fp
 8012396:	f7ed ff7f 	bl	8000298 <__aeabi_dsub>
 801239a:	4602      	mov	r2, r0
 801239c:	460b      	mov	r3, r1
 801239e:	f7ed ff7d 	bl	800029c <__adddf3>
 80123a2:	4602      	mov	r2, r0
 80123a4:	460b      	mov	r3, r1
 80123a6:	4640      	mov	r0, r8
 80123a8:	4649      	mov	r1, r9
 80123aa:	f7ed ff75 	bl	8000298 <__aeabi_dsub>
 80123ae:	9b00      	ldr	r3, [sp, #0]
 80123b0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80123b4:	f00a 0a02 	and.w	sl, sl, #2
 80123b8:	4604      	mov	r4, r0
 80123ba:	f1ca 0001 	rsb	r0, sl, #1
 80123be:	460d      	mov	r5, r1
 80123c0:	f7ee f8b8 	bl	8000534 <__aeabi_i2d>
 80123c4:	4602      	mov	r2, r0
 80123c6:	460b      	mov	r3, r1
 80123c8:	4620      	mov	r0, r4
 80123ca:	4629      	mov	r1, r5
 80123cc:	f7ee f91c 	bl	8000608 <__aeabi_dmul>
 80123d0:	e69f      	b.n	8012112 <__kernel_tan+0x52>
 80123d2:	bf00      	nop
 80123d4:	f3af 8000 	nop.w
 80123d8:	54442d18 	.word	0x54442d18
 80123dc:	3fe921fb 	.word	0x3fe921fb
 80123e0:	33145c07 	.word	0x33145c07
 80123e4:	3c81a626 	.word	0x3c81a626
 80123e8:	74bf7ad4 	.word	0x74bf7ad4
 80123ec:	3efb2a70 	.word	0x3efb2a70
 80123f0:	32f0a7e9 	.word	0x32f0a7e9
 80123f4:	3f12b80f 	.word	0x3f12b80f
 80123f8:	1a8d1068 	.word	0x1a8d1068
 80123fc:	3f3026f7 	.word	0x3f3026f7
 8012400:	fee08315 	.word	0xfee08315
 8012404:	3f57dbc8 	.word	0x3f57dbc8
 8012408:	e96e8493 	.word	0xe96e8493
 801240c:	3f8226e3 	.word	0x3f8226e3
 8012410:	1bb341fe 	.word	0x1bb341fe
 8012414:	3faba1ba 	.word	0x3faba1ba
 8012418:	db605373 	.word	0xdb605373
 801241c:	bef375cb 	.word	0xbef375cb
 8012420:	a03792a6 	.word	0xa03792a6
 8012424:	3f147e88 	.word	0x3f147e88
 8012428:	f2f26501 	.word	0xf2f26501
 801242c:	3f4344d8 	.word	0x3f4344d8
 8012430:	c9560328 	.word	0xc9560328
 8012434:	3f6d6d22 	.word	0x3f6d6d22
 8012438:	8406d637 	.word	0x8406d637
 801243c:	3f9664f4 	.word	0x3f9664f4
 8012440:	1110fe7a 	.word	0x1110fe7a
 8012444:	3fc11111 	.word	0x3fc11111
 8012448:	55555563 	.word	0x55555563
 801244c:	3fd55555 	.word	0x3fd55555
 8012450:	3e2fffff 	.word	0x3e2fffff
 8012454:	3ff00000 	.word	0x3ff00000
 8012458:	bff00000 	.word	0xbff00000
 801245c:	3fe59427 	.word	0x3fe59427
 8012460:	2e01      	cmp	r6, #1
 8012462:	d02f      	beq.n	80124c4 <__kernel_tan+0x404>
 8012464:	460f      	mov	r7, r1
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4689      	mov	r9, r1
 801246c:	2000      	movs	r0, #0
 801246e:	4917      	ldr	r1, [pc, #92]	; (80124cc <__kernel_tan+0x40c>)
 8012470:	f7ee f9f4 	bl	800085c <__aeabi_ddiv>
 8012474:	2600      	movs	r6, #0
 8012476:	e9cd 0100 	strd	r0, r1, [sp]
 801247a:	4652      	mov	r2, sl
 801247c:	465b      	mov	r3, fp
 801247e:	4630      	mov	r0, r6
 8012480:	4639      	mov	r1, r7
 8012482:	f7ed ff09 	bl	8000298 <__aeabi_dsub>
 8012486:	e9dd 4500 	ldrd	r4, r5, [sp]
 801248a:	4602      	mov	r2, r0
 801248c:	460b      	mov	r3, r1
 801248e:	ec51 0b18 	vmov	r0, r1, d8
 8012492:	f7ed ff01 	bl	8000298 <__aeabi_dsub>
 8012496:	4632      	mov	r2, r6
 8012498:	462b      	mov	r3, r5
 801249a:	f7ee f8b5 	bl	8000608 <__aeabi_dmul>
 801249e:	46b0      	mov	r8, r6
 80124a0:	460f      	mov	r7, r1
 80124a2:	4642      	mov	r2, r8
 80124a4:	462b      	mov	r3, r5
 80124a6:	4634      	mov	r4, r6
 80124a8:	4649      	mov	r1, r9
 80124aa:	4606      	mov	r6, r0
 80124ac:	4640      	mov	r0, r8
 80124ae:	f7ee f8ab 	bl	8000608 <__aeabi_dmul>
 80124b2:	4b07      	ldr	r3, [pc, #28]	; (80124d0 <__kernel_tan+0x410>)
 80124b4:	2200      	movs	r2, #0
 80124b6:	f7ed fef1 	bl	800029c <__adddf3>
 80124ba:	4602      	mov	r2, r0
 80124bc:	460b      	mov	r3, r1
 80124be:	4630      	mov	r0, r6
 80124c0:	4639      	mov	r1, r7
 80124c2:	e665      	b.n	8012190 <__kernel_tan+0xd0>
 80124c4:	4682      	mov	sl, r0
 80124c6:	468b      	mov	fp, r1
 80124c8:	e625      	b.n	8012116 <__kernel_tan+0x56>
 80124ca:	bf00      	nop
 80124cc:	bff00000 	.word	0xbff00000
 80124d0:	3ff00000 	.word	0x3ff00000

080124d4 <__kernel_cosf>:
 80124d4:	ee10 3a10 	vmov	r3, s0
 80124d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80124e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80124e4:	da05      	bge.n	80124f2 <__kernel_cosf+0x1e>
 80124e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80124ea:	ee17 2a90 	vmov	r2, s15
 80124ee:	2a00      	cmp	r2, #0
 80124f0:	d03d      	beq.n	801256e <__kernel_cosf+0x9a>
 80124f2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80124f6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012574 <__kernel_cosf+0xa0>
 80124fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8012578 <__kernel_cosf+0xa4>
 80124fe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801257c <__kernel_cosf+0xa8>
 8012502:	4a1f      	ldr	r2, [pc, #124]	; (8012580 <__kernel_cosf+0xac>)
 8012504:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012508:	4293      	cmp	r3, r2
 801250a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012584 <__kernel_cosf+0xb0>
 801250e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012512:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012588 <__kernel_cosf+0xb4>
 8012516:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801251a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801258c <__kernel_cosf+0xb8>
 801251e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012522:	eeb0 7a66 	vmov.f32	s14, s13
 8012526:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801252a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801252e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8012532:	ee67 6a25 	vmul.f32	s13, s14, s11
 8012536:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801253a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801253e:	dc04      	bgt.n	801254a <__kernel_cosf+0x76>
 8012540:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012544:	ee36 0a47 	vsub.f32	s0, s12, s14
 8012548:	4770      	bx	lr
 801254a:	4a11      	ldr	r2, [pc, #68]	; (8012590 <__kernel_cosf+0xbc>)
 801254c:	4293      	cmp	r3, r2
 801254e:	bfda      	itte	le
 8012550:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012554:	ee06 3a90 	vmovle	s13, r3
 8012558:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801255c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012560:	ee36 0a66 	vsub.f32	s0, s12, s13
 8012564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012568:	ee30 0a67 	vsub.f32	s0, s0, s15
 801256c:	4770      	bx	lr
 801256e:	eeb0 0a46 	vmov.f32	s0, s12
 8012572:	4770      	bx	lr
 8012574:	ad47d74e 	.word	0xad47d74e
 8012578:	310f74f6 	.word	0x310f74f6
 801257c:	3d2aaaab 	.word	0x3d2aaaab
 8012580:	3e999999 	.word	0x3e999999
 8012584:	b493f27c 	.word	0xb493f27c
 8012588:	37d00d01 	.word	0x37d00d01
 801258c:	bab60b61 	.word	0xbab60b61
 8012590:	3f480000 	.word	0x3f480000

08012594 <__kernel_rem_pio2f>:
 8012594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012598:	ed2d 8b04 	vpush	{d8-d9}
 801259c:	b0d9      	sub	sp, #356	; 0x164
 801259e:	4688      	mov	r8, r1
 80125a0:	9002      	str	r0, [sp, #8]
 80125a2:	49bb      	ldr	r1, [pc, #748]	; (8012890 <__kernel_rem_pio2f+0x2fc>)
 80125a4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80125ac:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80125b0:	1e59      	subs	r1, r3, #1
 80125b2:	1d13      	adds	r3, r2, #4
 80125b4:	db27      	blt.n	8012606 <__kernel_rem_pio2f+0x72>
 80125b6:	f1b2 0b03 	subs.w	fp, r2, #3
 80125ba:	bf48      	it	mi
 80125bc:	f102 0b04 	addmi.w	fp, r2, #4
 80125c0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80125c4:	1c45      	adds	r5, r0, #1
 80125c6:	00ec      	lsls	r4, r5, #3
 80125c8:	1a47      	subs	r7, r0, r1
 80125ca:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 80125ce:	9403      	str	r4, [sp, #12]
 80125d0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80125d4:	eb0a 0c01 	add.w	ip, sl, r1
 80125d8:	ae1c      	add	r6, sp, #112	; 0x70
 80125da:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80125de:	2400      	movs	r4, #0
 80125e0:	4564      	cmp	r4, ip
 80125e2:	dd12      	ble.n	801260a <__kernel_rem_pio2f+0x76>
 80125e4:	9b01      	ldr	r3, [sp, #4]
 80125e6:	ac1c      	add	r4, sp, #112	; 0x70
 80125e8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80125ec:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80125f0:	f04f 0c00 	mov.w	ip, #0
 80125f4:	45d4      	cmp	ip, sl
 80125f6:	dc27      	bgt.n	8012648 <__kernel_rem_pio2f+0xb4>
 80125f8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80125fc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 8012600:	4627      	mov	r7, r4
 8012602:	2600      	movs	r6, #0
 8012604:	e016      	b.n	8012634 <__kernel_rem_pio2f+0xa0>
 8012606:	2000      	movs	r0, #0
 8012608:	e7dc      	b.n	80125c4 <__kernel_rem_pio2f+0x30>
 801260a:	42e7      	cmn	r7, r4
 801260c:	bf5d      	ittte	pl
 801260e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8012612:	ee07 3a90 	vmovpl	s15, r3
 8012616:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801261a:	eef0 7a47 	vmovmi.f32	s15, s14
 801261e:	ece6 7a01 	vstmia	r6!, {s15}
 8012622:	3401      	adds	r4, #1
 8012624:	e7dc      	b.n	80125e0 <__kernel_rem_pio2f+0x4c>
 8012626:	ecf9 6a01 	vldmia	r9!, {s13}
 801262a:	ed97 7a00 	vldr	s14, [r7]
 801262e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012632:	3601      	adds	r6, #1
 8012634:	428e      	cmp	r6, r1
 8012636:	f1a7 0704 	sub.w	r7, r7, #4
 801263a:	ddf4      	ble.n	8012626 <__kernel_rem_pio2f+0x92>
 801263c:	eceb 7a01 	vstmia	fp!, {s15}
 8012640:	f10c 0c01 	add.w	ip, ip, #1
 8012644:	3404      	adds	r4, #4
 8012646:	e7d5      	b.n	80125f4 <__kernel_rem_pio2f+0x60>
 8012648:	ab08      	add	r3, sp, #32
 801264a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801264e:	eddf 8a93 	vldr	s17, [pc, #588]	; 801289c <__kernel_rem_pio2f+0x308>
 8012652:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8012898 <__kernel_rem_pio2f+0x304>
 8012656:	9304      	str	r3, [sp, #16]
 8012658:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801265c:	4656      	mov	r6, sl
 801265e:	00b3      	lsls	r3, r6, #2
 8012660:	9305      	str	r3, [sp, #20]
 8012662:	ab58      	add	r3, sp, #352	; 0x160
 8012664:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8012668:	ac08      	add	r4, sp, #32
 801266a:	ab44      	add	r3, sp, #272	; 0x110
 801266c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8012670:	46a4      	mov	ip, r4
 8012672:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8012676:	4637      	mov	r7, r6
 8012678:	2f00      	cmp	r7, #0
 801267a:	f1a0 0004 	sub.w	r0, r0, #4
 801267e:	dc4f      	bgt.n	8012720 <__kernel_rem_pio2f+0x18c>
 8012680:	4628      	mov	r0, r5
 8012682:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012686:	f000 fb93 	bl	8012db0 <scalbnf>
 801268a:	eeb0 8a40 	vmov.f32	s16, s0
 801268e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012692:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012696:	f000 fb49 	bl	8012d2c <floorf>
 801269a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801269e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80126a2:	2d00      	cmp	r5, #0
 80126a4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80126a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80126ac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80126b0:	ee17 9a90 	vmov	r9, s15
 80126b4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80126b8:	dd44      	ble.n	8012744 <__kernel_rem_pio2f+0x1b0>
 80126ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80126be:	ab08      	add	r3, sp, #32
 80126c0:	f1c5 0e08 	rsb	lr, r5, #8
 80126c4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80126c8:	fa47 f00e 	asr.w	r0, r7, lr
 80126cc:	4481      	add	r9, r0
 80126ce:	fa00 f00e 	lsl.w	r0, r0, lr
 80126d2:	1a3f      	subs	r7, r7, r0
 80126d4:	f1c5 0007 	rsb	r0, r5, #7
 80126d8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80126dc:	4107      	asrs	r7, r0
 80126de:	2f00      	cmp	r7, #0
 80126e0:	dd3f      	ble.n	8012762 <__kernel_rem_pio2f+0x1ce>
 80126e2:	f04f 0e00 	mov.w	lr, #0
 80126e6:	f109 0901 	add.w	r9, r9, #1
 80126ea:	4673      	mov	r3, lr
 80126ec:	4576      	cmp	r6, lr
 80126ee:	dc6b      	bgt.n	80127c8 <__kernel_rem_pio2f+0x234>
 80126f0:	2d00      	cmp	r5, #0
 80126f2:	dd04      	ble.n	80126fe <__kernel_rem_pio2f+0x16a>
 80126f4:	2d01      	cmp	r5, #1
 80126f6:	d078      	beq.n	80127ea <__kernel_rem_pio2f+0x256>
 80126f8:	2d02      	cmp	r5, #2
 80126fa:	f000 8081 	beq.w	8012800 <__kernel_rem_pio2f+0x26c>
 80126fe:	2f02      	cmp	r7, #2
 8012700:	d12f      	bne.n	8012762 <__kernel_rem_pio2f+0x1ce>
 8012702:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012706:	ee30 8a48 	vsub.f32	s16, s0, s16
 801270a:	b353      	cbz	r3, 8012762 <__kernel_rem_pio2f+0x1ce>
 801270c:	4628      	mov	r0, r5
 801270e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012712:	f000 fb4d 	bl	8012db0 <scalbnf>
 8012716:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801271a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801271e:	e020      	b.n	8012762 <__kernel_rem_pio2f+0x1ce>
 8012720:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012724:	3f01      	subs	r7, #1
 8012726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801272a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801272e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012732:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012736:	ecac 0a01 	vstmia	ip!, {s0}
 801273a:	ed90 0a00 	vldr	s0, [r0]
 801273e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012742:	e799      	b.n	8012678 <__kernel_rem_pio2f+0xe4>
 8012744:	d105      	bne.n	8012752 <__kernel_rem_pio2f+0x1be>
 8012746:	1e70      	subs	r0, r6, #1
 8012748:	ab08      	add	r3, sp, #32
 801274a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801274e:	11ff      	asrs	r7, r7, #7
 8012750:	e7c5      	b.n	80126de <__kernel_rem_pio2f+0x14a>
 8012752:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012756:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801275e:	da31      	bge.n	80127c4 <__kernel_rem_pio2f+0x230>
 8012760:	2700      	movs	r7, #0
 8012762:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276a:	f040 809b 	bne.w	80128a4 <__kernel_rem_pio2f+0x310>
 801276e:	1e74      	subs	r4, r6, #1
 8012770:	46a4      	mov	ip, r4
 8012772:	2000      	movs	r0, #0
 8012774:	45d4      	cmp	ip, sl
 8012776:	da4a      	bge.n	801280e <__kernel_rem_pio2f+0x27a>
 8012778:	2800      	cmp	r0, #0
 801277a:	d07a      	beq.n	8012872 <__kernel_rem_pio2f+0x2de>
 801277c:	ab08      	add	r3, sp, #32
 801277e:	3d08      	subs	r5, #8
 8012780:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012784:	2b00      	cmp	r3, #0
 8012786:	f000 8081 	beq.w	801288c <__kernel_rem_pio2f+0x2f8>
 801278a:	4628      	mov	r0, r5
 801278c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012790:	00a5      	lsls	r5, r4, #2
 8012792:	f000 fb0d 	bl	8012db0 <scalbnf>
 8012796:	aa44      	add	r2, sp, #272	; 0x110
 8012798:	1d2b      	adds	r3, r5, #4
 801279a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801289c <__kernel_rem_pio2f+0x308>
 801279e:	18d1      	adds	r1, r2, r3
 80127a0:	4622      	mov	r2, r4
 80127a2:	2a00      	cmp	r2, #0
 80127a4:	f280 80ae 	bge.w	8012904 <__kernel_rem_pio2f+0x370>
 80127a8:	4622      	mov	r2, r4
 80127aa:	2a00      	cmp	r2, #0
 80127ac:	f2c0 80cc 	blt.w	8012948 <__kernel_rem_pio2f+0x3b4>
 80127b0:	a944      	add	r1, sp, #272	; 0x110
 80127b2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80127b6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8012894 <__kernel_rem_pio2f+0x300>
 80127ba:	eddf 7a39 	vldr	s15, [pc, #228]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 80127be:	2000      	movs	r0, #0
 80127c0:	1aa1      	subs	r1, r4, r2
 80127c2:	e0b6      	b.n	8012932 <__kernel_rem_pio2f+0x39e>
 80127c4:	2702      	movs	r7, #2
 80127c6:	e78c      	b.n	80126e2 <__kernel_rem_pio2f+0x14e>
 80127c8:	6820      	ldr	r0, [r4, #0]
 80127ca:	b94b      	cbnz	r3, 80127e0 <__kernel_rem_pio2f+0x24c>
 80127cc:	b118      	cbz	r0, 80127d6 <__kernel_rem_pio2f+0x242>
 80127ce:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80127d2:	6020      	str	r0, [r4, #0]
 80127d4:	2001      	movs	r0, #1
 80127d6:	f10e 0e01 	add.w	lr, lr, #1
 80127da:	3404      	adds	r4, #4
 80127dc:	4603      	mov	r3, r0
 80127de:	e785      	b.n	80126ec <__kernel_rem_pio2f+0x158>
 80127e0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80127e4:	6020      	str	r0, [r4, #0]
 80127e6:	4618      	mov	r0, r3
 80127e8:	e7f5      	b.n	80127d6 <__kernel_rem_pio2f+0x242>
 80127ea:	1e74      	subs	r4, r6, #1
 80127ec:	a808      	add	r0, sp, #32
 80127ee:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80127f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80127f6:	f10d 0c20 	add.w	ip, sp, #32
 80127fa:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80127fe:	e77e      	b.n	80126fe <__kernel_rem_pio2f+0x16a>
 8012800:	1e74      	subs	r4, r6, #1
 8012802:	a808      	add	r0, sp, #32
 8012804:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012808:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801280c:	e7f3      	b.n	80127f6 <__kernel_rem_pio2f+0x262>
 801280e:	ab08      	add	r3, sp, #32
 8012810:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8012814:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012818:	4318      	orrs	r0, r3
 801281a:	e7ab      	b.n	8012774 <__kernel_rem_pio2f+0x1e0>
 801281c:	f10c 0c01 	add.w	ip, ip, #1
 8012820:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8012824:	2c00      	cmp	r4, #0
 8012826:	d0f9      	beq.n	801281c <__kernel_rem_pio2f+0x288>
 8012828:	9b05      	ldr	r3, [sp, #20]
 801282a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801282e:	eb0d 0003 	add.w	r0, sp, r3
 8012832:	9b01      	ldr	r3, [sp, #4]
 8012834:	18f4      	adds	r4, r6, r3
 8012836:	ab1c      	add	r3, sp, #112	; 0x70
 8012838:	1c77      	adds	r7, r6, #1
 801283a:	384c      	subs	r0, #76	; 0x4c
 801283c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012840:	4466      	add	r6, ip
 8012842:	42be      	cmp	r6, r7
 8012844:	f6ff af0b 	blt.w	801265e <__kernel_rem_pio2f+0xca>
 8012848:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801284c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012850:	ee07 3a90 	vmov	s15, r3
 8012854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012858:	f04f 0c00 	mov.w	ip, #0
 801285c:	ece4 7a01 	vstmia	r4!, {s15}
 8012860:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 8012864:	46a1      	mov	r9, r4
 8012866:	458c      	cmp	ip, r1
 8012868:	dd07      	ble.n	801287a <__kernel_rem_pio2f+0x2e6>
 801286a:	ece0 7a01 	vstmia	r0!, {s15}
 801286e:	3701      	adds	r7, #1
 8012870:	e7e7      	b.n	8012842 <__kernel_rem_pio2f+0x2ae>
 8012872:	9804      	ldr	r0, [sp, #16]
 8012874:	f04f 0c01 	mov.w	ip, #1
 8012878:	e7d2      	b.n	8012820 <__kernel_rem_pio2f+0x28c>
 801287a:	ecfe 6a01 	vldmia	lr!, {s13}
 801287e:	ed39 7a01 	vldmdb	r9!, {s14}
 8012882:	f10c 0c01 	add.w	ip, ip, #1
 8012886:	eee6 7a87 	vfma.f32	s15, s13, s14
 801288a:	e7ec      	b.n	8012866 <__kernel_rem_pio2f+0x2d2>
 801288c:	3c01      	subs	r4, #1
 801288e:	e775      	b.n	801277c <__kernel_rem_pio2f+0x1e8>
 8012890:	0801397c 	.word	0x0801397c
 8012894:	08013950 	.word	0x08013950
 8012898:	43800000 	.word	0x43800000
 801289c:	3b800000 	.word	0x3b800000
 80128a0:	00000000 	.word	0x00000000
 80128a4:	9b03      	ldr	r3, [sp, #12]
 80128a6:	eeb0 0a48 	vmov.f32	s0, s16
 80128aa:	1a98      	subs	r0, r3, r2
 80128ac:	f000 fa80 	bl	8012db0 <scalbnf>
 80128b0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8012898 <__kernel_rem_pio2f+0x304>
 80128b4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80128b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128bc:	db19      	blt.n	80128f2 <__kernel_rem_pio2f+0x35e>
 80128be:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801289c <__kernel_rem_pio2f+0x308>
 80128c2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80128c6:	aa08      	add	r2, sp, #32
 80128c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128cc:	1c74      	adds	r4, r6, #1
 80128ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128d2:	3508      	adds	r5, #8
 80128d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80128d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80128e0:	ee10 3a10 	vmov	r3, s0
 80128e4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80128e8:	ee17 3a90 	vmov	r3, s15
 80128ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80128f0:	e74b      	b.n	801278a <__kernel_rem_pio2f+0x1f6>
 80128f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80128f6:	aa08      	add	r2, sp, #32
 80128f8:	ee10 3a10 	vmov	r3, s0
 80128fc:	4634      	mov	r4, r6
 80128fe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012902:	e742      	b.n	801278a <__kernel_rem_pio2f+0x1f6>
 8012904:	a808      	add	r0, sp, #32
 8012906:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801290a:	9001      	str	r0, [sp, #4]
 801290c:	ee07 0a90 	vmov	s15, r0
 8012910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012914:	3a01      	subs	r2, #1
 8012916:	ee67 7a80 	vmul.f32	s15, s15, s0
 801291a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801291e:	ed61 7a01 	vstmdb	r1!, {s15}
 8012922:	e73e      	b.n	80127a2 <__kernel_rem_pio2f+0x20e>
 8012924:	ecfc 6a01 	vldmia	ip!, {s13}
 8012928:	ecb6 7a01 	vldmia	r6!, {s14}
 801292c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012930:	3001      	adds	r0, #1
 8012932:	4550      	cmp	r0, sl
 8012934:	dc01      	bgt.n	801293a <__kernel_rem_pio2f+0x3a6>
 8012936:	4288      	cmp	r0, r1
 8012938:	ddf4      	ble.n	8012924 <__kernel_rem_pio2f+0x390>
 801293a:	a858      	add	r0, sp, #352	; 0x160
 801293c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012940:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8012944:	3a01      	subs	r2, #1
 8012946:	e730      	b.n	80127aa <__kernel_rem_pio2f+0x216>
 8012948:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801294a:	2a02      	cmp	r2, #2
 801294c:	dc09      	bgt.n	8012962 <__kernel_rem_pio2f+0x3ce>
 801294e:	2a00      	cmp	r2, #0
 8012950:	dc2a      	bgt.n	80129a8 <__kernel_rem_pio2f+0x414>
 8012952:	d043      	beq.n	80129dc <__kernel_rem_pio2f+0x448>
 8012954:	f009 0007 	and.w	r0, r9, #7
 8012958:	b059      	add	sp, #356	; 0x164
 801295a:	ecbd 8b04 	vpop	{d8-d9}
 801295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012962:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012964:	2b03      	cmp	r3, #3
 8012966:	d1f5      	bne.n	8012954 <__kernel_rem_pio2f+0x3c0>
 8012968:	ab30      	add	r3, sp, #192	; 0xc0
 801296a:	442b      	add	r3, r5
 801296c:	461a      	mov	r2, r3
 801296e:	4619      	mov	r1, r3
 8012970:	4620      	mov	r0, r4
 8012972:	2800      	cmp	r0, #0
 8012974:	f1a1 0104 	sub.w	r1, r1, #4
 8012978:	dc51      	bgt.n	8012a1e <__kernel_rem_pio2f+0x48a>
 801297a:	4621      	mov	r1, r4
 801297c:	2901      	cmp	r1, #1
 801297e:	f1a2 0204 	sub.w	r2, r2, #4
 8012982:	dc5c      	bgt.n	8012a3e <__kernel_rem_pio2f+0x4aa>
 8012984:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 8012988:	3304      	adds	r3, #4
 801298a:	2c01      	cmp	r4, #1
 801298c:	dc67      	bgt.n	8012a5e <__kernel_rem_pio2f+0x4ca>
 801298e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012992:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012996:	2f00      	cmp	r7, #0
 8012998:	d167      	bne.n	8012a6a <__kernel_rem_pio2f+0x4d6>
 801299a:	edc8 6a00 	vstr	s13, [r8]
 801299e:	ed88 7a01 	vstr	s14, [r8, #4]
 80129a2:	edc8 7a02 	vstr	s15, [r8, #8]
 80129a6:	e7d5      	b.n	8012954 <__kernel_rem_pio2f+0x3c0>
 80129a8:	aa30      	add	r2, sp, #192	; 0xc0
 80129aa:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 80129ae:	4413      	add	r3, r2
 80129b0:	4622      	mov	r2, r4
 80129b2:	2a00      	cmp	r2, #0
 80129b4:	da24      	bge.n	8012a00 <__kernel_rem_pio2f+0x46c>
 80129b6:	b34f      	cbz	r7, 8012a0c <__kernel_rem_pio2f+0x478>
 80129b8:	eef1 7a47 	vneg.f32	s15, s14
 80129bc:	edc8 7a00 	vstr	s15, [r8]
 80129c0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80129c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129c8:	aa31      	add	r2, sp, #196	; 0xc4
 80129ca:	2301      	movs	r3, #1
 80129cc:	429c      	cmp	r4, r3
 80129ce:	da20      	bge.n	8012a12 <__kernel_rem_pio2f+0x47e>
 80129d0:	b10f      	cbz	r7, 80129d6 <__kernel_rem_pio2f+0x442>
 80129d2:	eef1 7a67 	vneg.f32	s15, s15
 80129d6:	edc8 7a01 	vstr	s15, [r8, #4]
 80129da:	e7bb      	b.n	8012954 <__kernel_rem_pio2f+0x3c0>
 80129dc:	aa30      	add	r2, sp, #192	; 0xc0
 80129de:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80128a0 <__kernel_rem_pio2f+0x30c>
 80129e2:	4413      	add	r3, r2
 80129e4:	2c00      	cmp	r4, #0
 80129e6:	da05      	bge.n	80129f4 <__kernel_rem_pio2f+0x460>
 80129e8:	b10f      	cbz	r7, 80129ee <__kernel_rem_pio2f+0x45a>
 80129ea:	eef1 7a67 	vneg.f32	s15, s15
 80129ee:	edc8 7a00 	vstr	s15, [r8]
 80129f2:	e7af      	b.n	8012954 <__kernel_rem_pio2f+0x3c0>
 80129f4:	ed33 7a01 	vldmdb	r3!, {s14}
 80129f8:	3c01      	subs	r4, #1
 80129fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80129fe:	e7f1      	b.n	80129e4 <__kernel_rem_pio2f+0x450>
 8012a00:	ed73 7a01 	vldmdb	r3!, {s15}
 8012a04:	3a01      	subs	r2, #1
 8012a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a0a:	e7d2      	b.n	80129b2 <__kernel_rem_pio2f+0x41e>
 8012a0c:	eef0 7a47 	vmov.f32	s15, s14
 8012a10:	e7d4      	b.n	80129bc <__kernel_rem_pio2f+0x428>
 8012a12:	ecb2 7a01 	vldmia	r2!, {s14}
 8012a16:	3301      	adds	r3, #1
 8012a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a1c:	e7d6      	b.n	80129cc <__kernel_rem_pio2f+0x438>
 8012a1e:	edd1 7a00 	vldr	s15, [r1]
 8012a22:	edd1 6a01 	vldr	s13, [r1, #4]
 8012a26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012a2a:	3801      	subs	r0, #1
 8012a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a30:	ed81 7a00 	vstr	s14, [r1]
 8012a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a38:	edc1 7a01 	vstr	s15, [r1, #4]
 8012a3c:	e799      	b.n	8012972 <__kernel_rem_pio2f+0x3de>
 8012a3e:	edd2 7a00 	vldr	s15, [r2]
 8012a42:	edd2 6a01 	vldr	s13, [r2, #4]
 8012a46:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012a4a:	3901      	subs	r1, #1
 8012a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a50:	ed82 7a00 	vstr	s14, [r2]
 8012a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a58:	edc2 7a01 	vstr	s15, [r2, #4]
 8012a5c:	e78e      	b.n	801297c <__kernel_rem_pio2f+0x3e8>
 8012a5e:	ed33 7a01 	vldmdb	r3!, {s14}
 8012a62:	3c01      	subs	r4, #1
 8012a64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a68:	e78f      	b.n	801298a <__kernel_rem_pio2f+0x3f6>
 8012a6a:	eef1 6a66 	vneg.f32	s13, s13
 8012a6e:	eeb1 7a47 	vneg.f32	s14, s14
 8012a72:	edc8 6a00 	vstr	s13, [r8]
 8012a76:	ed88 7a01 	vstr	s14, [r8, #4]
 8012a7a:	eef1 7a67 	vneg.f32	s15, s15
 8012a7e:	e790      	b.n	80129a2 <__kernel_rem_pio2f+0x40e>

08012a80 <__kernel_sinf>:
 8012a80:	ee10 3a10 	vmov	r3, s0
 8012a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a88:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012a8c:	da04      	bge.n	8012a98 <__kernel_sinf+0x18>
 8012a8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a92:	ee17 3a90 	vmov	r3, s15
 8012a96:	b35b      	cbz	r3, 8012af0 <__kernel_sinf+0x70>
 8012a98:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012a9c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012af4 <__kernel_sinf+0x74>
 8012aa0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012af8 <__kernel_sinf+0x78>
 8012aa4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012aa8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012afc <__kernel_sinf+0x7c>
 8012aac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ab0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012b00 <__kernel_sinf+0x80>
 8012ab4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012ab8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012b04 <__kernel_sinf+0x84>
 8012abc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012ac0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ac4:	b930      	cbnz	r0, 8012ad4 <__kernel_sinf+0x54>
 8012ac6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012b08 <__kernel_sinf+0x88>
 8012aca:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012ace:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012ad2:	4770      	bx	lr
 8012ad4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012ad8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012adc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012ae0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012ae4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012b0c <__kernel_sinf+0x8c>
 8012ae8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012aec:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012af0:	4770      	bx	lr
 8012af2:	bf00      	nop
 8012af4:	2f2ec9d3 	.word	0x2f2ec9d3
 8012af8:	b2d72f34 	.word	0xb2d72f34
 8012afc:	3638ef1b 	.word	0x3638ef1b
 8012b00:	b9500d01 	.word	0xb9500d01
 8012b04:	3c088889 	.word	0x3c088889
 8012b08:	be2aaaab 	.word	0xbe2aaaab
 8012b0c:	3e2aaaab 	.word	0x3e2aaaab

08012b10 <floor>:
 8012b10:	ec51 0b10 	vmov	r0, r1, d0
 8012b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012b1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012b20:	2e13      	cmp	r6, #19
 8012b22:	ee10 5a10 	vmov	r5, s0
 8012b26:	ee10 8a10 	vmov	r8, s0
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	dc32      	bgt.n	8012b94 <floor+0x84>
 8012b2e:	2e00      	cmp	r6, #0
 8012b30:	da14      	bge.n	8012b5c <floor+0x4c>
 8012b32:	a333      	add	r3, pc, #204	; (adr r3, 8012c00 <floor+0xf0>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fbb0 	bl	800029c <__adddf3>
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	2300      	movs	r3, #0
 8012b40:	f7ed fff2 	bl	8000b28 <__aeabi_dcmpgt>
 8012b44:	b138      	cbz	r0, 8012b56 <floor+0x46>
 8012b46:	2c00      	cmp	r4, #0
 8012b48:	da57      	bge.n	8012bfa <floor+0xea>
 8012b4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012b4e:	431d      	orrs	r5, r3
 8012b50:	d001      	beq.n	8012b56 <floor+0x46>
 8012b52:	4c2d      	ldr	r4, [pc, #180]	; (8012c08 <floor+0xf8>)
 8012b54:	2500      	movs	r5, #0
 8012b56:	4621      	mov	r1, r4
 8012b58:	4628      	mov	r0, r5
 8012b5a:	e025      	b.n	8012ba8 <floor+0x98>
 8012b5c:	4f2b      	ldr	r7, [pc, #172]	; (8012c0c <floor+0xfc>)
 8012b5e:	4137      	asrs	r7, r6
 8012b60:	ea01 0307 	and.w	r3, r1, r7
 8012b64:	4303      	orrs	r3, r0
 8012b66:	d01f      	beq.n	8012ba8 <floor+0x98>
 8012b68:	a325      	add	r3, pc, #148	; (adr r3, 8012c00 <floor+0xf0>)
 8012b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6e:	f7ed fb95 	bl	800029c <__adddf3>
 8012b72:	2200      	movs	r2, #0
 8012b74:	2300      	movs	r3, #0
 8012b76:	f7ed ffd7 	bl	8000b28 <__aeabi_dcmpgt>
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	d0eb      	beq.n	8012b56 <floor+0x46>
 8012b7e:	2c00      	cmp	r4, #0
 8012b80:	bfbe      	ittt	lt
 8012b82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012b86:	fa43 f606 	asrlt.w	r6, r3, r6
 8012b8a:	19a4      	addlt	r4, r4, r6
 8012b8c:	ea24 0407 	bic.w	r4, r4, r7
 8012b90:	2500      	movs	r5, #0
 8012b92:	e7e0      	b.n	8012b56 <floor+0x46>
 8012b94:	2e33      	cmp	r6, #51	; 0x33
 8012b96:	dd0b      	ble.n	8012bb0 <floor+0xa0>
 8012b98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012b9c:	d104      	bne.n	8012ba8 <floor+0x98>
 8012b9e:	ee10 2a10 	vmov	r2, s0
 8012ba2:	460b      	mov	r3, r1
 8012ba4:	f7ed fb7a 	bl	800029c <__adddf3>
 8012ba8:	ec41 0b10 	vmov	d0, r0, r1
 8012bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb8:	fa23 f707 	lsr.w	r7, r3, r7
 8012bbc:	4207      	tst	r7, r0
 8012bbe:	d0f3      	beq.n	8012ba8 <floor+0x98>
 8012bc0:	a30f      	add	r3, pc, #60	; (adr r3, 8012c00 <floor+0xf0>)
 8012bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc6:	f7ed fb69 	bl	800029c <__adddf3>
 8012bca:	2200      	movs	r2, #0
 8012bcc:	2300      	movs	r3, #0
 8012bce:	f7ed ffab 	bl	8000b28 <__aeabi_dcmpgt>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d0bf      	beq.n	8012b56 <floor+0x46>
 8012bd6:	2c00      	cmp	r4, #0
 8012bd8:	da02      	bge.n	8012be0 <floor+0xd0>
 8012bda:	2e14      	cmp	r6, #20
 8012bdc:	d103      	bne.n	8012be6 <floor+0xd6>
 8012bde:	3401      	adds	r4, #1
 8012be0:	ea25 0507 	bic.w	r5, r5, r7
 8012be4:	e7b7      	b.n	8012b56 <floor+0x46>
 8012be6:	2301      	movs	r3, #1
 8012be8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012bec:	fa03 f606 	lsl.w	r6, r3, r6
 8012bf0:	4435      	add	r5, r6
 8012bf2:	4545      	cmp	r5, r8
 8012bf4:	bf38      	it	cc
 8012bf6:	18e4      	addcc	r4, r4, r3
 8012bf8:	e7f2      	b.n	8012be0 <floor+0xd0>
 8012bfa:	2500      	movs	r5, #0
 8012bfc:	462c      	mov	r4, r5
 8012bfe:	e7aa      	b.n	8012b56 <floor+0x46>
 8012c00:	8800759c 	.word	0x8800759c
 8012c04:	7e37e43c 	.word	0x7e37e43c
 8012c08:	bff00000 	.word	0xbff00000
 8012c0c:	000fffff 	.word	0x000fffff

08012c10 <scalbn>:
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	ec55 4b10 	vmov	r4, r5, d0
 8012c16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	462b      	mov	r3, r5
 8012c1e:	b99a      	cbnz	r2, 8012c48 <scalbn+0x38>
 8012c20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c24:	4323      	orrs	r3, r4
 8012c26:	d036      	beq.n	8012c96 <scalbn+0x86>
 8012c28:	4b39      	ldr	r3, [pc, #228]	; (8012d10 <scalbn+0x100>)
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	ee10 0a10 	vmov	r0, s0
 8012c30:	2200      	movs	r2, #0
 8012c32:	f7ed fce9 	bl	8000608 <__aeabi_dmul>
 8012c36:	4b37      	ldr	r3, [pc, #220]	; (8012d14 <scalbn+0x104>)
 8012c38:	429e      	cmp	r6, r3
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	da10      	bge.n	8012c62 <scalbn+0x52>
 8012c40:	a32b      	add	r3, pc, #172	; (adr r3, 8012cf0 <scalbn+0xe0>)
 8012c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c46:	e03a      	b.n	8012cbe <scalbn+0xae>
 8012c48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012c4c:	428a      	cmp	r2, r1
 8012c4e:	d10c      	bne.n	8012c6a <scalbn+0x5a>
 8012c50:	ee10 2a10 	vmov	r2, s0
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed fb20 	bl	800029c <__adddf3>
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	460d      	mov	r5, r1
 8012c60:	e019      	b.n	8012c96 <scalbn+0x86>
 8012c62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c66:	460b      	mov	r3, r1
 8012c68:	3a36      	subs	r2, #54	; 0x36
 8012c6a:	4432      	add	r2, r6
 8012c6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012c70:	428a      	cmp	r2, r1
 8012c72:	dd08      	ble.n	8012c86 <scalbn+0x76>
 8012c74:	2d00      	cmp	r5, #0
 8012c76:	a120      	add	r1, pc, #128	; (adr r1, 8012cf8 <scalbn+0xe8>)
 8012c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c7c:	da1c      	bge.n	8012cb8 <scalbn+0xa8>
 8012c7e:	a120      	add	r1, pc, #128	; (adr r1, 8012d00 <scalbn+0xf0>)
 8012c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c84:	e018      	b.n	8012cb8 <scalbn+0xa8>
 8012c86:	2a00      	cmp	r2, #0
 8012c88:	dd08      	ble.n	8012c9c <scalbn+0x8c>
 8012c8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c96:	ec45 4b10 	vmov	d0, r4, r5
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012ca0:	da19      	bge.n	8012cd6 <scalbn+0xc6>
 8012ca2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012ca6:	429e      	cmp	r6, r3
 8012ca8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012cac:	dd0a      	ble.n	8012cc4 <scalbn+0xb4>
 8012cae:	a112      	add	r1, pc, #72	; (adr r1, 8012cf8 <scalbn+0xe8>)
 8012cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d1e2      	bne.n	8012c7e <scalbn+0x6e>
 8012cb8:	a30f      	add	r3, pc, #60	; (adr r3, 8012cf8 <scalbn+0xe8>)
 8012cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbe:	f7ed fca3 	bl	8000608 <__aeabi_dmul>
 8012cc2:	e7cb      	b.n	8012c5c <scalbn+0x4c>
 8012cc4:	a10a      	add	r1, pc, #40	; (adr r1, 8012cf0 <scalbn+0xe0>)
 8012cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0b8      	beq.n	8012c40 <scalbn+0x30>
 8012cce:	a10e      	add	r1, pc, #56	; (adr r1, 8012d08 <scalbn+0xf8>)
 8012cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cd4:	e7b4      	b.n	8012c40 <scalbn+0x30>
 8012cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012cda:	3236      	adds	r2, #54	; 0x36
 8012cdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ce0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4b0c      	ldr	r3, [pc, #48]	; (8012d18 <scalbn+0x108>)
 8012ce8:	2200      	movs	r2, #0
 8012cea:	e7e8      	b.n	8012cbe <scalbn+0xae>
 8012cec:	f3af 8000 	nop.w
 8012cf0:	c2f8f359 	.word	0xc2f8f359
 8012cf4:	01a56e1f 	.word	0x01a56e1f
 8012cf8:	8800759c 	.word	0x8800759c
 8012cfc:	7e37e43c 	.word	0x7e37e43c
 8012d00:	8800759c 	.word	0x8800759c
 8012d04:	fe37e43c 	.word	0xfe37e43c
 8012d08:	c2f8f359 	.word	0xc2f8f359
 8012d0c:	81a56e1f 	.word	0x81a56e1f
 8012d10:	43500000 	.word	0x43500000
 8012d14:	ffff3cb0 	.word	0xffff3cb0
 8012d18:	3c900000 	.word	0x3c900000

08012d1c <fabsf>:
 8012d1c:	ee10 3a10 	vmov	r3, s0
 8012d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d24:	ee00 3a10 	vmov	s0, r3
 8012d28:	4770      	bx	lr
	...

08012d2c <floorf>:
 8012d2c:	ee10 3a10 	vmov	r3, s0
 8012d30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012d34:	3a7f      	subs	r2, #127	; 0x7f
 8012d36:	2a16      	cmp	r2, #22
 8012d38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012d3c:	dc2a      	bgt.n	8012d94 <floorf+0x68>
 8012d3e:	2a00      	cmp	r2, #0
 8012d40:	da11      	bge.n	8012d66 <floorf+0x3a>
 8012d42:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012da4 <floorf+0x78>
 8012d46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	dd05      	ble.n	8012d60 <floorf+0x34>
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	da23      	bge.n	8012da0 <floorf+0x74>
 8012d58:	4a13      	ldr	r2, [pc, #76]	; (8012da8 <floorf+0x7c>)
 8012d5a:	2900      	cmp	r1, #0
 8012d5c:	bf18      	it	ne
 8012d5e:	4613      	movne	r3, r2
 8012d60:	ee00 3a10 	vmov	s0, r3
 8012d64:	4770      	bx	lr
 8012d66:	4911      	ldr	r1, [pc, #68]	; (8012dac <floorf+0x80>)
 8012d68:	4111      	asrs	r1, r2
 8012d6a:	420b      	tst	r3, r1
 8012d6c:	d0fa      	beq.n	8012d64 <floorf+0x38>
 8012d6e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012da4 <floorf+0x78>
 8012d72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7e:	ddef      	ble.n	8012d60 <floorf+0x34>
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	bfbe      	ittt	lt
 8012d84:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012d88:	fa40 f202 	asrlt.w	r2, r0, r2
 8012d8c:	189b      	addlt	r3, r3, r2
 8012d8e:	ea23 0301 	bic.w	r3, r3, r1
 8012d92:	e7e5      	b.n	8012d60 <floorf+0x34>
 8012d94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012d98:	d3e4      	bcc.n	8012d64 <floorf+0x38>
 8012d9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d9e:	4770      	bx	lr
 8012da0:	2300      	movs	r3, #0
 8012da2:	e7dd      	b.n	8012d60 <floorf+0x34>
 8012da4:	7149f2ca 	.word	0x7149f2ca
 8012da8:	bf800000 	.word	0xbf800000
 8012dac:	007fffff 	.word	0x007fffff

08012db0 <scalbnf>:
 8012db0:	ee10 3a10 	vmov	r3, s0
 8012db4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012db8:	d025      	beq.n	8012e06 <scalbnf+0x56>
 8012dba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012dbe:	d302      	bcc.n	8012dc6 <scalbnf+0x16>
 8012dc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012dc4:	4770      	bx	lr
 8012dc6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012dca:	d122      	bne.n	8012e12 <scalbnf+0x62>
 8012dcc:	4b2a      	ldr	r3, [pc, #168]	; (8012e78 <scalbnf+0xc8>)
 8012dce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012e7c <scalbnf+0xcc>
 8012dd2:	4298      	cmp	r0, r3
 8012dd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012dd8:	db16      	blt.n	8012e08 <scalbnf+0x58>
 8012dda:	ee10 3a10 	vmov	r3, s0
 8012dde:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012de2:	3a19      	subs	r2, #25
 8012de4:	4402      	add	r2, r0
 8012de6:	2afe      	cmp	r2, #254	; 0xfe
 8012de8:	dd15      	ble.n	8012e16 <scalbnf+0x66>
 8012dea:	ee10 3a10 	vmov	r3, s0
 8012dee:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012e80 <scalbnf+0xd0>
 8012df2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012e84 <scalbnf+0xd4>
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	eeb0 7a67 	vmov.f32	s14, s15
 8012dfc:	bfb8      	it	lt
 8012dfe:	eef0 7a66 	vmovlt.f32	s15, s13
 8012e02:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012e06:	4770      	bx	lr
 8012e08:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012e88 <scalbnf+0xd8>
 8012e0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012e10:	4770      	bx	lr
 8012e12:	0dd2      	lsrs	r2, r2, #23
 8012e14:	e7e6      	b.n	8012de4 <scalbnf+0x34>
 8012e16:	2a00      	cmp	r2, #0
 8012e18:	dd06      	ble.n	8012e28 <scalbnf+0x78>
 8012e1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012e1e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012e22:	ee00 3a10 	vmov	s0, r3
 8012e26:	4770      	bx	lr
 8012e28:	f112 0f16 	cmn.w	r2, #22
 8012e2c:	da1a      	bge.n	8012e64 <scalbnf+0xb4>
 8012e2e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e32:	4298      	cmp	r0, r3
 8012e34:	ee10 3a10 	vmov	r3, s0
 8012e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e3c:	dd0a      	ble.n	8012e54 <scalbnf+0xa4>
 8012e3e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012e80 <scalbnf+0xd0>
 8012e42:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012e84 <scalbnf+0xd4>
 8012e46:	eef0 7a40 	vmov.f32	s15, s0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	bf18      	it	ne
 8012e4e:	eeb0 0a47 	vmovne.f32	s0, s14
 8012e52:	e7db      	b.n	8012e0c <scalbnf+0x5c>
 8012e54:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012e88 <scalbnf+0xd8>
 8012e58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012e8c <scalbnf+0xdc>
 8012e5c:	eef0 7a40 	vmov.f32	s15, s0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	e7f3      	b.n	8012e4c <scalbnf+0x9c>
 8012e64:	3219      	adds	r2, #25
 8012e66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012e6a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012e6e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012e90 <scalbnf+0xe0>
 8012e72:	ee07 3a10 	vmov	s14, r3
 8012e76:	e7c4      	b.n	8012e02 <scalbnf+0x52>
 8012e78:	ffff3cb0 	.word	0xffff3cb0
 8012e7c:	4c000000 	.word	0x4c000000
 8012e80:	7149f2ca 	.word	0x7149f2ca
 8012e84:	f149f2ca 	.word	0xf149f2ca
 8012e88:	0da24260 	.word	0x0da24260
 8012e8c:	8da24260 	.word	0x8da24260
 8012e90:	33000000 	.word	0x33000000

08012e94 <_init>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	bf00      	nop
 8012e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e9a:	bc08      	pop	{r3}
 8012e9c:	469e      	mov	lr, r3
 8012e9e:	4770      	bx	lr

08012ea0 <_fini>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	bf00      	nop
 8012ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ea6:	bc08      	pop	{r3}
 8012ea8:	469e      	mov	lr, r3
 8012eaa:	4770      	bx	lr
